# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadOnly(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact_staleness: str=None, max_staleness: str=None, min_read_timestamp: str=None, read_timestamp: str=None, return_read_timestamp: bool=None, strong: bool=None):
        """ReadOnly - a model defined in OpenAPI

        :param exact_staleness: The exact_staleness of this ReadOnly.
        :param max_staleness: The max_staleness of this ReadOnly.
        :param min_read_timestamp: The min_read_timestamp of this ReadOnly.
        :param read_timestamp: The read_timestamp of this ReadOnly.
        :param return_read_timestamp: The return_read_timestamp of this ReadOnly.
        :param strong: The strong of this ReadOnly.
        """
        self.openapi_types = {
            'exact_staleness': str,
            'max_staleness': str,
            'min_read_timestamp': str,
            'read_timestamp': str,
            'return_read_timestamp': bool,
            'strong': bool
        }

        self.attribute_map = {
            'exact_staleness': 'exactStaleness',
            'max_staleness': 'maxStaleness',
            'min_read_timestamp': 'minReadTimestamp',
            'read_timestamp': 'readTimestamp',
            'return_read_timestamp': 'returnReadTimestamp',
            'strong': 'strong'
        }

        self._exact_staleness = exact_staleness
        self._max_staleness = max_staleness
        self._min_read_timestamp = min_read_timestamp
        self._read_timestamp = read_timestamp
        self._return_read_timestamp = return_read_timestamp
        self._strong = strong

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadOnly':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadOnly of this ReadOnly.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact_staleness(self):
        """Gets the exact_staleness of this ReadOnly.

        Executes all reads at a timestamp that is `exact_staleness` old. The timestamp is chosen soon after the read is started. Guarantees that all writes that have committed more than the specified number of seconds ago are visible. Because Cloud Spanner chooses the exact timestamp, this mode works even if the client's local clock is substantially skewed from Cloud Spanner commit timestamps. Useful for reading at nearby replicas without the distributed timestamp negotiation overhead of `max_staleness`.

        :return: The exact_staleness of this ReadOnly.
        :rtype: str
        """
        return self._exact_staleness

    @exact_staleness.setter
    def exact_staleness(self, exact_staleness):
        """Sets the exact_staleness of this ReadOnly.

        Executes all reads at a timestamp that is `exact_staleness` old. The timestamp is chosen soon after the read is started. Guarantees that all writes that have committed more than the specified number of seconds ago are visible. Because Cloud Spanner chooses the exact timestamp, this mode works even if the client's local clock is substantially skewed from Cloud Spanner commit timestamps. Useful for reading at nearby replicas without the distributed timestamp negotiation overhead of `max_staleness`.

        :param exact_staleness: The exact_staleness of this ReadOnly.
        :type exact_staleness: str
        """

        self._exact_staleness = exact_staleness

    @property
    def max_staleness(self):
        """Gets the max_staleness of this ReadOnly.

        Read data at a timestamp >= `NOW - max_staleness` seconds. Guarantees that all writes that have committed more than the specified number of seconds ago are visible. Because Cloud Spanner chooses the exact timestamp, this mode works even if the client's local clock is substantially skewed from Cloud Spanner commit timestamps. Useful for reading the freshest data available at a nearby replica, while bounding the possible staleness if the local replica has fallen behind. Note that this option can only be used in single-use transactions.

        :return: The max_staleness of this ReadOnly.
        :rtype: str
        """
        return self._max_staleness

    @max_staleness.setter
    def max_staleness(self, max_staleness):
        """Sets the max_staleness of this ReadOnly.

        Read data at a timestamp >= `NOW - max_staleness` seconds. Guarantees that all writes that have committed more than the specified number of seconds ago are visible. Because Cloud Spanner chooses the exact timestamp, this mode works even if the client's local clock is substantially skewed from Cloud Spanner commit timestamps. Useful for reading the freshest data available at a nearby replica, while bounding the possible staleness if the local replica has fallen behind. Note that this option can only be used in single-use transactions.

        :param max_staleness: The max_staleness of this ReadOnly.
        :type max_staleness: str
        """

        self._max_staleness = max_staleness

    @property
    def min_read_timestamp(self):
        """Gets the min_read_timestamp of this ReadOnly.

        Executes all reads at a timestamp >= `min_read_timestamp`. This is useful for requesting fresher data than some previous read, or data that is fresh enough to observe the effects of some previously committed transaction whose timestamp is known. Note that this option can only be used in single-use transactions. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :return: The min_read_timestamp of this ReadOnly.
        :rtype: str
        """
        return self._min_read_timestamp

    @min_read_timestamp.setter
    def min_read_timestamp(self, min_read_timestamp):
        """Sets the min_read_timestamp of this ReadOnly.

        Executes all reads at a timestamp >= `min_read_timestamp`. This is useful for requesting fresher data than some previous read, or data that is fresh enough to observe the effects of some previously committed transaction whose timestamp is known. Note that this option can only be used in single-use transactions. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :param min_read_timestamp: The min_read_timestamp of this ReadOnly.
        :type min_read_timestamp: str
        """

        self._min_read_timestamp = min_read_timestamp

    @property
    def read_timestamp(self):
        """Gets the read_timestamp of this ReadOnly.

        Executes all reads at the given timestamp. Unlike other modes, reads at a specific timestamp are repeatable; the same read at the same timestamp always returns the same data. If the timestamp is in the future, the read will block until the specified timestamp, modulo the read's deadline. Useful for large scale consistent reads such as mapreduces, or for coordinating many reads against a consistent snapshot of the data. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :return: The read_timestamp of this ReadOnly.
        :rtype: str
        """
        return self._read_timestamp

    @read_timestamp.setter
    def read_timestamp(self, read_timestamp):
        """Sets the read_timestamp of this ReadOnly.

        Executes all reads at the given timestamp. Unlike other modes, reads at a specific timestamp are repeatable; the same read at the same timestamp always returns the same data. If the timestamp is in the future, the read will block until the specified timestamp, modulo the read's deadline. Useful for large scale consistent reads such as mapreduces, or for coordinating many reads against a consistent snapshot of the data. A timestamp in RFC3339 UTC \\\"Zulu\\\" format, accurate to nanoseconds. Example: `\"2014-10-02T15:01:23.045123456Z\"`.

        :param read_timestamp: The read_timestamp of this ReadOnly.
        :type read_timestamp: str
        """

        self._read_timestamp = read_timestamp

    @property
    def return_read_timestamp(self):
        """Gets the return_read_timestamp of this ReadOnly.

        If true, the Cloud Spanner-selected read timestamp is included in the Transaction message that describes the transaction.

        :return: The return_read_timestamp of this ReadOnly.
        :rtype: bool
        """
        return self._return_read_timestamp

    @return_read_timestamp.setter
    def return_read_timestamp(self, return_read_timestamp):
        """Sets the return_read_timestamp of this ReadOnly.

        If true, the Cloud Spanner-selected read timestamp is included in the Transaction message that describes the transaction.

        :param return_read_timestamp: The return_read_timestamp of this ReadOnly.
        :type return_read_timestamp: bool
        """

        self._return_read_timestamp = return_read_timestamp

    @property
    def strong(self):
        """Gets the strong of this ReadOnly.

        Read at a timestamp where all previously committed transactions are visible.

        :return: The strong of this ReadOnly.
        :rtype: bool
        """
        return self._strong

    @strong.setter
    def strong(self, strong):
        """Sets the strong of this ReadOnly.

        Read at a timestamp where all previously committed transactions are visible.

        :param strong: The strong of this ReadOnly.
        :type strong: bool
        """

        self._strong = strong
