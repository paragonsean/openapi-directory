# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.read_only import ReadOnly
from openapi_server.models.read_write import ReadWrite
from openapi_server import util


class TransactionOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partitioned_dml: object=None, read_only: ReadOnly=None, read_write: ReadWrite=None):
        """TransactionOptions - a model defined in OpenAPI

        :param partitioned_dml: The partitioned_dml of this TransactionOptions.
        :param read_only: The read_only of this TransactionOptions.
        :param read_write: The read_write of this TransactionOptions.
        """
        self.openapi_types = {
            'partitioned_dml': object,
            'read_only': ReadOnly,
            'read_write': ReadWrite
        }

        self.attribute_map = {
            'partitioned_dml': 'partitionedDml',
            'read_only': 'readOnly',
            'read_write': 'readWrite'
        }

        self._partitioned_dml = partitioned_dml
        self._read_only = read_only
        self._read_write = read_write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionOptions of this TransactionOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partitioned_dml(self):
        """Gets the partitioned_dml of this TransactionOptions.

        Message type to initiate a Partitioned DML transaction.

        :return: The partitioned_dml of this TransactionOptions.
        :rtype: object
        """
        return self._partitioned_dml

    @partitioned_dml.setter
    def partitioned_dml(self, partitioned_dml):
        """Sets the partitioned_dml of this TransactionOptions.

        Message type to initiate a Partitioned DML transaction.

        :param partitioned_dml: The partitioned_dml of this TransactionOptions.
        :type partitioned_dml: object
        """

        self._partitioned_dml = partitioned_dml

    @property
    def read_only(self):
        """Gets the read_only of this TransactionOptions.


        :return: The read_only of this TransactionOptions.
        :rtype: ReadOnly
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this TransactionOptions.


        :param read_only: The read_only of this TransactionOptions.
        :type read_only: ReadOnly
        """

        self._read_only = read_only

    @property
    def read_write(self):
        """Gets the read_write of this TransactionOptions.


        :return: The read_write of this TransactionOptions.
        :rtype: ReadWrite
        """
        return self._read_write

    @read_write.setter
    def read_write(self, read_write):
        """Sets the read_write of this TransactionOptions.


        :param read_write: The read_write of this TransactionOptions.
        :type read_write: ReadWrite
        """

        self._read_write = read_write
