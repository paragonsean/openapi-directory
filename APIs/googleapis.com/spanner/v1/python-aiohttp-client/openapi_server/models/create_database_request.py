# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server import util


class CreateDatabaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_statement: str=None, database_dialect: str=None, encryption_config: EncryptionConfig=None, extra_statements: List[str]=None, proto_descriptors: str=None):
        """CreateDatabaseRequest - a model defined in OpenAPI

        :param create_statement: The create_statement of this CreateDatabaseRequest.
        :param database_dialect: The database_dialect of this CreateDatabaseRequest.
        :param encryption_config: The encryption_config of this CreateDatabaseRequest.
        :param extra_statements: The extra_statements of this CreateDatabaseRequest.
        :param proto_descriptors: The proto_descriptors of this CreateDatabaseRequest.
        """
        self.openapi_types = {
            'create_statement': str,
            'database_dialect': str,
            'encryption_config': EncryptionConfig,
            'extra_statements': List[str],
            'proto_descriptors': str
        }

        self.attribute_map = {
            'create_statement': 'createStatement',
            'database_dialect': 'databaseDialect',
            'encryption_config': 'encryptionConfig',
            'extra_statements': 'extraStatements',
            'proto_descriptors': 'protoDescriptors'
        }

        self._create_statement = create_statement
        self._database_dialect = database_dialect
        self._encryption_config = encryption_config
        self._extra_statements = extra_statements
        self._proto_descriptors = proto_descriptors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatabaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDatabaseRequest of this CreateDatabaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_statement(self):
        """Gets the create_statement of this CreateDatabaseRequest.

        Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).

        :return: The create_statement of this CreateDatabaseRequest.
        :rtype: str
        """
        return self._create_statement

    @create_statement.setter
    def create_statement(self, create_statement):
        """Sets the create_statement of this CreateDatabaseRequest.

        Required. A `CREATE DATABASE` statement, which specifies the ID of the new database. The database ID must conform to the regular expression `a-z*[a-z0-9]` and be between 2 and 30 characters in length. If the database ID is a reserved word or if it contains a hyphen, the database ID must be enclosed in backticks (`` ` ``).

        :param create_statement: The create_statement of this CreateDatabaseRequest.
        :type create_statement: str
        """

        self._create_statement = create_statement

    @property
    def database_dialect(self):
        """Gets the database_dialect of this CreateDatabaseRequest.

        Optional. The dialect of the Cloud Spanner Database.

        :return: The database_dialect of this CreateDatabaseRequest.
        :rtype: str
        """
        return self._database_dialect

    @database_dialect.setter
    def database_dialect(self, database_dialect):
        """Sets the database_dialect of this CreateDatabaseRequest.

        Optional. The dialect of the Cloud Spanner Database.

        :param database_dialect: The database_dialect of this CreateDatabaseRequest.
        :type database_dialect: str
        """
        allowed_values = ["DATABASE_DIALECT_UNSPECIFIED", "GOOGLE_STANDARD_SQL", "POSTGRESQL"]  # noqa: E501
        if database_dialect not in allowed_values:
            raise ValueError(
                "Invalid value for `database_dialect` ({0}), must be one of {1}"
                .format(database_dialect, allowed_values)
            )

        self._database_dialect = database_dialect

    @property
    def encryption_config(self):
        """Gets the encryption_config of this CreateDatabaseRequest.


        :return: The encryption_config of this CreateDatabaseRequest.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this CreateDatabaseRequest.


        :param encryption_config: The encryption_config of this CreateDatabaseRequest.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def extra_statements(self):
        """Gets the extra_statements of this CreateDatabaseRequest.

        Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.

        :return: The extra_statements of this CreateDatabaseRequest.
        :rtype: List[str]
        """
        return self._extra_statements

    @extra_statements.setter
    def extra_statements(self, extra_statements):
        """Sets the extra_statements of this CreateDatabaseRequest.

        Optional. A list of DDL statements to run inside the newly created database. Statements can create tables, indexes, etc. These statements execute atomically with the creation of the database: if there is an error in any statement, the database is not created.

        :param extra_statements: The extra_statements of this CreateDatabaseRequest.
        :type extra_statements: List[str]
        """

        self._extra_statements = extra_statements

    @property
    def proto_descriptors(self):
        """Gets the proto_descriptors of this CreateDatabaseRequest.

        Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements in 'extra_statements' above. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run `protoc` with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run ``` $protoc --proto_path=/app_path --proto_path=/lib_path \\ --include_imports \\ --descriptor_set_out=descriptors.data \\ moon/shot/app.proto ``` For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).

        :return: The proto_descriptors of this CreateDatabaseRequest.
        :rtype: str
        """
        return self._proto_descriptors

    @proto_descriptors.setter
    def proto_descriptors(self, proto_descriptors):
        """Sets the proto_descriptors of this CreateDatabaseRequest.

        Optional. Proto descriptors used by CREATE/ALTER PROTO BUNDLE statements in 'extra_statements' above. Contains a protobuf-serialized [google.protobuf.FileDescriptorSet](https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/descriptor.proto). To generate it, [install](https://grpc.io/docs/protoc-installation/) and run `protoc` with --include_imports and --descriptor_set_out. For example, to generate for moon/shot/app.proto, run ``` $protoc --proto_path=/app_path --proto_path=/lib_path \\ --include_imports \\ --descriptor_set_out=descriptors.data \\ moon/shot/app.proto ``` For more details, see protobuffer [self description](https://developers.google.com/protocol-buffers/docs/techniques#self-description).

        :param proto_descriptors: The proto_descriptors of this CreateDatabaseRequest.
        :type proto_descriptors: str
        """

        self._proto_descriptors = proto_descriptors
