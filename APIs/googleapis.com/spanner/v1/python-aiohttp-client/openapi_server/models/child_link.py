# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChildLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, child_index: int=None, type: str=None, variable: str=None):
        """ChildLink - a model defined in OpenAPI

        :param child_index: The child_index of this ChildLink.
        :param type: The type of this ChildLink.
        :param variable: The variable of this ChildLink.
        """
        self.openapi_types = {
            'child_index': int,
            'type': str,
            'variable': str
        }

        self.attribute_map = {
            'child_index': 'childIndex',
            'type': 'type',
            'variable': 'variable'
        }

        self._child_index = child_index
        self._type = type
        self._variable = variable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChildLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChildLink of this ChildLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def child_index(self):
        """Gets the child_index of this ChildLink.

        The node to which the link points.

        :return: The child_index of this ChildLink.
        :rtype: int
        """
        return self._child_index

    @child_index.setter
    def child_index(self, child_index):
        """Sets the child_index of this ChildLink.

        The node to which the link points.

        :param child_index: The child_index of this ChildLink.
        :type child_index: int
        """

        self._child_index = child_index

    @property
    def type(self):
        """Gets the type of this ChildLink.

        The type of the link. For example, in Hash Joins this could be used to distinguish between the build child and the probe child, or in the case of the child being an output variable, to represent the tag associated with the output variable.

        :return: The type of this ChildLink.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChildLink.

        The type of the link. For example, in Hash Joins this could be used to distinguish between the build child and the probe child, or in the case of the child being an output variable, to represent the tag associated with the output variable.

        :param type: The type of this ChildLink.
        :type type: str
        """

        self._type = type

    @property
    def variable(self):
        """Gets the variable of this ChildLink.

        Only present if the child node is SCALAR and corresponds to an output variable of the parent node. The field carries the name of the output variable. For example, a `TableScan` operator that reads rows from a table will have child links to the `SCALAR` nodes representing the output variables created for each column that is read by the operator. The corresponding `variable` fields will be set to the variable names assigned to the columns.

        :return: The variable of this ChildLink.
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this ChildLink.

        Only present if the child node is SCALAR and corresponds to an output variable of the parent node. The field carries the name of the output variable. For example, a `TableScan` operator that reads rows from a table will have child links to the `SCALAR` nodes representing the output variables created for each column that is read by the operator. The corresponding `variable` fields will be set to the variable names assigned to the columns.

        :param variable: The variable of this ChildLink.
        :type variable: str
        """

        self._variable = variable
