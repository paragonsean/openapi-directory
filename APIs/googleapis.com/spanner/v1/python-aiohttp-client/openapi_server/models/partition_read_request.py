# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_set import KeySet
from openapi_server.models.partition_options import PartitionOptions
from openapi_server.models.transaction_selector import TransactionSelector
from openapi_server import util


class PartitionReadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, index: str=None, key_set: KeySet=None, partition_options: PartitionOptions=None, table: str=None, transaction: TransactionSelector=None):
        """PartitionReadRequest - a model defined in OpenAPI

        :param columns: The columns of this PartitionReadRequest.
        :param index: The index of this PartitionReadRequest.
        :param key_set: The key_set of this PartitionReadRequest.
        :param partition_options: The partition_options of this PartitionReadRequest.
        :param table: The table of this PartitionReadRequest.
        :param transaction: The transaction of this PartitionReadRequest.
        """
        self.openapi_types = {
            'columns': List[str],
            'index': str,
            'key_set': KeySet,
            'partition_options': PartitionOptions,
            'table': str,
            'transaction': TransactionSelector
        }

        self.attribute_map = {
            'columns': 'columns',
            'index': 'index',
            'key_set': 'keySet',
            'partition_options': 'partitionOptions',
            'table': 'table',
            'transaction': 'transaction'
        }

        self._columns = columns
        self._index = index
        self._key_set = key_set
        self._partition_options = partition_options
        self._table = table
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionReadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionReadRequest of this PartitionReadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this PartitionReadRequest.

        The columns of table to be returned for each row matching this request.

        :return: The columns of this PartitionReadRequest.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this PartitionReadRequest.

        The columns of table to be returned for each row matching this request.

        :param columns: The columns of this PartitionReadRequest.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def index(self):
        """Gets the index of this PartitionReadRequest.

        If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.

        :return: The index of this PartitionReadRequest.
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PartitionReadRequest.

        If non-empty, the name of an index on table. This index is used instead of the table primary key when interpreting key_set and sorting result rows. See key_set for further information.

        :param index: The index of this PartitionReadRequest.
        :type index: str
        """

        self._index = index

    @property
    def key_set(self):
        """Gets the key_set of this PartitionReadRequest.


        :return: The key_set of this PartitionReadRequest.
        :rtype: KeySet
        """
        return self._key_set

    @key_set.setter
    def key_set(self, key_set):
        """Sets the key_set of this PartitionReadRequest.


        :param key_set: The key_set of this PartitionReadRequest.
        :type key_set: KeySet
        """

        self._key_set = key_set

    @property
    def partition_options(self):
        """Gets the partition_options of this PartitionReadRequest.


        :return: The partition_options of this PartitionReadRequest.
        :rtype: PartitionOptions
        """
        return self._partition_options

    @partition_options.setter
    def partition_options(self, partition_options):
        """Sets the partition_options of this PartitionReadRequest.


        :param partition_options: The partition_options of this PartitionReadRequest.
        :type partition_options: PartitionOptions
        """

        self._partition_options = partition_options

    @property
    def table(self):
        """Gets the table of this PartitionReadRequest.

        Required. The name of the table in the database to be read.

        :return: The table of this PartitionReadRequest.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this PartitionReadRequest.

        Required. The name of the table in the database to be read.

        :param table: The table of this PartitionReadRequest.
        :type table: str
        """

        self._table = table

    @property
    def transaction(self):
        """Gets the transaction of this PartitionReadRequest.


        :return: The transaction of this PartitionReadRequest.
        :rtype: TransactionSelector
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this PartitionReadRequest.


        :param transaction: The transaction of this PartitionReadRequest.
        :type transaction: TransactionSelector
        """

        self._transaction = transaction
