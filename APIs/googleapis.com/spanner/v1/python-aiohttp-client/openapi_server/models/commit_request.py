# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mutation import Mutation
from openapi_server.models.request_options import RequestOptions
from openapi_server.models.transaction_options import TransactionOptions
from openapi_server import util


class CommitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_commit_delay: str=None, mutations: List[Mutation]=None, request_options: RequestOptions=None, return_commit_stats: bool=None, single_use_transaction: TransactionOptions=None, transaction_id: str=None):
        """CommitRequest - a model defined in OpenAPI

        :param max_commit_delay: The max_commit_delay of this CommitRequest.
        :param mutations: The mutations of this CommitRequest.
        :param request_options: The request_options of this CommitRequest.
        :param return_commit_stats: The return_commit_stats of this CommitRequest.
        :param single_use_transaction: The single_use_transaction of this CommitRequest.
        :param transaction_id: The transaction_id of this CommitRequest.
        """
        self.openapi_types = {
            'max_commit_delay': str,
            'mutations': List[Mutation],
            'request_options': RequestOptions,
            'return_commit_stats': bool,
            'single_use_transaction': TransactionOptions,
            'transaction_id': str
        }

        self.attribute_map = {
            'max_commit_delay': 'maxCommitDelay',
            'mutations': 'mutations',
            'request_options': 'requestOptions',
            'return_commit_stats': 'returnCommitStats',
            'single_use_transaction': 'singleUseTransaction',
            'transaction_id': 'transactionId'
        }

        self._max_commit_delay = max_commit_delay
        self._mutations = mutations
        self._request_options = request_options
        self._return_commit_stats = return_commit_stats
        self._single_use_transaction = single_use_transaction
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitRequest of this CommitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_commit_delay(self):
        """Gets the max_commit_delay of this CommitRequest.

        Optional. The amount of latency this request is willing to incur in order to improve throughput. If this field is not set, Spanner assumes requests are relatively latency sensitive and automatically determines an appropriate delay time. You can specify a batching delay value between 0 and 500 ms.

        :return: The max_commit_delay of this CommitRequest.
        :rtype: str
        """
        return self._max_commit_delay

    @max_commit_delay.setter
    def max_commit_delay(self, max_commit_delay):
        """Sets the max_commit_delay of this CommitRequest.

        Optional. The amount of latency this request is willing to incur in order to improve throughput. If this field is not set, Spanner assumes requests are relatively latency sensitive and automatically determines an appropriate delay time. You can specify a batching delay value between 0 and 500 ms.

        :param max_commit_delay: The max_commit_delay of this CommitRequest.
        :type max_commit_delay: str
        """

        self._max_commit_delay = max_commit_delay

    @property
    def mutations(self):
        """Gets the mutations of this CommitRequest.

        The mutations to be executed when this transaction commits. All mutations are applied atomically, in the order they appear in this list.

        :return: The mutations of this CommitRequest.
        :rtype: List[Mutation]
        """
        return self._mutations

    @mutations.setter
    def mutations(self, mutations):
        """Sets the mutations of this CommitRequest.

        The mutations to be executed when this transaction commits. All mutations are applied atomically, in the order they appear in this list.

        :param mutations: The mutations of this CommitRequest.
        :type mutations: List[Mutation]
        """

        self._mutations = mutations

    @property
    def request_options(self):
        """Gets the request_options of this CommitRequest.


        :return: The request_options of this CommitRequest.
        :rtype: RequestOptions
        """
        return self._request_options

    @request_options.setter
    def request_options(self, request_options):
        """Sets the request_options of this CommitRequest.


        :param request_options: The request_options of this CommitRequest.
        :type request_options: RequestOptions
        """

        self._request_options = request_options

    @property
    def return_commit_stats(self):
        """Gets the return_commit_stats of this CommitRequest.

        If `true`, then statistics related to the transaction will be included in the CommitResponse. Default value is `false`.

        :return: The return_commit_stats of this CommitRequest.
        :rtype: bool
        """
        return self._return_commit_stats

    @return_commit_stats.setter
    def return_commit_stats(self, return_commit_stats):
        """Sets the return_commit_stats of this CommitRequest.

        If `true`, then statistics related to the transaction will be included in the CommitResponse. Default value is `false`.

        :param return_commit_stats: The return_commit_stats of this CommitRequest.
        :type return_commit_stats: bool
        """

        self._return_commit_stats = return_commit_stats

    @property
    def single_use_transaction(self):
        """Gets the single_use_transaction of this CommitRequest.


        :return: The single_use_transaction of this CommitRequest.
        :rtype: TransactionOptions
        """
        return self._single_use_transaction

    @single_use_transaction.setter
    def single_use_transaction(self, single_use_transaction):
        """Sets the single_use_transaction of this CommitRequest.


        :param single_use_transaction: The single_use_transaction of this CommitRequest.
        :type single_use_transaction: TransactionOptions
        """

        self._single_use_transaction = single_use_transaction

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CommitRequest.

        Commit a previously-started transaction.

        :return: The transaction_id of this CommitRequest.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CommitRequest.

        Commit a previously-started transaction.

        :param transaction_id: The transaction_id of this CommitRequest.
        :type transaction_id: str
        """

        self._transaction_id = transaction_id
