/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPartitionReadRequest.h
 *
 * The request for PartitionRead
 */

#ifndef OAIPartitionReadRequest_H
#define OAIPartitionReadRequest_H

#include <QJsonObject>

#include "OAIKeySet.h"
#include "OAIPartitionOptions.h"
#include "OAITransactionSelector.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeySet;
class OAIPartitionOptions;
class OAITransactionSelector;

class OAIPartitionReadRequest : public OAIObject {
public:
    OAIPartitionReadRequest();
    OAIPartitionReadRequest(QString json);
    ~OAIPartitionReadRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getColumns() const;
    void setColumns(const QList<QString> &columns);
    bool is_columns_Set() const;
    bool is_columns_Valid() const;

    QString getIndex() const;
    void setIndex(const QString &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIKeySet getKeySet() const;
    void setKeySet(const OAIKeySet &key_set);
    bool is_key_set_Set() const;
    bool is_key_set_Valid() const;

    OAIPartitionOptions getPartitionOptions() const;
    void setPartitionOptions(const OAIPartitionOptions &partition_options);
    bool is_partition_options_Set() const;
    bool is_partition_options_Valid() const;

    QString getTable() const;
    void setTable(const QString &table);
    bool is_table_Set() const;
    bool is_table_Valid() const;

    OAITransactionSelector getTransaction() const;
    void setTransaction(const OAITransactionSelector &transaction);
    bool is_transaction_Set() const;
    bool is_transaction_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_columns;
    bool m_columns_isSet;
    bool m_columns_isValid;

    QString m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIKeySet m_key_set;
    bool m_key_set_isSet;
    bool m_key_set_isValid;

    OAIPartitionOptions m_partition_options;
    bool m_partition_options_isSet;
    bool m_partition_options_isValid;

    QString m_table;
    bool m_table_isSet;
    bool m_table_isValid;

    OAITransactionSelector m_transaction;
    bool m_transaction_isSet;
    bool m_transaction_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPartitionReadRequest)

#endif // OAIPartitionReadRequest_H
