/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance::OAIInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance::OAIInstance() {
    this->initializeModel();
}

OAIInstance::~OAIInstance() {}

void OAIInstance::initializeModel() {

    m_autoscaling_config_isSet = false;
    m_autoscaling_config_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_endpoint_uris_isSet = false;
    m_endpoint_uris_isValid = false;

    m_free_instance_metadata_isSet = false;
    m_free_instance_metadata_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_processing_units_isSet = false;
    m_processing_units_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance::fromJsonObject(QJsonObject json) {

    m_autoscaling_config_isValid = ::OpenAPI::fromJsonValue(m_autoscaling_config, json[QString("autoscalingConfig")]);
    m_autoscaling_config_isSet = !json[QString("autoscalingConfig")].isNull() && m_autoscaling_config_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_endpoint_uris_isValid = ::OpenAPI::fromJsonValue(m_endpoint_uris, json[QString("endpointUris")]);
    m_endpoint_uris_isSet = !json[QString("endpointUris")].isNull() && m_endpoint_uris_isValid;

    m_free_instance_metadata_isValid = ::OpenAPI::fromJsonValue(m_free_instance_metadata, json[QString("freeInstanceMetadata")]);
    m_free_instance_metadata_isSet = !json[QString("freeInstanceMetadata")].isNull() && m_free_instance_metadata_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_processing_units_isValid = ::OpenAPI::fromJsonValue(m_processing_units, json[QString("processingUnits")]);
    m_processing_units_isSet = !json[QString("processingUnits")].isNull() && m_processing_units_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_autoscaling_config.isSet()) {
        obj.insert(QString("autoscalingConfig"), ::OpenAPI::toJsonValue(m_autoscaling_config));
    }
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_endpoint_uris.size() > 0) {
        obj.insert(QString("endpointUris"), ::OpenAPI::toJsonValue(m_endpoint_uris));
    }
    if (m_free_instance_metadata.isSet()) {
        obj.insert(QString("freeInstanceMetadata"), ::OpenAPI::toJsonValue(m_free_instance_metadata));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_processing_units_isSet) {
        obj.insert(QString("processingUnits"), ::OpenAPI::toJsonValue(m_processing_units));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAutoscalingConfig OAIInstance::getAutoscalingConfig() const {
    return m_autoscaling_config;
}
void OAIInstance::setAutoscalingConfig(const OAIAutoscalingConfig &autoscaling_config) {
    m_autoscaling_config = autoscaling_config;
    m_autoscaling_config_isSet = true;
}

bool OAIInstance::is_autoscaling_config_Set() const{
    return m_autoscaling_config_isSet;
}

bool OAIInstance::is_autoscaling_config_Valid() const{
    return m_autoscaling_config_isValid;
}

QString OAIInstance::getConfig() const {
    return m_config;
}
void OAIInstance::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIInstance::is_config_Set() const{
    return m_config_isSet;
}

bool OAIInstance::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIInstance::getCreateTime() const {
    return m_create_time;
}
void OAIInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInstance::getDisplayName() const {
    return m_display_name;
}
void OAIInstance::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInstance::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInstance::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIInstance::getEndpointUris() const {
    return m_endpoint_uris;
}
void OAIInstance::setEndpointUris(const QList<QString> &endpoint_uris) {
    m_endpoint_uris = endpoint_uris;
    m_endpoint_uris_isSet = true;
}

bool OAIInstance::is_endpoint_uris_Set() const{
    return m_endpoint_uris_isSet;
}

bool OAIInstance::is_endpoint_uris_Valid() const{
    return m_endpoint_uris_isValid;
}

OAIFreeInstanceMetadata OAIInstance::getFreeInstanceMetadata() const {
    return m_free_instance_metadata;
}
void OAIInstance::setFreeInstanceMetadata(const OAIFreeInstanceMetadata &free_instance_metadata) {
    m_free_instance_metadata = free_instance_metadata;
    m_free_instance_metadata_isSet = true;
}

bool OAIInstance::is_free_instance_metadata_Set() const{
    return m_free_instance_metadata_isSet;
}

bool OAIInstance::is_free_instance_metadata_Valid() const{
    return m_free_instance_metadata_isValid;
}

QString OAIInstance::getInstanceType() const {
    return m_instance_type;
}
void OAIInstance::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QMap<QString, QString> OAIInstance::getLabels() const {
    return m_labels;
}
void OAIInstance::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstance::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstance::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIInstance::getName() const {
    return m_name;
}
void OAIInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInstance::getNodeCount() const {
    return m_node_count;
}
void OAIInstance::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIInstance::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIInstance::is_node_count_Valid() const{
    return m_node_count_isValid;
}

qint32 OAIInstance::getProcessingUnits() const {
    return m_processing_units;
}
void OAIInstance::setProcessingUnits(const qint32 &processing_units) {
    m_processing_units = processing_units;
    m_processing_units_isSet = true;
}

bool OAIInstance::is_processing_units_Set() const{
    return m_processing_units_isSet;
}

bool OAIInstance::is_processing_units_Valid() const{
    return m_processing_units_isValid;
}

QString OAIInstance::getState() const {
    return m_state;
}
void OAIInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstance::getUpdateTime() const {
    return m_update_time;
}
void OAIInstance::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInstance::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInstance::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_autoscaling_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_instance_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
