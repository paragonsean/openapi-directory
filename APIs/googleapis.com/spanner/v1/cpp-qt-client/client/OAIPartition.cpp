/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartition::OAIPartition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartition::OAIPartition() {
    this->initializeModel();
}

OAIPartition::~OAIPartition() {}

void OAIPartition::initializeModel() {

    m_partition_token_isSet = false;
    m_partition_token_isValid = false;
}

void OAIPartition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartition::fromJsonObject(QJsonObject json) {

    m_partition_token_isValid = ::OpenAPI::fromJsonValue(m_partition_token, json[QString("partitionToken")]);
    m_partition_token_isSet = !json[QString("partitionToken")].isNull() && m_partition_token_isValid;
}

QString OAIPartition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartition::asJsonObject() const {
    QJsonObject obj;
    if (m_partition_token_isSet) {
        obj.insert(QString("partitionToken"), ::OpenAPI::toJsonValue(m_partition_token));
    }
    return obj;
}

QByteArray OAIPartition::getPartitionToken() const {
    return m_partition_token;
}
void OAIPartition::setPartitionToken(const QByteArray &partition_token) {
    m_partition_token = partition_token;
    m_partition_token_isSet = true;
}

bool OAIPartition::is_partition_token_Set() const{
    return m_partition_token_isSet;
}

bool OAIPartition::is_partition_token_Valid() const{
    return m_partition_token_isValid;
}

bool OAIPartition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partition_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
