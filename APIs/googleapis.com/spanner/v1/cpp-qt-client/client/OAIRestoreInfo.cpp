/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreInfo::OAIRestoreInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreInfo::OAIRestoreInfo() {
    this->initializeModel();
}

OAIRestoreInfo::~OAIRestoreInfo() {}

void OAIRestoreInfo::initializeModel() {

    m_backup_info_isSet = false;
    m_backup_info_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIRestoreInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreInfo::fromJsonObject(QJsonObject json) {

    m_backup_info_isValid = ::OpenAPI::fromJsonValue(m_backup_info, json[QString("backupInfo")]);
    m_backup_info_isSet = !json[QString("backupInfo")].isNull() && m_backup_info_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAIRestoreInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_info.isSet()) {
        obj.insert(QString("backupInfo"), ::OpenAPI::toJsonValue(m_backup_info));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

OAIBackupInfo OAIRestoreInfo::getBackupInfo() const {
    return m_backup_info;
}
void OAIRestoreInfo::setBackupInfo(const OAIBackupInfo &backup_info) {
    m_backup_info = backup_info;
    m_backup_info_isSet = true;
}

bool OAIRestoreInfo::is_backup_info_Set() const{
    return m_backup_info_isSet;
}

bool OAIRestoreInfo::is_backup_info_Valid() const{
    return m_backup_info_isValid;
}

QString OAIRestoreInfo::getSourceType() const {
    return m_source_type;
}
void OAIRestoreInfo::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIRestoreInfo::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIRestoreInfo::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIRestoreInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
