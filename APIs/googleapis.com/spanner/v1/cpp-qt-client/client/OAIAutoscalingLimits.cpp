/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoscalingLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoscalingLimits::OAIAutoscalingLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoscalingLimits::OAIAutoscalingLimits() {
    this->initializeModel();
}

OAIAutoscalingLimits::~OAIAutoscalingLimits() {}

void OAIAutoscalingLimits::initializeModel() {

    m_max_nodes_isSet = false;
    m_max_nodes_isValid = false;

    m_max_processing_units_isSet = false;
    m_max_processing_units_isValid = false;

    m_min_nodes_isSet = false;
    m_min_nodes_isValid = false;

    m_min_processing_units_isSet = false;
    m_min_processing_units_isValid = false;
}

void OAIAutoscalingLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoscalingLimits::fromJsonObject(QJsonObject json) {

    m_max_nodes_isValid = ::OpenAPI::fromJsonValue(m_max_nodes, json[QString("maxNodes")]);
    m_max_nodes_isSet = !json[QString("maxNodes")].isNull() && m_max_nodes_isValid;

    m_max_processing_units_isValid = ::OpenAPI::fromJsonValue(m_max_processing_units, json[QString("maxProcessingUnits")]);
    m_max_processing_units_isSet = !json[QString("maxProcessingUnits")].isNull() && m_max_processing_units_isValid;

    m_min_nodes_isValid = ::OpenAPI::fromJsonValue(m_min_nodes, json[QString("minNodes")]);
    m_min_nodes_isSet = !json[QString("minNodes")].isNull() && m_min_nodes_isValid;

    m_min_processing_units_isValid = ::OpenAPI::fromJsonValue(m_min_processing_units, json[QString("minProcessingUnits")]);
    m_min_processing_units_isSet = !json[QString("minProcessingUnits")].isNull() && m_min_processing_units_isValid;
}

QString OAIAutoscalingLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoscalingLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_max_nodes_isSet) {
        obj.insert(QString("maxNodes"), ::OpenAPI::toJsonValue(m_max_nodes));
    }
    if (m_max_processing_units_isSet) {
        obj.insert(QString("maxProcessingUnits"), ::OpenAPI::toJsonValue(m_max_processing_units));
    }
    if (m_min_nodes_isSet) {
        obj.insert(QString("minNodes"), ::OpenAPI::toJsonValue(m_min_nodes));
    }
    if (m_min_processing_units_isSet) {
        obj.insert(QString("minProcessingUnits"), ::OpenAPI::toJsonValue(m_min_processing_units));
    }
    return obj;
}

qint32 OAIAutoscalingLimits::getMaxNodes() const {
    return m_max_nodes;
}
void OAIAutoscalingLimits::setMaxNodes(const qint32 &max_nodes) {
    m_max_nodes = max_nodes;
    m_max_nodes_isSet = true;
}

bool OAIAutoscalingLimits::is_max_nodes_Set() const{
    return m_max_nodes_isSet;
}

bool OAIAutoscalingLimits::is_max_nodes_Valid() const{
    return m_max_nodes_isValid;
}

qint32 OAIAutoscalingLimits::getMaxProcessingUnits() const {
    return m_max_processing_units;
}
void OAIAutoscalingLimits::setMaxProcessingUnits(const qint32 &max_processing_units) {
    m_max_processing_units = max_processing_units;
    m_max_processing_units_isSet = true;
}

bool OAIAutoscalingLimits::is_max_processing_units_Set() const{
    return m_max_processing_units_isSet;
}

bool OAIAutoscalingLimits::is_max_processing_units_Valid() const{
    return m_max_processing_units_isValid;
}

qint32 OAIAutoscalingLimits::getMinNodes() const {
    return m_min_nodes;
}
void OAIAutoscalingLimits::setMinNodes(const qint32 &min_nodes) {
    m_min_nodes = min_nodes;
    m_min_nodes_isSet = true;
}

bool OAIAutoscalingLimits::is_min_nodes_Set() const{
    return m_min_nodes_isSet;
}

bool OAIAutoscalingLimits::is_min_nodes_Valid() const{
    return m_min_nodes_isValid;
}

qint32 OAIAutoscalingLimits::getMinProcessingUnits() const {
    return m_min_processing_units;
}
void OAIAutoscalingLimits::setMinProcessingUnits(const qint32 &min_processing_units) {
    m_min_processing_units = min_processing_units;
    m_min_processing_units_isSet = true;
}

bool OAIAutoscalingLimits::is_min_processing_units_Set() const{
    return m_min_processing_units_isSet;
}

bool OAIAutoscalingLimits::is_min_processing_units_Valid() const{
    return m_min_processing_units_isValid;
}

bool OAIAutoscalingLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_processing_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_processing_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoscalingLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
