/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScan::OAIScan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScan::OAIScan() {
    this->initializeModel();
}

OAIScan::~OAIScan() {}

void OAIScan::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scan_data_isSet = false;
    m_scan_data_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIScan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScan::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scan_data_isValid = ::OpenAPI::fromJsonValue(m_scan_data, json[QString("scanData")]);
    m_scan_data_isSet = !json[QString("scanData")].isNull() && m_scan_data_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIScan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScan::asJsonObject() const {
    QJsonObject obj;
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scan_data.isSet()) {
        obj.insert(QString("scanData"), ::OpenAPI::toJsonValue(m_scan_data));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIScan::getDetails() const {
    return m_details;
}
void OAIScan::setDetails(const QMap<QString, QJsonValue> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIScan::is_details_Set() const{
    return m_details_isSet;
}

bool OAIScan::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIScan::getEndTime() const {
    return m_end_time;
}
void OAIScan::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIScan::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIScan::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIScan::getName() const {
    return m_name;
}
void OAIScan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScan::is_name_Valid() const{
    return m_name_isValid;
}

OAIScanData OAIScan::getScanData() const {
    return m_scan_data;
}
void OAIScan::setScanData(const OAIScanData &scan_data) {
    m_scan_data = scan_data;
    m_scan_data_isSet = true;
}

bool OAIScan::is_scan_data_Set() const{
    return m_scan_data_isSet;
}

bool OAIScan::is_scan_data_Valid() const{
    return m_scan_data_isValid;
}

QString OAIScan::getStartTime() const {
    return m_start_time;
}
void OAIScan::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScan::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScan::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIScan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
