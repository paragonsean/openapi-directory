/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticMessage::OAIDiagnosticMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticMessage::OAIDiagnosticMessage() {
    this->initializeModel();
}

OAIDiagnosticMessage::~OAIDiagnosticMessage() {}

void OAIDiagnosticMessage::initializeModel() {

    m_info_isSet = false;
    m_info_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_metric_specific_isSet = false;
    m_metric_specific_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_short_message_isSet = false;
    m_short_message_isValid = false;
}

void OAIDiagnosticMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticMessage::fromJsonObject(QJsonObject json) {

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_metric_specific_isValid = ::OpenAPI::fromJsonValue(m_metric_specific, json[QString("metricSpecific")]);
    m_metric_specific_isSet = !json[QString("metricSpecific")].isNull() && m_metric_specific_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_short_message_isValid = ::OpenAPI::fromJsonValue(m_short_message, json[QString("shortMessage")]);
    m_short_message_isSet = !json[QString("shortMessage")].isNull() && m_short_message_isValid;
}

QString OAIDiagnosticMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_metric_specific_isSet) {
        obj.insert(QString("metricSpecific"), ::OpenAPI::toJsonValue(m_metric_specific));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_short_message.isSet()) {
        obj.insert(QString("shortMessage"), ::OpenAPI::toJsonValue(m_short_message));
    }
    return obj;
}

OAILocalizedString OAIDiagnosticMessage::getInfo() const {
    return m_info;
}
void OAIDiagnosticMessage::setInfo(const OAILocalizedString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIDiagnosticMessage::is_info_Set() const{
    return m_info_isSet;
}

bool OAIDiagnosticMessage::is_info_Valid() const{
    return m_info_isValid;
}

OAILocalizedString OAIDiagnosticMessage::getMetric() const {
    return m_metric;
}
void OAIDiagnosticMessage::setMetric(const OAILocalizedString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIDiagnosticMessage::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIDiagnosticMessage::is_metric_Valid() const{
    return m_metric_isValid;
}

bool OAIDiagnosticMessage::isMetricSpecific() const {
    return m_metric_specific;
}
void OAIDiagnosticMessage::setMetricSpecific(const bool &metric_specific) {
    m_metric_specific = metric_specific;
    m_metric_specific_isSet = true;
}

bool OAIDiagnosticMessage::is_metric_specific_Set() const{
    return m_metric_specific_isSet;
}

bool OAIDiagnosticMessage::is_metric_specific_Valid() const{
    return m_metric_specific_isValid;
}

QString OAIDiagnosticMessage::getSeverity() const {
    return m_severity;
}
void OAIDiagnosticMessage::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIDiagnosticMessage::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIDiagnosticMessage::is_severity_Valid() const{
    return m_severity_isValid;
}

OAILocalizedString OAIDiagnosticMessage::getShortMessage() const {
    return m_short_message;
}
void OAIDiagnosticMessage::setShortMessage(const OAILocalizedString &short_message) {
    m_short_message = short_message;
    m_short_message_isSet = true;
}

bool OAIDiagnosticMessage::is_short_message_Set() const{
    return m_short_message_isSet;
}

bool OAIDiagnosticMessage::is_short_message_Valid() const{
    return m_short_message_isValid;
}

bool OAIDiagnosticMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_specific_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_message.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
