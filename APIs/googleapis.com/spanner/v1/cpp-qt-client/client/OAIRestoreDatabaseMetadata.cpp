/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreDatabaseMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreDatabaseMetadata::OAIRestoreDatabaseMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreDatabaseMetadata::OAIRestoreDatabaseMetadata() {
    this->initializeModel();
}

OAIRestoreDatabaseMetadata::~OAIRestoreDatabaseMetadata() {}

void OAIRestoreDatabaseMetadata::initializeModel() {

    m_backup_info_isSet = false;
    m_backup_info_isValid = false;

    m_cancel_time_isSet = false;
    m_cancel_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optimize_database_operation_name_isSet = false;
    m_optimize_database_operation_name_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIRestoreDatabaseMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreDatabaseMetadata::fromJsonObject(QJsonObject json) {

    m_backup_info_isValid = ::OpenAPI::fromJsonValue(m_backup_info, json[QString("backupInfo")]);
    m_backup_info_isSet = !json[QString("backupInfo")].isNull() && m_backup_info_isValid;

    m_cancel_time_isValid = ::OpenAPI::fromJsonValue(m_cancel_time, json[QString("cancelTime")]);
    m_cancel_time_isSet = !json[QString("cancelTime")].isNull() && m_cancel_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optimize_database_operation_name_isValid = ::OpenAPI::fromJsonValue(m_optimize_database_operation_name, json[QString("optimizeDatabaseOperationName")]);
    m_optimize_database_operation_name_isSet = !json[QString("optimizeDatabaseOperationName")].isNull() && m_optimize_database_operation_name_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAIRestoreDatabaseMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreDatabaseMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_info.isSet()) {
        obj.insert(QString("backupInfo"), ::OpenAPI::toJsonValue(m_backup_info));
    }
    if (m_cancel_time_isSet) {
        obj.insert(QString("cancelTime"), ::OpenAPI::toJsonValue(m_cancel_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optimize_database_operation_name_isSet) {
        obj.insert(QString("optimizeDatabaseOperationName"), ::OpenAPI::toJsonValue(m_optimize_database_operation_name));
    }
    if (m_progress.isSet()) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

OAIBackupInfo OAIRestoreDatabaseMetadata::getBackupInfo() const {
    return m_backup_info;
}
void OAIRestoreDatabaseMetadata::setBackupInfo(const OAIBackupInfo &backup_info) {
    m_backup_info = backup_info;
    m_backup_info_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_backup_info_Set() const{
    return m_backup_info_isSet;
}

bool OAIRestoreDatabaseMetadata::is_backup_info_Valid() const{
    return m_backup_info_isValid;
}

QString OAIRestoreDatabaseMetadata::getCancelTime() const {
    return m_cancel_time;
}
void OAIRestoreDatabaseMetadata::setCancelTime(const QString &cancel_time) {
    m_cancel_time = cancel_time;
    m_cancel_time_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_cancel_time_Set() const{
    return m_cancel_time_isSet;
}

bool OAIRestoreDatabaseMetadata::is_cancel_time_Valid() const{
    return m_cancel_time_isValid;
}

QString OAIRestoreDatabaseMetadata::getName() const {
    return m_name;
}
void OAIRestoreDatabaseMetadata::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRestoreDatabaseMetadata::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRestoreDatabaseMetadata::getOptimizeDatabaseOperationName() const {
    return m_optimize_database_operation_name;
}
void OAIRestoreDatabaseMetadata::setOptimizeDatabaseOperationName(const QString &optimize_database_operation_name) {
    m_optimize_database_operation_name = optimize_database_operation_name;
    m_optimize_database_operation_name_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_optimize_database_operation_name_Set() const{
    return m_optimize_database_operation_name_isSet;
}

bool OAIRestoreDatabaseMetadata::is_optimize_database_operation_name_Valid() const{
    return m_optimize_database_operation_name_isValid;
}

OAIOperationProgress OAIRestoreDatabaseMetadata::getProgress() const {
    return m_progress;
}
void OAIRestoreDatabaseMetadata::setProgress(const OAIOperationProgress &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIRestoreDatabaseMetadata::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIRestoreDatabaseMetadata::getSourceType() const {
    return m_source_type;
}
void OAIRestoreDatabaseMetadata::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIRestoreDatabaseMetadata::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIRestoreDatabaseMetadata::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIRestoreDatabaseMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimize_database_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreDatabaseMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
