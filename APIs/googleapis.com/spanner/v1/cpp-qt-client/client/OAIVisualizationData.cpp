/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualizationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualizationData::OAIVisualizationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualizationData::OAIVisualizationData() {
    this->initializeModel();
}

OAIVisualizationData::~OAIVisualizationData() {}

void OAIVisualizationData::initializeModel() {

    m_data_source_end_token_isSet = false;
    m_data_source_end_token_isValid = false;

    m_data_source_separator_token_isSet = false;
    m_data_source_separator_token_isValid = false;

    m_diagnostic_messages_isSet = false;
    m_diagnostic_messages_isValid = false;

    m_end_key_strings_isSet = false;
    m_end_key_strings_isValid = false;

    m_has_pii_isSet = false;
    m_has_pii_isValid = false;

    m_indexed_keys_isSet = false;
    m_indexed_keys_isValid = false;

    m_key_separator_isSet = false;
    m_key_separator_isValid = false;

    m_key_unit_isSet = false;
    m_key_unit_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_prefix_nodes_isSet = false;
    m_prefix_nodes_isValid = false;
}

void OAIVisualizationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualizationData::fromJsonObject(QJsonObject json) {

    m_data_source_end_token_isValid = ::OpenAPI::fromJsonValue(m_data_source_end_token, json[QString("dataSourceEndToken")]);
    m_data_source_end_token_isSet = !json[QString("dataSourceEndToken")].isNull() && m_data_source_end_token_isValid;

    m_data_source_separator_token_isValid = ::OpenAPI::fromJsonValue(m_data_source_separator_token, json[QString("dataSourceSeparatorToken")]);
    m_data_source_separator_token_isSet = !json[QString("dataSourceSeparatorToken")].isNull() && m_data_source_separator_token_isValid;

    m_diagnostic_messages_isValid = ::OpenAPI::fromJsonValue(m_diagnostic_messages, json[QString("diagnosticMessages")]);
    m_diagnostic_messages_isSet = !json[QString("diagnosticMessages")].isNull() && m_diagnostic_messages_isValid;

    m_end_key_strings_isValid = ::OpenAPI::fromJsonValue(m_end_key_strings, json[QString("endKeyStrings")]);
    m_end_key_strings_isSet = !json[QString("endKeyStrings")].isNull() && m_end_key_strings_isValid;

    m_has_pii_isValid = ::OpenAPI::fromJsonValue(m_has_pii, json[QString("hasPii")]);
    m_has_pii_isSet = !json[QString("hasPii")].isNull() && m_has_pii_isValid;

    m_indexed_keys_isValid = ::OpenAPI::fromJsonValue(m_indexed_keys, json[QString("indexedKeys")]);
    m_indexed_keys_isSet = !json[QString("indexedKeys")].isNull() && m_indexed_keys_isValid;

    m_key_separator_isValid = ::OpenAPI::fromJsonValue(m_key_separator, json[QString("keySeparator")]);
    m_key_separator_isSet = !json[QString("keySeparator")].isNull() && m_key_separator_isValid;

    m_key_unit_isValid = ::OpenAPI::fromJsonValue(m_key_unit, json[QString("keyUnit")]);
    m_key_unit_isSet = !json[QString("keyUnit")].isNull() && m_key_unit_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_prefix_nodes_isValid = ::OpenAPI::fromJsonValue(m_prefix_nodes, json[QString("prefixNodes")]);
    m_prefix_nodes_isSet = !json[QString("prefixNodes")].isNull() && m_prefix_nodes_isValid;
}

QString OAIVisualizationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualizationData::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_end_token_isSet) {
        obj.insert(QString("dataSourceEndToken"), ::OpenAPI::toJsonValue(m_data_source_end_token));
    }
    if (m_data_source_separator_token_isSet) {
        obj.insert(QString("dataSourceSeparatorToken"), ::OpenAPI::toJsonValue(m_data_source_separator_token));
    }
    if (m_diagnostic_messages.size() > 0) {
        obj.insert(QString("diagnosticMessages"), ::OpenAPI::toJsonValue(m_diagnostic_messages));
    }
    if (m_end_key_strings.size() > 0) {
        obj.insert(QString("endKeyStrings"), ::OpenAPI::toJsonValue(m_end_key_strings));
    }
    if (m_has_pii_isSet) {
        obj.insert(QString("hasPii"), ::OpenAPI::toJsonValue(m_has_pii));
    }
    if (m_indexed_keys.size() > 0) {
        obj.insert(QString("indexedKeys"), ::OpenAPI::toJsonValue(m_indexed_keys));
    }
    if (m_key_separator_isSet) {
        obj.insert(QString("keySeparator"), ::OpenAPI::toJsonValue(m_key_separator));
    }
    if (m_key_unit_isSet) {
        obj.insert(QString("keyUnit"), ::OpenAPI::toJsonValue(m_key_unit));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_prefix_nodes.size() > 0) {
        obj.insert(QString("prefixNodes"), ::OpenAPI::toJsonValue(m_prefix_nodes));
    }
    return obj;
}

QString OAIVisualizationData::getDataSourceEndToken() const {
    return m_data_source_end_token;
}
void OAIVisualizationData::setDataSourceEndToken(const QString &data_source_end_token) {
    m_data_source_end_token = data_source_end_token;
    m_data_source_end_token_isSet = true;
}

bool OAIVisualizationData::is_data_source_end_token_Set() const{
    return m_data_source_end_token_isSet;
}

bool OAIVisualizationData::is_data_source_end_token_Valid() const{
    return m_data_source_end_token_isValid;
}

QString OAIVisualizationData::getDataSourceSeparatorToken() const {
    return m_data_source_separator_token;
}
void OAIVisualizationData::setDataSourceSeparatorToken(const QString &data_source_separator_token) {
    m_data_source_separator_token = data_source_separator_token;
    m_data_source_separator_token_isSet = true;
}

bool OAIVisualizationData::is_data_source_separator_token_Set() const{
    return m_data_source_separator_token_isSet;
}

bool OAIVisualizationData::is_data_source_separator_token_Valid() const{
    return m_data_source_separator_token_isValid;
}

QList<OAIDiagnosticMessage> OAIVisualizationData::getDiagnosticMessages() const {
    return m_diagnostic_messages;
}
void OAIVisualizationData::setDiagnosticMessages(const QList<OAIDiagnosticMessage> &diagnostic_messages) {
    m_diagnostic_messages = diagnostic_messages;
    m_diagnostic_messages_isSet = true;
}

bool OAIVisualizationData::is_diagnostic_messages_Set() const{
    return m_diagnostic_messages_isSet;
}

bool OAIVisualizationData::is_diagnostic_messages_Valid() const{
    return m_diagnostic_messages_isValid;
}

QList<QString> OAIVisualizationData::getEndKeyStrings() const {
    return m_end_key_strings;
}
void OAIVisualizationData::setEndKeyStrings(const QList<QString> &end_key_strings) {
    m_end_key_strings = end_key_strings;
    m_end_key_strings_isSet = true;
}

bool OAIVisualizationData::is_end_key_strings_Set() const{
    return m_end_key_strings_isSet;
}

bool OAIVisualizationData::is_end_key_strings_Valid() const{
    return m_end_key_strings_isValid;
}

bool OAIVisualizationData::isHasPii() const {
    return m_has_pii;
}
void OAIVisualizationData::setHasPii(const bool &has_pii) {
    m_has_pii = has_pii;
    m_has_pii_isSet = true;
}

bool OAIVisualizationData::is_has_pii_Set() const{
    return m_has_pii_isSet;
}

bool OAIVisualizationData::is_has_pii_Valid() const{
    return m_has_pii_isValid;
}

QList<QString> OAIVisualizationData::getIndexedKeys() const {
    return m_indexed_keys;
}
void OAIVisualizationData::setIndexedKeys(const QList<QString> &indexed_keys) {
    m_indexed_keys = indexed_keys;
    m_indexed_keys_isSet = true;
}

bool OAIVisualizationData::is_indexed_keys_Set() const{
    return m_indexed_keys_isSet;
}

bool OAIVisualizationData::is_indexed_keys_Valid() const{
    return m_indexed_keys_isValid;
}

QString OAIVisualizationData::getKeySeparator() const {
    return m_key_separator;
}
void OAIVisualizationData::setKeySeparator(const QString &key_separator) {
    m_key_separator = key_separator;
    m_key_separator_isSet = true;
}

bool OAIVisualizationData::is_key_separator_Set() const{
    return m_key_separator_isSet;
}

bool OAIVisualizationData::is_key_separator_Valid() const{
    return m_key_separator_isValid;
}

QString OAIVisualizationData::getKeyUnit() const {
    return m_key_unit;
}
void OAIVisualizationData::setKeyUnit(const QString &key_unit) {
    m_key_unit = key_unit;
    m_key_unit_isSet = true;
}

bool OAIVisualizationData::is_key_unit_Set() const{
    return m_key_unit_isSet;
}

bool OAIVisualizationData::is_key_unit_Valid() const{
    return m_key_unit_isValid;
}

QList<OAIMetric> OAIVisualizationData::getMetrics() const {
    return m_metrics;
}
void OAIVisualizationData::setMetrics(const QList<OAIMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIVisualizationData::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIVisualizationData::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAIPrefixNode> OAIVisualizationData::getPrefixNodes() const {
    return m_prefix_nodes;
}
void OAIVisualizationData::setPrefixNodes(const QList<OAIPrefixNode> &prefix_nodes) {
    m_prefix_nodes = prefix_nodes;
    m_prefix_nodes_isSet = true;
}

bool OAIVisualizationData::is_prefix_nodes_Set() const{
    return m_prefix_nodes_isSet;
}

bool OAIVisualizationData::is_prefix_nodes_Valid() const{
    return m_prefix_nodes_isValid;
}

bool OAIVisualizationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_end_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_separator_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostic_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_key_strings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_pii_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualizationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
