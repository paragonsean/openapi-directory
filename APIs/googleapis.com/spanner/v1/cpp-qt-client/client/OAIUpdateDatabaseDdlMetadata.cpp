/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDatabaseDdlMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDatabaseDdlMetadata::OAIUpdateDatabaseDdlMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDatabaseDdlMetadata::OAIUpdateDatabaseDdlMetadata() {
    this->initializeModel();
}

OAIUpdateDatabaseDdlMetadata::~OAIUpdateDatabaseDdlMetadata() {}

void OAIUpdateDatabaseDdlMetadata::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_commit_timestamps_isSet = false;
    m_commit_timestamps_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;

    m_throttled_isSet = false;
    m_throttled_isValid = false;
}

void OAIUpdateDatabaseDdlMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDatabaseDdlMetadata::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_commit_timestamps_isValid = ::OpenAPI::fromJsonValue(m_commit_timestamps, json[QString("commitTimestamps")]);
    m_commit_timestamps_isSet = !json[QString("commitTimestamps")].isNull() && m_commit_timestamps_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;

    m_throttled_isValid = ::OpenAPI::fromJsonValue(m_throttled, json[QString("throttled")]);
    m_throttled_isSet = !json[QString("throttled")].isNull() && m_throttled_isValid;
}

QString OAIUpdateDatabaseDdlMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDatabaseDdlMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_commit_timestamps.size() > 0) {
        obj.insert(QString("commitTimestamps"), ::OpenAPI::toJsonValue(m_commit_timestamps));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_progress.size() > 0) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    if (m_throttled_isSet) {
        obj.insert(QString("throttled"), ::OpenAPI::toJsonValue(m_throttled));
    }
    return obj;
}

QList<OAIDdlStatementActionInfo> OAIUpdateDatabaseDdlMetadata::getActions() const {
    return m_actions;
}
void OAIUpdateDatabaseDdlMetadata::setActions(const QList<OAIDdlStatementActionInfo> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_actions_Valid() const{
    return m_actions_isValid;
}

QList<QString> OAIUpdateDatabaseDdlMetadata::getCommitTimestamps() const {
    return m_commit_timestamps;
}
void OAIUpdateDatabaseDdlMetadata::setCommitTimestamps(const QList<QString> &commit_timestamps) {
    m_commit_timestamps = commit_timestamps;
    m_commit_timestamps_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_commit_timestamps_Set() const{
    return m_commit_timestamps_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_commit_timestamps_Valid() const{
    return m_commit_timestamps_isValid;
}

QString OAIUpdateDatabaseDdlMetadata::getDatabase() const {
    return m_database;
}
void OAIUpdateDatabaseDdlMetadata::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_database_Set() const{
    return m_database_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_database_Valid() const{
    return m_database_isValid;
}

QList<OAIOperationProgress> OAIUpdateDatabaseDdlMetadata::getProgress() const {
    return m_progress;
}
void OAIUpdateDatabaseDdlMetadata::setProgress(const QList<OAIOperationProgress> &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_progress_Valid() const{
    return m_progress_isValid;
}

QList<QString> OAIUpdateDatabaseDdlMetadata::getStatements() const {
    return m_statements;
}
void OAIUpdateDatabaseDdlMetadata::setStatements(const QList<QString> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIUpdateDatabaseDdlMetadata::isThrottled() const {
    return m_throttled;
}
void OAIUpdateDatabaseDdlMetadata::setThrottled(const bool &throttled) {
    m_throttled = throttled;
    m_throttled_isSet = true;
}

bool OAIUpdateDatabaseDdlMetadata::is_throttled_Set() const{
    return m_throttled_isSet;
}

bool OAIUpdateDatabaseDdlMetadata::is_throttled_Valid() const{
    return m_throttled_isValid;
}

bool OAIUpdateDatabaseDdlMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_timestamps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDatabaseDdlMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
