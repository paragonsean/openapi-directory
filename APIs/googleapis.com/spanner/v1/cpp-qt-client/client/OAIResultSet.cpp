/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultSet::OAIResultSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultSet::OAIResultSet() {
    this->initializeModel();
}

OAIResultSet::~OAIResultSet() {}

void OAIResultSet::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_rows_isSet = false;
    m_rows_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;
}

void OAIResultSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultSet::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    if(json["rows"].isArray()){
        auto arr = json["rows"].toArray();
        m_rows_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_rows_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_rows_isSet = !jval.isNull() && m_rows_isValid;
                m_rows.push_back(item);
            }
        }
    }

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;
}

QString OAIResultSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultSet::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_rows.size() > 0) {
        
        obj.insert(QString("rows"), toJsonValue(m_rows));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    return obj;
}

OAIResultSetMetadata OAIResultSet::getMetadata() const {
    return m_metadata;
}
void OAIResultSet::setMetadata(const OAIResultSetMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIResultSet::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIResultSet::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QList<QJsonValue>> OAIResultSet::getRows() const {
    return m_rows;
}
void OAIResultSet::setRows(const QList<QList<QJsonValue>> &rows) {
    m_rows = rows;
    m_rows_isSet = true;
}

bool OAIResultSet::is_rows_Set() const{
    return m_rows_isSet;
}

bool OAIResultSet::is_rows_Valid() const{
    return m_rows_isValid;
}

OAIResultSetStats OAIResultSet::getStats() const {
    return m_stats;
}
void OAIResultSet::setStats(const OAIResultSetStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIResultSet::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIResultSet::is_stats_Valid() const{
    return m_stats_isValid;
}

bool OAIResultSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
