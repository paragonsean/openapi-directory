/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteSqlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteSqlRequest::OAIExecuteSqlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteSqlRequest::OAIExecuteSqlRequest() {
    this->initializeModel();
}

OAIExecuteSqlRequest::~OAIExecuteSqlRequest() {}

void OAIExecuteSqlRequest::initializeModel() {

    m_data_boost_enabled_isSet = false;
    m_data_boost_enabled_isValid = false;

    m_directed_read_options_isSet = false;
    m_directed_read_options_isValid = false;

    m_param_types_isSet = false;
    m_param_types_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_partition_token_isSet = false;
    m_partition_token_isValid = false;

    m_query_mode_isSet = false;
    m_query_mode_isValid = false;

    m_query_options_isSet = false;
    m_query_options_isValid = false;

    m_request_options_isSet = false;
    m_request_options_isValid = false;

    m_resume_token_isSet = false;
    m_resume_token_isValid = false;

    m_seqno_isSet = false;
    m_seqno_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIExecuteSqlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteSqlRequest::fromJsonObject(QJsonObject json) {

    m_data_boost_enabled_isValid = ::OpenAPI::fromJsonValue(m_data_boost_enabled, json[QString("dataBoostEnabled")]);
    m_data_boost_enabled_isSet = !json[QString("dataBoostEnabled")].isNull() && m_data_boost_enabled_isValid;

    m_directed_read_options_isValid = ::OpenAPI::fromJsonValue(m_directed_read_options, json[QString("directedReadOptions")]);
    m_directed_read_options_isSet = !json[QString("directedReadOptions")].isNull() && m_directed_read_options_isValid;

    m_param_types_isValid = ::OpenAPI::fromJsonValue(m_param_types, json[QString("paramTypes")]);
    m_param_types_isSet = !json[QString("paramTypes")].isNull() && m_param_types_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_partition_token_isValid = ::OpenAPI::fromJsonValue(m_partition_token, json[QString("partitionToken")]);
    m_partition_token_isSet = !json[QString("partitionToken")].isNull() && m_partition_token_isValid;

    m_query_mode_isValid = ::OpenAPI::fromJsonValue(m_query_mode, json[QString("queryMode")]);
    m_query_mode_isSet = !json[QString("queryMode")].isNull() && m_query_mode_isValid;

    m_query_options_isValid = ::OpenAPI::fromJsonValue(m_query_options, json[QString("queryOptions")]);
    m_query_options_isSet = !json[QString("queryOptions")].isNull() && m_query_options_isValid;

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;

    m_resume_token_isValid = ::OpenAPI::fromJsonValue(m_resume_token, json[QString("resumeToken")]);
    m_resume_token_isSet = !json[QString("resumeToken")].isNull() && m_resume_token_isValid;

    m_seqno_isValid = ::OpenAPI::fromJsonValue(m_seqno, json[QString("seqno")]);
    m_seqno_isSet = !json[QString("seqno")].isNull() && m_seqno_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIExecuteSqlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteSqlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_boost_enabled_isSet) {
        obj.insert(QString("dataBoostEnabled"), ::OpenAPI::toJsonValue(m_data_boost_enabled));
    }
    if (m_directed_read_options.isSet()) {
        obj.insert(QString("directedReadOptions"), ::OpenAPI::toJsonValue(m_directed_read_options));
    }
    if (m_param_types.size() > 0) {
        obj.insert(QString("paramTypes"), ::OpenAPI::toJsonValue(m_param_types));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_partition_token_isSet) {
        obj.insert(QString("partitionToken"), ::OpenAPI::toJsonValue(m_partition_token));
    }
    if (m_query_mode_isSet) {
        obj.insert(QString("queryMode"), ::OpenAPI::toJsonValue(m_query_mode));
    }
    if (m_query_options.isSet()) {
        obj.insert(QString("queryOptions"), ::OpenAPI::toJsonValue(m_query_options));
    }
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    if (m_resume_token_isSet) {
        obj.insert(QString("resumeToken"), ::OpenAPI::toJsonValue(m_resume_token));
    }
    if (m_seqno_isSet) {
        obj.insert(QString("seqno"), ::OpenAPI::toJsonValue(m_seqno));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

bool OAIExecuteSqlRequest::isDataBoostEnabled() const {
    return m_data_boost_enabled;
}
void OAIExecuteSqlRequest::setDataBoostEnabled(const bool &data_boost_enabled) {
    m_data_boost_enabled = data_boost_enabled;
    m_data_boost_enabled_isSet = true;
}

bool OAIExecuteSqlRequest::is_data_boost_enabled_Set() const{
    return m_data_boost_enabled_isSet;
}

bool OAIExecuteSqlRequest::is_data_boost_enabled_Valid() const{
    return m_data_boost_enabled_isValid;
}

OAIDirectedReadOptions OAIExecuteSqlRequest::getDirectedReadOptions() const {
    return m_directed_read_options;
}
void OAIExecuteSqlRequest::setDirectedReadOptions(const OAIDirectedReadOptions &directed_read_options) {
    m_directed_read_options = directed_read_options;
    m_directed_read_options_isSet = true;
}

bool OAIExecuteSqlRequest::is_directed_read_options_Set() const{
    return m_directed_read_options_isSet;
}

bool OAIExecuteSqlRequest::is_directed_read_options_Valid() const{
    return m_directed_read_options_isValid;
}

QMap<QString, OAIType> OAIExecuteSqlRequest::getParamTypes() const {
    return m_param_types;
}
void OAIExecuteSqlRequest::setParamTypes(const QMap<QString, OAIType> &param_types) {
    m_param_types = param_types;
    m_param_types_isSet = true;
}

bool OAIExecuteSqlRequest::is_param_types_Set() const{
    return m_param_types_isSet;
}

bool OAIExecuteSqlRequest::is_param_types_Valid() const{
    return m_param_types_isValid;
}

QMap<QString, QJsonValue> OAIExecuteSqlRequest::getParams() const {
    return m_params;
}
void OAIExecuteSqlRequest::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIExecuteSqlRequest::is_params_Set() const{
    return m_params_isSet;
}

bool OAIExecuteSqlRequest::is_params_Valid() const{
    return m_params_isValid;
}

QByteArray OAIExecuteSqlRequest::getPartitionToken() const {
    return m_partition_token;
}
void OAIExecuteSqlRequest::setPartitionToken(const QByteArray &partition_token) {
    m_partition_token = partition_token;
    m_partition_token_isSet = true;
}

bool OAIExecuteSqlRequest::is_partition_token_Set() const{
    return m_partition_token_isSet;
}

bool OAIExecuteSqlRequest::is_partition_token_Valid() const{
    return m_partition_token_isValid;
}

QString OAIExecuteSqlRequest::getQueryMode() const {
    return m_query_mode;
}
void OAIExecuteSqlRequest::setQueryMode(const QString &query_mode) {
    m_query_mode = query_mode;
    m_query_mode_isSet = true;
}

bool OAIExecuteSqlRequest::is_query_mode_Set() const{
    return m_query_mode_isSet;
}

bool OAIExecuteSqlRequest::is_query_mode_Valid() const{
    return m_query_mode_isValid;
}

OAIQueryOptions OAIExecuteSqlRequest::getQueryOptions() const {
    return m_query_options;
}
void OAIExecuteSqlRequest::setQueryOptions(const OAIQueryOptions &query_options) {
    m_query_options = query_options;
    m_query_options_isSet = true;
}

bool OAIExecuteSqlRequest::is_query_options_Set() const{
    return m_query_options_isSet;
}

bool OAIExecuteSqlRequest::is_query_options_Valid() const{
    return m_query_options_isValid;
}

OAIRequestOptions OAIExecuteSqlRequest::getRequestOptions() const {
    return m_request_options;
}
void OAIExecuteSqlRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAIExecuteSqlRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAIExecuteSqlRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

QByteArray OAIExecuteSqlRequest::getResumeToken() const {
    return m_resume_token;
}
void OAIExecuteSqlRequest::setResumeToken(const QByteArray &resume_token) {
    m_resume_token = resume_token;
    m_resume_token_isSet = true;
}

bool OAIExecuteSqlRequest::is_resume_token_Set() const{
    return m_resume_token_isSet;
}

bool OAIExecuteSqlRequest::is_resume_token_Valid() const{
    return m_resume_token_isValid;
}

QString OAIExecuteSqlRequest::getSeqno() const {
    return m_seqno;
}
void OAIExecuteSqlRequest::setSeqno(const QString &seqno) {
    m_seqno = seqno;
    m_seqno_isSet = true;
}

bool OAIExecuteSqlRequest::is_seqno_Set() const{
    return m_seqno_isSet;
}

bool OAIExecuteSqlRequest::is_seqno_Valid() const{
    return m_seqno_isValid;
}

QString OAIExecuteSqlRequest::getSql() const {
    return m_sql;
}
void OAIExecuteSqlRequest::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIExecuteSqlRequest::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIExecuteSqlRequest::is_sql_Valid() const{
    return m_sql_isValid;
}

OAITransactionSelector OAIExecuteSqlRequest::getTransaction() const {
    return m_transaction;
}
void OAIExecuteSqlRequest::setTransaction(const OAITransactionSelector &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIExecuteSqlRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIExecuteSqlRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIExecuteSqlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_boost_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directed_read_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_param_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seqno_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteSqlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
