/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyBackupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyBackupRequest::OAICopyBackupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyBackupRequest::OAICopyBackupRequest() {
    this->initializeModel();
}

OAICopyBackupRequest::~OAICopyBackupRequest() {}

void OAICopyBackupRequest::initializeModel() {

    m_backup_id_isSet = false;
    m_backup_id_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_source_backup_isSet = false;
    m_source_backup_isValid = false;
}

void OAICopyBackupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyBackupRequest::fromJsonObject(QJsonObject json) {

    m_backup_id_isValid = ::OpenAPI::fromJsonValue(m_backup_id, json[QString("backupId")]);
    m_backup_id_isSet = !json[QString("backupId")].isNull() && m_backup_id_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_source_backup_isValid = ::OpenAPI::fromJsonValue(m_source_backup, json[QString("sourceBackup")]);
    m_source_backup_isSet = !json[QString("sourceBackup")].isNull() && m_source_backup_isValid;
}

QString OAICopyBackupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyBackupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_id_isSet) {
        obj.insert(QString("backupId"), ::OpenAPI::toJsonValue(m_backup_id));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_source_backup_isSet) {
        obj.insert(QString("sourceBackup"), ::OpenAPI::toJsonValue(m_source_backup));
    }
    return obj;
}

QString OAICopyBackupRequest::getBackupId() const {
    return m_backup_id;
}
void OAICopyBackupRequest::setBackupId(const QString &backup_id) {
    m_backup_id = backup_id;
    m_backup_id_isSet = true;
}

bool OAICopyBackupRequest::is_backup_id_Set() const{
    return m_backup_id_isSet;
}

bool OAICopyBackupRequest::is_backup_id_Valid() const{
    return m_backup_id_isValid;
}

OAICopyBackupEncryptionConfig OAICopyBackupRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICopyBackupRequest::setEncryptionConfig(const OAICopyBackupEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICopyBackupRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICopyBackupRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAICopyBackupRequest::getExpireTime() const {
    return m_expire_time;
}
void OAICopyBackupRequest::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICopyBackupRequest::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICopyBackupRequest::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAICopyBackupRequest::getSourceBackup() const {
    return m_source_backup;
}
void OAICopyBackupRequest::setSourceBackup(const QString &source_backup) {
    m_source_backup = source_backup;
    m_source_backup_isSet = true;
}

bool OAICopyBackupRequest::is_source_backup_Set() const{
    return m_source_backup_isSet;
}

bool OAICopyBackupRequest::is_source_backup_Valid() const{
    return m_source_backup_isValid;
}

bool OAICopyBackupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_backup_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyBackupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
