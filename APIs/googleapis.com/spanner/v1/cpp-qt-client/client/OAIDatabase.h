/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabase.h
 *
 * A Cloud Spanner database.
 */

#ifndef OAIDatabase_H
#define OAIDatabase_H

#include <QJsonObject>

#include "OAIEncryptionConfig.h"
#include "OAIEncryptionInfo.h"
#include "OAIRestoreInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionConfig;
class OAIEncryptionInfo;
class OAIRestoreInfo;

class OAIDatabase : public OAIObject {
public:
    OAIDatabase();
    OAIDatabase(QString json);
    ~OAIDatabase() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDatabaseDialect() const;
    void setDatabaseDialect(const QString &database_dialect);
    bool is_database_dialect_Set() const;
    bool is_database_dialect_Valid() const;

    QString getDefaultLeader() const;
    void setDefaultLeader(const QString &default_leader);
    bool is_default_leader_Set() const;
    bool is_default_leader_Valid() const;

    QString getEarliestVersionTime() const;
    void setEarliestVersionTime(const QString &earliest_version_time);
    bool is_earliest_version_time_Set() const;
    bool is_earliest_version_time_Valid() const;

    bool isEnableDropProtection() const;
    void setEnableDropProtection(const bool &enable_drop_protection);
    bool is_enable_drop_protection_Set() const;
    bool is_enable_drop_protection_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    QList<OAIEncryptionInfo> getEncryptionInfo() const;
    void setEncryptionInfo(const QList<OAIEncryptionInfo> &encryption_info);
    bool is_encryption_info_Set() const;
    bool is_encryption_info_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    OAIRestoreInfo getRestoreInfo() const;
    void setRestoreInfo(const OAIRestoreInfo &restore_info);
    bool is_restore_info_Set() const;
    bool is_restore_info_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getVersionRetentionPeriod() const;
    void setVersionRetentionPeriod(const QString &version_retention_period);
    bool is_version_retention_period_Set() const;
    bool is_version_retention_period_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_database_dialect;
    bool m_database_dialect_isSet;
    bool m_database_dialect_isValid;

    QString m_default_leader;
    bool m_default_leader_isSet;
    bool m_default_leader_isValid;

    QString m_earliest_version_time;
    bool m_earliest_version_time_isSet;
    bool m_earliest_version_time_isValid;

    bool m_enable_drop_protection;
    bool m_enable_drop_protection_isSet;
    bool m_enable_drop_protection_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    QList<OAIEncryptionInfo> m_encryption_info;
    bool m_encryption_info_isSet;
    bool m_encryption_info_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    OAIRestoreInfo m_restore_info;
    bool m_restore_info_isSet;
    bool m_restore_info_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_version_retention_period;
    bool m_version_retention_period_isSet;
    bool m_version_retention_period_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabase)

#endif // OAIDatabase_H
