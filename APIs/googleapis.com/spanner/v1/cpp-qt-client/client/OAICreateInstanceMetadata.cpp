/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstanceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstanceMetadata::OAICreateInstanceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstanceMetadata::OAICreateInstanceMetadata() {
    this->initializeModel();
}

OAICreateInstanceMetadata::~OAICreateInstanceMetadata() {}

void OAICreateInstanceMetadata::initializeModel() {

    m_cancel_time_isSet = false;
    m_cancel_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_expected_fulfillment_period_isSet = false;
    m_expected_fulfillment_period_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAICreateInstanceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstanceMetadata::fromJsonObject(QJsonObject json) {

    m_cancel_time_isValid = ::OpenAPI::fromJsonValue(m_cancel_time, json[QString("cancelTime")]);
    m_cancel_time_isSet = !json[QString("cancelTime")].isNull() && m_cancel_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_expected_fulfillment_period_isValid = ::OpenAPI::fromJsonValue(m_expected_fulfillment_period, json[QString("expectedFulfillmentPeriod")]);
    m_expected_fulfillment_period_isSet = !json[QString("expectedFulfillmentPeriod")].isNull() && m_expected_fulfillment_period_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAICreateInstanceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstanceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cancel_time_isSet) {
        obj.insert(QString("cancelTime"), ::OpenAPI::toJsonValue(m_cancel_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_expected_fulfillment_period_isSet) {
        obj.insert(QString("expectedFulfillmentPeriod"), ::OpenAPI::toJsonValue(m_expected_fulfillment_period));
    }
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAICreateInstanceMetadata::getCancelTime() const {
    return m_cancel_time;
}
void OAICreateInstanceMetadata::setCancelTime(const QString &cancel_time) {
    m_cancel_time = cancel_time;
    m_cancel_time_isSet = true;
}

bool OAICreateInstanceMetadata::is_cancel_time_Set() const{
    return m_cancel_time_isSet;
}

bool OAICreateInstanceMetadata::is_cancel_time_Valid() const{
    return m_cancel_time_isValid;
}

QString OAICreateInstanceMetadata::getEndTime() const {
    return m_end_time;
}
void OAICreateInstanceMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAICreateInstanceMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAICreateInstanceMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAICreateInstanceMetadata::getExpectedFulfillmentPeriod() const {
    return m_expected_fulfillment_period;
}
void OAICreateInstanceMetadata::setExpectedFulfillmentPeriod(const QString &expected_fulfillment_period) {
    m_expected_fulfillment_period = expected_fulfillment_period;
    m_expected_fulfillment_period_isSet = true;
}

bool OAICreateInstanceMetadata::is_expected_fulfillment_period_Set() const{
    return m_expected_fulfillment_period_isSet;
}

bool OAICreateInstanceMetadata::is_expected_fulfillment_period_Valid() const{
    return m_expected_fulfillment_period_isValid;
}

OAIInstance OAICreateInstanceMetadata::getInstance() const {
    return m_instance;
}
void OAICreateInstanceMetadata::setInstance(const OAIInstance &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAICreateInstanceMetadata::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAICreateInstanceMetadata::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAICreateInstanceMetadata::getStartTime() const {
    return m_start_time;
}
void OAICreateInstanceMetadata::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAICreateInstanceMetadata::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAICreateInstanceMetadata::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAICreateInstanceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cancel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_fulfillment_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstanceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
