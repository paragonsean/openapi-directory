/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDatabaseDdlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDatabaseDdlResponse::OAIGetDatabaseDdlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDatabaseDdlResponse::OAIGetDatabaseDdlResponse() {
    this->initializeModel();
}

OAIGetDatabaseDdlResponse::~OAIGetDatabaseDdlResponse() {}

void OAIGetDatabaseDdlResponse::initializeModel() {

    m_proto_descriptors_isSet = false;
    m_proto_descriptors_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIGetDatabaseDdlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDatabaseDdlResponse::fromJsonObject(QJsonObject json) {

    m_proto_descriptors_isValid = ::OpenAPI::fromJsonValue(m_proto_descriptors, json[QString("protoDescriptors")]);
    m_proto_descriptors_isSet = !json[QString("protoDescriptors")].isNull() && m_proto_descriptors_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIGetDatabaseDdlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDatabaseDdlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_proto_descriptors_isSet) {
        obj.insert(QString("protoDescriptors"), ::OpenAPI::toJsonValue(m_proto_descriptors));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

QByteArray OAIGetDatabaseDdlResponse::getProtoDescriptors() const {
    return m_proto_descriptors;
}
void OAIGetDatabaseDdlResponse::setProtoDescriptors(const QByteArray &proto_descriptors) {
    m_proto_descriptors = proto_descriptors;
    m_proto_descriptors_isSet = true;
}

bool OAIGetDatabaseDdlResponse::is_proto_descriptors_Set() const{
    return m_proto_descriptors_isSet;
}

bool OAIGetDatabaseDdlResponse::is_proto_descriptors_Valid() const{
    return m_proto_descriptors_isValid;
}

QList<QString> OAIGetDatabaseDdlResponse::getStatements() const {
    return m_statements;
}
void OAIGetDatabaseDdlResponse::setStatements(const QList<QString> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIGetDatabaseDdlResponse::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIGetDatabaseDdlResponse::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIGetDatabaseDdlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_proto_descriptors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDatabaseDdlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
