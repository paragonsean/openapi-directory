/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrefixNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrefixNode::OAIPrefixNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrefixNode::OAIPrefixNode() {
    this->initializeModel();
}

OAIPrefixNode::~OAIPrefixNode() {}

void OAIPrefixNode::initializeModel() {

    m_data_source_node_isSet = false;
    m_data_source_node_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_word_isSet = false;
    m_word_isValid = false;
}

void OAIPrefixNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrefixNode::fromJsonObject(QJsonObject json) {

    m_data_source_node_isValid = ::OpenAPI::fromJsonValue(m_data_source_node, json[QString("dataSourceNode")]);
    m_data_source_node_isSet = !json[QString("dataSourceNode")].isNull() && m_data_source_node_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_word_isValid = ::OpenAPI::fromJsonValue(m_word, json[QString("word")]);
    m_word_isSet = !json[QString("word")].isNull() && m_word_isValid;
}

QString OAIPrefixNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrefixNode::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_node_isSet) {
        obj.insert(QString("dataSourceNode"), ::OpenAPI::toJsonValue(m_data_source_node));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_word_isSet) {
        obj.insert(QString("word"), ::OpenAPI::toJsonValue(m_word));
    }
    return obj;
}

bool OAIPrefixNode::isDataSourceNode() const {
    return m_data_source_node;
}
void OAIPrefixNode::setDataSourceNode(const bool &data_source_node) {
    m_data_source_node = data_source_node;
    m_data_source_node_isSet = true;
}

bool OAIPrefixNode::is_data_source_node_Set() const{
    return m_data_source_node_isSet;
}

bool OAIPrefixNode::is_data_source_node_Valid() const{
    return m_data_source_node_isValid;
}

qint32 OAIPrefixNode::getDepth() const {
    return m_depth;
}
void OAIPrefixNode::setDepth(const qint32 &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIPrefixNode::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIPrefixNode::is_depth_Valid() const{
    return m_depth_isValid;
}

qint32 OAIPrefixNode::getEndIndex() const {
    return m_end_index;
}
void OAIPrefixNode::setEndIndex(const qint32 &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIPrefixNode::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIPrefixNode::is_end_index_Valid() const{
    return m_end_index_isValid;
}

qint32 OAIPrefixNode::getStartIndex() const {
    return m_start_index;
}
void OAIPrefixNode::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIPrefixNode::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIPrefixNode::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QString OAIPrefixNode::getWord() const {
    return m_word;
}
void OAIPrefixNode::setWord(const QString &word) {
    m_word = word;
    m_word_isSet = true;
}

bool OAIPrefixNode::is_word_Set() const{
    return m_word_isSet;
}

bool OAIPrefixNode::is_word_Valid() const{
    return m_word_isValid;
}

bool OAIPrefixNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_word_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrefixNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
