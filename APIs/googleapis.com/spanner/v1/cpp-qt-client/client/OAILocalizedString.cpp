/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocalizedString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocalizedString::OAILocalizedString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocalizedString::OAILocalizedString() {
    this->initializeModel();
}

OAILocalizedString::~OAILocalizedString() {}

void OAILocalizedString::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAILocalizedString::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocalizedString::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAILocalizedString::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocalizedString::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QMap<QString, QString> OAILocalizedString::getArgs() const {
    return m_args;
}
void OAILocalizedString::setArgs(const QMap<QString, QString> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAILocalizedString::is_args_Set() const{
    return m_args_isSet;
}

bool OAILocalizedString::is_args_Valid() const{
    return m_args_isValid;
}

QString OAILocalizedString::getMessage() const {
    return m_message;
}
void OAILocalizedString::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAILocalizedString::is_message_Set() const{
    return m_message_isSet;
}

bool OAILocalizedString::is_message_Valid() const{
    return m_message_isValid;
}

QString OAILocalizedString::getToken() const {
    return m_token;
}
void OAILocalizedString::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAILocalizedString::is_token_Set() const{
    return m_token_isSet;
}

bool OAILocalizedString::is_token_Valid() const{
    return m_token_isValid;
}

bool OAILocalizedString::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocalizedString::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
