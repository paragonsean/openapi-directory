/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatabaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatabaseRequest::OAICreateDatabaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatabaseRequest::OAICreateDatabaseRequest() {
    this->initializeModel();
}

OAICreateDatabaseRequest::~OAICreateDatabaseRequest() {}

void OAICreateDatabaseRequest::initializeModel() {

    m_create_statement_isSet = false;
    m_create_statement_isValid = false;

    m_database_dialect_isSet = false;
    m_database_dialect_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_extra_statements_isSet = false;
    m_extra_statements_isValid = false;

    m_proto_descriptors_isSet = false;
    m_proto_descriptors_isValid = false;
}

void OAICreateDatabaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatabaseRequest::fromJsonObject(QJsonObject json) {

    m_create_statement_isValid = ::OpenAPI::fromJsonValue(m_create_statement, json[QString("createStatement")]);
    m_create_statement_isSet = !json[QString("createStatement")].isNull() && m_create_statement_isValid;

    m_database_dialect_isValid = ::OpenAPI::fromJsonValue(m_database_dialect, json[QString("databaseDialect")]);
    m_database_dialect_isSet = !json[QString("databaseDialect")].isNull() && m_database_dialect_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_extra_statements_isValid = ::OpenAPI::fromJsonValue(m_extra_statements, json[QString("extraStatements")]);
    m_extra_statements_isSet = !json[QString("extraStatements")].isNull() && m_extra_statements_isValid;

    m_proto_descriptors_isValid = ::OpenAPI::fromJsonValue(m_proto_descriptors, json[QString("protoDescriptors")]);
    m_proto_descriptors_isSet = !json[QString("protoDescriptors")].isNull() && m_proto_descriptors_isValid;
}

QString OAICreateDatabaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatabaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_create_statement_isSet) {
        obj.insert(QString("createStatement"), ::OpenAPI::toJsonValue(m_create_statement));
    }
    if (m_database_dialect_isSet) {
        obj.insert(QString("databaseDialect"), ::OpenAPI::toJsonValue(m_database_dialect));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_extra_statements.size() > 0) {
        obj.insert(QString("extraStatements"), ::OpenAPI::toJsonValue(m_extra_statements));
    }
    if (m_proto_descriptors_isSet) {
        obj.insert(QString("protoDescriptors"), ::OpenAPI::toJsonValue(m_proto_descriptors));
    }
    return obj;
}

QString OAICreateDatabaseRequest::getCreateStatement() const {
    return m_create_statement;
}
void OAICreateDatabaseRequest::setCreateStatement(const QString &create_statement) {
    m_create_statement = create_statement;
    m_create_statement_isSet = true;
}

bool OAICreateDatabaseRequest::is_create_statement_Set() const{
    return m_create_statement_isSet;
}

bool OAICreateDatabaseRequest::is_create_statement_Valid() const{
    return m_create_statement_isValid;
}

QString OAICreateDatabaseRequest::getDatabaseDialect() const {
    return m_database_dialect;
}
void OAICreateDatabaseRequest::setDatabaseDialect(const QString &database_dialect) {
    m_database_dialect = database_dialect;
    m_database_dialect_isSet = true;
}

bool OAICreateDatabaseRequest::is_database_dialect_Set() const{
    return m_database_dialect_isSet;
}

bool OAICreateDatabaseRequest::is_database_dialect_Valid() const{
    return m_database_dialect_isValid;
}

OAIEncryptionConfig OAICreateDatabaseRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreateDatabaseRequest::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreateDatabaseRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreateDatabaseRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QList<QString> OAICreateDatabaseRequest::getExtraStatements() const {
    return m_extra_statements;
}
void OAICreateDatabaseRequest::setExtraStatements(const QList<QString> &extra_statements) {
    m_extra_statements = extra_statements;
    m_extra_statements_isSet = true;
}

bool OAICreateDatabaseRequest::is_extra_statements_Set() const{
    return m_extra_statements_isSet;
}

bool OAICreateDatabaseRequest::is_extra_statements_Valid() const{
    return m_extra_statements_isValid;
}

QByteArray OAICreateDatabaseRequest::getProtoDescriptors() const {
    return m_proto_descriptors;
}
void OAICreateDatabaseRequest::setProtoDescriptors(const QByteArray &proto_descriptors) {
    m_proto_descriptors = proto_descriptors;
    m_proto_descriptors_isSet = true;
}

bool OAICreateDatabaseRequest::is_proto_descriptors_Set() const{
    return m_proto_descriptors_isSet;
}

bool OAICreateDatabaseRequest::is_proto_descriptors_Valid() const{
    return m_proto_descriptors_isValid;
}

bool OAICreateDatabaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dialect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_descriptors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatabaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
