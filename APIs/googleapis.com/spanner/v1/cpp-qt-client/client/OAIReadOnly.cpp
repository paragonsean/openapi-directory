/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadOnly.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadOnly::OAIReadOnly(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadOnly::OAIReadOnly() {
    this->initializeModel();
}

OAIReadOnly::~OAIReadOnly() {}

void OAIReadOnly::initializeModel() {

    m_exact_staleness_isSet = false;
    m_exact_staleness_isValid = false;

    m_max_staleness_isSet = false;
    m_max_staleness_isValid = false;

    m_min_read_timestamp_isSet = false;
    m_min_read_timestamp_isValid = false;

    m_read_timestamp_isSet = false;
    m_read_timestamp_isValid = false;

    m_return_read_timestamp_isSet = false;
    m_return_read_timestamp_isValid = false;

    m_strong_isSet = false;
    m_strong_isValid = false;
}

void OAIReadOnly::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadOnly::fromJsonObject(QJsonObject json) {

    m_exact_staleness_isValid = ::OpenAPI::fromJsonValue(m_exact_staleness, json[QString("exactStaleness")]);
    m_exact_staleness_isSet = !json[QString("exactStaleness")].isNull() && m_exact_staleness_isValid;

    m_max_staleness_isValid = ::OpenAPI::fromJsonValue(m_max_staleness, json[QString("maxStaleness")]);
    m_max_staleness_isSet = !json[QString("maxStaleness")].isNull() && m_max_staleness_isValid;

    m_min_read_timestamp_isValid = ::OpenAPI::fromJsonValue(m_min_read_timestamp, json[QString("minReadTimestamp")]);
    m_min_read_timestamp_isSet = !json[QString("minReadTimestamp")].isNull() && m_min_read_timestamp_isValid;

    m_read_timestamp_isValid = ::OpenAPI::fromJsonValue(m_read_timestamp, json[QString("readTimestamp")]);
    m_read_timestamp_isSet = !json[QString("readTimestamp")].isNull() && m_read_timestamp_isValid;

    m_return_read_timestamp_isValid = ::OpenAPI::fromJsonValue(m_return_read_timestamp, json[QString("returnReadTimestamp")]);
    m_return_read_timestamp_isSet = !json[QString("returnReadTimestamp")].isNull() && m_return_read_timestamp_isValid;

    m_strong_isValid = ::OpenAPI::fromJsonValue(m_strong, json[QString("strong")]);
    m_strong_isSet = !json[QString("strong")].isNull() && m_strong_isValid;
}

QString OAIReadOnly::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadOnly::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_staleness_isSet) {
        obj.insert(QString("exactStaleness"), ::OpenAPI::toJsonValue(m_exact_staleness));
    }
    if (m_max_staleness_isSet) {
        obj.insert(QString("maxStaleness"), ::OpenAPI::toJsonValue(m_max_staleness));
    }
    if (m_min_read_timestamp_isSet) {
        obj.insert(QString("minReadTimestamp"), ::OpenAPI::toJsonValue(m_min_read_timestamp));
    }
    if (m_read_timestamp_isSet) {
        obj.insert(QString("readTimestamp"), ::OpenAPI::toJsonValue(m_read_timestamp));
    }
    if (m_return_read_timestamp_isSet) {
        obj.insert(QString("returnReadTimestamp"), ::OpenAPI::toJsonValue(m_return_read_timestamp));
    }
    if (m_strong_isSet) {
        obj.insert(QString("strong"), ::OpenAPI::toJsonValue(m_strong));
    }
    return obj;
}

QString OAIReadOnly::getExactStaleness() const {
    return m_exact_staleness;
}
void OAIReadOnly::setExactStaleness(const QString &exact_staleness) {
    m_exact_staleness = exact_staleness;
    m_exact_staleness_isSet = true;
}

bool OAIReadOnly::is_exact_staleness_Set() const{
    return m_exact_staleness_isSet;
}

bool OAIReadOnly::is_exact_staleness_Valid() const{
    return m_exact_staleness_isValid;
}

QString OAIReadOnly::getMaxStaleness() const {
    return m_max_staleness;
}
void OAIReadOnly::setMaxStaleness(const QString &max_staleness) {
    m_max_staleness = max_staleness;
    m_max_staleness_isSet = true;
}

bool OAIReadOnly::is_max_staleness_Set() const{
    return m_max_staleness_isSet;
}

bool OAIReadOnly::is_max_staleness_Valid() const{
    return m_max_staleness_isValid;
}

QString OAIReadOnly::getMinReadTimestamp() const {
    return m_min_read_timestamp;
}
void OAIReadOnly::setMinReadTimestamp(const QString &min_read_timestamp) {
    m_min_read_timestamp = min_read_timestamp;
    m_min_read_timestamp_isSet = true;
}

bool OAIReadOnly::is_min_read_timestamp_Set() const{
    return m_min_read_timestamp_isSet;
}

bool OAIReadOnly::is_min_read_timestamp_Valid() const{
    return m_min_read_timestamp_isValid;
}

QString OAIReadOnly::getReadTimestamp() const {
    return m_read_timestamp;
}
void OAIReadOnly::setReadTimestamp(const QString &read_timestamp) {
    m_read_timestamp = read_timestamp;
    m_read_timestamp_isSet = true;
}

bool OAIReadOnly::is_read_timestamp_Set() const{
    return m_read_timestamp_isSet;
}

bool OAIReadOnly::is_read_timestamp_Valid() const{
    return m_read_timestamp_isValid;
}

bool OAIReadOnly::isReturnReadTimestamp() const {
    return m_return_read_timestamp;
}
void OAIReadOnly::setReturnReadTimestamp(const bool &return_read_timestamp) {
    m_return_read_timestamp = return_read_timestamp;
    m_return_read_timestamp_isSet = true;
}

bool OAIReadOnly::is_return_read_timestamp_Set() const{
    return m_return_read_timestamp_isSet;
}

bool OAIReadOnly::is_return_read_timestamp_Valid() const{
    return m_return_read_timestamp_isValid;
}

bool OAIReadOnly::isStrong() const {
    return m_strong;
}
void OAIReadOnly::setStrong(const bool &strong) {
    m_strong = strong;
    m_strong_isSet = true;
}

bool OAIReadOnly::is_strong_Set() const{
    return m_strong_isSet;
}

bool OAIReadOnly::is_strong_Valid() const{
    return m_strong_isValid;
}

bool OAIReadOnly::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_staleness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_staleness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_read_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_read_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strong_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadOnly::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
