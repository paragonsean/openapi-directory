/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackup::OAIBackup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackup::OAIBackup() {
    this->initializeModel();
}

OAIBackup::~OAIBackup() {}

void OAIBackup::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_database_dialect_isSet = false;
    m_database_dialect_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_max_expire_time_isSet = false;
    m_max_expire_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_referencing_backups_isSet = false;
    m_referencing_backups_isValid = false;

    m_referencing_databases_isSet = false;
    m_referencing_databases_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_version_time_isSet = false;
    m_version_time_isValid = false;
}

void OAIBackup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackup::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_database_dialect_isValid = ::OpenAPI::fromJsonValue(m_database_dialect, json[QString("databaseDialect")]);
    m_database_dialect_isSet = !json[QString("databaseDialect")].isNull() && m_database_dialect_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_max_expire_time_isValid = ::OpenAPI::fromJsonValue(m_max_expire_time, json[QString("maxExpireTime")]);
    m_max_expire_time_isSet = !json[QString("maxExpireTime")].isNull() && m_max_expire_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_referencing_backups_isValid = ::OpenAPI::fromJsonValue(m_referencing_backups, json[QString("referencingBackups")]);
    m_referencing_backups_isSet = !json[QString("referencingBackups")].isNull() && m_referencing_backups_isValid;

    m_referencing_databases_isValid = ::OpenAPI::fromJsonValue(m_referencing_databases, json[QString("referencingDatabases")]);
    m_referencing_databases_isSet = !json[QString("referencingDatabases")].isNull() && m_referencing_databases_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_version_time_isValid = ::OpenAPI::fromJsonValue(m_version_time, json[QString("versionTime")]);
    m_version_time_isSet = !json[QString("versionTime")].isNull() && m_version_time_isValid;
}

QString OAIBackup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackup::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_database_dialect_isSet) {
        obj.insert(QString("databaseDialect"), ::OpenAPI::toJsonValue(m_database_dialect));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_max_expire_time_isSet) {
        obj.insert(QString("maxExpireTime"), ::OpenAPI::toJsonValue(m_max_expire_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_referencing_backups.size() > 0) {
        obj.insert(QString("referencingBackups"), ::OpenAPI::toJsonValue(m_referencing_backups));
    }
    if (m_referencing_databases.size() > 0) {
        obj.insert(QString("referencingDatabases"), ::OpenAPI::toJsonValue(m_referencing_databases));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_version_time_isSet) {
        obj.insert(QString("versionTime"), ::OpenAPI::toJsonValue(m_version_time));
    }
    return obj;
}

QString OAIBackup::getCreateTime() const {
    return m_create_time;
}
void OAIBackup::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackup::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackup::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBackup::getDatabase() const {
    return m_database;
}
void OAIBackup::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIBackup::is_database_Set() const{
    return m_database_isSet;
}

bool OAIBackup::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIBackup::getDatabaseDialect() const {
    return m_database_dialect;
}
void OAIBackup::setDatabaseDialect(const QString &database_dialect) {
    m_database_dialect = database_dialect;
    m_database_dialect_isSet = true;
}

bool OAIBackup::is_database_dialect_Set() const{
    return m_database_dialect_isSet;
}

bool OAIBackup::is_database_dialect_Valid() const{
    return m_database_dialect_isValid;
}

OAIEncryptionInfo OAIBackup::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIBackup::setEncryptionInfo(const OAIEncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIBackup::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIBackup::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QString OAIBackup::getExpireTime() const {
    return m_expire_time;
}
void OAIBackup::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIBackup::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIBackup::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIBackup::getMaxExpireTime() const {
    return m_max_expire_time;
}
void OAIBackup::setMaxExpireTime(const QString &max_expire_time) {
    m_max_expire_time = max_expire_time;
    m_max_expire_time_isSet = true;
}

bool OAIBackup::is_max_expire_time_Set() const{
    return m_max_expire_time_isSet;
}

bool OAIBackup::is_max_expire_time_Valid() const{
    return m_max_expire_time_isValid;
}

QString OAIBackup::getName() const {
    return m_name;
}
void OAIBackup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBackup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBackup::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIBackup::getReferencingBackups() const {
    return m_referencing_backups;
}
void OAIBackup::setReferencingBackups(const QList<QString> &referencing_backups) {
    m_referencing_backups = referencing_backups;
    m_referencing_backups_isSet = true;
}

bool OAIBackup::is_referencing_backups_Set() const{
    return m_referencing_backups_isSet;
}

bool OAIBackup::is_referencing_backups_Valid() const{
    return m_referencing_backups_isValid;
}

QList<QString> OAIBackup::getReferencingDatabases() const {
    return m_referencing_databases;
}
void OAIBackup::setReferencingDatabases(const QList<QString> &referencing_databases) {
    m_referencing_databases = referencing_databases;
    m_referencing_databases_isSet = true;
}

bool OAIBackup::is_referencing_databases_Set() const{
    return m_referencing_databases_isSet;
}

bool OAIBackup::is_referencing_databases_Valid() const{
    return m_referencing_databases_isValid;
}

QString OAIBackup::getSizeBytes() const {
    return m_size_bytes;
}
void OAIBackup::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIBackup::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIBackup::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

QString OAIBackup::getState() const {
    return m_state;
}
void OAIBackup::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBackup::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBackup::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBackup::getVersionTime() const {
    return m_version_time;
}
void OAIBackup::setVersionTime(const QString &version_time) {
    m_version_time = version_time;
    m_version_time_isSet = true;
}

bool OAIBackup::is_version_time_Set() const{
    return m_version_time_isSet;
}

bool OAIBackup::is_version_time_Valid() const{
    return m_version_time_isValid;
}

bool OAIBackup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dialect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referencing_backups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referencing_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
