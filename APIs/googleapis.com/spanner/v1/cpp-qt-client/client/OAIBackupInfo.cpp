/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupInfo::OAIBackupInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupInfo::OAIBackupInfo() {
    this->initializeModel();
}

OAIBackupInfo::~OAIBackupInfo() {}

void OAIBackupInfo::initializeModel() {

    m_backup_isSet = false;
    m_backup_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_source_database_isSet = false;
    m_source_database_isValid = false;

    m_version_time_isSet = false;
    m_version_time_isValid = false;
}

void OAIBackupInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupInfo::fromJsonObject(QJsonObject json) {

    m_backup_isValid = ::OpenAPI::fromJsonValue(m_backup, json[QString("backup")]);
    m_backup_isSet = !json[QString("backup")].isNull() && m_backup_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_source_database_isValid = ::OpenAPI::fromJsonValue(m_source_database, json[QString("sourceDatabase")]);
    m_source_database_isSet = !json[QString("sourceDatabase")].isNull() && m_source_database_isValid;

    m_version_time_isValid = ::OpenAPI::fromJsonValue(m_version_time, json[QString("versionTime")]);
    m_version_time_isSet = !json[QString("versionTime")].isNull() && m_version_time_isValid;
}

QString OAIBackupInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_isSet) {
        obj.insert(QString("backup"), ::OpenAPI::toJsonValue(m_backup));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_source_database_isSet) {
        obj.insert(QString("sourceDatabase"), ::OpenAPI::toJsonValue(m_source_database));
    }
    if (m_version_time_isSet) {
        obj.insert(QString("versionTime"), ::OpenAPI::toJsonValue(m_version_time));
    }
    return obj;
}

QString OAIBackupInfo::getBackup() const {
    return m_backup;
}
void OAIBackupInfo::setBackup(const QString &backup) {
    m_backup = backup;
    m_backup_isSet = true;
}

bool OAIBackupInfo::is_backup_Set() const{
    return m_backup_isSet;
}

bool OAIBackupInfo::is_backup_Valid() const{
    return m_backup_isValid;
}

QString OAIBackupInfo::getCreateTime() const {
    return m_create_time;
}
void OAIBackupInfo::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIBackupInfo::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIBackupInfo::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIBackupInfo::getSourceDatabase() const {
    return m_source_database;
}
void OAIBackupInfo::setSourceDatabase(const QString &source_database) {
    m_source_database = source_database;
    m_source_database_isSet = true;
}

bool OAIBackupInfo::is_source_database_Set() const{
    return m_source_database_isSet;
}

bool OAIBackupInfo::is_source_database_Valid() const{
    return m_source_database_isValid;
}

QString OAIBackupInfo::getVersionTime() const {
    return m_version_time;
}
void OAIBackupInfo::setVersionTime(const QString &version_time) {
    m_version_time = version_time;
    m_version_time_isSet = true;
}

bool OAIBackupInfo::is_version_time_Set() const{
    return m_version_time_isSet;
}

bool OAIBackupInfo::is_version_time_Valid() const{
    return m_version_time_isValid;
}

bool OAIBackupInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
