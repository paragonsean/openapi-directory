/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteBatchDmlResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteBatchDmlResponse::OAIExecuteBatchDmlResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteBatchDmlResponse::OAIExecuteBatchDmlResponse() {
    this->initializeModel();
}

OAIExecuteBatchDmlResponse::~OAIExecuteBatchDmlResponse() {}

void OAIExecuteBatchDmlResponse::initializeModel() {

    m_result_sets_isSet = false;
    m_result_sets_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIExecuteBatchDmlResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteBatchDmlResponse::fromJsonObject(QJsonObject json) {

    m_result_sets_isValid = ::OpenAPI::fromJsonValue(m_result_sets, json[QString("resultSets")]);
    m_result_sets_isSet = !json[QString("resultSets")].isNull() && m_result_sets_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIExecuteBatchDmlResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteBatchDmlResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_result_sets.size() > 0) {
        obj.insert(QString("resultSets"), ::OpenAPI::toJsonValue(m_result_sets));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<OAIResultSet> OAIExecuteBatchDmlResponse::getResultSets() const {
    return m_result_sets;
}
void OAIExecuteBatchDmlResponse::setResultSets(const QList<OAIResultSet> &result_sets) {
    m_result_sets = result_sets;
    m_result_sets_isSet = true;
}

bool OAIExecuteBatchDmlResponse::is_result_sets_Set() const{
    return m_result_sets_isSet;
}

bool OAIExecuteBatchDmlResponse::is_result_sets_Valid() const{
    return m_result_sets_isValid;
}

OAIStatus OAIExecuteBatchDmlResponse::getStatus() const {
    return m_status;
}
void OAIExecuteBatchDmlResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExecuteBatchDmlResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExecuteBatchDmlResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIExecuteBatchDmlResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteBatchDmlResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
