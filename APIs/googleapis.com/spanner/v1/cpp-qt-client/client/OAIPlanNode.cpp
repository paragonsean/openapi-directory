/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlanNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlanNode::OAIPlanNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlanNode::OAIPlanNode() {
    this->initializeModel();
}

OAIPlanNode::~OAIPlanNode() {}

void OAIPlanNode::initializeModel() {

    m_child_links_isSet = false;
    m_child_links_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_execution_stats_isSet = false;
    m_execution_stats_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_short_representation_isSet = false;
    m_short_representation_isValid = false;
}

void OAIPlanNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlanNode::fromJsonObject(QJsonObject json) {

    m_child_links_isValid = ::OpenAPI::fromJsonValue(m_child_links, json[QString("childLinks")]);
    m_child_links_isSet = !json[QString("childLinks")].isNull() && m_child_links_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_execution_stats_isValid = ::OpenAPI::fromJsonValue(m_execution_stats, json[QString("executionStats")]);
    m_execution_stats_isSet = !json[QString("executionStats")].isNull() && m_execution_stats_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_short_representation_isValid = ::OpenAPI::fromJsonValue(m_short_representation, json[QString("shortRepresentation")]);
    m_short_representation_isSet = !json[QString("shortRepresentation")].isNull() && m_short_representation_isValid;
}

QString OAIPlanNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlanNode::asJsonObject() const {
    QJsonObject obj;
    if (m_child_links.size() > 0) {
        obj.insert(QString("childLinks"), ::OpenAPI::toJsonValue(m_child_links));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_execution_stats.size() > 0) {
        obj.insert(QString("executionStats"), ::OpenAPI::toJsonValue(m_execution_stats));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_short_representation.isSet()) {
        obj.insert(QString("shortRepresentation"), ::OpenAPI::toJsonValue(m_short_representation));
    }
    return obj;
}

QList<OAIChildLink> OAIPlanNode::getChildLinks() const {
    return m_child_links;
}
void OAIPlanNode::setChildLinks(const QList<OAIChildLink> &child_links) {
    m_child_links = child_links;
    m_child_links_isSet = true;
}

bool OAIPlanNode::is_child_links_Set() const{
    return m_child_links_isSet;
}

bool OAIPlanNode::is_child_links_Valid() const{
    return m_child_links_isValid;
}

QString OAIPlanNode::getDisplayName() const {
    return m_display_name;
}
void OAIPlanNode::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPlanNode::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPlanNode::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QMap<QString, QJsonValue> OAIPlanNode::getExecutionStats() const {
    return m_execution_stats;
}
void OAIPlanNode::setExecutionStats(const QMap<QString, QJsonValue> &execution_stats) {
    m_execution_stats = execution_stats;
    m_execution_stats_isSet = true;
}

bool OAIPlanNode::is_execution_stats_Set() const{
    return m_execution_stats_isSet;
}

bool OAIPlanNode::is_execution_stats_Valid() const{
    return m_execution_stats_isValid;
}

qint32 OAIPlanNode::getIndex() const {
    return m_index;
}
void OAIPlanNode::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIPlanNode::is_index_Set() const{
    return m_index_isSet;
}

bool OAIPlanNode::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIPlanNode::getKind() const {
    return m_kind;
}
void OAIPlanNode::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPlanNode::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPlanNode::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QJsonValue> OAIPlanNode::getMetadata() const {
    return m_metadata;
}
void OAIPlanNode::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPlanNode::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPlanNode::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIShortRepresentation OAIPlanNode::getShortRepresentation() const {
    return m_short_representation;
}
void OAIPlanNode::setShortRepresentation(const OAIShortRepresentation &short_representation) {
    m_short_representation = short_representation;
    m_short_representation_isSet = true;
}

bool OAIPlanNode::is_short_representation_Set() const{
    return m_short_representation_isSet;
}

bool OAIPlanNode::is_short_representation_Valid() const{
    return m_short_representation_isValid;
}

bool OAIPlanNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_representation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlanNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
