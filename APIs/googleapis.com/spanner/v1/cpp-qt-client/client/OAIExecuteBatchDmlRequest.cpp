/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteBatchDmlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteBatchDmlRequest::OAIExecuteBatchDmlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteBatchDmlRequest::OAIExecuteBatchDmlRequest() {
    this->initializeModel();
}

OAIExecuteBatchDmlRequest::~OAIExecuteBatchDmlRequest() {}

void OAIExecuteBatchDmlRequest::initializeModel() {

    m_request_options_isSet = false;
    m_request_options_isValid = false;

    m_seqno_isSet = false;
    m_seqno_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIExecuteBatchDmlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteBatchDmlRequest::fromJsonObject(QJsonObject json) {

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;

    m_seqno_isValid = ::OpenAPI::fromJsonValue(m_seqno, json[QString("seqno")]);
    m_seqno_isSet = !json[QString("seqno")].isNull() && m_seqno_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIExecuteBatchDmlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteBatchDmlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    if (m_seqno_isSet) {
        obj.insert(QString("seqno"), ::OpenAPI::toJsonValue(m_seqno));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

OAIRequestOptions OAIExecuteBatchDmlRequest::getRequestOptions() const {
    return m_request_options;
}
void OAIExecuteBatchDmlRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAIExecuteBatchDmlRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAIExecuteBatchDmlRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

QString OAIExecuteBatchDmlRequest::getSeqno() const {
    return m_seqno;
}
void OAIExecuteBatchDmlRequest::setSeqno(const QString &seqno) {
    m_seqno = seqno;
    m_seqno_isSet = true;
}

bool OAIExecuteBatchDmlRequest::is_seqno_Set() const{
    return m_seqno_isSet;
}

bool OAIExecuteBatchDmlRequest::is_seqno_Valid() const{
    return m_seqno_isValid;
}

QList<OAIStatement> OAIExecuteBatchDmlRequest::getStatements() const {
    return m_statements;
}
void OAIExecuteBatchDmlRequest::setStatements(const QList<OAIStatement> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIExecuteBatchDmlRequest::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIExecuteBatchDmlRequest::is_statements_Valid() const{
    return m_statements_isValid;
}

OAITransactionSelector OAIExecuteBatchDmlRequest::getTransaction() const {
    return m_transaction;
}
void OAIExecuteBatchDmlRequest::setTransaction(const OAITransactionSelector &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIExecuteBatchDmlRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIExecuteBatchDmlRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIExecuteBatchDmlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_seqno_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteBatchDmlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
