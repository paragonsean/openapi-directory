/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabase::OAIDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabase::OAIDatabase() {
    this->initializeModel();
}

OAIDatabase::~OAIDatabase() {}

void OAIDatabase::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_database_dialect_isSet = false;
    m_database_dialect_isValid = false;

    m_default_leader_isSet = false;
    m_default_leader_isValid = false;

    m_earliest_version_time_isSet = false;
    m_earliest_version_time_isValid = false;

    m_enable_drop_protection_isSet = false;
    m_enable_drop_protection_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_restore_info_isSet = false;
    m_restore_info_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_version_retention_period_isSet = false;
    m_version_retention_period_isValid = false;
}

void OAIDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabase::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_database_dialect_isValid = ::OpenAPI::fromJsonValue(m_database_dialect, json[QString("databaseDialect")]);
    m_database_dialect_isSet = !json[QString("databaseDialect")].isNull() && m_database_dialect_isValid;

    m_default_leader_isValid = ::OpenAPI::fromJsonValue(m_default_leader, json[QString("defaultLeader")]);
    m_default_leader_isSet = !json[QString("defaultLeader")].isNull() && m_default_leader_isValid;

    m_earliest_version_time_isValid = ::OpenAPI::fromJsonValue(m_earliest_version_time, json[QString("earliestVersionTime")]);
    m_earliest_version_time_isSet = !json[QString("earliestVersionTime")].isNull() && m_earliest_version_time_isValid;

    m_enable_drop_protection_isValid = ::OpenAPI::fromJsonValue(m_enable_drop_protection, json[QString("enableDropProtection")]);
    m_enable_drop_protection_isSet = !json[QString("enableDropProtection")].isNull() && m_enable_drop_protection_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_restore_info_isValid = ::OpenAPI::fromJsonValue(m_restore_info, json[QString("restoreInfo")]);
    m_restore_info_isSet = !json[QString("restoreInfo")].isNull() && m_restore_info_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_version_retention_period_isValid = ::OpenAPI::fromJsonValue(m_version_retention_period, json[QString("versionRetentionPeriod")]);
    m_version_retention_period_isSet = !json[QString("versionRetentionPeriod")].isNull() && m_version_retention_period_isValid;
}

QString OAIDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_database_dialect_isSet) {
        obj.insert(QString("databaseDialect"), ::OpenAPI::toJsonValue(m_database_dialect));
    }
    if (m_default_leader_isSet) {
        obj.insert(QString("defaultLeader"), ::OpenAPI::toJsonValue(m_default_leader));
    }
    if (m_earliest_version_time_isSet) {
        obj.insert(QString("earliestVersionTime"), ::OpenAPI::toJsonValue(m_earliest_version_time));
    }
    if (m_enable_drop_protection_isSet) {
        obj.insert(QString("enableDropProtection"), ::OpenAPI::toJsonValue(m_enable_drop_protection));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_encryption_info.size() > 0) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_restore_info.isSet()) {
        obj.insert(QString("restoreInfo"), ::OpenAPI::toJsonValue(m_restore_info));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_version_retention_period_isSet) {
        obj.insert(QString("versionRetentionPeriod"), ::OpenAPI::toJsonValue(m_version_retention_period));
    }
    return obj;
}

QString OAIDatabase::getCreateTime() const {
    return m_create_time;
}
void OAIDatabase::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDatabase::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDatabase::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDatabase::getDatabaseDialect() const {
    return m_database_dialect;
}
void OAIDatabase::setDatabaseDialect(const QString &database_dialect) {
    m_database_dialect = database_dialect;
    m_database_dialect_isSet = true;
}

bool OAIDatabase::is_database_dialect_Set() const{
    return m_database_dialect_isSet;
}

bool OAIDatabase::is_database_dialect_Valid() const{
    return m_database_dialect_isValid;
}

QString OAIDatabase::getDefaultLeader() const {
    return m_default_leader;
}
void OAIDatabase::setDefaultLeader(const QString &default_leader) {
    m_default_leader = default_leader;
    m_default_leader_isSet = true;
}

bool OAIDatabase::is_default_leader_Set() const{
    return m_default_leader_isSet;
}

bool OAIDatabase::is_default_leader_Valid() const{
    return m_default_leader_isValid;
}

QString OAIDatabase::getEarliestVersionTime() const {
    return m_earliest_version_time;
}
void OAIDatabase::setEarliestVersionTime(const QString &earliest_version_time) {
    m_earliest_version_time = earliest_version_time;
    m_earliest_version_time_isSet = true;
}

bool OAIDatabase::is_earliest_version_time_Set() const{
    return m_earliest_version_time_isSet;
}

bool OAIDatabase::is_earliest_version_time_Valid() const{
    return m_earliest_version_time_isValid;
}

bool OAIDatabase::isEnableDropProtection() const {
    return m_enable_drop_protection;
}
void OAIDatabase::setEnableDropProtection(const bool &enable_drop_protection) {
    m_enable_drop_protection = enable_drop_protection;
    m_enable_drop_protection_isSet = true;
}

bool OAIDatabase::is_enable_drop_protection_Set() const{
    return m_enable_drop_protection_isSet;
}

bool OAIDatabase::is_enable_drop_protection_Valid() const{
    return m_enable_drop_protection_isValid;
}

OAIEncryptionConfig OAIDatabase::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIDatabase::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIDatabase::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIDatabase::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QList<OAIEncryptionInfo> OAIDatabase::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAIDatabase::setEncryptionInfo(const QList<OAIEncryptionInfo> &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAIDatabase::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAIDatabase::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QString OAIDatabase::getName() const {
    return m_name;
}
void OAIDatabase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabase::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDatabase::isReconciling() const {
    return m_reconciling;
}
void OAIDatabase::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIDatabase::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIDatabase::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

OAIRestoreInfo OAIDatabase::getRestoreInfo() const {
    return m_restore_info;
}
void OAIDatabase::setRestoreInfo(const OAIRestoreInfo &restore_info) {
    m_restore_info = restore_info;
    m_restore_info_isSet = true;
}

bool OAIDatabase::is_restore_info_Set() const{
    return m_restore_info_isSet;
}

bool OAIDatabase::is_restore_info_Valid() const{
    return m_restore_info_isValid;
}

QString OAIDatabase::getState() const {
    return m_state;
}
void OAIDatabase::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDatabase::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDatabase::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDatabase::getVersionRetentionPeriod() const {
    return m_version_retention_period;
}
void OAIDatabase::setVersionRetentionPeriod(const QString &version_retention_period) {
    m_version_retention_period = version_retention_period;
    m_version_retention_period_isSet = true;
}

bool OAIDatabase::is_version_retention_period_Set() const{
    return m_version_retention_period_isSet;
}

bool OAIDatabase::is_version_retention_period_Valid() const{
    return m_version_retention_period_isValid;
}

bool OAIDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dialect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_leader_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earliest_version_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_drop_protection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
