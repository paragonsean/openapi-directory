/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDatabaseRequest.h
 *
 * The request for CreateDatabase.
 */

#ifndef OAICreateDatabaseRequest_H
#define OAICreateDatabaseRequest_H

#include <QJsonObject>

#include "OAIEncryptionConfig.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionConfig;

class OAICreateDatabaseRequest : public OAIObject {
public:
    OAICreateDatabaseRequest();
    OAICreateDatabaseRequest(QString json);
    ~OAICreateDatabaseRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateStatement() const;
    void setCreateStatement(const QString &create_statement);
    bool is_create_statement_Set() const;
    bool is_create_statement_Valid() const;

    QString getDatabaseDialect() const;
    void setDatabaseDialect(const QString &database_dialect);
    bool is_database_dialect_Set() const;
    bool is_database_dialect_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    QList<QString> getExtraStatements() const;
    void setExtraStatements(const QList<QString> &extra_statements);
    bool is_extra_statements_Set() const;
    bool is_extra_statements_Valid() const;

    QByteArray getProtoDescriptors() const;
    void setProtoDescriptors(const QByteArray &proto_descriptors);
    bool is_proto_descriptors_Set() const;
    bool is_proto_descriptors_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_statement;
    bool m_create_statement_isSet;
    bool m_create_statement_isValid;

    QString m_database_dialect;
    bool m_database_dialect_isSet;
    bool m_database_dialect_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    QList<QString> m_extra_statements;
    bool m_extra_statements_isSet;
    bool m_extra_statements_isValid;

    QByteArray m_proto_descriptors;
    bool m_proto_descriptors_isSet;
    bool m_proto_descriptors_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDatabaseRequest)

#endif // OAICreateDatabaseRequest_H
