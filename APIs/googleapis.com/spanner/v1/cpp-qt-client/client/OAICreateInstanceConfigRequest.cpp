/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstanceConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstanceConfigRequest::OAICreateInstanceConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstanceConfigRequest::OAICreateInstanceConfigRequest() {
    this->initializeModel();
}

OAICreateInstanceConfigRequest::~OAICreateInstanceConfigRequest() {}

void OAICreateInstanceConfigRequest::initializeModel() {

    m_instance_config_isSet = false;
    m_instance_config_isValid = false;

    m_instance_config_id_isSet = false;
    m_instance_config_id_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAICreateInstanceConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstanceConfigRequest::fromJsonObject(QJsonObject json) {

    m_instance_config_isValid = ::OpenAPI::fromJsonValue(m_instance_config, json[QString("instanceConfig")]);
    m_instance_config_isSet = !json[QString("instanceConfig")].isNull() && m_instance_config_isValid;

    m_instance_config_id_isValid = ::OpenAPI::fromJsonValue(m_instance_config_id, json[QString("instanceConfigId")]);
    m_instance_config_id_isSet = !json[QString("instanceConfigId")].isNull() && m_instance_config_id_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAICreateInstanceConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstanceConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_config.isSet()) {
        obj.insert(QString("instanceConfig"), ::OpenAPI::toJsonValue(m_instance_config));
    }
    if (m_instance_config_id_isSet) {
        obj.insert(QString("instanceConfigId"), ::OpenAPI::toJsonValue(m_instance_config_id));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIInstanceConfig OAICreateInstanceConfigRequest::getInstanceConfig() const {
    return m_instance_config;
}
void OAICreateInstanceConfigRequest::setInstanceConfig(const OAIInstanceConfig &instance_config) {
    m_instance_config = instance_config;
    m_instance_config_isSet = true;
}

bool OAICreateInstanceConfigRequest::is_instance_config_Set() const{
    return m_instance_config_isSet;
}

bool OAICreateInstanceConfigRequest::is_instance_config_Valid() const{
    return m_instance_config_isValid;
}

QString OAICreateInstanceConfigRequest::getInstanceConfigId() const {
    return m_instance_config_id;
}
void OAICreateInstanceConfigRequest::setInstanceConfigId(const QString &instance_config_id) {
    m_instance_config_id = instance_config_id;
    m_instance_config_id_isSet = true;
}

bool OAICreateInstanceConfigRequest::is_instance_config_id_Set() const{
    return m_instance_config_id_isSet;
}

bool OAICreateInstanceConfigRequest::is_instance_config_id_Valid() const{
    return m_instance_config_id_isValid;
}

bool OAICreateInstanceConfigRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAICreateInstanceConfigRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAICreateInstanceConfigRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAICreateInstanceConfigRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAICreateInstanceConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstanceConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
