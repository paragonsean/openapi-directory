/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitRequest::OAICommitRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitRequest::OAICommitRequest() {
    this->initializeModel();
}

OAICommitRequest::~OAICommitRequest() {}

void OAICommitRequest::initializeModel() {

    m_max_commit_delay_isSet = false;
    m_max_commit_delay_isValid = false;

    m_mutations_isSet = false;
    m_mutations_isValid = false;

    m_request_options_isSet = false;
    m_request_options_isValid = false;

    m_return_commit_stats_isSet = false;
    m_return_commit_stats_isValid = false;

    m_single_use_transaction_isSet = false;
    m_single_use_transaction_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;
}

void OAICommitRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitRequest::fromJsonObject(QJsonObject json) {

    m_max_commit_delay_isValid = ::OpenAPI::fromJsonValue(m_max_commit_delay, json[QString("maxCommitDelay")]);
    m_max_commit_delay_isSet = !json[QString("maxCommitDelay")].isNull() && m_max_commit_delay_isValid;

    m_mutations_isValid = ::OpenAPI::fromJsonValue(m_mutations, json[QString("mutations")]);
    m_mutations_isSet = !json[QString("mutations")].isNull() && m_mutations_isValid;

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;

    m_return_commit_stats_isValid = ::OpenAPI::fromJsonValue(m_return_commit_stats, json[QString("returnCommitStats")]);
    m_return_commit_stats_isSet = !json[QString("returnCommitStats")].isNull() && m_return_commit_stats_isValid;

    m_single_use_transaction_isValid = ::OpenAPI::fromJsonValue(m_single_use_transaction, json[QString("singleUseTransaction")]);
    m_single_use_transaction_isSet = !json[QString("singleUseTransaction")].isNull() && m_single_use_transaction_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transactionId")]);
    m_transaction_id_isSet = !json[QString("transactionId")].isNull() && m_transaction_id_isValid;
}

QString OAICommitRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_commit_delay_isSet) {
        obj.insert(QString("maxCommitDelay"), ::OpenAPI::toJsonValue(m_max_commit_delay));
    }
    if (m_mutations.size() > 0) {
        obj.insert(QString("mutations"), ::OpenAPI::toJsonValue(m_mutations));
    }
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    if (m_return_commit_stats_isSet) {
        obj.insert(QString("returnCommitStats"), ::OpenAPI::toJsonValue(m_return_commit_stats));
    }
    if (m_single_use_transaction.isSet()) {
        obj.insert(QString("singleUseTransaction"), ::OpenAPI::toJsonValue(m_single_use_transaction));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    return obj;
}

QString OAICommitRequest::getMaxCommitDelay() const {
    return m_max_commit_delay;
}
void OAICommitRequest::setMaxCommitDelay(const QString &max_commit_delay) {
    m_max_commit_delay = max_commit_delay;
    m_max_commit_delay_isSet = true;
}

bool OAICommitRequest::is_max_commit_delay_Set() const{
    return m_max_commit_delay_isSet;
}

bool OAICommitRequest::is_max_commit_delay_Valid() const{
    return m_max_commit_delay_isValid;
}

QList<OAIMutation> OAICommitRequest::getMutations() const {
    return m_mutations;
}
void OAICommitRequest::setMutations(const QList<OAIMutation> &mutations) {
    m_mutations = mutations;
    m_mutations_isSet = true;
}

bool OAICommitRequest::is_mutations_Set() const{
    return m_mutations_isSet;
}

bool OAICommitRequest::is_mutations_Valid() const{
    return m_mutations_isValid;
}

OAIRequestOptions OAICommitRequest::getRequestOptions() const {
    return m_request_options;
}
void OAICommitRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAICommitRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAICommitRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

bool OAICommitRequest::isReturnCommitStats() const {
    return m_return_commit_stats;
}
void OAICommitRequest::setReturnCommitStats(const bool &return_commit_stats) {
    m_return_commit_stats = return_commit_stats;
    m_return_commit_stats_isSet = true;
}

bool OAICommitRequest::is_return_commit_stats_Set() const{
    return m_return_commit_stats_isSet;
}

bool OAICommitRequest::is_return_commit_stats_Valid() const{
    return m_return_commit_stats_isValid;
}

OAITransactionOptions OAICommitRequest::getSingleUseTransaction() const {
    return m_single_use_transaction;
}
void OAICommitRequest::setSingleUseTransaction(const OAITransactionOptions &single_use_transaction) {
    m_single_use_transaction = single_use_transaction;
    m_single_use_transaction_isSet = true;
}

bool OAICommitRequest::is_single_use_transaction_Set() const{
    return m_single_use_transaction_isSet;
}

bool OAICommitRequest::is_single_use_transaction_Valid() const{
    return m_single_use_transaction_isValid;
}

QByteArray OAICommitRequest::getTransactionId() const {
    return m_transaction_id;
}
void OAICommitRequest::setTransactionId(const QByteArray &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAICommitRequest::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAICommitRequest::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

bool OAICommitRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_commit_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_commit_stats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
