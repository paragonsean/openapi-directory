/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChildLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChildLink::OAIChildLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChildLink::OAIChildLink() {
    this->initializeModel();
}

OAIChildLink::~OAIChildLink() {}

void OAIChildLink::initializeModel() {

    m_child_index_isSet = false;
    m_child_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;
}

void OAIChildLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChildLink::fromJsonObject(QJsonObject json) {

    m_child_index_isValid = ::OpenAPI::fromJsonValue(m_child_index, json[QString("childIndex")]);
    m_child_index_isSet = !json[QString("childIndex")].isNull() && m_child_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;
}

QString OAIChildLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChildLink::asJsonObject() const {
    QJsonObject obj;
    if (m_child_index_isSet) {
        obj.insert(QString("childIndex"), ::OpenAPI::toJsonValue(m_child_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    return obj;
}

qint32 OAIChildLink::getChildIndex() const {
    return m_child_index;
}
void OAIChildLink::setChildIndex(const qint32 &child_index) {
    m_child_index = child_index;
    m_child_index_isSet = true;
}

bool OAIChildLink::is_child_index_Set() const{
    return m_child_index_isSet;
}

bool OAIChildLink::is_child_index_Valid() const{
    return m_child_index_isValid;
}

QString OAIChildLink::getType() const {
    return m_type;
}
void OAIChildLink::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChildLink::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChildLink::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChildLink::getVariable() const {
    return m_variable;
}
void OAIChildLink::setVariable(const QString &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIChildLink::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIChildLink::is_variable_Valid() const{
    return m_variable_isValid;
}

bool OAIChildLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChildLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
