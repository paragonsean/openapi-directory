/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDelete.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDelete::OAIDelete(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDelete::OAIDelete() {
    this->initializeModel();
}

OAIDelete::~OAIDelete() {}

void OAIDelete::initializeModel() {

    m_key_set_isSet = false;
    m_key_set_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;
}

void OAIDelete::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDelete::fromJsonObject(QJsonObject json) {

    m_key_set_isValid = ::OpenAPI::fromJsonValue(m_key_set, json[QString("keySet")]);
    m_key_set_isSet = !json[QString("keySet")].isNull() && m_key_set_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;
}

QString OAIDelete::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDelete::asJsonObject() const {
    QJsonObject obj;
    if (m_key_set.isSet()) {
        obj.insert(QString("keySet"), ::OpenAPI::toJsonValue(m_key_set));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    return obj;
}

OAIKeySet OAIDelete::getKeySet() const {
    return m_key_set;
}
void OAIDelete::setKeySet(const OAIKeySet &key_set) {
    m_key_set = key_set;
    m_key_set_isSet = true;
}

bool OAIDelete::is_key_set_Set() const{
    return m_key_set_isSet;
}

bool OAIDelete::is_key_set_Valid() const{
    return m_key_set_isValid;
}

QString OAIDelete::getTable() const {
    return m_table;
}
void OAIDelete::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIDelete::is_table_Set() const{
    return m_table_isSet;
}

bool OAIDelete::is_table_Valid() const{
    return m_table_isValid;
}

bool OAIDelete::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDelete::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
