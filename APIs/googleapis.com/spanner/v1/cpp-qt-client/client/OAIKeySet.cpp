/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeySet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeySet::OAIKeySet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeySet::OAIKeySet() {
    this->initializeModel();
}

OAIKeySet::~OAIKeySet() {}

void OAIKeySet::initializeModel() {

    m_all_isSet = false;
    m_all_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_ranges_isSet = false;
    m_ranges_isValid = false;
}

void OAIKeySet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeySet::fromJsonObject(QJsonObject json) {

    m_all_isValid = ::OpenAPI::fromJsonValue(m_all, json[QString("all")]);
    m_all_isSet = !json[QString("all")].isNull() && m_all_isValid;

    if(json["keys"].isArray()){
        auto arr = json["keys"].toArray();
        m_keys_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_keys_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_keys_isSet = !jval.isNull() && m_keys_isValid;
                m_keys.push_back(item);
            }
        }
    }

    m_ranges_isValid = ::OpenAPI::fromJsonValue(m_ranges, json[QString("ranges")]);
    m_ranges_isSet = !json[QString("ranges")].isNull() && m_ranges_isValid;
}

QString OAIKeySet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeySet::asJsonObject() const {
    QJsonObject obj;
    if (m_all_isSet) {
        obj.insert(QString("all"), ::OpenAPI::toJsonValue(m_all));
    }
    if (m_keys.size() > 0) {
        
        obj.insert(QString("keys"), toJsonValue(m_keys));
    }
    if (m_ranges.size() > 0) {
        obj.insert(QString("ranges"), ::OpenAPI::toJsonValue(m_ranges));
    }
    return obj;
}

bool OAIKeySet::isAll() const {
    return m_all;
}
void OAIKeySet::setAll(const bool &all) {
    m_all = all;
    m_all_isSet = true;
}

bool OAIKeySet::is_all_Set() const{
    return m_all_isSet;
}

bool OAIKeySet::is_all_Valid() const{
    return m_all_isValid;
}

QList<QList<QJsonValue>> OAIKeySet::getKeys() const {
    return m_keys;
}
void OAIKeySet::setKeys(const QList<QList<QJsonValue>> &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIKeySet::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIKeySet::is_keys_Valid() const{
    return m_keys_isValid;
}

QList<OAIKeyRange> OAIKeySet::getRanges() const {
    return m_ranges;
}
void OAIKeySet::setRanges(const QList<OAIKeyRange> &ranges) {
    m_ranges = ranges;
    m_ranges_isSet = true;
}

bool OAIKeySet::is_ranges_Set() const{
    return m_ranges_isSet;
}

bool OAIKeySet::is_ranges_Valid() const{
    return m_ranges_isValid;
}

bool OAIKeySet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeySet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
