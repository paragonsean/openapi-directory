/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceConfig::OAIInstanceConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceConfig::OAIInstanceConfig() {
    this->initializeModel();
}

OAIInstanceConfig::~OAIInstanceConfig() {}

void OAIInstanceConfig::initializeModel() {

    m_base_config_isSet = false;
    m_base_config_isValid = false;

    m_config_type_isSet = false;
    m_config_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_free_instance_availability_isSet = false;
    m_free_instance_availability_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_leader_options_isSet = false;
    m_leader_options_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_optional_replicas_isSet = false;
    m_optional_replicas_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_replicas_isSet = false;
    m_replicas_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_limit_per_processing_unit_isSet = false;
    m_storage_limit_per_processing_unit_isValid = false;
}

void OAIInstanceConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceConfig::fromJsonObject(QJsonObject json) {

    m_base_config_isValid = ::OpenAPI::fromJsonValue(m_base_config, json[QString("baseConfig")]);
    m_base_config_isSet = !json[QString("baseConfig")].isNull() && m_base_config_isValid;

    m_config_type_isValid = ::OpenAPI::fromJsonValue(m_config_type, json[QString("configType")]);
    m_config_type_isSet = !json[QString("configType")].isNull() && m_config_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_free_instance_availability_isValid = ::OpenAPI::fromJsonValue(m_free_instance_availability, json[QString("freeInstanceAvailability")]);
    m_free_instance_availability_isSet = !json[QString("freeInstanceAvailability")].isNull() && m_free_instance_availability_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_leader_options_isValid = ::OpenAPI::fromJsonValue(m_leader_options, json[QString("leaderOptions")]);
    m_leader_options_isSet = !json[QString("leaderOptions")].isNull() && m_leader_options_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_optional_replicas_isValid = ::OpenAPI::fromJsonValue(m_optional_replicas, json[QString("optionalReplicas")]);
    m_optional_replicas_isSet = !json[QString("optionalReplicas")].isNull() && m_optional_replicas_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_replicas_isValid = ::OpenAPI::fromJsonValue(m_replicas, json[QString("replicas")]);
    m_replicas_isSet = !json[QString("replicas")].isNull() && m_replicas_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_limit_per_processing_unit_isValid = ::OpenAPI::fromJsonValue(m_storage_limit_per_processing_unit, json[QString("storageLimitPerProcessingUnit")]);
    m_storage_limit_per_processing_unit_isSet = !json[QString("storageLimitPerProcessingUnit")].isNull() && m_storage_limit_per_processing_unit_isValid;
}

QString OAIInstanceConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_base_config_isSet) {
        obj.insert(QString("baseConfig"), ::OpenAPI::toJsonValue(m_base_config));
    }
    if (m_config_type_isSet) {
        obj.insert(QString("configType"), ::OpenAPI::toJsonValue(m_config_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_free_instance_availability_isSet) {
        obj.insert(QString("freeInstanceAvailability"), ::OpenAPI::toJsonValue(m_free_instance_availability));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_leader_options.size() > 0) {
        obj.insert(QString("leaderOptions"), ::OpenAPI::toJsonValue(m_leader_options));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_optional_replicas.size() > 0) {
        obj.insert(QString("optionalReplicas"), ::OpenAPI::toJsonValue(m_optional_replicas));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_replicas.size() > 0) {
        obj.insert(QString("replicas"), ::OpenAPI::toJsonValue(m_replicas));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_limit_per_processing_unit_isSet) {
        obj.insert(QString("storageLimitPerProcessingUnit"), ::OpenAPI::toJsonValue(m_storage_limit_per_processing_unit));
    }
    return obj;
}

QString OAIInstanceConfig::getBaseConfig() const {
    return m_base_config;
}
void OAIInstanceConfig::setBaseConfig(const QString &base_config) {
    m_base_config = base_config;
    m_base_config_isSet = true;
}

bool OAIInstanceConfig::is_base_config_Set() const{
    return m_base_config_isSet;
}

bool OAIInstanceConfig::is_base_config_Valid() const{
    return m_base_config_isValid;
}

QString OAIInstanceConfig::getConfigType() const {
    return m_config_type;
}
void OAIInstanceConfig::setConfigType(const QString &config_type) {
    m_config_type = config_type;
    m_config_type_isSet = true;
}

bool OAIInstanceConfig::is_config_type_Set() const{
    return m_config_type_isSet;
}

bool OAIInstanceConfig::is_config_type_Valid() const{
    return m_config_type_isValid;
}

QString OAIInstanceConfig::getDisplayName() const {
    return m_display_name;
}
void OAIInstanceConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIInstanceConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIInstanceConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIInstanceConfig::getEtag() const {
    return m_etag;
}
void OAIInstanceConfig::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIInstanceConfig::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIInstanceConfig::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIInstanceConfig::getFreeInstanceAvailability() const {
    return m_free_instance_availability;
}
void OAIInstanceConfig::setFreeInstanceAvailability(const QString &free_instance_availability) {
    m_free_instance_availability = free_instance_availability;
    m_free_instance_availability_isSet = true;
}

bool OAIInstanceConfig::is_free_instance_availability_Set() const{
    return m_free_instance_availability_isSet;
}

bool OAIInstanceConfig::is_free_instance_availability_Valid() const{
    return m_free_instance_availability_isValid;
}

QMap<QString, QString> OAIInstanceConfig::getLabels() const {
    return m_labels;
}
void OAIInstanceConfig::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInstanceConfig::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInstanceConfig::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAIInstanceConfig::getLeaderOptions() const {
    return m_leader_options;
}
void OAIInstanceConfig::setLeaderOptions(const QList<QString> &leader_options) {
    m_leader_options = leader_options;
    m_leader_options_isSet = true;
}

bool OAIInstanceConfig::is_leader_options_Set() const{
    return m_leader_options_isSet;
}

bool OAIInstanceConfig::is_leader_options_Valid() const{
    return m_leader_options_isValid;
}

QString OAIInstanceConfig::getName() const {
    return m_name;
}
void OAIInstanceConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstanceConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstanceConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIReplicaInfo> OAIInstanceConfig::getOptionalReplicas() const {
    return m_optional_replicas;
}
void OAIInstanceConfig::setOptionalReplicas(const QList<OAIReplicaInfo> &optional_replicas) {
    m_optional_replicas = optional_replicas;
    m_optional_replicas_isSet = true;
}

bool OAIInstanceConfig::is_optional_replicas_Set() const{
    return m_optional_replicas_isSet;
}

bool OAIInstanceConfig::is_optional_replicas_Valid() const{
    return m_optional_replicas_isValid;
}

bool OAIInstanceConfig::isReconciling() const {
    return m_reconciling;
}
void OAIInstanceConfig::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAIInstanceConfig::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAIInstanceConfig::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QList<OAIReplicaInfo> OAIInstanceConfig::getReplicas() const {
    return m_replicas;
}
void OAIInstanceConfig::setReplicas(const QList<OAIReplicaInfo> &replicas) {
    m_replicas = replicas;
    m_replicas_isSet = true;
}

bool OAIInstanceConfig::is_replicas_Set() const{
    return m_replicas_isSet;
}

bool OAIInstanceConfig::is_replicas_Valid() const{
    return m_replicas_isValid;
}

QString OAIInstanceConfig::getState() const {
    return m_state;
}
void OAIInstanceConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIInstanceConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIInstanceConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIInstanceConfig::getStorageLimitPerProcessingUnit() const {
    return m_storage_limit_per_processing_unit;
}
void OAIInstanceConfig::setStorageLimitPerProcessingUnit(const QString &storage_limit_per_processing_unit) {
    m_storage_limit_per_processing_unit = storage_limit_per_processing_unit;
    m_storage_limit_per_processing_unit_isSet = true;
}

bool OAIInstanceConfig::is_storage_limit_per_processing_unit_Set() const{
    return m_storage_limit_per_processing_unit_isSet;
}

bool OAIInstanceConfig::is_storage_limit_per_processing_unit_Valid() const{
    return m_storage_limit_per_processing_unit_isValid;
}

bool OAIInstanceConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_instance_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_leader_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_replicas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_limit_per_processing_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
