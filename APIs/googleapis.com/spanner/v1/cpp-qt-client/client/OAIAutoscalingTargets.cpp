/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoscalingTargets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoscalingTargets::OAIAutoscalingTargets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoscalingTargets::OAIAutoscalingTargets() {
    this->initializeModel();
}

OAIAutoscalingTargets::~OAIAutoscalingTargets() {}

void OAIAutoscalingTargets::initializeModel() {

    m_high_priority_cpu_utilization_percent_isSet = false;
    m_high_priority_cpu_utilization_percent_isValid = false;

    m_storage_utilization_percent_isSet = false;
    m_storage_utilization_percent_isValid = false;
}

void OAIAutoscalingTargets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoscalingTargets::fromJsonObject(QJsonObject json) {

    m_high_priority_cpu_utilization_percent_isValid = ::OpenAPI::fromJsonValue(m_high_priority_cpu_utilization_percent, json[QString("highPriorityCpuUtilizationPercent")]);
    m_high_priority_cpu_utilization_percent_isSet = !json[QString("highPriorityCpuUtilizationPercent")].isNull() && m_high_priority_cpu_utilization_percent_isValid;

    m_storage_utilization_percent_isValid = ::OpenAPI::fromJsonValue(m_storage_utilization_percent, json[QString("storageUtilizationPercent")]);
    m_storage_utilization_percent_isSet = !json[QString("storageUtilizationPercent")].isNull() && m_storage_utilization_percent_isValid;
}

QString OAIAutoscalingTargets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoscalingTargets::asJsonObject() const {
    QJsonObject obj;
    if (m_high_priority_cpu_utilization_percent_isSet) {
        obj.insert(QString("highPriorityCpuUtilizationPercent"), ::OpenAPI::toJsonValue(m_high_priority_cpu_utilization_percent));
    }
    if (m_storage_utilization_percent_isSet) {
        obj.insert(QString("storageUtilizationPercent"), ::OpenAPI::toJsonValue(m_storage_utilization_percent));
    }
    return obj;
}

qint32 OAIAutoscalingTargets::getHighPriorityCpuUtilizationPercent() const {
    return m_high_priority_cpu_utilization_percent;
}
void OAIAutoscalingTargets::setHighPriorityCpuUtilizationPercent(const qint32 &high_priority_cpu_utilization_percent) {
    m_high_priority_cpu_utilization_percent = high_priority_cpu_utilization_percent;
    m_high_priority_cpu_utilization_percent_isSet = true;
}

bool OAIAutoscalingTargets::is_high_priority_cpu_utilization_percent_Set() const{
    return m_high_priority_cpu_utilization_percent_isSet;
}

bool OAIAutoscalingTargets::is_high_priority_cpu_utilization_percent_Valid() const{
    return m_high_priority_cpu_utilization_percent_isValid;
}

qint32 OAIAutoscalingTargets::getStorageUtilizationPercent() const {
    return m_storage_utilization_percent;
}
void OAIAutoscalingTargets::setStorageUtilizationPercent(const qint32 &storage_utilization_percent) {
    m_storage_utilization_percent = storage_utilization_percent;
    m_storage_utilization_percent_isSet = true;
}

bool OAIAutoscalingTargets::is_storage_utilization_percent_Set() const{
    return m_storage_utilization_percent_isSet;
}

bool OAIAutoscalingTargets::is_storage_utilization_percent_Valid() const{
    return m_storage_utilization_percent_isValid;
}

bool OAIAutoscalingTargets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_high_priority_cpu_utilization_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_utilization_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoscalingTargets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
