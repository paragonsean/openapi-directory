/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_approximate_last_use_time_isSet = false;
    m_approximate_last_use_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_role_isSet = false;
    m_creator_role_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_approximate_last_use_time_isValid = ::OpenAPI::fromJsonValue(m_approximate_last_use_time, json[QString("approximateLastUseTime")]);
    m_approximate_last_use_time_isSet = !json[QString("approximateLastUseTime")].isNull() && m_approximate_last_use_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_role_isValid = ::OpenAPI::fromJsonValue(m_creator_role, json[QString("creatorRole")]);
    m_creator_role_isSet = !json[QString("creatorRole")].isNull() && m_creator_role_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_last_use_time_isSet) {
        obj.insert(QString("approximateLastUseTime"), ::OpenAPI::toJsonValue(m_approximate_last_use_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator_role_isSet) {
        obj.insert(QString("creatorRole"), ::OpenAPI::toJsonValue(m_creator_role));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAISession::getApproximateLastUseTime() const {
    return m_approximate_last_use_time;
}
void OAISession::setApproximateLastUseTime(const QString &approximate_last_use_time) {
    m_approximate_last_use_time = approximate_last_use_time;
    m_approximate_last_use_time_isSet = true;
}

bool OAISession::is_approximate_last_use_time_Set() const{
    return m_approximate_last_use_time_isSet;
}

bool OAISession::is_approximate_last_use_time_Valid() const{
    return m_approximate_last_use_time_isValid;
}

QString OAISession::getCreateTime() const {
    return m_create_time;
}
void OAISession::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISession::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISession::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISession::getCreatorRole() const {
    return m_creator_role;
}
void OAISession::setCreatorRole(const QString &creator_role) {
    m_creator_role = creator_role;
    m_creator_role_isSet = true;
}

bool OAISession::is_creator_role_Set() const{
    return m_creator_role_isSet;
}

bool OAISession::is_creator_role_Valid() const{
    return m_creator_role_isValid;
}

QMap<QString, QString> OAISession::getLabels() const {
    return m_labels;
}
void OAISession::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISession::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISession::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISession::getName() const {
    return m_name;
}
void OAISession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISession::is_name_Set() const{
    return m_name_isSet;
}

bool OAISession::is_name_Valid() const{
    return m_name_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_last_use_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
