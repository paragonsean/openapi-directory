/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionSelector::OAITransactionSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionSelector::OAITransactionSelector() {
    this->initializeModel();
}

OAITransactionSelector::~OAITransactionSelector() {}

void OAITransactionSelector::initializeModel() {

    m_begin_isSet = false;
    m_begin_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_single_use_isSet = false;
    m_single_use_isValid = false;
}

void OAITransactionSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionSelector::fromJsonObject(QJsonObject json) {

    m_begin_isValid = ::OpenAPI::fromJsonValue(m_begin, json[QString("begin")]);
    m_begin_isSet = !json[QString("begin")].isNull() && m_begin_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_single_use_isValid = ::OpenAPI::fromJsonValue(m_single_use, json[QString("singleUse")]);
    m_single_use_isSet = !json[QString("singleUse")].isNull() && m_single_use_isValid;
}

QString OAITransactionSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_begin.isSet()) {
        obj.insert(QString("begin"), ::OpenAPI::toJsonValue(m_begin));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_single_use.isSet()) {
        obj.insert(QString("singleUse"), ::OpenAPI::toJsonValue(m_single_use));
    }
    return obj;
}

OAITransactionOptions OAITransactionSelector::getBegin() const {
    return m_begin;
}
void OAITransactionSelector::setBegin(const OAITransactionOptions &begin) {
    m_begin = begin;
    m_begin_isSet = true;
}

bool OAITransactionSelector::is_begin_Set() const{
    return m_begin_isSet;
}

bool OAITransactionSelector::is_begin_Valid() const{
    return m_begin_isValid;
}

QByteArray OAITransactionSelector::getId() const {
    return m_id;
}
void OAITransactionSelector::setId(const QByteArray &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransactionSelector::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransactionSelector::is_id_Valid() const{
    return m_id_isValid;
}

OAITransactionOptions OAITransactionSelector::getSingleUse() const {
    return m_single_use;
}
void OAITransactionSelector::setSingleUse(const OAITransactionOptions &single_use) {
    m_single_use = single_use;
    m_single_use_isSet = true;
}

bool OAITransactionSelector::is_single_use_Set() const{
    return m_single_use_isSet;
}

bool OAITransactionSelector::is_single_use_Valid() const{
    return m_single_use_isValid;
}

bool OAITransactionSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_begin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_use.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
