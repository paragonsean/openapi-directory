/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyRangeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyRangeInfo::OAIKeyRangeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyRangeInfo::OAIKeyRangeInfo() {
    this->initializeModel();
}

OAIKeyRangeInfo::~OAIKeyRangeInfo() {}

void OAIKeyRangeInfo::initializeModel() {

    m_context_values_isSet = false;
    m_context_values_isValid = false;

    m_end_key_index_isSet = false;
    m_end_key_index_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_keys_count_isSet = false;
    m_keys_count_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_start_key_index_isSet = false;
    m_start_key_index_isValid = false;

    m_time_offset_isSet = false;
    m_time_offset_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIKeyRangeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyRangeInfo::fromJsonObject(QJsonObject json) {

    m_context_values_isValid = ::OpenAPI::fromJsonValue(m_context_values, json[QString("contextValues")]);
    m_context_values_isSet = !json[QString("contextValues")].isNull() && m_context_values_isValid;

    m_end_key_index_isValid = ::OpenAPI::fromJsonValue(m_end_key_index, json[QString("endKeyIndex")]);
    m_end_key_index_isSet = !json[QString("endKeyIndex")].isNull() && m_end_key_index_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_keys_count_isValid = ::OpenAPI::fromJsonValue(m_keys_count, json[QString("keysCount")]);
    m_keys_count_isSet = !json[QString("keysCount")].isNull() && m_keys_count_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_start_key_index_isValid = ::OpenAPI::fromJsonValue(m_start_key_index, json[QString("startKeyIndex")]);
    m_start_key_index_isSet = !json[QString("startKeyIndex")].isNull() && m_start_key_index_isValid;

    m_time_offset_isValid = ::OpenAPI::fromJsonValue(m_time_offset, json[QString("timeOffset")]);
    m_time_offset_isSet = !json[QString("timeOffset")].isNull() && m_time_offset_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIKeyRangeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyRangeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_context_values.size() > 0) {
        obj.insert(QString("contextValues"), ::OpenAPI::toJsonValue(m_context_values));
    }
    if (m_end_key_index_isSet) {
        obj.insert(QString("endKeyIndex"), ::OpenAPI::toJsonValue(m_end_key_index));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_keys_count_isSet) {
        obj.insert(QString("keysCount"), ::OpenAPI::toJsonValue(m_keys_count));
    }
    if (m_metric.isSet()) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_start_key_index_isSet) {
        obj.insert(QString("startKeyIndex"), ::OpenAPI::toJsonValue(m_start_key_index));
    }
    if (m_time_offset_isSet) {
        obj.insert(QString("timeOffset"), ::OpenAPI::toJsonValue(m_time_offset));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<OAIContextValue> OAIKeyRangeInfo::getContextValues() const {
    return m_context_values;
}
void OAIKeyRangeInfo::setContextValues(const QList<OAIContextValue> &context_values) {
    m_context_values = context_values;
    m_context_values_isSet = true;
}

bool OAIKeyRangeInfo::is_context_values_Set() const{
    return m_context_values_isSet;
}

bool OAIKeyRangeInfo::is_context_values_Valid() const{
    return m_context_values_isValid;
}

qint32 OAIKeyRangeInfo::getEndKeyIndex() const {
    return m_end_key_index;
}
void OAIKeyRangeInfo::setEndKeyIndex(const qint32 &end_key_index) {
    m_end_key_index = end_key_index;
    m_end_key_index_isSet = true;
}

bool OAIKeyRangeInfo::is_end_key_index_Set() const{
    return m_end_key_index_isSet;
}

bool OAIKeyRangeInfo::is_end_key_index_Valid() const{
    return m_end_key_index_isValid;
}

OAILocalizedString OAIKeyRangeInfo::getInfo() const {
    return m_info;
}
void OAIKeyRangeInfo::setInfo(const OAILocalizedString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIKeyRangeInfo::is_info_Set() const{
    return m_info_isSet;
}

bool OAIKeyRangeInfo::is_info_Valid() const{
    return m_info_isValid;
}

QString OAIKeyRangeInfo::getKeysCount() const {
    return m_keys_count;
}
void OAIKeyRangeInfo::setKeysCount(const QString &keys_count) {
    m_keys_count = keys_count;
    m_keys_count_isSet = true;
}

bool OAIKeyRangeInfo::is_keys_count_Set() const{
    return m_keys_count_isSet;
}

bool OAIKeyRangeInfo::is_keys_count_Valid() const{
    return m_keys_count_isValid;
}

OAILocalizedString OAIKeyRangeInfo::getMetric() const {
    return m_metric;
}
void OAIKeyRangeInfo::setMetric(const OAILocalizedString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIKeyRangeInfo::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIKeyRangeInfo::is_metric_Valid() const{
    return m_metric_isValid;
}

qint32 OAIKeyRangeInfo::getStartKeyIndex() const {
    return m_start_key_index;
}
void OAIKeyRangeInfo::setStartKeyIndex(const qint32 &start_key_index) {
    m_start_key_index = start_key_index;
    m_start_key_index_isSet = true;
}

bool OAIKeyRangeInfo::is_start_key_index_Set() const{
    return m_start_key_index_isSet;
}

bool OAIKeyRangeInfo::is_start_key_index_Valid() const{
    return m_start_key_index_isValid;
}

QString OAIKeyRangeInfo::getTimeOffset() const {
    return m_time_offset;
}
void OAIKeyRangeInfo::setTimeOffset(const QString &time_offset) {
    m_time_offset = time_offset;
    m_time_offset_isSet = true;
}

bool OAIKeyRangeInfo::is_time_offset_Set() const{
    return m_time_offset_isSet;
}

bool OAIKeyRangeInfo::is_time_offset_Valid() const{
    return m_time_offset_isValid;
}

OAILocalizedString OAIKeyRangeInfo::getUnit() const {
    return m_unit;
}
void OAIKeyRangeInfo::setUnit(const OAILocalizedString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIKeyRangeInfo::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIKeyRangeInfo::is_unit_Valid() const{
    return m_unit_isValid;
}

float OAIKeyRangeInfo::getValue() const {
    return m_value;
}
void OAIKeyRangeInfo::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIKeyRangeInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIKeyRangeInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIKeyRangeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_key_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_key_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyRangeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
