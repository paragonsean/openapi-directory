/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyRange::OAIKeyRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyRange::OAIKeyRange() {
    this->initializeModel();
}

OAIKeyRange::~OAIKeyRange() {}

void OAIKeyRange::initializeModel() {

    m_end_closed_isSet = false;
    m_end_closed_isValid = false;

    m_end_open_isSet = false;
    m_end_open_isValid = false;

    m_start_closed_isSet = false;
    m_start_closed_isValid = false;

    m_start_open_isSet = false;
    m_start_open_isValid = false;
}

void OAIKeyRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyRange::fromJsonObject(QJsonObject json) {

    m_end_closed_isValid = ::OpenAPI::fromJsonValue(m_end_closed, json[QString("endClosed")]);
    m_end_closed_isSet = !json[QString("endClosed")].isNull() && m_end_closed_isValid;

    m_end_open_isValid = ::OpenAPI::fromJsonValue(m_end_open, json[QString("endOpen")]);
    m_end_open_isSet = !json[QString("endOpen")].isNull() && m_end_open_isValid;

    m_start_closed_isValid = ::OpenAPI::fromJsonValue(m_start_closed, json[QString("startClosed")]);
    m_start_closed_isSet = !json[QString("startClosed")].isNull() && m_start_closed_isValid;

    m_start_open_isValid = ::OpenAPI::fromJsonValue(m_start_open, json[QString("startOpen")]);
    m_start_open_isSet = !json[QString("startOpen")].isNull() && m_start_open_isValid;
}

QString OAIKeyRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_closed.size() > 0) {
        obj.insert(QString("endClosed"), ::OpenAPI::toJsonValue(m_end_closed));
    }
    if (m_end_open.size() > 0) {
        obj.insert(QString("endOpen"), ::OpenAPI::toJsonValue(m_end_open));
    }
    if (m_start_closed.size() > 0) {
        obj.insert(QString("startClosed"), ::OpenAPI::toJsonValue(m_start_closed));
    }
    if (m_start_open.size() > 0) {
        obj.insert(QString("startOpen"), ::OpenAPI::toJsonValue(m_start_open));
    }
    return obj;
}

QList<QJsonValue> OAIKeyRange::getEndClosed() const {
    return m_end_closed;
}
void OAIKeyRange::setEndClosed(const QList<QJsonValue> &end_closed) {
    m_end_closed = end_closed;
    m_end_closed_isSet = true;
}

bool OAIKeyRange::is_end_closed_Set() const{
    return m_end_closed_isSet;
}

bool OAIKeyRange::is_end_closed_Valid() const{
    return m_end_closed_isValid;
}

QList<QJsonValue> OAIKeyRange::getEndOpen() const {
    return m_end_open;
}
void OAIKeyRange::setEndOpen(const QList<QJsonValue> &end_open) {
    m_end_open = end_open;
    m_end_open_isSet = true;
}

bool OAIKeyRange::is_end_open_Set() const{
    return m_end_open_isSet;
}

bool OAIKeyRange::is_end_open_Valid() const{
    return m_end_open_isValid;
}

QList<QJsonValue> OAIKeyRange::getStartClosed() const {
    return m_start_closed;
}
void OAIKeyRange::setStartClosed(const QList<QJsonValue> &start_closed) {
    m_start_closed = start_closed;
    m_start_closed_isSet = true;
}

bool OAIKeyRange::is_start_closed_Set() const{
    return m_start_closed_isSet;
}

bool OAIKeyRange::is_start_closed_Valid() const{
    return m_start_closed_isValid;
}

QList<QJsonValue> OAIKeyRange::getStartOpen() const {
    return m_start_open;
}
void OAIKeyRange::setStartOpen(const QList<QJsonValue> &start_open) {
    m_start_open = start_open;
    m_start_open_isSet = true;
}

bool OAIKeyRange::is_start_open_Set() const{
    return m_start_open_isSet;
}

bool OAIKeyRange::is_start_open_Valid() const{
    return m_start_open_isValid;
}

bool OAIKeyRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_closed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_open.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_closed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_open.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
