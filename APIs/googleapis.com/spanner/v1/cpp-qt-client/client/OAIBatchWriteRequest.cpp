/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchWriteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchWriteRequest::OAIBatchWriteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchWriteRequest::OAIBatchWriteRequest() {
    this->initializeModel();
}

OAIBatchWriteRequest::~OAIBatchWriteRequest() {}

void OAIBatchWriteRequest::initializeModel() {

    m_mutation_groups_isSet = false;
    m_mutation_groups_isValid = false;

    m_request_options_isSet = false;
    m_request_options_isValid = false;
}

void OAIBatchWriteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchWriteRequest::fromJsonObject(QJsonObject json) {

    m_mutation_groups_isValid = ::OpenAPI::fromJsonValue(m_mutation_groups, json[QString("mutationGroups")]);
    m_mutation_groups_isSet = !json[QString("mutationGroups")].isNull() && m_mutation_groups_isValid;

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;
}

QString OAIBatchWriteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchWriteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_mutation_groups.size() > 0) {
        obj.insert(QString("mutationGroups"), ::OpenAPI::toJsonValue(m_mutation_groups));
    }
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    return obj;
}

QList<OAIMutationGroup> OAIBatchWriteRequest::getMutationGroups() const {
    return m_mutation_groups;
}
void OAIBatchWriteRequest::setMutationGroups(const QList<OAIMutationGroup> &mutation_groups) {
    m_mutation_groups = mutation_groups;
    m_mutation_groups_isSet = true;
}

bool OAIBatchWriteRequest::is_mutation_groups_Set() const{
    return m_mutation_groups_isSet;
}

bool OAIBatchWriteRequest::is_mutation_groups_Valid() const{
    return m_mutation_groups_isValid;
}

OAIRequestOptions OAIBatchWriteRequest::getRequestOptions() const {
    return m_request_options;
}
void OAIBatchWriteRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAIBatchWriteRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAIBatchWriteRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

bool OAIBatchWriteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mutation_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchWriteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
