/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAutoscalingLimits.h
 *
 * The autoscaling limits for the instance. Users can define the minimum and maximum compute capacity allocated to the instance, and the autoscaler will only scale within that range. Users can either use nodes or processing units to specify the limits, but should use the same unit to set both the min_limit and max_limit.
 */

#ifndef OAIAutoscalingLimits_H
#define OAIAutoscalingLimits_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAutoscalingLimits : public OAIObject {
public:
    OAIAutoscalingLimits();
    OAIAutoscalingLimits(QString json);
    ~OAIAutoscalingLimits() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxNodes() const;
    void setMaxNodes(const qint32 &max_nodes);
    bool is_max_nodes_Set() const;
    bool is_max_nodes_Valid() const;

    qint32 getMaxProcessingUnits() const;
    void setMaxProcessingUnits(const qint32 &max_processing_units);
    bool is_max_processing_units_Set() const;
    bool is_max_processing_units_Valid() const;

    qint32 getMinNodes() const;
    void setMinNodes(const qint32 &min_nodes);
    bool is_min_nodes_Set() const;
    bool is_min_nodes_Valid() const;

    qint32 getMinProcessingUnits() const;
    void setMinProcessingUnits(const qint32 &min_processing_units);
    bool is_min_processing_units_Set() const;
    bool is_min_processing_units_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_nodes;
    bool m_max_nodes_isSet;
    bool m_max_nodes_isValid;

    qint32 m_max_processing_units;
    bool m_max_processing_units_isSet;
    bool m_max_processing_units_isValid;

    qint32 m_min_nodes;
    bool m_min_nodes_isSet;
    bool m_min_nodes_isValid;

    qint32 m_min_processing_units;
    bool m_min_processing_units_isSet;
    bool m_min_processing_units_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAutoscalingLimits)

#endif // OAIAutoscalingLimits_H
