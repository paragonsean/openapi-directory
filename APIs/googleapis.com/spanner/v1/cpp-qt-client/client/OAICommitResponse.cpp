/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommitResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommitResponse::OAICommitResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommitResponse::OAICommitResponse() {
    this->initializeModel();
}

OAICommitResponse::~OAICommitResponse() {}

void OAICommitResponse::initializeModel() {

    m_commit_stats_isSet = false;
    m_commit_stats_isValid = false;

    m_commit_timestamp_isSet = false;
    m_commit_timestamp_isValid = false;
}

void OAICommitResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommitResponse::fromJsonObject(QJsonObject json) {

    m_commit_stats_isValid = ::OpenAPI::fromJsonValue(m_commit_stats, json[QString("commitStats")]);
    m_commit_stats_isSet = !json[QString("commitStats")].isNull() && m_commit_stats_isValid;

    m_commit_timestamp_isValid = ::OpenAPI::fromJsonValue(m_commit_timestamp, json[QString("commitTimestamp")]);
    m_commit_timestamp_isSet = !json[QString("commitTimestamp")].isNull() && m_commit_timestamp_isValid;
}

QString OAICommitResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommitResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_commit_stats.isSet()) {
        obj.insert(QString("commitStats"), ::OpenAPI::toJsonValue(m_commit_stats));
    }
    if (m_commit_timestamp_isSet) {
        obj.insert(QString("commitTimestamp"), ::OpenAPI::toJsonValue(m_commit_timestamp));
    }
    return obj;
}

OAICommitStats OAICommitResponse::getCommitStats() const {
    return m_commit_stats;
}
void OAICommitResponse::setCommitStats(const OAICommitStats &commit_stats) {
    m_commit_stats = commit_stats;
    m_commit_stats_isSet = true;
}

bool OAICommitResponse::is_commit_stats_Set() const{
    return m_commit_stats_isSet;
}

bool OAICommitResponse::is_commit_stats_Valid() const{
    return m_commit_stats_isValid;
}

QString OAICommitResponse::getCommitTimestamp() const {
    return m_commit_timestamp;
}
void OAICommitResponse::setCommitTimestamp(const QString &commit_timestamp) {
    m_commit_timestamp = commit_timestamp;
    m_commit_timestamp_isSet = true;
}

bool OAICommitResponse::is_commit_timestamp_Set() const{
    return m_commit_timestamp_isSet;
}

bool OAICommitResponse::is_commit_timestamp_Valid() const{
    return m_commit_timestamp_isValid;
}

bool OAICommitResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commit_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommitResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
