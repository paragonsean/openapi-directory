/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicaSelection.h
 *
 * The directed read replica selector. Callers must provide one or more of the following fields for replica selection: * &#x60;location&#x60; - The location must be one of the regions within the multi-region configuration of your database. * &#x60;type&#x60; - The type of the replica. Some examples of using replica_selectors are: * &#x60;location:us-east1&#x60; --&gt; The \&quot;us-east1\&quot; replica(s) of any available type will be used to process the request. * &#x60;type:READ_ONLY&#x60; --&gt; The \&quot;READ_ONLY\&quot; type replica(s) in nearest available location will be used to process the request. * &#x60;location:us-east1 type:READ_ONLY&#x60; --&gt; The \&quot;READ_ONLY\&quot; type replica(s) in location \&quot;us-east1\&quot; will be used to process the request.
 */

#ifndef OAIReplicaSelection_H
#define OAIReplicaSelection_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReplicaSelection : public OAIObject {
public:
    OAIReplicaSelection();
    OAIReplicaSelection(QString json);
    ~OAIReplicaSelection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicaSelection)

#endif // OAIReplicaSelection_H
