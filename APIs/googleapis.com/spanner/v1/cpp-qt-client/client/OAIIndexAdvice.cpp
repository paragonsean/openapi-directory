/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexAdvice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexAdvice::OAIIndexAdvice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexAdvice::OAIIndexAdvice() {
    this->initializeModel();
}

OAIIndexAdvice::~OAIIndexAdvice() {}

void OAIIndexAdvice::initializeModel() {

    m_ddl_isSet = false;
    m_ddl_isValid = false;

    m_improvement_factor_isSet = false;
    m_improvement_factor_isValid = false;
}

void OAIIndexAdvice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexAdvice::fromJsonObject(QJsonObject json) {

    m_ddl_isValid = ::OpenAPI::fromJsonValue(m_ddl, json[QString("ddl")]);
    m_ddl_isSet = !json[QString("ddl")].isNull() && m_ddl_isValid;

    m_improvement_factor_isValid = ::OpenAPI::fromJsonValue(m_improvement_factor, json[QString("improvementFactor")]);
    m_improvement_factor_isSet = !json[QString("improvementFactor")].isNull() && m_improvement_factor_isValid;
}

QString OAIIndexAdvice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexAdvice::asJsonObject() const {
    QJsonObject obj;
    if (m_ddl.size() > 0) {
        obj.insert(QString("ddl"), ::OpenAPI::toJsonValue(m_ddl));
    }
    if (m_improvement_factor_isSet) {
        obj.insert(QString("improvementFactor"), ::OpenAPI::toJsonValue(m_improvement_factor));
    }
    return obj;
}

QList<QString> OAIIndexAdvice::getDdl() const {
    return m_ddl;
}
void OAIIndexAdvice::setDdl(const QList<QString> &ddl) {
    m_ddl = ddl;
    m_ddl_isSet = true;
}

bool OAIIndexAdvice::is_ddl_Set() const{
    return m_ddl_isSet;
}

bool OAIIndexAdvice::is_ddl_Valid() const{
    return m_ddl_isValid;
}

double OAIIndexAdvice::getImprovementFactor() const {
    return m_improvement_factor;
}
void OAIIndexAdvice::setImprovementFactor(const double &improvement_factor) {
    m_improvement_factor = improvement_factor;
    m_improvement_factor_isSet = true;
}

bool OAIIndexAdvice::is_improvement_factor_Set() const{
    return m_improvement_factor_isSet;
}

bool OAIIndexAdvice::is_improvement_factor_Valid() const{
    return m_improvement_factor_isValid;
}

bool OAIIndexAdvice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ddl.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_improvement_factor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexAdvice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
