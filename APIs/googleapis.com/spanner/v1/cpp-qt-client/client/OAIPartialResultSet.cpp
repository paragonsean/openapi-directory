/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartialResultSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartialResultSet::OAIPartialResultSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartialResultSet::OAIPartialResultSet() {
    this->initializeModel();
}

OAIPartialResultSet::~OAIPartialResultSet() {}

void OAIPartialResultSet::initializeModel() {

    m_chunked_value_isSet = false;
    m_chunked_value_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_resume_token_isSet = false;
    m_resume_token_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIPartialResultSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartialResultSet::fromJsonObject(QJsonObject json) {

    m_chunked_value_isValid = ::OpenAPI::fromJsonValue(m_chunked_value, json[QString("chunkedValue")]);
    m_chunked_value_isSet = !json[QString("chunkedValue")].isNull() && m_chunked_value_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_resume_token_isValid = ::OpenAPI::fromJsonValue(m_resume_token, json[QString("resumeToken")]);
    m_resume_token_isSet = !json[QString("resumeToken")].isNull() && m_resume_token_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIPartialResultSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartialResultSet::asJsonObject() const {
    QJsonObject obj;
    if (m_chunked_value_isSet) {
        obj.insert(QString("chunkedValue"), ::OpenAPI::toJsonValue(m_chunked_value));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_resume_token_isSet) {
        obj.insert(QString("resumeToken"), ::OpenAPI::toJsonValue(m_resume_token));
    }
    if (m_stats.isSet()) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

bool OAIPartialResultSet::isChunkedValue() const {
    return m_chunked_value;
}
void OAIPartialResultSet::setChunkedValue(const bool &chunked_value) {
    m_chunked_value = chunked_value;
    m_chunked_value_isSet = true;
}

bool OAIPartialResultSet::is_chunked_value_Set() const{
    return m_chunked_value_isSet;
}

bool OAIPartialResultSet::is_chunked_value_Valid() const{
    return m_chunked_value_isValid;
}

OAIResultSetMetadata OAIPartialResultSet::getMetadata() const {
    return m_metadata;
}
void OAIPartialResultSet::setMetadata(const OAIResultSetMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPartialResultSet::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPartialResultSet::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QByteArray OAIPartialResultSet::getResumeToken() const {
    return m_resume_token;
}
void OAIPartialResultSet::setResumeToken(const QByteArray &resume_token) {
    m_resume_token = resume_token;
    m_resume_token_isSet = true;
}

bool OAIPartialResultSet::is_resume_token_Set() const{
    return m_resume_token_isSet;
}

bool OAIPartialResultSet::is_resume_token_Valid() const{
    return m_resume_token_isValid;
}

OAIResultSetStats OAIPartialResultSet::getStats() const {
    return m_stats;
}
void OAIPartialResultSet::setStats(const OAIResultSetStats &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAIPartialResultSet::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAIPartialResultSet::is_stats_Valid() const{
    return m_stats_isValid;
}

QList<QJsonValue> OAIPartialResultSet::getValues() const {
    return m_values;
}
void OAIPartialResultSet::setValues(const QList<QJsonValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIPartialResultSet::is_values_Set() const{
    return m_values_isSet;
}

bool OAIPartialResultSet::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIPartialResultSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chunked_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartialResultSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
