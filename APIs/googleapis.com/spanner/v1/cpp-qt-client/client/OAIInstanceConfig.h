/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceConfig.h
 *
 * A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.
 */

#ifndef OAIInstanceConfig_H
#define OAIInstanceConfig_H

#include <QJsonObject>

#include "OAIReplicaInfo.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReplicaInfo;

class OAIInstanceConfig : public OAIObject {
public:
    OAIInstanceConfig();
    OAIInstanceConfig(QString json);
    ~OAIInstanceConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaseConfig() const;
    void setBaseConfig(const QString &base_config);
    bool is_base_config_Set() const;
    bool is_base_config_Valid() const;

    QString getConfigType() const;
    void setConfigType(const QString &config_type);
    bool is_config_type_Set() const;
    bool is_config_type_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getFreeInstanceAvailability() const;
    void setFreeInstanceAvailability(const QString &free_instance_availability);
    bool is_free_instance_availability_Set() const;
    bool is_free_instance_availability_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QString> getLeaderOptions() const;
    void setLeaderOptions(const QList<QString> &leader_options);
    bool is_leader_options_Set() const;
    bool is_leader_options_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIReplicaInfo> getOptionalReplicas() const;
    void setOptionalReplicas(const QList<OAIReplicaInfo> &optional_replicas);
    bool is_optional_replicas_Set() const;
    bool is_optional_replicas_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    QList<OAIReplicaInfo> getReplicas() const;
    void setReplicas(const QList<OAIReplicaInfo> &replicas);
    bool is_replicas_Set() const;
    bool is_replicas_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStorageLimitPerProcessingUnit() const;
    void setStorageLimitPerProcessingUnit(const QString &storage_limit_per_processing_unit);
    bool is_storage_limit_per_processing_unit_Set() const;
    bool is_storage_limit_per_processing_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_config;
    bool m_base_config_isSet;
    bool m_base_config_isValid;

    QString m_config_type;
    bool m_config_type_isSet;
    bool m_config_type_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_free_instance_availability;
    bool m_free_instance_availability_isSet;
    bool m_free_instance_availability_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QString> m_leader_options;
    bool m_leader_options_isSet;
    bool m_leader_options_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIReplicaInfo> m_optional_replicas;
    bool m_optional_replicas_isSet;
    bool m_optional_replicas_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    QList<OAIReplicaInfo> m_replicas;
    bool m_replicas_isSet;
    bool m_replicas_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_storage_limit_per_processing_unit;
    bool m_storage_limit_per_processing_unit_isSet;
    bool m_storage_limit_per_processing_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceConfig)

#endif // OAIInstanceConfig_H
