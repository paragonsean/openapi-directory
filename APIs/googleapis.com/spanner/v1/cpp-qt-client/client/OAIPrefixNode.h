/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPrefixNode.h
 *
 * A message representing a key prefix node in the key prefix hierarchy. for eg. Bigtable keyspaces are lexicographically ordered mappings of keys to values. Keys often have a shared prefix structure where users use the keys to organize data. Eg ///employee In this case Keysight will possibly use one node for a company and reuse it for all employees that fall under the company. Doing so improves legibility in the UI.
 */

#ifndef OAIPrefixNode_H
#define OAIPrefixNode_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPrefixNode : public OAIObject {
public:
    OAIPrefixNode();
    OAIPrefixNode(QString json);
    ~OAIPrefixNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDataSourceNode() const;
    void setDataSourceNode(const bool &data_source_node);
    bool is_data_source_node_Set() const;
    bool is_data_source_node_Valid() const;

    qint32 getDepth() const;
    void setDepth(const qint32 &depth);
    bool is_depth_Set() const;
    bool is_depth_Valid() const;

    qint32 getEndIndex() const;
    void setEndIndex(const qint32 &end_index);
    bool is_end_index_Set() const;
    bool is_end_index_Valid() const;

    qint32 getStartIndex() const;
    void setStartIndex(const qint32 &start_index);
    bool is_start_index_Set() const;
    bool is_start_index_Valid() const;

    QString getWord() const;
    void setWord(const QString &word);
    bool is_word_Set() const;
    bool is_word_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_data_source_node;
    bool m_data_source_node_isSet;
    bool m_data_source_node_isValid;

    qint32 m_depth;
    bool m_depth_isSet;
    bool m_depth_isValid;

    qint32 m_end_index;
    bool m_end_index_isSet;
    bool m_end_index_isValid;

    qint32 m_start_index;
    bool m_start_index_isSet;
    bool m_start_index_isValid;

    QString m_word;
    bool m_word_isSet;
    bool m_word_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPrefixNode)

#endif // OAIPrefixNode_H
