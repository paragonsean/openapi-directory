/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDerivedMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDerivedMetric::OAIDerivedMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDerivedMetric::OAIDerivedMetric() {
    this->initializeModel();
}

OAIDerivedMetric::~OAIDerivedMetric() {}

void OAIDerivedMetric::initializeModel() {

    m_denominator_isSet = false;
    m_denominator_isValid = false;

    m_numerator_isSet = false;
    m_numerator_isValid = false;
}

void OAIDerivedMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDerivedMetric::fromJsonObject(QJsonObject json) {

    m_denominator_isValid = ::OpenAPI::fromJsonValue(m_denominator, json[QString("denominator")]);
    m_denominator_isSet = !json[QString("denominator")].isNull() && m_denominator_isValid;

    m_numerator_isValid = ::OpenAPI::fromJsonValue(m_numerator, json[QString("numerator")]);
    m_numerator_isSet = !json[QString("numerator")].isNull() && m_numerator_isValid;
}

QString OAIDerivedMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDerivedMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_denominator.isSet()) {
        obj.insert(QString("denominator"), ::OpenAPI::toJsonValue(m_denominator));
    }
    if (m_numerator.isSet()) {
        obj.insert(QString("numerator"), ::OpenAPI::toJsonValue(m_numerator));
    }
    return obj;
}

OAILocalizedString OAIDerivedMetric::getDenominator() const {
    return m_denominator;
}
void OAIDerivedMetric::setDenominator(const OAILocalizedString &denominator) {
    m_denominator = denominator;
    m_denominator_isSet = true;
}

bool OAIDerivedMetric::is_denominator_Set() const{
    return m_denominator_isSet;
}

bool OAIDerivedMetric::is_denominator_Valid() const{
    return m_denominator_isValid;
}

OAILocalizedString OAIDerivedMetric::getNumerator() const {
    return m_numerator;
}
void OAIDerivedMetric::setNumerator(const OAILocalizedString &numerator) {
    m_numerator = numerator;
    m_numerator_isSet = true;
}

bool OAIDerivedMetric::is_numerator_Set() const{
    return m_numerator_isSet;
}

bool OAIDerivedMetric::is_numerator_Valid() const{
    return m_numerator_isValid;
}

bool OAIDerivedMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_denominator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_numerator.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDerivedMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
