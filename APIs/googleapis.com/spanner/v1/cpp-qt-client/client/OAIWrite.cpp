/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWrite::OAIWrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWrite::OAIWrite() {
    this->initializeModel();
}

OAIWrite::~OAIWrite() {}

void OAIWrite::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIWrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWrite::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    if(json["values"].isArray()){
        auto arr = json["values"].toArray();
        m_values_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<QJsonValue> item;
                m_values_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_values_isSet = !jval.isNull() && m_values_isValid;
                m_values.push_back(item);
            }
        }
    }
}

QString OAIWrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWrite::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_values.size() > 0) {
        
        obj.insert(QString("values"), toJsonValue(m_values));
    }
    return obj;
}

QList<QString> OAIWrite::getColumns() const {
    return m_columns;
}
void OAIWrite::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIWrite::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIWrite::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIWrite::getTable() const {
    return m_table;
}
void OAIWrite::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIWrite::is_table_Set() const{
    return m_table_isSet;
}

bool OAIWrite::is_table_Valid() const{
    return m_table_isValid;
}

QList<QList<QJsonValue>> OAIWrite::getValues() const {
    return m_values;
}
void OAIWrite::setValues(const QList<QList<QJsonValue>> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIWrite::is_values_Set() const{
    return m_values_isSet;
}

bool OAIWrite::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIWrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
