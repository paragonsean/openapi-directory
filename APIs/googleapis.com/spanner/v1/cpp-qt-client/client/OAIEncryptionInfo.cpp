/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionInfo::OAIEncryptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionInfo::OAIEncryptionInfo() {
    this->initializeModel();
}

OAIEncryptionInfo::~OAIEncryptionInfo() {}

void OAIEncryptionInfo::initializeModel() {

    m_encryption_status_isSet = false;
    m_encryption_status_isValid = false;

    m_encryption_type_isSet = false;
    m_encryption_type_isValid = false;

    m_kms_key_version_isSet = false;
    m_kms_key_version_isValid = false;
}

void OAIEncryptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionInfo::fromJsonObject(QJsonObject json) {

    m_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_encryption_status, json[QString("encryptionStatus")]);
    m_encryption_status_isSet = !json[QString("encryptionStatus")].isNull() && m_encryption_status_isValid;

    m_encryption_type_isValid = ::OpenAPI::fromJsonValue(m_encryption_type, json[QString("encryptionType")]);
    m_encryption_type_isSet = !json[QString("encryptionType")].isNull() && m_encryption_type_isValid;

    m_kms_key_version_isValid = ::OpenAPI::fromJsonValue(m_kms_key_version, json[QString("kmsKeyVersion")]);
    m_kms_key_version_isSet = !json[QString("kmsKeyVersion")].isNull() && m_kms_key_version_isValid;
}

QString OAIEncryptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_status.isSet()) {
        obj.insert(QString("encryptionStatus"), ::OpenAPI::toJsonValue(m_encryption_status));
    }
    if (m_encryption_type_isSet) {
        obj.insert(QString("encryptionType"), ::OpenAPI::toJsonValue(m_encryption_type));
    }
    if (m_kms_key_version_isSet) {
        obj.insert(QString("kmsKeyVersion"), ::OpenAPI::toJsonValue(m_kms_key_version));
    }
    return obj;
}

OAIStatus OAIEncryptionInfo::getEncryptionStatus() const {
    return m_encryption_status;
}
void OAIEncryptionInfo::setEncryptionStatus(const OAIStatus &encryption_status) {
    m_encryption_status = encryption_status;
    m_encryption_status_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_status_Set() const{
    return m_encryption_status_isSet;
}

bool OAIEncryptionInfo::is_encryption_status_Valid() const{
    return m_encryption_status_isValid;
}

QString OAIEncryptionInfo::getEncryptionType() const {
    return m_encryption_type;
}
void OAIEncryptionInfo::setEncryptionType(const QString &encryption_type) {
    m_encryption_type = encryption_type;
    m_encryption_type_isSet = true;
}

bool OAIEncryptionInfo::is_encryption_type_Set() const{
    return m_encryption_type_isSet;
}

bool OAIEncryptionInfo::is_encryption_type_Valid() const{
    return m_encryption_type_isValid;
}

QString OAIEncryptionInfo::getKmsKeyVersion() const {
    return m_kms_key_version;
}
void OAIEncryptionInfo::setKmsKeyVersion(const QString &kms_key_version) {
    m_kms_key_version = kms_key_version;
    m_kms_key_version_isSet = true;
}

bool OAIEncryptionInfo::is_kms_key_version_Set() const{
    return m_kms_key_version_isSet;
}

bool OAIEncryptionInfo::is_kms_key_version_Valid() const{
    return m_kms_key_version_isValid;
}

bool OAIEncryptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
