/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryOptions::OAIQueryOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryOptions::OAIQueryOptions() {
    this->initializeModel();
}

OAIQueryOptions::~OAIQueryOptions() {}

void OAIQueryOptions::initializeModel() {

    m_optimizer_statistics_package_isSet = false;
    m_optimizer_statistics_package_isValid = false;

    m_optimizer_version_isSet = false;
    m_optimizer_version_isValid = false;
}

void OAIQueryOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryOptions::fromJsonObject(QJsonObject json) {

    m_optimizer_statistics_package_isValid = ::OpenAPI::fromJsonValue(m_optimizer_statistics_package, json[QString("optimizerStatisticsPackage")]);
    m_optimizer_statistics_package_isSet = !json[QString("optimizerStatisticsPackage")].isNull() && m_optimizer_statistics_package_isValid;

    m_optimizer_version_isValid = ::OpenAPI::fromJsonValue(m_optimizer_version, json[QString("optimizerVersion")]);
    m_optimizer_version_isSet = !json[QString("optimizerVersion")].isNull() && m_optimizer_version_isValid;
}

QString OAIQueryOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_optimizer_statistics_package_isSet) {
        obj.insert(QString("optimizerStatisticsPackage"), ::OpenAPI::toJsonValue(m_optimizer_statistics_package));
    }
    if (m_optimizer_version_isSet) {
        obj.insert(QString("optimizerVersion"), ::OpenAPI::toJsonValue(m_optimizer_version));
    }
    return obj;
}

QString OAIQueryOptions::getOptimizerStatisticsPackage() const {
    return m_optimizer_statistics_package;
}
void OAIQueryOptions::setOptimizerStatisticsPackage(const QString &optimizer_statistics_package) {
    m_optimizer_statistics_package = optimizer_statistics_package;
    m_optimizer_statistics_package_isSet = true;
}

bool OAIQueryOptions::is_optimizer_statistics_package_Set() const{
    return m_optimizer_statistics_package_isSet;
}

bool OAIQueryOptions::is_optimizer_statistics_package_Valid() const{
    return m_optimizer_statistics_package_isValid;
}

QString OAIQueryOptions::getOptimizerVersion() const {
    return m_optimizer_version;
}
void OAIQueryOptions::setOptimizerVersion(const QString &optimizer_version) {
    m_optimizer_version = optimizer_version;
    m_optimizer_version_isSet = true;
}

bool OAIQueryOptions::is_optimizer_version_Set() const{
    return m_optimizer_version_isSet;
}

bool OAIQueryOptions::is_optimizer_version_Valid() const{
    return m_optimizer_version_isValid;
}

bool OAIQueryOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_optimizer_statistics_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimizer_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
