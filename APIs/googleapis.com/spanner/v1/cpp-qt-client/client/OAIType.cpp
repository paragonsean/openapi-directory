/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIType::OAIType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIType::OAIType() {
    this->initializeModel();
}

OAIType::~OAIType() {}

void OAIType::initializeModel() {

    m_array_element_type_isSet = false;
    m_array_element_type_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_proto_type_fqn_isSet = false;
    m_proto_type_fqn_isValid = false;

    m_struct_type_isSet = false;
    m_struct_type_isValid = false;

    m_type_annotation_isSet = false;
    m_type_annotation_isValid = false;
}

void OAIType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIType::fromJsonObject(QJsonObject json) {

    m_array_element_type_isValid = ::OpenAPI::fromJsonValue(m_array_element_type, json[QString("arrayElementType")]);
    m_array_element_type_isSet = !json[QString("arrayElementType")].isNull() && m_array_element_type_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_proto_type_fqn_isValid = ::OpenAPI::fromJsonValue(m_proto_type_fqn, json[QString("protoTypeFqn")]);
    m_proto_type_fqn_isSet = !json[QString("protoTypeFqn")].isNull() && m_proto_type_fqn_isValid;

    m_struct_type_isValid = ::OpenAPI::fromJsonValue(m_struct_type, json[QString("structType")]);
    m_struct_type_isSet = !json[QString("structType")].isNull() && m_struct_type_isValid;

    m_type_annotation_isValid = ::OpenAPI::fromJsonValue(m_type_annotation, json[QString("typeAnnotation")]);
    m_type_annotation_isSet = !json[QString("typeAnnotation")].isNull() && m_type_annotation_isValid;
}

QString OAIType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIType::asJsonObject() const {
    QJsonObject obj;
    if (m_array_element_type.isSet()) {
        obj.insert(QString("arrayElementType"), ::OpenAPI::toJsonValue(m_array_element_type));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_proto_type_fqn_isSet) {
        obj.insert(QString("protoTypeFqn"), ::OpenAPI::toJsonValue(m_proto_type_fqn));
    }
    if (m_struct_type.isSet()) {
        obj.insert(QString("structType"), ::OpenAPI::toJsonValue(m_struct_type));
    }
    if (m_type_annotation_isSet) {
        obj.insert(QString("typeAnnotation"), ::OpenAPI::toJsonValue(m_type_annotation));
    }
    return obj;
}

OAIType OAIType::getArrayElementType() const {
    return m_array_element_type;
}
void OAIType::setArrayElementType(const OAIType &array_element_type) {
    m_array_element_type = array_element_type;
    m_array_element_type_isSet = true;
}

bool OAIType::is_array_element_type_Set() const{
    return m_array_element_type_isSet;
}

bool OAIType::is_array_element_type_Valid() const{
    return m_array_element_type_isValid;
}

QString OAIType::getCode() const {
    return m_code;
}
void OAIType::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIType::is_code_Set() const{
    return m_code_isSet;
}

bool OAIType::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIType::getProtoTypeFqn() const {
    return m_proto_type_fqn;
}
void OAIType::setProtoTypeFqn(const QString &proto_type_fqn) {
    m_proto_type_fqn = proto_type_fqn;
    m_proto_type_fqn_isSet = true;
}

bool OAIType::is_proto_type_fqn_Set() const{
    return m_proto_type_fqn_isSet;
}

bool OAIType::is_proto_type_fqn_Valid() const{
    return m_proto_type_fqn_isValid;
}

OAIStructType OAIType::getStructType() const {
    return m_struct_type;
}
void OAIType::setStructType(const OAIStructType &struct_type) {
    m_struct_type = struct_type;
    m_struct_type_isSet = true;
}

bool OAIType::is_struct_type_Set() const{
    return m_struct_type_isSet;
}

bool OAIType::is_struct_type_Valid() const{
    return m_struct_type_isValid;
}

QString OAIType::getTypeAnnotation() const {
    return m_type_annotation;
}
void OAIType::setTypeAnnotation(const QString &type_annotation) {
    m_type_annotation = type_annotation;
    m_type_annotation_isSet = true;
}

bool OAIType::is_type_annotation_Set() const{
    return m_type_annotation_isSet;
}

bool OAIType::is_type_annotation_Valid() const{
    return m_type_annotation_isValid;
}

bool OAIType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_type_fqn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_annotation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
