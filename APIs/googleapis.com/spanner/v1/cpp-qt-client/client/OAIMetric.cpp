/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_derived_isSet = false;
    m_derived_isValid = false;

    m_display_label_isSet = false;
    m_display_label_isValid = false;

    m_has_nonzero_data_isSet = false;
    m_has_nonzero_data_isValid = false;

    m_hot_value_isSet = false;
    m_hot_value_isValid = false;

    m_indexed_hot_keys_isSet = false;
    m_indexed_hot_keys_isValid = false;

    m_indexed_key_range_infos_isSet = false;
    m_indexed_key_range_infos_isValid = false;

    m_info_isSet = false;
    m_info_isValid = false;

    m_matrix_isSet = false;
    m_matrix_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_visible_isSet = false;
    m_visible_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("aggregation")]);
    m_aggregation_isSet = !json[QString("aggregation")].isNull() && m_aggregation_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_derived_isValid = ::OpenAPI::fromJsonValue(m_derived, json[QString("derived")]);
    m_derived_isSet = !json[QString("derived")].isNull() && m_derived_isValid;

    m_display_label_isValid = ::OpenAPI::fromJsonValue(m_display_label, json[QString("displayLabel")]);
    m_display_label_isSet = !json[QString("displayLabel")].isNull() && m_display_label_isValid;

    m_has_nonzero_data_isValid = ::OpenAPI::fromJsonValue(m_has_nonzero_data, json[QString("hasNonzeroData")]);
    m_has_nonzero_data_isSet = !json[QString("hasNonzeroData")].isNull() && m_has_nonzero_data_isValid;

    m_hot_value_isValid = ::OpenAPI::fromJsonValue(m_hot_value, json[QString("hotValue")]);
    m_hot_value_isSet = !json[QString("hotValue")].isNull() && m_hot_value_isValid;

    m_indexed_hot_keys_isValid = ::OpenAPI::fromJsonValue(m_indexed_hot_keys, json[QString("indexedHotKeys")]);
    m_indexed_hot_keys_isSet = !json[QString("indexedHotKeys")].isNull() && m_indexed_hot_keys_isValid;

    m_indexed_key_range_infos_isValid = ::OpenAPI::fromJsonValue(m_indexed_key_range_infos, json[QString("indexedKeyRangeInfos")]);
    m_indexed_key_range_infos_isSet = !json[QString("indexedKeyRangeInfos")].isNull() && m_indexed_key_range_infos_isValid;

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_matrix_isValid = ::OpenAPI::fromJsonValue(m_matrix, json[QString("matrix")]);
    m_matrix_isSet = !json[QString("matrix")].isNull() && m_matrix_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_visible_isValid = ::OpenAPI::fromJsonValue(m_visible, json[QString("visible")]);
    m_visible_isSet = !json[QString("visible")].isNull() && m_visible_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_isSet) {
        obj.insert(QString("aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_derived.isSet()) {
        obj.insert(QString("derived"), ::OpenAPI::toJsonValue(m_derived));
    }
    if (m_display_label.isSet()) {
        obj.insert(QString("displayLabel"), ::OpenAPI::toJsonValue(m_display_label));
    }
    if (m_has_nonzero_data_isSet) {
        obj.insert(QString("hasNonzeroData"), ::OpenAPI::toJsonValue(m_has_nonzero_data));
    }
    if (m_hot_value_isSet) {
        obj.insert(QString("hotValue"), ::OpenAPI::toJsonValue(m_hot_value));
    }
    if (m_indexed_hot_keys.size() > 0) {
        obj.insert(QString("indexedHotKeys"), ::OpenAPI::toJsonValue(m_indexed_hot_keys));
    }
    if (m_indexed_key_range_infos.size() > 0) {
        obj.insert(QString("indexedKeyRangeInfos"), ::OpenAPI::toJsonValue(m_indexed_key_range_infos));
    }
    if (m_info.isSet()) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_matrix.isSet()) {
        obj.insert(QString("matrix"), ::OpenAPI::toJsonValue(m_matrix));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_visible_isSet) {
        obj.insert(QString("visible"), ::OpenAPI::toJsonValue(m_visible));
    }
    return obj;
}

QString OAIMetric::getAggregation() const {
    return m_aggregation;
}
void OAIMetric::setAggregation(const QString &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAIMetric::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAIMetric::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

OAILocalizedString OAIMetric::getCategory() const {
    return m_category;
}
void OAIMetric::setCategory(const OAILocalizedString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMetric::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMetric::is_category_Valid() const{
    return m_category_isValid;
}

OAIDerivedMetric OAIMetric::getDerived() const {
    return m_derived;
}
void OAIMetric::setDerived(const OAIDerivedMetric &derived) {
    m_derived = derived;
    m_derived_isSet = true;
}

bool OAIMetric::is_derived_Set() const{
    return m_derived_isSet;
}

bool OAIMetric::is_derived_Valid() const{
    return m_derived_isValid;
}

OAILocalizedString OAIMetric::getDisplayLabel() const {
    return m_display_label;
}
void OAIMetric::setDisplayLabel(const OAILocalizedString &display_label) {
    m_display_label = display_label;
    m_display_label_isSet = true;
}

bool OAIMetric::is_display_label_Set() const{
    return m_display_label_isSet;
}

bool OAIMetric::is_display_label_Valid() const{
    return m_display_label_isValid;
}

bool OAIMetric::isHasNonzeroData() const {
    return m_has_nonzero_data;
}
void OAIMetric::setHasNonzeroData(const bool &has_nonzero_data) {
    m_has_nonzero_data = has_nonzero_data;
    m_has_nonzero_data_isSet = true;
}

bool OAIMetric::is_has_nonzero_data_Set() const{
    return m_has_nonzero_data_isSet;
}

bool OAIMetric::is_has_nonzero_data_Valid() const{
    return m_has_nonzero_data_isValid;
}

float OAIMetric::getHotValue() const {
    return m_hot_value;
}
void OAIMetric::setHotValue(const float &hot_value) {
    m_hot_value = hot_value;
    m_hot_value_isSet = true;
}

bool OAIMetric::is_hot_value_Set() const{
    return m_hot_value_isSet;
}

bool OAIMetric::is_hot_value_Valid() const{
    return m_hot_value_isValid;
}

QMap<QString, OAIIndexedHotKey> OAIMetric::getIndexedHotKeys() const {
    return m_indexed_hot_keys;
}
void OAIMetric::setIndexedHotKeys(const QMap<QString, OAIIndexedHotKey> &indexed_hot_keys) {
    m_indexed_hot_keys = indexed_hot_keys;
    m_indexed_hot_keys_isSet = true;
}

bool OAIMetric::is_indexed_hot_keys_Set() const{
    return m_indexed_hot_keys_isSet;
}

bool OAIMetric::is_indexed_hot_keys_Valid() const{
    return m_indexed_hot_keys_isValid;
}

QMap<QString, OAIIndexedKeyRangeInfos> OAIMetric::getIndexedKeyRangeInfos() const {
    return m_indexed_key_range_infos;
}
void OAIMetric::setIndexedKeyRangeInfos(const QMap<QString, OAIIndexedKeyRangeInfos> &indexed_key_range_infos) {
    m_indexed_key_range_infos = indexed_key_range_infos;
    m_indexed_key_range_infos_isSet = true;
}

bool OAIMetric::is_indexed_key_range_infos_Set() const{
    return m_indexed_key_range_infos_isSet;
}

bool OAIMetric::is_indexed_key_range_infos_Valid() const{
    return m_indexed_key_range_infos_isValid;
}

OAILocalizedString OAIMetric::getInfo() const {
    return m_info;
}
void OAIMetric::setInfo(const OAILocalizedString &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAIMetric::is_info_Set() const{
    return m_info_isSet;
}

bool OAIMetric::is_info_Valid() const{
    return m_info_isValid;
}

OAIMetricMatrix OAIMetric::getMatrix() const {
    return m_matrix;
}
void OAIMetric::setMatrix(const OAIMetricMatrix &matrix) {
    m_matrix = matrix;
    m_matrix_isSet = true;
}

bool OAIMetric::is_matrix_Set() const{
    return m_matrix_isSet;
}

bool OAIMetric::is_matrix_Valid() const{
    return m_matrix_isValid;
}

OAILocalizedString OAIMetric::getUnit() const {
    return m_unit;
}
void OAIMetric::setUnit(const OAILocalizedString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetric::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetric::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetric::isVisible() const {
    return m_visible;
}
void OAIMetric::setVisible(const bool &visible) {
    m_visible = visible;
    m_visible_isSet = true;
}

bool OAIMetric::is_visible_Set() const{
    return m_visible_isSet;
}

bool OAIMetric::is_visible_Valid() const{
    return m_visible_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_derived.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_label.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_nonzero_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hot_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_hot_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_indexed_key_range_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
