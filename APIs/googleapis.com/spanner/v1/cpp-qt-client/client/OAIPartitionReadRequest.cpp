/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPartitionReadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPartitionReadRequest::OAIPartitionReadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPartitionReadRequest::OAIPartitionReadRequest() {
    this->initializeModel();
}

OAIPartitionReadRequest::~OAIPartitionReadRequest() {}

void OAIPartitionReadRequest::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_key_set_isSet = false;
    m_key_set_isValid = false;

    m_partition_options_isSet = false;
    m_partition_options_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIPartitionReadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPartitionReadRequest::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_key_set_isValid = ::OpenAPI::fromJsonValue(m_key_set, json[QString("keySet")]);
    m_key_set_isSet = !json[QString("keySet")].isNull() && m_key_set_isValid;

    m_partition_options_isValid = ::OpenAPI::fromJsonValue(m_partition_options, json[QString("partitionOptions")]);
    m_partition_options_isSet = !json[QString("partitionOptions")].isNull() && m_partition_options_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIPartitionReadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPartitionReadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_key_set.isSet()) {
        obj.insert(QString("keySet"), ::OpenAPI::toJsonValue(m_key_set));
    }
    if (m_partition_options.isSet()) {
        obj.insert(QString("partitionOptions"), ::OpenAPI::toJsonValue(m_partition_options));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QList<QString> OAIPartitionReadRequest::getColumns() const {
    return m_columns;
}
void OAIPartitionReadRequest::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIPartitionReadRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIPartitionReadRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAIPartitionReadRequest::getIndex() const {
    return m_index;
}
void OAIPartitionReadRequest::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIPartitionReadRequest::is_index_Set() const{
    return m_index_isSet;
}

bool OAIPartitionReadRequest::is_index_Valid() const{
    return m_index_isValid;
}

OAIKeySet OAIPartitionReadRequest::getKeySet() const {
    return m_key_set;
}
void OAIPartitionReadRequest::setKeySet(const OAIKeySet &key_set) {
    m_key_set = key_set;
    m_key_set_isSet = true;
}

bool OAIPartitionReadRequest::is_key_set_Set() const{
    return m_key_set_isSet;
}

bool OAIPartitionReadRequest::is_key_set_Valid() const{
    return m_key_set_isValid;
}

OAIPartitionOptions OAIPartitionReadRequest::getPartitionOptions() const {
    return m_partition_options;
}
void OAIPartitionReadRequest::setPartitionOptions(const OAIPartitionOptions &partition_options) {
    m_partition_options = partition_options;
    m_partition_options_isSet = true;
}

bool OAIPartitionReadRequest::is_partition_options_Set() const{
    return m_partition_options_isSet;
}

bool OAIPartitionReadRequest::is_partition_options_Valid() const{
    return m_partition_options_isValid;
}

QString OAIPartitionReadRequest::getTable() const {
    return m_table;
}
void OAIPartitionReadRequest::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIPartitionReadRequest::is_table_Set() const{
    return m_table_isSet;
}

bool OAIPartitionReadRequest::is_table_Valid() const{
    return m_table_isValid;
}

OAITransactionSelector OAIPartitionReadRequest::getTransaction() const {
    return m_transaction;
}
void OAIPartitionReadRequest::setTransaction(const OAITransactionSelector &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIPartitionReadRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIPartitionReadRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIPartitionReadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPartitionReadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
