/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestOptions::OAIRequestOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestOptions::OAIRequestOptions() {
    this->initializeModel();
}

OAIRequestOptions::~OAIRequestOptions() {}

void OAIRequestOptions::initializeModel() {

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_request_tag_isSet = false;
    m_request_tag_isValid = false;

    m_transaction_tag_isSet = false;
    m_transaction_tag_isValid = false;
}

void OAIRequestOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestOptions::fromJsonObject(QJsonObject json) {

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_request_tag_isValid = ::OpenAPI::fromJsonValue(m_request_tag, json[QString("requestTag")]);
    m_request_tag_isSet = !json[QString("requestTag")].isNull() && m_request_tag_isValid;

    m_transaction_tag_isValid = ::OpenAPI::fromJsonValue(m_transaction_tag, json[QString("transactionTag")]);
    m_transaction_tag_isSet = !json[QString("transactionTag")].isNull() && m_transaction_tag_isValid;
}

QString OAIRequestOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_request_tag_isSet) {
        obj.insert(QString("requestTag"), ::OpenAPI::toJsonValue(m_request_tag));
    }
    if (m_transaction_tag_isSet) {
        obj.insert(QString("transactionTag"), ::OpenAPI::toJsonValue(m_transaction_tag));
    }
    return obj;
}

QString OAIRequestOptions::getPriority() const {
    return m_priority;
}
void OAIRequestOptions::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIRequestOptions::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIRequestOptions::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIRequestOptions::getRequestTag() const {
    return m_request_tag;
}
void OAIRequestOptions::setRequestTag(const QString &request_tag) {
    m_request_tag = request_tag;
    m_request_tag_isSet = true;
}

bool OAIRequestOptions::is_request_tag_Set() const{
    return m_request_tag_isSet;
}

bool OAIRequestOptions::is_request_tag_Valid() const{
    return m_request_tag_isValid;
}

QString OAIRequestOptions::getTransactionTag() const {
    return m_transaction_tag;
}
void OAIRequestOptions::setTransactionTag(const QString &transaction_tag) {
    m_transaction_tag = transaction_tag;
    m_transaction_tag_isSet = true;
}

bool OAIRequestOptions::is_transaction_tag_Set() const{
    return m_transaction_tag_isSet;
}

bool OAIRequestOptions::is_transaction_tag_Valid() const{
    return m_transaction_tag_isValid;
}

bool OAIRequestOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
