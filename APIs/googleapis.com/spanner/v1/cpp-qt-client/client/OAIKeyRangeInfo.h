/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIKeyRangeInfo.h
 *
 * A message representing information for a key range (possibly one key).
 */

#ifndef OAIKeyRangeInfo_H
#define OAIKeyRangeInfo_H

#include <QJsonObject>

#include "OAIContextValue.h"
#include "OAILocalizedString.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIContextValue;
class OAILocalizedString;

class OAIKeyRangeInfo : public OAIObject {
public:
    OAIKeyRangeInfo();
    OAIKeyRangeInfo(QString json);
    ~OAIKeyRangeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIContextValue> getContextValues() const;
    void setContextValues(const QList<OAIContextValue> &context_values);
    bool is_context_values_Set() const;
    bool is_context_values_Valid() const;

    qint32 getEndKeyIndex() const;
    void setEndKeyIndex(const qint32 &end_key_index);
    bool is_end_key_index_Set() const;
    bool is_end_key_index_Valid() const;

    OAILocalizedString getInfo() const;
    void setInfo(const OAILocalizedString &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    QString getKeysCount() const;
    void setKeysCount(const QString &keys_count);
    bool is_keys_count_Set() const;
    bool is_keys_count_Valid() const;

    OAILocalizedString getMetric() const;
    void setMetric(const OAILocalizedString &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    qint32 getStartKeyIndex() const;
    void setStartKeyIndex(const qint32 &start_key_index);
    bool is_start_key_index_Set() const;
    bool is_start_key_index_Valid() const;

    QString getTimeOffset() const;
    void setTimeOffset(const QString &time_offset);
    bool is_time_offset_Set() const;
    bool is_time_offset_Valid() const;

    OAILocalizedString getUnit() const;
    void setUnit(const OAILocalizedString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    float getValue() const;
    void setValue(const float &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIContextValue> m_context_values;
    bool m_context_values_isSet;
    bool m_context_values_isValid;

    qint32 m_end_key_index;
    bool m_end_key_index_isSet;
    bool m_end_key_index_isValid;

    OAILocalizedString m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    QString m_keys_count;
    bool m_keys_count_isSet;
    bool m_keys_count_isValid;

    OAILocalizedString m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    qint32 m_start_key_index;
    bool m_start_key_index_isSet;
    bool m_start_key_index_isValid;

    QString m_time_offset;
    bool m_time_offset_isSet;
    bool m_time_offset_isValid;

    OAILocalizedString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    float m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIKeyRangeInfo)

#endif // OAIKeyRangeInfo_H
