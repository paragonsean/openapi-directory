/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDdlStatementActionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDdlStatementActionInfo::OAIDdlStatementActionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDdlStatementActionInfo::OAIDdlStatementActionInfo() {
    this->initializeModel();
}

OAIDdlStatementActionInfo::~OAIDdlStatementActionInfo() {}

void OAIDdlStatementActionInfo::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_entity_names_isSet = false;
    m_entity_names_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;
}

void OAIDdlStatementActionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDdlStatementActionInfo::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_entity_names_isValid = ::OpenAPI::fromJsonValue(m_entity_names, json[QString("entityNames")]);
    m_entity_names_isSet = !json[QString("entityNames")].isNull() && m_entity_names_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;
}

QString OAIDdlStatementActionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDdlStatementActionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_entity_names.size() > 0) {
        obj.insert(QString("entityNames"), ::OpenAPI::toJsonValue(m_entity_names));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    return obj;
}

QString OAIDdlStatementActionInfo::getAction() const {
    return m_action;
}
void OAIDdlStatementActionInfo::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIDdlStatementActionInfo::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDdlStatementActionInfo::is_action_Valid() const{
    return m_action_isValid;
}

QList<QString> OAIDdlStatementActionInfo::getEntityNames() const {
    return m_entity_names;
}
void OAIDdlStatementActionInfo::setEntityNames(const QList<QString> &entity_names) {
    m_entity_names = entity_names;
    m_entity_names_isSet = true;
}

bool OAIDdlStatementActionInfo::is_entity_names_Set() const{
    return m_entity_names_isSet;
}

bool OAIDdlStatementActionInfo::is_entity_names_Valid() const{
    return m_entity_names_isValid;
}

QString OAIDdlStatementActionInfo::getEntityType() const {
    return m_entity_type;
}
void OAIDdlStatementActionInfo::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIDdlStatementActionInfo::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIDdlStatementActionInfo::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

bool OAIDdlStatementActionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDdlStatementActionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
