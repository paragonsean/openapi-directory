/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateSessionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateSessionsRequest::OAIBatchCreateSessionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateSessionsRequest::OAIBatchCreateSessionsRequest() {
    this->initializeModel();
}

OAIBatchCreateSessionsRequest::~OAIBatchCreateSessionsRequest() {}

void OAIBatchCreateSessionsRequest::initializeModel() {

    m_session_count_isSet = false;
    m_session_count_isValid = false;

    m_session_template_isSet = false;
    m_session_template_isValid = false;
}

void OAIBatchCreateSessionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateSessionsRequest::fromJsonObject(QJsonObject json) {

    m_session_count_isValid = ::OpenAPI::fromJsonValue(m_session_count, json[QString("sessionCount")]);
    m_session_count_isSet = !json[QString("sessionCount")].isNull() && m_session_count_isValid;

    m_session_template_isValid = ::OpenAPI::fromJsonValue(m_session_template, json[QString("sessionTemplate")]);
    m_session_template_isSet = !json[QString("sessionTemplate")].isNull() && m_session_template_isValid;
}

QString OAIBatchCreateSessionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateSessionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_session_count_isSet) {
        obj.insert(QString("sessionCount"), ::OpenAPI::toJsonValue(m_session_count));
    }
    if (m_session_template.isSet()) {
        obj.insert(QString("sessionTemplate"), ::OpenAPI::toJsonValue(m_session_template));
    }
    return obj;
}

qint32 OAIBatchCreateSessionsRequest::getSessionCount() const {
    return m_session_count;
}
void OAIBatchCreateSessionsRequest::setSessionCount(const qint32 &session_count) {
    m_session_count = session_count;
    m_session_count_isSet = true;
}

bool OAIBatchCreateSessionsRequest::is_session_count_Set() const{
    return m_session_count_isSet;
}

bool OAIBatchCreateSessionsRequest::is_session_count_Valid() const{
    return m_session_count_isValid;
}

OAISession OAIBatchCreateSessionsRequest::getSessionTemplate() const {
    return m_session_template;
}
void OAIBatchCreateSessionsRequest::setSessionTemplate(const OAISession &session_template) {
    m_session_template = session_template;
    m_session_template_isSet = true;
}

bool OAIBatchCreateSessionsRequest::is_session_template_Set() const{
    return m_session_template_isSet;
}

bool OAIBatchCreateSessionsRequest::is_session_template_Valid() const{
    return m_session_template_isValid;
}

bool OAIBatchCreateSessionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateSessionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
