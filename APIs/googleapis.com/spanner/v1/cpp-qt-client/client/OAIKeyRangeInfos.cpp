/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyRangeInfos.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyRangeInfos::OAIKeyRangeInfos(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyRangeInfos::OAIKeyRangeInfos() {
    this->initializeModel();
}

OAIKeyRangeInfos::~OAIKeyRangeInfos() {}

void OAIKeyRangeInfos::initializeModel() {

    m_infos_isSet = false;
    m_infos_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;
}

void OAIKeyRangeInfos::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyRangeInfos::fromJsonObject(QJsonObject json) {

    m_infos_isValid = ::OpenAPI::fromJsonValue(m_infos, json[QString("infos")]);
    m_infos_isSet = !json[QString("infos")].isNull() && m_infos_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;
}

QString OAIKeyRangeInfos::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyRangeInfos::asJsonObject() const {
    QJsonObject obj;
    if (m_infos.size() > 0) {
        obj.insert(QString("infos"), ::OpenAPI::toJsonValue(m_infos));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    return obj;
}

QList<OAIKeyRangeInfo> OAIKeyRangeInfos::getInfos() const {
    return m_infos;
}
void OAIKeyRangeInfos::setInfos(const QList<OAIKeyRangeInfo> &infos) {
    m_infos = infos;
    m_infos_isSet = true;
}

bool OAIKeyRangeInfos::is_infos_Set() const{
    return m_infos_isSet;
}

bool OAIKeyRangeInfos::is_infos_Valid() const{
    return m_infos_isValid;
}

qint32 OAIKeyRangeInfos::getTotalSize() const {
    return m_total_size;
}
void OAIKeyRangeInfos::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIKeyRangeInfos::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIKeyRangeInfos::is_total_size_Valid() const{
    return m_total_size_isValid;
}

bool OAIKeyRangeInfos::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_infos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyRangeInfos::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
