/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadWrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadWrite::OAIReadWrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadWrite::OAIReadWrite() {
    this->initializeModel();
}

OAIReadWrite::~OAIReadWrite() {}

void OAIReadWrite::initializeModel() {

    m_read_lock_mode_isSet = false;
    m_read_lock_mode_isValid = false;
}

void OAIReadWrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadWrite::fromJsonObject(QJsonObject json) {

    m_read_lock_mode_isValid = ::OpenAPI::fromJsonValue(m_read_lock_mode, json[QString("readLockMode")]);
    m_read_lock_mode_isSet = !json[QString("readLockMode")].isNull() && m_read_lock_mode_isValid;
}

QString OAIReadWrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadWrite::asJsonObject() const {
    QJsonObject obj;
    if (m_read_lock_mode_isSet) {
        obj.insert(QString("readLockMode"), ::OpenAPI::toJsonValue(m_read_lock_mode));
    }
    return obj;
}

QString OAIReadWrite::getReadLockMode() const {
    return m_read_lock_mode;
}
void OAIReadWrite::setReadLockMode(const QString &read_lock_mode) {
    m_read_lock_mode = read_lock_mode;
    m_read_lock_mode_isSet = true;
}

bool OAIReadWrite::is_read_lock_mode_Set() const{
    return m_read_lock_mode_isSet;
}

bool OAIReadWrite::is_read_lock_mode_Valid() const{
    return m_read_lock_mode_isValid;
}

bool OAIReadWrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_lock_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadWrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
