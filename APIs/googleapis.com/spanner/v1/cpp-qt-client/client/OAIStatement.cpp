/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatement::OAIStatement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatement::OAIStatement() {
    this->initializeModel();
}

OAIStatement::~OAIStatement() {}

void OAIStatement::initializeModel() {

    m_param_types_isSet = false;
    m_param_types_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;

    m_sql_isSet = false;
    m_sql_isValid = false;
}

void OAIStatement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatement::fromJsonObject(QJsonObject json) {

    m_param_types_isValid = ::OpenAPI::fromJsonValue(m_param_types, json[QString("paramTypes")]);
    m_param_types_isSet = !json[QString("paramTypes")].isNull() && m_param_types_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;

    m_sql_isValid = ::OpenAPI::fromJsonValue(m_sql, json[QString("sql")]);
    m_sql_isSet = !json[QString("sql")].isNull() && m_sql_isValid;
}

QString OAIStatement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatement::asJsonObject() const {
    QJsonObject obj;
    if (m_param_types.size() > 0) {
        obj.insert(QString("paramTypes"), ::OpenAPI::toJsonValue(m_param_types));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    if (m_sql_isSet) {
        obj.insert(QString("sql"), ::OpenAPI::toJsonValue(m_sql));
    }
    return obj;
}

QMap<QString, OAIType> OAIStatement::getParamTypes() const {
    return m_param_types;
}
void OAIStatement::setParamTypes(const QMap<QString, OAIType> &param_types) {
    m_param_types = param_types;
    m_param_types_isSet = true;
}

bool OAIStatement::is_param_types_Set() const{
    return m_param_types_isSet;
}

bool OAIStatement::is_param_types_Valid() const{
    return m_param_types_isValid;
}

QMap<QString, QJsonValue> OAIStatement::getParams() const {
    return m_params;
}
void OAIStatement::setParams(const QMap<QString, QJsonValue> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIStatement::is_params_Set() const{
    return m_params_isSet;
}

bool OAIStatement::is_params_Valid() const{
    return m_params_isValid;
}

QString OAIStatement::getSql() const {
    return m_sql;
}
void OAIStatement::setSql(const QString &sql) {
    m_sql = sql;
    m_sql_isSet = true;
}

bool OAIStatement::is_sql_Set() const{
    return m_sql_isSet;
}

bool OAIStatement::is_sql_Valid() const{
    return m_sql_isValid;
}

bool OAIStatement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_param_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
