/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryPlan::OAIQueryPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryPlan::OAIQueryPlan() {
    this->initializeModel();
}

OAIQueryPlan::~OAIQueryPlan() {}

void OAIQueryPlan::initializeModel() {

    m_plan_nodes_isSet = false;
    m_plan_nodes_isValid = false;

    m_query_advice_isSet = false;
    m_query_advice_isValid = false;
}

void OAIQueryPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryPlan::fromJsonObject(QJsonObject json) {

    m_plan_nodes_isValid = ::OpenAPI::fromJsonValue(m_plan_nodes, json[QString("planNodes")]);
    m_plan_nodes_isSet = !json[QString("planNodes")].isNull() && m_plan_nodes_isValid;

    m_query_advice_isValid = ::OpenAPI::fromJsonValue(m_query_advice, json[QString("queryAdvice")]);
    m_query_advice_isSet = !json[QString("queryAdvice")].isNull() && m_query_advice_isValid;
}

QString OAIQueryPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_plan_nodes.size() > 0) {
        obj.insert(QString("planNodes"), ::OpenAPI::toJsonValue(m_plan_nodes));
    }
    if (m_query_advice.isSet()) {
        obj.insert(QString("queryAdvice"), ::OpenAPI::toJsonValue(m_query_advice));
    }
    return obj;
}

QList<OAIPlanNode> OAIQueryPlan::getPlanNodes() const {
    return m_plan_nodes;
}
void OAIQueryPlan::setPlanNodes(const QList<OAIPlanNode> &plan_nodes) {
    m_plan_nodes = plan_nodes;
    m_plan_nodes_isSet = true;
}

bool OAIQueryPlan::is_plan_nodes_Set() const{
    return m_plan_nodes_isSet;
}

bool OAIQueryPlan::is_plan_nodes_Valid() const{
    return m_plan_nodes_isValid;
}

OAIQueryAdvisorResult OAIQueryPlan::getQueryAdvice() const {
    return m_query_advice;
}
void OAIQueryPlan::setQueryAdvice(const OAIQueryAdvisorResult &query_advice) {
    m_query_advice = query_advice;
    m_query_advice_isSet = true;
}

bool OAIQueryPlan::is_query_advice_Set() const{
    return m_query_advice_isSet;
}

bool OAIQueryPlan::is_query_advice_Valid() const{
    return m_query_advice_isValid;
}

bool OAIQueryPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_plan_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_advice.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
