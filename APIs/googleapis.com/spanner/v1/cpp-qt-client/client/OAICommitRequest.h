/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICommitRequest.h
 *
 * The request for Commit.
 */

#ifndef OAICommitRequest_H
#define OAICommitRequest_H

#include <QJsonObject>

#include "OAIMutation.h"
#include "OAIRequestOptions.h"
#include "OAITransactionOptions.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMutation;
class OAIRequestOptions;
class OAITransactionOptions;

class OAICommitRequest : public OAIObject {
public:
    OAICommitRequest();
    OAICommitRequest(QString json);
    ~OAICommitRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMaxCommitDelay() const;
    void setMaxCommitDelay(const QString &max_commit_delay);
    bool is_max_commit_delay_Set() const;
    bool is_max_commit_delay_Valid() const;

    QList<OAIMutation> getMutations() const;
    void setMutations(const QList<OAIMutation> &mutations);
    bool is_mutations_Set() const;
    bool is_mutations_Valid() const;

    OAIRequestOptions getRequestOptions() const;
    void setRequestOptions(const OAIRequestOptions &request_options);
    bool is_request_options_Set() const;
    bool is_request_options_Valid() const;

    bool isReturnCommitStats() const;
    void setReturnCommitStats(const bool &return_commit_stats);
    bool is_return_commit_stats_Set() const;
    bool is_return_commit_stats_Valid() const;

    OAITransactionOptions getSingleUseTransaction() const;
    void setSingleUseTransaction(const OAITransactionOptions &single_use_transaction);
    bool is_single_use_transaction_Set() const;
    bool is_single_use_transaction_Valid() const;

    QByteArray getTransactionId() const;
    void setTransactionId(const QByteArray &transaction_id);
    bool is_transaction_id_Set() const;
    bool is_transaction_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_max_commit_delay;
    bool m_max_commit_delay_isSet;
    bool m_max_commit_delay_isValid;

    QList<OAIMutation> m_mutations;
    bool m_mutations_isSet;
    bool m_mutations_isValid;

    OAIRequestOptions m_request_options;
    bool m_request_options_isSet;
    bool m_request_options_isValid;

    bool m_return_commit_stats;
    bool m_return_commit_stats_isSet;
    bool m_return_commit_stats_isValid;

    OAITransactionOptions m_single_use_transaction;
    bool m_single_use_transaction_isSet;
    bool m_single_use_transaction_isValid;

    QByteArray m_transaction_id;
    bool m_transaction_id_isSet;
    bool m_transaction_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICommitRequest)

#endif // OAICommitRequest_H
