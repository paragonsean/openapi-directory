/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDatabaseDdlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDatabaseDdlRequest::OAIUpdateDatabaseDdlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDatabaseDdlRequest::OAIUpdateDatabaseDdlRequest() {
    this->initializeModel();
}

OAIUpdateDatabaseDdlRequest::~OAIUpdateDatabaseDdlRequest() {}

void OAIUpdateDatabaseDdlRequest::initializeModel() {

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_proto_descriptors_isSet = false;
    m_proto_descriptors_isValid = false;

    m_statements_isSet = false;
    m_statements_isValid = false;
}

void OAIUpdateDatabaseDdlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDatabaseDdlRequest::fromJsonObject(QJsonObject json) {

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_proto_descriptors_isValid = ::OpenAPI::fromJsonValue(m_proto_descriptors, json[QString("protoDescriptors")]);
    m_proto_descriptors_isSet = !json[QString("protoDescriptors")].isNull() && m_proto_descriptors_isValid;

    m_statements_isValid = ::OpenAPI::fromJsonValue(m_statements, json[QString("statements")]);
    m_statements_isSet = !json[QString("statements")].isNull() && m_statements_isValid;
}

QString OAIUpdateDatabaseDdlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDatabaseDdlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_proto_descriptors_isSet) {
        obj.insert(QString("protoDescriptors"), ::OpenAPI::toJsonValue(m_proto_descriptors));
    }
    if (m_statements.size() > 0) {
        obj.insert(QString("statements"), ::OpenAPI::toJsonValue(m_statements));
    }
    return obj;
}

QString OAIUpdateDatabaseDdlRequest::getOperationId() const {
    return m_operation_id;
}
void OAIUpdateDatabaseDdlRequest::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIUpdateDatabaseDdlRequest::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIUpdateDatabaseDdlRequest::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QByteArray OAIUpdateDatabaseDdlRequest::getProtoDescriptors() const {
    return m_proto_descriptors;
}
void OAIUpdateDatabaseDdlRequest::setProtoDescriptors(const QByteArray &proto_descriptors) {
    m_proto_descriptors = proto_descriptors;
    m_proto_descriptors_isSet = true;
}

bool OAIUpdateDatabaseDdlRequest::is_proto_descriptors_Set() const{
    return m_proto_descriptors_isSet;
}

bool OAIUpdateDatabaseDdlRequest::is_proto_descriptors_Valid() const{
    return m_proto_descriptors_isValid;
}

QList<QString> OAIUpdateDatabaseDdlRequest::getStatements() const {
    return m_statements;
}
void OAIUpdateDatabaseDdlRequest::setStatements(const QList<QString> &statements) {
    m_statements = statements;
    m_statements_isSet = true;
}

bool OAIUpdateDatabaseDdlRequest::is_statements_Set() const{
    return m_statements_isSet;
}

bool OAIUpdateDatabaseDdlRequest::is_statements_Valid() const{
    return m_statements_isValid;
}

bool OAIUpdateDatabaseDdlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_descriptors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statements.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDatabaseDdlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
