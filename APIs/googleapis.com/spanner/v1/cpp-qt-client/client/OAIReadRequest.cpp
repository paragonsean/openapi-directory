/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReadRequest::OAIReadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReadRequest::OAIReadRequest() {
    this->initializeModel();
}

OAIReadRequest::~OAIReadRequest() {}

void OAIReadRequest::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_data_boost_enabled_isSet = false;
    m_data_boost_enabled_isValid = false;

    m_directed_read_options_isSet = false;
    m_directed_read_options_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_key_set_isSet = false;
    m_key_set_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_partition_token_isSet = false;
    m_partition_token_isValid = false;

    m_request_options_isSet = false;
    m_request_options_isValid = false;

    m_resume_token_isSet = false;
    m_resume_token_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIReadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReadRequest::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_data_boost_enabled_isValid = ::OpenAPI::fromJsonValue(m_data_boost_enabled, json[QString("dataBoostEnabled")]);
    m_data_boost_enabled_isSet = !json[QString("dataBoostEnabled")].isNull() && m_data_boost_enabled_isValid;

    m_directed_read_options_isValid = ::OpenAPI::fromJsonValue(m_directed_read_options, json[QString("directedReadOptions")]);
    m_directed_read_options_isSet = !json[QString("directedReadOptions")].isNull() && m_directed_read_options_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_key_set_isValid = ::OpenAPI::fromJsonValue(m_key_set, json[QString("keySet")]);
    m_key_set_isSet = !json[QString("keySet")].isNull() && m_key_set_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_partition_token_isValid = ::OpenAPI::fromJsonValue(m_partition_token, json[QString("partitionToken")]);
    m_partition_token_isSet = !json[QString("partitionToken")].isNull() && m_partition_token_isValid;

    m_request_options_isValid = ::OpenAPI::fromJsonValue(m_request_options, json[QString("requestOptions")]);
    m_request_options_isSet = !json[QString("requestOptions")].isNull() && m_request_options_isValid;

    m_resume_token_isValid = ::OpenAPI::fromJsonValue(m_resume_token, json[QString("resumeToken")]);
    m_resume_token_isSet = !json[QString("resumeToken")].isNull() && m_resume_token_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("table")]);
    m_table_isSet = !json[QString("table")].isNull() && m_table_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIReadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_data_boost_enabled_isSet) {
        obj.insert(QString("dataBoostEnabled"), ::OpenAPI::toJsonValue(m_data_boost_enabled));
    }
    if (m_directed_read_options.isSet()) {
        obj.insert(QString("directedReadOptions"), ::OpenAPI::toJsonValue(m_directed_read_options));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_key_set.isSet()) {
        obj.insert(QString("keySet"), ::OpenAPI::toJsonValue(m_key_set));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_partition_token_isSet) {
        obj.insert(QString("partitionToken"), ::OpenAPI::toJsonValue(m_partition_token));
    }
    if (m_request_options.isSet()) {
        obj.insert(QString("requestOptions"), ::OpenAPI::toJsonValue(m_request_options));
    }
    if (m_resume_token_isSet) {
        obj.insert(QString("resumeToken"), ::OpenAPI::toJsonValue(m_resume_token));
    }
    if (m_table_isSet) {
        obj.insert(QString("table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

QList<QString> OAIReadRequest::getColumns() const {
    return m_columns;
}
void OAIReadRequest::setColumns(const QList<QString> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAIReadRequest::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAIReadRequest::is_columns_Valid() const{
    return m_columns_isValid;
}

bool OAIReadRequest::isDataBoostEnabled() const {
    return m_data_boost_enabled;
}
void OAIReadRequest::setDataBoostEnabled(const bool &data_boost_enabled) {
    m_data_boost_enabled = data_boost_enabled;
    m_data_boost_enabled_isSet = true;
}

bool OAIReadRequest::is_data_boost_enabled_Set() const{
    return m_data_boost_enabled_isSet;
}

bool OAIReadRequest::is_data_boost_enabled_Valid() const{
    return m_data_boost_enabled_isValid;
}

OAIDirectedReadOptions OAIReadRequest::getDirectedReadOptions() const {
    return m_directed_read_options;
}
void OAIReadRequest::setDirectedReadOptions(const OAIDirectedReadOptions &directed_read_options) {
    m_directed_read_options = directed_read_options;
    m_directed_read_options_isSet = true;
}

bool OAIReadRequest::is_directed_read_options_Set() const{
    return m_directed_read_options_isSet;
}

bool OAIReadRequest::is_directed_read_options_Valid() const{
    return m_directed_read_options_isValid;
}

QString OAIReadRequest::getIndex() const {
    return m_index;
}
void OAIReadRequest::setIndex(const QString &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIReadRequest::is_index_Set() const{
    return m_index_isSet;
}

bool OAIReadRequest::is_index_Valid() const{
    return m_index_isValid;
}

OAIKeySet OAIReadRequest::getKeySet() const {
    return m_key_set;
}
void OAIReadRequest::setKeySet(const OAIKeySet &key_set) {
    m_key_set = key_set;
    m_key_set_isSet = true;
}

bool OAIReadRequest::is_key_set_Set() const{
    return m_key_set_isSet;
}

bool OAIReadRequest::is_key_set_Valid() const{
    return m_key_set_isValid;
}

QString OAIReadRequest::getLimit() const {
    return m_limit;
}
void OAIReadRequest::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIReadRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIReadRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QByteArray OAIReadRequest::getPartitionToken() const {
    return m_partition_token;
}
void OAIReadRequest::setPartitionToken(const QByteArray &partition_token) {
    m_partition_token = partition_token;
    m_partition_token_isSet = true;
}

bool OAIReadRequest::is_partition_token_Set() const{
    return m_partition_token_isSet;
}

bool OAIReadRequest::is_partition_token_Valid() const{
    return m_partition_token_isValid;
}

OAIRequestOptions OAIReadRequest::getRequestOptions() const {
    return m_request_options;
}
void OAIReadRequest::setRequestOptions(const OAIRequestOptions &request_options) {
    m_request_options = request_options;
    m_request_options_isSet = true;
}

bool OAIReadRequest::is_request_options_Set() const{
    return m_request_options_isSet;
}

bool OAIReadRequest::is_request_options_Valid() const{
    return m_request_options_isValid;
}

QByteArray OAIReadRequest::getResumeToken() const {
    return m_resume_token;
}
void OAIReadRequest::setResumeToken(const QByteArray &resume_token) {
    m_resume_token = resume_token;
    m_resume_token_isSet = true;
}

bool OAIReadRequest::is_resume_token_Set() const{
    return m_resume_token_isSet;
}

bool OAIReadRequest::is_resume_token_Valid() const{
    return m_resume_token_isValid;
}

QString OAIReadRequest::getTable() const {
    return m_table;
}
void OAIReadRequest::setTable(const QString &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIReadRequest::is_table_Set() const{
    return m_table_isSet;
}

bool OAIReadRequest::is_table_Valid() const{
    return m_table_isValid;
}

OAITransactionSelector OAIReadRequest::getTransaction() const {
    return m_transaction;
}
void OAIReadRequest::setTransaction(const OAITransactionSelector &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIReadRequest::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIReadRequest::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIReadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_boost_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directed_read_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resume_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
