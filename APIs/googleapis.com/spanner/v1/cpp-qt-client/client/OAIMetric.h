/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetric.h
 *
 * A message representing the actual monitoring data, values for each key bucket over time, of a metric.
 */

#ifndef OAIMetric_H
#define OAIMetric_H

#include <QJsonObject>

#include "OAIDerivedMetric.h"
#include "OAIIndexedHotKey.h"
#include "OAIIndexedKeyRangeInfos.h"
#include "OAILocalizedString.h"
#include "OAIMetricMatrix.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILocalizedString;
class OAIDerivedMetric;
class OAIIndexedHotKey;
class OAIIndexedKeyRangeInfos;
class OAIMetricMatrix;

class OAIMetric : public OAIObject {
public:
    OAIMetric();
    OAIMetric(QString json);
    ~OAIMetric() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAggregation() const;
    void setAggregation(const QString &aggregation);
    bool is_aggregation_Set() const;
    bool is_aggregation_Valid() const;

    OAILocalizedString getCategory() const;
    void setCategory(const OAILocalizedString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAIDerivedMetric getDerived() const;
    void setDerived(const OAIDerivedMetric &derived);
    bool is_derived_Set() const;
    bool is_derived_Valid() const;

    OAILocalizedString getDisplayLabel() const;
    void setDisplayLabel(const OAILocalizedString &display_label);
    bool is_display_label_Set() const;
    bool is_display_label_Valid() const;

    bool isHasNonzeroData() const;
    void setHasNonzeroData(const bool &has_nonzero_data);
    bool is_has_nonzero_data_Set() const;
    bool is_has_nonzero_data_Valid() const;

    float getHotValue() const;
    void setHotValue(const float &hot_value);
    bool is_hot_value_Set() const;
    bool is_hot_value_Valid() const;

    QMap<QString, OAIIndexedHotKey> getIndexedHotKeys() const;
    void setIndexedHotKeys(const QMap<QString, OAIIndexedHotKey> &indexed_hot_keys);
    bool is_indexed_hot_keys_Set() const;
    bool is_indexed_hot_keys_Valid() const;

    QMap<QString, OAIIndexedKeyRangeInfos> getIndexedKeyRangeInfos() const;
    void setIndexedKeyRangeInfos(const QMap<QString, OAIIndexedKeyRangeInfos> &indexed_key_range_infos);
    bool is_indexed_key_range_infos_Set() const;
    bool is_indexed_key_range_infos_Valid() const;

    OAILocalizedString getInfo() const;
    void setInfo(const OAILocalizedString &info);
    bool is_info_Set() const;
    bool is_info_Valid() const;

    OAIMetricMatrix getMatrix() const;
    void setMatrix(const OAIMetricMatrix &matrix);
    bool is_matrix_Set() const;
    bool is_matrix_Valid() const;

    OAILocalizedString getUnit() const;
    void setUnit(const OAILocalizedString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    bool isVisible() const;
    void setVisible(const bool &visible);
    bool is_visible_Set() const;
    bool is_visible_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aggregation;
    bool m_aggregation_isSet;
    bool m_aggregation_isValid;

    OAILocalizedString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAIDerivedMetric m_derived;
    bool m_derived_isSet;
    bool m_derived_isValid;

    OAILocalizedString m_display_label;
    bool m_display_label_isSet;
    bool m_display_label_isValid;

    bool m_has_nonzero_data;
    bool m_has_nonzero_data_isSet;
    bool m_has_nonzero_data_isValid;

    float m_hot_value;
    bool m_hot_value_isSet;
    bool m_hot_value_isValid;

    QMap<QString, OAIIndexedHotKey> m_indexed_hot_keys;
    bool m_indexed_hot_keys_isSet;
    bool m_indexed_hot_keys_isValid;

    QMap<QString, OAIIndexedKeyRangeInfos> m_indexed_key_range_infos;
    bool m_indexed_key_range_infos_isSet;
    bool m_indexed_key_range_infos_isValid;

    OAILocalizedString m_info;
    bool m_info_isSet;
    bool m_info_isValid;

    OAIMetricMatrix m_matrix;
    bool m_matrix_isSet;
    bool m_matrix_isValid;

    OAILocalizedString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;

    bool m_visible;
    bool m_visible_isSet;
    bool m_visible_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetric)

#endif // OAIMetric_H
