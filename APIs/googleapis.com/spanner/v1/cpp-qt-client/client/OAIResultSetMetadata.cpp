/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultSetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultSetMetadata::OAIResultSetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultSetMetadata::OAIResultSetMetadata() {
    this->initializeModel();
}

OAIResultSetMetadata::~OAIResultSetMetadata() {}

void OAIResultSetMetadata::initializeModel() {

    m_row_type_isSet = false;
    m_row_type_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;

    m_undeclared_parameters_isSet = false;
    m_undeclared_parameters_isValid = false;
}

void OAIResultSetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultSetMetadata::fromJsonObject(QJsonObject json) {

    m_row_type_isValid = ::OpenAPI::fromJsonValue(m_row_type, json[QString("rowType")]);
    m_row_type_isSet = !json[QString("rowType")].isNull() && m_row_type_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;

    m_undeclared_parameters_isValid = ::OpenAPI::fromJsonValue(m_undeclared_parameters, json[QString("undeclaredParameters")]);
    m_undeclared_parameters_isSet = !json[QString("undeclaredParameters")].isNull() && m_undeclared_parameters_isValid;
}

QString OAIResultSetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultSetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_row_type.isSet()) {
        obj.insert(QString("rowType"), ::OpenAPI::toJsonValue(m_row_type));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    if (m_undeclared_parameters.isSet()) {
        obj.insert(QString("undeclaredParameters"), ::OpenAPI::toJsonValue(m_undeclared_parameters));
    }
    return obj;
}

OAIStructType OAIResultSetMetadata::getRowType() const {
    return m_row_type;
}
void OAIResultSetMetadata::setRowType(const OAIStructType &row_type) {
    m_row_type = row_type;
    m_row_type_isSet = true;
}

bool OAIResultSetMetadata::is_row_type_Set() const{
    return m_row_type_isSet;
}

bool OAIResultSetMetadata::is_row_type_Valid() const{
    return m_row_type_isValid;
}

OAITransaction OAIResultSetMetadata::getTransaction() const {
    return m_transaction;
}
void OAIResultSetMetadata::setTransaction(const OAITransaction &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIResultSetMetadata::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIResultSetMetadata::is_transaction_Valid() const{
    return m_transaction_isValid;
}

OAIStructType OAIResultSetMetadata::getUndeclaredParameters() const {
    return m_undeclared_parameters;
}
void OAIResultSetMetadata::setUndeclaredParameters(const OAIStructType &undeclared_parameters) {
    m_undeclared_parameters = undeclared_parameters;
    m_undeclared_parameters_isSet = true;
}

bool OAIResultSetMetadata::is_undeclared_parameters_Set() const{
    return m_undeclared_parameters_isSet;
}

bool OAIResultSetMetadata::is_undeclared_parameters_Valid() const{
    return m_undeclared_parameters_isValid;
}

bool OAIResultSetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_row_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_undeclared_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultSetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
