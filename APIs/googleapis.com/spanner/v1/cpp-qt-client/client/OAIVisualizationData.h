/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVisualizationData.h
 *
 * 
 */

#ifndef OAIVisualizationData_H
#define OAIVisualizationData_H

#include <QJsonObject>

#include "OAIDiagnosticMessage.h"
#include "OAIMetric.h"
#include "OAIPrefixNode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDiagnosticMessage;
class OAIMetric;
class OAIPrefixNode;

class OAIVisualizationData : public OAIObject {
public:
    OAIVisualizationData();
    OAIVisualizationData(QString json);
    ~OAIVisualizationData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataSourceEndToken() const;
    void setDataSourceEndToken(const QString &data_source_end_token);
    bool is_data_source_end_token_Set() const;
    bool is_data_source_end_token_Valid() const;

    QString getDataSourceSeparatorToken() const;
    void setDataSourceSeparatorToken(const QString &data_source_separator_token);
    bool is_data_source_separator_token_Set() const;
    bool is_data_source_separator_token_Valid() const;

    QList<OAIDiagnosticMessage> getDiagnosticMessages() const;
    void setDiagnosticMessages(const QList<OAIDiagnosticMessage> &diagnostic_messages);
    bool is_diagnostic_messages_Set() const;
    bool is_diagnostic_messages_Valid() const;

    QList<QString> getEndKeyStrings() const;
    void setEndKeyStrings(const QList<QString> &end_key_strings);
    bool is_end_key_strings_Set() const;
    bool is_end_key_strings_Valid() const;

    bool isHasPii() const;
    void setHasPii(const bool &has_pii);
    bool is_has_pii_Set() const;
    bool is_has_pii_Valid() const;

    QList<QString> getIndexedKeys() const;
    void setIndexedKeys(const QList<QString> &indexed_keys);
    bool is_indexed_keys_Set() const;
    bool is_indexed_keys_Valid() const;

    QString getKeySeparator() const;
    void setKeySeparator(const QString &key_separator);
    bool is_key_separator_Set() const;
    bool is_key_separator_Valid() const;

    QString getKeyUnit() const;
    void setKeyUnit(const QString &key_unit);
    bool is_key_unit_Set() const;
    bool is_key_unit_Valid() const;

    QList<OAIMetric> getMetrics() const;
    void setMetrics(const QList<OAIMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAIPrefixNode> getPrefixNodes() const;
    void setPrefixNodes(const QList<OAIPrefixNode> &prefix_nodes);
    bool is_prefix_nodes_Set() const;
    bool is_prefix_nodes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_source_end_token;
    bool m_data_source_end_token_isSet;
    bool m_data_source_end_token_isValid;

    QString m_data_source_separator_token;
    bool m_data_source_separator_token_isSet;
    bool m_data_source_separator_token_isValid;

    QList<OAIDiagnosticMessage> m_diagnostic_messages;
    bool m_diagnostic_messages_isSet;
    bool m_diagnostic_messages_isValid;

    QList<QString> m_end_key_strings;
    bool m_end_key_strings_isSet;
    bool m_end_key_strings_isValid;

    bool m_has_pii;
    bool m_has_pii_isSet;
    bool m_has_pii_isValid;

    QList<QString> m_indexed_keys;
    bool m_indexed_keys_isSet;
    bool m_indexed_keys_isValid;

    QString m_key_separator;
    bool m_key_separator_isSet;
    bool m_key_separator_isValid;

    QString m_key_unit;
    bool m_key_unit_isSet;
    bool m_key_unit_isValid;

    QList<OAIMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAIPrefixNode> m_prefix_nodes;
    bool m_prefix_nodes_isSet;
    bool m_prefix_nodes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVisualizationData)

#endif // OAIVisualizationData_H
