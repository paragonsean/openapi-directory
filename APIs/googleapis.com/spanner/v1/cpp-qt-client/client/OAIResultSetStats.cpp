/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResultSetStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResultSetStats::OAIResultSetStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResultSetStats::OAIResultSetStats() {
    this->initializeModel();
}

OAIResultSetStats::~OAIResultSetStats() {}

void OAIResultSetStats::initializeModel() {

    m_query_plan_isSet = false;
    m_query_plan_isValid = false;

    m_query_stats_isSet = false;
    m_query_stats_isValid = false;

    m_row_count_exact_isSet = false;
    m_row_count_exact_isValid = false;

    m_row_count_lower_bound_isSet = false;
    m_row_count_lower_bound_isValid = false;
}

void OAIResultSetStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResultSetStats::fromJsonObject(QJsonObject json) {

    m_query_plan_isValid = ::OpenAPI::fromJsonValue(m_query_plan, json[QString("queryPlan")]);
    m_query_plan_isSet = !json[QString("queryPlan")].isNull() && m_query_plan_isValid;

    m_query_stats_isValid = ::OpenAPI::fromJsonValue(m_query_stats, json[QString("queryStats")]);
    m_query_stats_isSet = !json[QString("queryStats")].isNull() && m_query_stats_isValid;

    m_row_count_exact_isValid = ::OpenAPI::fromJsonValue(m_row_count_exact, json[QString("rowCountExact")]);
    m_row_count_exact_isSet = !json[QString("rowCountExact")].isNull() && m_row_count_exact_isValid;

    m_row_count_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_row_count_lower_bound, json[QString("rowCountLowerBound")]);
    m_row_count_lower_bound_isSet = !json[QString("rowCountLowerBound")].isNull() && m_row_count_lower_bound_isValid;
}

QString OAIResultSetStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResultSetStats::asJsonObject() const {
    QJsonObject obj;
    if (m_query_plan.isSet()) {
        obj.insert(QString("queryPlan"), ::OpenAPI::toJsonValue(m_query_plan));
    }
    if (m_query_stats.size() > 0) {
        obj.insert(QString("queryStats"), ::OpenAPI::toJsonValue(m_query_stats));
    }
    if (m_row_count_exact_isSet) {
        obj.insert(QString("rowCountExact"), ::OpenAPI::toJsonValue(m_row_count_exact));
    }
    if (m_row_count_lower_bound_isSet) {
        obj.insert(QString("rowCountLowerBound"), ::OpenAPI::toJsonValue(m_row_count_lower_bound));
    }
    return obj;
}

OAIQueryPlan OAIResultSetStats::getQueryPlan() const {
    return m_query_plan;
}
void OAIResultSetStats::setQueryPlan(const OAIQueryPlan &query_plan) {
    m_query_plan = query_plan;
    m_query_plan_isSet = true;
}

bool OAIResultSetStats::is_query_plan_Set() const{
    return m_query_plan_isSet;
}

bool OAIResultSetStats::is_query_plan_Valid() const{
    return m_query_plan_isValid;
}

QMap<QString, QJsonValue> OAIResultSetStats::getQueryStats() const {
    return m_query_stats;
}
void OAIResultSetStats::setQueryStats(const QMap<QString, QJsonValue> &query_stats) {
    m_query_stats = query_stats;
    m_query_stats_isSet = true;
}

bool OAIResultSetStats::is_query_stats_Set() const{
    return m_query_stats_isSet;
}

bool OAIResultSetStats::is_query_stats_Valid() const{
    return m_query_stats_isValid;
}

QString OAIResultSetStats::getRowCountExact() const {
    return m_row_count_exact;
}
void OAIResultSetStats::setRowCountExact(const QString &row_count_exact) {
    m_row_count_exact = row_count_exact;
    m_row_count_exact_isSet = true;
}

bool OAIResultSetStats::is_row_count_exact_Set() const{
    return m_row_count_exact_isSet;
}

bool OAIResultSetStats::is_row_count_exact_Valid() const{
    return m_row_count_exact_isValid;
}

QString OAIResultSetStats::getRowCountLowerBound() const {
    return m_row_count_lower_bound;
}
void OAIResultSetStats::setRowCountLowerBound(const QString &row_count_lower_bound) {
    m_row_count_lower_bound = row_count_lower_bound;
    m_row_count_lower_bound_isSet = true;
}

bool OAIResultSetStats::is_row_count_lower_bound_Set() const{
    return m_row_count_lower_bound_isSet;
}

bool OAIResultSetStats::is_row_count_lower_bound_Valid() const{
    return m_row_count_lower_bound_isValid;
}

bool OAIResultSetStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_count_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResultSetStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
