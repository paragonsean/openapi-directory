/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateInstanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateInstanceRequest::OAICreateInstanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateInstanceRequest::OAICreateInstanceRequest() {
    this->initializeModel();
}

OAICreateInstanceRequest::~OAICreateInstanceRequest() {}

void OAICreateInstanceRequest::initializeModel() {

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;
}

void OAICreateInstanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateInstanceRequest::fromJsonObject(QJsonObject json) {

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;
}

QString OAICreateInstanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateInstanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_instance.isSet()) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    return obj;
}

OAIInstance OAICreateInstanceRequest::getInstance() const {
    return m_instance;
}
void OAICreateInstanceRequest::setInstance(const OAIInstance &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAICreateInstanceRequest::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAICreateInstanceRequest::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAICreateInstanceRequest::getInstanceId() const {
    return m_instance_id;
}
void OAICreateInstanceRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAICreateInstanceRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAICreateInstanceRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAICreateInstanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateInstanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
