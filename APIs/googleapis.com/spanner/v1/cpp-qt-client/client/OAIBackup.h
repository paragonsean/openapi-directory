/**
 * Cloud Spanner API
 * Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackup.h
 *
 * A backup of a Cloud Spanner database.
 */

#ifndef OAIBackup_H
#define OAIBackup_H

#include <QJsonObject>

#include "OAIEncryptionInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEncryptionInfo;

class OAIBackup : public OAIObject {
public:
    OAIBackup();
    OAIBackup(QString json);
    ~OAIBackup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDatabase() const;
    void setDatabase(const QString &database);
    bool is_database_Set() const;
    bool is_database_Valid() const;

    QString getDatabaseDialect() const;
    void setDatabaseDialect(const QString &database_dialect);
    bool is_database_dialect_Set() const;
    bool is_database_dialect_Valid() const;

    OAIEncryptionInfo getEncryptionInfo() const;
    void setEncryptionInfo(const OAIEncryptionInfo &encryption_info);
    bool is_encryption_info_Set() const;
    bool is_encryption_info_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getMaxExpireTime() const;
    void setMaxExpireTime(const QString &max_expire_time);
    bool is_max_expire_time_Set() const;
    bool is_max_expire_time_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getReferencingBackups() const;
    void setReferencingBackups(const QList<QString> &referencing_backups);
    bool is_referencing_backups_Set() const;
    bool is_referencing_backups_Valid() const;

    QList<QString> getReferencingDatabases() const;
    void setReferencingDatabases(const QList<QString> &referencing_databases);
    bool is_referencing_databases_Set() const;
    bool is_referencing_databases_Valid() const;

    QString getSizeBytes() const;
    void setSizeBytes(const QString &size_bytes);
    bool is_size_bytes_Set() const;
    bool is_size_bytes_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getVersionTime() const;
    void setVersionTime(const QString &version_time);
    bool is_version_time_Set() const;
    bool is_version_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_database;
    bool m_database_isSet;
    bool m_database_isValid;

    QString m_database_dialect;
    bool m_database_dialect_isSet;
    bool m_database_dialect_isValid;

    OAIEncryptionInfo m_encryption_info;
    bool m_encryption_info_isSet;
    bool m_encryption_info_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_max_expire_time;
    bool m_max_expire_time_isSet;
    bool m_max_expire_time_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_referencing_backups;
    bool m_referencing_backups_isSet;
    bool m_referencing_backups_isValid;

    QList<QString> m_referencing_databases;
    bool m_referencing_databases_isSet;
    bool m_referencing_databases_isValid;

    QString m_size_bytes;
    bool m_size_bytes_isSet;
    bool m_size_bytes_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_version_time;
    bool m_version_time_isSet;
    bool m_version_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackup)

#endif // OAIBackup_H
