# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basic_operation_status: str=None, name: str=None):
        """ModelOperationMetadata - a model defined in OpenAPI

        :param basic_operation_status: The basic_operation_status of this ModelOperationMetadata.
        :param name: The name of this ModelOperationMetadata.
        """
        self.openapi_types = {
            'basic_operation_status': str,
            'name': str
        }

        self.attribute_map = {
            'basic_operation_status': 'basicOperationStatus',
            'name': 'name'
        }

        self._basic_operation_status = basic_operation_status
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelOperationMetadata of this ModelOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basic_operation_status(self):
        """Gets the basic_operation_status of this ModelOperationMetadata.


        :return: The basic_operation_status of this ModelOperationMetadata.
        :rtype: str
        """
        return self._basic_operation_status

    @basic_operation_status.setter
    def basic_operation_status(self, basic_operation_status):
        """Sets the basic_operation_status of this ModelOperationMetadata.


        :param basic_operation_status: The basic_operation_status of this ModelOperationMetadata.
        :type basic_operation_status: str
        """
        allowed_values = ["BASIC_OPERATION_STATUS_UNSPECIFIED", "BASIC_OPERATION_STATUS_UPLOADING", "BASIC_OPERATION_STATUS_VERIFYING"]  # noqa: E501
        if basic_operation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `basic_operation_status` ({0}), must be one of {1}"
                .format(basic_operation_status, allowed_values)
            )

        self._basic_operation_status = basic_operation_status

    @property
    def name(self):
        """Gets the name of this ModelOperationMetadata.

        The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`

        :return: The name of this ModelOperationMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelOperationMetadata.

        The name of the model we are creating/updating The name must have the form `projects/{project_id}/models/{model_id}`

        :param name: The name of this ModelOperationMetadata.
        :type name: str
        """

        self._name = name
