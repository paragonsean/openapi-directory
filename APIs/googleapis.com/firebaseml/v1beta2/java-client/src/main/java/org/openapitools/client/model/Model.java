/*
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelState;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.TfLiteModel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An ML model hosted in Firebase ML
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:49.975972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model {
  public static final String SERIALIZED_NAME_ACTIVE_OPERATIONS = "activeOperations";
  @SerializedName(SERIALIZED_NAME_ACTIVE_OPERATIONS)
  private List<Operation> activeOperations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_MODEL_HASH = "modelHash";
  @SerializedName(SERIALIZED_NAME_MODEL_HASH)
  private String modelHash;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ModelState state;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TFLITE_MODEL = "tfliteModel";
  @SerializedName(SERIALIZED_NAME_TFLITE_MODEL)
  private TfLiteModel tfliteModel;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Model() {
  }

  public Model(
     List<Operation> activeOperations, 
     String createTime, 
     String etag, 
     String modelHash, 
     String updateTime
  ) {
    this();
    this.activeOperations = activeOperations;
    this.createTime = createTime;
    this.etag = etag;
    this.modelHash = modelHash;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Lists operation ids associated with this model whose status is NOT done.
   * @return activeOperations
   */
  @javax.annotation.Nullable
  public List<Operation> getActiveOperations() {
    return activeOperations;
  }



  /**
   * Output only. Timestamp when this model was created in Firebase ML.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Model displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. The model_hash will change if a new file is available for download.
   * @return modelHash
   */
  @javax.annotation.Nullable
  public String getModelHash() {
    return modelHash;
  }



  public Model name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the Model. Model names have the form &#x60;projects/{project_id}/models/{model_id}&#x60; The name is ignored when creating a model.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Model state(ModelState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ModelState getState() {
    return state;
  }

  public void setState(ModelState state) {
    this.state = state;
  }


  public Model tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Model addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * User defined tags which can be used to group/filter models during listing
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Model tfliteModel(TfLiteModel tfliteModel) {
    this.tfliteModel = tfliteModel;
    return this;
  }

  /**
   * Get tfliteModel
   * @return tfliteModel
   */
  @javax.annotation.Nullable
  public TfLiteModel getTfliteModel() {
    return tfliteModel;
  }

  public void setTfliteModel(TfLiteModel tfliteModel) {
    this.tfliteModel = tfliteModel;
  }


  /**
   * Output only. Timestamp when this model was updated in Firebase ML.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.activeOperations, model.activeOperations) &&
        Objects.equals(this.createTime, model.createTime) &&
        Objects.equals(this.displayName, model.displayName) &&
        Objects.equals(this.etag, model.etag) &&
        Objects.equals(this.modelHash, model.modelHash) &&
        Objects.equals(this.name, model.name) &&
        Objects.equals(this.state, model.state) &&
        Objects.equals(this.tags, model.tags) &&
        Objects.equals(this.tfliteModel, model.tfliteModel) &&
        Objects.equals(this.updateTime, model.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeOperations, createTime, displayName, etag, modelHash, name, state, tags, tfliteModel, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    activeOperations: ").append(toIndentedString(activeOperations)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    modelHash: ").append(toIndentedString(modelHash)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tfliteModel: ").append(toIndentedString(tfliteModel)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeOperations");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("modelHash");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("tags");
    openapiFields.add("tfliteModel");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model is not found in the empty JSON string", Model.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("activeOperations") != null && !jsonObj.get("activeOperations").isJsonNull()) {
        JsonArray jsonArrayactiveOperations = jsonObj.getAsJsonArray("activeOperations");
        if (jsonArrayactiveOperations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeOperations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeOperations` to be an array in the JSON string but got `%s`", jsonObj.get("activeOperations").toString()));
          }

          // validate the optional field `activeOperations` (array)
          for (int i = 0; i < jsonArrayactiveOperations.size(); i++) {
            Operation.validateJsonElement(jsonArrayactiveOperations.get(i));
          };
        }
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("modelHash") != null && !jsonObj.get("modelHash").isJsonNull()) && !jsonObj.get("modelHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelHash").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ModelState.validateJsonElement(jsonObj.get("state"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `tfliteModel`
      if (jsonObj.get("tfliteModel") != null && !jsonObj.get("tfliteModel").isJsonNull()) {
        TfLiteModel.validateJsonElement(jsonObj.get("tfliteModel"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model.class));

       return (TypeAdapter<T>) new TypeAdapter<Model>() {
           @Override
           public void write(JsonWriter out, Model value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model
   * @throws IOException if the JSON string is invalid with respect to Model
   */
  public static Model fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model.class);
  }

  /**
   * Convert an instance of Model to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

