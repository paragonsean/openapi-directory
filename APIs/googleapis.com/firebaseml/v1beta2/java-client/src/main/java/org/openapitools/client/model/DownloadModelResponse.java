/*
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for downloading a model to device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:49.975972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadModelResponse {
  public static final String SERIALIZED_NAME_DOWNLOAD_URI = "downloadUri";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URI)
  private String downloadUri;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  /**
   * Output only. The format of the model being downloaded.
   */
  @JsonAdapter(ModelFormatEnum.Adapter.class)
  public enum ModelFormatEnum {
    MODEL_FORMAT_UNSPECIFIED("MODEL_FORMAT_UNSPECIFIED"),
    
    TFLITE("TFLITE");

    private String value;

    ModelFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModelFormatEnum fromValue(String value) {
      for (ModelFormatEnum b : ModelFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModelFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModelFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModelFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModelFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModelFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODEL_FORMAT = "modelFormat";
  @SerializedName(SERIALIZED_NAME_MODEL_FORMAT)
  private ModelFormatEnum modelFormat;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  private String sizeBytes;

  public DownloadModelResponse() {
  }

  public DownloadModelResponse(
     String downloadUri, 
     String expireTime, 
     ModelFormatEnum modelFormat, 
     String sizeBytes
  ) {
    this();
    this.downloadUri = downloadUri;
    this.expireTime = expireTime;
    this.modelFormat = modelFormat;
    this.sizeBytes = sizeBytes;
  }

  /**
   * Output only. A download URI for the model/zip file.
   * @return downloadUri
   */
  @javax.annotation.Nullable
  public String getDownloadUri() {
    return downloadUri;
  }



  /**
   * Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. The format of the model being downloaded.
   * @return modelFormat
   */
  @javax.annotation.Nullable
  public ModelFormatEnum getModelFormat() {
    return modelFormat;
  }



  /**
   * Output only. The size of the file(s), if this information is available.
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public String getSizeBytes() {
    return sizeBytes;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadModelResponse downloadModelResponse = (DownloadModelResponse) o;
    return Objects.equals(this.downloadUri, downloadModelResponse.downloadUri) &&
        Objects.equals(this.expireTime, downloadModelResponse.expireTime) &&
        Objects.equals(this.modelFormat, downloadModelResponse.modelFormat) &&
        Objects.equals(this.sizeBytes, downloadModelResponse.sizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadUri, expireTime, modelFormat, sizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadModelResponse {\n");
    sb.append("    downloadUri: ").append(toIndentedString(downloadUri)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    modelFormat: ").append(toIndentedString(modelFormat)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadUri");
    openapiFields.add("expireTime");
    openapiFields.add("modelFormat");
    openapiFields.add("sizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadModelResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadModelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadModelResponse is not found in the empty JSON string", DownloadModelResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadModelResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadModelResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("downloadUri") != null && !jsonObj.get("downloadUri").isJsonNull()) && !jsonObj.get("downloadUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadUri").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("modelFormat") != null && !jsonObj.get("modelFormat").isJsonNull()) && !jsonObj.get("modelFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelFormat").toString()));
      }
      // validate the optional field `modelFormat`
      if (jsonObj.get("modelFormat") != null && !jsonObj.get("modelFormat").isJsonNull()) {
        ModelFormatEnum.validateJsonElement(jsonObj.get("modelFormat"));
      }
      if ((jsonObj.get("sizeBytes") != null && !jsonObj.get("sizeBytes").isJsonNull()) && !jsonObj.get("sizeBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadModelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadModelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadModelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadModelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadModelResponse>() {
           @Override
           public void write(JsonWriter out, DownloadModelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadModelResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadModelResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadModelResponse
   * @throws IOException if the JSON string is invalid with respect to DownloadModelResponse
   */
  public static DownloadModelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadModelResponse.class);
  }

  /**
   * Convert an instance of DownloadModelResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

