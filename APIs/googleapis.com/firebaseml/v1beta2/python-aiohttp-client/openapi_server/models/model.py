# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_state import ModelState
from openapi_server.models.operation import Operation
from openapi_server.models.tf_lite_model import TfLiteModel
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_operations: List[Operation]=None, create_time: str=None, display_name: str=None, etag: str=None, model_hash: str=None, name: str=None, state: ModelState=None, tags: List[str]=None, tflite_model: TfLiteModel=None, update_time: str=None):
        """Model - a model defined in OpenAPI

        :param active_operations: The active_operations of this Model.
        :param create_time: The create_time of this Model.
        :param display_name: The display_name of this Model.
        :param etag: The etag of this Model.
        :param model_hash: The model_hash of this Model.
        :param name: The name of this Model.
        :param state: The state of this Model.
        :param tags: The tags of this Model.
        :param tflite_model: The tflite_model of this Model.
        :param update_time: The update_time of this Model.
        """
        self.openapi_types = {
            'active_operations': List[Operation],
            'create_time': str,
            'display_name': str,
            'etag': str,
            'model_hash': str,
            'name': str,
            'state': ModelState,
            'tags': List[str],
            'tflite_model': TfLiteModel,
            'update_time': str
        }

        self.attribute_map = {
            'active_operations': 'activeOperations',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'model_hash': 'modelHash',
            'name': 'name',
            'state': 'state',
            'tags': 'tags',
            'tflite_model': 'tfliteModel',
            'update_time': 'updateTime'
        }

        self._active_operations = active_operations
        self._create_time = create_time
        self._display_name = display_name
        self._etag = etag
        self._model_hash = model_hash
        self._name = name
        self._state = state
        self._tags = tags
        self._tflite_model = tflite_model
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_operations(self):
        """Gets the active_operations of this Model.

        Output only. Lists operation ids associated with this model whose status is NOT done.

        :return: The active_operations of this Model.
        :rtype: List[Operation]
        """
        return self._active_operations

    @active_operations.setter
    def active_operations(self, active_operations):
        """Sets the active_operations of this Model.

        Output only. Lists operation ids associated with this model whose status is NOT done.

        :param active_operations: The active_operations of this Model.
        :type active_operations: List[Operation]
        """

        self._active_operations = active_operations

    @property
    def create_time(self):
        """Gets the create_time of this Model.

        Output only. Timestamp when this model was created in Firebase ML.

        :return: The create_time of this Model.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Model.

        Output only. Timestamp when this model was created in Firebase ML.

        :param create_time: The create_time of this Model.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this Model.

        Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.

        :return: The display_name of this Model.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Model.

        Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.

        :param display_name: The display_name of this Model.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Model.

        Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3

        :return: The etag of this Model.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Model.

        Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3

        :param etag: The etag of this Model.
        :type etag: str
        """

        self._etag = etag

    @property
    def model_hash(self):
        """Gets the model_hash of this Model.

        Output only. The model_hash will change if a new file is available for download.

        :return: The model_hash of this Model.
        :rtype: str
        """
        return self._model_hash

    @model_hash.setter
    def model_hash(self, model_hash):
        """Sets the model_hash of this Model.

        Output only. The model_hash will change if a new file is available for download.

        :param model_hash: The model_hash of this Model.
        :type model_hash: str
        """

        self._model_hash = model_hash

    @property
    def name(self):
        """Gets the name of this Model.

        The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.

        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Model.

        The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.

        :param name: The name of this Model.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Model.


        :return: The state of this Model.
        :rtype: ModelState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Model.


        :param state: The state of this Model.
        :type state: ModelState
        """

        self._state = state

    @property
    def tags(self):
        """Gets the tags of this Model.

        User defined tags which can be used to group/filter models during listing

        :return: The tags of this Model.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Model.

        User defined tags which can be used to group/filter models during listing

        :param tags: The tags of this Model.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def tflite_model(self):
        """Gets the tflite_model of this Model.


        :return: The tflite_model of this Model.
        :rtype: TfLiteModel
        """
        return self._tflite_model

    @tflite_model.setter
    def tflite_model(self, tflite_model):
        """Sets the tflite_model of this Model.


        :param tflite_model: The tflite_model of this Model.
        :type tflite_model: TfLiteModel
        """

        self._tflite_model = tflite_model

    @property
    def update_time(self):
        """Gets the update_time of this Model.

        Output only. Timestamp when this model was updated in Firebase ML.

        :return: The update_time of this Model.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Model.

        Output only. Timestamp when this model was updated in Firebase ML.

        :param update_time: The update_time of this Model.
        :type update_time: str
        """

        self._update_time = update_time
