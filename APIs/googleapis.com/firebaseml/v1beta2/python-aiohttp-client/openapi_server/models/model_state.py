# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ModelState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, published: bool=None, validation_error: Status=None):
        """ModelState - a model defined in OpenAPI

        :param published: The published of this ModelState.
        :param validation_error: The validation_error of this ModelState.
        """
        self.openapi_types = {
            'published': bool,
            'validation_error': Status
        }

        self.attribute_map = {
            'published': 'published',
            'validation_error': 'validationError'
        }

        self._published = published
        self._validation_error = validation_error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelState of this ModelState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def published(self):
        """Gets the published of this ModelState.

        Indicates if this model has been published.

        :return: The published of this ModelState.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this ModelState.

        Indicates if this model has been published.

        :param published: The published of this ModelState.
        :type published: bool
        """

        self._published = published

    @property
    def validation_error(self):
        """Gets the validation_error of this ModelState.


        :return: The validation_error of this ModelState.
        :rtype: Status
        """
        return self._validation_error

    @validation_error.setter
    def validation_error(self, validation_error):
        """Sets the validation_error of this ModelState.


        :param validation_error: The validation_error of this ModelState.
        :type validation_error: Status
        """

        self._validation_error = validation_error
