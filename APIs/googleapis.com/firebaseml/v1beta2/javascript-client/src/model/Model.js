/**
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelState from './ModelState';
import Operation from './Operation';
import TfLiteModel from './TfLiteModel';

/**
 * The Model model module.
 * @module model/Model
 * @version v1beta2
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * An ML model hosted in Firebase ML
     * @alias module:model/Model
     */
    constructor() { 
        
        Model.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('activeOperations')) {
                obj['activeOperations'] = ApiClient.convertToType(data['activeOperations'], [Operation]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('modelHash')) {
                obj['modelHash'] = ApiClient.convertToType(data['modelHash'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ModelState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tfliteModel')) {
                obj['tfliteModel'] = TfLiteModel.constructFromObject(data['tfliteModel']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        if (data['activeOperations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeOperations'])) {
                throw new Error("Expected the field `activeOperations` to be an array in the JSON data but got " + data['activeOperations']);
            }
            // validate the optional field `activeOperations` (array)
            for (const item of data['activeOperations']) {
                Operation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['modelHash'] && !(typeof data['modelHash'] === 'string' || data['modelHash'] instanceof String)) {
            throw new Error("Expected the field `modelHash` to be a primitive type in the JSON string but got " + data['modelHash']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          ModelState.validateJSON(data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // validate the optional field `tfliteModel`
        if (data['tfliteModel']) { // data not null
          TfLiteModel.validateJSON(data['tfliteModel']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Lists operation ids associated with this model whose status is NOT done.
 * @member {Array.<module:model/Operation>} activeOperations
 */
Model.prototype['activeOperations'] = undefined;

/**
 * Output only. Timestamp when this model was created in Firebase ML.
 * @member {String} createTime
 */
Model.prototype['createTime'] = undefined;

/**
 * Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.
 * @member {String} displayName
 */
Model.prototype['displayName'] = undefined;

/**
 * Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3
 * @member {String} etag
 */
Model.prototype['etag'] = undefined;

/**
 * Output only. The model_hash will change if a new file is available for download.
 * @member {String} modelHash
 */
Model.prototype['modelHash'] = undefined;

/**
 * The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.
 * @member {String} name
 */
Model.prototype['name'] = undefined;

/**
 * @member {module:model/ModelState} state
 */
Model.prototype['state'] = undefined;

/**
 * User defined tags which can be used to group/filter models during listing
 * @member {Array.<String>} tags
 */
Model.prototype['tags'] = undefined;

/**
 * @member {module:model/TfLiteModel} tfliteModel
 */
Model.prototype['tfliteModel'] = undefined;

/**
 * Output only. Timestamp when this model was updated in Firebase ML.
 * @member {String} updateTime
 */
Model.prototype['updateTime'] = undefined;






export default Model;

