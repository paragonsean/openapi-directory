/**
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITfLiteModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITfLiteModel::OAITfLiteModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITfLiteModel::OAITfLiteModel() {
    this->initializeModel();
}

OAITfLiteModel::~OAITfLiteModel() {}

void OAITfLiteModel::initializeModel() {

    m_automl_model_isSet = false;
    m_automl_model_isValid = false;

    m_gcs_tflite_uri_isSet = false;
    m_gcs_tflite_uri_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;
}

void OAITfLiteModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITfLiteModel::fromJsonObject(QJsonObject json) {

    m_automl_model_isValid = ::OpenAPI::fromJsonValue(m_automl_model, json[QString("automlModel")]);
    m_automl_model_isSet = !json[QString("automlModel")].isNull() && m_automl_model_isValid;

    m_gcs_tflite_uri_isValid = ::OpenAPI::fromJsonValue(m_gcs_tflite_uri, json[QString("gcsTfliteUri")]);
    m_gcs_tflite_uri_isSet = !json[QString("gcsTfliteUri")].isNull() && m_gcs_tflite_uri_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;
}

QString OAITfLiteModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITfLiteModel::asJsonObject() const {
    QJsonObject obj;
    if (m_automl_model_isSet) {
        obj.insert(QString("automlModel"), ::OpenAPI::toJsonValue(m_automl_model));
    }
    if (m_gcs_tflite_uri_isSet) {
        obj.insert(QString("gcsTfliteUri"), ::OpenAPI::toJsonValue(m_gcs_tflite_uri));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    return obj;
}

QString OAITfLiteModel::getAutomlModel() const {
    return m_automl_model;
}
void OAITfLiteModel::setAutomlModel(const QString &automl_model) {
    m_automl_model = automl_model;
    m_automl_model_isSet = true;
}

bool OAITfLiteModel::is_automl_model_Set() const{
    return m_automl_model_isSet;
}

bool OAITfLiteModel::is_automl_model_Valid() const{
    return m_automl_model_isValid;
}

QString OAITfLiteModel::getGcsTfliteUri() const {
    return m_gcs_tflite_uri;
}
void OAITfLiteModel::setGcsTfliteUri(const QString &gcs_tflite_uri) {
    m_gcs_tflite_uri = gcs_tflite_uri;
    m_gcs_tflite_uri_isSet = true;
}

bool OAITfLiteModel::is_gcs_tflite_uri_Set() const{
    return m_gcs_tflite_uri_isSet;
}

bool OAITfLiteModel::is_gcs_tflite_uri_Valid() const{
    return m_gcs_tflite_uri_isValid;
}

QString OAITfLiteModel::getSizeBytes() const {
    return m_size_bytes;
}
void OAITfLiteModel::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAITfLiteModel::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAITfLiteModel::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

bool OAITfLiteModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automl_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_tflite_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITfLiteModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
