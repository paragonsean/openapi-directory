/**
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_active_operations_isSet = false;
    m_active_operations_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_model_hash_isSet = false;
    m_model_hash_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tflite_model_isSet = false;
    m_tflite_model_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_active_operations_isValid = ::OpenAPI::fromJsonValue(m_active_operations, json[QString("activeOperations")]);
    m_active_operations_isSet = !json[QString("activeOperations")].isNull() && m_active_operations_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_model_hash_isValid = ::OpenAPI::fromJsonValue(m_model_hash, json[QString("modelHash")]);
    m_model_hash_isSet = !json[QString("modelHash")].isNull() && m_model_hash_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tflite_model_isValid = ::OpenAPI::fromJsonValue(m_tflite_model, json[QString("tfliteModel")]);
    m_tflite_model_isSet = !json[QString("tfliteModel")].isNull() && m_tflite_model_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_active_operations.size() > 0) {
        obj.insert(QString("activeOperations"), ::OpenAPI::toJsonValue(m_active_operations));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_model_hash_isSet) {
        obj.insert(QString("modelHash"), ::OpenAPI::toJsonValue(m_model_hash));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tflite_model.isSet()) {
        obj.insert(QString("tfliteModel"), ::OpenAPI::toJsonValue(m_tflite_model));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIOperation> OAIModel::getActiveOperations() const {
    return m_active_operations;
}
void OAIModel::setActiveOperations(const QList<OAIOperation> &active_operations) {
    m_active_operations = active_operations;
    m_active_operations_isSet = true;
}

bool OAIModel::is_active_operations_Set() const{
    return m_active_operations_isSet;
}

bool OAIModel::is_active_operations_Valid() const{
    return m_active_operations_isValid;
}

QString OAIModel::getCreateTime() const {
    return m_create_time;
}
void OAIModel::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIModel::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIModel::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIModel::getDisplayName() const {
    return m_display_name;
}
void OAIModel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIModel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIModel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIModel::getEtag() const {
    return m_etag;
}
void OAIModel::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIModel::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIModel::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIModel::getModelHash() const {
    return m_model_hash;
}
void OAIModel::setModelHash(const QString &model_hash) {
    m_model_hash = model_hash;
    m_model_hash_isSet = true;
}

bool OAIModel::is_model_hash_Set() const{
    return m_model_hash_isSet;
}

bool OAIModel::is_model_hash_Valid() const{
    return m_model_hash_isValid;
}

QString OAIModel::getName() const {
    return m_name;
}
void OAIModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModel::is_name_Valid() const{
    return m_name_isValid;
}

OAIModelState OAIModel::getState() const {
    return m_state;
}
void OAIModel::setState(const OAIModelState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIModel::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIModel::getTags() const {
    return m_tags;
}
void OAIModel::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIModel::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIModel::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITfLiteModel OAIModel::getTfliteModel() const {
    return m_tflite_model;
}
void OAIModel::setTfliteModel(const OAITfLiteModel &tflite_model) {
    m_tflite_model = tflite_model;
    m_tflite_model_isSet = true;
}

bool OAIModel::is_tflite_model_Set() const{
    return m_tflite_model_isSet;
}

bool OAIModel::is_tflite_model_Valid() const{
    return m_tflite_model_isValid;
}

QString OAIModel::getUpdateTime() const {
    return m_update_time;
}
void OAIModel::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIModel::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIModel::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tflite_model.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
