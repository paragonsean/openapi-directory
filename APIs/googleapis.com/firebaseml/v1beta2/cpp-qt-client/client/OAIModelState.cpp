/**
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelState::OAIModelState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelState::OAIModelState() {
    this->initializeModel();
}

OAIModelState::~OAIModelState() {}

void OAIModelState::initializeModel() {

    m_published_isSet = false;
    m_published_isValid = false;

    m_validation_error_isSet = false;
    m_validation_error_isValid = false;
}

void OAIModelState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelState::fromJsonObject(QJsonObject json) {

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_validation_error_isValid = ::OpenAPI::fromJsonValue(m_validation_error, json[QString("validationError")]);
    m_validation_error_isSet = !json[QString("validationError")].isNull() && m_validation_error_isValid;
}

QString OAIModelState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelState::asJsonObject() const {
    QJsonObject obj;
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_validation_error.isSet()) {
        obj.insert(QString("validationError"), ::OpenAPI::toJsonValue(m_validation_error));
    }
    return obj;
}

bool OAIModelState::isPublished() const {
    return m_published;
}
void OAIModelState::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIModelState::is_published_Set() const{
    return m_published_isSet;
}

bool OAIModelState::is_published_Valid() const{
    return m_published_isValid;
}

OAIStatus OAIModelState::getValidationError() const {
    return m_validation_error;
}
void OAIModelState::setValidationError(const OAIStatus &validation_error) {
    m_validation_error = validation_error;
    m_validation_error_isSet = true;
}

bool OAIModelState::is_validation_error_Set() const{
    return m_validation_error_isSet;
}

bool OAIModelState::is_validation_error_Valid() const{
    return m_validation_error_isValid;
}

bool OAIModelState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
