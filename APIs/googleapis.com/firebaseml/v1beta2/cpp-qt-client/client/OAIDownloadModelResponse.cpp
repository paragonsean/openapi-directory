/**
 * Firebase ML API
 * Access custom machine learning models hosted via Firebase ML.
 *
 * The version of the OpenAPI document: v1beta2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadModelResponse::OAIDownloadModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadModelResponse::OAIDownloadModelResponse() {
    this->initializeModel();
}

OAIDownloadModelResponse::~OAIDownloadModelResponse() {}

void OAIDownloadModelResponse::initializeModel() {

    m_download_uri_isSet = false;
    m_download_uri_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_model_format_isSet = false;
    m_model_format_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;
}

void OAIDownloadModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadModelResponse::fromJsonObject(QJsonObject json) {

    m_download_uri_isValid = ::OpenAPI::fromJsonValue(m_download_uri, json[QString("downloadUri")]);
    m_download_uri_isSet = !json[QString("downloadUri")].isNull() && m_download_uri_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_model_format_isValid = ::OpenAPI::fromJsonValue(m_model_format, json[QString("modelFormat")]);
    m_model_format_isSet = !json[QString("modelFormat")].isNull() && m_model_format_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("sizeBytes")]);
    m_size_bytes_isSet = !json[QString("sizeBytes")].isNull() && m_size_bytes_isValid;
}

QString OAIDownloadModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_download_uri_isSet) {
        obj.insert(QString("downloadUri"), ::OpenAPI::toJsonValue(m_download_uri));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_model_format_isSet) {
        obj.insert(QString("modelFormat"), ::OpenAPI::toJsonValue(m_model_format));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("sizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    return obj;
}

QString OAIDownloadModelResponse::getDownloadUri() const {
    return m_download_uri;
}
void OAIDownloadModelResponse::setDownloadUri(const QString &download_uri) {
    m_download_uri = download_uri;
    m_download_uri_isSet = true;
}

bool OAIDownloadModelResponse::is_download_uri_Set() const{
    return m_download_uri_isSet;
}

bool OAIDownloadModelResponse::is_download_uri_Valid() const{
    return m_download_uri_isValid;
}

QString OAIDownloadModelResponse::getExpireTime() const {
    return m_expire_time;
}
void OAIDownloadModelResponse::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIDownloadModelResponse::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIDownloadModelResponse::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIDownloadModelResponse::getModelFormat() const {
    return m_model_format;
}
void OAIDownloadModelResponse::setModelFormat(const QString &model_format) {
    m_model_format = model_format;
    m_model_format_isSet = true;
}

bool OAIDownloadModelResponse::is_model_format_Set() const{
    return m_model_format_isSet;
}

bool OAIDownloadModelResponse::is_model_format_Valid() const{
    return m_model_format_isValid;
}

QString OAIDownloadModelResponse::getSizeBytes() const {
    return m_size_bytes;
}
void OAIDownloadModelResponse::setSizeBytes(const QString &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIDownloadModelResponse::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIDownloadModelResponse::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

bool OAIDownloadModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
