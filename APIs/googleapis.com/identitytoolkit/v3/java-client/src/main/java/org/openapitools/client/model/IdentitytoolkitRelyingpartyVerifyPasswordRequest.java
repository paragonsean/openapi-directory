/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to verify the password.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartyVerifyPasswordRequest {
  public static final String SERIALIZED_NAME_CAPTCHA_CHALLENGE = "captchaChallenge";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_CHALLENGE)
  private String captchaChallenge;

  public static final String SERIALIZED_NAME_CAPTCHA_RESPONSE = "captchaResponse";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_RESPONSE)
  private String captchaResponse;

  public static final String SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER = "delegatedProjectNumber";
  @SerializedName(SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER)
  private String delegatedProjectNumber;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PENDING_ID_TOKEN = "pendingIdToken";
  @SerializedName(SERIALIZED_NAME_PENDING_ID_TOKEN)
  private String pendingIdToken;

  public static final String SERIALIZED_NAME_RETURN_SECURE_TOKEN = "returnSecureToken";
  @SerializedName(SERIALIZED_NAME_RETURN_SECURE_TOKEN)
  private Boolean returnSecureToken;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_PROJECT_NUMBER = "tenantProjectNumber";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_NUMBER)
  private String tenantProjectNumber;

  public IdentitytoolkitRelyingpartyVerifyPasswordRequest() {
  }

  public IdentitytoolkitRelyingpartyVerifyPasswordRequest captchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
    return this;
  }

  /**
   * The captcha challenge.
   * @return captchaChallenge
   */
  @javax.annotation.Nullable
  public String getCaptchaChallenge() {
    return captchaChallenge;
  }

  public void setCaptchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest captchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
    return this;
  }

  /**
   * Response to the captcha.
   * @return captchaResponse
   */
  @javax.annotation.Nullable
  public String getCaptchaResponse() {
    return captchaResponse;
  }

  public void setCaptchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest delegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   * @return delegatedProjectNumber
   */
  @javax.annotation.Nullable
  public String getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  public void setDelegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The GITKit token of the authenticated user.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Instance id token of the app.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password inputed by the user.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest pendingIdToken(String pendingIdToken) {
    this.pendingIdToken = pendingIdToken;
    return this;
  }

  /**
   * The GITKit token for the non-trusted IDP, which is to be confirmed by the user.
   * @return pendingIdToken
   */
  @javax.annotation.Nullable
  public String getPendingIdToken() {
    return pendingIdToken;
  }

  public void setPendingIdToken(String pendingIdToken) {
    this.pendingIdToken = pendingIdToken;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest returnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
    return this;
  }

  /**
   * Whether return sts id token and refresh token instead of gitkit token.
   * @return returnSecureToken
   */
  @javax.annotation.Nullable
  public Boolean getReturnSecureToken() {
    return returnSecureToken;
  }

  public void setReturnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public IdentitytoolkitRelyingpartyVerifyPasswordRequest tenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
    return this;
  }

  /**
   * Tenant project number to be used for idp discovery.
   * @return tenantProjectNumber
   */
  @javax.annotation.Nullable
  public String getTenantProjectNumber() {
    return tenantProjectNumber;
  }

  public void setTenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartyVerifyPasswordRequest identitytoolkitRelyingpartyVerifyPasswordRequest = (IdentitytoolkitRelyingpartyVerifyPasswordRequest) o;
    return Objects.equals(this.captchaChallenge, identitytoolkitRelyingpartyVerifyPasswordRequest.captchaChallenge) &&
        Objects.equals(this.captchaResponse, identitytoolkitRelyingpartyVerifyPasswordRequest.captchaResponse) &&
        Objects.equals(this.delegatedProjectNumber, identitytoolkitRelyingpartyVerifyPasswordRequest.delegatedProjectNumber) &&
        Objects.equals(this.email, identitytoolkitRelyingpartyVerifyPasswordRequest.email) &&
        Objects.equals(this.idToken, identitytoolkitRelyingpartyVerifyPasswordRequest.idToken) &&
        Objects.equals(this.instanceId, identitytoolkitRelyingpartyVerifyPasswordRequest.instanceId) &&
        Objects.equals(this.password, identitytoolkitRelyingpartyVerifyPasswordRequest.password) &&
        Objects.equals(this.pendingIdToken, identitytoolkitRelyingpartyVerifyPasswordRequest.pendingIdToken) &&
        Objects.equals(this.returnSecureToken, identitytoolkitRelyingpartyVerifyPasswordRequest.returnSecureToken) &&
        Objects.equals(this.tenantId, identitytoolkitRelyingpartyVerifyPasswordRequest.tenantId) &&
        Objects.equals(this.tenantProjectNumber, identitytoolkitRelyingpartyVerifyPasswordRequest.tenantProjectNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captchaChallenge, captchaResponse, delegatedProjectNumber, email, idToken, instanceId, password, pendingIdToken, returnSecureToken, tenantId, tenantProjectNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartyVerifyPasswordRequest {\n");
    sb.append("    captchaChallenge: ").append(toIndentedString(captchaChallenge)).append("\n");
    sb.append("    captchaResponse: ").append(toIndentedString(captchaResponse)).append("\n");
    sb.append("    delegatedProjectNumber: ").append(toIndentedString(delegatedProjectNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pendingIdToken: ").append(toIndentedString(pendingIdToken)).append("\n");
    sb.append("    returnSecureToken: ").append(toIndentedString(returnSecureToken)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantProjectNumber: ").append(toIndentedString(tenantProjectNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captchaChallenge");
    openapiFields.add("captchaResponse");
    openapiFields.add("delegatedProjectNumber");
    openapiFields.add("email");
    openapiFields.add("idToken");
    openapiFields.add("instanceId");
    openapiFields.add("password");
    openapiFields.add("pendingIdToken");
    openapiFields.add("returnSecureToken");
    openapiFields.add("tenantId");
    openapiFields.add("tenantProjectNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartyVerifyPasswordRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartyVerifyPasswordRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartyVerifyPasswordRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartyVerifyPasswordRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartyVerifyPasswordRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartyVerifyPasswordRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captchaChallenge") != null && !jsonObj.get("captchaChallenge").isJsonNull()) && !jsonObj.get("captchaChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaChallenge").toString()));
      }
      if ((jsonObj.get("captchaResponse") != null && !jsonObj.get("captchaResponse").isJsonNull()) && !jsonObj.get("captchaResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaResponse").toString()));
      }
      if ((jsonObj.get("delegatedProjectNumber") != null && !jsonObj.get("delegatedProjectNumber").isJsonNull()) && !jsonObj.get("delegatedProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegatedProjectNumber").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("pendingIdToken") != null && !jsonObj.get("pendingIdToken").isJsonNull()) && !jsonObj.get("pendingIdToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingIdToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingIdToken").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantProjectNumber") != null && !jsonObj.get("tenantProjectNumber").isJsonNull()) && !jsonObj.get("tenantProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantProjectNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartyVerifyPasswordRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartyVerifyPasswordRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartyVerifyPasswordRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartyVerifyPasswordRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartyVerifyPasswordRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartyVerifyPasswordRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartyVerifyPasswordRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartyVerifyPasswordRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartyVerifyPasswordRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartyVerifyPasswordRequest
   */
  public static IdentitytoolkitRelyingpartyVerifyPasswordRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartyVerifyPasswordRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartyVerifyPasswordRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

