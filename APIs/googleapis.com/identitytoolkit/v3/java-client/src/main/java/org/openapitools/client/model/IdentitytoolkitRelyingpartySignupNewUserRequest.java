/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to signup new user, create anonymous user or anonymous user reauth.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartySignupNewUserRequest {
  public static final String SERIALIZED_NAME_CAPTCHA_CHALLENGE = "captchaChallenge";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_CHALLENGE)
  private String captchaChallenge;

  public static final String SERIALIZED_NAME_CAPTCHA_RESPONSE = "captchaResponse";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_RESPONSE)
  private String captchaResponse;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_PROJECT_NUMBER = "tenantProjectNumber";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_NUMBER)
  private String tenantProjectNumber;

  public IdentitytoolkitRelyingpartySignupNewUserRequest() {
  }

  public IdentitytoolkitRelyingpartySignupNewUserRequest captchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
    return this;
  }

  /**
   * The captcha challenge.
   * @return captchaChallenge
   */
  @javax.annotation.Nullable
  public String getCaptchaChallenge() {
    return captchaChallenge;
  }

  public void setCaptchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest captchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
    return this;
  }

  /**
   * Response to the captcha.
   * @return captchaResponse
   */
  @javax.annotation.Nullable
  public String getCaptchaResponse() {
    return captchaResponse;
  }

  public void setCaptchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether to disable the user. Only can be used by service account.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Mark the email as verified or not. Only can be used by service account.
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The GITKit token of the authenticated user.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Instance id token of the app.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Privileged caller can create user with specified user id.
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The new password of the user.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Privileged caller can create user with specified phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The photo url of the user.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public IdentitytoolkitRelyingpartySignupNewUserRequest tenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
    return this;
  }

  /**
   * Tenant project number to be used for idp discovery.
   * @return tenantProjectNumber
   */
  @javax.annotation.Nullable
  public String getTenantProjectNumber() {
    return tenantProjectNumber;
  }

  public void setTenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartySignupNewUserRequest identitytoolkitRelyingpartySignupNewUserRequest = (IdentitytoolkitRelyingpartySignupNewUserRequest) o;
    return Objects.equals(this.captchaChallenge, identitytoolkitRelyingpartySignupNewUserRequest.captchaChallenge) &&
        Objects.equals(this.captchaResponse, identitytoolkitRelyingpartySignupNewUserRequest.captchaResponse) &&
        Objects.equals(this.disabled, identitytoolkitRelyingpartySignupNewUserRequest.disabled) &&
        Objects.equals(this.displayName, identitytoolkitRelyingpartySignupNewUserRequest.displayName) &&
        Objects.equals(this.email, identitytoolkitRelyingpartySignupNewUserRequest.email) &&
        Objects.equals(this.emailVerified, identitytoolkitRelyingpartySignupNewUserRequest.emailVerified) &&
        Objects.equals(this.idToken, identitytoolkitRelyingpartySignupNewUserRequest.idToken) &&
        Objects.equals(this.instanceId, identitytoolkitRelyingpartySignupNewUserRequest.instanceId) &&
        Objects.equals(this.localId, identitytoolkitRelyingpartySignupNewUserRequest.localId) &&
        Objects.equals(this.password, identitytoolkitRelyingpartySignupNewUserRequest.password) &&
        Objects.equals(this.phoneNumber, identitytoolkitRelyingpartySignupNewUserRequest.phoneNumber) &&
        Objects.equals(this.photoUrl, identitytoolkitRelyingpartySignupNewUserRequest.photoUrl) &&
        Objects.equals(this.tenantId, identitytoolkitRelyingpartySignupNewUserRequest.tenantId) &&
        Objects.equals(this.tenantProjectNumber, identitytoolkitRelyingpartySignupNewUserRequest.tenantProjectNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captchaChallenge, captchaResponse, disabled, displayName, email, emailVerified, idToken, instanceId, localId, password, phoneNumber, photoUrl, tenantId, tenantProjectNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartySignupNewUserRequest {\n");
    sb.append("    captchaChallenge: ").append(toIndentedString(captchaChallenge)).append("\n");
    sb.append("    captchaResponse: ").append(toIndentedString(captchaResponse)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantProjectNumber: ").append(toIndentedString(tenantProjectNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captchaChallenge");
    openapiFields.add("captchaResponse");
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("emailVerified");
    openapiFields.add("idToken");
    openapiFields.add("instanceId");
    openapiFields.add("localId");
    openapiFields.add("password");
    openapiFields.add("phoneNumber");
    openapiFields.add("photoUrl");
    openapiFields.add("tenantId");
    openapiFields.add("tenantProjectNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartySignupNewUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartySignupNewUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartySignupNewUserRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartySignupNewUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartySignupNewUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartySignupNewUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captchaChallenge") != null && !jsonObj.get("captchaChallenge").isJsonNull()) && !jsonObj.get("captchaChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaChallenge").toString()));
      }
      if ((jsonObj.get("captchaResponse") != null && !jsonObj.get("captchaResponse").isJsonNull()) && !jsonObj.get("captchaResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaResponse").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantProjectNumber") != null && !jsonObj.get("tenantProjectNumber").isJsonNull()) && !jsonObj.get("tenantProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantProjectNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartySignupNewUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartySignupNewUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartySignupNewUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartySignupNewUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartySignupNewUserRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartySignupNewUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartySignupNewUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartySignupNewUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartySignupNewUserRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartySignupNewUserRequest
   */
  public static IdentitytoolkitRelyingpartySignupNewUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartySignupNewUserRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartySignupNewUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

