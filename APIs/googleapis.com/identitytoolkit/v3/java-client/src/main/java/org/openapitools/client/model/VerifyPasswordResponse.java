/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request of verifying the password.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyPasswordResponse {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "identitytoolkit#VerifyPasswordResponse";

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_OAUTH_ACCESS_TOKEN = "oauthAccessToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_ACCESS_TOKEN)
  private String oauthAccessToken;

  public static final String SERIALIZED_NAME_OAUTH_AUTHORIZATION_CODE = "oauthAuthorizationCode";
  @SerializedName(SERIALIZED_NAME_OAUTH_AUTHORIZATION_CODE)
  private String oauthAuthorizationCode;

  public static final String SERIALIZED_NAME_OAUTH_EXPIRE_IN = "oauthExpireIn";
  @SerializedName(SERIALIZED_NAME_OAUTH_EXPIRE_IN)
  private Integer oauthExpireIn;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private Boolean registered;

  public VerifyPasswordResponse() {
  }

  public VerifyPasswordResponse displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public VerifyPasswordResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email returned by the IdP. NOTE: The federated login user may not own the email.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public VerifyPasswordResponse expiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public String getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public VerifyPasswordResponse idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The GITKit token for authenticated user.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public VerifyPasswordResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The fixed string \&quot;identitytoolkit#VerifyPasswordResponse\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public VerifyPasswordResponse localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * The RP local ID if it&#39;s already been mapped to the IdP account identified by the federated ID.
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public VerifyPasswordResponse oauthAccessToken(String oauthAccessToken) {
    this.oauthAccessToken = oauthAccessToken;
    return this;
  }

  /**
   * The OAuth2 access token.
   * @return oauthAccessToken
   */
  @javax.annotation.Nullable
  public String getOauthAccessToken() {
    return oauthAccessToken;
  }

  public void setOauthAccessToken(String oauthAccessToken) {
    this.oauthAccessToken = oauthAccessToken;
  }


  public VerifyPasswordResponse oauthAuthorizationCode(String oauthAuthorizationCode) {
    this.oauthAuthorizationCode = oauthAuthorizationCode;
    return this;
  }

  /**
   * The OAuth2 authorization code.
   * @return oauthAuthorizationCode
   */
  @javax.annotation.Nullable
  public String getOauthAuthorizationCode() {
    return oauthAuthorizationCode;
  }

  public void setOauthAuthorizationCode(String oauthAuthorizationCode) {
    this.oauthAuthorizationCode = oauthAuthorizationCode;
  }


  public VerifyPasswordResponse oauthExpireIn(Integer oauthExpireIn) {
    this.oauthExpireIn = oauthExpireIn;
    return this;
  }

  /**
   * The lifetime in seconds of the OAuth2 access token.
   * @return oauthExpireIn
   */
  @javax.annotation.Nullable
  public Integer getOauthExpireIn() {
    return oauthExpireIn;
  }

  public void setOauthExpireIn(Integer oauthExpireIn) {
    this.oauthExpireIn = oauthExpireIn;
  }


  public VerifyPasswordResponse photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The URI of the user&#39;s photo at IdP
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public VerifyPasswordResponse refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * If idToken is STS id token, then this field will be refresh token.
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public VerifyPasswordResponse registered(Boolean registered) {
    this.registered = registered;
    return this;
  }

  /**
   * Whether the email is registered.
   * @return registered
   */
  @javax.annotation.Nullable
  public Boolean getRegistered() {
    return registered;
  }

  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyPasswordResponse verifyPasswordResponse = (VerifyPasswordResponse) o;
    return Objects.equals(this.displayName, verifyPasswordResponse.displayName) &&
        Objects.equals(this.email, verifyPasswordResponse.email) &&
        Objects.equals(this.expiresIn, verifyPasswordResponse.expiresIn) &&
        Objects.equals(this.idToken, verifyPasswordResponse.idToken) &&
        Objects.equals(this.kind, verifyPasswordResponse.kind) &&
        Objects.equals(this.localId, verifyPasswordResponse.localId) &&
        Objects.equals(this.oauthAccessToken, verifyPasswordResponse.oauthAccessToken) &&
        Objects.equals(this.oauthAuthorizationCode, verifyPasswordResponse.oauthAuthorizationCode) &&
        Objects.equals(this.oauthExpireIn, verifyPasswordResponse.oauthExpireIn) &&
        Objects.equals(this.photoUrl, verifyPasswordResponse.photoUrl) &&
        Objects.equals(this.refreshToken, verifyPasswordResponse.refreshToken) &&
        Objects.equals(this.registered, verifyPasswordResponse.registered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, email, expiresIn, idToken, kind, localId, oauthAccessToken, oauthAuthorizationCode, oauthExpireIn, photoUrl, refreshToken, registered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyPasswordResponse {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    oauthAccessToken: ").append(toIndentedString(oauthAccessToken)).append("\n");
    sb.append("    oauthAuthorizationCode: ").append(toIndentedString(oauthAuthorizationCode)).append("\n");
    sb.append("    oauthExpireIn: ").append(toIndentedString(oauthExpireIn)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("expiresIn");
    openapiFields.add("idToken");
    openapiFields.add("kind");
    openapiFields.add("localId");
    openapiFields.add("oauthAccessToken");
    openapiFields.add("oauthAuthorizationCode");
    openapiFields.add("oauthExpireIn");
    openapiFields.add("photoUrl");
    openapiFields.add("refreshToken");
    openapiFields.add("registered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyPasswordResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyPasswordResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyPasswordResponse is not found in the empty JSON string", VerifyPasswordResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyPasswordResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyPasswordResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("expiresIn") != null && !jsonObj.get("expiresIn").isJsonNull()) && !jsonObj.get("expiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresIn").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("oauthAccessToken") != null && !jsonObj.get("oauthAccessToken").isJsonNull()) && !jsonObj.get("oauthAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthAccessToken").toString()));
      }
      if ((jsonObj.get("oauthAuthorizationCode") != null && !jsonObj.get("oauthAuthorizationCode").isJsonNull()) && !jsonObj.get("oauthAuthorizationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthAuthorizationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthAuthorizationCode").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      if ((jsonObj.get("refreshToken") != null && !jsonObj.get("refreshToken").isJsonNull()) && !jsonObj.get("refreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyPasswordResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyPasswordResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyPasswordResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyPasswordResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyPasswordResponse>() {
           @Override
           public void write(JsonWriter out, VerifyPasswordResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyPasswordResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyPasswordResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyPasswordResponse
   * @throws IOException if the JSON string is invalid with respect to VerifyPasswordResponse
   */
  public static VerifyPasswordResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyPasswordResponse.class);
  }

  /**
   * Convert an instance of VerifyPasswordResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

