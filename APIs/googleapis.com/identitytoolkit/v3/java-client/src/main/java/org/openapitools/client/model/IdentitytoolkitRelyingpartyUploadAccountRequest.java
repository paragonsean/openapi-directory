/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to upload user account in batch.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartyUploadAccountRequest {
  public static final String SERIALIZED_NAME_ALLOW_OVERWRITE = "allowOverwrite";
  @SerializedName(SERIALIZED_NAME_ALLOW_OVERWRITE)
  private Boolean allowOverwrite;

  public static final String SERIALIZED_NAME_BLOCK_SIZE = "blockSize";
  @SerializedName(SERIALIZED_NAME_BLOCK_SIZE)
  private Integer blockSize;

  public static final String SERIALIZED_NAME_CPU_MEM_COST = "cpuMemCost";
  @SerializedName(SERIALIZED_NAME_CPU_MEM_COST)
  private Integer cpuMemCost;

  public static final String SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER = "delegatedProjectNumber";
  @SerializedName(SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER)
  private String delegatedProjectNumber;

  public static final String SERIALIZED_NAME_DK_LEN = "dkLen";
  @SerializedName(SERIALIZED_NAME_DK_LEN)
  private Integer dkLen;

  public static final String SERIALIZED_NAME_HASH_ALGORITHM = "hashAlgorithm";
  @SerializedName(SERIALIZED_NAME_HASH_ALGORITHM)
  private String hashAlgorithm;

  public static final String SERIALIZED_NAME_MEMORY_COST = "memoryCost";
  @SerializedName(SERIALIZED_NAME_MEMORY_COST)
  private Integer memoryCost;

  public static final String SERIALIZED_NAME_PARALLELIZATION = "parallelization";
  @SerializedName(SERIALIZED_NAME_PARALLELIZATION)
  private Integer parallelization;

  public static final String SERIALIZED_NAME_ROUNDS = "rounds";
  @SerializedName(SERIALIZED_NAME_ROUNDS)
  private Integer rounds;

  public static final String SERIALIZED_NAME_SALT_SEPARATOR = "saltSeparator";
  @SerializedName(SERIALIZED_NAME_SALT_SEPARATOR)
  private byte[] saltSeparator;

  public static final String SERIALIZED_NAME_SANITY_CHECK = "sanityCheck";
  @SerializedName(SERIALIZED_NAME_SANITY_CHECK)
  private Boolean sanityCheck;

  public static final String SERIALIZED_NAME_SIGNER_KEY = "signerKey";
  @SerializedName(SERIALIZED_NAME_SIGNER_KEY)
  private byte[] signerKey;

  public static final String SERIALIZED_NAME_TARGET_PROJECT_ID = "targetProjectId";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT_ID)
  private String targetProjectId;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<UserInfo> users = new ArrayList<>();

  public IdentitytoolkitRelyingpartyUploadAccountRequest() {
  }

  public IdentitytoolkitRelyingpartyUploadAccountRequest allowOverwrite(Boolean allowOverwrite) {
    this.allowOverwrite = allowOverwrite;
    return this;
  }

  /**
   * Whether allow overwrite existing account when user local_id exists.
   * @return allowOverwrite
   */
  @javax.annotation.Nullable
  public Boolean getAllowOverwrite() {
    return allowOverwrite;
  }

  public void setAllowOverwrite(Boolean allowOverwrite) {
    this.allowOverwrite = allowOverwrite;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest blockSize(Integer blockSize) {
    this.blockSize = blockSize;
    return this;
  }

  /**
   * Get blockSize
   * @return blockSize
   */
  @javax.annotation.Nullable
  public Integer getBlockSize() {
    return blockSize;
  }

  public void setBlockSize(Integer blockSize) {
    this.blockSize = blockSize;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest cpuMemCost(Integer cpuMemCost) {
    this.cpuMemCost = cpuMemCost;
    return this;
  }

  /**
   * The following 4 fields are for standard scrypt algorithm.
   * @return cpuMemCost
   */
  @javax.annotation.Nullable
  public Integer getCpuMemCost() {
    return cpuMemCost;
  }

  public void setCpuMemCost(Integer cpuMemCost) {
    this.cpuMemCost = cpuMemCost;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest delegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   * @return delegatedProjectNumber
   */
  @javax.annotation.Nullable
  public String getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  public void setDelegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest dkLen(Integer dkLen) {
    this.dkLen = dkLen;
    return this;
  }

  /**
   * Get dkLen
   * @return dkLen
   */
  @javax.annotation.Nullable
  public Integer getDkLen() {
    return dkLen;
  }

  public void setDkLen(Integer dkLen) {
    this.dkLen = dkLen;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest hashAlgorithm(String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
    return this;
  }

  /**
   * The password hash algorithm.
   * @return hashAlgorithm
   */
  @javax.annotation.Nullable
  public String getHashAlgorithm() {
    return hashAlgorithm;
  }

  public void setHashAlgorithm(String hashAlgorithm) {
    this.hashAlgorithm = hashAlgorithm;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest memoryCost(Integer memoryCost) {
    this.memoryCost = memoryCost;
    return this;
  }

  /**
   * Memory cost for hash calculation. Used by scrypt similar algorithms.
   * @return memoryCost
   */
  @javax.annotation.Nullable
  public Integer getMemoryCost() {
    return memoryCost;
  }

  public void setMemoryCost(Integer memoryCost) {
    this.memoryCost = memoryCost;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest parallelization(Integer parallelization) {
    this.parallelization = parallelization;
    return this;
  }

  /**
   * Get parallelization
   * @return parallelization
   */
  @javax.annotation.Nullable
  public Integer getParallelization() {
    return parallelization;
  }

  public void setParallelization(Integer parallelization) {
    this.parallelization = parallelization;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest rounds(Integer rounds) {
    this.rounds = rounds;
    return this;
  }

  /**
   * Rounds for hash calculation. Used by scrypt and similar algorithms.
   * @return rounds
   */
  @javax.annotation.Nullable
  public Integer getRounds() {
    return rounds;
  }

  public void setRounds(Integer rounds) {
    this.rounds = rounds;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest saltSeparator(byte[] saltSeparator) {
    this.saltSeparator = saltSeparator;
    return this;
  }

  /**
   * The salt separator.
   * @return saltSeparator
   */
  @javax.annotation.Nullable
  public byte[] getSaltSeparator() {
    return saltSeparator;
  }

  public void setSaltSeparator(byte[] saltSeparator) {
    this.saltSeparator = saltSeparator;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest sanityCheck(Boolean sanityCheck) {
    this.sanityCheck = sanityCheck;
    return this;
  }

  /**
   * If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
   * @return sanityCheck
   */
  @javax.annotation.Nullable
  public Boolean getSanityCheck() {
    return sanityCheck;
  }

  public void setSanityCheck(Boolean sanityCheck) {
    this.sanityCheck = sanityCheck;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest signerKey(byte[] signerKey) {
    this.signerKey = signerKey;
    return this;
  }

  /**
   * The key for to hash the password.
   * @return signerKey
   */
  @javax.annotation.Nullable
  public byte[] getSignerKey() {
    return signerKey;
  }

  public void setSignerKey(byte[] signerKey) {
    this.signerKey = signerKey;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest targetProjectId(String targetProjectId) {
    this.targetProjectId = targetProjectId;
    return this;
  }

  /**
   * Specify which project (field value is actually project id) to operate. Only used when provided credential.
   * @return targetProjectId
   */
  @javax.annotation.Nullable
  public String getTargetProjectId() {
    return targetProjectId;
  }

  public void setTargetProjectId(String targetProjectId) {
    this.targetProjectId = targetProjectId;
  }


  public IdentitytoolkitRelyingpartyUploadAccountRequest users(List<UserInfo> users) {
    this.users = users;
    return this;
  }

  public IdentitytoolkitRelyingpartyUploadAccountRequest addUsersItem(UserInfo usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * The account info to be stored.
   * @return users
   */
  @javax.annotation.Nullable
  public List<UserInfo> getUsers() {
    return users;
  }

  public void setUsers(List<UserInfo> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartyUploadAccountRequest identitytoolkitRelyingpartyUploadAccountRequest = (IdentitytoolkitRelyingpartyUploadAccountRequest) o;
    return Objects.equals(this.allowOverwrite, identitytoolkitRelyingpartyUploadAccountRequest.allowOverwrite) &&
        Objects.equals(this.blockSize, identitytoolkitRelyingpartyUploadAccountRequest.blockSize) &&
        Objects.equals(this.cpuMemCost, identitytoolkitRelyingpartyUploadAccountRequest.cpuMemCost) &&
        Objects.equals(this.delegatedProjectNumber, identitytoolkitRelyingpartyUploadAccountRequest.delegatedProjectNumber) &&
        Objects.equals(this.dkLen, identitytoolkitRelyingpartyUploadAccountRequest.dkLen) &&
        Objects.equals(this.hashAlgorithm, identitytoolkitRelyingpartyUploadAccountRequest.hashAlgorithm) &&
        Objects.equals(this.memoryCost, identitytoolkitRelyingpartyUploadAccountRequest.memoryCost) &&
        Objects.equals(this.parallelization, identitytoolkitRelyingpartyUploadAccountRequest.parallelization) &&
        Objects.equals(this.rounds, identitytoolkitRelyingpartyUploadAccountRequest.rounds) &&
        Arrays.equals(this.saltSeparator, identitytoolkitRelyingpartyUploadAccountRequest.saltSeparator) &&
        Objects.equals(this.sanityCheck, identitytoolkitRelyingpartyUploadAccountRequest.sanityCheck) &&
        Arrays.equals(this.signerKey, identitytoolkitRelyingpartyUploadAccountRequest.signerKey) &&
        Objects.equals(this.targetProjectId, identitytoolkitRelyingpartyUploadAccountRequest.targetProjectId) &&
        Objects.equals(this.users, identitytoolkitRelyingpartyUploadAccountRequest.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowOverwrite, blockSize, cpuMemCost, delegatedProjectNumber, dkLen, hashAlgorithm, memoryCost, parallelization, rounds, Arrays.hashCode(saltSeparator), sanityCheck, Arrays.hashCode(signerKey), targetProjectId, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartyUploadAccountRequest {\n");
    sb.append("    allowOverwrite: ").append(toIndentedString(allowOverwrite)).append("\n");
    sb.append("    blockSize: ").append(toIndentedString(blockSize)).append("\n");
    sb.append("    cpuMemCost: ").append(toIndentedString(cpuMemCost)).append("\n");
    sb.append("    delegatedProjectNumber: ").append(toIndentedString(delegatedProjectNumber)).append("\n");
    sb.append("    dkLen: ").append(toIndentedString(dkLen)).append("\n");
    sb.append("    hashAlgorithm: ").append(toIndentedString(hashAlgorithm)).append("\n");
    sb.append("    memoryCost: ").append(toIndentedString(memoryCost)).append("\n");
    sb.append("    parallelization: ").append(toIndentedString(parallelization)).append("\n");
    sb.append("    rounds: ").append(toIndentedString(rounds)).append("\n");
    sb.append("    saltSeparator: ").append(toIndentedString(saltSeparator)).append("\n");
    sb.append("    sanityCheck: ").append(toIndentedString(sanityCheck)).append("\n");
    sb.append("    signerKey: ").append(toIndentedString(signerKey)).append("\n");
    sb.append("    targetProjectId: ").append(toIndentedString(targetProjectId)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowOverwrite");
    openapiFields.add("blockSize");
    openapiFields.add("cpuMemCost");
    openapiFields.add("delegatedProjectNumber");
    openapiFields.add("dkLen");
    openapiFields.add("hashAlgorithm");
    openapiFields.add("memoryCost");
    openapiFields.add("parallelization");
    openapiFields.add("rounds");
    openapiFields.add("saltSeparator");
    openapiFields.add("sanityCheck");
    openapiFields.add("signerKey");
    openapiFields.add("targetProjectId");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartyUploadAccountRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartyUploadAccountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartyUploadAccountRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartyUploadAccountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartyUploadAccountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartyUploadAccountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delegatedProjectNumber") != null && !jsonObj.get("delegatedProjectNumber").isJsonNull()) && !jsonObj.get("delegatedProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegatedProjectNumber").toString()));
      }
      if ((jsonObj.get("hashAlgorithm") != null && !jsonObj.get("hashAlgorithm").isJsonNull()) && !jsonObj.get("hashAlgorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hashAlgorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hashAlgorithm").toString()));
      }
      if ((jsonObj.get("targetProjectId") != null && !jsonObj.get("targetProjectId").isJsonNull()) && !jsonObj.get("targetProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProjectId").toString()));
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            UserInfo.validateJsonElement(jsonArrayusers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartyUploadAccountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartyUploadAccountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartyUploadAccountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartyUploadAccountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartyUploadAccountRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartyUploadAccountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartyUploadAccountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartyUploadAccountRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartyUploadAccountRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartyUploadAccountRequest
   */
  public static IdentitytoolkitRelyingpartyUploadAccountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartyUploadAccountRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartyUploadAccountRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

