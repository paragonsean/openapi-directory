/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to get the IDP authentication URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartyCreateAuthUriRequest {
  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_AUTH_FLOW_TYPE = "authFlowType";
  @SerializedName(SERIALIZED_NAME_AUTH_FLOW_TYPE)
  private String authFlowType;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_CONTINUE_URI = "continueUri";
  @SerializedName(SERIALIZED_NAME_CONTINUE_URI)
  private String continueUri;

  public static final String SERIALIZED_NAME_CUSTOM_PARAMETER = "customParameter";
  @SerializedName(SERIALIZED_NAME_CUSTOM_PARAMETER)
  private Map<String, String> customParameter = new HashMap<>();

  public static final String SERIALIZED_NAME_HOSTED_DOMAIN = "hostedDomain";
  @SerializedName(SERIALIZED_NAME_HOSTED_DOMAIN)
  private String hostedDomain;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_OAUTH_CONSUMER_KEY = "oauthConsumerKey";
  @SerializedName(SERIALIZED_NAME_OAUTH_CONSUMER_KEY)
  private String oauthConsumerKey;

  public static final String SERIALIZED_NAME_OAUTH_SCOPE = "oauthScope";
  @SerializedName(SERIALIZED_NAME_OAUTH_SCOPE)
  private String oauthScope;

  public static final String SERIALIZED_NAME_OPENID_REALM = "openidRealm";
  @SerializedName(SERIALIZED_NAME_OPENID_REALM)
  private String openidRealm;

  public static final String SERIALIZED_NAME_OTA_APP = "otaApp";
  @SerializedName(SERIALIZED_NAME_OTA_APP)
  private String otaApp;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_PROJECT_NUMBER = "tenantProjectNumber";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_NUMBER)
  private String tenantProjectNumber;

  public IdentitytoolkitRelyingpartyCreateAuthUriRequest() {
  }

  public IdentitytoolkitRelyingpartyCreateAuthUriRequest appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest authFlowType(String authFlowType) {
    this.authFlowType = authFlowType;
    return this;
  }

  /**
   * Explicitly specify the auth flow type. Currently only support \&quot;CODE_FLOW\&quot; type. The field is only used for Google provider.
   * @return authFlowType
   */
  @javax.annotation.Nullable
  public String getAuthFlowType() {
    return authFlowType;
  }

  public void setAuthFlowType(String authFlowType) {
    this.authFlowType = authFlowType;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The relying party OAuth client ID.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest context(String context) {
    this.context = context;
    return this;
  }

  /**
   * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
   * @return context
   */
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest continueUri(String continueUri) {
    this.continueUri = continueUri;
    return this;
  }

  /**
   * The URI to which the IDP redirects the user after the federated login flow.
   * @return continueUri
   */
  @javax.annotation.Nullable
  public String getContinueUri() {
    return continueUri;
  }

  public void setContinueUri(String continueUri) {
    this.continueUri = continueUri;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest customParameter(Map<String, String> customParameter) {
    this.customParameter = customParameter;
    return this;
  }

  public IdentitytoolkitRelyingpartyCreateAuthUriRequest putCustomParameterItem(String key, String customParameterItem) {
    if (this.customParameter == null) {
      this.customParameter = new HashMap<>();
    }
    this.customParameter.put(key, customParameterItem);
    return this;
  }

  /**
   * The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
   * @return customParameter
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomParameter() {
    return customParameter;
  }

  public void setCustomParameter(Map<String, String> customParameter) {
    this.customParameter = customParameter;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest hostedDomain(String hostedDomain) {
    this.hostedDomain = hostedDomain;
    return this;
  }

  /**
   * The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
   * @return hostedDomain
   */
  @javax.annotation.Nullable
  public String getHostedDomain() {
    return hostedDomain;
  }

  public void setHostedDomain(String hostedDomain) {
    this.hostedDomain = hostedDomain;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * The email or federated ID of the user.
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest oauthConsumerKey(String oauthConsumerKey) {
    this.oauthConsumerKey = oauthConsumerKey;
    return this;
  }

  /**
   * The developer&#39;s consumer key for OpenId OAuth Extension
   * @return oauthConsumerKey
   */
  @javax.annotation.Nullable
  public String getOauthConsumerKey() {
    return oauthConsumerKey;
  }

  public void setOauthConsumerKey(String oauthConsumerKey) {
    this.oauthConsumerKey = oauthConsumerKey;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest oauthScope(String oauthScope) {
    this.oauthScope = oauthScope;
    return this;
  }

  /**
   * Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
   * @return oauthScope
   */
  @javax.annotation.Nullable
  public String getOauthScope() {
    return oauthScope;
  }

  public void setOauthScope(String oauthScope) {
    this.oauthScope = oauthScope;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest openidRealm(String openidRealm) {
    this.openidRealm = openidRealm;
    return this;
  }

  /**
   * Optional realm for OpenID protocol. The sub string \&quot;scheme://domain:port\&quot; of the param \&quot;continueUri\&quot; is used if this is not set.
   * @return openidRealm
   */
  @javax.annotation.Nullable
  public String getOpenidRealm() {
    return openidRealm;
  }

  public void setOpenidRealm(String openidRealm) {
    this.openidRealm = openidRealm;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest otaApp(String otaApp) {
    this.otaApp = otaApp;
    return this;
  }

  /**
   * The native app package for OTA installation.
   * @return otaApp
   */
  @javax.annotation.Nullable
  public String getOtaApp() {
    return otaApp;
  }

  public void setOtaApp(String otaApp) {
    this.otaApp = otaApp;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The IdP ID. For white listed IdPs it&#39;s a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it&#39;s the OP identifier.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * The session_id passed by client.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public IdentitytoolkitRelyingpartyCreateAuthUriRequest tenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
    return this;
  }

  /**
   * Tenant project number to be used for idp discovery.
   * @return tenantProjectNumber
   */
  @javax.annotation.Nullable
  public String getTenantProjectNumber() {
    return tenantProjectNumber;
  }

  public void setTenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartyCreateAuthUriRequest identitytoolkitRelyingpartyCreateAuthUriRequest = (IdentitytoolkitRelyingpartyCreateAuthUriRequest) o;
    return Objects.equals(this.appId, identitytoolkitRelyingpartyCreateAuthUriRequest.appId) &&
        Objects.equals(this.authFlowType, identitytoolkitRelyingpartyCreateAuthUriRequest.authFlowType) &&
        Objects.equals(this.clientId, identitytoolkitRelyingpartyCreateAuthUriRequest.clientId) &&
        Objects.equals(this.context, identitytoolkitRelyingpartyCreateAuthUriRequest.context) &&
        Objects.equals(this.continueUri, identitytoolkitRelyingpartyCreateAuthUriRequest.continueUri) &&
        Objects.equals(this.customParameter, identitytoolkitRelyingpartyCreateAuthUriRequest.customParameter) &&
        Objects.equals(this.hostedDomain, identitytoolkitRelyingpartyCreateAuthUriRequest.hostedDomain) &&
        Objects.equals(this.identifier, identitytoolkitRelyingpartyCreateAuthUriRequest.identifier) &&
        Objects.equals(this.oauthConsumerKey, identitytoolkitRelyingpartyCreateAuthUriRequest.oauthConsumerKey) &&
        Objects.equals(this.oauthScope, identitytoolkitRelyingpartyCreateAuthUriRequest.oauthScope) &&
        Objects.equals(this.openidRealm, identitytoolkitRelyingpartyCreateAuthUriRequest.openidRealm) &&
        Objects.equals(this.otaApp, identitytoolkitRelyingpartyCreateAuthUriRequest.otaApp) &&
        Objects.equals(this.providerId, identitytoolkitRelyingpartyCreateAuthUriRequest.providerId) &&
        Objects.equals(this.sessionId, identitytoolkitRelyingpartyCreateAuthUriRequest.sessionId) &&
        Objects.equals(this.tenantId, identitytoolkitRelyingpartyCreateAuthUriRequest.tenantId) &&
        Objects.equals(this.tenantProjectNumber, identitytoolkitRelyingpartyCreateAuthUriRequest.tenantProjectNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, authFlowType, clientId, context, continueUri, customParameter, hostedDomain, identifier, oauthConsumerKey, oauthScope, openidRealm, otaApp, providerId, sessionId, tenantId, tenantProjectNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartyCreateAuthUriRequest {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    authFlowType: ").append(toIndentedString(authFlowType)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    continueUri: ").append(toIndentedString(continueUri)).append("\n");
    sb.append("    customParameter: ").append(toIndentedString(customParameter)).append("\n");
    sb.append("    hostedDomain: ").append(toIndentedString(hostedDomain)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    oauthConsumerKey: ").append(toIndentedString(oauthConsumerKey)).append("\n");
    sb.append("    oauthScope: ").append(toIndentedString(oauthScope)).append("\n");
    sb.append("    openidRealm: ").append(toIndentedString(openidRealm)).append("\n");
    sb.append("    otaApp: ").append(toIndentedString(otaApp)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantProjectNumber: ").append(toIndentedString(tenantProjectNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appId");
    openapiFields.add("authFlowType");
    openapiFields.add("clientId");
    openapiFields.add("context");
    openapiFields.add("continueUri");
    openapiFields.add("customParameter");
    openapiFields.add("hostedDomain");
    openapiFields.add("identifier");
    openapiFields.add("oauthConsumerKey");
    openapiFields.add("oauthScope");
    openapiFields.add("openidRealm");
    openapiFields.add("otaApp");
    openapiFields.add("providerId");
    openapiFields.add("sessionId");
    openapiFields.add("tenantId");
    openapiFields.add("tenantProjectNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartyCreateAuthUriRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartyCreateAuthUriRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartyCreateAuthUriRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartyCreateAuthUriRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartyCreateAuthUriRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartyCreateAuthUriRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("authFlowType") != null && !jsonObj.get("authFlowType").isJsonNull()) && !jsonObj.get("authFlowType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authFlowType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authFlowType").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("continueUri") != null && !jsonObj.get("continueUri").isJsonNull()) && !jsonObj.get("continueUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continueUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continueUri").toString()));
      }
      if ((jsonObj.get("hostedDomain") != null && !jsonObj.get("hostedDomain").isJsonNull()) && !jsonObj.get("hostedDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostedDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostedDomain").toString()));
      }
      if ((jsonObj.get("identifier") != null && !jsonObj.get("identifier").isJsonNull()) && !jsonObj.get("identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifier").toString()));
      }
      if ((jsonObj.get("oauthConsumerKey") != null && !jsonObj.get("oauthConsumerKey").isJsonNull()) && !jsonObj.get("oauthConsumerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthConsumerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthConsumerKey").toString()));
      }
      if ((jsonObj.get("oauthScope") != null && !jsonObj.get("oauthScope").isJsonNull()) && !jsonObj.get("oauthScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthScope").toString()));
      }
      if ((jsonObj.get("openidRealm") != null && !jsonObj.get("openidRealm").isJsonNull()) && !jsonObj.get("openidRealm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openidRealm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openidRealm").toString()));
      }
      if ((jsonObj.get("otaApp") != null && !jsonObj.get("otaApp").isJsonNull()) && !jsonObj.get("otaApp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otaApp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otaApp").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantProjectNumber") != null && !jsonObj.get("tenantProjectNumber").isJsonNull()) && !jsonObj.get("tenantProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantProjectNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartyCreateAuthUriRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartyCreateAuthUriRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartyCreateAuthUriRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartyCreateAuthUriRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartyCreateAuthUriRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartyCreateAuthUriRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartyCreateAuthUriRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartyCreateAuthUriRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartyCreateAuthUriRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartyCreateAuthUriRequest
   */
  public static IdentitytoolkitRelyingpartyCreateAuthUriRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartyCreateAuthUriRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartyCreateAuthUriRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

