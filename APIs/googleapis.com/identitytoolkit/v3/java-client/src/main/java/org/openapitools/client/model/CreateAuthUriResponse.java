/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response of creating the IDP authentication URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAuthUriResponse {
  public static final String SERIALIZED_NAME_ALL_PROVIDERS = "allProviders";
  @SerializedName(SERIALIZED_NAME_ALL_PROVIDERS)
  private List<String> allProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTH_URI = "authUri";
  @SerializedName(SERIALIZED_NAME_AUTH_URI)
  private String authUri;

  public static final String SERIALIZED_NAME_CAPTCHA_REQUIRED = "captchaRequired";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_REQUIRED)
  private Boolean captchaRequired;

  public static final String SERIALIZED_NAME_FOR_EXISTING_PROVIDER = "forExistingProvider";
  @SerializedName(SERIALIZED_NAME_FOR_EXISTING_PROVIDER)
  private Boolean forExistingProvider;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "identitytoolkit#CreateAuthUriResponse";

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private Boolean registered;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SIGNIN_METHODS = "signinMethods";
  @SerializedName(SERIALIZED_NAME_SIGNIN_METHODS)
  private List<String> signinMethods = new ArrayList<>();

  public CreateAuthUriResponse() {
  }

  public CreateAuthUriResponse allProviders(List<String> allProviders) {
    this.allProviders = allProviders;
    return this;
  }

  public CreateAuthUriResponse addAllProvidersItem(String allProvidersItem) {
    if (this.allProviders == null) {
      this.allProviders = new ArrayList<>();
    }
    this.allProviders.add(allProvidersItem);
    return this;
  }

  /**
   * all providers the user has once used to do federated login
   * @return allProviders
   */
  @javax.annotation.Nullable
  public List<String> getAllProviders() {
    return allProviders;
  }

  public void setAllProviders(List<String> allProviders) {
    this.allProviders = allProviders;
  }


  public CreateAuthUriResponse authUri(String authUri) {
    this.authUri = authUri;
    return this;
  }

  /**
   * The URI used by the IDP to authenticate the user.
   * @return authUri
   */
  @javax.annotation.Nullable
  public String getAuthUri() {
    return authUri;
  }

  public void setAuthUri(String authUri) {
    this.authUri = authUri;
  }


  public CreateAuthUriResponse captchaRequired(Boolean captchaRequired) {
    this.captchaRequired = captchaRequired;
    return this;
  }

  /**
   * True if captcha is required.
   * @return captchaRequired
   */
  @javax.annotation.Nullable
  public Boolean getCaptchaRequired() {
    return captchaRequired;
  }

  public void setCaptchaRequired(Boolean captchaRequired) {
    this.captchaRequired = captchaRequired;
  }


  public CreateAuthUriResponse forExistingProvider(Boolean forExistingProvider) {
    this.forExistingProvider = forExistingProvider;
    return this;
  }

  /**
   * True if the authUri is for user&#39;s existing provider.
   * @return forExistingProvider
   */
  @javax.annotation.Nullable
  public Boolean getForExistingProvider() {
    return forExistingProvider;
  }

  public void setForExistingProvider(Boolean forExistingProvider) {
    this.forExistingProvider = forExistingProvider;
  }


  public CreateAuthUriResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The fixed string identitytoolkit#CreateAuthUriResponse\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CreateAuthUriResponse providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The provider ID of the auth URI.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public CreateAuthUriResponse registered(Boolean registered) {
    this.registered = registered;
    return this;
  }

  /**
   * Whether the user is registered if the identifier is an email.
   * @return registered
   */
  @javax.annotation.Nullable
  public Boolean getRegistered() {
    return registered;
  }

  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }


  public CreateAuthUriResponse sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Session ID which should be passed in the following verifyAssertion request.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public CreateAuthUriResponse signinMethods(List<String> signinMethods) {
    this.signinMethods = signinMethods;
    return this;
  }

  public CreateAuthUriResponse addSigninMethodsItem(String signinMethodsItem) {
    if (this.signinMethods == null) {
      this.signinMethods = new ArrayList<>();
    }
    this.signinMethods.add(signinMethodsItem);
    return this;
  }

  /**
   * All sign-in methods this user has used.
   * @return signinMethods
   */
  @javax.annotation.Nullable
  public List<String> getSigninMethods() {
    return signinMethods;
  }

  public void setSigninMethods(List<String> signinMethods) {
    this.signinMethods = signinMethods;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAuthUriResponse createAuthUriResponse = (CreateAuthUriResponse) o;
    return Objects.equals(this.allProviders, createAuthUriResponse.allProviders) &&
        Objects.equals(this.authUri, createAuthUriResponse.authUri) &&
        Objects.equals(this.captchaRequired, createAuthUriResponse.captchaRequired) &&
        Objects.equals(this.forExistingProvider, createAuthUriResponse.forExistingProvider) &&
        Objects.equals(this.kind, createAuthUriResponse.kind) &&
        Objects.equals(this.providerId, createAuthUriResponse.providerId) &&
        Objects.equals(this.registered, createAuthUriResponse.registered) &&
        Objects.equals(this.sessionId, createAuthUriResponse.sessionId) &&
        Objects.equals(this.signinMethods, createAuthUriResponse.signinMethods);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allProviders, authUri, captchaRequired, forExistingProvider, kind, providerId, registered, sessionId, signinMethods);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAuthUriResponse {\n");
    sb.append("    allProviders: ").append(toIndentedString(allProviders)).append("\n");
    sb.append("    authUri: ").append(toIndentedString(authUri)).append("\n");
    sb.append("    captchaRequired: ").append(toIndentedString(captchaRequired)).append("\n");
    sb.append("    forExistingProvider: ").append(toIndentedString(forExistingProvider)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    signinMethods: ").append(toIndentedString(signinMethods)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allProviders");
    openapiFields.add("authUri");
    openapiFields.add("captchaRequired");
    openapiFields.add("forExistingProvider");
    openapiFields.add("kind");
    openapiFields.add("providerId");
    openapiFields.add("registered");
    openapiFields.add("sessionId");
    openapiFields.add("signinMethods");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAuthUriResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAuthUriResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAuthUriResponse is not found in the empty JSON string", CreateAuthUriResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAuthUriResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAuthUriResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allProviders") != null && !jsonObj.get("allProviders").isJsonNull() && !jsonObj.get("allProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allProviders` to be an array in the JSON string but got `%s`", jsonObj.get("allProviders").toString()));
      }
      if ((jsonObj.get("authUri") != null && !jsonObj.get("authUri").isJsonNull()) && !jsonObj.get("authUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authUri").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("signinMethods") != null && !jsonObj.get("signinMethods").isJsonNull() && !jsonObj.get("signinMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `signinMethods` to be an array in the JSON string but got `%s`", jsonObj.get("signinMethods").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAuthUriResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAuthUriResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAuthUriResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAuthUriResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAuthUriResponse>() {
           @Override
           public void write(JsonWriter out, CreateAuthUriResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAuthUriResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAuthUriResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAuthUriResponse
   * @throws IOException if the JSON string is invalid with respect to CreateAuthUriResponse
   */
  public static CreateAuthUriResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAuthUriResponse.class);
  }

  /**
   * Convert an instance of CreateAuthUriResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

