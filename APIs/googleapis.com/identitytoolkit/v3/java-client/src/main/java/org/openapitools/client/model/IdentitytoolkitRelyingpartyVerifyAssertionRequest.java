/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to verify the IDP assertion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartyVerifyAssertionRequest {
  public static final String SERIALIZED_NAME_AUTO_CREATE = "autoCreate";
  @SerializedName(SERIALIZED_NAME_AUTO_CREATE)
  private Boolean autoCreate;

  public static final String SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER = "delegatedProjectNumber";
  @SerializedName(SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER)
  private String delegatedProjectNumber;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_PENDING_ID_TOKEN = "pendingIdToken";
  @SerializedName(SERIALIZED_NAME_PENDING_ID_TOKEN)
  private String pendingIdToken;

  public static final String SERIALIZED_NAME_POST_BODY = "postBody";
  @SerializedName(SERIALIZED_NAME_POST_BODY)
  private String postBody;

  public static final String SERIALIZED_NAME_REQUEST_URI = "requestUri";
  @SerializedName(SERIALIZED_NAME_REQUEST_URI)
  private String requestUri;

  public static final String SERIALIZED_NAME_RETURN_IDP_CREDENTIAL = "returnIdpCredential";
  @SerializedName(SERIALIZED_NAME_RETURN_IDP_CREDENTIAL)
  private Boolean returnIdpCredential;

  public static final String SERIALIZED_NAME_RETURN_REFRESH_TOKEN = "returnRefreshToken";
  @SerializedName(SERIALIZED_NAME_RETURN_REFRESH_TOKEN)
  private Boolean returnRefreshToken;

  public static final String SERIALIZED_NAME_RETURN_SECURE_TOKEN = "returnSecureToken";
  @SerializedName(SERIALIZED_NAME_RETURN_SECURE_TOKEN)
  private Boolean returnSecureToken;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_PROJECT_NUMBER = "tenantProjectNumber";
  @SerializedName(SERIALIZED_NAME_TENANT_PROJECT_NUMBER)
  private String tenantProjectNumber;

  public IdentitytoolkitRelyingpartyVerifyAssertionRequest() {
  }

  public IdentitytoolkitRelyingpartyVerifyAssertionRequest autoCreate(Boolean autoCreate) {
    this.autoCreate = autoCreate;
    return this;
  }

  /**
   * When it&#39;s true, automatically creates a new account if the user doesn&#39;t exist. When it&#39;s false, allows existing user to sign in normally and throws exception if the user doesn&#39;t exist.
   * @return autoCreate
   */
  @javax.annotation.Nullable
  public Boolean getAutoCreate() {
    return autoCreate;
  }

  public void setAutoCreate(Boolean autoCreate) {
    this.autoCreate = autoCreate;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest delegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   * @return delegatedProjectNumber
   */
  @javax.annotation.Nullable
  public String getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  public void setDelegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The GITKit token of the authenticated user.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Instance id token of the app.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest pendingIdToken(String pendingIdToken) {
    this.pendingIdToken = pendingIdToken;
    return this;
  }

  /**
   * The GITKit token for the non-trusted IDP pending to be confirmed by the user.
   * @return pendingIdToken
   */
  @javax.annotation.Nullable
  public String getPendingIdToken() {
    return pendingIdToken;
  }

  public void setPendingIdToken(String pendingIdToken) {
    this.pendingIdToken = pendingIdToken;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest postBody(String postBody) {
    this.postBody = postBody;
    return this;
  }

  /**
   * The post body if the request is a HTTP POST.
   * @return postBody
   */
  @javax.annotation.Nullable
  public String getPostBody() {
    return postBody;
  }

  public void setPostBody(String postBody) {
    this.postBody = postBody;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest requestUri(String requestUri) {
    this.requestUri = requestUri;
    return this;
  }

  /**
   * The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
   * @return requestUri
   */
  @javax.annotation.Nullable
  public String getRequestUri() {
    return requestUri;
  }

  public void setRequestUri(String requestUri) {
    this.requestUri = requestUri;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest returnIdpCredential(Boolean returnIdpCredential) {
    this.returnIdpCredential = returnIdpCredential;
    return this;
  }

  /**
   * Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
   * @return returnIdpCredential
   */
  @javax.annotation.Nullable
  public Boolean getReturnIdpCredential() {
    return returnIdpCredential;
  }

  public void setReturnIdpCredential(Boolean returnIdpCredential) {
    this.returnIdpCredential = returnIdpCredential;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest returnRefreshToken(Boolean returnRefreshToken) {
    this.returnRefreshToken = returnRefreshToken;
    return this;
  }

  /**
   * Whether to return refresh tokens.
   * @return returnRefreshToken
   */
  @javax.annotation.Nullable
  public Boolean getReturnRefreshToken() {
    return returnRefreshToken;
  }

  public void setReturnRefreshToken(Boolean returnRefreshToken) {
    this.returnRefreshToken = returnRefreshToken;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest returnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
    return this;
  }

  /**
   * Whether return sts id token and refresh token instead of gitkit token.
   * @return returnSecureToken
   */
  @javax.annotation.Nullable
  public Boolean getReturnSecureToken() {
    return returnSecureToken;
  }

  public void setReturnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Session ID, which should match the one in previous createAuthUri request.
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public IdentitytoolkitRelyingpartyVerifyAssertionRequest tenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
    return this;
  }

  /**
   * Tenant project number to be used for idp discovery.
   * @return tenantProjectNumber
   */
  @javax.annotation.Nullable
  public String getTenantProjectNumber() {
    return tenantProjectNumber;
  }

  public void setTenantProjectNumber(String tenantProjectNumber) {
    this.tenantProjectNumber = tenantProjectNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartyVerifyAssertionRequest identitytoolkitRelyingpartyVerifyAssertionRequest = (IdentitytoolkitRelyingpartyVerifyAssertionRequest) o;
    return Objects.equals(this.autoCreate, identitytoolkitRelyingpartyVerifyAssertionRequest.autoCreate) &&
        Objects.equals(this.delegatedProjectNumber, identitytoolkitRelyingpartyVerifyAssertionRequest.delegatedProjectNumber) &&
        Objects.equals(this.idToken, identitytoolkitRelyingpartyVerifyAssertionRequest.idToken) &&
        Objects.equals(this.instanceId, identitytoolkitRelyingpartyVerifyAssertionRequest.instanceId) &&
        Objects.equals(this.pendingIdToken, identitytoolkitRelyingpartyVerifyAssertionRequest.pendingIdToken) &&
        Objects.equals(this.postBody, identitytoolkitRelyingpartyVerifyAssertionRequest.postBody) &&
        Objects.equals(this.requestUri, identitytoolkitRelyingpartyVerifyAssertionRequest.requestUri) &&
        Objects.equals(this.returnIdpCredential, identitytoolkitRelyingpartyVerifyAssertionRequest.returnIdpCredential) &&
        Objects.equals(this.returnRefreshToken, identitytoolkitRelyingpartyVerifyAssertionRequest.returnRefreshToken) &&
        Objects.equals(this.returnSecureToken, identitytoolkitRelyingpartyVerifyAssertionRequest.returnSecureToken) &&
        Objects.equals(this.sessionId, identitytoolkitRelyingpartyVerifyAssertionRequest.sessionId) &&
        Objects.equals(this.tenantId, identitytoolkitRelyingpartyVerifyAssertionRequest.tenantId) &&
        Objects.equals(this.tenantProjectNumber, identitytoolkitRelyingpartyVerifyAssertionRequest.tenantProjectNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCreate, delegatedProjectNumber, idToken, instanceId, pendingIdToken, postBody, requestUri, returnIdpCredential, returnRefreshToken, returnSecureToken, sessionId, tenantId, tenantProjectNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartyVerifyAssertionRequest {\n");
    sb.append("    autoCreate: ").append(toIndentedString(autoCreate)).append("\n");
    sb.append("    delegatedProjectNumber: ").append(toIndentedString(delegatedProjectNumber)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    pendingIdToken: ").append(toIndentedString(pendingIdToken)).append("\n");
    sb.append("    postBody: ").append(toIndentedString(postBody)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("    returnIdpCredential: ").append(toIndentedString(returnIdpCredential)).append("\n");
    sb.append("    returnRefreshToken: ").append(toIndentedString(returnRefreshToken)).append("\n");
    sb.append("    returnSecureToken: ").append(toIndentedString(returnSecureToken)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantProjectNumber: ").append(toIndentedString(tenantProjectNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoCreate");
    openapiFields.add("delegatedProjectNumber");
    openapiFields.add("idToken");
    openapiFields.add("instanceId");
    openapiFields.add("pendingIdToken");
    openapiFields.add("postBody");
    openapiFields.add("requestUri");
    openapiFields.add("returnIdpCredential");
    openapiFields.add("returnRefreshToken");
    openapiFields.add("returnSecureToken");
    openapiFields.add("sessionId");
    openapiFields.add("tenantId");
    openapiFields.add("tenantProjectNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartyVerifyAssertionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartyVerifyAssertionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartyVerifyAssertionRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartyVerifyAssertionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartyVerifyAssertionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartyVerifyAssertionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("delegatedProjectNumber") != null && !jsonObj.get("delegatedProjectNumber").isJsonNull()) && !jsonObj.get("delegatedProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegatedProjectNumber").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("pendingIdToken") != null && !jsonObj.get("pendingIdToken").isJsonNull()) && !jsonObj.get("pendingIdToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingIdToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingIdToken").toString()));
      }
      if ((jsonObj.get("postBody") != null && !jsonObj.get("postBody").isJsonNull()) && !jsonObj.get("postBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postBody").toString()));
      }
      if ((jsonObj.get("requestUri") != null && !jsonObj.get("requestUri").isJsonNull()) && !jsonObj.get("requestUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestUri").toString()));
      }
      if ((jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) && !jsonObj.get("sessionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("tenantProjectNumber") != null && !jsonObj.get("tenantProjectNumber").isJsonNull()) && !jsonObj.get("tenantProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantProjectNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartyVerifyAssertionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartyVerifyAssertionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartyVerifyAssertionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartyVerifyAssertionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartyVerifyAssertionRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartyVerifyAssertionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartyVerifyAssertionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartyVerifyAssertionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartyVerifyAssertionRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartyVerifyAssertionRequest
   */
  public static IdentitytoolkitRelyingpartyVerifyAssertionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartyVerifyAssertionRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartyVerifyAssertionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

