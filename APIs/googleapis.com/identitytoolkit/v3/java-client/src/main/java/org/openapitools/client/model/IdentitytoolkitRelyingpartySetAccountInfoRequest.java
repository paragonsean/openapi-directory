/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to set the account information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartySetAccountInfoRequest {
  public static final String SERIALIZED_NAME_CAPTCHA_CHALLENGE = "captchaChallenge";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_CHALLENGE)
  private String captchaChallenge;

  public static final String SERIALIZED_NAME_CAPTCHA_RESPONSE = "captchaResponse";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_RESPONSE)
  private String captchaResponse;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private String customAttributes;

  public static final String SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER = "delegatedProjectNumber";
  @SerializedName(SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER)
  private String delegatedProjectNumber;

  public static final String SERIALIZED_NAME_DELETE_ATTRIBUTE = "deleteAttribute";
  @SerializedName(SERIALIZED_NAME_DELETE_ATTRIBUTE)
  private List<String> deleteAttribute = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELETE_PROVIDER = "deleteProvider";
  @SerializedName(SERIALIZED_NAME_DELETE_PROVIDER)
  private List<String> deleteProvider = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISABLE_USER = "disableUser";
  @SerializedName(SERIALIZED_NAME_DISABLE_USER)
  private Boolean disableUser;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_LAST_LOGIN_AT = "lastLoginAt";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_AT)
  private String lastLoginAt;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_OOB_CODE = "oobCode";
  @SerializedName(SERIALIZED_NAME_OOB_CODE)
  private String oobCode;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private List<String> provider = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_SECURE_TOKEN = "returnSecureToken";
  @SerializedName(SERIALIZED_NAME_RETURN_SECURE_TOKEN)
  private Boolean returnSecureToken;

  public static final String SERIALIZED_NAME_UPGRADE_TO_FEDERATED_LOGIN = "upgradeToFederatedLogin";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TO_FEDERATED_LOGIN)
  private Boolean upgradeToFederatedLogin;

  public static final String SERIALIZED_NAME_VALID_SINCE = "validSince";
  @SerializedName(SERIALIZED_NAME_VALID_SINCE)
  private String validSince;

  public IdentitytoolkitRelyingpartySetAccountInfoRequest() {
  }

  public IdentitytoolkitRelyingpartySetAccountInfoRequest captchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
    return this;
  }

  /**
   * The captcha challenge.
   * @return captchaChallenge
   */
  @javax.annotation.Nullable
  public String getCaptchaChallenge() {
    return captchaChallenge;
  }

  public void setCaptchaChallenge(String captchaChallenge) {
    this.captchaChallenge = captchaChallenge;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest captchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
    return this;
  }

  /**
   * Response to the captcha.
   * @return captchaResponse
   */
  @javax.annotation.Nullable
  public String getCaptchaResponse() {
    return captchaResponse;
  }

  public void setCaptchaResponse(String captchaResponse) {
    this.captchaResponse = captchaResponse;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The timestamp when the account is created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest customAttributes(String customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * The custom attributes to be set in the user&#39;s id token.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public String getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(String customAttributes) {
    this.customAttributes = customAttributes;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest delegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   * @return delegatedProjectNumber
   */
  @javax.annotation.Nullable
  public String getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  public void setDelegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest deleteAttribute(List<String> deleteAttribute) {
    this.deleteAttribute = deleteAttribute;
    return this;
  }

  public IdentitytoolkitRelyingpartySetAccountInfoRequest addDeleteAttributeItem(String deleteAttributeItem) {
    if (this.deleteAttribute == null) {
      this.deleteAttribute = new ArrayList<>();
    }
    this.deleteAttribute.add(deleteAttributeItem);
    return this;
  }

  /**
   * The attributes users request to delete.
   * @return deleteAttribute
   */
  @javax.annotation.Nullable
  public List<String> getDeleteAttribute() {
    return deleteAttribute;
  }

  public void setDeleteAttribute(List<String> deleteAttribute) {
    this.deleteAttribute = deleteAttribute;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest deleteProvider(List<String> deleteProvider) {
    this.deleteProvider = deleteProvider;
    return this;
  }

  public IdentitytoolkitRelyingpartySetAccountInfoRequest addDeleteProviderItem(String deleteProviderItem) {
    if (this.deleteProvider == null) {
      this.deleteProvider = new ArrayList<>();
    }
    this.deleteProvider.add(deleteProviderItem);
    return this;
  }

  /**
   * The IDPs the user request to delete.
   * @return deleteProvider
   */
  @javax.annotation.Nullable
  public List<String> getDeleteProvider() {
    return deleteProvider;
  }

  public void setDeleteProvider(List<String> deleteProvider) {
    this.deleteProvider = deleteProvider;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest disableUser(Boolean disableUser) {
    this.disableUser = disableUser;
    return this;
  }

  /**
   * Whether to disable the user.
   * @return disableUser
   */
  @javax.annotation.Nullable
  public Boolean getDisableUser() {
    return disableUser;
  }

  public void setDisableUser(Boolean disableUser) {
    this.disableUser = disableUser;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Mark the email as verified or not.
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The GITKit token of the authenticated user.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Instance id token of the app.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest lastLoginAt(String lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
    return this;
  }

  /**
   * Last login timestamp.
   * @return lastLoginAt
   */
  @javax.annotation.Nullable
  public String getLastLoginAt() {
    return lastLoginAt;
  }

  public void setLastLoginAt(String lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * The local ID of the user.
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest oobCode(String oobCode) {
    this.oobCode = oobCode;
    return this;
  }

  /**
   * The out-of-band code of the change email request.
   * @return oobCode
   */
  @javax.annotation.Nullable
  public String getOobCode() {
    return oobCode;
  }

  public void setOobCode(String oobCode) {
    this.oobCode = oobCode;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The new password of the user.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Privileged caller can update user with specified phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The photo url of the user.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest provider(List<String> provider) {
    this.provider = provider;
    return this;
  }

  public IdentitytoolkitRelyingpartySetAccountInfoRequest addProviderItem(String providerItem) {
    if (this.provider == null) {
      this.provider = new ArrayList<>();
    }
    this.provider.add(providerItem);
    return this;
  }

  /**
   * The associated IDPs of the user.
   * @return provider
   */
  @javax.annotation.Nullable
  public List<String> getProvider() {
    return provider;
  }

  public void setProvider(List<String> provider) {
    this.provider = provider;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest returnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
    return this;
  }

  /**
   * Whether return sts id token and refresh token instead of gitkit token.
   * @return returnSecureToken
   */
  @javax.annotation.Nullable
  public Boolean getReturnSecureToken() {
    return returnSecureToken;
  }

  public void setReturnSecureToken(Boolean returnSecureToken) {
    this.returnSecureToken = returnSecureToken;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest upgradeToFederatedLogin(Boolean upgradeToFederatedLogin) {
    this.upgradeToFederatedLogin = upgradeToFederatedLogin;
    return this;
  }

  /**
   * Mark the user to upgrade to federated login.
   * @return upgradeToFederatedLogin
   */
  @javax.annotation.Nullable
  public Boolean getUpgradeToFederatedLogin() {
    return upgradeToFederatedLogin;
  }

  public void setUpgradeToFederatedLogin(Boolean upgradeToFederatedLogin) {
    this.upgradeToFederatedLogin = upgradeToFederatedLogin;
  }


  public IdentitytoolkitRelyingpartySetAccountInfoRequest validSince(String validSince) {
    this.validSince = validSince;
    return this;
  }

  /**
   * Timestamp in seconds for valid login token.
   * @return validSince
   */
  @javax.annotation.Nullable
  public String getValidSince() {
    return validSince;
  }

  public void setValidSince(String validSince) {
    this.validSince = validSince;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartySetAccountInfoRequest identitytoolkitRelyingpartySetAccountInfoRequest = (IdentitytoolkitRelyingpartySetAccountInfoRequest) o;
    return Objects.equals(this.captchaChallenge, identitytoolkitRelyingpartySetAccountInfoRequest.captchaChallenge) &&
        Objects.equals(this.captchaResponse, identitytoolkitRelyingpartySetAccountInfoRequest.captchaResponse) &&
        Objects.equals(this.createdAt, identitytoolkitRelyingpartySetAccountInfoRequest.createdAt) &&
        Objects.equals(this.customAttributes, identitytoolkitRelyingpartySetAccountInfoRequest.customAttributes) &&
        Objects.equals(this.delegatedProjectNumber, identitytoolkitRelyingpartySetAccountInfoRequest.delegatedProjectNumber) &&
        Objects.equals(this.deleteAttribute, identitytoolkitRelyingpartySetAccountInfoRequest.deleteAttribute) &&
        Objects.equals(this.deleteProvider, identitytoolkitRelyingpartySetAccountInfoRequest.deleteProvider) &&
        Objects.equals(this.disableUser, identitytoolkitRelyingpartySetAccountInfoRequest.disableUser) &&
        Objects.equals(this.displayName, identitytoolkitRelyingpartySetAccountInfoRequest.displayName) &&
        Objects.equals(this.email, identitytoolkitRelyingpartySetAccountInfoRequest.email) &&
        Objects.equals(this.emailVerified, identitytoolkitRelyingpartySetAccountInfoRequest.emailVerified) &&
        Objects.equals(this.idToken, identitytoolkitRelyingpartySetAccountInfoRequest.idToken) &&
        Objects.equals(this.instanceId, identitytoolkitRelyingpartySetAccountInfoRequest.instanceId) &&
        Objects.equals(this.lastLoginAt, identitytoolkitRelyingpartySetAccountInfoRequest.lastLoginAt) &&
        Objects.equals(this.localId, identitytoolkitRelyingpartySetAccountInfoRequest.localId) &&
        Objects.equals(this.oobCode, identitytoolkitRelyingpartySetAccountInfoRequest.oobCode) &&
        Objects.equals(this.password, identitytoolkitRelyingpartySetAccountInfoRequest.password) &&
        Objects.equals(this.phoneNumber, identitytoolkitRelyingpartySetAccountInfoRequest.phoneNumber) &&
        Objects.equals(this.photoUrl, identitytoolkitRelyingpartySetAccountInfoRequest.photoUrl) &&
        Objects.equals(this.provider, identitytoolkitRelyingpartySetAccountInfoRequest.provider) &&
        Objects.equals(this.returnSecureToken, identitytoolkitRelyingpartySetAccountInfoRequest.returnSecureToken) &&
        Objects.equals(this.upgradeToFederatedLogin, identitytoolkitRelyingpartySetAccountInfoRequest.upgradeToFederatedLogin) &&
        Objects.equals(this.validSince, identitytoolkitRelyingpartySetAccountInfoRequest.validSince);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captchaChallenge, captchaResponse, createdAt, customAttributes, delegatedProjectNumber, deleteAttribute, deleteProvider, disableUser, displayName, email, emailVerified, idToken, instanceId, lastLoginAt, localId, oobCode, password, phoneNumber, photoUrl, provider, returnSecureToken, upgradeToFederatedLogin, validSince);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartySetAccountInfoRequest {\n");
    sb.append("    captchaChallenge: ").append(toIndentedString(captchaChallenge)).append("\n");
    sb.append("    captchaResponse: ").append(toIndentedString(captchaResponse)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    delegatedProjectNumber: ").append(toIndentedString(delegatedProjectNumber)).append("\n");
    sb.append("    deleteAttribute: ").append(toIndentedString(deleteAttribute)).append("\n");
    sb.append("    deleteProvider: ").append(toIndentedString(deleteProvider)).append("\n");
    sb.append("    disableUser: ").append(toIndentedString(disableUser)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    lastLoginAt: ").append(toIndentedString(lastLoginAt)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    oobCode: ").append(toIndentedString(oobCode)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    returnSecureToken: ").append(toIndentedString(returnSecureToken)).append("\n");
    sb.append("    upgradeToFederatedLogin: ").append(toIndentedString(upgradeToFederatedLogin)).append("\n");
    sb.append("    validSince: ").append(toIndentedString(validSince)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captchaChallenge");
    openapiFields.add("captchaResponse");
    openapiFields.add("createdAt");
    openapiFields.add("customAttributes");
    openapiFields.add("delegatedProjectNumber");
    openapiFields.add("deleteAttribute");
    openapiFields.add("deleteProvider");
    openapiFields.add("disableUser");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("emailVerified");
    openapiFields.add("idToken");
    openapiFields.add("instanceId");
    openapiFields.add("lastLoginAt");
    openapiFields.add("localId");
    openapiFields.add("oobCode");
    openapiFields.add("password");
    openapiFields.add("phoneNumber");
    openapiFields.add("photoUrl");
    openapiFields.add("provider");
    openapiFields.add("returnSecureToken");
    openapiFields.add("upgradeToFederatedLogin");
    openapiFields.add("validSince");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartySetAccountInfoRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartySetAccountInfoRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartySetAccountInfoRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartySetAccountInfoRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartySetAccountInfoRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartySetAccountInfoRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("captchaChallenge") != null && !jsonObj.get("captchaChallenge").isJsonNull()) && !jsonObj.get("captchaChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaChallenge").toString()));
      }
      if ((jsonObj.get("captchaResponse") != null && !jsonObj.get("captchaResponse").isJsonNull()) && !jsonObj.get("captchaResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaResponse").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) && !jsonObj.get("customAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
      }
      if ((jsonObj.get("delegatedProjectNumber") != null && !jsonObj.get("delegatedProjectNumber").isJsonNull()) && !jsonObj.get("delegatedProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegatedProjectNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deleteAttribute") != null && !jsonObj.get("deleteAttribute").isJsonNull() && !jsonObj.get("deleteAttribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteAttribute` to be an array in the JSON string but got `%s`", jsonObj.get("deleteAttribute").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deleteProvider") != null && !jsonObj.get("deleteProvider").isJsonNull() && !jsonObj.get("deleteProvider").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteProvider` to be an array in the JSON string but got `%s`", jsonObj.get("deleteProvider").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("lastLoginAt") != null && !jsonObj.get("lastLoginAt").isJsonNull()) && !jsonObj.get("lastLoginAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginAt").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("oobCode") != null && !jsonObj.get("oobCode").isJsonNull()) && !jsonObj.get("oobCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oobCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oobCode").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull() && !jsonObj.get("provider").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be an array in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("validSince") != null && !jsonObj.get("validSince").isJsonNull()) && !jsonObj.get("validSince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validSince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validSince").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartySetAccountInfoRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartySetAccountInfoRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartySetAccountInfoRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartySetAccountInfoRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartySetAccountInfoRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartySetAccountInfoRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartySetAccountInfoRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartySetAccountInfoRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartySetAccountInfoRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartySetAccountInfoRequest
   */
  public static IdentitytoolkitRelyingpartySetAccountInfoRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartySetAccountInfoRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartySetAccountInfoRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

