/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EmailTemplate;
import org.openapitools.client.model.IdpConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to set the project configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartySetProjectConfigRequest {
  public static final String SERIALIZED_NAME_ALLOW_PASSWORD_USER = "allowPasswordUser";
  @SerializedName(SERIALIZED_NAME_ALLOW_PASSWORD_USER)
  private Boolean allowPasswordUser;

  public static final String SERIALIZED_NAME_API_KEY = "apiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_AUTHORIZED_DOMAINS = "authorizedDomains";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_DOMAINS)
  private List<String> authorizedDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_EMAIL_TEMPLATE = "changeEmailTemplate";
  @SerializedName(SERIALIZED_NAME_CHANGE_EMAIL_TEMPLATE)
  private EmailTemplate changeEmailTemplate;

  public static final String SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER = "delegatedProjectNumber";
  @SerializedName(SERIALIZED_NAME_DELEGATED_PROJECT_NUMBER)
  private String delegatedProjectNumber;

  public static final String SERIALIZED_NAME_ENABLE_ANONYMOUS_USER = "enableAnonymousUser";
  @SerializedName(SERIALIZED_NAME_ENABLE_ANONYMOUS_USER)
  private Boolean enableAnonymousUser;

  public static final String SERIALIZED_NAME_IDP_CONFIG = "idpConfig";
  @SerializedName(SERIALIZED_NAME_IDP_CONFIG)
  private List<IdpConfig> idpConfig = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGACY_RESET_PASSWORD_TEMPLATE = "legacyResetPasswordTemplate";
  @SerializedName(SERIALIZED_NAME_LEGACY_RESET_PASSWORD_TEMPLATE)
  private EmailTemplate legacyResetPasswordTemplate;

  public static final String SERIALIZED_NAME_RESET_PASSWORD_TEMPLATE = "resetPasswordTemplate";
  @SerializedName(SERIALIZED_NAME_RESET_PASSWORD_TEMPLATE)
  private EmailTemplate resetPasswordTemplate;

  public static final String SERIALIZED_NAME_USE_EMAIL_SENDING = "useEmailSending";
  @SerializedName(SERIALIZED_NAME_USE_EMAIL_SENDING)
  private Boolean useEmailSending;

  public static final String SERIALIZED_NAME_VERIFY_EMAIL_TEMPLATE = "verifyEmailTemplate";
  @SerializedName(SERIALIZED_NAME_VERIFY_EMAIL_TEMPLATE)
  private EmailTemplate verifyEmailTemplate;

  public IdentitytoolkitRelyingpartySetProjectConfigRequest() {
  }

  public IdentitytoolkitRelyingpartySetProjectConfigRequest allowPasswordUser(Boolean allowPasswordUser) {
    this.allowPasswordUser = allowPasswordUser;
    return this;
  }

  /**
   * Whether to allow password user sign in or sign up.
   * @return allowPasswordUser
   */
  @javax.annotation.Nullable
  public Boolean getAllowPasswordUser() {
    return allowPasswordUser;
  }

  public void setAllowPasswordUser(Boolean allowPasswordUser) {
    this.allowPasswordUser = allowPasswordUser;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Browser API key, needed when making http request to Apiary.
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest authorizedDomains(List<String> authorizedDomains) {
    this.authorizedDomains = authorizedDomains;
    return this;
  }

  public IdentitytoolkitRelyingpartySetProjectConfigRequest addAuthorizedDomainsItem(String authorizedDomainsItem) {
    if (this.authorizedDomains == null) {
      this.authorizedDomains = new ArrayList<>();
    }
    this.authorizedDomains.add(authorizedDomainsItem);
    return this;
  }

  /**
   * Authorized domains for widget redirect.
   * @return authorizedDomains
   */
  @javax.annotation.Nullable
  public List<String> getAuthorizedDomains() {
    return authorizedDomains;
  }

  public void setAuthorizedDomains(List<String> authorizedDomains) {
    this.authorizedDomains = authorizedDomains;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest changeEmailTemplate(EmailTemplate changeEmailTemplate) {
    this.changeEmailTemplate = changeEmailTemplate;
    return this;
  }

  /**
   * Get changeEmailTemplate
   * @return changeEmailTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplate getChangeEmailTemplate() {
    return changeEmailTemplate;
  }

  public void setChangeEmailTemplate(EmailTemplate changeEmailTemplate) {
    this.changeEmailTemplate = changeEmailTemplate;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest delegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
    return this;
  }

  /**
   * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
   * @return delegatedProjectNumber
   */
  @javax.annotation.Nullable
  public String getDelegatedProjectNumber() {
    return delegatedProjectNumber;
  }

  public void setDelegatedProjectNumber(String delegatedProjectNumber) {
    this.delegatedProjectNumber = delegatedProjectNumber;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest enableAnonymousUser(Boolean enableAnonymousUser) {
    this.enableAnonymousUser = enableAnonymousUser;
    return this;
  }

  /**
   * Whether to enable anonymous user.
   * @return enableAnonymousUser
   */
  @javax.annotation.Nullable
  public Boolean getEnableAnonymousUser() {
    return enableAnonymousUser;
  }

  public void setEnableAnonymousUser(Boolean enableAnonymousUser) {
    this.enableAnonymousUser = enableAnonymousUser;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest idpConfig(List<IdpConfig> idpConfig) {
    this.idpConfig = idpConfig;
    return this;
  }

  public IdentitytoolkitRelyingpartySetProjectConfigRequest addIdpConfigItem(IdpConfig idpConfigItem) {
    if (this.idpConfig == null) {
      this.idpConfig = new ArrayList<>();
    }
    this.idpConfig.add(idpConfigItem);
    return this;
  }

  /**
   * Oauth2 provider configuration.
   * @return idpConfig
   */
  @javax.annotation.Nullable
  public List<IdpConfig> getIdpConfig() {
    return idpConfig;
  }

  public void setIdpConfig(List<IdpConfig> idpConfig) {
    this.idpConfig = idpConfig;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest legacyResetPasswordTemplate(EmailTemplate legacyResetPasswordTemplate) {
    this.legacyResetPasswordTemplate = legacyResetPasswordTemplate;
    return this;
  }

  /**
   * Get legacyResetPasswordTemplate
   * @return legacyResetPasswordTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplate getLegacyResetPasswordTemplate() {
    return legacyResetPasswordTemplate;
  }

  public void setLegacyResetPasswordTemplate(EmailTemplate legacyResetPasswordTemplate) {
    this.legacyResetPasswordTemplate = legacyResetPasswordTemplate;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest resetPasswordTemplate(EmailTemplate resetPasswordTemplate) {
    this.resetPasswordTemplate = resetPasswordTemplate;
    return this;
  }

  /**
   * Get resetPasswordTemplate
   * @return resetPasswordTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplate getResetPasswordTemplate() {
    return resetPasswordTemplate;
  }

  public void setResetPasswordTemplate(EmailTemplate resetPasswordTemplate) {
    this.resetPasswordTemplate = resetPasswordTemplate;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest useEmailSending(Boolean useEmailSending) {
    this.useEmailSending = useEmailSending;
    return this;
  }

  /**
   * Whether to use email sending provided by Firebear.
   * @return useEmailSending
   */
  @javax.annotation.Nullable
  public Boolean getUseEmailSending() {
    return useEmailSending;
  }

  public void setUseEmailSending(Boolean useEmailSending) {
    this.useEmailSending = useEmailSending;
  }


  public IdentitytoolkitRelyingpartySetProjectConfigRequest verifyEmailTemplate(EmailTemplate verifyEmailTemplate) {
    this.verifyEmailTemplate = verifyEmailTemplate;
    return this;
  }

  /**
   * Get verifyEmailTemplate
   * @return verifyEmailTemplate
   */
  @javax.annotation.Nullable
  public EmailTemplate getVerifyEmailTemplate() {
    return verifyEmailTemplate;
  }

  public void setVerifyEmailTemplate(EmailTemplate verifyEmailTemplate) {
    this.verifyEmailTemplate = verifyEmailTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartySetProjectConfigRequest identitytoolkitRelyingpartySetProjectConfigRequest = (IdentitytoolkitRelyingpartySetProjectConfigRequest) o;
    return Objects.equals(this.allowPasswordUser, identitytoolkitRelyingpartySetProjectConfigRequest.allowPasswordUser) &&
        Objects.equals(this.apiKey, identitytoolkitRelyingpartySetProjectConfigRequest.apiKey) &&
        Objects.equals(this.authorizedDomains, identitytoolkitRelyingpartySetProjectConfigRequest.authorizedDomains) &&
        Objects.equals(this.changeEmailTemplate, identitytoolkitRelyingpartySetProjectConfigRequest.changeEmailTemplate) &&
        Objects.equals(this.delegatedProjectNumber, identitytoolkitRelyingpartySetProjectConfigRequest.delegatedProjectNumber) &&
        Objects.equals(this.enableAnonymousUser, identitytoolkitRelyingpartySetProjectConfigRequest.enableAnonymousUser) &&
        Objects.equals(this.idpConfig, identitytoolkitRelyingpartySetProjectConfigRequest.idpConfig) &&
        Objects.equals(this.legacyResetPasswordTemplate, identitytoolkitRelyingpartySetProjectConfigRequest.legacyResetPasswordTemplate) &&
        Objects.equals(this.resetPasswordTemplate, identitytoolkitRelyingpartySetProjectConfigRequest.resetPasswordTemplate) &&
        Objects.equals(this.useEmailSending, identitytoolkitRelyingpartySetProjectConfigRequest.useEmailSending) &&
        Objects.equals(this.verifyEmailTemplate, identitytoolkitRelyingpartySetProjectConfigRequest.verifyEmailTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowPasswordUser, apiKey, authorizedDomains, changeEmailTemplate, delegatedProjectNumber, enableAnonymousUser, idpConfig, legacyResetPasswordTemplate, resetPasswordTemplate, useEmailSending, verifyEmailTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartySetProjectConfigRequest {\n");
    sb.append("    allowPasswordUser: ").append(toIndentedString(allowPasswordUser)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    authorizedDomains: ").append(toIndentedString(authorizedDomains)).append("\n");
    sb.append("    changeEmailTemplate: ").append(toIndentedString(changeEmailTemplate)).append("\n");
    sb.append("    delegatedProjectNumber: ").append(toIndentedString(delegatedProjectNumber)).append("\n");
    sb.append("    enableAnonymousUser: ").append(toIndentedString(enableAnonymousUser)).append("\n");
    sb.append("    idpConfig: ").append(toIndentedString(idpConfig)).append("\n");
    sb.append("    legacyResetPasswordTemplate: ").append(toIndentedString(legacyResetPasswordTemplate)).append("\n");
    sb.append("    resetPasswordTemplate: ").append(toIndentedString(resetPasswordTemplate)).append("\n");
    sb.append("    useEmailSending: ").append(toIndentedString(useEmailSending)).append("\n");
    sb.append("    verifyEmailTemplate: ").append(toIndentedString(verifyEmailTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowPasswordUser");
    openapiFields.add("apiKey");
    openapiFields.add("authorizedDomains");
    openapiFields.add("changeEmailTemplate");
    openapiFields.add("delegatedProjectNumber");
    openapiFields.add("enableAnonymousUser");
    openapiFields.add("idpConfig");
    openapiFields.add("legacyResetPasswordTemplate");
    openapiFields.add("resetPasswordTemplate");
    openapiFields.add("useEmailSending");
    openapiFields.add("verifyEmailTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartySetProjectConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartySetProjectConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartySetProjectConfigRequest is not found in the empty JSON string", IdentitytoolkitRelyingpartySetProjectConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartySetProjectConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartySetProjectConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull()) && !jsonObj.get("apiKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKey").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizedDomains") != null && !jsonObj.get("authorizedDomains").isJsonNull() && !jsonObj.get("authorizedDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedDomains` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedDomains").toString()));
      }
      // validate the optional field `changeEmailTemplate`
      if (jsonObj.get("changeEmailTemplate") != null && !jsonObj.get("changeEmailTemplate").isJsonNull()) {
        EmailTemplate.validateJsonElement(jsonObj.get("changeEmailTemplate"));
      }
      if ((jsonObj.get("delegatedProjectNumber") != null && !jsonObj.get("delegatedProjectNumber").isJsonNull()) && !jsonObj.get("delegatedProjectNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delegatedProjectNumber").toString()));
      }
      if (jsonObj.get("idpConfig") != null && !jsonObj.get("idpConfig").isJsonNull()) {
        JsonArray jsonArrayidpConfig = jsonObj.getAsJsonArray("idpConfig");
        if (jsonArrayidpConfig != null) {
          // ensure the json data is an array
          if (!jsonObj.get("idpConfig").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `idpConfig` to be an array in the JSON string but got `%s`", jsonObj.get("idpConfig").toString()));
          }

          // validate the optional field `idpConfig` (array)
          for (int i = 0; i < jsonArrayidpConfig.size(); i++) {
            IdpConfig.validateJsonElement(jsonArrayidpConfig.get(i));
          };
        }
      }
      // validate the optional field `legacyResetPasswordTemplate`
      if (jsonObj.get("legacyResetPasswordTemplate") != null && !jsonObj.get("legacyResetPasswordTemplate").isJsonNull()) {
        EmailTemplate.validateJsonElement(jsonObj.get("legacyResetPasswordTemplate"));
      }
      // validate the optional field `resetPasswordTemplate`
      if (jsonObj.get("resetPasswordTemplate") != null && !jsonObj.get("resetPasswordTemplate").isJsonNull()) {
        EmailTemplate.validateJsonElement(jsonObj.get("resetPasswordTemplate"));
      }
      // validate the optional field `verifyEmailTemplate`
      if (jsonObj.get("verifyEmailTemplate") != null && !jsonObj.get("verifyEmailTemplate").isJsonNull()) {
        EmailTemplate.validateJsonElement(jsonObj.get("verifyEmailTemplate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartySetProjectConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartySetProjectConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartySetProjectConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartySetProjectConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartySetProjectConfigRequest>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartySetProjectConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartySetProjectConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartySetProjectConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartySetProjectConfigRequest
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartySetProjectConfigRequest
   */
  public static IdentitytoolkitRelyingpartySetProjectConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartySetProjectConfigRequest.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartySetProjectConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

