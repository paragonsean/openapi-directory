/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for Identitytoolkit-VerifyPhoneNumber
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse {
  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_IS_NEW_USER = "isNewUser";
  @SerializedName(SERIALIZED_NAME_IS_NEW_USER)
  private Boolean isNewUser;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_TEMPORARY_PROOF = "temporaryProof";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_PROOF)
  private String temporaryProof;

  public static final String SERIALIZED_NAME_TEMPORARY_PROOF_EXPIRES_IN = "temporaryProofExpiresIn";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_PROOF_EXPIRES_IN)
  private String temporaryProofExpiresIn;

  public static final String SERIALIZED_NAME_VERIFICATION_PROOF = "verificationProof";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PROOF)
  private String verificationProof;

  public static final String SERIALIZED_NAME_VERIFICATION_PROOF_EXPIRES_IN = "verificationProofExpiresIn";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PROOF_EXPIRES_IN)
  private String verificationProofExpiresIn;

  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse() {
  }

  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse expiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Get expiresIn
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public String getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * Get idToken
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse isNewUser(Boolean isNewUser) {
    this.isNewUser = isNewUser;
    return this;
  }

  /**
   * Get isNewUser
   * @return isNewUser
   */
  @javax.annotation.Nullable
  public Boolean getIsNewUser() {
    return isNewUser;
  }

  public void setIsNewUser(Boolean isNewUser) {
    this.isNewUser = isNewUser;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * Get localId
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * Get refreshToken
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse temporaryProof(String temporaryProof) {
    this.temporaryProof = temporaryProof;
    return this;
  }

  /**
   * Get temporaryProof
   * @return temporaryProof
   */
  @javax.annotation.Nullable
  public String getTemporaryProof() {
    return temporaryProof;
  }

  public void setTemporaryProof(String temporaryProof) {
    this.temporaryProof = temporaryProof;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse temporaryProofExpiresIn(String temporaryProofExpiresIn) {
    this.temporaryProofExpiresIn = temporaryProofExpiresIn;
    return this;
  }

  /**
   * Get temporaryProofExpiresIn
   * @return temporaryProofExpiresIn
   */
  @javax.annotation.Nullable
  public String getTemporaryProofExpiresIn() {
    return temporaryProofExpiresIn;
  }

  public void setTemporaryProofExpiresIn(String temporaryProofExpiresIn) {
    this.temporaryProofExpiresIn = temporaryProofExpiresIn;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse verificationProof(String verificationProof) {
    this.verificationProof = verificationProof;
    return this;
  }

  /**
   * Get verificationProof
   * @return verificationProof
   */
  @javax.annotation.Nullable
  public String getVerificationProof() {
    return verificationProof;
  }

  public void setVerificationProof(String verificationProof) {
    this.verificationProof = verificationProof;
  }


  public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse verificationProofExpiresIn(String verificationProofExpiresIn) {
    this.verificationProofExpiresIn = verificationProofExpiresIn;
    return this;
  }

  /**
   * Get verificationProofExpiresIn
   * @return verificationProofExpiresIn
   */
  @javax.annotation.Nullable
  public String getVerificationProofExpiresIn() {
    return verificationProofExpiresIn;
  }

  public void setVerificationProofExpiresIn(String verificationProofExpiresIn) {
    this.verificationProofExpiresIn = verificationProofExpiresIn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse identitytoolkitRelyingpartyVerifyPhoneNumberResponse = (IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse) o;
    return Objects.equals(this.expiresIn, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.expiresIn) &&
        Objects.equals(this.idToken, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.idToken) &&
        Objects.equals(this.isNewUser, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.isNewUser) &&
        Objects.equals(this.localId, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.localId) &&
        Objects.equals(this.phoneNumber, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.phoneNumber) &&
        Objects.equals(this.refreshToken, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.refreshToken) &&
        Objects.equals(this.temporaryProof, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.temporaryProof) &&
        Objects.equals(this.temporaryProofExpiresIn, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.temporaryProofExpiresIn) &&
        Objects.equals(this.verificationProof, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.verificationProof) &&
        Objects.equals(this.verificationProofExpiresIn, identitytoolkitRelyingpartyVerifyPhoneNumberResponse.verificationProofExpiresIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresIn, idToken, isNewUser, localId, phoneNumber, refreshToken, temporaryProof, temporaryProofExpiresIn, verificationProof, verificationProofExpiresIn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse {\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    isNewUser: ").append(toIndentedString(isNewUser)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    temporaryProof: ").append(toIndentedString(temporaryProof)).append("\n");
    sb.append("    temporaryProofExpiresIn: ").append(toIndentedString(temporaryProofExpiresIn)).append("\n");
    sb.append("    verificationProof: ").append(toIndentedString(verificationProof)).append("\n");
    sb.append("    verificationProofExpiresIn: ").append(toIndentedString(verificationProofExpiresIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expiresIn");
    openapiFields.add("idToken");
    openapiFields.add("isNewUser");
    openapiFields.add("localId");
    openapiFields.add("phoneNumber");
    openapiFields.add("refreshToken");
    openapiFields.add("temporaryProof");
    openapiFields.add("temporaryProofExpiresIn");
    openapiFields.add("verificationProof");
    openapiFields.add("verificationProofExpiresIn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse is not found in the empty JSON string", IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expiresIn") != null && !jsonObj.get("expiresIn").isJsonNull()) && !jsonObj.get("expiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresIn").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("refreshToken") != null && !jsonObj.get("refreshToken").isJsonNull()) && !jsonObj.get("refreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshToken").toString()));
      }
      if ((jsonObj.get("temporaryProof") != null && !jsonObj.get("temporaryProof").isJsonNull()) && !jsonObj.get("temporaryProof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryProof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryProof").toString()));
      }
      if ((jsonObj.get("temporaryProofExpiresIn") != null && !jsonObj.get("temporaryProofExpiresIn").isJsonNull()) && !jsonObj.get("temporaryProofExpiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryProofExpiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryProofExpiresIn").toString()));
      }
      if ((jsonObj.get("verificationProof") != null && !jsonObj.get("verificationProof").isJsonNull()) && !jsonObj.get("verificationProof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationProof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationProof").toString()));
      }
      if ((jsonObj.get("verificationProofExpiresIn") != null && !jsonObj.get("verificationProofExpiresIn").isJsonNull()) && !jsonObj.get("verificationProofExpiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationProofExpiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationProofExpiresIn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse>() {
           @Override
           public void write(JsonWriter out, IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
   * @throws IOException if the JSON string is invalid with respect to IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse
   */
  public static IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.class);
  }

  /**
   * Convert an instance of IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

