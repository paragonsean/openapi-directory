/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response of verifying the IDP assertion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VerifyAssertionResponse {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_APP_INSTALLATION_URL = "appInstallationUrl";
  @SerializedName(SERIALIZED_NAME_APP_INSTALLATION_URL)
  private String appInstallationUrl;

  public static final String SERIALIZED_NAME_APP_SCHEME = "appScheme";
  @SerializedName(SERIALIZED_NAME_APP_SCHEME)
  private String appScheme;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_RECYCLED = "emailRecycled";
  @SerializedName(SERIALIZED_NAME_EMAIL_RECYCLED)
  private Boolean emailRecycled;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_EXPIRES_IN = "expiresIn";
  @SerializedName(SERIALIZED_NAME_EXPIRES_IN)
  private String expiresIn;

  public static final String SERIALIZED_NAME_FEDERATED_ID = "federatedId";
  @SerializedName(SERIALIZED_NAME_FEDERATED_ID)
  private String federatedId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_INPUT_EMAIL = "inputEmail";
  @SerializedName(SERIALIZED_NAME_INPUT_EMAIL)
  private String inputEmail;

  public static final String SERIALIZED_NAME_IS_NEW_USER = "isNewUser";
  @SerializedName(SERIALIZED_NAME_IS_NEW_USER)
  private Boolean isNewUser;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "identitytoolkit#VerifyAssertionResponse";

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_NEED_CONFIRMATION = "needConfirmation";
  @SerializedName(SERIALIZED_NAME_NEED_CONFIRMATION)
  private Boolean needConfirmation;

  public static final String SERIALIZED_NAME_NEED_EMAIL = "needEmail";
  @SerializedName(SERIALIZED_NAME_NEED_EMAIL)
  private Boolean needEmail;

  public static final String SERIALIZED_NAME_NICK_NAME = "nickName";
  @SerializedName(SERIALIZED_NAME_NICK_NAME)
  private String nickName;

  public static final String SERIALIZED_NAME_OAUTH_ACCESS_TOKEN = "oauthAccessToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_ACCESS_TOKEN)
  private String oauthAccessToken;

  public static final String SERIALIZED_NAME_OAUTH_AUTHORIZATION_CODE = "oauthAuthorizationCode";
  @SerializedName(SERIALIZED_NAME_OAUTH_AUTHORIZATION_CODE)
  private String oauthAuthorizationCode;

  public static final String SERIALIZED_NAME_OAUTH_EXPIRE_IN = "oauthExpireIn";
  @SerializedName(SERIALIZED_NAME_OAUTH_EXPIRE_IN)
  private Integer oauthExpireIn;

  public static final String SERIALIZED_NAME_OAUTH_ID_TOKEN = "oauthIdToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_ID_TOKEN)
  private String oauthIdToken;

  public static final String SERIALIZED_NAME_OAUTH_REQUEST_TOKEN = "oauthRequestToken";
  @SerializedName(SERIALIZED_NAME_OAUTH_REQUEST_TOKEN)
  private String oauthRequestToken;

  public static final String SERIALIZED_NAME_OAUTH_SCOPE = "oauthScope";
  @SerializedName(SERIALIZED_NAME_OAUTH_SCOPE)
  private String oauthScope;

  public static final String SERIALIZED_NAME_OAUTH_TOKEN_SECRET = "oauthTokenSecret";
  @SerializedName(SERIALIZED_NAME_OAUTH_TOKEN_SECRET)
  private String oauthTokenSecret;

  public static final String SERIALIZED_NAME_ORIGINAL_EMAIL = "originalEmail";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_EMAIL)
  private String originalEmail;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PROVIDER_ID = "providerId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ID)
  private String providerId;

  public static final String SERIALIZED_NAME_RAW_USER_INFO = "rawUserInfo";
  @SerializedName(SERIALIZED_NAME_RAW_USER_INFO)
  private String rawUserInfo;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_SCREEN_NAME = "screenName";
  @SerializedName(SERIALIZED_NAME_SCREEN_NAME)
  private String screenName;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_VERIFIED_PROVIDER = "verifiedProvider";
  @SerializedName(SERIALIZED_NAME_VERIFIED_PROVIDER)
  private List<String> verifiedProvider = new ArrayList<>();

  public VerifyAssertionResponse() {
  }

  public VerifyAssertionResponse action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The action code.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public VerifyAssertionResponse appInstallationUrl(String appInstallationUrl) {
    this.appInstallationUrl = appInstallationUrl;
    return this;
  }

  /**
   * URL for OTA app installation.
   * @return appInstallationUrl
   */
  @javax.annotation.Nullable
  public String getAppInstallationUrl() {
    return appInstallationUrl;
  }

  public void setAppInstallationUrl(String appInstallationUrl) {
    this.appInstallationUrl = appInstallationUrl;
  }


  public VerifyAssertionResponse appScheme(String appScheme) {
    this.appScheme = appScheme;
    return this;
  }

  /**
   * The custom scheme used by mobile app.
   * @return appScheme
   */
  @javax.annotation.Nullable
  public String getAppScheme() {
    return appScheme;
  }

  public void setAppScheme(String appScheme) {
    this.appScheme = appScheme;
  }


  public VerifyAssertionResponse context(String context) {
    this.context = context;
    return this;
  }

  /**
   * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
   * @return context
   */
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public VerifyAssertionResponse dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The birth date of the IdP account.
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public VerifyAssertionResponse displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public VerifyAssertionResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email returned by the IdP. NOTE: The federated login user may not own the email.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public VerifyAssertionResponse emailRecycled(Boolean emailRecycled) {
    this.emailRecycled = emailRecycled;
    return this;
  }

  /**
   * It&#39;s true if the email is recycled.
   * @return emailRecycled
   */
  @javax.annotation.Nullable
  public Boolean getEmailRecycled() {
    return emailRecycled;
  }

  public void setEmailRecycled(Boolean emailRecycled) {
    this.emailRecycled = emailRecycled;
  }


  public VerifyAssertionResponse emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * The value is true if the IDP is also the email provider. It means the user owns the email.
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public VerifyAssertionResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Client error code.
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public VerifyAssertionResponse expiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
   * @return expiresIn
   */
  @javax.annotation.Nullable
  public String getExpiresIn() {
    return expiresIn;
  }

  public void setExpiresIn(String expiresIn) {
    this.expiresIn = expiresIn;
  }


  public VerifyAssertionResponse federatedId(String federatedId) {
    this.federatedId = federatedId;
    return this;
  }

  /**
   * The unique ID identifies the IdP account.
   * @return federatedId
   */
  @javax.annotation.Nullable
  public String getFederatedId() {
    return federatedId;
  }

  public void setFederatedId(String federatedId) {
    this.federatedId = federatedId;
  }


  public VerifyAssertionResponse firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the user.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public VerifyAssertionResponse fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * The full name of the user.
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public VerifyAssertionResponse idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The ID token.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public VerifyAssertionResponse inputEmail(String inputEmail) {
    this.inputEmail = inputEmail;
    return this;
  }

  /**
   * It&#39;s the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.
   * @return inputEmail
   */
  @javax.annotation.Nullable
  public String getInputEmail() {
    return inputEmail;
  }

  public void setInputEmail(String inputEmail) {
    this.inputEmail = inputEmail;
  }


  public VerifyAssertionResponse isNewUser(Boolean isNewUser) {
    this.isNewUser = isNewUser;
    return this;
  }

  /**
   * True if it&#39;s a new user sign-in, false if it&#39;s a returning user.
   * @return isNewUser
   */
  @javax.annotation.Nullable
  public Boolean getIsNewUser() {
    return isNewUser;
  }

  public void setIsNewUser(Boolean isNewUser) {
    this.isNewUser = isNewUser;
  }


  public VerifyAssertionResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The fixed string \&quot;identitytoolkit#VerifyAssertionResponse\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public VerifyAssertionResponse language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The language preference of the user.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public VerifyAssertionResponse lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the user.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public VerifyAssertionResponse localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * The RP local ID if it&#39;s already been mapped to the IdP account identified by the federated ID.
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public VerifyAssertionResponse needConfirmation(Boolean needConfirmation) {
    this.needConfirmation = needConfirmation;
    return this;
  }

  /**
   * Whether the assertion is from a non-trusted IDP and need account linking confirmation.
   * @return needConfirmation
   */
  @javax.annotation.Nullable
  public Boolean getNeedConfirmation() {
    return needConfirmation;
  }

  public void setNeedConfirmation(Boolean needConfirmation) {
    this.needConfirmation = needConfirmation;
  }


  public VerifyAssertionResponse needEmail(Boolean needEmail) {
    this.needEmail = needEmail;
    return this;
  }

  /**
   * Whether need client to supply email to complete the federated login flow.
   * @return needEmail
   */
  @javax.annotation.Nullable
  public Boolean getNeedEmail() {
    return needEmail;
  }

  public void setNeedEmail(Boolean needEmail) {
    this.needEmail = needEmail;
  }


  public VerifyAssertionResponse nickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  /**
   * The nick name of the user.
   * @return nickName
   */
  @javax.annotation.Nullable
  public String getNickName() {
    return nickName;
  }

  public void setNickName(String nickName) {
    this.nickName = nickName;
  }


  public VerifyAssertionResponse oauthAccessToken(String oauthAccessToken) {
    this.oauthAccessToken = oauthAccessToken;
    return this;
  }

  /**
   * The OAuth2 access token.
   * @return oauthAccessToken
   */
  @javax.annotation.Nullable
  public String getOauthAccessToken() {
    return oauthAccessToken;
  }

  public void setOauthAccessToken(String oauthAccessToken) {
    this.oauthAccessToken = oauthAccessToken;
  }


  public VerifyAssertionResponse oauthAuthorizationCode(String oauthAuthorizationCode) {
    this.oauthAuthorizationCode = oauthAuthorizationCode;
    return this;
  }

  /**
   * The OAuth2 authorization code.
   * @return oauthAuthorizationCode
   */
  @javax.annotation.Nullable
  public String getOauthAuthorizationCode() {
    return oauthAuthorizationCode;
  }

  public void setOauthAuthorizationCode(String oauthAuthorizationCode) {
    this.oauthAuthorizationCode = oauthAuthorizationCode;
  }


  public VerifyAssertionResponse oauthExpireIn(Integer oauthExpireIn) {
    this.oauthExpireIn = oauthExpireIn;
    return this;
  }

  /**
   * The lifetime in seconds of the OAuth2 access token.
   * @return oauthExpireIn
   */
  @javax.annotation.Nullable
  public Integer getOauthExpireIn() {
    return oauthExpireIn;
  }

  public void setOauthExpireIn(Integer oauthExpireIn) {
    this.oauthExpireIn = oauthExpireIn;
  }


  public VerifyAssertionResponse oauthIdToken(String oauthIdToken) {
    this.oauthIdToken = oauthIdToken;
    return this;
  }

  /**
   * The OIDC id token.
   * @return oauthIdToken
   */
  @javax.annotation.Nullable
  public String getOauthIdToken() {
    return oauthIdToken;
  }

  public void setOauthIdToken(String oauthIdToken) {
    this.oauthIdToken = oauthIdToken;
  }


  public VerifyAssertionResponse oauthRequestToken(String oauthRequestToken) {
    this.oauthRequestToken = oauthRequestToken;
    return this;
  }

  /**
   * The user approved request token for the OpenID OAuth extension.
   * @return oauthRequestToken
   */
  @javax.annotation.Nullable
  public String getOauthRequestToken() {
    return oauthRequestToken;
  }

  public void setOauthRequestToken(String oauthRequestToken) {
    this.oauthRequestToken = oauthRequestToken;
  }


  public VerifyAssertionResponse oauthScope(String oauthScope) {
    this.oauthScope = oauthScope;
    return this;
  }

  /**
   * The scope for the OpenID OAuth extension.
   * @return oauthScope
   */
  @javax.annotation.Nullable
  public String getOauthScope() {
    return oauthScope;
  }

  public void setOauthScope(String oauthScope) {
    this.oauthScope = oauthScope;
  }


  public VerifyAssertionResponse oauthTokenSecret(String oauthTokenSecret) {
    this.oauthTokenSecret = oauthTokenSecret;
    return this;
  }

  /**
   * The OAuth1 access token secret.
   * @return oauthTokenSecret
   */
  @javax.annotation.Nullable
  public String getOauthTokenSecret() {
    return oauthTokenSecret;
  }

  public void setOauthTokenSecret(String oauthTokenSecret) {
    this.oauthTokenSecret = oauthTokenSecret;
  }


  public VerifyAssertionResponse originalEmail(String originalEmail) {
    this.originalEmail = originalEmail;
    return this;
  }

  /**
   * The original email stored in the mapping storage. It&#39;s returned when the federated ID is associated to a different email.
   * @return originalEmail
   */
  @javax.annotation.Nullable
  public String getOriginalEmail() {
    return originalEmail;
  }

  public void setOriginalEmail(String originalEmail) {
    this.originalEmail = originalEmail;
  }


  public VerifyAssertionResponse photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The URI of the public accessible profiel picture.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public VerifyAssertionResponse providerId(String providerId) {
    this.providerId = providerId;
    return this;
  }

  /**
   * The IdP ID. For white listed IdPs it&#39;s a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \&quot;providerId\&quot; param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \&quot;identifier\&quot; param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.
   * @return providerId
   */
  @javax.annotation.Nullable
  public String getProviderId() {
    return providerId;
  }

  public void setProviderId(String providerId) {
    this.providerId = providerId;
  }


  public VerifyAssertionResponse rawUserInfo(String rawUserInfo) {
    this.rawUserInfo = rawUserInfo;
    return this;
  }

  /**
   * Raw IDP-returned user info.
   * @return rawUserInfo
   */
  @javax.annotation.Nullable
  public String getRawUserInfo() {
    return rawUserInfo;
  }

  public void setRawUserInfo(String rawUserInfo) {
    this.rawUserInfo = rawUserInfo;
  }


  public VerifyAssertionResponse refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * If idToken is STS id token, then this field will be refresh token.
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public VerifyAssertionResponse screenName(String screenName) {
    this.screenName = screenName;
    return this;
  }

  /**
   * The screen_name of a Twitter user or the login name at Github.
   * @return screenName
   */
  @javax.annotation.Nullable
  public String getScreenName() {
    return screenName;
  }

  public void setScreenName(String screenName) {
    this.screenName = screenName;
  }


  public VerifyAssertionResponse timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The timezone of the user.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public VerifyAssertionResponse verifiedProvider(List<String> verifiedProvider) {
    this.verifiedProvider = verifiedProvider;
    return this;
  }

  public VerifyAssertionResponse addVerifiedProviderItem(String verifiedProviderItem) {
    if (this.verifiedProvider == null) {
      this.verifiedProvider = new ArrayList<>();
    }
    this.verifiedProvider.add(verifiedProviderItem);
    return this;
  }

  /**
   * When action is &#39;map&#39;, contains the idps which can be used for confirmation.
   * @return verifiedProvider
   */
  @javax.annotation.Nullable
  public List<String> getVerifiedProvider() {
    return verifiedProvider;
  }

  public void setVerifiedProvider(List<String> verifiedProvider) {
    this.verifiedProvider = verifiedProvider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyAssertionResponse verifyAssertionResponse = (VerifyAssertionResponse) o;
    return Objects.equals(this.action, verifyAssertionResponse.action) &&
        Objects.equals(this.appInstallationUrl, verifyAssertionResponse.appInstallationUrl) &&
        Objects.equals(this.appScheme, verifyAssertionResponse.appScheme) &&
        Objects.equals(this.context, verifyAssertionResponse.context) &&
        Objects.equals(this.dateOfBirth, verifyAssertionResponse.dateOfBirth) &&
        Objects.equals(this.displayName, verifyAssertionResponse.displayName) &&
        Objects.equals(this.email, verifyAssertionResponse.email) &&
        Objects.equals(this.emailRecycled, verifyAssertionResponse.emailRecycled) &&
        Objects.equals(this.emailVerified, verifyAssertionResponse.emailVerified) &&
        Objects.equals(this.errorMessage, verifyAssertionResponse.errorMessage) &&
        Objects.equals(this.expiresIn, verifyAssertionResponse.expiresIn) &&
        Objects.equals(this.federatedId, verifyAssertionResponse.federatedId) &&
        Objects.equals(this.firstName, verifyAssertionResponse.firstName) &&
        Objects.equals(this.fullName, verifyAssertionResponse.fullName) &&
        Objects.equals(this.idToken, verifyAssertionResponse.idToken) &&
        Objects.equals(this.inputEmail, verifyAssertionResponse.inputEmail) &&
        Objects.equals(this.isNewUser, verifyAssertionResponse.isNewUser) &&
        Objects.equals(this.kind, verifyAssertionResponse.kind) &&
        Objects.equals(this.language, verifyAssertionResponse.language) &&
        Objects.equals(this.lastName, verifyAssertionResponse.lastName) &&
        Objects.equals(this.localId, verifyAssertionResponse.localId) &&
        Objects.equals(this.needConfirmation, verifyAssertionResponse.needConfirmation) &&
        Objects.equals(this.needEmail, verifyAssertionResponse.needEmail) &&
        Objects.equals(this.nickName, verifyAssertionResponse.nickName) &&
        Objects.equals(this.oauthAccessToken, verifyAssertionResponse.oauthAccessToken) &&
        Objects.equals(this.oauthAuthorizationCode, verifyAssertionResponse.oauthAuthorizationCode) &&
        Objects.equals(this.oauthExpireIn, verifyAssertionResponse.oauthExpireIn) &&
        Objects.equals(this.oauthIdToken, verifyAssertionResponse.oauthIdToken) &&
        Objects.equals(this.oauthRequestToken, verifyAssertionResponse.oauthRequestToken) &&
        Objects.equals(this.oauthScope, verifyAssertionResponse.oauthScope) &&
        Objects.equals(this.oauthTokenSecret, verifyAssertionResponse.oauthTokenSecret) &&
        Objects.equals(this.originalEmail, verifyAssertionResponse.originalEmail) &&
        Objects.equals(this.photoUrl, verifyAssertionResponse.photoUrl) &&
        Objects.equals(this.providerId, verifyAssertionResponse.providerId) &&
        Objects.equals(this.rawUserInfo, verifyAssertionResponse.rawUserInfo) &&
        Objects.equals(this.refreshToken, verifyAssertionResponse.refreshToken) &&
        Objects.equals(this.screenName, verifyAssertionResponse.screenName) &&
        Objects.equals(this.timeZone, verifyAssertionResponse.timeZone) &&
        Objects.equals(this.verifiedProvider, verifyAssertionResponse.verifiedProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, appInstallationUrl, appScheme, context, dateOfBirth, displayName, email, emailRecycled, emailVerified, errorMessage, expiresIn, federatedId, firstName, fullName, idToken, inputEmail, isNewUser, kind, language, lastName, localId, needConfirmation, needEmail, nickName, oauthAccessToken, oauthAuthorizationCode, oauthExpireIn, oauthIdToken, oauthRequestToken, oauthScope, oauthTokenSecret, originalEmail, photoUrl, providerId, rawUserInfo, refreshToken, screenName, timeZone, verifiedProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyAssertionResponse {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    appInstallationUrl: ").append(toIndentedString(appInstallationUrl)).append("\n");
    sb.append("    appScheme: ").append(toIndentedString(appScheme)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailRecycled: ").append(toIndentedString(emailRecycled)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    federatedId: ").append(toIndentedString(federatedId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    inputEmail: ").append(toIndentedString(inputEmail)).append("\n");
    sb.append("    isNewUser: ").append(toIndentedString(isNewUser)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    needConfirmation: ").append(toIndentedString(needConfirmation)).append("\n");
    sb.append("    needEmail: ").append(toIndentedString(needEmail)).append("\n");
    sb.append("    nickName: ").append(toIndentedString(nickName)).append("\n");
    sb.append("    oauthAccessToken: ").append(toIndentedString(oauthAccessToken)).append("\n");
    sb.append("    oauthAuthorizationCode: ").append(toIndentedString(oauthAuthorizationCode)).append("\n");
    sb.append("    oauthExpireIn: ").append(toIndentedString(oauthExpireIn)).append("\n");
    sb.append("    oauthIdToken: ").append(toIndentedString(oauthIdToken)).append("\n");
    sb.append("    oauthRequestToken: ").append(toIndentedString(oauthRequestToken)).append("\n");
    sb.append("    oauthScope: ").append(toIndentedString(oauthScope)).append("\n");
    sb.append("    oauthTokenSecret: ").append(toIndentedString(oauthTokenSecret)).append("\n");
    sb.append("    originalEmail: ").append(toIndentedString(originalEmail)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    providerId: ").append(toIndentedString(providerId)).append("\n");
    sb.append("    rawUserInfo: ").append(toIndentedString(rawUserInfo)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    screenName: ").append(toIndentedString(screenName)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    verifiedProvider: ").append(toIndentedString(verifiedProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("appInstallationUrl");
    openapiFields.add("appScheme");
    openapiFields.add("context");
    openapiFields.add("dateOfBirth");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("emailRecycled");
    openapiFields.add("emailVerified");
    openapiFields.add("errorMessage");
    openapiFields.add("expiresIn");
    openapiFields.add("federatedId");
    openapiFields.add("firstName");
    openapiFields.add("fullName");
    openapiFields.add("idToken");
    openapiFields.add("inputEmail");
    openapiFields.add("isNewUser");
    openapiFields.add("kind");
    openapiFields.add("language");
    openapiFields.add("lastName");
    openapiFields.add("localId");
    openapiFields.add("needConfirmation");
    openapiFields.add("needEmail");
    openapiFields.add("nickName");
    openapiFields.add("oauthAccessToken");
    openapiFields.add("oauthAuthorizationCode");
    openapiFields.add("oauthExpireIn");
    openapiFields.add("oauthIdToken");
    openapiFields.add("oauthRequestToken");
    openapiFields.add("oauthScope");
    openapiFields.add("oauthTokenSecret");
    openapiFields.add("originalEmail");
    openapiFields.add("photoUrl");
    openapiFields.add("providerId");
    openapiFields.add("rawUserInfo");
    openapiFields.add("refreshToken");
    openapiFields.add("screenName");
    openapiFields.add("timeZone");
    openapiFields.add("verifiedProvider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifyAssertionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VerifyAssertionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyAssertionResponse is not found in the empty JSON string", VerifyAssertionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VerifyAssertionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyAssertionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("appInstallationUrl") != null && !jsonObj.get("appInstallationUrl").isJsonNull()) && !jsonObj.get("appInstallationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appInstallationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appInstallationUrl").toString()));
      }
      if ((jsonObj.get("appScheme") != null && !jsonObj.get("appScheme").isJsonNull()) && !jsonObj.get("appScheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appScheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appScheme").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) && !jsonObj.get("dateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirth").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("expiresIn") != null && !jsonObj.get("expiresIn").isJsonNull()) && !jsonObj.get("expiresIn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresIn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresIn").toString()));
      }
      if ((jsonObj.get("federatedId") != null && !jsonObj.get("federatedId").isJsonNull()) && !jsonObj.get("federatedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `federatedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("federatedId").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("inputEmail") != null && !jsonObj.get("inputEmail").isJsonNull()) && !jsonObj.get("inputEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputEmail").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("nickName") != null && !jsonObj.get("nickName").isJsonNull()) && !jsonObj.get("nickName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickName").toString()));
      }
      if ((jsonObj.get("oauthAccessToken") != null && !jsonObj.get("oauthAccessToken").isJsonNull()) && !jsonObj.get("oauthAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthAccessToken").toString()));
      }
      if ((jsonObj.get("oauthAuthorizationCode") != null && !jsonObj.get("oauthAuthorizationCode").isJsonNull()) && !jsonObj.get("oauthAuthorizationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthAuthorizationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthAuthorizationCode").toString()));
      }
      if ((jsonObj.get("oauthIdToken") != null && !jsonObj.get("oauthIdToken").isJsonNull()) && !jsonObj.get("oauthIdToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthIdToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthIdToken").toString()));
      }
      if ((jsonObj.get("oauthRequestToken") != null && !jsonObj.get("oauthRequestToken").isJsonNull()) && !jsonObj.get("oauthRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthRequestToken").toString()));
      }
      if ((jsonObj.get("oauthScope") != null && !jsonObj.get("oauthScope").isJsonNull()) && !jsonObj.get("oauthScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthScope").toString()));
      }
      if ((jsonObj.get("oauthTokenSecret") != null && !jsonObj.get("oauthTokenSecret").isJsonNull()) && !jsonObj.get("oauthTokenSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oauthTokenSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oauthTokenSecret").toString()));
      }
      if ((jsonObj.get("originalEmail") != null && !jsonObj.get("originalEmail").isJsonNull()) && !jsonObj.get("originalEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalEmail").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      if ((jsonObj.get("providerId") != null && !jsonObj.get("providerId").isJsonNull()) && !jsonObj.get("providerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerId").toString()));
      }
      if ((jsonObj.get("rawUserInfo") != null && !jsonObj.get("rawUserInfo").isJsonNull()) && !jsonObj.get("rawUserInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawUserInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawUserInfo").toString()));
      }
      if ((jsonObj.get("refreshToken") != null && !jsonObj.get("refreshToken").isJsonNull()) && !jsonObj.get("refreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshToken").toString()));
      }
      if ((jsonObj.get("screenName") != null && !jsonObj.get("screenName").isJsonNull()) && !jsonObj.get("screenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenName").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("verifiedProvider") != null && !jsonObj.get("verifiedProvider").isJsonNull() && !jsonObj.get("verifiedProvider").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `verifiedProvider` to be an array in the JSON string but got `%s`", jsonObj.get("verifiedProvider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyAssertionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyAssertionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyAssertionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyAssertionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyAssertionResponse>() {
           @Override
           public void write(JsonWriter out, VerifyAssertionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyAssertionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifyAssertionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifyAssertionResponse
   * @throws IOException if the JSON string is invalid with respect to VerifyAssertionResponse
   */
  public static VerifyAssertionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyAssertionResponse.class);
  }

  /**
   * Convert an instance of VerifyAssertionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

