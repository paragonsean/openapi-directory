/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request of getting a code for user confirmation (reset password, change email etc.)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Relyingparty {
  public static final String SERIALIZED_NAME_ANDROID_INSTALL_APP = "androidInstallApp";
  @SerializedName(SERIALIZED_NAME_ANDROID_INSTALL_APP)
  private Boolean androidInstallApp;

  public static final String SERIALIZED_NAME_ANDROID_MINIMUM_VERSION = "androidMinimumVersion";
  @SerializedName(SERIALIZED_NAME_ANDROID_MINIMUM_VERSION)
  private String androidMinimumVersion;

  public static final String SERIALIZED_NAME_ANDROID_PACKAGE_NAME = "androidPackageName";
  @SerializedName(SERIALIZED_NAME_ANDROID_PACKAGE_NAME)
  private String androidPackageName;

  public static final String SERIALIZED_NAME_CAN_HANDLE_CODE_IN_APP = "canHandleCodeInApp";
  @SerializedName(SERIALIZED_NAME_CAN_HANDLE_CODE_IN_APP)
  private Boolean canHandleCodeInApp;

  public static final String SERIALIZED_NAME_CAPTCHA_RESP = "captchaResp";
  @SerializedName(SERIALIZED_NAME_CAPTCHA_RESP)
  private String captchaResp;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  private String challenge;

  public static final String SERIALIZED_NAME_CONTINUE_URL = "continueUrl";
  @SerializedName(SERIALIZED_NAME_CONTINUE_URL)
  private String continueUrl;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_I_O_S_APP_STORE_ID = "iOSAppStoreId";
  @SerializedName(SERIALIZED_NAME_I_O_S_APP_STORE_ID)
  private String iOSAppStoreId;

  public static final String SERIALIZED_NAME_I_O_S_BUNDLE_ID = "iOSBundleId";
  @SerializedName(SERIALIZED_NAME_I_O_S_BUNDLE_ID)
  private String iOSBundleId;

  public static final String SERIALIZED_NAME_ID_TOKEN = "idToken";
  @SerializedName(SERIALIZED_NAME_ID_TOKEN)
  private String idToken;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "identitytoolkit#relyingparty";

  public static final String SERIALIZED_NAME_NEW_EMAIL = "newEmail";
  @SerializedName(SERIALIZED_NAME_NEW_EMAIL)
  private String newEmail;

  public static final String SERIALIZED_NAME_REQUEST_TYPE = "requestType";
  @SerializedName(SERIALIZED_NAME_REQUEST_TYPE)
  private String requestType;

  public static final String SERIALIZED_NAME_USER_IP = "userIp";
  @SerializedName(SERIALIZED_NAME_USER_IP)
  private String userIp;

  public Relyingparty() {
  }

  public Relyingparty androidInstallApp(Boolean androidInstallApp) {
    this.androidInstallApp = androidInstallApp;
    return this;
  }

  /**
   * whether or not to install the android app on the device where the link is opened
   * @return androidInstallApp
   */
  @javax.annotation.Nullable
  public Boolean getAndroidInstallApp() {
    return androidInstallApp;
  }

  public void setAndroidInstallApp(Boolean androidInstallApp) {
    this.androidInstallApp = androidInstallApp;
  }


  public Relyingparty androidMinimumVersion(String androidMinimumVersion) {
    this.androidMinimumVersion = androidMinimumVersion;
    return this;
  }

  /**
   * minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app
   * @return androidMinimumVersion
   */
  @javax.annotation.Nullable
  public String getAndroidMinimumVersion() {
    return androidMinimumVersion;
  }

  public void setAndroidMinimumVersion(String androidMinimumVersion) {
    this.androidMinimumVersion = androidMinimumVersion;
  }


  public Relyingparty androidPackageName(String androidPackageName) {
    this.androidPackageName = androidPackageName;
    return this;
  }

  /**
   * android package name of the android app to handle the action code
   * @return androidPackageName
   */
  @javax.annotation.Nullable
  public String getAndroidPackageName() {
    return androidPackageName;
  }

  public void setAndroidPackageName(String androidPackageName) {
    this.androidPackageName = androidPackageName;
  }


  public Relyingparty canHandleCodeInApp(Boolean canHandleCodeInApp) {
    this.canHandleCodeInApp = canHandleCodeInApp;
    return this;
  }

  /**
   * whether or not the app can handle the oob code without first going to web
   * @return canHandleCodeInApp
   */
  @javax.annotation.Nullable
  public Boolean getCanHandleCodeInApp() {
    return canHandleCodeInApp;
  }

  public void setCanHandleCodeInApp(Boolean canHandleCodeInApp) {
    this.canHandleCodeInApp = canHandleCodeInApp;
  }


  public Relyingparty captchaResp(String captchaResp) {
    this.captchaResp = captchaResp;
    return this;
  }

  /**
   * The recaptcha response from the user.
   * @return captchaResp
   */
  @javax.annotation.Nullable
  public String getCaptchaResp() {
    return captchaResp;
  }

  public void setCaptchaResp(String captchaResp) {
    this.captchaResp = captchaResp;
  }


  public Relyingparty challenge(String challenge) {
    this.challenge = challenge;
    return this;
  }

  /**
   * The recaptcha challenge presented to the user.
   * @return challenge
   */
  @javax.annotation.Nullable
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(String challenge) {
    this.challenge = challenge;
  }


  public Relyingparty continueUrl(String continueUrl) {
    this.continueUrl = continueUrl;
    return this;
  }

  /**
   * The url to continue to the Gitkit app
   * @return continueUrl
   */
  @javax.annotation.Nullable
  public String getContinueUrl() {
    return continueUrl;
  }

  public void setContinueUrl(String continueUrl) {
    this.continueUrl = continueUrl;
  }


  public Relyingparty email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Relyingparty iOSAppStoreId(String iOSAppStoreId) {
    this.iOSAppStoreId = iOSAppStoreId;
    return this;
  }

  /**
   * iOS app store id to download the app if it&#39;s not already installed
   * @return iOSAppStoreId
   */
  @javax.annotation.Nullable
  public String getiOSAppStoreId() {
    return iOSAppStoreId;
  }

  public void setiOSAppStoreId(String iOSAppStoreId) {
    this.iOSAppStoreId = iOSAppStoreId;
  }


  public Relyingparty iOSBundleId(String iOSBundleId) {
    this.iOSBundleId = iOSBundleId;
    return this;
  }

  /**
   * the iOS bundle id of iOS app to handle the action code
   * @return iOSBundleId
   */
  @javax.annotation.Nullable
  public String getiOSBundleId() {
    return iOSBundleId;
  }

  public void setiOSBundleId(String iOSBundleId) {
    this.iOSBundleId = iOSBundleId;
  }


  public Relyingparty idToken(String idToken) {
    this.idToken = idToken;
    return this;
  }

  /**
   * The user&#39;s Gitkit login token for email change.
   * @return idToken
   */
  @javax.annotation.Nullable
  public String getIdToken() {
    return idToken;
  }

  public void setIdToken(String idToken) {
    this.idToken = idToken;
  }


  public Relyingparty kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The fixed string \&quot;identitytoolkit#relyingparty\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Relyingparty newEmail(String newEmail) {
    this.newEmail = newEmail;
    return this;
  }

  /**
   * The new email if the code is for email change.
   * @return newEmail
   */
  @javax.annotation.Nullable
  public String getNewEmail() {
    return newEmail;
  }

  public void setNewEmail(String newEmail) {
    this.newEmail = newEmail;
  }


  public Relyingparty requestType(String requestType) {
    this.requestType = requestType;
    return this;
  }

  /**
   * The request type.
   * @return requestType
   */
  @javax.annotation.Nullable
  public String getRequestType() {
    return requestType;
  }

  public void setRequestType(String requestType) {
    this.requestType = requestType;
  }


  public Relyingparty userIp(String userIp) {
    this.userIp = userIp;
    return this;
  }

  /**
   * The IP address of the user.
   * @return userIp
   */
  @javax.annotation.Nullable
  public String getUserIp() {
    return userIp;
  }

  public void setUserIp(String userIp) {
    this.userIp = userIp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Relyingparty relyingparty = (Relyingparty) o;
    return Objects.equals(this.androidInstallApp, relyingparty.androidInstallApp) &&
        Objects.equals(this.androidMinimumVersion, relyingparty.androidMinimumVersion) &&
        Objects.equals(this.androidPackageName, relyingparty.androidPackageName) &&
        Objects.equals(this.canHandleCodeInApp, relyingparty.canHandleCodeInApp) &&
        Objects.equals(this.captchaResp, relyingparty.captchaResp) &&
        Objects.equals(this.challenge, relyingparty.challenge) &&
        Objects.equals(this.continueUrl, relyingparty.continueUrl) &&
        Objects.equals(this.email, relyingparty.email) &&
        Objects.equals(this.iOSAppStoreId, relyingparty.iOSAppStoreId) &&
        Objects.equals(this.iOSBundleId, relyingparty.iOSBundleId) &&
        Objects.equals(this.idToken, relyingparty.idToken) &&
        Objects.equals(this.kind, relyingparty.kind) &&
        Objects.equals(this.newEmail, relyingparty.newEmail) &&
        Objects.equals(this.requestType, relyingparty.requestType) &&
        Objects.equals(this.userIp, relyingparty.userIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidInstallApp, androidMinimumVersion, androidPackageName, canHandleCodeInApp, captchaResp, challenge, continueUrl, email, iOSAppStoreId, iOSBundleId, idToken, kind, newEmail, requestType, userIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Relyingparty {\n");
    sb.append("    androidInstallApp: ").append(toIndentedString(androidInstallApp)).append("\n");
    sb.append("    androidMinimumVersion: ").append(toIndentedString(androidMinimumVersion)).append("\n");
    sb.append("    androidPackageName: ").append(toIndentedString(androidPackageName)).append("\n");
    sb.append("    canHandleCodeInApp: ").append(toIndentedString(canHandleCodeInApp)).append("\n");
    sb.append("    captchaResp: ").append(toIndentedString(captchaResp)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    continueUrl: ").append(toIndentedString(continueUrl)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    iOSAppStoreId: ").append(toIndentedString(iOSAppStoreId)).append("\n");
    sb.append("    iOSBundleId: ").append(toIndentedString(iOSBundleId)).append("\n");
    sb.append("    idToken: ").append(toIndentedString(idToken)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    newEmail: ").append(toIndentedString(newEmail)).append("\n");
    sb.append("    requestType: ").append(toIndentedString(requestType)).append("\n");
    sb.append("    userIp: ").append(toIndentedString(userIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidInstallApp");
    openapiFields.add("androidMinimumVersion");
    openapiFields.add("androidPackageName");
    openapiFields.add("canHandleCodeInApp");
    openapiFields.add("captchaResp");
    openapiFields.add("challenge");
    openapiFields.add("continueUrl");
    openapiFields.add("email");
    openapiFields.add("iOSAppStoreId");
    openapiFields.add("iOSBundleId");
    openapiFields.add("idToken");
    openapiFields.add("kind");
    openapiFields.add("newEmail");
    openapiFields.add("requestType");
    openapiFields.add("userIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Relyingparty
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Relyingparty.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Relyingparty is not found in the empty JSON string", Relyingparty.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Relyingparty.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Relyingparty` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("androidMinimumVersion") != null && !jsonObj.get("androidMinimumVersion").isJsonNull()) && !jsonObj.get("androidMinimumVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidMinimumVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidMinimumVersion").toString()));
      }
      if ((jsonObj.get("androidPackageName") != null && !jsonObj.get("androidPackageName").isJsonNull()) && !jsonObj.get("androidPackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidPackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidPackageName").toString()));
      }
      if ((jsonObj.get("captchaResp") != null && !jsonObj.get("captchaResp").isJsonNull()) && !jsonObj.get("captchaResp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `captchaResp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("captchaResp").toString()));
      }
      if ((jsonObj.get("challenge") != null && !jsonObj.get("challenge").isJsonNull()) && !jsonObj.get("challenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challenge").toString()));
      }
      if ((jsonObj.get("continueUrl") != null && !jsonObj.get("continueUrl").isJsonNull()) && !jsonObj.get("continueUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `continueUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("continueUrl").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("iOSAppStoreId") != null && !jsonObj.get("iOSAppStoreId").isJsonNull()) && !jsonObj.get("iOSAppStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iOSAppStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iOSAppStoreId").toString()));
      }
      if ((jsonObj.get("iOSBundleId") != null && !jsonObj.get("iOSBundleId").isJsonNull()) && !jsonObj.get("iOSBundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iOSBundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iOSBundleId").toString()));
      }
      if ((jsonObj.get("idToken") != null && !jsonObj.get("idToken").isJsonNull()) && !jsonObj.get("idToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idToken").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("newEmail") != null && !jsonObj.get("newEmail").isJsonNull()) && !jsonObj.get("newEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newEmail").toString()));
      }
      if ((jsonObj.get("requestType") != null && !jsonObj.get("requestType").isJsonNull()) && !jsonObj.get("requestType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestType").toString()));
      }
      if ((jsonObj.get("userIp") != null && !jsonObj.get("userIp").isJsonNull()) && !jsonObj.get("userIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Relyingparty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Relyingparty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Relyingparty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Relyingparty.class));

       return (TypeAdapter<T>) new TypeAdapter<Relyingparty>() {
           @Override
           public void write(JsonWriter out, Relyingparty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Relyingparty read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Relyingparty given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Relyingparty
   * @throws IOException if the JSON string is invalid with respect to Relyingparty
   */
  public static Relyingparty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Relyingparty.class);
  }

  /**
   * Convert an instance of Relyingparty to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

