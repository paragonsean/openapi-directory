/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserInfoProviderUserInfoInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Template for an individual account info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:36.644767-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserInfo {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_ATTRIBUTES = "customAttributes";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ATTRIBUTES)
  private String customAttributes;

  public static final String SERIALIZED_NAME_CUSTOM_AUTH = "customAuth";
  @SerializedName(SERIALIZED_NAME_CUSTOM_AUTH)
  private Boolean customAuth;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "emailVerified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_LAST_LOGIN_AT = "lastLoginAt";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_AT)
  private String lastLoginAt;

  public static final String SERIALIZED_NAME_LOCAL_ID = "localId";
  @SerializedName(SERIALIZED_NAME_LOCAL_ID)
  private String localId;

  public static final String SERIALIZED_NAME_PASSWORD_HASH = "passwordHash";
  @SerializedName(SERIALIZED_NAME_PASSWORD_HASH)
  private byte[] passwordHash;

  public static final String SERIALIZED_NAME_PASSWORD_UPDATED_AT = "passwordUpdatedAt";
  @SerializedName(SERIALIZED_NAME_PASSWORD_UPDATED_AT)
  private Double passwordUpdatedAt;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PHOTO_URL = "photoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PROVIDER_USER_INFO = "providerUserInfo";
  @SerializedName(SERIALIZED_NAME_PROVIDER_USER_INFO)
  private List<UserInfoProviderUserInfoInner> providerUserInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAW_PASSWORD = "rawPassword";
  @SerializedName(SERIALIZED_NAME_RAW_PASSWORD)
  private String rawPassword;

  public static final String SERIALIZED_NAME_SALT = "salt";
  @SerializedName(SERIALIZED_NAME_SALT)
  private byte[] salt;

  public static final String SERIALIZED_NAME_SCREEN_NAME = "screenName";
  @SerializedName(SERIALIZED_NAME_SCREEN_NAME)
  private String screenName;

  public static final String SERIALIZED_NAME_VALID_SINCE = "validSince";
  @SerializedName(SERIALIZED_NAME_VALID_SINCE)
  private String validSince;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public UserInfo() {
  }

  public UserInfo createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * User creation timestamp.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public UserInfo customAttributes(String customAttributes) {
    this.customAttributes = customAttributes;
    return this;
  }

  /**
   * The custom attributes to be set in the user&#39;s id token.
   * @return customAttributes
   */
  @javax.annotation.Nullable
  public String getCustomAttributes() {
    return customAttributes;
  }

  public void setCustomAttributes(String customAttributes) {
    this.customAttributes = customAttributes;
  }


  public UserInfo customAuth(Boolean customAuth) {
    this.customAuth = customAuth;
    return this;
  }

  /**
   * Whether the user is authenticated by the developer.
   * @return customAuth
   */
  @javax.annotation.Nullable
  public Boolean getCustomAuth() {
    return customAuth;
  }

  public void setCustomAuth(Boolean customAuth) {
    this.customAuth = customAuth;
  }


  public UserInfo disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the user is disabled.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public UserInfo displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the user.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public UserInfo email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserInfo emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

  /**
   * Whether the email has been verified.
   * @return emailVerified
   */
  @javax.annotation.Nullable
  public Boolean getEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public UserInfo lastLoginAt(String lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
    return this;
  }

  /**
   * last login timestamp.
   * @return lastLoginAt
   */
  @javax.annotation.Nullable
  public String getLastLoginAt() {
    return lastLoginAt;
  }

  public void setLastLoginAt(String lastLoginAt) {
    this.lastLoginAt = lastLoginAt;
  }


  public UserInfo localId(String localId) {
    this.localId = localId;
    return this;
  }

  /**
   * The local ID of the user.
   * @return localId
   */
  @javax.annotation.Nullable
  public String getLocalId() {
    return localId;
  }

  public void setLocalId(String localId) {
    this.localId = localId;
  }


  public UserInfo passwordHash(byte[] passwordHash) {
    this.passwordHash = passwordHash;
    return this;
  }

  /**
   * The user&#39;s hashed password.
   * @return passwordHash
   */
  @javax.annotation.Nullable
  public byte[] getPasswordHash() {
    return passwordHash;
  }

  public void setPasswordHash(byte[] passwordHash) {
    this.passwordHash = passwordHash;
  }


  public UserInfo passwordUpdatedAt(Double passwordUpdatedAt) {
    this.passwordUpdatedAt = passwordUpdatedAt;
    return this;
  }

  /**
   * The timestamp when the password was last updated.
   * @return passwordUpdatedAt
   */
  @javax.annotation.Nullable
  public Double getPasswordUpdatedAt() {
    return passwordUpdatedAt;
  }

  public void setPasswordUpdatedAt(Double passwordUpdatedAt) {
    this.passwordUpdatedAt = passwordUpdatedAt;
  }


  public UserInfo phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * User&#39;s phone number.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public UserInfo photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * The URL of the user profile photo.
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public UserInfo providerUserInfo(List<UserInfoProviderUserInfoInner> providerUserInfo) {
    this.providerUserInfo = providerUserInfo;
    return this;
  }

  public UserInfo addProviderUserInfoItem(UserInfoProviderUserInfoInner providerUserInfoItem) {
    if (this.providerUserInfo == null) {
      this.providerUserInfo = new ArrayList<>();
    }
    this.providerUserInfo.add(providerUserInfoItem);
    return this;
  }

  /**
   * The IDP of the user.
   * @return providerUserInfo
   */
  @javax.annotation.Nullable
  public List<UserInfoProviderUserInfoInner> getProviderUserInfo() {
    return providerUserInfo;
  }

  public void setProviderUserInfo(List<UserInfoProviderUserInfoInner> providerUserInfo) {
    this.providerUserInfo = providerUserInfo;
  }


  public UserInfo rawPassword(String rawPassword) {
    this.rawPassword = rawPassword;
    return this;
  }

  /**
   * The user&#39;s plain text password.
   * @return rawPassword
   */
  @javax.annotation.Nullable
  public String getRawPassword() {
    return rawPassword;
  }

  public void setRawPassword(String rawPassword) {
    this.rawPassword = rawPassword;
  }


  public UserInfo salt(byte[] salt) {
    this.salt = salt;
    return this;
  }

  /**
   * The user&#39;s password salt.
   * @return salt
   */
  @javax.annotation.Nullable
  public byte[] getSalt() {
    return salt;
  }

  public void setSalt(byte[] salt) {
    this.salt = salt;
  }


  public UserInfo screenName(String screenName) {
    this.screenName = screenName;
    return this;
  }

  /**
   * User&#39;s screen name at Twitter or login name at Github.
   * @return screenName
   */
  @javax.annotation.Nullable
  public String getScreenName() {
    return screenName;
  }

  public void setScreenName(String screenName) {
    this.screenName = screenName;
  }


  public UserInfo validSince(String validSince) {
    this.validSince = validSince;
    return this;
  }

  /**
   * Timestamp in seconds for valid login token.
   * @return validSince
   */
  @javax.annotation.Nullable
  public String getValidSince() {
    return validSince;
  }

  public void setValidSince(String validSince) {
    this.validSince = validSince;
  }


  public UserInfo version(Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Version of the user&#39;s password.
   * @return version
   */
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }

  public void setVersion(Integer version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserInfo userInfo = (UserInfo) o;
    return Objects.equals(this.createdAt, userInfo.createdAt) &&
        Objects.equals(this.customAttributes, userInfo.customAttributes) &&
        Objects.equals(this.customAuth, userInfo.customAuth) &&
        Objects.equals(this.disabled, userInfo.disabled) &&
        Objects.equals(this.displayName, userInfo.displayName) &&
        Objects.equals(this.email, userInfo.email) &&
        Objects.equals(this.emailVerified, userInfo.emailVerified) &&
        Objects.equals(this.lastLoginAt, userInfo.lastLoginAt) &&
        Objects.equals(this.localId, userInfo.localId) &&
        Arrays.equals(this.passwordHash, userInfo.passwordHash) &&
        Objects.equals(this.passwordUpdatedAt, userInfo.passwordUpdatedAt) &&
        Objects.equals(this.phoneNumber, userInfo.phoneNumber) &&
        Objects.equals(this.photoUrl, userInfo.photoUrl) &&
        Objects.equals(this.providerUserInfo, userInfo.providerUserInfo) &&
        Objects.equals(this.rawPassword, userInfo.rawPassword) &&
        Arrays.equals(this.salt, userInfo.salt) &&
        Objects.equals(this.screenName, userInfo.screenName) &&
        Objects.equals(this.validSince, userInfo.validSince) &&
        Objects.equals(this.version, userInfo.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, customAttributes, customAuth, disabled, displayName, email, emailVerified, lastLoginAt, localId, Arrays.hashCode(passwordHash), passwordUpdatedAt, phoneNumber, photoUrl, providerUserInfo, rawPassword, Arrays.hashCode(salt), screenName, validSince, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserInfo {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    customAuth: ").append(toIndentedString(customAuth)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    lastLoginAt: ").append(toIndentedString(lastLoginAt)).append("\n");
    sb.append("    localId: ").append(toIndentedString(localId)).append("\n");
    sb.append("    passwordHash: ").append(toIndentedString(passwordHash)).append("\n");
    sb.append("    passwordUpdatedAt: ").append(toIndentedString(passwordUpdatedAt)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    providerUserInfo: ").append(toIndentedString(providerUserInfo)).append("\n");
    sb.append("    rawPassword: ").append(toIndentedString(rawPassword)).append("\n");
    sb.append("    salt: ").append(toIndentedString(salt)).append("\n");
    sb.append("    screenName: ").append(toIndentedString(screenName)).append("\n");
    sb.append("    validSince: ").append(toIndentedString(validSince)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("customAttributes");
    openapiFields.add("customAuth");
    openapiFields.add("disabled");
    openapiFields.add("displayName");
    openapiFields.add("email");
    openapiFields.add("emailVerified");
    openapiFields.add("lastLoginAt");
    openapiFields.add("localId");
    openapiFields.add("passwordHash");
    openapiFields.add("passwordUpdatedAt");
    openapiFields.add("phoneNumber");
    openapiFields.add("photoUrl");
    openapiFields.add("providerUserInfo");
    openapiFields.add("rawPassword");
    openapiFields.add("salt");
    openapiFields.add("screenName");
    openapiFields.add("validSince");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserInfo is not found in the empty JSON string", UserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("customAttributes") != null && !jsonObj.get("customAttributes").isJsonNull()) && !jsonObj.get("customAttributes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customAttributes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customAttributes").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("lastLoginAt") != null && !jsonObj.get("lastLoginAt").isJsonNull()) && !jsonObj.get("lastLoginAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastLoginAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastLoginAt").toString()));
      }
      if ((jsonObj.get("localId") != null && !jsonObj.get("localId").isJsonNull()) && !jsonObj.get("localId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localId").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if ((jsonObj.get("photoUrl") != null && !jsonObj.get("photoUrl").isJsonNull()) && !jsonObj.get("photoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `photoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("photoUrl").toString()));
      }
      if (jsonObj.get("providerUserInfo") != null && !jsonObj.get("providerUserInfo").isJsonNull()) {
        JsonArray jsonArrayproviderUserInfo = jsonObj.getAsJsonArray("providerUserInfo");
        if (jsonArrayproviderUserInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providerUserInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providerUserInfo` to be an array in the JSON string but got `%s`", jsonObj.get("providerUserInfo").toString()));
          }

          // validate the optional field `providerUserInfo` (array)
          for (int i = 0; i < jsonArrayproviderUserInfo.size(); i++) {
            UserInfoProviderUserInfoInner.validateJsonElement(jsonArrayproviderUserInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("rawPassword") != null && !jsonObj.get("rawPassword").isJsonNull()) && !jsonObj.get("rawPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawPassword").toString()));
      }
      if ((jsonObj.get("screenName") != null && !jsonObj.get("screenName").isJsonNull()) && !jsonObj.get("screenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenName").toString()));
      }
      if ((jsonObj.get("validSince") != null && !jsonObj.get("validSince").isJsonNull()) && !jsonObj.get("validSince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validSince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validSince").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UserInfo>() {
           @Override
           public void write(JsonWriter out, UserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserInfo
   * @throws IOException if the JSON string is invalid with respect to UserInfo
   */
  public static UserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserInfo.class);
  }

  /**
   * Convert an instance of UserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

