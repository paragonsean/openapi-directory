/*
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAuthUriResponse;
import org.openapitools.client.model.DeleteAccountResponse;
import org.openapitools.client.model.DownloadAccountResponse;
import org.openapitools.client.model.EmailLinkSigninResponse;
import org.openapitools.client.model.GetAccountInfoResponse;
import org.openapitools.client.model.GetOobConfirmationCodeResponse;
import org.openapitools.client.model.GetRecaptchaParamResponse;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyCreateAuthUriRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyDeleteAccountRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyDownloadAccountRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyEmailLinkSigninRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyGetAccountInfoRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyGetProjectConfigResponse;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyResetPasswordRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySendVerificationCodeRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySendVerificationCodeResponse;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySetAccountInfoRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySetProjectConfigRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySetProjectConfigResponse;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySignOutUserRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySignOutUserResponse;
import org.openapitools.client.model.IdentitytoolkitRelyingpartySignupNewUserRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyUploadAccountRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyVerifyAssertionRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyVerifyCustomTokenRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyVerifyPasswordRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest;
import org.openapitools.client.model.IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse;
import org.openapitools.client.model.Relyingparty;
import org.openapitools.client.model.ResetPasswordResponse;
import org.openapitools.client.model.SetAccountInfoResponse;
import org.openapitools.client.model.SignupNewUserResponse;
import org.openapitools.client.model.UploadAccountResponse;
import org.openapitools.client.model.VerifyAssertionResponse;
import org.openapitools.client.model.VerifyCustomTokenResponse;
import org.openapitools.client.model.VerifyPasswordResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RelyingpartyApi
 */
@Disabled
public class RelyingpartyApiTest {

    private final RelyingpartyApi api = new RelyingpartyApi();

    /**
     * Creates the URI used by the IdP to authenticate the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyCreateAuthUriTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyCreateAuthUriRequest identitytoolkitRelyingpartyCreateAuthUriRequest = null;
        CreateAuthUriResponse response = api.identitytoolkitRelyingpartyCreateAuthUri(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyCreateAuthUriRequest);
        // TODO: test validations
    }

    /**
     * Delete user account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyDeleteAccountTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyDeleteAccountRequest identitytoolkitRelyingpartyDeleteAccountRequest = null;
        DeleteAccountResponse response = api.identitytoolkitRelyingpartyDeleteAccount(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyDeleteAccountRequest);
        // TODO: test validations
    }

    /**
     * Batch download user accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyDownloadAccountTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyDownloadAccountRequest identitytoolkitRelyingpartyDownloadAccountRequest = null;
        DownloadAccountResponse response = api.identitytoolkitRelyingpartyDownloadAccount(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyDownloadAccountRequest);
        // TODO: test validations
    }

    /**
     * Reset password for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyEmailLinkSigninTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyEmailLinkSigninRequest identitytoolkitRelyingpartyEmailLinkSigninRequest = null;
        EmailLinkSigninResponse response = api.identitytoolkitRelyingpartyEmailLinkSignin(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyEmailLinkSigninRequest);
        // TODO: test validations
    }

    /**
     * Returns the account info.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyGetAccountInfoTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyGetAccountInfoRequest identitytoolkitRelyingpartyGetAccountInfoRequest = null;
        GetAccountInfoResponse response = api.identitytoolkitRelyingpartyGetAccountInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyGetAccountInfoRequest);
        // TODO: test validations
    }

    /**
     * Get a code for user action confirmation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyGetOobConfirmationCodeTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Relyingparty relyingparty = null;
        GetOobConfirmationCodeResponse response = api.identitytoolkitRelyingpartyGetOobConfirmationCode(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, relyingparty);
        // TODO: test validations
    }

    /**
     * Get project configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyGetProjectConfigTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String delegatedProjectNumber = null;
        String projectNumber = null;
        IdentitytoolkitRelyingpartyGetProjectConfigResponse response = api.identitytoolkitRelyingpartyGetProjectConfig(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, delegatedProjectNumber, projectNumber);
        // TODO: test validations
    }

    /**
     * Get token signing public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyGetPublicKeysTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Map<String, String> response = api.identitytoolkitRelyingpartyGetPublicKeys(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Get recaptcha secure param.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyGetRecaptchaParamTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        GetRecaptchaParamResponse response = api.identitytoolkitRelyingpartyGetRecaptchaParam(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Reset password for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyResetPasswordTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyResetPasswordRequest identitytoolkitRelyingpartyResetPasswordRequest = null;
        ResetPasswordResponse response = api.identitytoolkitRelyingpartyResetPassword(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyResetPasswordRequest);
        // TODO: test validations
    }

    /**
     * Send SMS verification code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartySendVerificationCodeTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartySendVerificationCodeRequest identitytoolkitRelyingpartySendVerificationCodeRequest = null;
        IdentitytoolkitRelyingpartySendVerificationCodeResponse response = api.identitytoolkitRelyingpartySendVerificationCode(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartySendVerificationCodeRequest);
        // TODO: test validations
    }

    /**
     * Set account info for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartySetAccountInfoTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartySetAccountInfoRequest identitytoolkitRelyingpartySetAccountInfoRequest = null;
        SetAccountInfoResponse response = api.identitytoolkitRelyingpartySetAccountInfo(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartySetAccountInfoRequest);
        // TODO: test validations
    }

    /**
     * Set project configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartySetProjectConfigTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartySetProjectConfigRequest identitytoolkitRelyingpartySetProjectConfigRequest = null;
        IdentitytoolkitRelyingpartySetProjectConfigResponse response = api.identitytoolkitRelyingpartySetProjectConfig(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartySetProjectConfigRequest);
        // TODO: test validations
    }

    /**
     * Sign out user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartySignOutUserTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartySignOutUserRequest identitytoolkitRelyingpartySignOutUserRequest = null;
        IdentitytoolkitRelyingpartySignOutUserResponse response = api.identitytoolkitRelyingpartySignOutUser(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartySignOutUserRequest);
        // TODO: test validations
    }

    /**
     * Signup new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartySignupNewUserTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartySignupNewUserRequest identitytoolkitRelyingpartySignupNewUserRequest = null;
        SignupNewUserResponse response = api.identitytoolkitRelyingpartySignupNewUser(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartySignupNewUserRequest);
        // TODO: test validations
    }

    /**
     * Batch upload existing user accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyUploadAccountTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyUploadAccountRequest identitytoolkitRelyingpartyUploadAccountRequest = null;
        UploadAccountResponse response = api.identitytoolkitRelyingpartyUploadAccount(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyUploadAccountRequest);
        // TODO: test validations
    }

    /**
     * Verifies the assertion returned by the IdP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyVerifyAssertionTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyVerifyAssertionRequest identitytoolkitRelyingpartyVerifyAssertionRequest = null;
        VerifyAssertionResponse response = api.identitytoolkitRelyingpartyVerifyAssertion(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyVerifyAssertionRequest);
        // TODO: test validations
    }

    /**
     * Verifies the developer asserted ID token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyVerifyCustomTokenTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyVerifyCustomTokenRequest identitytoolkitRelyingpartyVerifyCustomTokenRequest = null;
        VerifyCustomTokenResponse response = api.identitytoolkitRelyingpartyVerifyCustomToken(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyVerifyCustomTokenRequest);
        // TODO: test validations
    }

    /**
     * Verifies the user entered password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyVerifyPasswordTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyVerifyPasswordRequest identitytoolkitRelyingpartyVerifyPasswordRequest = null;
        VerifyPasswordResponse response = api.identitytoolkitRelyingpartyVerifyPassword(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyVerifyPasswordRequest);
        // TODO: test validations
    }

    /**
     * Verifies ownership of a phone number and creates/updates the user account accordingly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitRelyingpartyVerifyPhoneNumberTest() throws ApiException {
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest identitytoolkitRelyingpartyVerifyPhoneNumberRequest = null;
        IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse response = api.identitytoolkitRelyingpartyVerifyPhoneNumber(alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, identitytoolkitRelyingpartyVerifyPhoneNumberRequest);
        // TODO: test validations
    }

}
