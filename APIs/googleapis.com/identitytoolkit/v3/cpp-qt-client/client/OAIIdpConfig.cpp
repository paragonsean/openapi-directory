/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdpConfig::OAIIdpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdpConfig::OAIIdpConfig() {
    this->initializeModel();
}

OAIIdpConfig::~OAIIdpConfig() {}

void OAIIdpConfig::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_experiment_percent_isSet = false;
    m_experiment_percent_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_whitelisted_audiences_isSet = false;
    m_whitelisted_audiences_isValid = false;
}

void OAIIdpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdpConfig::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_experiment_percent_isValid = ::OpenAPI::fromJsonValue(m_experiment_percent, json[QString("experimentPercent")]);
    m_experiment_percent_isSet = !json[QString("experimentPercent")].isNull() && m_experiment_percent_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_whitelisted_audiences_isValid = ::OpenAPI::fromJsonValue(m_whitelisted_audiences, json[QString("whitelistedAudiences")]);
    m_whitelisted_audiences_isSet = !json[QString("whitelistedAudiences")].isNull() && m_whitelisted_audiences_isValid;
}

QString OAIIdpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_experiment_percent_isSet) {
        obj.insert(QString("experimentPercent"), ::OpenAPI::toJsonValue(m_experiment_percent));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_whitelisted_audiences.size() > 0) {
        obj.insert(QString("whitelistedAudiences"), ::OpenAPI::toJsonValue(m_whitelisted_audiences));
    }
    return obj;
}

QString OAIIdpConfig::getClientId() const {
    return m_client_id;
}
void OAIIdpConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdpConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdpConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

bool OAIIdpConfig::isEnabled() const {
    return m_enabled;
}
void OAIIdpConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIIdpConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIIdpConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIIdpConfig::getExperimentPercent() const {
    return m_experiment_percent;
}
void OAIIdpConfig::setExperimentPercent(const qint32 &experiment_percent) {
    m_experiment_percent = experiment_percent;
    m_experiment_percent_isSet = true;
}

bool OAIIdpConfig::is_experiment_percent_Set() const{
    return m_experiment_percent_isSet;
}

bool OAIIdpConfig::is_experiment_percent_Valid() const{
    return m_experiment_percent_isValid;
}

QString OAIIdpConfig::getProvider() const {
    return m_provider;
}
void OAIIdpConfig::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIIdpConfig::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIdpConfig::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIIdpConfig::getSecret() const {
    return m_secret;
}
void OAIIdpConfig::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIIdpConfig::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIIdpConfig::is_secret_Valid() const{
    return m_secret_isValid;
}

QList<QString> OAIIdpConfig::getWhitelistedAudiences() const {
    return m_whitelisted_audiences;
}
void OAIIdpConfig::setWhitelistedAudiences(const QList<QString> &whitelisted_audiences) {
    m_whitelisted_audiences = whitelisted_audiences;
    m_whitelisted_audiences_isSet = true;
}

bool OAIIdpConfig::is_whitelisted_audiences_Set() const{
    return m_whitelisted_audiences_isSet;
}

bool OAIIdpConfig::is_whitelisted_audiences_Valid() const{
    return m_whitelisted_audiences_isValid;
}

bool OAIIdpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_whitelisted_audiences.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
