/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::~OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest() {}

void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::initializeModel() {

    m_ios_receipt_isSet = false;
    m_ios_receipt_isValid = false;

    m_ios_secret_isSet = false;
    m_ios_secret_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_recaptcha_token_isSet = false;
    m_recaptcha_token_isValid = false;
}

void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::fromJsonObject(QJsonObject json) {

    m_ios_receipt_isValid = ::OpenAPI::fromJsonValue(m_ios_receipt, json[QString("iosReceipt")]);
    m_ios_receipt_isSet = !json[QString("iosReceipt")].isNull() && m_ios_receipt_isValid;

    m_ios_secret_isValid = ::OpenAPI::fromJsonValue(m_ios_secret, json[QString("iosSecret")]);
    m_ios_secret_isSet = !json[QString("iosSecret")].isNull() && m_ios_secret_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_recaptcha_token_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_token, json[QString("recaptchaToken")]);
    m_recaptcha_token_isSet = !json[QString("recaptchaToken")].isNull() && m_recaptcha_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ios_receipt_isSet) {
        obj.insert(QString("iosReceipt"), ::OpenAPI::toJsonValue(m_ios_receipt));
    }
    if (m_ios_secret_isSet) {
        obj.insert(QString("iosSecret"), ::OpenAPI::toJsonValue(m_ios_secret));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_recaptcha_token_isSet) {
        obj.insert(QString("recaptchaToken"), ::OpenAPI::toJsonValue(m_recaptcha_token));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::getIosReceipt() const {
    return m_ios_receipt;
}
void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::setIosReceipt(const QString &ios_receipt) {
    m_ios_receipt = ios_receipt;
    m_ios_receipt_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_ios_receipt_Set() const{
    return m_ios_receipt_isSet;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_ios_receipt_Valid() const{
    return m_ios_receipt_isValid;
}

QString OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::getIosSecret() const {
    return m_ios_secret;
}
void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::setIosSecret(const QString &ios_secret) {
    m_ios_secret = ios_secret;
    m_ios_secret_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_ios_secret_Set() const{
    return m_ios_secret_isSet;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_ios_secret_Valid() const{
    return m_ios_secret_isValid;
}

QString OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::getRecaptchaToken() const {
    return m_recaptcha_token;
}
void OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::setRecaptchaToken(const QString &recaptcha_token) {
    m_recaptcha_token = recaptcha_token;
    m_recaptcha_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_recaptcha_token_Set() const{
    return m_recaptcha_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::is_recaptcha_token_Valid() const{
    return m_recaptcha_token_isValid;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ios_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
