/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo::OAIUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo::OAIUserInfo() {
    this->initializeModel();
}

OAIUserInfo::~OAIUserInfo() {}

void OAIUserInfo::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_custom_auth_isSet = false;
    m_custom_auth_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_last_login_at_isSet = false;
    m_last_login_at_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_password_hash_isSet = false;
    m_password_hash_isValid = false;

    m_password_updated_at_isSet = false;
    m_password_updated_at_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_provider_user_info_isSet = false;
    m_provider_user_info_isValid = false;

    m_raw_password_isSet = false;
    m_raw_password_isValid = false;

    m_salt_isSet = false;
    m_salt_isValid = false;

    m_screen_name_isSet = false;
    m_screen_name_isValid = false;

    m_valid_since_isSet = false;
    m_valid_since_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("customAttributes")]);
    m_custom_attributes_isSet = !json[QString("customAttributes")].isNull() && m_custom_attributes_isValid;

    m_custom_auth_isValid = ::OpenAPI::fromJsonValue(m_custom_auth, json[QString("customAuth")]);
    m_custom_auth_isSet = !json[QString("customAuth")].isNull() && m_custom_auth_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_last_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_login_at, json[QString("lastLoginAt")]);
    m_last_login_at_isSet = !json[QString("lastLoginAt")].isNull() && m_last_login_at_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_password_hash_isValid = ::OpenAPI::fromJsonValue(m_password_hash, json[QString("passwordHash")]);
    m_password_hash_isSet = !json[QString("passwordHash")].isNull() && m_password_hash_isValid;

    m_password_updated_at_isValid = ::OpenAPI::fromJsonValue(m_password_updated_at, json[QString("passwordUpdatedAt")]);
    m_password_updated_at_isSet = !json[QString("passwordUpdatedAt")].isNull() && m_password_updated_at_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_provider_user_info_isValid = ::OpenAPI::fromJsonValue(m_provider_user_info, json[QString("providerUserInfo")]);
    m_provider_user_info_isSet = !json[QString("providerUserInfo")].isNull() && m_provider_user_info_isValid;

    m_raw_password_isValid = ::OpenAPI::fromJsonValue(m_raw_password, json[QString("rawPassword")]);
    m_raw_password_isSet = !json[QString("rawPassword")].isNull() && m_raw_password_isValid;

    m_salt_isValid = ::OpenAPI::fromJsonValue(m_salt, json[QString("salt")]);
    m_salt_isSet = !json[QString("salt")].isNull() && m_salt_isValid;

    m_screen_name_isValid = ::OpenAPI::fromJsonValue(m_screen_name, json[QString("screenName")]);
    m_screen_name_isSet = !json[QString("screenName")].isNull() && m_screen_name_isValid;

    m_valid_since_isValid = ::OpenAPI::fromJsonValue(m_valid_since, json[QString("validSince")]);
    m_valid_since_isSet = !json[QString("validSince")].isNull() && m_valid_since_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_attributes_isSet) {
        obj.insert(QString("customAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_custom_auth_isSet) {
        obj.insert(QString("customAuth"), ::OpenAPI::toJsonValue(m_custom_auth));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_last_login_at_isSet) {
        obj.insert(QString("lastLoginAt"), ::OpenAPI::toJsonValue(m_last_login_at));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_password_hash_isSet) {
        obj.insert(QString("passwordHash"), ::OpenAPI::toJsonValue(m_password_hash));
    }
    if (m_password_updated_at_isSet) {
        obj.insert(QString("passwordUpdatedAt"), ::OpenAPI::toJsonValue(m_password_updated_at));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_provider_user_info.size() > 0) {
        obj.insert(QString("providerUserInfo"), ::OpenAPI::toJsonValue(m_provider_user_info));
    }
    if (m_raw_password_isSet) {
        obj.insert(QString("rawPassword"), ::OpenAPI::toJsonValue(m_raw_password));
    }
    if (m_salt_isSet) {
        obj.insert(QString("salt"), ::OpenAPI::toJsonValue(m_salt));
    }
    if (m_screen_name_isSet) {
        obj.insert(QString("screenName"), ::OpenAPI::toJsonValue(m_screen_name));
    }
    if (m_valid_since_isSet) {
        obj.insert(QString("validSince"), ::OpenAPI::toJsonValue(m_valid_since));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIUserInfo::getCreatedAt() const {
    return m_created_at;
}
void OAIUserInfo::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserInfo::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserInfo::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUserInfo::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIUserInfo::setCustomAttributes(const QString &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIUserInfo::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIUserInfo::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

bool OAIUserInfo::isCustomAuth() const {
    return m_custom_auth;
}
void OAIUserInfo::setCustomAuth(const bool &custom_auth) {
    m_custom_auth = custom_auth;
    m_custom_auth_isSet = true;
}

bool OAIUserInfo::is_custom_auth_Set() const{
    return m_custom_auth_isSet;
}

bool OAIUserInfo::is_custom_auth_Valid() const{
    return m_custom_auth_isValid;
}

bool OAIUserInfo::isDisabled() const {
    return m_disabled;
}
void OAIUserInfo::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIUserInfo::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIUserInfo::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIUserInfo::getDisplayName() const {
    return m_display_name;
}
void OAIUserInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserInfo::getEmail() const {
    return m_email;
}
void OAIUserInfo::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserInfo::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserInfo::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUserInfo::isEmailVerified() const {
    return m_email_verified;
}
void OAIUserInfo::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIUserInfo::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIUserInfo::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAIUserInfo::getLastLoginAt() const {
    return m_last_login_at;
}
void OAIUserInfo::setLastLoginAt(const QString &last_login_at) {
    m_last_login_at = last_login_at;
    m_last_login_at_isSet = true;
}

bool OAIUserInfo::is_last_login_at_Set() const{
    return m_last_login_at_isSet;
}

bool OAIUserInfo::is_last_login_at_Valid() const{
    return m_last_login_at_isValid;
}

QString OAIUserInfo::getLocalId() const {
    return m_local_id;
}
void OAIUserInfo::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIUserInfo::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIUserInfo::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QByteArray OAIUserInfo::getPasswordHash() const {
    return m_password_hash;
}
void OAIUserInfo::setPasswordHash(const QByteArray &password_hash) {
    m_password_hash = password_hash;
    m_password_hash_isSet = true;
}

bool OAIUserInfo::is_password_hash_Set() const{
    return m_password_hash_isSet;
}

bool OAIUserInfo::is_password_hash_Valid() const{
    return m_password_hash_isValid;
}

double OAIUserInfo::getPasswordUpdatedAt() const {
    return m_password_updated_at;
}
void OAIUserInfo::setPasswordUpdatedAt(const double &password_updated_at) {
    m_password_updated_at = password_updated_at;
    m_password_updated_at_isSet = true;
}

bool OAIUserInfo::is_password_updated_at_Set() const{
    return m_password_updated_at_isSet;
}

bool OAIUserInfo::is_password_updated_at_Valid() const{
    return m_password_updated_at_isValid;
}

QString OAIUserInfo::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUserInfo::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUserInfo::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUserInfo::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIUserInfo::getPhotoUrl() const {
    return m_photo_url;
}
void OAIUserInfo::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIUserInfo::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIUserInfo::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QList<OAIUserInfo_providerUserInfo_inner> OAIUserInfo::getProviderUserInfo() const {
    return m_provider_user_info;
}
void OAIUserInfo::setProviderUserInfo(const QList<OAIUserInfo_providerUserInfo_inner> &provider_user_info) {
    m_provider_user_info = provider_user_info;
    m_provider_user_info_isSet = true;
}

bool OAIUserInfo::is_provider_user_info_Set() const{
    return m_provider_user_info_isSet;
}

bool OAIUserInfo::is_provider_user_info_Valid() const{
    return m_provider_user_info_isValid;
}

QString OAIUserInfo::getRawPassword() const {
    return m_raw_password;
}
void OAIUserInfo::setRawPassword(const QString &raw_password) {
    m_raw_password = raw_password;
    m_raw_password_isSet = true;
}

bool OAIUserInfo::is_raw_password_Set() const{
    return m_raw_password_isSet;
}

bool OAIUserInfo::is_raw_password_Valid() const{
    return m_raw_password_isValid;
}

QByteArray OAIUserInfo::getSalt() const {
    return m_salt;
}
void OAIUserInfo::setSalt(const QByteArray &salt) {
    m_salt = salt;
    m_salt_isSet = true;
}

bool OAIUserInfo::is_salt_Set() const{
    return m_salt_isSet;
}

bool OAIUserInfo::is_salt_Valid() const{
    return m_salt_isValid;
}

QString OAIUserInfo::getScreenName() const {
    return m_screen_name;
}
void OAIUserInfo::setScreenName(const QString &screen_name) {
    m_screen_name = screen_name;
    m_screen_name_isSet = true;
}

bool OAIUserInfo::is_screen_name_Set() const{
    return m_screen_name_isSet;
}

bool OAIUserInfo::is_screen_name_Valid() const{
    return m_screen_name_isValid;
}

QString OAIUserInfo::getValidSince() const {
    return m_valid_since;
}
void OAIUserInfo::setValidSince(const QString &valid_since) {
    m_valid_since = valid_since;
    m_valid_since_isSet = true;
}

bool OAIUserInfo::is_valid_since_Set() const{
    return m_valid_since_isSet;
}

bool OAIUserInfo::is_valid_since_Valid() const{
    return m_valid_since_isValid;
}

qint32 OAIUserInfo::getVersion() const {
    return m_version;
}
void OAIUserInfo::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUserInfo::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUserInfo::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_user_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
