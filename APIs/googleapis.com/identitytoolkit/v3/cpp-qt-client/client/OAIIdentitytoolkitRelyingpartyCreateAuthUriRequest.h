/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest.h
 *
 * Request to get the IDP authentication URL.
 */

#ifndef OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest_H
#define OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest : public OAIObject {
public:
    OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest();
    OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest(QString json);
    ~OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    QString getAuthFlowType() const;
    void setAuthFlowType(const QString &auth_flow_type);
    bool is_auth_flow_type_Set() const;
    bool is_auth_flow_type_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getContext() const;
    void setContext(const QString &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QString getContinueUri() const;
    void setContinueUri(const QString &continue_uri);
    bool is_continue_uri_Set() const;
    bool is_continue_uri_Valid() const;

    QMap<QString, QString> getCustomParameter() const;
    void setCustomParameter(const QMap<QString, QString> &custom_parameter);
    bool is_custom_parameter_Set() const;
    bool is_custom_parameter_Valid() const;

    QString getHostedDomain() const;
    void setHostedDomain(const QString &hosted_domain);
    bool is_hosted_domain_Set() const;
    bool is_hosted_domain_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QString getOauthConsumerKey() const;
    void setOauthConsumerKey(const QString &oauth_consumer_key);
    bool is_oauth_consumer_key_Set() const;
    bool is_oauth_consumer_key_Valid() const;

    QString getOauthScope() const;
    void setOauthScope(const QString &oauth_scope);
    bool is_oauth_scope_Set() const;
    bool is_oauth_scope_Valid() const;

    QString getOpenidRealm() const;
    void setOpenidRealm(const QString &openid_realm);
    bool is_openid_realm_Set() const;
    bool is_openid_realm_Valid() const;

    QString getOtaApp() const;
    void setOtaApp(const QString &ota_app);
    bool is_ota_app_Set() const;
    bool is_ota_app_Valid() const;

    QString getProviderId() const;
    void setProviderId(const QString &provider_id);
    bool is_provider_id_Set() const;
    bool is_provider_id_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QString getTenantId() const;
    void setTenantId(const QString &tenant_id);
    bool is_tenant_id_Set() const;
    bool is_tenant_id_Valid() const;

    QString getTenantProjectNumber() const;
    void setTenantProjectNumber(const QString &tenant_project_number);
    bool is_tenant_project_number_Set() const;
    bool is_tenant_project_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    QString m_auth_flow_type;
    bool m_auth_flow_type_isSet;
    bool m_auth_flow_type_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QString m_continue_uri;
    bool m_continue_uri_isSet;
    bool m_continue_uri_isValid;

    QMap<QString, QString> m_custom_parameter;
    bool m_custom_parameter_isSet;
    bool m_custom_parameter_isValid;

    QString m_hosted_domain;
    bool m_hosted_domain_isSet;
    bool m_hosted_domain_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QString m_oauth_consumer_key;
    bool m_oauth_consumer_key_isSet;
    bool m_oauth_consumer_key_isValid;

    QString m_oauth_scope;
    bool m_oauth_scope_isSet;
    bool m_oauth_scope_isValid;

    QString m_openid_realm;
    bool m_openid_realm_isSet;
    bool m_openid_realm_isValid;

    QString m_ota_app;
    bool m_ota_app_isSet;
    bool m_ota_app_isValid;

    QString m_provider_id;
    bool m_provider_id_isSet;
    bool m_provider_id_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QString m_tenant_id;
    bool m_tenant_id_isSet;
    bool m_tenant_id_isValid;

    QString m_tenant_project_number;
    bool m_tenant_project_number_isSet;
    bool m_tenant_project_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest)

#endif // OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest_H
