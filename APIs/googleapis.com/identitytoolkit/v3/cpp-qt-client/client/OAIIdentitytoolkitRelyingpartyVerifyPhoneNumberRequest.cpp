/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::~OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest() {}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_session_info_isSet = false;
    m_session_info_isValid = false;

    m_temporary_proof_isSet = false;
    m_temporary_proof_isValid = false;

    m_verification_proof_isSet = false;
    m_verification_proof_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_session_info_isValid = ::OpenAPI::fromJsonValue(m_session_info, json[QString("sessionInfo")]);
    m_session_info_isSet = !json[QString("sessionInfo")].isNull() && m_session_info_isValid;

    m_temporary_proof_isValid = ::OpenAPI::fromJsonValue(m_temporary_proof, json[QString("temporaryProof")]);
    m_temporary_proof_isSet = !json[QString("temporaryProof")].isNull() && m_temporary_proof_isValid;

    m_verification_proof_isValid = ::OpenAPI::fromJsonValue(m_verification_proof, json[QString("verificationProof")]);
    m_verification_proof_isSet = !json[QString("verificationProof")].isNull() && m_verification_proof_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_session_info_isSet) {
        obj.insert(QString("sessionInfo"), ::OpenAPI::toJsonValue(m_session_info));
    }
    if (m_temporary_proof_isSet) {
        obj.insert(QString("temporaryProof"), ::OpenAPI::toJsonValue(m_temporary_proof));
    }
    if (m_verification_proof_isSet) {
        obj.insert(QString("verificationProof"), ::OpenAPI::toJsonValue(m_verification_proof));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getCode() const {
    return m_code;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_code_Set() const{
    return m_code_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getOperation() const {
    return m_operation;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getSessionInfo() const {
    return m_session_info;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setSessionInfo(const QString &session_info) {
    m_session_info = session_info;
    m_session_info_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_session_info_Set() const{
    return m_session_info_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_session_info_Valid() const{
    return m_session_info_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getTemporaryProof() const {
    return m_temporary_proof;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setTemporaryProof(const QString &temporary_proof) {
    m_temporary_proof = temporary_proof;
    m_temporary_proof_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_temporary_proof_Set() const{
    return m_temporary_proof_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_temporary_proof_Valid() const{
    return m_temporary_proof_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::getVerificationProof() const {
    return m_verification_proof;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::setVerificationProof(const QString &verification_proof) {
    m_verification_proof = verification_proof;
    m_verification_proof_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_verification_proof_Set() const{
    return m_verification_proof_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::is_verification_proof_Valid() const{
    return m_verification_proof_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_proof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_proof_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
