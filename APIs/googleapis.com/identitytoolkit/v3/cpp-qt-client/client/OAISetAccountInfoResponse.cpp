/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetAccountInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetAccountInfoResponse::OAISetAccountInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetAccountInfoResponse::OAISetAccountInfoResponse() {
    this->initializeModel();
}

OAISetAccountInfoResponse::~OAISetAccountInfoResponse() {}

void OAISetAccountInfoResponse::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_new_email_isSet = false;
    m_new_email_isValid = false;

    m_password_hash_isSet = false;
    m_password_hash_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_provider_user_info_isSet = false;
    m_provider_user_info_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAISetAccountInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetAccountInfoResponse::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_new_email_isValid = ::OpenAPI::fromJsonValue(m_new_email, json[QString("newEmail")]);
    m_new_email_isSet = !json[QString("newEmail")].isNull() && m_new_email_isValid;

    m_password_hash_isValid = ::OpenAPI::fromJsonValue(m_password_hash, json[QString("passwordHash")]);
    m_password_hash_isSet = !json[QString("passwordHash")].isNull() && m_password_hash_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_provider_user_info_isValid = ::OpenAPI::fromJsonValue(m_provider_user_info, json[QString("providerUserInfo")]);
    m_provider_user_info_isSet = !json[QString("providerUserInfo")].isNull() && m_provider_user_info_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAISetAccountInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetAccountInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_new_email_isSet) {
        obj.insert(QString("newEmail"), ::OpenAPI::toJsonValue(m_new_email));
    }
    if (m_password_hash_isSet) {
        obj.insert(QString("passwordHash"), ::OpenAPI::toJsonValue(m_password_hash));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_provider_user_info.size() > 0) {
        obj.insert(QString("providerUserInfo"), ::OpenAPI::toJsonValue(m_provider_user_info));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAISetAccountInfoResponse::getDisplayName() const {
    return m_display_name;
}
void OAISetAccountInfoResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISetAccountInfoResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISetAccountInfoResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISetAccountInfoResponse::getEmail() const {
    return m_email;
}
void OAISetAccountInfoResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISetAccountInfoResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAISetAccountInfoResponse::is_email_Valid() const{
    return m_email_isValid;
}

bool OAISetAccountInfoResponse::isEmailVerified() const {
    return m_email_verified;
}
void OAISetAccountInfoResponse::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAISetAccountInfoResponse::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAISetAccountInfoResponse::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAISetAccountInfoResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAISetAccountInfoResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAISetAccountInfoResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAISetAccountInfoResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAISetAccountInfoResponse::getIdToken() const {
    return m_id_token;
}
void OAISetAccountInfoResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAISetAccountInfoResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAISetAccountInfoResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAISetAccountInfoResponse::getKind() const {
    return m_kind;
}
void OAISetAccountInfoResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISetAccountInfoResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISetAccountInfoResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISetAccountInfoResponse::getLocalId() const {
    return m_local_id;
}
void OAISetAccountInfoResponse::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAISetAccountInfoResponse::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAISetAccountInfoResponse::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAISetAccountInfoResponse::getNewEmail() const {
    return m_new_email;
}
void OAISetAccountInfoResponse::setNewEmail(const QString &new_email) {
    m_new_email = new_email;
    m_new_email_isSet = true;
}

bool OAISetAccountInfoResponse::is_new_email_Set() const{
    return m_new_email_isSet;
}

bool OAISetAccountInfoResponse::is_new_email_Valid() const{
    return m_new_email_isValid;
}

QByteArray OAISetAccountInfoResponse::getPasswordHash() const {
    return m_password_hash;
}
void OAISetAccountInfoResponse::setPasswordHash(const QByteArray &password_hash) {
    m_password_hash = password_hash;
    m_password_hash_isSet = true;
}

bool OAISetAccountInfoResponse::is_password_hash_Set() const{
    return m_password_hash_isSet;
}

bool OAISetAccountInfoResponse::is_password_hash_Valid() const{
    return m_password_hash_isValid;
}

QString OAISetAccountInfoResponse::getPhotoUrl() const {
    return m_photo_url;
}
void OAISetAccountInfoResponse::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAISetAccountInfoResponse::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAISetAccountInfoResponse::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QList<OAISetAccountInfoResponse_providerUserInfo_inner> OAISetAccountInfoResponse::getProviderUserInfo() const {
    return m_provider_user_info;
}
void OAISetAccountInfoResponse::setProviderUserInfo(const QList<OAISetAccountInfoResponse_providerUserInfo_inner> &provider_user_info) {
    m_provider_user_info = provider_user_info;
    m_provider_user_info_isSet = true;
}

bool OAISetAccountInfoResponse::is_provider_user_info_Set() const{
    return m_provider_user_info_isSet;
}

bool OAISetAccountInfoResponse::is_provider_user_info_Valid() const{
    return m_provider_user_info_isValid;
}

QString OAISetAccountInfoResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAISetAccountInfoResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAISetAccountInfoResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAISetAccountInfoResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAISetAccountInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_user_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetAccountInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
