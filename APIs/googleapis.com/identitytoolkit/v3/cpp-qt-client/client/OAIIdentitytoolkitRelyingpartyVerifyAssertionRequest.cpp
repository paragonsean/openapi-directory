/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::~OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest() {}

void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::initializeModel() {

    m_auto_create_isSet = false;
    m_auto_create_isValid = false;

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_pending_id_token_isSet = false;
    m_pending_id_token_isValid = false;

    m_post_body_isSet = false;
    m_post_body_isValid = false;

    m_request_uri_isSet = false;
    m_request_uri_isValid = false;

    m_return_idp_credential_isSet = false;
    m_return_idp_credential_isValid = false;

    m_return_refresh_token_isSet = false;
    m_return_refresh_token_isValid = false;

    m_return_secure_token_isSet = false;
    m_return_secure_token_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_tenant_project_number_isSet = false;
    m_tenant_project_number_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::fromJsonObject(QJsonObject json) {

    m_auto_create_isValid = ::OpenAPI::fromJsonValue(m_auto_create, json[QString("autoCreate")]);
    m_auto_create_isSet = !json[QString("autoCreate")].isNull() && m_auto_create_isValid;

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_pending_id_token_isValid = ::OpenAPI::fromJsonValue(m_pending_id_token, json[QString("pendingIdToken")]);
    m_pending_id_token_isSet = !json[QString("pendingIdToken")].isNull() && m_pending_id_token_isValid;

    m_post_body_isValid = ::OpenAPI::fromJsonValue(m_post_body, json[QString("postBody")]);
    m_post_body_isSet = !json[QString("postBody")].isNull() && m_post_body_isValid;

    m_request_uri_isValid = ::OpenAPI::fromJsonValue(m_request_uri, json[QString("requestUri")]);
    m_request_uri_isSet = !json[QString("requestUri")].isNull() && m_request_uri_isValid;

    m_return_idp_credential_isValid = ::OpenAPI::fromJsonValue(m_return_idp_credential, json[QString("returnIdpCredential")]);
    m_return_idp_credential_isSet = !json[QString("returnIdpCredential")].isNull() && m_return_idp_credential_isValid;

    m_return_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_return_refresh_token, json[QString("returnRefreshToken")]);
    m_return_refresh_token_isSet = !json[QString("returnRefreshToken")].isNull() && m_return_refresh_token_isValid;

    m_return_secure_token_isValid = ::OpenAPI::fromJsonValue(m_return_secure_token, json[QString("returnSecureToken")]);
    m_return_secure_token_isSet = !json[QString("returnSecureToken")].isNull() && m_return_secure_token_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_tenant_project_number_isValid = ::OpenAPI::fromJsonValue(m_tenant_project_number, json[QString("tenantProjectNumber")]);
    m_tenant_project_number_isSet = !json[QString("tenantProjectNumber")].isNull() && m_tenant_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_create_isSet) {
        obj.insert(QString("autoCreate"), ::OpenAPI::toJsonValue(m_auto_create));
    }
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_pending_id_token_isSet) {
        obj.insert(QString("pendingIdToken"), ::OpenAPI::toJsonValue(m_pending_id_token));
    }
    if (m_post_body_isSet) {
        obj.insert(QString("postBody"), ::OpenAPI::toJsonValue(m_post_body));
    }
    if (m_request_uri_isSet) {
        obj.insert(QString("requestUri"), ::OpenAPI::toJsonValue(m_request_uri));
    }
    if (m_return_idp_credential_isSet) {
        obj.insert(QString("returnIdpCredential"), ::OpenAPI::toJsonValue(m_return_idp_credential));
    }
    if (m_return_refresh_token_isSet) {
        obj.insert(QString("returnRefreshToken"), ::OpenAPI::toJsonValue(m_return_refresh_token));
    }
    if (m_return_secure_token_isSet) {
        obj.insert(QString("returnSecureToken"), ::OpenAPI::toJsonValue(m_return_secure_token));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_tenant_project_number_isSet) {
        obj.insert(QString("tenantProjectNumber"), ::OpenAPI::toJsonValue(m_tenant_project_number));
    }
    return obj;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isAutoCreate() const {
    return m_auto_create;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setAutoCreate(const bool &auto_create) {
    m_auto_create = auto_create;
    m_auto_create_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_auto_create_Set() const{
    return m_auto_create_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_auto_create_Valid() const{
    return m_auto_create_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getPendingIdToken() const {
    return m_pending_id_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setPendingIdToken(const QString &pending_id_token) {
    m_pending_id_token = pending_id_token;
    m_pending_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_pending_id_token_Set() const{
    return m_pending_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_pending_id_token_Valid() const{
    return m_pending_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getPostBody() const {
    return m_post_body;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setPostBody(const QString &post_body) {
    m_post_body = post_body;
    m_post_body_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_post_body_Set() const{
    return m_post_body_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_post_body_Valid() const{
    return m_post_body_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getRequestUri() const {
    return m_request_uri;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setRequestUri(const QString &request_uri) {
    m_request_uri = request_uri;
    m_request_uri_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_request_uri_Set() const{
    return m_request_uri_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_request_uri_Valid() const{
    return m_request_uri_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isReturnIdpCredential() const {
    return m_return_idp_credential;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setReturnIdpCredential(const bool &return_idp_credential) {
    m_return_idp_credential = return_idp_credential;
    m_return_idp_credential_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_idp_credential_Set() const{
    return m_return_idp_credential_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_idp_credential_Valid() const{
    return m_return_idp_credential_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isReturnRefreshToken() const {
    return m_return_refresh_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setReturnRefreshToken(const bool &return_refresh_token) {
    m_return_refresh_token = return_refresh_token;
    m_return_refresh_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_refresh_token_Set() const{
    return m_return_refresh_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_refresh_token_Valid() const{
    return m_return_refresh_token_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isReturnSecureToken() const {
    return m_return_secure_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setReturnSecureToken(const bool &return_secure_token) {
    m_return_secure_token = return_secure_token;
    m_return_secure_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_secure_token_Set() const{
    return m_return_secure_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_return_secure_token_Valid() const{
    return m_return_secure_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getSessionId() const {
    return m_session_id;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getTenantId() const {
    return m_tenant_id;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::getTenantProjectNumber() const {
    return m_tenant_project_number;
}
void OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::setTenantProjectNumber(const QString &tenant_project_number) {
    m_tenant_project_number = tenant_project_number;
    m_tenant_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_tenant_project_number_Set() const{
    return m_tenant_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::is_tenant_project_number_Valid() const{
    return m_tenant_project_number_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_idp_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_secure_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
