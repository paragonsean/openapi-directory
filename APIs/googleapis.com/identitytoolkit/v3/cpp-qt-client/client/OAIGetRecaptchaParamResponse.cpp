/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecaptchaParamResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecaptchaParamResponse::OAIGetRecaptchaParamResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecaptchaParamResponse::OAIGetRecaptchaParamResponse() {
    this->initializeModel();
}

OAIGetRecaptchaParamResponse::~OAIGetRecaptchaParamResponse() {}

void OAIGetRecaptchaParamResponse::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_recaptcha_site_key_isSet = false;
    m_recaptcha_site_key_isValid = false;

    m_recaptcha_stoken_isSet = false;
    m_recaptcha_stoken_isValid = false;
}

void OAIGetRecaptchaParamResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecaptchaParamResponse::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_recaptcha_site_key_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_site_key, json[QString("recaptchaSiteKey")]);
    m_recaptcha_site_key_isSet = !json[QString("recaptchaSiteKey")].isNull() && m_recaptcha_site_key_isValid;

    m_recaptcha_stoken_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_stoken, json[QString("recaptchaStoken")]);
    m_recaptcha_stoken_isSet = !json[QString("recaptchaStoken")].isNull() && m_recaptcha_stoken_isValid;
}

QString OAIGetRecaptchaParamResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecaptchaParamResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_recaptcha_site_key_isSet) {
        obj.insert(QString("recaptchaSiteKey"), ::OpenAPI::toJsonValue(m_recaptcha_site_key));
    }
    if (m_recaptcha_stoken_isSet) {
        obj.insert(QString("recaptchaStoken"), ::OpenAPI::toJsonValue(m_recaptcha_stoken));
    }
    return obj;
}

QString OAIGetRecaptchaParamResponse::getKind() const {
    return m_kind;
}
void OAIGetRecaptchaParamResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGetRecaptchaParamResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGetRecaptchaParamResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIGetRecaptchaParamResponse::getRecaptchaSiteKey() const {
    return m_recaptcha_site_key;
}
void OAIGetRecaptchaParamResponse::setRecaptchaSiteKey(const QString &recaptcha_site_key) {
    m_recaptcha_site_key = recaptcha_site_key;
    m_recaptcha_site_key_isSet = true;
}

bool OAIGetRecaptchaParamResponse::is_recaptcha_site_key_Set() const{
    return m_recaptcha_site_key_isSet;
}

bool OAIGetRecaptchaParamResponse::is_recaptcha_site_key_Valid() const{
    return m_recaptcha_site_key_isValid;
}

QString OAIGetRecaptchaParamResponse::getRecaptchaStoken() const {
    return m_recaptcha_stoken;
}
void OAIGetRecaptchaParamResponse::setRecaptchaStoken(const QString &recaptcha_stoken) {
    m_recaptcha_stoken = recaptcha_stoken;
    m_recaptcha_stoken_isSet = true;
}

bool OAIGetRecaptchaParamResponse::is_recaptcha_stoken_Set() const{
    return m_recaptcha_stoken_isSet;
}

bool OAIGetRecaptchaParamResponse::is_recaptcha_stoken_Valid() const{
    return m_recaptcha_stoken_isValid;
}

bool OAIGetRecaptchaParamResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_site_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_stoken_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecaptchaParamResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
