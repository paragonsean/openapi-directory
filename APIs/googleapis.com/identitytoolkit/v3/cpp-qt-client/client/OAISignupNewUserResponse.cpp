/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignupNewUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignupNewUserResponse::OAISignupNewUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignupNewUserResponse::OAISignupNewUserResponse() {
    this->initializeModel();
}

OAISignupNewUserResponse::~OAISignupNewUserResponse() {}

void OAISignupNewUserResponse::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAISignupNewUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignupNewUserResponse::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAISignupNewUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignupNewUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAISignupNewUserResponse::getDisplayName() const {
    return m_display_name;
}
void OAISignupNewUserResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISignupNewUserResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISignupNewUserResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAISignupNewUserResponse::getEmail() const {
    return m_email;
}
void OAISignupNewUserResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISignupNewUserResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAISignupNewUserResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISignupNewUserResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAISignupNewUserResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAISignupNewUserResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAISignupNewUserResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAISignupNewUserResponse::getIdToken() const {
    return m_id_token;
}
void OAISignupNewUserResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAISignupNewUserResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAISignupNewUserResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAISignupNewUserResponse::getKind() const {
    return m_kind;
}
void OAISignupNewUserResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISignupNewUserResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISignupNewUserResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISignupNewUserResponse::getLocalId() const {
    return m_local_id;
}
void OAISignupNewUserResponse::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAISignupNewUserResponse::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAISignupNewUserResponse::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAISignupNewUserResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAISignupNewUserResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAISignupNewUserResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAISignupNewUserResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAISignupNewUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignupNewUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
