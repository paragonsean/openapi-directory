/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyUploadAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyUploadAccountRequest::OAIIdentitytoolkitRelyingpartyUploadAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyUploadAccountRequest::OAIIdentitytoolkitRelyingpartyUploadAccountRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyUploadAccountRequest::~OAIIdentitytoolkitRelyingpartyUploadAccountRequest() {}

void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::initializeModel() {

    m_allow_overwrite_isSet = false;
    m_allow_overwrite_isValid = false;

    m_block_size_isSet = false;
    m_block_size_isValid = false;

    m_cpu_mem_cost_isSet = false;
    m_cpu_mem_cost_isValid = false;

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_dk_len_isSet = false;
    m_dk_len_isValid = false;

    m_hash_algorithm_isSet = false;
    m_hash_algorithm_isValid = false;

    m_memory_cost_isSet = false;
    m_memory_cost_isValid = false;

    m_parallelization_isSet = false;
    m_parallelization_isValid = false;

    m_rounds_isSet = false;
    m_rounds_isValid = false;

    m_salt_separator_isSet = false;
    m_salt_separator_isValid = false;

    m_sanity_check_isSet = false;
    m_sanity_check_isValid = false;

    m_signer_key_isSet = false;
    m_signer_key_isValid = false;

    m_target_project_id_isSet = false;
    m_target_project_id_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::fromJsonObject(QJsonObject json) {

    m_allow_overwrite_isValid = ::OpenAPI::fromJsonValue(m_allow_overwrite, json[QString("allowOverwrite")]);
    m_allow_overwrite_isSet = !json[QString("allowOverwrite")].isNull() && m_allow_overwrite_isValid;

    m_block_size_isValid = ::OpenAPI::fromJsonValue(m_block_size, json[QString("blockSize")]);
    m_block_size_isSet = !json[QString("blockSize")].isNull() && m_block_size_isValid;

    m_cpu_mem_cost_isValid = ::OpenAPI::fromJsonValue(m_cpu_mem_cost, json[QString("cpuMemCost")]);
    m_cpu_mem_cost_isSet = !json[QString("cpuMemCost")].isNull() && m_cpu_mem_cost_isValid;

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_dk_len_isValid = ::OpenAPI::fromJsonValue(m_dk_len, json[QString("dkLen")]);
    m_dk_len_isSet = !json[QString("dkLen")].isNull() && m_dk_len_isValid;

    m_hash_algorithm_isValid = ::OpenAPI::fromJsonValue(m_hash_algorithm, json[QString("hashAlgorithm")]);
    m_hash_algorithm_isSet = !json[QString("hashAlgorithm")].isNull() && m_hash_algorithm_isValid;

    m_memory_cost_isValid = ::OpenAPI::fromJsonValue(m_memory_cost, json[QString("memoryCost")]);
    m_memory_cost_isSet = !json[QString("memoryCost")].isNull() && m_memory_cost_isValid;

    m_parallelization_isValid = ::OpenAPI::fromJsonValue(m_parallelization, json[QString("parallelization")]);
    m_parallelization_isSet = !json[QString("parallelization")].isNull() && m_parallelization_isValid;

    m_rounds_isValid = ::OpenAPI::fromJsonValue(m_rounds, json[QString("rounds")]);
    m_rounds_isSet = !json[QString("rounds")].isNull() && m_rounds_isValid;

    m_salt_separator_isValid = ::OpenAPI::fromJsonValue(m_salt_separator, json[QString("saltSeparator")]);
    m_salt_separator_isSet = !json[QString("saltSeparator")].isNull() && m_salt_separator_isValid;

    m_sanity_check_isValid = ::OpenAPI::fromJsonValue(m_sanity_check, json[QString("sanityCheck")]);
    m_sanity_check_isSet = !json[QString("sanityCheck")].isNull() && m_sanity_check_isValid;

    m_signer_key_isValid = ::OpenAPI::fromJsonValue(m_signer_key, json[QString("signerKey")]);
    m_signer_key_isSet = !json[QString("signerKey")].isNull() && m_signer_key_isValid;

    m_target_project_id_isValid = ::OpenAPI::fromJsonValue(m_target_project_id, json[QString("targetProjectId")]);
    m_target_project_id_isSet = !json[QString("targetProjectId")].isNull() && m_target_project_id_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIIdentitytoolkitRelyingpartyUploadAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyUploadAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_overwrite_isSet) {
        obj.insert(QString("allowOverwrite"), ::OpenAPI::toJsonValue(m_allow_overwrite));
    }
    if (m_block_size_isSet) {
        obj.insert(QString("blockSize"), ::OpenAPI::toJsonValue(m_block_size));
    }
    if (m_cpu_mem_cost_isSet) {
        obj.insert(QString("cpuMemCost"), ::OpenAPI::toJsonValue(m_cpu_mem_cost));
    }
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_dk_len_isSet) {
        obj.insert(QString("dkLen"), ::OpenAPI::toJsonValue(m_dk_len));
    }
    if (m_hash_algorithm_isSet) {
        obj.insert(QString("hashAlgorithm"), ::OpenAPI::toJsonValue(m_hash_algorithm));
    }
    if (m_memory_cost_isSet) {
        obj.insert(QString("memoryCost"), ::OpenAPI::toJsonValue(m_memory_cost));
    }
    if (m_parallelization_isSet) {
        obj.insert(QString("parallelization"), ::OpenAPI::toJsonValue(m_parallelization));
    }
    if (m_rounds_isSet) {
        obj.insert(QString("rounds"), ::OpenAPI::toJsonValue(m_rounds));
    }
    if (m_salt_separator_isSet) {
        obj.insert(QString("saltSeparator"), ::OpenAPI::toJsonValue(m_salt_separator));
    }
    if (m_sanity_check_isSet) {
        obj.insert(QString("sanityCheck"), ::OpenAPI::toJsonValue(m_sanity_check));
    }
    if (m_signer_key_isSet) {
        obj.insert(QString("signerKey"), ::OpenAPI::toJsonValue(m_signer_key));
    }
    if (m_target_project_id_isSet) {
        obj.insert(QString("targetProjectId"), ::OpenAPI::toJsonValue(m_target_project_id));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::isAllowOverwrite() const {
    return m_allow_overwrite;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setAllowOverwrite(const bool &allow_overwrite) {
    m_allow_overwrite = allow_overwrite;
    m_allow_overwrite_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_allow_overwrite_Set() const{
    return m_allow_overwrite_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_allow_overwrite_Valid() const{
    return m_allow_overwrite_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getBlockSize() const {
    return m_block_size;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setBlockSize(const qint32 &block_size) {
    m_block_size = block_size;
    m_block_size_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_block_size_Set() const{
    return m_block_size_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_block_size_Valid() const{
    return m_block_size_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getCpuMemCost() const {
    return m_cpu_mem_cost;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setCpuMemCost(const qint32 &cpu_mem_cost) {
    m_cpu_mem_cost = cpu_mem_cost;
    m_cpu_mem_cost_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_cpu_mem_cost_Set() const{
    return m_cpu_mem_cost_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_cpu_mem_cost_Valid() const{
    return m_cpu_mem_cost_isValid;
}

QString OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getDkLen() const {
    return m_dk_len;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setDkLen(const qint32 &dk_len) {
    m_dk_len = dk_len;
    m_dk_len_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_dk_len_Set() const{
    return m_dk_len_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_dk_len_Valid() const{
    return m_dk_len_isValid;
}

QString OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getHashAlgorithm() const {
    return m_hash_algorithm;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setHashAlgorithm(const QString &hash_algorithm) {
    m_hash_algorithm = hash_algorithm;
    m_hash_algorithm_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_hash_algorithm_Set() const{
    return m_hash_algorithm_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_hash_algorithm_Valid() const{
    return m_hash_algorithm_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getMemoryCost() const {
    return m_memory_cost;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setMemoryCost(const qint32 &memory_cost) {
    m_memory_cost = memory_cost;
    m_memory_cost_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_memory_cost_Set() const{
    return m_memory_cost_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_memory_cost_Valid() const{
    return m_memory_cost_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getParallelization() const {
    return m_parallelization;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setParallelization(const qint32 &parallelization) {
    m_parallelization = parallelization;
    m_parallelization_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_parallelization_Set() const{
    return m_parallelization_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_parallelization_Valid() const{
    return m_parallelization_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getRounds() const {
    return m_rounds;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setRounds(const qint32 &rounds) {
    m_rounds = rounds;
    m_rounds_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_rounds_Set() const{
    return m_rounds_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_rounds_Valid() const{
    return m_rounds_isValid;
}

QByteArray OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getSaltSeparator() const {
    return m_salt_separator;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setSaltSeparator(const QByteArray &salt_separator) {
    m_salt_separator = salt_separator;
    m_salt_separator_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_salt_separator_Set() const{
    return m_salt_separator_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_salt_separator_Valid() const{
    return m_salt_separator_isValid;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::isSanityCheck() const {
    return m_sanity_check;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setSanityCheck(const bool &sanity_check) {
    m_sanity_check = sanity_check;
    m_sanity_check_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_sanity_check_Set() const{
    return m_sanity_check_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_sanity_check_Valid() const{
    return m_sanity_check_isValid;
}

QByteArray OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getSignerKey() const {
    return m_signer_key;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setSignerKey(const QByteArray &signer_key) {
    m_signer_key = signer_key;
    m_signer_key_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_signer_key_Set() const{
    return m_signer_key_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_signer_key_Valid() const{
    return m_signer_key_isValid;
}

QString OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getTargetProjectId() const {
    return m_target_project_id;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setTargetProjectId(const QString &target_project_id) {
    m_target_project_id = target_project_id;
    m_target_project_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_target_project_id_Set() const{
    return m_target_project_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_target_project_id_Valid() const{
    return m_target_project_id_isValid;
}

QList<OAIUserInfo> OAIIdentitytoolkitRelyingpartyUploadAccountRequest::getUsers() const {
    return m_users;
}
void OAIIdentitytoolkitRelyingpartyUploadAccountRequest::setUsers(const QList<OAIUserInfo> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_users_Set() const{
    return m_users_isSet;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_overwrite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpu_mem_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dk_len_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallelization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sanity_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyUploadAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
