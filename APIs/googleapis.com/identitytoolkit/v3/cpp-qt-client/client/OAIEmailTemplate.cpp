/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmailTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmailTemplate::OAIEmailTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmailTemplate::OAIEmailTemplate() {
    this->initializeModel();
}

OAIEmailTemplate::~OAIEmailTemplate() {}

void OAIEmailTemplate::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_from_isSet = false;
    m_from_isValid = false;

    m_from_display_name_isSet = false;
    m_from_display_name_isValid = false;

    m_reply_to_isSet = false;
    m_reply_to_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIEmailTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmailTemplate::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_from_isValid = ::OpenAPI::fromJsonValue(m_from, json[QString("from")]);
    m_from_isSet = !json[QString("from")].isNull() && m_from_isValid;

    m_from_display_name_isValid = ::OpenAPI::fromJsonValue(m_from_display_name, json[QString("fromDisplayName")]);
    m_from_display_name_isSet = !json[QString("fromDisplayName")].isNull() && m_from_display_name_isValid;

    m_reply_to_isValid = ::OpenAPI::fromJsonValue(m_reply_to, json[QString("replyTo")]);
    m_reply_to_isSet = !json[QString("replyTo")].isNull() && m_reply_to_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIEmailTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmailTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_from_isSet) {
        obj.insert(QString("from"), ::OpenAPI::toJsonValue(m_from));
    }
    if (m_from_display_name_isSet) {
        obj.insert(QString("fromDisplayName"), ::OpenAPI::toJsonValue(m_from_display_name));
    }
    if (m_reply_to_isSet) {
        obj.insert(QString("replyTo"), ::OpenAPI::toJsonValue(m_reply_to));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIEmailTemplate::getBody() const {
    return m_body;
}
void OAIEmailTemplate::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIEmailTemplate::is_body_Set() const{
    return m_body_isSet;
}

bool OAIEmailTemplate::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIEmailTemplate::getFormat() const {
    return m_format;
}
void OAIEmailTemplate::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIEmailTemplate::is_format_Set() const{
    return m_format_isSet;
}

bool OAIEmailTemplate::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIEmailTemplate::getFrom() const {
    return m_from;
}
void OAIEmailTemplate::setFrom(const QString &from) {
    m_from = from;
    m_from_isSet = true;
}

bool OAIEmailTemplate::is_from_Set() const{
    return m_from_isSet;
}

bool OAIEmailTemplate::is_from_Valid() const{
    return m_from_isValid;
}

QString OAIEmailTemplate::getFromDisplayName() const {
    return m_from_display_name;
}
void OAIEmailTemplate::setFromDisplayName(const QString &from_display_name) {
    m_from_display_name = from_display_name;
    m_from_display_name_isSet = true;
}

bool OAIEmailTemplate::is_from_display_name_Set() const{
    return m_from_display_name_isSet;
}

bool OAIEmailTemplate::is_from_display_name_Valid() const{
    return m_from_display_name_isValid;
}

QString OAIEmailTemplate::getReplyTo() const {
    return m_reply_to;
}
void OAIEmailTemplate::setReplyTo(const QString &reply_to) {
    m_reply_to = reply_to;
    m_reply_to_isSet = true;
}

bool OAIEmailTemplate::is_reply_to_Set() const{
    return m_reply_to_isSet;
}

bool OAIEmailTemplate::is_reply_to_Valid() const{
    return m_reply_to_isValid;
}

QString OAIEmailTemplate::getSubject() const {
    return m_subject;
}
void OAIEmailTemplate::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEmailTemplate::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEmailTemplate::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIEmailTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmailTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
