/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::~OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest() {}

void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_auth_flow_type_isSet = false;
    m_auth_flow_type_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_continue_uri_isSet = false;
    m_continue_uri_isValid = false;

    m_custom_parameter_isSet = false;
    m_custom_parameter_isValid = false;

    m_hosted_domain_isSet = false;
    m_hosted_domain_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_oauth_consumer_key_isSet = false;
    m_oauth_consumer_key_isValid = false;

    m_oauth_scope_isSet = false;
    m_oauth_scope_isValid = false;

    m_openid_realm_isSet = false;
    m_openid_realm_isValid = false;

    m_ota_app_isSet = false;
    m_ota_app_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_tenant_project_number_isSet = false;
    m_tenant_project_number_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_auth_flow_type_isValid = ::OpenAPI::fromJsonValue(m_auth_flow_type, json[QString("authFlowType")]);
    m_auth_flow_type_isSet = !json[QString("authFlowType")].isNull() && m_auth_flow_type_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_continue_uri_isValid = ::OpenAPI::fromJsonValue(m_continue_uri, json[QString("continueUri")]);
    m_continue_uri_isSet = !json[QString("continueUri")].isNull() && m_continue_uri_isValid;

    m_custom_parameter_isValid = ::OpenAPI::fromJsonValue(m_custom_parameter, json[QString("customParameter")]);
    m_custom_parameter_isSet = !json[QString("customParameter")].isNull() && m_custom_parameter_isValid;

    m_hosted_domain_isValid = ::OpenAPI::fromJsonValue(m_hosted_domain, json[QString("hostedDomain")]);
    m_hosted_domain_isSet = !json[QString("hostedDomain")].isNull() && m_hosted_domain_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("identifier")]);
    m_identifier_isSet = !json[QString("identifier")].isNull() && m_identifier_isValid;

    m_oauth_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_oauth_consumer_key, json[QString("oauthConsumerKey")]);
    m_oauth_consumer_key_isSet = !json[QString("oauthConsumerKey")].isNull() && m_oauth_consumer_key_isValid;

    m_oauth_scope_isValid = ::OpenAPI::fromJsonValue(m_oauth_scope, json[QString("oauthScope")]);
    m_oauth_scope_isSet = !json[QString("oauthScope")].isNull() && m_oauth_scope_isValid;

    m_openid_realm_isValid = ::OpenAPI::fromJsonValue(m_openid_realm, json[QString("openidRealm")]);
    m_openid_realm_isSet = !json[QString("openidRealm")].isNull() && m_openid_realm_isValid;

    m_ota_app_isValid = ::OpenAPI::fromJsonValue(m_ota_app, json[QString("otaApp")]);
    m_ota_app_isSet = !json[QString("otaApp")].isNull() && m_ota_app_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_tenant_project_number_isValid = ::OpenAPI::fromJsonValue(m_tenant_project_number, json[QString("tenantProjectNumber")]);
    m_tenant_project_number_isSet = !json[QString("tenantProjectNumber")].isNull() && m_tenant_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_auth_flow_type_isSet) {
        obj.insert(QString("authFlowType"), ::OpenAPI::toJsonValue(m_auth_flow_type));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_continue_uri_isSet) {
        obj.insert(QString("continueUri"), ::OpenAPI::toJsonValue(m_continue_uri));
    }
    if (m_custom_parameter.size() > 0) {
        obj.insert(QString("customParameter"), ::OpenAPI::toJsonValue(m_custom_parameter));
    }
    if (m_hosted_domain_isSet) {
        obj.insert(QString("hostedDomain"), ::OpenAPI::toJsonValue(m_hosted_domain));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_oauth_consumer_key_isSet) {
        obj.insert(QString("oauthConsumerKey"), ::OpenAPI::toJsonValue(m_oauth_consumer_key));
    }
    if (m_oauth_scope_isSet) {
        obj.insert(QString("oauthScope"), ::OpenAPI::toJsonValue(m_oauth_scope));
    }
    if (m_openid_realm_isSet) {
        obj.insert(QString("openidRealm"), ::OpenAPI::toJsonValue(m_openid_realm));
    }
    if (m_ota_app_isSet) {
        obj.insert(QString("otaApp"), ::OpenAPI::toJsonValue(m_ota_app));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_tenant_project_number_isSet) {
        obj.insert(QString("tenantProjectNumber"), ::OpenAPI::toJsonValue(m_tenant_project_number));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getAppId() const {
    return m_app_id;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getAuthFlowType() const {
    return m_auth_flow_type;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setAuthFlowType(const QString &auth_flow_type) {
    m_auth_flow_type = auth_flow_type;
    m_auth_flow_type_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_auth_flow_type_Set() const{
    return m_auth_flow_type_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_auth_flow_type_Valid() const{
    return m_auth_flow_type_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getClientId() const {
    return m_client_id;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getContext() const {
    return m_context;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getContinueUri() const {
    return m_continue_uri;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setContinueUri(const QString &continue_uri) {
    m_continue_uri = continue_uri;
    m_continue_uri_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_continue_uri_Set() const{
    return m_continue_uri_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_continue_uri_Valid() const{
    return m_continue_uri_isValid;
}

QMap<QString, QString> OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getCustomParameter() const {
    return m_custom_parameter;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setCustomParameter(const QMap<QString, QString> &custom_parameter) {
    m_custom_parameter = custom_parameter;
    m_custom_parameter_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_custom_parameter_Set() const{
    return m_custom_parameter_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_custom_parameter_Valid() const{
    return m_custom_parameter_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getHostedDomain() const {
    return m_hosted_domain;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setHostedDomain(const QString &hosted_domain) {
    m_hosted_domain = hosted_domain;
    m_hosted_domain_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_hosted_domain_Set() const{
    return m_hosted_domain_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_hosted_domain_Valid() const{
    return m_hosted_domain_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getIdentifier() const {
    return m_identifier;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getOauthConsumerKey() const {
    return m_oauth_consumer_key;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setOauthConsumerKey(const QString &oauth_consumer_key) {
    m_oauth_consumer_key = oauth_consumer_key;
    m_oauth_consumer_key_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_oauth_consumer_key_Set() const{
    return m_oauth_consumer_key_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_oauth_consumer_key_Valid() const{
    return m_oauth_consumer_key_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getOauthScope() const {
    return m_oauth_scope;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setOauthScope(const QString &oauth_scope) {
    m_oauth_scope = oauth_scope;
    m_oauth_scope_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_oauth_scope_Set() const{
    return m_oauth_scope_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_oauth_scope_Valid() const{
    return m_oauth_scope_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getOpenidRealm() const {
    return m_openid_realm;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setOpenidRealm(const QString &openid_realm) {
    m_openid_realm = openid_realm;
    m_openid_realm_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_openid_realm_Set() const{
    return m_openid_realm_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_openid_realm_Valid() const{
    return m_openid_realm_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getOtaApp() const {
    return m_ota_app;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setOtaApp(const QString &ota_app) {
    m_ota_app = ota_app;
    m_ota_app_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_ota_app_Set() const{
    return m_ota_app_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_ota_app_Valid() const{
    return m_ota_app_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getProviderId() const {
    return m_provider_id;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getSessionId() const {
    return m_session_id;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getTenantId() const {
    return m_tenant_id;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::getTenantProjectNumber() const {
    return m_tenant_project_number;
}
void OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::setTenantProjectNumber(const QString &tenant_project_number) {
    m_tenant_project_number = tenant_project_number;
    m_tenant_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_tenant_project_number_Set() const{
    return m_tenant_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::is_tenant_project_number_Valid() const{
    return m_tenant_project_number_isValid;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_flow_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_parameter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openid_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ota_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
