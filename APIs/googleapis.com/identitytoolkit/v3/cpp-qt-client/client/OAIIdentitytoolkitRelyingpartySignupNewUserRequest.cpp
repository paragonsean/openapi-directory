/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartySignupNewUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartySignupNewUserRequest::OAIIdentitytoolkitRelyingpartySignupNewUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartySignupNewUserRequest::OAIIdentitytoolkitRelyingpartySignupNewUserRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartySignupNewUserRequest::~OAIIdentitytoolkitRelyingpartySignupNewUserRequest() {}

void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::initializeModel() {

    m_captcha_challenge_isSet = false;
    m_captcha_challenge_isValid = false;

    m_captcha_response_isSet = false;
    m_captcha_response_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_tenant_project_number_isSet = false;
    m_tenant_project_number_isValid = false;
}

void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::fromJsonObject(QJsonObject json) {

    m_captcha_challenge_isValid = ::OpenAPI::fromJsonValue(m_captcha_challenge, json[QString("captchaChallenge")]);
    m_captcha_challenge_isSet = !json[QString("captchaChallenge")].isNull() && m_captcha_challenge_isValid;

    m_captcha_response_isValid = ::OpenAPI::fromJsonValue(m_captcha_response, json[QString("captchaResponse")]);
    m_captcha_response_isSet = !json[QString("captchaResponse")].isNull() && m_captcha_response_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_tenant_project_number_isValid = ::OpenAPI::fromJsonValue(m_tenant_project_number, json[QString("tenantProjectNumber")]);
    m_tenant_project_number_isSet = !json[QString("tenantProjectNumber")].isNull() && m_tenant_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartySignupNewUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_captcha_challenge_isSet) {
        obj.insert(QString("captchaChallenge"), ::OpenAPI::toJsonValue(m_captcha_challenge));
    }
    if (m_captcha_response_isSet) {
        obj.insert(QString("captchaResponse"), ::OpenAPI::toJsonValue(m_captcha_response));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_tenant_project_number_isSet) {
        obj.insert(QString("tenantProjectNumber"), ::OpenAPI::toJsonValue(m_tenant_project_number));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getCaptchaChallenge() const {
    return m_captcha_challenge;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setCaptchaChallenge(const QString &captcha_challenge) {
    m_captcha_challenge = captcha_challenge;
    m_captcha_challenge_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_captcha_challenge_Set() const{
    return m_captcha_challenge_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_captcha_challenge_Valid() const{
    return m_captcha_challenge_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getCaptchaResponse() const {
    return m_captcha_response;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setCaptchaResponse(const QString &captcha_response) {
    m_captcha_response = captcha_response;
    m_captcha_response_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_captcha_response_Set() const{
    return m_captcha_response_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_captcha_response_Valid() const{
    return m_captcha_response_isValid;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::isDisabled() const {
    return m_disabled;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getDisplayName() const {
    return m_display_name;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getEmail() const {
    return m_email;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::isEmailVerified() const {
    return m_email_verified;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getLocalId() const {
    return m_local_id;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getPassword() const {
    return m_password;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getPhotoUrl() const {
    return m_photo_url;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getTenantId() const {
    return m_tenant_id;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartySignupNewUserRequest::getTenantProjectNumber() const {
    return m_tenant_project_number;
}
void OAIIdentitytoolkitRelyingpartySignupNewUserRequest::setTenantProjectNumber(const QString &tenant_project_number) {
    m_tenant_project_number = tenant_project_number;
    m_tenant_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_tenant_project_number_Set() const{
    return m_tenant_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::is_tenant_project_number_Valid() const{
    return m_tenant_project_number_isValid;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_captcha_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_captcha_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartySignupNewUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
