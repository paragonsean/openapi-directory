/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAuthUriResponse.h
 *
 * Response of creating the IDP authentication URL.
 */

#ifndef OAICreateAuthUriResponse_H
#define OAICreateAuthUriResponse_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateAuthUriResponse : public OAIObject {
public:
    OAICreateAuthUriResponse();
    OAICreateAuthUriResponse(QString json);
    ~OAICreateAuthUriResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllProviders() const;
    void setAllProviders(const QList<QString> &all_providers);
    bool is_all_providers_Set() const;
    bool is_all_providers_Valid() const;

    QString getAuthUri() const;
    void setAuthUri(const QString &auth_uri);
    bool is_auth_uri_Set() const;
    bool is_auth_uri_Valid() const;

    bool isCaptchaRequired() const;
    void setCaptchaRequired(const bool &captcha_required);
    bool is_captcha_required_Set() const;
    bool is_captcha_required_Valid() const;

    bool isForExistingProvider() const;
    void setForExistingProvider(const bool &for_existing_provider);
    bool is_for_existing_provider_Set() const;
    bool is_for_existing_provider_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getProviderId() const;
    void setProviderId(const QString &provider_id);
    bool is_provider_id_Set() const;
    bool is_provider_id_Valid() const;

    bool isRegistered() const;
    void setRegistered(const bool &registered);
    bool is_registered_Set() const;
    bool is_registered_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QList<QString> getSigninMethods() const;
    void setSigninMethods(const QList<QString> &signin_methods);
    bool is_signin_methods_Set() const;
    bool is_signin_methods_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_all_providers;
    bool m_all_providers_isSet;
    bool m_all_providers_isValid;

    QString m_auth_uri;
    bool m_auth_uri_isSet;
    bool m_auth_uri_isValid;

    bool m_captcha_required;
    bool m_captcha_required_isSet;
    bool m_captcha_required_isValid;

    bool m_for_existing_provider;
    bool m_for_existing_provider_isSet;
    bool m_for_existing_provider_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_provider_id;
    bool m_provider_id_isSet;
    bool m_provider_id_isValid;

    bool m_registered;
    bool m_registered_isSet;
    bool m_registered_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QList<QString> m_signin_methods;
    bool m_signin_methods_isSet;
    bool m_signin_methods_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAuthUriResponse)

#endif // OAICreateAuthUriResponse_H
