/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartySetAccountInfoRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::OAIIdentitytoolkitRelyingpartySetAccountInfoRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::OAIIdentitytoolkitRelyingpartySetAccountInfoRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::~OAIIdentitytoolkitRelyingpartySetAccountInfoRequest() {}

void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::initializeModel() {

    m_captcha_challenge_isSet = false;
    m_captcha_challenge_isValid = false;

    m_captcha_response_isSet = false;
    m_captcha_response_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_attributes_isSet = false;
    m_custom_attributes_isValid = false;

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_delete_attribute_isSet = false;
    m_delete_attribute_isValid = false;

    m_delete_provider_isSet = false;
    m_delete_provider_isValid = false;

    m_disable_user_isSet = false;
    m_disable_user_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_last_login_at_isSet = false;
    m_last_login_at_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_oob_code_isSet = false;
    m_oob_code_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_return_secure_token_isSet = false;
    m_return_secure_token_isValid = false;

    m_upgrade_to_federated_login_isSet = false;
    m_upgrade_to_federated_login_isValid = false;

    m_valid_since_isSet = false;
    m_valid_since_isValid = false;
}

void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::fromJsonObject(QJsonObject json) {

    m_captcha_challenge_isValid = ::OpenAPI::fromJsonValue(m_captcha_challenge, json[QString("captchaChallenge")]);
    m_captcha_challenge_isSet = !json[QString("captchaChallenge")].isNull() && m_captcha_challenge_isValid;

    m_captcha_response_isValid = ::OpenAPI::fromJsonValue(m_captcha_response, json[QString("captchaResponse")]);
    m_captcha_response_isSet = !json[QString("captchaResponse")].isNull() && m_captcha_response_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_custom_attributes_isValid = ::OpenAPI::fromJsonValue(m_custom_attributes, json[QString("customAttributes")]);
    m_custom_attributes_isSet = !json[QString("customAttributes")].isNull() && m_custom_attributes_isValid;

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_delete_attribute_isValid = ::OpenAPI::fromJsonValue(m_delete_attribute, json[QString("deleteAttribute")]);
    m_delete_attribute_isSet = !json[QString("deleteAttribute")].isNull() && m_delete_attribute_isValid;

    m_delete_provider_isValid = ::OpenAPI::fromJsonValue(m_delete_provider, json[QString("deleteProvider")]);
    m_delete_provider_isSet = !json[QString("deleteProvider")].isNull() && m_delete_provider_isValid;

    m_disable_user_isValid = ::OpenAPI::fromJsonValue(m_disable_user, json[QString("disableUser")]);
    m_disable_user_isSet = !json[QString("disableUser")].isNull() && m_disable_user_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_last_login_at_isValid = ::OpenAPI::fromJsonValue(m_last_login_at, json[QString("lastLoginAt")]);
    m_last_login_at_isSet = !json[QString("lastLoginAt")].isNull() && m_last_login_at_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_oob_code_isValid = ::OpenAPI::fromJsonValue(m_oob_code, json[QString("oobCode")]);
    m_oob_code_isSet = !json[QString("oobCode")].isNull() && m_oob_code_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_return_secure_token_isValid = ::OpenAPI::fromJsonValue(m_return_secure_token, json[QString("returnSecureToken")]);
    m_return_secure_token_isSet = !json[QString("returnSecureToken")].isNull() && m_return_secure_token_isValid;

    m_upgrade_to_federated_login_isValid = ::OpenAPI::fromJsonValue(m_upgrade_to_federated_login, json[QString("upgradeToFederatedLogin")]);
    m_upgrade_to_federated_login_isSet = !json[QString("upgradeToFederatedLogin")].isNull() && m_upgrade_to_federated_login_isValid;

    m_valid_since_isValid = ::OpenAPI::fromJsonValue(m_valid_since, json[QString("validSince")]);
    m_valid_since_isSet = !json[QString("validSince")].isNull() && m_valid_since_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_captcha_challenge_isSet) {
        obj.insert(QString("captchaChallenge"), ::OpenAPI::toJsonValue(m_captcha_challenge));
    }
    if (m_captcha_response_isSet) {
        obj.insert(QString("captchaResponse"), ::OpenAPI::toJsonValue(m_captcha_response));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_attributes_isSet) {
        obj.insert(QString("customAttributes"), ::OpenAPI::toJsonValue(m_custom_attributes));
    }
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_delete_attribute.size() > 0) {
        obj.insert(QString("deleteAttribute"), ::OpenAPI::toJsonValue(m_delete_attribute));
    }
    if (m_delete_provider.size() > 0) {
        obj.insert(QString("deleteProvider"), ::OpenAPI::toJsonValue(m_delete_provider));
    }
    if (m_disable_user_isSet) {
        obj.insert(QString("disableUser"), ::OpenAPI::toJsonValue(m_disable_user));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_last_login_at_isSet) {
        obj.insert(QString("lastLoginAt"), ::OpenAPI::toJsonValue(m_last_login_at));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_oob_code_isSet) {
        obj.insert(QString("oobCode"), ::OpenAPI::toJsonValue(m_oob_code));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_provider.size() > 0) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_return_secure_token_isSet) {
        obj.insert(QString("returnSecureToken"), ::OpenAPI::toJsonValue(m_return_secure_token));
    }
    if (m_upgrade_to_federated_login_isSet) {
        obj.insert(QString("upgradeToFederatedLogin"), ::OpenAPI::toJsonValue(m_upgrade_to_federated_login));
    }
    if (m_valid_since_isSet) {
        obj.insert(QString("validSince"), ::OpenAPI::toJsonValue(m_valid_since));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getCaptchaChallenge() const {
    return m_captcha_challenge;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setCaptchaChallenge(const QString &captcha_challenge) {
    m_captcha_challenge = captcha_challenge;
    m_captcha_challenge_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_captcha_challenge_Set() const{
    return m_captcha_challenge_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_captcha_challenge_Valid() const{
    return m_captcha_challenge_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getCaptchaResponse() const {
    return m_captcha_response;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setCaptchaResponse(const QString &captcha_response) {
    m_captcha_response = captcha_response;
    m_captcha_response_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_captcha_response_Set() const{
    return m_captcha_response_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_captcha_response_Valid() const{
    return m_captcha_response_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getCustomAttributes() const {
    return m_custom_attributes;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setCustomAttributes(const QString &custom_attributes) {
    m_custom_attributes = custom_attributes;
    m_custom_attributes_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_custom_attributes_Set() const{
    return m_custom_attributes_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_custom_attributes_Valid() const{
    return m_custom_attributes_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

QList<QString> OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getDeleteAttribute() const {
    return m_delete_attribute;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setDeleteAttribute(const QList<QString> &delete_attribute) {
    m_delete_attribute = delete_attribute;
    m_delete_attribute_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delete_attribute_Set() const{
    return m_delete_attribute_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delete_attribute_Valid() const{
    return m_delete_attribute_isValid;
}

QList<QString> OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getDeleteProvider() const {
    return m_delete_provider;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setDeleteProvider(const QList<QString> &delete_provider) {
    m_delete_provider = delete_provider;
    m_delete_provider_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delete_provider_Set() const{
    return m_delete_provider_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_delete_provider_Valid() const{
    return m_delete_provider_isValid;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isDisableUser() const {
    return m_disable_user;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setDisableUser(const bool &disable_user) {
    m_disable_user = disable_user;
    m_disable_user_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_disable_user_Set() const{
    return m_disable_user_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_disable_user_Valid() const{
    return m_disable_user_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getDisplayName() const {
    return m_display_name;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getEmail() const {
    return m_email;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isEmailVerified() const {
    return m_email_verified;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getLastLoginAt() const {
    return m_last_login_at;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setLastLoginAt(const QString &last_login_at) {
    m_last_login_at = last_login_at;
    m_last_login_at_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_last_login_at_Set() const{
    return m_last_login_at_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_last_login_at_Valid() const{
    return m_last_login_at_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getLocalId() const {
    return m_local_id;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getOobCode() const {
    return m_oob_code;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setOobCode(const QString &oob_code) {
    m_oob_code = oob_code;
    m_oob_code_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_oob_code_Set() const{
    return m_oob_code_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_oob_code_Valid() const{
    return m_oob_code_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getPassword() const {
    return m_password;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getPhotoUrl() const {
    return m_photo_url;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QList<QString> OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getProvider() const {
    return m_provider;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setProvider(const QList<QString> &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isReturnSecureToken() const {
    return m_return_secure_token;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setReturnSecureToken(const bool &return_secure_token) {
    m_return_secure_token = return_secure_token;
    m_return_secure_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_return_secure_token_Set() const{
    return m_return_secure_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_return_secure_token_Valid() const{
    return m_return_secure_token_isValid;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isUpgradeToFederatedLogin() const {
    return m_upgrade_to_federated_login;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setUpgradeToFederatedLogin(const bool &upgrade_to_federated_login) {
    m_upgrade_to_federated_login = upgrade_to_federated_login;
    m_upgrade_to_federated_login_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_upgrade_to_federated_login_Set() const{
    return m_upgrade_to_federated_login_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_upgrade_to_federated_login_Valid() const{
    return m_upgrade_to_federated_login_isValid;
}

QString OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::getValidSince() const {
    return m_valid_since;
}
void OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::setValidSince(const QString &valid_since) {
    m_valid_since = valid_since;
    m_valid_since_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_valid_since_Set() const{
    return m_valid_since_isSet;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::is_valid_since_Valid() const{
    return m_valid_since_isValid;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_captcha_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_captcha_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_attribute.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oob_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_secure_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_to_federated_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_since_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartySetAccountInfoRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
