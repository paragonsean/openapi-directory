/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyDownloadAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::OAIIdentitytoolkitRelyingpartyDownloadAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::OAIIdentitytoolkitRelyingpartyDownloadAccountRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::~OAIIdentitytoolkitRelyingpartyDownloadAccountRequest() {}

void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::initializeModel() {

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_target_project_id_isSet = false;
    m_target_project_id_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::fromJsonObject(QJsonObject json) {

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_target_project_id_isValid = ::OpenAPI::fromJsonValue(m_target_project_id, json[QString("targetProjectId")]);
    m_target_project_id_isSet = !json[QString("targetProjectId")].isNull() && m_target_project_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_target_project_id_isSet) {
        obj.insert(QString("targetProjectId"), ::OpenAPI::toJsonValue(m_target_project_id));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

qint32 OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::getMaxResults() const {
    return m_max_results;
}
void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::getNextPageToken() const {
    return m_next_page_token;
}
void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::getTargetProjectId() const {
    return m_target_project_id;
}
void OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::setTargetProjectId(const QString &target_project_id) {
    m_target_project_id = target_project_id;
    m_target_project_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_target_project_id_Set() const{
    return m_target_project_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::is_target_project_id_Valid() const{
    return m_target_project_id_isValid;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyDownloadAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
