/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::~OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse() {}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::initializeModel() {

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_is_new_user_isSet = false;
    m_is_new_user_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_temporary_proof_isSet = false;
    m_temporary_proof_isValid = false;

    m_temporary_proof_expires_in_isSet = false;
    m_temporary_proof_expires_in_isValid = false;

    m_verification_proof_isSet = false;
    m_verification_proof_isValid = false;

    m_verification_proof_expires_in_isSet = false;
    m_verification_proof_expires_in_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::fromJsonObject(QJsonObject json) {

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_is_new_user_isValid = ::OpenAPI::fromJsonValue(m_is_new_user, json[QString("isNewUser")]);
    m_is_new_user_isSet = !json[QString("isNewUser")].isNull() && m_is_new_user_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;

    m_temporary_proof_isValid = ::OpenAPI::fromJsonValue(m_temporary_proof, json[QString("temporaryProof")]);
    m_temporary_proof_isSet = !json[QString("temporaryProof")].isNull() && m_temporary_proof_isValid;

    m_temporary_proof_expires_in_isValid = ::OpenAPI::fromJsonValue(m_temporary_proof_expires_in, json[QString("temporaryProofExpiresIn")]);
    m_temporary_proof_expires_in_isSet = !json[QString("temporaryProofExpiresIn")].isNull() && m_temporary_proof_expires_in_isValid;

    m_verification_proof_isValid = ::OpenAPI::fromJsonValue(m_verification_proof, json[QString("verificationProof")]);
    m_verification_proof_isSet = !json[QString("verificationProof")].isNull() && m_verification_proof_isValid;

    m_verification_proof_expires_in_isValid = ::OpenAPI::fromJsonValue(m_verification_proof_expires_in, json[QString("verificationProofExpiresIn")]);
    m_verification_proof_expires_in_isSet = !json[QString("verificationProofExpiresIn")].isNull() && m_verification_proof_expires_in_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_is_new_user_isSet) {
        obj.insert(QString("isNewUser"), ::OpenAPI::toJsonValue(m_is_new_user));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_temporary_proof_isSet) {
        obj.insert(QString("temporaryProof"), ::OpenAPI::toJsonValue(m_temporary_proof));
    }
    if (m_temporary_proof_expires_in_isSet) {
        obj.insert(QString("temporaryProofExpiresIn"), ::OpenAPI::toJsonValue(m_temporary_proof_expires_in));
    }
    if (m_verification_proof_isSet) {
        obj.insert(QString("verificationProof"), ::OpenAPI::toJsonValue(m_verification_proof));
    }
    if (m_verification_proof_expires_in_isSet) {
        obj.insert(QString("verificationProofExpiresIn"), ::OpenAPI::toJsonValue(m_verification_proof_expires_in));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::isIsNewUser() const {
    return m_is_new_user;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setIsNewUser(const bool &is_new_user) {
    m_is_new_user = is_new_user;
    m_is_new_user_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_is_new_user_Set() const{
    return m_is_new_user_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_is_new_user_Valid() const{
    return m_is_new_user_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getLocalId() const {
    return m_local_id;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getPhoneNumber() const {
    return m_phone_number;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getTemporaryProof() const {
    return m_temporary_proof;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setTemporaryProof(const QString &temporary_proof) {
    m_temporary_proof = temporary_proof;
    m_temporary_proof_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_temporary_proof_Set() const{
    return m_temporary_proof_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_temporary_proof_Valid() const{
    return m_temporary_proof_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getTemporaryProofExpiresIn() const {
    return m_temporary_proof_expires_in;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setTemporaryProofExpiresIn(const QString &temporary_proof_expires_in) {
    m_temporary_proof_expires_in = temporary_proof_expires_in;
    m_temporary_proof_expires_in_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_temporary_proof_expires_in_Set() const{
    return m_temporary_proof_expires_in_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_temporary_proof_expires_in_Valid() const{
    return m_temporary_proof_expires_in_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getVerificationProof() const {
    return m_verification_proof;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setVerificationProof(const QString &verification_proof) {
    m_verification_proof = verification_proof;
    m_verification_proof_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_verification_proof_Set() const{
    return m_verification_proof_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_verification_proof_Valid() const{
    return m_verification_proof_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::getVerificationProofExpiresIn() const {
    return m_verification_proof_expires_in;
}
void OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::setVerificationProofExpiresIn(const QString &verification_proof_expires_in) {
    m_verification_proof_expires_in = verification_proof_expires_in;
    m_verification_proof_expires_in_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_verification_proof_expires_in_Set() const{
    return m_verification_proof_expires_in_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::is_verification_proof_expires_in_Valid() const{
    return m_verification_proof_expires_in_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_new_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_proof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_proof_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_proof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_proof_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
