/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyPasswordResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyPasswordResponse::OAIVerifyPasswordResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyPasswordResponse::OAIVerifyPasswordResponse() {
    this->initializeModel();
}

OAIVerifyPasswordResponse::~OAIVerifyPasswordResponse() {}

void OAIVerifyPasswordResponse::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_oauth_access_token_isSet = false;
    m_oauth_access_token_isValid = false;

    m_oauth_authorization_code_isSet = false;
    m_oauth_authorization_code_isValid = false;

    m_oauth_expire_in_isSet = false;
    m_oauth_expire_in_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_registered_isSet = false;
    m_registered_isValid = false;
}

void OAIVerifyPasswordResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyPasswordResponse::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_oauth_access_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_access_token, json[QString("oauthAccessToken")]);
    m_oauth_access_token_isSet = !json[QString("oauthAccessToken")].isNull() && m_oauth_access_token_isValid;

    m_oauth_authorization_code_isValid = ::OpenAPI::fromJsonValue(m_oauth_authorization_code, json[QString("oauthAuthorizationCode")]);
    m_oauth_authorization_code_isSet = !json[QString("oauthAuthorizationCode")].isNull() && m_oauth_authorization_code_isValid;

    m_oauth_expire_in_isValid = ::OpenAPI::fromJsonValue(m_oauth_expire_in, json[QString("oauthExpireIn")]);
    m_oauth_expire_in_isSet = !json[QString("oauthExpireIn")].isNull() && m_oauth_expire_in_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;

    m_registered_isValid = ::OpenAPI::fromJsonValue(m_registered, json[QString("registered")]);
    m_registered_isSet = !json[QString("registered")].isNull() && m_registered_isValid;
}

QString OAIVerifyPasswordResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyPasswordResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_oauth_access_token_isSet) {
        obj.insert(QString("oauthAccessToken"), ::OpenAPI::toJsonValue(m_oauth_access_token));
    }
    if (m_oauth_authorization_code_isSet) {
        obj.insert(QString("oauthAuthorizationCode"), ::OpenAPI::toJsonValue(m_oauth_authorization_code));
    }
    if (m_oauth_expire_in_isSet) {
        obj.insert(QString("oauthExpireIn"), ::OpenAPI::toJsonValue(m_oauth_expire_in));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_registered_isSet) {
        obj.insert(QString("registered"), ::OpenAPI::toJsonValue(m_registered));
    }
    return obj;
}

QString OAIVerifyPasswordResponse::getDisplayName() const {
    return m_display_name;
}
void OAIVerifyPasswordResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIVerifyPasswordResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIVerifyPasswordResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIVerifyPasswordResponse::getEmail() const {
    return m_email;
}
void OAIVerifyPasswordResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIVerifyPasswordResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIVerifyPasswordResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIVerifyPasswordResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIVerifyPasswordResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIVerifyPasswordResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIVerifyPasswordResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIVerifyPasswordResponse::getIdToken() const {
    return m_id_token;
}
void OAIVerifyPasswordResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIVerifyPasswordResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIVerifyPasswordResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIVerifyPasswordResponse::getKind() const {
    return m_kind;
}
void OAIVerifyPasswordResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVerifyPasswordResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVerifyPasswordResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIVerifyPasswordResponse::getLocalId() const {
    return m_local_id;
}
void OAIVerifyPasswordResponse::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIVerifyPasswordResponse::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIVerifyPasswordResponse::is_local_id_Valid() const{
    return m_local_id_isValid;
}

QString OAIVerifyPasswordResponse::getOauthAccessToken() const {
    return m_oauth_access_token;
}
void OAIVerifyPasswordResponse::setOauthAccessToken(const QString &oauth_access_token) {
    m_oauth_access_token = oauth_access_token;
    m_oauth_access_token_isSet = true;
}

bool OAIVerifyPasswordResponse::is_oauth_access_token_Set() const{
    return m_oauth_access_token_isSet;
}

bool OAIVerifyPasswordResponse::is_oauth_access_token_Valid() const{
    return m_oauth_access_token_isValid;
}

QString OAIVerifyPasswordResponse::getOauthAuthorizationCode() const {
    return m_oauth_authorization_code;
}
void OAIVerifyPasswordResponse::setOauthAuthorizationCode(const QString &oauth_authorization_code) {
    m_oauth_authorization_code = oauth_authorization_code;
    m_oauth_authorization_code_isSet = true;
}

bool OAIVerifyPasswordResponse::is_oauth_authorization_code_Set() const{
    return m_oauth_authorization_code_isSet;
}

bool OAIVerifyPasswordResponse::is_oauth_authorization_code_Valid() const{
    return m_oauth_authorization_code_isValid;
}

qint32 OAIVerifyPasswordResponse::getOauthExpireIn() const {
    return m_oauth_expire_in;
}
void OAIVerifyPasswordResponse::setOauthExpireIn(const qint32 &oauth_expire_in) {
    m_oauth_expire_in = oauth_expire_in;
    m_oauth_expire_in_isSet = true;
}

bool OAIVerifyPasswordResponse::is_oauth_expire_in_Set() const{
    return m_oauth_expire_in_isSet;
}

bool OAIVerifyPasswordResponse::is_oauth_expire_in_Valid() const{
    return m_oauth_expire_in_isValid;
}

QString OAIVerifyPasswordResponse::getPhotoUrl() const {
    return m_photo_url;
}
void OAIVerifyPasswordResponse::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIVerifyPasswordResponse::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIVerifyPasswordResponse::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIVerifyPasswordResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIVerifyPasswordResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIVerifyPasswordResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIVerifyPasswordResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIVerifyPasswordResponse::isRegistered() const {
    return m_registered;
}
void OAIVerifyPasswordResponse::setRegistered(const bool &registered) {
    m_registered = registered;
    m_registered_isSet = true;
}

bool OAIVerifyPasswordResponse::is_registered_Set() const{
    return m_registered_isSet;
}

bool OAIVerifyPasswordResponse::is_registered_Valid() const{
    return m_registered_isValid;
}

bool OAIVerifyPasswordResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_authorization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_expire_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyPasswordResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
