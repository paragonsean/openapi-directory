/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResetPasswordResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResetPasswordResponse::OAIResetPasswordResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResetPasswordResponse::OAIResetPasswordResponse() {
    this->initializeModel();
}

OAIResetPasswordResponse::~OAIResetPasswordResponse() {}

void OAIResetPasswordResponse::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_new_email_isSet = false;
    m_new_email_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;
}

void OAIResetPasswordResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResetPasswordResponse::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_new_email_isValid = ::OpenAPI::fromJsonValue(m_new_email, json[QString("newEmail")]);
    m_new_email_isSet = !json[QString("newEmail")].isNull() && m_new_email_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("requestType")]);
    m_request_type_isSet = !json[QString("requestType")].isNull() && m_request_type_isValid;
}

QString OAIResetPasswordResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResetPasswordResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_new_email_isSet) {
        obj.insert(QString("newEmail"), ::OpenAPI::toJsonValue(m_new_email));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("requestType"), ::OpenAPI::toJsonValue(m_request_type));
    }
    return obj;
}

QString OAIResetPasswordResponse::getEmail() const {
    return m_email;
}
void OAIResetPasswordResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIResetPasswordResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIResetPasswordResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIResetPasswordResponse::getKind() const {
    return m_kind;
}
void OAIResetPasswordResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIResetPasswordResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIResetPasswordResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIResetPasswordResponse::getNewEmail() const {
    return m_new_email;
}
void OAIResetPasswordResponse::setNewEmail(const QString &new_email) {
    m_new_email = new_email;
    m_new_email_isSet = true;
}

bool OAIResetPasswordResponse::is_new_email_Set() const{
    return m_new_email_isSet;
}

bool OAIResetPasswordResponse::is_new_email_Valid() const{
    return m_new_email_isValid;
}

QString OAIResetPasswordResponse::getRequestType() const {
    return m_request_type;
}
void OAIResetPasswordResponse::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIResetPasswordResponse::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIResetPasswordResponse::is_request_type_Valid() const{
    return m_request_type_isValid;
}

bool OAIResetPasswordResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResetPasswordResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
