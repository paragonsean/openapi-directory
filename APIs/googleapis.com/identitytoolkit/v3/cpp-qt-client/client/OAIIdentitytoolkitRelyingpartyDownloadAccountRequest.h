/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentitytoolkitRelyingpartyDownloadAccountRequest.h
 *
 * Request to download user account in batch.
 */

#ifndef OAIIdentitytoolkitRelyingpartyDownloadAccountRequest_H
#define OAIIdentitytoolkitRelyingpartyDownloadAccountRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentitytoolkitRelyingpartyDownloadAccountRequest : public OAIObject {
public:
    OAIIdentitytoolkitRelyingpartyDownloadAccountRequest();
    OAIIdentitytoolkitRelyingpartyDownloadAccountRequest(QString json);
    ~OAIIdentitytoolkitRelyingpartyDownloadAccountRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDelegatedProjectNumber() const;
    void setDelegatedProjectNumber(const QString &delegated_project_number);
    bool is_delegated_project_number_Set() const;
    bool is_delegated_project_number_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextPageToken() const;
    void setNextPageToken(const QString &next_page_token);
    bool is_next_page_token_Set() const;
    bool is_next_page_token_Valid() const;

    QString getTargetProjectId() const;
    void setTargetProjectId(const QString &target_project_id);
    bool is_target_project_id_Set() const;
    bool is_target_project_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_delegated_project_number;
    bool m_delegated_project_number_isSet;
    bool m_delegated_project_number_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_page_token;
    bool m_next_page_token_isSet;
    bool m_next_page_token_isValid;

    QString m_target_project_id;
    bool m_target_project_id_isSet;
    bool m_target_project_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentitytoolkitRelyingpartyDownloadAccountRequest)

#endif // OAIIdentitytoolkitRelyingpartyDownloadAccountRequest_H
