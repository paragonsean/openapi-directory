/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo_providerUserInfo_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo_providerUserInfo_inner::OAIUserInfo_providerUserInfo_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo_providerUserInfo_inner::OAIUserInfo_providerUserInfo_inner() {
    this->initializeModel();
}

OAIUserInfo_providerUserInfo_inner::~OAIUserInfo_providerUserInfo_inner() {}

void OAIUserInfo_providerUserInfo_inner::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_federated_id_isSet = false;
    m_federated_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_raw_id_isSet = false;
    m_raw_id_isValid = false;

    m_screen_name_isSet = false;
    m_screen_name_isValid = false;
}

void OAIUserInfo_providerUserInfo_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo_providerUserInfo_inner::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_federated_id_isValid = ::OpenAPI::fromJsonValue(m_federated_id, json[QString("federatedId")]);
    m_federated_id_isSet = !json[QString("federatedId")].isNull() && m_federated_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_raw_id_isValid = ::OpenAPI::fromJsonValue(m_raw_id, json[QString("rawId")]);
    m_raw_id_isSet = !json[QString("rawId")].isNull() && m_raw_id_isValid;

    m_screen_name_isValid = ::OpenAPI::fromJsonValue(m_screen_name, json[QString("screenName")]);
    m_screen_name_isSet = !json[QString("screenName")].isNull() && m_screen_name_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo_providerUserInfo_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_federated_id_isSet) {
        obj.insert(QString("federatedId"), ::OpenAPI::toJsonValue(m_federated_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_raw_id_isSet) {
        obj.insert(QString("rawId"), ::OpenAPI::toJsonValue(m_raw_id));
    }
    if (m_screen_name_isSet) {
        obj.insert(QString("screenName"), ::OpenAPI::toJsonValue(m_screen_name));
    }
    return obj;
}

QString OAIUserInfo_providerUserInfo_inner::getDisplayName() const {
    return m_display_name;
}
void OAIUserInfo_providerUserInfo_inner::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getEmail() const {
    return m_email;
}
void OAIUserInfo_providerUserInfo_inner::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getFederatedId() const {
    return m_federated_id;
}
void OAIUserInfo_providerUserInfo_inner::setFederatedId(const QString &federated_id) {
    m_federated_id = federated_id;
    m_federated_id_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_federated_id_Set() const{
    return m_federated_id_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_federated_id_Valid() const{
    return m_federated_id_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUserInfo_providerUserInfo_inner::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getPhotoUrl() const {
    return m_photo_url;
}
void OAIUserInfo_providerUserInfo_inner::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getProviderId() const {
    return m_provider_id;
}
void OAIUserInfo_providerUserInfo_inner::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getRawId() const {
    return m_raw_id;
}
void OAIUserInfo_providerUserInfo_inner::setRawId(const QString &raw_id) {
    m_raw_id = raw_id;
    m_raw_id_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_raw_id_Set() const{
    return m_raw_id_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_raw_id_Valid() const{
    return m_raw_id_isValid;
}

QString OAIUserInfo_providerUserInfo_inner::getScreenName() const {
    return m_screen_name;
}
void OAIUserInfo_providerUserInfo_inner::setScreenName(const QString &screen_name) {
    m_screen_name = screen_name;
    m_screen_name_isSet = true;
}

bool OAIUserInfo_providerUserInfo_inner::is_screen_name_Set() const{
    return m_screen_name_isSet;
}

bool OAIUserInfo_providerUserInfo_inner::is_screen_name_Valid() const{
    return m_screen_name_isValid;
}

bool OAIUserInfo_providerUserInfo_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo_providerUserInfo_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
