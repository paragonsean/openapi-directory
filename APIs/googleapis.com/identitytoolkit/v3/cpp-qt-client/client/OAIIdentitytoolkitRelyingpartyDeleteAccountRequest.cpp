/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyDeleteAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::OAIIdentitytoolkitRelyingpartyDeleteAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::OAIIdentitytoolkitRelyingpartyDeleteAccountRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::~OAIIdentitytoolkitRelyingpartyDeleteAccountRequest() {}

void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::initializeModel() {

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::fromJsonObject(QJsonObject json) {

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::getIdToken() const {
    return m_id_token;
}
void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::getLocalId() const {
    return m_local_id;
}
void OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::is_local_id_Valid() const{
    return m_local_id_isValid;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyDeleteAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
