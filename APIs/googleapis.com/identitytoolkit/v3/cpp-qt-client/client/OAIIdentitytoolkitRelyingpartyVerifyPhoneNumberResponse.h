/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.h
 *
 * Response for Identitytoolkit-VerifyPhoneNumber
 */

#ifndef OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse_H
#define OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse : public OAIObject {
public:
    OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse();
    OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse(QString json);
    ~OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getExpiresIn() const;
    void setExpiresIn(const QString &expires_in);
    bool is_expires_in_Set() const;
    bool is_expires_in_Valid() const;

    QString getIdToken() const;
    void setIdToken(const QString &id_token);
    bool is_id_token_Set() const;
    bool is_id_token_Valid() const;

    bool isIsNewUser() const;
    void setIsNewUser(const bool &is_new_user);
    bool is_is_new_user_Set() const;
    bool is_is_new_user_Valid() const;

    QString getLocalId() const;
    void setLocalId(const QString &local_id);
    bool is_local_id_Set() const;
    bool is_local_id_Valid() const;

    QString getPhoneNumber() const;
    void setPhoneNumber(const QString &phone_number);
    bool is_phone_number_Set() const;
    bool is_phone_number_Valid() const;

    QString getRefreshToken() const;
    void setRefreshToken(const QString &refresh_token);
    bool is_refresh_token_Set() const;
    bool is_refresh_token_Valid() const;

    QString getTemporaryProof() const;
    void setTemporaryProof(const QString &temporary_proof);
    bool is_temporary_proof_Set() const;
    bool is_temporary_proof_Valid() const;

    QString getTemporaryProofExpiresIn() const;
    void setTemporaryProofExpiresIn(const QString &temporary_proof_expires_in);
    bool is_temporary_proof_expires_in_Set() const;
    bool is_temporary_proof_expires_in_Valid() const;

    QString getVerificationProof() const;
    void setVerificationProof(const QString &verification_proof);
    bool is_verification_proof_Set() const;
    bool is_verification_proof_Valid() const;

    QString getVerificationProofExpiresIn() const;
    void setVerificationProofExpiresIn(const QString &verification_proof_expires_in);
    bool is_verification_proof_expires_in_Set() const;
    bool is_verification_proof_expires_in_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_expires_in;
    bool m_expires_in_isSet;
    bool m_expires_in_isValid;

    QString m_id_token;
    bool m_id_token_isSet;
    bool m_id_token_isValid;

    bool m_is_new_user;
    bool m_is_new_user_isSet;
    bool m_is_new_user_isValid;

    QString m_local_id;
    bool m_local_id_isSet;
    bool m_local_id_isValid;

    QString m_phone_number;
    bool m_phone_number_isSet;
    bool m_phone_number_isValid;

    QString m_refresh_token;
    bool m_refresh_token_isSet;
    bool m_refresh_token_isValid;

    QString m_temporary_proof;
    bool m_temporary_proof_isSet;
    bool m_temporary_proof_isValid;

    QString m_temporary_proof_expires_in;
    bool m_temporary_proof_expires_in_isSet;
    bool m_temporary_proof_expires_in_isValid;

    QString m_verification_proof;
    bool m_verification_proof_isSet;
    bool m_verification_proof_isValid;

    QString m_verification_proof_expires_in;
    bool m_verification_proof_expires_in_isSet;
    bool m_verification_proof_expires_in_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse)

#endif // OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse_H
