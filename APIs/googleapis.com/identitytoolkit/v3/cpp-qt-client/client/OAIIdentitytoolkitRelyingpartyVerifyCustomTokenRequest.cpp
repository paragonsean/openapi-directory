/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::~OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest() {}

void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::initializeModel() {

    m_delegated_project_number_isSet = false;
    m_delegated_project_number_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_return_secure_token_isSet = false;
    m_return_secure_token_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::fromJsonObject(QJsonObject json) {

    m_delegated_project_number_isValid = ::OpenAPI::fromJsonValue(m_delegated_project_number, json[QString("delegatedProjectNumber")]);
    m_delegated_project_number_isSet = !json[QString("delegatedProjectNumber")].isNull() && m_delegated_project_number_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_return_secure_token_isValid = ::OpenAPI::fromJsonValue(m_return_secure_token, json[QString("returnSecureToken")]);
    m_return_secure_token_isSet = !json[QString("returnSecureToken")].isNull() && m_return_secure_token_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delegated_project_number_isSet) {
        obj.insert(QString("delegatedProjectNumber"), ::OpenAPI::toJsonValue(m_delegated_project_number));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_return_secure_token_isSet) {
        obj.insert(QString("returnSecureToken"), ::OpenAPI::toJsonValue(m_return_secure_token));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::getDelegatedProjectNumber() const {
    return m_delegated_project_number;
}
void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::setDelegatedProjectNumber(const QString &delegated_project_number) {
    m_delegated_project_number = delegated_project_number;
    m_delegated_project_number_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_delegated_project_number_Set() const{
    return m_delegated_project_number_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_delegated_project_number_Valid() const{
    return m_delegated_project_number_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::getInstanceId() const {
    return m_instance_id;
}
void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::isReturnSecureToken() const {
    return m_return_secure_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::setReturnSecureToken(const bool &return_secure_token) {
    m_return_secure_token = return_secure_token;
    m_return_secure_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_return_secure_token_Set() const{
    return m_return_secure_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_return_secure_token_Valid() const{
    return m_return_secure_token_isValid;
}

QString OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::getToken() const {
    return m_token;
}
void OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delegated_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_secure_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
