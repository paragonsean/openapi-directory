/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIdentitytoolkitRelyingpartyUploadAccountRequest.h
 *
 * Request to upload user account in batch.
 */

#ifndef OAIIdentitytoolkitRelyingpartyUploadAccountRequest_H
#define OAIIdentitytoolkitRelyingpartyUploadAccountRequest_H

#include <QJsonObject>

#include "OAIUserInfo.h"
#include <QByteArray>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserInfo;

class OAIIdentitytoolkitRelyingpartyUploadAccountRequest : public OAIObject {
public:
    OAIIdentitytoolkitRelyingpartyUploadAccountRequest();
    OAIIdentitytoolkitRelyingpartyUploadAccountRequest(QString json);
    ~OAIIdentitytoolkitRelyingpartyUploadAccountRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowOverwrite() const;
    void setAllowOverwrite(const bool &allow_overwrite);
    bool is_allow_overwrite_Set() const;
    bool is_allow_overwrite_Valid() const;

    qint32 getBlockSize() const;
    void setBlockSize(const qint32 &block_size);
    bool is_block_size_Set() const;
    bool is_block_size_Valid() const;

    qint32 getCpuMemCost() const;
    void setCpuMemCost(const qint32 &cpu_mem_cost);
    bool is_cpu_mem_cost_Set() const;
    bool is_cpu_mem_cost_Valid() const;

    QString getDelegatedProjectNumber() const;
    void setDelegatedProjectNumber(const QString &delegated_project_number);
    bool is_delegated_project_number_Set() const;
    bool is_delegated_project_number_Valid() const;

    qint32 getDkLen() const;
    void setDkLen(const qint32 &dk_len);
    bool is_dk_len_Set() const;
    bool is_dk_len_Valid() const;

    QString getHashAlgorithm() const;
    void setHashAlgorithm(const QString &hash_algorithm);
    bool is_hash_algorithm_Set() const;
    bool is_hash_algorithm_Valid() const;

    qint32 getMemoryCost() const;
    void setMemoryCost(const qint32 &memory_cost);
    bool is_memory_cost_Set() const;
    bool is_memory_cost_Valid() const;

    qint32 getParallelization() const;
    void setParallelization(const qint32 &parallelization);
    bool is_parallelization_Set() const;
    bool is_parallelization_Valid() const;

    qint32 getRounds() const;
    void setRounds(const qint32 &rounds);
    bool is_rounds_Set() const;
    bool is_rounds_Valid() const;

    QByteArray getSaltSeparator() const;
    void setSaltSeparator(const QByteArray &salt_separator);
    bool is_salt_separator_Set() const;
    bool is_salt_separator_Valid() const;

    bool isSanityCheck() const;
    void setSanityCheck(const bool &sanity_check);
    bool is_sanity_check_Set() const;
    bool is_sanity_check_Valid() const;

    QByteArray getSignerKey() const;
    void setSignerKey(const QByteArray &signer_key);
    bool is_signer_key_Set() const;
    bool is_signer_key_Valid() const;

    QString getTargetProjectId() const;
    void setTargetProjectId(const QString &target_project_id);
    bool is_target_project_id_Set() const;
    bool is_target_project_id_Valid() const;

    QList<OAIUserInfo> getUsers() const;
    void setUsers(const QList<OAIUserInfo> &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_overwrite;
    bool m_allow_overwrite_isSet;
    bool m_allow_overwrite_isValid;

    qint32 m_block_size;
    bool m_block_size_isSet;
    bool m_block_size_isValid;

    qint32 m_cpu_mem_cost;
    bool m_cpu_mem_cost_isSet;
    bool m_cpu_mem_cost_isValid;

    QString m_delegated_project_number;
    bool m_delegated_project_number_isSet;
    bool m_delegated_project_number_isValid;

    qint32 m_dk_len;
    bool m_dk_len_isSet;
    bool m_dk_len_isValid;

    QString m_hash_algorithm;
    bool m_hash_algorithm_isSet;
    bool m_hash_algorithm_isValid;

    qint32 m_memory_cost;
    bool m_memory_cost_isSet;
    bool m_memory_cost_isValid;

    qint32 m_parallelization;
    bool m_parallelization_isSet;
    bool m_parallelization_isValid;

    qint32 m_rounds;
    bool m_rounds_isSet;
    bool m_rounds_isValid;

    QByteArray m_salt_separator;
    bool m_salt_separator_isSet;
    bool m_salt_separator_isValid;

    bool m_sanity_check;
    bool m_sanity_check_isSet;
    bool m_sanity_check_isValid;

    QByteArray m_signer_key;
    bool m_signer_key_isSet;
    bool m_signer_key_isValid;

    QString m_target_project_id;
    bool m_target_project_id_isSet;
    bool m_target_project_id_isValid;

    QList<OAIUserInfo> m_users;
    bool m_users_isSet;
    bool m_users_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIdentitytoolkitRelyingpartyUploadAccountRequest)

#endif // OAIIdentitytoolkitRelyingpartyUploadAccountRequest_H
