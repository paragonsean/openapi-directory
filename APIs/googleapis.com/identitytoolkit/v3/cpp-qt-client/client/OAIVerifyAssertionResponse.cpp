/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyAssertionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyAssertionResponse::OAIVerifyAssertionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyAssertionResponse::OAIVerifyAssertionResponse() {
    this->initializeModel();
}

OAIVerifyAssertionResponse::~OAIVerifyAssertionResponse() {}

void OAIVerifyAssertionResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_app_installation_url_isSet = false;
    m_app_installation_url_isValid = false;

    m_app_scheme_isSet = false;
    m_app_scheme_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_recycled_isSet = false;
    m_email_recycled_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_federated_id_isSet = false;
    m_federated_id_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_input_email_isSet = false;
    m_input_email_isValid = false;

    m_is_new_user_isSet = false;
    m_is_new_user_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_local_id_isSet = false;
    m_local_id_isValid = false;

    m_need_confirmation_isSet = false;
    m_need_confirmation_isValid = false;

    m_need_email_isSet = false;
    m_need_email_isValid = false;

    m_nick_name_isSet = false;
    m_nick_name_isValid = false;

    m_oauth_access_token_isSet = false;
    m_oauth_access_token_isValid = false;

    m_oauth_authorization_code_isSet = false;
    m_oauth_authorization_code_isValid = false;

    m_oauth_expire_in_isSet = false;
    m_oauth_expire_in_isValid = false;

    m_oauth_id_token_isSet = false;
    m_oauth_id_token_isValid = false;

    m_oauth_request_token_isSet = false;
    m_oauth_request_token_isValid = false;

    m_oauth_scope_isSet = false;
    m_oauth_scope_isValid = false;

    m_oauth_token_secret_isSet = false;
    m_oauth_token_secret_isValid = false;

    m_original_email_isSet = false;
    m_original_email_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_raw_user_info_isSet = false;
    m_raw_user_info_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;

    m_screen_name_isSet = false;
    m_screen_name_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_verified_provider_isSet = false;
    m_verified_provider_isValid = false;
}

void OAIVerifyAssertionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyAssertionResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_app_installation_url_isValid = ::OpenAPI::fromJsonValue(m_app_installation_url, json[QString("appInstallationUrl")]);
    m_app_installation_url_isSet = !json[QString("appInstallationUrl")].isNull() && m_app_installation_url_isValid;

    m_app_scheme_isValid = ::OpenAPI::fromJsonValue(m_app_scheme, json[QString("appScheme")]);
    m_app_scheme_isSet = !json[QString("appScheme")].isNull() && m_app_scheme_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_recycled_isValid = ::OpenAPI::fromJsonValue(m_email_recycled, json[QString("emailRecycled")]);
    m_email_recycled_isSet = !json[QString("emailRecycled")].isNull() && m_email_recycled_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(m_email_verified, json[QString("emailVerified")]);
    m_email_verified_isSet = !json[QString("emailVerified")].isNull() && m_email_verified_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expiresIn")]);
    m_expires_in_isSet = !json[QString("expiresIn")].isNull() && m_expires_in_isValid;

    m_federated_id_isValid = ::OpenAPI::fromJsonValue(m_federated_id, json[QString("federatedId")]);
    m_federated_id_isSet = !json[QString("federatedId")].isNull() && m_federated_id_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_input_email_isValid = ::OpenAPI::fromJsonValue(m_input_email, json[QString("inputEmail")]);
    m_input_email_isSet = !json[QString("inputEmail")].isNull() && m_input_email_isValid;

    m_is_new_user_isValid = ::OpenAPI::fromJsonValue(m_is_new_user, json[QString("isNewUser")]);
    m_is_new_user_isSet = !json[QString("isNewUser")].isNull() && m_is_new_user_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_local_id_isValid = ::OpenAPI::fromJsonValue(m_local_id, json[QString("localId")]);
    m_local_id_isSet = !json[QString("localId")].isNull() && m_local_id_isValid;

    m_need_confirmation_isValid = ::OpenAPI::fromJsonValue(m_need_confirmation, json[QString("needConfirmation")]);
    m_need_confirmation_isSet = !json[QString("needConfirmation")].isNull() && m_need_confirmation_isValid;

    m_need_email_isValid = ::OpenAPI::fromJsonValue(m_need_email, json[QString("needEmail")]);
    m_need_email_isSet = !json[QString("needEmail")].isNull() && m_need_email_isValid;

    m_nick_name_isValid = ::OpenAPI::fromJsonValue(m_nick_name, json[QString("nickName")]);
    m_nick_name_isSet = !json[QString("nickName")].isNull() && m_nick_name_isValid;

    m_oauth_access_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_access_token, json[QString("oauthAccessToken")]);
    m_oauth_access_token_isSet = !json[QString("oauthAccessToken")].isNull() && m_oauth_access_token_isValid;

    m_oauth_authorization_code_isValid = ::OpenAPI::fromJsonValue(m_oauth_authorization_code, json[QString("oauthAuthorizationCode")]);
    m_oauth_authorization_code_isSet = !json[QString("oauthAuthorizationCode")].isNull() && m_oauth_authorization_code_isValid;

    m_oauth_expire_in_isValid = ::OpenAPI::fromJsonValue(m_oauth_expire_in, json[QString("oauthExpireIn")]);
    m_oauth_expire_in_isSet = !json[QString("oauthExpireIn")].isNull() && m_oauth_expire_in_isValid;

    m_oauth_id_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_id_token, json[QString("oauthIdToken")]);
    m_oauth_id_token_isSet = !json[QString("oauthIdToken")].isNull() && m_oauth_id_token_isValid;

    m_oauth_request_token_isValid = ::OpenAPI::fromJsonValue(m_oauth_request_token, json[QString("oauthRequestToken")]);
    m_oauth_request_token_isSet = !json[QString("oauthRequestToken")].isNull() && m_oauth_request_token_isValid;

    m_oauth_scope_isValid = ::OpenAPI::fromJsonValue(m_oauth_scope, json[QString("oauthScope")]);
    m_oauth_scope_isSet = !json[QString("oauthScope")].isNull() && m_oauth_scope_isValid;

    m_oauth_token_secret_isValid = ::OpenAPI::fromJsonValue(m_oauth_token_secret, json[QString("oauthTokenSecret")]);
    m_oauth_token_secret_isSet = !json[QString("oauthTokenSecret")].isNull() && m_oauth_token_secret_isValid;

    m_original_email_isValid = ::OpenAPI::fromJsonValue(m_original_email, json[QString("originalEmail")]);
    m_original_email_isSet = !json[QString("originalEmail")].isNull() && m_original_email_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_raw_user_info_isValid = ::OpenAPI::fromJsonValue(m_raw_user_info, json[QString("rawUserInfo")]);
    m_raw_user_info_isSet = !json[QString("rawUserInfo")].isNull() && m_raw_user_info_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;

    m_screen_name_isValid = ::OpenAPI::fromJsonValue(m_screen_name, json[QString("screenName")]);
    m_screen_name_isSet = !json[QString("screenName")].isNull() && m_screen_name_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_verified_provider_isValid = ::OpenAPI::fromJsonValue(m_verified_provider, json[QString("verifiedProvider")]);
    m_verified_provider_isSet = !json[QString("verifiedProvider")].isNull() && m_verified_provider_isValid;
}

QString OAIVerifyAssertionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyAssertionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_app_installation_url_isSet) {
        obj.insert(QString("appInstallationUrl"), ::OpenAPI::toJsonValue(m_app_installation_url));
    }
    if (m_app_scheme_isSet) {
        obj.insert(QString("appScheme"), ::OpenAPI::toJsonValue(m_app_scheme));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_recycled_isSet) {
        obj.insert(QString("emailRecycled"), ::OpenAPI::toJsonValue(m_email_recycled));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("emailVerified"), ::OpenAPI::toJsonValue(m_email_verified));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expiresIn"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_federated_id_isSet) {
        obj.insert(QString("federatedId"), ::OpenAPI::toJsonValue(m_federated_id));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_input_email_isSet) {
        obj.insert(QString("inputEmail"), ::OpenAPI::toJsonValue(m_input_email));
    }
    if (m_is_new_user_isSet) {
        obj.insert(QString("isNewUser"), ::OpenAPI::toJsonValue(m_is_new_user));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_local_id_isSet) {
        obj.insert(QString("localId"), ::OpenAPI::toJsonValue(m_local_id));
    }
    if (m_need_confirmation_isSet) {
        obj.insert(QString("needConfirmation"), ::OpenAPI::toJsonValue(m_need_confirmation));
    }
    if (m_need_email_isSet) {
        obj.insert(QString("needEmail"), ::OpenAPI::toJsonValue(m_need_email));
    }
    if (m_nick_name_isSet) {
        obj.insert(QString("nickName"), ::OpenAPI::toJsonValue(m_nick_name));
    }
    if (m_oauth_access_token_isSet) {
        obj.insert(QString("oauthAccessToken"), ::OpenAPI::toJsonValue(m_oauth_access_token));
    }
    if (m_oauth_authorization_code_isSet) {
        obj.insert(QString("oauthAuthorizationCode"), ::OpenAPI::toJsonValue(m_oauth_authorization_code));
    }
    if (m_oauth_expire_in_isSet) {
        obj.insert(QString("oauthExpireIn"), ::OpenAPI::toJsonValue(m_oauth_expire_in));
    }
    if (m_oauth_id_token_isSet) {
        obj.insert(QString("oauthIdToken"), ::OpenAPI::toJsonValue(m_oauth_id_token));
    }
    if (m_oauth_request_token_isSet) {
        obj.insert(QString("oauthRequestToken"), ::OpenAPI::toJsonValue(m_oauth_request_token));
    }
    if (m_oauth_scope_isSet) {
        obj.insert(QString("oauthScope"), ::OpenAPI::toJsonValue(m_oauth_scope));
    }
    if (m_oauth_token_secret_isSet) {
        obj.insert(QString("oauthTokenSecret"), ::OpenAPI::toJsonValue(m_oauth_token_secret));
    }
    if (m_original_email_isSet) {
        obj.insert(QString("originalEmail"), ::OpenAPI::toJsonValue(m_original_email));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_raw_user_info_isSet) {
        obj.insert(QString("rawUserInfo"), ::OpenAPI::toJsonValue(m_raw_user_info));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    if (m_screen_name_isSet) {
        obj.insert(QString("screenName"), ::OpenAPI::toJsonValue(m_screen_name));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_verified_provider.size() > 0) {
        obj.insert(QString("verifiedProvider"), ::OpenAPI::toJsonValue(m_verified_provider));
    }
    return obj;
}

QString OAIVerifyAssertionResponse::getAction() const {
    return m_action;
}
void OAIVerifyAssertionResponse::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIVerifyAssertionResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIVerifyAssertionResponse::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIVerifyAssertionResponse::getAppInstallationUrl() const {
    return m_app_installation_url;
}
void OAIVerifyAssertionResponse::setAppInstallationUrl(const QString &app_installation_url) {
    m_app_installation_url = app_installation_url;
    m_app_installation_url_isSet = true;
}

bool OAIVerifyAssertionResponse::is_app_installation_url_Set() const{
    return m_app_installation_url_isSet;
}

bool OAIVerifyAssertionResponse::is_app_installation_url_Valid() const{
    return m_app_installation_url_isValid;
}

QString OAIVerifyAssertionResponse::getAppScheme() const {
    return m_app_scheme;
}
void OAIVerifyAssertionResponse::setAppScheme(const QString &app_scheme) {
    m_app_scheme = app_scheme;
    m_app_scheme_isSet = true;
}

bool OAIVerifyAssertionResponse::is_app_scheme_Set() const{
    return m_app_scheme_isSet;
}

bool OAIVerifyAssertionResponse::is_app_scheme_Valid() const{
    return m_app_scheme_isValid;
}

QString OAIVerifyAssertionResponse::getContext() const {
    return m_context;
}
void OAIVerifyAssertionResponse::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIVerifyAssertionResponse::is_context_Set() const{
    return m_context_isSet;
}

bool OAIVerifyAssertionResponse::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIVerifyAssertionResponse::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIVerifyAssertionResponse::setDateOfBirth(const QString &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIVerifyAssertionResponse::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIVerifyAssertionResponse::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QString OAIVerifyAssertionResponse::getDisplayName() const {
    return m_display_name;
}
void OAIVerifyAssertionResponse::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIVerifyAssertionResponse::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIVerifyAssertionResponse::getEmail() const {
    return m_email;
}
void OAIVerifyAssertionResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIVerifyAssertionResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIVerifyAssertionResponse::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIVerifyAssertionResponse::isEmailRecycled() const {
    return m_email_recycled;
}
void OAIVerifyAssertionResponse::setEmailRecycled(const bool &email_recycled) {
    m_email_recycled = email_recycled;
    m_email_recycled_isSet = true;
}

bool OAIVerifyAssertionResponse::is_email_recycled_Set() const{
    return m_email_recycled_isSet;
}

bool OAIVerifyAssertionResponse::is_email_recycled_Valid() const{
    return m_email_recycled_isValid;
}

bool OAIVerifyAssertionResponse::isEmailVerified() const {
    return m_email_verified;
}
void OAIVerifyAssertionResponse::setEmailVerified(const bool &email_verified) {
    m_email_verified = email_verified;
    m_email_verified_isSet = true;
}

bool OAIVerifyAssertionResponse::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIVerifyAssertionResponse::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

QString OAIVerifyAssertionResponse::getErrorMessage() const {
    return m_error_message;
}
void OAIVerifyAssertionResponse::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIVerifyAssertionResponse::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIVerifyAssertionResponse::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIVerifyAssertionResponse::getExpiresIn() const {
    return m_expires_in;
}
void OAIVerifyAssertionResponse::setExpiresIn(const QString &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIVerifyAssertionResponse::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIVerifyAssertionResponse::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIVerifyAssertionResponse::getFederatedId() const {
    return m_federated_id;
}
void OAIVerifyAssertionResponse::setFederatedId(const QString &federated_id) {
    m_federated_id = federated_id;
    m_federated_id_isSet = true;
}

bool OAIVerifyAssertionResponse::is_federated_id_Set() const{
    return m_federated_id_isSet;
}

bool OAIVerifyAssertionResponse::is_federated_id_Valid() const{
    return m_federated_id_isValid;
}

QString OAIVerifyAssertionResponse::getFirstName() const {
    return m_first_name;
}
void OAIVerifyAssertionResponse::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIVerifyAssertionResponse::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIVerifyAssertionResponse::getFullName() const {
    return m_full_name;
}
void OAIVerifyAssertionResponse::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIVerifyAssertionResponse::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIVerifyAssertionResponse::getIdToken() const {
    return m_id_token;
}
void OAIVerifyAssertionResponse::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIVerifyAssertionResponse::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIVerifyAssertionResponse::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIVerifyAssertionResponse::getInputEmail() const {
    return m_input_email;
}
void OAIVerifyAssertionResponse::setInputEmail(const QString &input_email) {
    m_input_email = input_email;
    m_input_email_isSet = true;
}

bool OAIVerifyAssertionResponse::is_input_email_Set() const{
    return m_input_email_isSet;
}

bool OAIVerifyAssertionResponse::is_input_email_Valid() const{
    return m_input_email_isValid;
}

bool OAIVerifyAssertionResponse::isIsNewUser() const {
    return m_is_new_user;
}
void OAIVerifyAssertionResponse::setIsNewUser(const bool &is_new_user) {
    m_is_new_user = is_new_user;
    m_is_new_user_isSet = true;
}

bool OAIVerifyAssertionResponse::is_is_new_user_Set() const{
    return m_is_new_user_isSet;
}

bool OAIVerifyAssertionResponse::is_is_new_user_Valid() const{
    return m_is_new_user_isValid;
}

QString OAIVerifyAssertionResponse::getKind() const {
    return m_kind;
}
void OAIVerifyAssertionResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIVerifyAssertionResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIVerifyAssertionResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIVerifyAssertionResponse::getLanguage() const {
    return m_language;
}
void OAIVerifyAssertionResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIVerifyAssertionResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAIVerifyAssertionResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIVerifyAssertionResponse::getLastName() const {
    return m_last_name;
}
void OAIVerifyAssertionResponse::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIVerifyAssertionResponse::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIVerifyAssertionResponse::getLocalId() const {
    return m_local_id;
}
void OAIVerifyAssertionResponse::setLocalId(const QString &local_id) {
    m_local_id = local_id;
    m_local_id_isSet = true;
}

bool OAIVerifyAssertionResponse::is_local_id_Set() const{
    return m_local_id_isSet;
}

bool OAIVerifyAssertionResponse::is_local_id_Valid() const{
    return m_local_id_isValid;
}

bool OAIVerifyAssertionResponse::isNeedConfirmation() const {
    return m_need_confirmation;
}
void OAIVerifyAssertionResponse::setNeedConfirmation(const bool &need_confirmation) {
    m_need_confirmation = need_confirmation;
    m_need_confirmation_isSet = true;
}

bool OAIVerifyAssertionResponse::is_need_confirmation_Set() const{
    return m_need_confirmation_isSet;
}

bool OAIVerifyAssertionResponse::is_need_confirmation_Valid() const{
    return m_need_confirmation_isValid;
}

bool OAIVerifyAssertionResponse::isNeedEmail() const {
    return m_need_email;
}
void OAIVerifyAssertionResponse::setNeedEmail(const bool &need_email) {
    m_need_email = need_email;
    m_need_email_isSet = true;
}

bool OAIVerifyAssertionResponse::is_need_email_Set() const{
    return m_need_email_isSet;
}

bool OAIVerifyAssertionResponse::is_need_email_Valid() const{
    return m_need_email_isValid;
}

QString OAIVerifyAssertionResponse::getNickName() const {
    return m_nick_name;
}
void OAIVerifyAssertionResponse::setNickName(const QString &nick_name) {
    m_nick_name = nick_name;
    m_nick_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_nick_name_Set() const{
    return m_nick_name_isSet;
}

bool OAIVerifyAssertionResponse::is_nick_name_Valid() const{
    return m_nick_name_isValid;
}

QString OAIVerifyAssertionResponse::getOauthAccessToken() const {
    return m_oauth_access_token;
}
void OAIVerifyAssertionResponse::setOauthAccessToken(const QString &oauth_access_token) {
    m_oauth_access_token = oauth_access_token;
    m_oauth_access_token_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_access_token_Set() const{
    return m_oauth_access_token_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_access_token_Valid() const{
    return m_oauth_access_token_isValid;
}

QString OAIVerifyAssertionResponse::getOauthAuthorizationCode() const {
    return m_oauth_authorization_code;
}
void OAIVerifyAssertionResponse::setOauthAuthorizationCode(const QString &oauth_authorization_code) {
    m_oauth_authorization_code = oauth_authorization_code;
    m_oauth_authorization_code_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_authorization_code_Set() const{
    return m_oauth_authorization_code_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_authorization_code_Valid() const{
    return m_oauth_authorization_code_isValid;
}

qint32 OAIVerifyAssertionResponse::getOauthExpireIn() const {
    return m_oauth_expire_in;
}
void OAIVerifyAssertionResponse::setOauthExpireIn(const qint32 &oauth_expire_in) {
    m_oauth_expire_in = oauth_expire_in;
    m_oauth_expire_in_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_expire_in_Set() const{
    return m_oauth_expire_in_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_expire_in_Valid() const{
    return m_oauth_expire_in_isValid;
}

QString OAIVerifyAssertionResponse::getOauthIdToken() const {
    return m_oauth_id_token;
}
void OAIVerifyAssertionResponse::setOauthIdToken(const QString &oauth_id_token) {
    m_oauth_id_token = oauth_id_token;
    m_oauth_id_token_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_id_token_Set() const{
    return m_oauth_id_token_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_id_token_Valid() const{
    return m_oauth_id_token_isValid;
}

QString OAIVerifyAssertionResponse::getOauthRequestToken() const {
    return m_oauth_request_token;
}
void OAIVerifyAssertionResponse::setOauthRequestToken(const QString &oauth_request_token) {
    m_oauth_request_token = oauth_request_token;
    m_oauth_request_token_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_request_token_Set() const{
    return m_oauth_request_token_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_request_token_Valid() const{
    return m_oauth_request_token_isValid;
}

QString OAIVerifyAssertionResponse::getOauthScope() const {
    return m_oauth_scope;
}
void OAIVerifyAssertionResponse::setOauthScope(const QString &oauth_scope) {
    m_oauth_scope = oauth_scope;
    m_oauth_scope_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_scope_Set() const{
    return m_oauth_scope_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_scope_Valid() const{
    return m_oauth_scope_isValid;
}

QString OAIVerifyAssertionResponse::getOauthTokenSecret() const {
    return m_oauth_token_secret;
}
void OAIVerifyAssertionResponse::setOauthTokenSecret(const QString &oauth_token_secret) {
    m_oauth_token_secret = oauth_token_secret;
    m_oauth_token_secret_isSet = true;
}

bool OAIVerifyAssertionResponse::is_oauth_token_secret_Set() const{
    return m_oauth_token_secret_isSet;
}

bool OAIVerifyAssertionResponse::is_oauth_token_secret_Valid() const{
    return m_oauth_token_secret_isValid;
}

QString OAIVerifyAssertionResponse::getOriginalEmail() const {
    return m_original_email;
}
void OAIVerifyAssertionResponse::setOriginalEmail(const QString &original_email) {
    m_original_email = original_email;
    m_original_email_isSet = true;
}

bool OAIVerifyAssertionResponse::is_original_email_Set() const{
    return m_original_email_isSet;
}

bool OAIVerifyAssertionResponse::is_original_email_Valid() const{
    return m_original_email_isValid;
}

QString OAIVerifyAssertionResponse::getPhotoUrl() const {
    return m_photo_url;
}
void OAIVerifyAssertionResponse::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIVerifyAssertionResponse::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIVerifyAssertionResponse::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIVerifyAssertionResponse::getProviderId() const {
    return m_provider_id;
}
void OAIVerifyAssertionResponse::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIVerifyAssertionResponse::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIVerifyAssertionResponse::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIVerifyAssertionResponse::getRawUserInfo() const {
    return m_raw_user_info;
}
void OAIVerifyAssertionResponse::setRawUserInfo(const QString &raw_user_info) {
    m_raw_user_info = raw_user_info;
    m_raw_user_info_isSet = true;
}

bool OAIVerifyAssertionResponse::is_raw_user_info_Set() const{
    return m_raw_user_info_isSet;
}

bool OAIVerifyAssertionResponse::is_raw_user_info_Valid() const{
    return m_raw_user_info_isValid;
}

QString OAIVerifyAssertionResponse::getRefreshToken() const {
    return m_refresh_token;
}
void OAIVerifyAssertionResponse::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIVerifyAssertionResponse::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIVerifyAssertionResponse::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

QString OAIVerifyAssertionResponse::getScreenName() const {
    return m_screen_name;
}
void OAIVerifyAssertionResponse::setScreenName(const QString &screen_name) {
    m_screen_name = screen_name;
    m_screen_name_isSet = true;
}

bool OAIVerifyAssertionResponse::is_screen_name_Set() const{
    return m_screen_name_isSet;
}

bool OAIVerifyAssertionResponse::is_screen_name_Valid() const{
    return m_screen_name_isValid;
}

QString OAIVerifyAssertionResponse::getTimeZone() const {
    return m_time_zone;
}
void OAIVerifyAssertionResponse::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIVerifyAssertionResponse::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIVerifyAssertionResponse::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<QString> OAIVerifyAssertionResponse::getVerifiedProvider() const {
    return m_verified_provider;
}
void OAIVerifyAssertionResponse::setVerifiedProvider(const QList<QString> &verified_provider) {
    m_verified_provider = verified_provider;
    m_verified_provider_isSet = true;
}

bool OAIVerifyAssertionResponse::is_verified_provider_Set() const{
    return m_verified_provider_isSet;
}

bool OAIVerifyAssertionResponse::is_verified_provider_Valid() const{
    return m_verified_provider_isValid;
}

bool OAIVerifyAssertionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_installation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_recycled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_federated_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_new_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_local_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nick_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_authorization_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_expire_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oauth_token_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_provider.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyAssertionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
