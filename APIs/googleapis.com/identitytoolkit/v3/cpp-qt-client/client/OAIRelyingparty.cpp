/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelyingparty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelyingparty::OAIRelyingparty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelyingparty::OAIRelyingparty() {
    this->initializeModel();
}

OAIRelyingparty::~OAIRelyingparty() {}

void OAIRelyingparty::initializeModel() {

    m_android_install_app_isSet = false;
    m_android_install_app_isValid = false;

    m_android_minimum_version_isSet = false;
    m_android_minimum_version_isValid = false;

    m_android_package_name_isSet = false;
    m_android_package_name_isValid = false;

    m_can_handle_code_in_app_isSet = false;
    m_can_handle_code_in_app_isValid = false;

    m_captcha_resp_isSet = false;
    m_captcha_resp_isValid = false;

    m_challenge_isSet = false;
    m_challenge_isValid = false;

    m_continue_url_isSet = false;
    m_continue_url_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_i_os_app_store_id_isSet = false;
    m_i_os_app_store_id_isValid = false;

    m_i_os_bundle_id_isSet = false;
    m_i_os_bundle_id_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_new_email_isSet = false;
    m_new_email_isValid = false;

    m_request_type_isSet = false;
    m_request_type_isValid = false;

    m_user_ip_isSet = false;
    m_user_ip_isValid = false;
}

void OAIRelyingparty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelyingparty::fromJsonObject(QJsonObject json) {

    m_android_install_app_isValid = ::OpenAPI::fromJsonValue(m_android_install_app, json[QString("androidInstallApp")]);
    m_android_install_app_isSet = !json[QString("androidInstallApp")].isNull() && m_android_install_app_isValid;

    m_android_minimum_version_isValid = ::OpenAPI::fromJsonValue(m_android_minimum_version, json[QString("androidMinimumVersion")]);
    m_android_minimum_version_isSet = !json[QString("androidMinimumVersion")].isNull() && m_android_minimum_version_isValid;

    m_android_package_name_isValid = ::OpenAPI::fromJsonValue(m_android_package_name, json[QString("androidPackageName")]);
    m_android_package_name_isSet = !json[QString("androidPackageName")].isNull() && m_android_package_name_isValid;

    m_can_handle_code_in_app_isValid = ::OpenAPI::fromJsonValue(m_can_handle_code_in_app, json[QString("canHandleCodeInApp")]);
    m_can_handle_code_in_app_isSet = !json[QString("canHandleCodeInApp")].isNull() && m_can_handle_code_in_app_isValid;

    m_captcha_resp_isValid = ::OpenAPI::fromJsonValue(m_captcha_resp, json[QString("captchaResp")]);
    m_captcha_resp_isSet = !json[QString("captchaResp")].isNull() && m_captcha_resp_isValid;

    m_challenge_isValid = ::OpenAPI::fromJsonValue(m_challenge, json[QString("challenge")]);
    m_challenge_isSet = !json[QString("challenge")].isNull() && m_challenge_isValid;

    m_continue_url_isValid = ::OpenAPI::fromJsonValue(m_continue_url, json[QString("continueUrl")]);
    m_continue_url_isSet = !json[QString("continueUrl")].isNull() && m_continue_url_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_i_os_app_store_id_isValid = ::OpenAPI::fromJsonValue(m_i_os_app_store_id, json[QString("iOSAppStoreId")]);
    m_i_os_app_store_id_isSet = !json[QString("iOSAppStoreId")].isNull() && m_i_os_app_store_id_isValid;

    m_i_os_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_i_os_bundle_id, json[QString("iOSBundleId")]);
    m_i_os_bundle_id_isSet = !json[QString("iOSBundleId")].isNull() && m_i_os_bundle_id_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_new_email_isValid = ::OpenAPI::fromJsonValue(m_new_email, json[QString("newEmail")]);
    m_new_email_isSet = !json[QString("newEmail")].isNull() && m_new_email_isValid;

    m_request_type_isValid = ::OpenAPI::fromJsonValue(m_request_type, json[QString("requestType")]);
    m_request_type_isSet = !json[QString("requestType")].isNull() && m_request_type_isValid;

    m_user_ip_isValid = ::OpenAPI::fromJsonValue(m_user_ip, json[QString("userIp")]);
    m_user_ip_isSet = !json[QString("userIp")].isNull() && m_user_ip_isValid;
}

QString OAIRelyingparty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelyingparty::asJsonObject() const {
    QJsonObject obj;
    if (m_android_install_app_isSet) {
        obj.insert(QString("androidInstallApp"), ::OpenAPI::toJsonValue(m_android_install_app));
    }
    if (m_android_minimum_version_isSet) {
        obj.insert(QString("androidMinimumVersion"), ::OpenAPI::toJsonValue(m_android_minimum_version));
    }
    if (m_android_package_name_isSet) {
        obj.insert(QString("androidPackageName"), ::OpenAPI::toJsonValue(m_android_package_name));
    }
    if (m_can_handle_code_in_app_isSet) {
        obj.insert(QString("canHandleCodeInApp"), ::OpenAPI::toJsonValue(m_can_handle_code_in_app));
    }
    if (m_captcha_resp_isSet) {
        obj.insert(QString("captchaResp"), ::OpenAPI::toJsonValue(m_captcha_resp));
    }
    if (m_challenge_isSet) {
        obj.insert(QString("challenge"), ::OpenAPI::toJsonValue(m_challenge));
    }
    if (m_continue_url_isSet) {
        obj.insert(QString("continueUrl"), ::OpenAPI::toJsonValue(m_continue_url));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_i_os_app_store_id_isSet) {
        obj.insert(QString("iOSAppStoreId"), ::OpenAPI::toJsonValue(m_i_os_app_store_id));
    }
    if (m_i_os_bundle_id_isSet) {
        obj.insert(QString("iOSBundleId"), ::OpenAPI::toJsonValue(m_i_os_bundle_id));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_new_email_isSet) {
        obj.insert(QString("newEmail"), ::OpenAPI::toJsonValue(m_new_email));
    }
    if (m_request_type_isSet) {
        obj.insert(QString("requestType"), ::OpenAPI::toJsonValue(m_request_type));
    }
    if (m_user_ip_isSet) {
        obj.insert(QString("userIp"), ::OpenAPI::toJsonValue(m_user_ip));
    }
    return obj;
}

bool OAIRelyingparty::isAndroidInstallApp() const {
    return m_android_install_app;
}
void OAIRelyingparty::setAndroidInstallApp(const bool &android_install_app) {
    m_android_install_app = android_install_app;
    m_android_install_app_isSet = true;
}

bool OAIRelyingparty::is_android_install_app_Set() const{
    return m_android_install_app_isSet;
}

bool OAIRelyingparty::is_android_install_app_Valid() const{
    return m_android_install_app_isValid;
}

QString OAIRelyingparty::getAndroidMinimumVersion() const {
    return m_android_minimum_version;
}
void OAIRelyingparty::setAndroidMinimumVersion(const QString &android_minimum_version) {
    m_android_minimum_version = android_minimum_version;
    m_android_minimum_version_isSet = true;
}

bool OAIRelyingparty::is_android_minimum_version_Set() const{
    return m_android_minimum_version_isSet;
}

bool OAIRelyingparty::is_android_minimum_version_Valid() const{
    return m_android_minimum_version_isValid;
}

QString OAIRelyingparty::getAndroidPackageName() const {
    return m_android_package_name;
}
void OAIRelyingparty::setAndroidPackageName(const QString &android_package_name) {
    m_android_package_name = android_package_name;
    m_android_package_name_isSet = true;
}

bool OAIRelyingparty::is_android_package_name_Set() const{
    return m_android_package_name_isSet;
}

bool OAIRelyingparty::is_android_package_name_Valid() const{
    return m_android_package_name_isValid;
}

bool OAIRelyingparty::isCanHandleCodeInApp() const {
    return m_can_handle_code_in_app;
}
void OAIRelyingparty::setCanHandleCodeInApp(const bool &can_handle_code_in_app) {
    m_can_handle_code_in_app = can_handle_code_in_app;
    m_can_handle_code_in_app_isSet = true;
}

bool OAIRelyingparty::is_can_handle_code_in_app_Set() const{
    return m_can_handle_code_in_app_isSet;
}

bool OAIRelyingparty::is_can_handle_code_in_app_Valid() const{
    return m_can_handle_code_in_app_isValid;
}

QString OAIRelyingparty::getCaptchaResp() const {
    return m_captcha_resp;
}
void OAIRelyingparty::setCaptchaResp(const QString &captcha_resp) {
    m_captcha_resp = captcha_resp;
    m_captcha_resp_isSet = true;
}

bool OAIRelyingparty::is_captcha_resp_Set() const{
    return m_captcha_resp_isSet;
}

bool OAIRelyingparty::is_captcha_resp_Valid() const{
    return m_captcha_resp_isValid;
}

QString OAIRelyingparty::getChallenge() const {
    return m_challenge;
}
void OAIRelyingparty::setChallenge(const QString &challenge) {
    m_challenge = challenge;
    m_challenge_isSet = true;
}

bool OAIRelyingparty::is_challenge_Set() const{
    return m_challenge_isSet;
}

bool OAIRelyingparty::is_challenge_Valid() const{
    return m_challenge_isValid;
}

QString OAIRelyingparty::getContinueUrl() const {
    return m_continue_url;
}
void OAIRelyingparty::setContinueUrl(const QString &continue_url) {
    m_continue_url = continue_url;
    m_continue_url_isSet = true;
}

bool OAIRelyingparty::is_continue_url_Set() const{
    return m_continue_url_isSet;
}

bool OAIRelyingparty::is_continue_url_Valid() const{
    return m_continue_url_isValid;
}

QString OAIRelyingparty::getEmail() const {
    return m_email;
}
void OAIRelyingparty::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRelyingparty::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRelyingparty::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRelyingparty::getIOsAppStoreId() const {
    return m_i_os_app_store_id;
}
void OAIRelyingparty::setIOsAppStoreId(const QString &i_os_app_store_id) {
    m_i_os_app_store_id = i_os_app_store_id;
    m_i_os_app_store_id_isSet = true;
}

bool OAIRelyingparty::is_i_os_app_store_id_Set() const{
    return m_i_os_app_store_id_isSet;
}

bool OAIRelyingparty::is_i_os_app_store_id_Valid() const{
    return m_i_os_app_store_id_isValid;
}

QString OAIRelyingparty::getIOsBundleId() const {
    return m_i_os_bundle_id;
}
void OAIRelyingparty::setIOsBundleId(const QString &i_os_bundle_id) {
    m_i_os_bundle_id = i_os_bundle_id;
    m_i_os_bundle_id_isSet = true;
}

bool OAIRelyingparty::is_i_os_bundle_id_Set() const{
    return m_i_os_bundle_id_isSet;
}

bool OAIRelyingparty::is_i_os_bundle_id_Valid() const{
    return m_i_os_bundle_id_isValid;
}

QString OAIRelyingparty::getIdToken() const {
    return m_id_token;
}
void OAIRelyingparty::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIRelyingparty::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIRelyingparty::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIRelyingparty::getKind() const {
    return m_kind;
}
void OAIRelyingparty::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRelyingparty::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRelyingparty::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIRelyingparty::getNewEmail() const {
    return m_new_email;
}
void OAIRelyingparty::setNewEmail(const QString &new_email) {
    m_new_email = new_email;
    m_new_email_isSet = true;
}

bool OAIRelyingparty::is_new_email_Set() const{
    return m_new_email_isSet;
}

bool OAIRelyingparty::is_new_email_Valid() const{
    return m_new_email_isValid;
}

QString OAIRelyingparty::getRequestType() const {
    return m_request_type;
}
void OAIRelyingparty::setRequestType(const QString &request_type) {
    m_request_type = request_type;
    m_request_type_isSet = true;
}

bool OAIRelyingparty::is_request_type_Set() const{
    return m_request_type_isSet;
}

bool OAIRelyingparty::is_request_type_Valid() const{
    return m_request_type_isValid;
}

QString OAIRelyingparty::getUserIp() const {
    return m_user_ip;
}
void OAIRelyingparty::setUserIp(const QString &user_ip) {
    m_user_ip = user_ip;
    m_user_ip_isSet = true;
}

bool OAIRelyingparty::is_user_ip_Set() const{
    return m_user_ip_isSet;
}

bool OAIRelyingparty::is_user_ip_Valid() const{
    return m_user_ip_isValid;
}

bool OAIRelyingparty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_install_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_minimum_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_handle_code_in_app_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_captcha_resp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continue_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_os_app_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_os_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelyingparty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
