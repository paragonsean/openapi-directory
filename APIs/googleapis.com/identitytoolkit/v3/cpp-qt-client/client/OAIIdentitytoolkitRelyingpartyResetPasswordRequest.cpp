/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitytoolkitRelyingpartyResetPasswordRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitytoolkitRelyingpartyResetPasswordRequest::OAIIdentitytoolkitRelyingpartyResetPasswordRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitytoolkitRelyingpartyResetPasswordRequest::OAIIdentitytoolkitRelyingpartyResetPasswordRequest() {
    this->initializeModel();
}

OAIIdentitytoolkitRelyingpartyResetPasswordRequest::~OAIIdentitytoolkitRelyingpartyResetPasswordRequest() {}

void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_new_password_isSet = false;
    m_new_password_isValid = false;

    m_old_password_isSet = false;
    m_old_password_isValid = false;

    m_oob_code_isSet = false;
    m_oob_code_isValid = false;
}

void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_new_password_isValid = ::OpenAPI::fromJsonValue(m_new_password, json[QString("newPassword")]);
    m_new_password_isSet = !json[QString("newPassword")].isNull() && m_new_password_isValid;

    m_old_password_isValid = ::OpenAPI::fromJsonValue(m_old_password, json[QString("oldPassword")]);
    m_old_password_isSet = !json[QString("oldPassword")].isNull() && m_old_password_isValid;

    m_oob_code_isValid = ::OpenAPI::fromJsonValue(m_oob_code, json[QString("oobCode")]);
    m_oob_code_isSet = !json[QString("oobCode")].isNull() && m_oob_code_isValid;
}

QString OAIIdentitytoolkitRelyingpartyResetPasswordRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitytoolkitRelyingpartyResetPasswordRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_new_password_isSet) {
        obj.insert(QString("newPassword"), ::OpenAPI::toJsonValue(m_new_password));
    }
    if (m_old_password_isSet) {
        obj.insert(QString("oldPassword"), ::OpenAPI::toJsonValue(m_old_password));
    }
    if (m_oob_code_isSet) {
        obj.insert(QString("oobCode"), ::OpenAPI::toJsonValue(m_oob_code));
    }
    return obj;
}

QString OAIIdentitytoolkitRelyingpartyResetPasswordRequest::getEmail() const {
    return m_email;
}
void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIIdentitytoolkitRelyingpartyResetPasswordRequest::getNewPassword() const {
    return m_new_password;
}
void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::setNewPassword(const QString &new_password) {
    m_new_password = new_password;
    m_new_password_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_new_password_Set() const{
    return m_new_password_isSet;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_new_password_Valid() const{
    return m_new_password_isValid;
}

QString OAIIdentitytoolkitRelyingpartyResetPasswordRequest::getOldPassword() const {
    return m_old_password;
}
void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::setOldPassword(const QString &old_password) {
    m_old_password = old_password;
    m_old_password_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_old_password_Set() const{
    return m_old_password_isSet;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_old_password_Valid() const{
    return m_old_password_isValid;
}

QString OAIIdentitytoolkitRelyingpartyResetPasswordRequest::getOobCode() const {
    return m_oob_code;
}
void OAIIdentitytoolkitRelyingpartyResetPasswordRequest::setOobCode(const QString &oob_code) {
    m_oob_code = oob_code;
    m_oob_code_isSet = true;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_oob_code_Set() const{
    return m_oob_code_isSet;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::is_oob_code_Valid() const{
    return m_oob_code_isValid;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oob_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitytoolkitRelyingpartyResetPasswordRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
