/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRelyingpartyApi_H
#define OAI_OAIRelyingpartyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAuthUriResponse.h"
#include "OAIDeleteAccountResponse.h"
#include "OAIDownloadAccountResponse.h"
#include "OAIEmailLinkSigninResponse.h"
#include "OAIGetAccountInfoResponse.h"
#include "OAIGetOobConfirmationCodeResponse.h"
#include "OAIGetRecaptchaParamResponse.h"
#include "OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest.h"
#include "OAIIdentitytoolkitRelyingpartyDeleteAccountRequest.h"
#include "OAIIdentitytoolkitRelyingpartyDownloadAccountRequest.h"
#include "OAIIdentitytoolkitRelyingpartyEmailLinkSigninRequest.h"
#include "OAIIdentitytoolkitRelyingpartyGetAccountInfoRequest.h"
#include "OAIIdentitytoolkitRelyingpartyGetProjectConfigResponse.h"
#include "OAIIdentitytoolkitRelyingpartyResetPasswordRequest.h"
#include "OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest.h"
#include "OAIIdentitytoolkitRelyingpartySendVerificationCodeResponse.h"
#include "OAIIdentitytoolkitRelyingpartySetAccountInfoRequest.h"
#include "OAIIdentitytoolkitRelyingpartySetProjectConfigRequest.h"
#include "OAIIdentitytoolkitRelyingpartySetProjectConfigResponse.h"
#include "OAIIdentitytoolkitRelyingpartySignOutUserRequest.h"
#include "OAIIdentitytoolkitRelyingpartySignOutUserResponse.h"
#include "OAIIdentitytoolkitRelyingpartySignupNewUserRequest.h"
#include "OAIIdentitytoolkitRelyingpartyUploadAccountRequest.h"
#include "OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest.h"
#include "OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest.h"
#include "OAIIdentitytoolkitRelyingpartyVerifyPasswordRequest.h"
#include "OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest.h"
#include "OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse.h"
#include "OAIRelyingparty.h"
#include "OAIResetPasswordResponse.h"
#include "OAISetAccountInfoResponse.h"
#include "OAISignupNewUserResponse.h"
#include "OAIUploadAccountResponse.h"
#include "OAIVerifyAssertionResponse.h"
#include "OAIVerifyCustomTokenResponse.h"
#include "OAIVerifyPasswordResponse.h"
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRelyingpartyApi : public QObject {
    Q_OBJECT

public:
    OAIRelyingpartyApi(const int timeOut = 0);
    ~OAIRelyingpartyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_create_auth_uri_request OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_createAuthUri(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest> &oai_identitytoolkit_relyingparty_create_auth_uri_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyCreateAuthUriRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_delete_account_request OAIIdentitytoolkitRelyingpartyDeleteAccountRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_deleteAccount(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyDeleteAccountRequest> &oai_identitytoolkit_relyingparty_delete_account_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyDeleteAccountRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_download_account_request OAIIdentitytoolkitRelyingpartyDownloadAccountRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_downloadAccount(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyDownloadAccountRequest> &oai_identitytoolkit_relyingparty_download_account_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyDownloadAccountRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_email_link_signin_request OAIIdentitytoolkitRelyingpartyEmailLinkSigninRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_emailLinkSignin(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyEmailLinkSigninRequest> &oai_identitytoolkit_relyingparty_email_link_signin_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyEmailLinkSigninRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_get_account_info_request OAIIdentitytoolkitRelyingpartyGetAccountInfoRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_getAccountInfo(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyGetAccountInfoRequest> &oai_identitytoolkit_relyingparty_get_account_info_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyGetAccountInfoRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_relyingparty OAIRelyingparty [optional]
    */
    virtual void identitytoolkit_relyingparty_getOobConfirmationCode(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRelyingparty> &oai_relyingparty = ::OpenAPI::OptionalParam<OAIRelyingparty>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  delegated_project_number QString [optional]
    * @param[in]  project_number QString [optional]
    */
    virtual void identitytoolkit_relyingparty_getProjectConfig(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delegated_project_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &project_number = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void identitytoolkit_relyingparty_getPublicKeys(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void identitytoolkit_relyingparty_getRecaptchaParam(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_reset_password_request OAIIdentitytoolkitRelyingpartyResetPasswordRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_resetPassword(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyResetPasswordRequest> &oai_identitytoolkit_relyingparty_reset_password_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyResetPasswordRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_send_verification_code_request OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_sendVerificationCode(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest> &oai_identitytoolkit_relyingparty_send_verification_code_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySendVerificationCodeRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_set_account_info_request OAIIdentitytoolkitRelyingpartySetAccountInfoRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_setAccountInfo(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySetAccountInfoRequest> &oai_identitytoolkit_relyingparty_set_account_info_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySetAccountInfoRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_set_project_config_request OAIIdentitytoolkitRelyingpartySetProjectConfigRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_setProjectConfig(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySetProjectConfigRequest> &oai_identitytoolkit_relyingparty_set_project_config_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySetProjectConfigRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_sign_out_user_request OAIIdentitytoolkitRelyingpartySignOutUserRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_signOutUser(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySignOutUserRequest> &oai_identitytoolkit_relyingparty_sign_out_user_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySignOutUserRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_signup_new_user_request OAIIdentitytoolkitRelyingpartySignupNewUserRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_signupNewUser(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySignupNewUserRequest> &oai_identitytoolkit_relyingparty_signup_new_user_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartySignupNewUserRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_upload_account_request OAIIdentitytoolkitRelyingpartyUploadAccountRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_uploadAccount(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyUploadAccountRequest> &oai_identitytoolkit_relyingparty_upload_account_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyUploadAccountRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_verify_assertion_request OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_verifyAssertion(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest> &oai_identitytoolkit_relyingparty_verify_assertion_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyAssertionRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_verify_custom_token_request OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_verifyCustomToken(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest> &oai_identitytoolkit_relyingparty_verify_custom_token_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyCustomTokenRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_verify_password_request OAIIdentitytoolkitRelyingpartyVerifyPasswordRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_verifyPassword(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyPasswordRequest> &oai_identitytoolkit_relyingparty_verify_password_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyPasswordRequest>());

    /**
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_identitytoolkit_relyingparty_verify_phone_number_request OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest [optional]
    */
    virtual void identitytoolkit_relyingparty_verifyPhoneNumber(const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest> &oai_identitytoolkit_relyingparty_verify_phone_number_request = ::OpenAPI::OptionalParam<OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void identitytoolkit_relyingparty_createAuthUriCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_deleteAccountCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_downloadAccountCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_emailLinkSigninCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_getAccountInfoCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_getOobConfirmationCodeCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_getProjectConfigCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_getPublicKeysCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_getRecaptchaParamCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_resetPasswordCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_sendVerificationCodeCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_setAccountInfoCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_setProjectConfigCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_signOutUserCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_signupNewUserCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_uploadAccountCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_verifyAssertionCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_verifyCustomTokenCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_verifyPasswordCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_relyingparty_verifyPhoneNumberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void identitytoolkit_relyingparty_createAuthUriSignal(OAICreateAuthUriResponse summary);
    void identitytoolkit_relyingparty_deleteAccountSignal(OAIDeleteAccountResponse summary);
    void identitytoolkit_relyingparty_downloadAccountSignal(OAIDownloadAccountResponse summary);
    void identitytoolkit_relyingparty_emailLinkSigninSignal(OAIEmailLinkSigninResponse summary);
    void identitytoolkit_relyingparty_getAccountInfoSignal(OAIGetAccountInfoResponse summary);
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignal(OAIGetOobConfirmationCodeResponse summary);
    void identitytoolkit_relyingparty_getProjectConfigSignal(OAIIdentitytoolkitRelyingpartyGetProjectConfigResponse summary);
    void identitytoolkit_relyingparty_getPublicKeysSignal(QMap<QString, QString> summary);
    void identitytoolkit_relyingparty_getRecaptchaParamSignal(OAIGetRecaptchaParamResponse summary);
    void identitytoolkit_relyingparty_resetPasswordSignal(OAIResetPasswordResponse summary);
    void identitytoolkit_relyingparty_sendVerificationCodeSignal(OAIIdentitytoolkitRelyingpartySendVerificationCodeResponse summary);
    void identitytoolkit_relyingparty_setAccountInfoSignal(OAISetAccountInfoResponse summary);
    void identitytoolkit_relyingparty_setProjectConfigSignal(OAIIdentitytoolkitRelyingpartySetProjectConfigResponse summary);
    void identitytoolkit_relyingparty_signOutUserSignal(OAIIdentitytoolkitRelyingpartySignOutUserResponse summary);
    void identitytoolkit_relyingparty_signupNewUserSignal(OAISignupNewUserResponse summary);
    void identitytoolkit_relyingparty_uploadAccountSignal(OAIUploadAccountResponse summary);
    void identitytoolkit_relyingparty_verifyAssertionSignal(OAIVerifyAssertionResponse summary);
    void identitytoolkit_relyingparty_verifyCustomTokenSignal(OAIVerifyCustomTokenResponse summary);
    void identitytoolkit_relyingparty_verifyPasswordSignal(OAIVerifyPasswordResponse summary);
    void identitytoolkit_relyingparty_verifyPhoneNumberSignal(OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse summary);


    void identitytoolkit_relyingparty_createAuthUriSignalFull(OAIHttpRequestWorker *worker, OAICreateAuthUriResponse summary);
    void identitytoolkit_relyingparty_deleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIDeleteAccountResponse summary);
    void identitytoolkit_relyingparty_downloadAccountSignalFull(OAIHttpRequestWorker *worker, OAIDownloadAccountResponse summary);
    void identitytoolkit_relyingparty_emailLinkSigninSignalFull(OAIHttpRequestWorker *worker, OAIEmailLinkSigninResponse summary);
    void identitytoolkit_relyingparty_getAccountInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountInfoResponse summary);
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignalFull(OAIHttpRequestWorker *worker, OAIGetOobConfirmationCodeResponse summary);
    void identitytoolkit_relyingparty_getProjectConfigSignalFull(OAIHttpRequestWorker *worker, OAIIdentitytoolkitRelyingpartyGetProjectConfigResponse summary);
    void identitytoolkit_relyingparty_getPublicKeysSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QString> summary);
    void identitytoolkit_relyingparty_getRecaptchaParamSignalFull(OAIHttpRequestWorker *worker, OAIGetRecaptchaParamResponse summary);
    void identitytoolkit_relyingparty_resetPasswordSignalFull(OAIHttpRequestWorker *worker, OAIResetPasswordResponse summary);
    void identitytoolkit_relyingparty_sendVerificationCodeSignalFull(OAIHttpRequestWorker *worker, OAIIdentitytoolkitRelyingpartySendVerificationCodeResponse summary);
    void identitytoolkit_relyingparty_setAccountInfoSignalFull(OAIHttpRequestWorker *worker, OAISetAccountInfoResponse summary);
    void identitytoolkit_relyingparty_setProjectConfigSignalFull(OAIHttpRequestWorker *worker, OAIIdentitytoolkitRelyingpartySetProjectConfigResponse summary);
    void identitytoolkit_relyingparty_signOutUserSignalFull(OAIHttpRequestWorker *worker, OAIIdentitytoolkitRelyingpartySignOutUserResponse summary);
    void identitytoolkit_relyingparty_signupNewUserSignalFull(OAIHttpRequestWorker *worker, OAISignupNewUserResponse summary);
    void identitytoolkit_relyingparty_uploadAccountSignalFull(OAIHttpRequestWorker *worker, OAIUploadAccountResponse summary);
    void identitytoolkit_relyingparty_verifyAssertionSignalFull(OAIHttpRequestWorker *worker, OAIVerifyAssertionResponse summary);
    void identitytoolkit_relyingparty_verifyCustomTokenSignalFull(OAIHttpRequestWorker *worker, OAIVerifyCustomTokenResponse summary);
    void identitytoolkit_relyingparty_verifyPasswordSignalFull(OAIHttpRequestWorker *worker, OAIVerifyPasswordResponse summary);
    void identitytoolkit_relyingparty_verifyPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse summary);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_createAuthUriSignalError() instead")
    void identitytoolkit_relyingparty_createAuthUriSignalE(OAICreateAuthUriResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_createAuthUriSignalError(OAICreateAuthUriResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_deleteAccountSignalError() instead")
    void identitytoolkit_relyingparty_deleteAccountSignalE(OAIDeleteAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_deleteAccountSignalError(OAIDeleteAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_downloadAccountSignalError() instead")
    void identitytoolkit_relyingparty_downloadAccountSignalE(OAIDownloadAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_downloadAccountSignalError(OAIDownloadAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_emailLinkSigninSignalError() instead")
    void identitytoolkit_relyingparty_emailLinkSigninSignalE(OAIEmailLinkSigninResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_emailLinkSigninSignalError(OAIEmailLinkSigninResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getAccountInfoSignalError() instead")
    void identitytoolkit_relyingparty_getAccountInfoSignalE(OAIGetAccountInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getAccountInfoSignalError(OAIGetAccountInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getOobConfirmationCodeSignalError() instead")
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignalE(OAIGetOobConfirmationCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignalError(OAIGetOobConfirmationCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getProjectConfigSignalError() instead")
    void identitytoolkit_relyingparty_getProjectConfigSignalE(OAIIdentitytoolkitRelyingpartyGetProjectConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getProjectConfigSignalError(OAIIdentitytoolkitRelyingpartyGetProjectConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getPublicKeysSignalError() instead")
    void identitytoolkit_relyingparty_getPublicKeysSignalE(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getPublicKeysSignalError(QMap<QString, QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getRecaptchaParamSignalError() instead")
    void identitytoolkit_relyingparty_getRecaptchaParamSignalE(OAIGetRecaptchaParamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getRecaptchaParamSignalError(OAIGetRecaptchaParamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_resetPasswordSignalError() instead")
    void identitytoolkit_relyingparty_resetPasswordSignalE(OAIResetPasswordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_resetPasswordSignalError(OAIResetPasswordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_sendVerificationCodeSignalError() instead")
    void identitytoolkit_relyingparty_sendVerificationCodeSignalE(OAIIdentitytoolkitRelyingpartySendVerificationCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_sendVerificationCodeSignalError(OAIIdentitytoolkitRelyingpartySendVerificationCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_setAccountInfoSignalError() instead")
    void identitytoolkit_relyingparty_setAccountInfoSignalE(OAISetAccountInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_setAccountInfoSignalError(OAISetAccountInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_setProjectConfigSignalError() instead")
    void identitytoolkit_relyingparty_setProjectConfigSignalE(OAIIdentitytoolkitRelyingpartySetProjectConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_setProjectConfigSignalError(OAIIdentitytoolkitRelyingpartySetProjectConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_signOutUserSignalError() instead")
    void identitytoolkit_relyingparty_signOutUserSignalE(OAIIdentitytoolkitRelyingpartySignOutUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_signOutUserSignalError(OAIIdentitytoolkitRelyingpartySignOutUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_signupNewUserSignalError() instead")
    void identitytoolkit_relyingparty_signupNewUserSignalE(OAISignupNewUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_signupNewUserSignalError(OAISignupNewUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_uploadAccountSignalError() instead")
    void identitytoolkit_relyingparty_uploadAccountSignalE(OAIUploadAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_uploadAccountSignalError(OAIUploadAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyAssertionSignalError() instead")
    void identitytoolkit_relyingparty_verifyAssertionSignalE(OAIVerifyAssertionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyAssertionSignalError(OAIVerifyAssertionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyCustomTokenSignalError() instead")
    void identitytoolkit_relyingparty_verifyCustomTokenSignalE(OAIVerifyCustomTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyCustomTokenSignalError(OAIVerifyCustomTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyPasswordSignalError() instead")
    void identitytoolkit_relyingparty_verifyPasswordSignalE(OAIVerifyPasswordResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyPasswordSignalError(OAIVerifyPasswordResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyPhoneNumberSignalError() instead")
    void identitytoolkit_relyingparty_verifyPhoneNumberSignalE(OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyPhoneNumberSignalError(OAIIdentitytoolkitRelyingpartyVerifyPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_createAuthUriSignalErrorFull() instead")
    void identitytoolkit_relyingparty_createAuthUriSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_createAuthUriSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_deleteAccountSignalErrorFull() instead")
    void identitytoolkit_relyingparty_deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_downloadAccountSignalErrorFull() instead")
    void identitytoolkit_relyingparty_downloadAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_downloadAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_emailLinkSigninSignalErrorFull() instead")
    void identitytoolkit_relyingparty_emailLinkSigninSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_emailLinkSigninSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getAccountInfoSignalErrorFull() instead")
    void identitytoolkit_relyingparty_getAccountInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getAccountInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getOobConfirmationCodeSignalErrorFull() instead")
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getOobConfirmationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getProjectConfigSignalErrorFull() instead")
    void identitytoolkit_relyingparty_getProjectConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getProjectConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getPublicKeysSignalErrorFull() instead")
    void identitytoolkit_relyingparty_getPublicKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getPublicKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_getRecaptchaParamSignalErrorFull() instead")
    void identitytoolkit_relyingparty_getRecaptchaParamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_getRecaptchaParamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_resetPasswordSignalErrorFull() instead")
    void identitytoolkit_relyingparty_resetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_resetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_sendVerificationCodeSignalErrorFull() instead")
    void identitytoolkit_relyingparty_sendVerificationCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_sendVerificationCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_setAccountInfoSignalErrorFull() instead")
    void identitytoolkit_relyingparty_setAccountInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_setAccountInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_setProjectConfigSignalErrorFull() instead")
    void identitytoolkit_relyingparty_setProjectConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_setProjectConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_signOutUserSignalErrorFull() instead")
    void identitytoolkit_relyingparty_signOutUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_signOutUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_signupNewUserSignalErrorFull() instead")
    void identitytoolkit_relyingparty_signupNewUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_signupNewUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_uploadAccountSignalErrorFull() instead")
    void identitytoolkit_relyingparty_uploadAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_uploadAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyAssertionSignalErrorFull() instead")
    void identitytoolkit_relyingparty_verifyAssertionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyAssertionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyCustomTokenSignalErrorFull() instead")
    void identitytoolkit_relyingparty_verifyCustomTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyCustomTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyPasswordSignalErrorFull() instead")
    void identitytoolkit_relyingparty_verifyPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_relyingparty_verifyPhoneNumberSignalErrorFull() instead")
    void identitytoolkit_relyingparty_verifyPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_relyingparty_verifyPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
