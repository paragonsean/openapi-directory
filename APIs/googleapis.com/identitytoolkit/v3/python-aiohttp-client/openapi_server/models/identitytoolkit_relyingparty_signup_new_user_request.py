# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentitytoolkitRelyingpartySignupNewUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, captcha_challenge: str=None, captcha_response: str=None, disabled: bool=None, display_name: str=None, email: str=None, email_verified: bool=None, id_token: str=None, instance_id: str=None, local_id: str=None, password: str=None, phone_number: str=None, photo_url: str=None, tenant_id: str=None, tenant_project_number: str=None):
        """IdentitytoolkitRelyingpartySignupNewUserRequest - a model defined in OpenAPI

        :param captcha_challenge: The captcha_challenge of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param captcha_response: The captcha_response of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param disabled: The disabled of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param display_name: The display_name of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param email: The email of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param email_verified: The email_verified of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param id_token: The id_token of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param instance_id: The instance_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param local_id: The local_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param password: The password of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param phone_number: The phone_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param photo_url: The photo_url of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param tenant_id: The tenant_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :param tenant_project_number: The tenant_project_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        """
        self.openapi_types = {
            'captcha_challenge': str,
            'captcha_response': str,
            'disabled': bool,
            'display_name': str,
            'email': str,
            'email_verified': bool,
            'id_token': str,
            'instance_id': str,
            'local_id': str,
            'password': str,
            'phone_number': str,
            'photo_url': str,
            'tenant_id': str,
            'tenant_project_number': str
        }

        self.attribute_map = {
            'captcha_challenge': 'captchaChallenge',
            'captcha_response': 'captchaResponse',
            'disabled': 'disabled',
            'display_name': 'displayName',
            'email': 'email',
            'email_verified': 'emailVerified',
            'id_token': 'idToken',
            'instance_id': 'instanceId',
            'local_id': 'localId',
            'password': 'password',
            'phone_number': 'phoneNumber',
            'photo_url': 'photoUrl',
            'tenant_id': 'tenantId',
            'tenant_project_number': 'tenantProjectNumber'
        }

        self._captcha_challenge = captcha_challenge
        self._captcha_response = captcha_response
        self._disabled = disabled
        self._display_name = display_name
        self._email = email
        self._email_verified = email_verified
        self._id_token = id_token
        self._instance_id = instance_id
        self._local_id = local_id
        self._password = password
        self._phone_number = phone_number
        self._photo_url = photo_url
        self._tenant_id = tenant_id
        self._tenant_project_number = tenant_project_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentitytoolkitRelyingpartySignupNewUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentitytoolkitRelyingpartySignupNewUserRequest of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def captcha_challenge(self):
        """Gets the captcha_challenge of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The captcha challenge.

        :return: The captcha_challenge of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._captcha_challenge

    @captcha_challenge.setter
    def captcha_challenge(self, captcha_challenge):
        """Sets the captcha_challenge of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The captcha challenge.

        :param captcha_challenge: The captcha_challenge of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type captcha_challenge: str
        """

        self._captcha_challenge = captcha_challenge

    @property
    def captcha_response(self):
        """Gets the captcha_response of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Response to the captcha.

        :return: The captcha_response of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._captcha_response

    @captcha_response.setter
    def captcha_response(self, captcha_response):
        """Sets the captcha_response of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Response to the captcha.

        :param captcha_response: The captcha_response of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type captcha_response: str
        """

        self._captcha_response = captcha_response

    @property
    def disabled(self):
        """Gets the disabled of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Whether to disable the user. Only can be used by service account.

        :return: The disabled of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Whether to disable the user. Only can be used by service account.

        :param disabled: The disabled of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The name of the user.

        :return: The display_name of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The name of the user.

        :param display_name: The display_name of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The email of the user.

        :return: The email of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The email of the user.

        :param email: The email of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Mark the email as verified or not. Only can be used by service account.

        :return: The email_verified of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Mark the email as verified or not. Only can be used by service account.

        :param email_verified: The email_verified of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def id_token(self):
        """Gets the id_token of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The GITKit token of the authenticated user.

        :return: The id_token of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The GITKit token of the authenticated user.

        :param id_token: The id_token of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def instance_id(self):
        """Gets the instance_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Instance id token of the app.

        :return: The instance_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Instance id token of the app.

        :param instance_id: The instance_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def local_id(self):
        """Gets the local_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Privileged caller can create user with specified user id.

        :return: The local_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Privileged caller can create user with specified user id.

        :param local_id: The local_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def password(self):
        """Gets the password of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The new password of the user.

        :return: The password of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The new password of the user.

        :param password: The password of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type password: str
        """

        self._password = password

    @property
    def phone_number(self):
        """Gets the phone_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Privileged caller can create user with specified phone number.

        :return: The phone_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Privileged caller can create user with specified phone number.

        :param phone_number: The phone_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def photo_url(self):
        """Gets the photo_url of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The photo url of the user.

        :return: The photo_url of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        The photo url of the user.

        :param photo_url: The photo_url of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def tenant_id(self):
        """Gets the tenant_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.

        :return: The tenant_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.

        :param tenant_id: The tenant_id of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def tenant_project_number(self):
        """Gets the tenant_project_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Tenant project number to be used for idp discovery.

        :return: The tenant_project_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :rtype: str
        """
        return self._tenant_project_number

    @tenant_project_number.setter
    def tenant_project_number(self, tenant_project_number):
        """Sets the tenant_project_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.

        Tenant project number to be used for idp discovery.

        :param tenant_project_number: The tenant_project_number of this IdentitytoolkitRelyingpartySignupNewUserRequest.
        :type tenant_project_number: str
        """

        self._tenant_project_number = tenant_project_number
