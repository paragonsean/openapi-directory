# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAuthUriResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_providers: List[str]=None, auth_uri: str=None, captcha_required: bool=None, for_existing_provider: bool=None, kind: str='identitytoolkit#CreateAuthUriResponse', provider_id: str=None, registered: bool=None, session_id: str=None, signin_methods: List[str]=None):
        """CreateAuthUriResponse - a model defined in OpenAPI

        :param all_providers: The all_providers of this CreateAuthUriResponse.
        :param auth_uri: The auth_uri of this CreateAuthUriResponse.
        :param captcha_required: The captcha_required of this CreateAuthUriResponse.
        :param for_existing_provider: The for_existing_provider of this CreateAuthUriResponse.
        :param kind: The kind of this CreateAuthUriResponse.
        :param provider_id: The provider_id of this CreateAuthUriResponse.
        :param registered: The registered of this CreateAuthUriResponse.
        :param session_id: The session_id of this CreateAuthUriResponse.
        :param signin_methods: The signin_methods of this CreateAuthUriResponse.
        """
        self.openapi_types = {
            'all_providers': List[str],
            'auth_uri': str,
            'captcha_required': bool,
            'for_existing_provider': bool,
            'kind': str,
            'provider_id': str,
            'registered': bool,
            'session_id': str,
            'signin_methods': List[str]
        }

        self.attribute_map = {
            'all_providers': 'allProviders',
            'auth_uri': 'authUri',
            'captcha_required': 'captchaRequired',
            'for_existing_provider': 'forExistingProvider',
            'kind': 'kind',
            'provider_id': 'providerId',
            'registered': 'registered',
            'session_id': 'sessionId',
            'signin_methods': 'signinMethods'
        }

        self._all_providers = all_providers
        self._auth_uri = auth_uri
        self._captcha_required = captcha_required
        self._for_existing_provider = for_existing_provider
        self._kind = kind
        self._provider_id = provider_id
        self._registered = registered
        self._session_id = session_id
        self._signin_methods = signin_methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAuthUriResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAuthUriResponse of this CreateAuthUriResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_providers(self):
        """Gets the all_providers of this CreateAuthUriResponse.

        all providers the user has once used to do federated login

        :return: The all_providers of this CreateAuthUriResponse.
        :rtype: List[str]
        """
        return self._all_providers

    @all_providers.setter
    def all_providers(self, all_providers):
        """Sets the all_providers of this CreateAuthUriResponse.

        all providers the user has once used to do federated login

        :param all_providers: The all_providers of this CreateAuthUriResponse.
        :type all_providers: List[str]
        """

        self._all_providers = all_providers

    @property
    def auth_uri(self):
        """Gets the auth_uri of this CreateAuthUriResponse.

        The URI used by the IDP to authenticate the user.

        :return: The auth_uri of this CreateAuthUriResponse.
        :rtype: str
        """
        return self._auth_uri

    @auth_uri.setter
    def auth_uri(self, auth_uri):
        """Sets the auth_uri of this CreateAuthUriResponse.

        The URI used by the IDP to authenticate the user.

        :param auth_uri: The auth_uri of this CreateAuthUriResponse.
        :type auth_uri: str
        """

        self._auth_uri = auth_uri

    @property
    def captcha_required(self):
        """Gets the captcha_required of this CreateAuthUriResponse.

        True if captcha is required.

        :return: The captcha_required of this CreateAuthUriResponse.
        :rtype: bool
        """
        return self._captcha_required

    @captcha_required.setter
    def captcha_required(self, captcha_required):
        """Sets the captcha_required of this CreateAuthUriResponse.

        True if captcha is required.

        :param captcha_required: The captcha_required of this CreateAuthUriResponse.
        :type captcha_required: bool
        """

        self._captcha_required = captcha_required

    @property
    def for_existing_provider(self):
        """Gets the for_existing_provider of this CreateAuthUriResponse.

        True if the authUri is for user's existing provider.

        :return: The for_existing_provider of this CreateAuthUriResponse.
        :rtype: bool
        """
        return self._for_existing_provider

    @for_existing_provider.setter
    def for_existing_provider(self, for_existing_provider):
        """Sets the for_existing_provider of this CreateAuthUriResponse.

        True if the authUri is for user's existing provider.

        :param for_existing_provider: The for_existing_provider of this CreateAuthUriResponse.
        :type for_existing_provider: bool
        """

        self._for_existing_provider = for_existing_provider

    @property
    def kind(self):
        """Gets the kind of this CreateAuthUriResponse.

        The fixed string identitytoolkit#CreateAuthUriResponse\".

        :return: The kind of this CreateAuthUriResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CreateAuthUriResponse.

        The fixed string identitytoolkit#CreateAuthUriResponse\".

        :param kind: The kind of this CreateAuthUriResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def provider_id(self):
        """Gets the provider_id of this CreateAuthUriResponse.

        The provider ID of the auth URI.

        :return: The provider_id of this CreateAuthUriResponse.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this CreateAuthUriResponse.

        The provider ID of the auth URI.

        :param provider_id: The provider_id of this CreateAuthUriResponse.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def registered(self):
        """Gets the registered of this CreateAuthUriResponse.

        Whether the user is registered if the identifier is an email.

        :return: The registered of this CreateAuthUriResponse.
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this CreateAuthUriResponse.

        Whether the user is registered if the identifier is an email.

        :param registered: The registered of this CreateAuthUriResponse.
        :type registered: bool
        """

        self._registered = registered

    @property
    def session_id(self):
        """Gets the session_id of this CreateAuthUriResponse.

        Session ID which should be passed in the following verifyAssertion request.

        :return: The session_id of this CreateAuthUriResponse.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CreateAuthUriResponse.

        Session ID which should be passed in the following verifyAssertion request.

        :param session_id: The session_id of this CreateAuthUriResponse.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def signin_methods(self):
        """Gets the signin_methods of this CreateAuthUriResponse.

        All sign-in methods this user has used.

        :return: The signin_methods of this CreateAuthUriResponse.
        :rtype: List[str]
        """
        return self._signin_methods

    @signin_methods.setter
    def signin_methods(self, signin_methods):
        """Sets the signin_methods of this CreateAuthUriResponse.

        All sign-in methods this user has used.

        :param signin_methods: The signin_methods of this CreateAuthUriResponse.
        :type signin_methods: List[str]
        """

        self._signin_methods = signin_methods
