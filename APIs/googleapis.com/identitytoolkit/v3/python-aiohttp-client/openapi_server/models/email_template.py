# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, format: str=None, _from: str=None, from_display_name: str=None, reply_to: str=None, subject: str=None):
        """EmailTemplate - a model defined in OpenAPI

        :param body: The body of this EmailTemplate.
        :param format: The format of this EmailTemplate.
        :param _from: The _from of this EmailTemplate.
        :param from_display_name: The from_display_name of this EmailTemplate.
        :param reply_to: The reply_to of this EmailTemplate.
        :param subject: The subject of this EmailTemplate.
        """
        self.openapi_types = {
            'body': str,
            'format': str,
            '_from': str,
            'from_display_name': str,
            'reply_to': str,
            'subject': str
        }

        self.attribute_map = {
            'body': 'body',
            'format': 'format',
            '_from': 'from',
            'from_display_name': 'fromDisplayName',
            'reply_to': 'replyTo',
            'subject': 'subject'
        }

        self._body = body
        self._format = format
        self.__from = _from
        self._from_display_name = from_display_name
        self._reply_to = reply_to
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailTemplate of this EmailTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this EmailTemplate.

        Email body.

        :return: The body of this EmailTemplate.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this EmailTemplate.

        Email body.

        :param body: The body of this EmailTemplate.
        :type body: str
        """

        self._body = body

    @property
    def format(self):
        """Gets the format of this EmailTemplate.

        Email body format.

        :return: The format of this EmailTemplate.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this EmailTemplate.

        Email body format.

        :param format: The format of this EmailTemplate.
        :type format: str
        """

        self._format = format

    @property
    def _from(self):
        """Gets the _from of this EmailTemplate.

        From address of the email.

        :return: The _from of this EmailTemplate.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this EmailTemplate.

        From address of the email.

        :param _from: The _from of this EmailTemplate.
        :type _from: str
        """

        self.__from = _from

    @property
    def from_display_name(self):
        """Gets the from_display_name of this EmailTemplate.

        From display name.

        :return: The from_display_name of this EmailTemplate.
        :rtype: str
        """
        return self._from_display_name

    @from_display_name.setter
    def from_display_name(self, from_display_name):
        """Sets the from_display_name of this EmailTemplate.

        From display name.

        :param from_display_name: The from_display_name of this EmailTemplate.
        :type from_display_name: str
        """

        self._from_display_name = from_display_name

    @property
    def reply_to(self):
        """Gets the reply_to of this EmailTemplate.

        Reply-to address.

        :return: The reply_to of this EmailTemplate.
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this EmailTemplate.

        Reply-to address.

        :param reply_to: The reply_to of this EmailTemplate.
        :type reply_to: str
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this EmailTemplate.

        Subject of the email.

        :return: The subject of this EmailTemplate.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailTemplate.

        Subject of the email.

        :param subject: The subject of this EmailTemplate.
        :type subject: str
        """

        self._subject = subject
