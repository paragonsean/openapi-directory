# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyPasswordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, expires_in: str=None, id_token: str=None, kind: str='identitytoolkit#VerifyPasswordResponse', local_id: str=None, oauth_access_token: str=None, oauth_authorization_code: str=None, oauth_expire_in: int=None, photo_url: str=None, refresh_token: str=None, registered: bool=None):
        """VerifyPasswordResponse - a model defined in OpenAPI

        :param display_name: The display_name of this VerifyPasswordResponse.
        :param email: The email of this VerifyPasswordResponse.
        :param expires_in: The expires_in of this VerifyPasswordResponse.
        :param id_token: The id_token of this VerifyPasswordResponse.
        :param kind: The kind of this VerifyPasswordResponse.
        :param local_id: The local_id of this VerifyPasswordResponse.
        :param oauth_access_token: The oauth_access_token of this VerifyPasswordResponse.
        :param oauth_authorization_code: The oauth_authorization_code of this VerifyPasswordResponse.
        :param oauth_expire_in: The oauth_expire_in of this VerifyPasswordResponse.
        :param photo_url: The photo_url of this VerifyPasswordResponse.
        :param refresh_token: The refresh_token of this VerifyPasswordResponse.
        :param registered: The registered of this VerifyPasswordResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'expires_in': str,
            'id_token': str,
            'kind': str,
            'local_id': str,
            'oauth_access_token': str,
            'oauth_authorization_code': str,
            'oauth_expire_in': int,
            'photo_url': str,
            'refresh_token': str,
            'registered': bool
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email': 'email',
            'expires_in': 'expiresIn',
            'id_token': 'idToken',
            'kind': 'kind',
            'local_id': 'localId',
            'oauth_access_token': 'oauthAccessToken',
            'oauth_authorization_code': 'oauthAuthorizationCode',
            'oauth_expire_in': 'oauthExpireIn',
            'photo_url': 'photoUrl',
            'refresh_token': 'refreshToken',
            'registered': 'registered'
        }

        self._display_name = display_name
        self._email = email
        self._expires_in = expires_in
        self._id_token = id_token
        self._kind = kind
        self._local_id = local_id
        self._oauth_access_token = oauth_access_token
        self._oauth_authorization_code = oauth_authorization_code
        self._oauth_expire_in = oauth_expire_in
        self._photo_url = photo_url
        self._refresh_token = refresh_token
        self._registered = registered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyPasswordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyPasswordResponse of this VerifyPasswordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this VerifyPasswordResponse.

        The name of the user.

        :return: The display_name of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VerifyPasswordResponse.

        The name of the user.

        :param display_name: The display_name of this VerifyPasswordResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this VerifyPasswordResponse.

        The email returned by the IdP. NOTE: The federated login user may not own the email.

        :return: The email of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VerifyPasswordResponse.

        The email returned by the IdP. NOTE: The federated login user may not own the email.

        :param email: The email of this VerifyPasswordResponse.
        :type email: str
        """

        self._email = email

    @property
    def expires_in(self):
        """Gets the expires_in of this VerifyPasswordResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :return: The expires_in of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this VerifyPasswordResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :param expires_in: The expires_in of this VerifyPasswordResponse.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def id_token(self):
        """Gets the id_token of this VerifyPasswordResponse.

        The GITKit token for authenticated user.

        :return: The id_token of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this VerifyPasswordResponse.

        The GITKit token for authenticated user.

        :param id_token: The id_token of this VerifyPasswordResponse.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def kind(self):
        """Gets the kind of this VerifyPasswordResponse.

        The fixed string \"identitytoolkit#VerifyPasswordResponse\".

        :return: The kind of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VerifyPasswordResponse.

        The fixed string \"identitytoolkit#VerifyPasswordResponse\".

        :param kind: The kind of this VerifyPasswordResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def local_id(self):
        """Gets the local_id of this VerifyPasswordResponse.

        The RP local ID if it's already been mapped to the IdP account identified by the federated ID.

        :return: The local_id of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this VerifyPasswordResponse.

        The RP local ID if it's already been mapped to the IdP account identified by the federated ID.

        :param local_id: The local_id of this VerifyPasswordResponse.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def oauth_access_token(self):
        """Gets the oauth_access_token of this VerifyPasswordResponse.

        The OAuth2 access token.

        :return: The oauth_access_token of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._oauth_access_token

    @oauth_access_token.setter
    def oauth_access_token(self, oauth_access_token):
        """Sets the oauth_access_token of this VerifyPasswordResponse.

        The OAuth2 access token.

        :param oauth_access_token: The oauth_access_token of this VerifyPasswordResponse.
        :type oauth_access_token: str
        """

        self._oauth_access_token = oauth_access_token

    @property
    def oauth_authorization_code(self):
        """Gets the oauth_authorization_code of this VerifyPasswordResponse.

        The OAuth2 authorization code.

        :return: The oauth_authorization_code of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._oauth_authorization_code

    @oauth_authorization_code.setter
    def oauth_authorization_code(self, oauth_authorization_code):
        """Sets the oauth_authorization_code of this VerifyPasswordResponse.

        The OAuth2 authorization code.

        :param oauth_authorization_code: The oauth_authorization_code of this VerifyPasswordResponse.
        :type oauth_authorization_code: str
        """

        self._oauth_authorization_code = oauth_authorization_code

    @property
    def oauth_expire_in(self):
        """Gets the oauth_expire_in of this VerifyPasswordResponse.

        The lifetime in seconds of the OAuth2 access token.

        :return: The oauth_expire_in of this VerifyPasswordResponse.
        :rtype: int
        """
        return self._oauth_expire_in

    @oauth_expire_in.setter
    def oauth_expire_in(self, oauth_expire_in):
        """Sets the oauth_expire_in of this VerifyPasswordResponse.

        The lifetime in seconds of the OAuth2 access token.

        :param oauth_expire_in: The oauth_expire_in of this VerifyPasswordResponse.
        :type oauth_expire_in: int
        """

        self._oauth_expire_in = oauth_expire_in

    @property
    def photo_url(self):
        """Gets the photo_url of this VerifyPasswordResponse.

        The URI of the user's photo at IdP

        :return: The photo_url of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this VerifyPasswordResponse.

        The URI of the user's photo at IdP

        :param photo_url: The photo_url of this VerifyPasswordResponse.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def refresh_token(self):
        """Gets the refresh_token of this VerifyPasswordResponse.

        If idToken is STS id token, then this field will be refresh token.

        :return: The refresh_token of this VerifyPasswordResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this VerifyPasswordResponse.

        If idToken is STS id token, then this field will be refresh token.

        :param refresh_token: The refresh_token of this VerifyPasswordResponse.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def registered(self):
        """Gets the registered of this VerifyPasswordResponse.

        Whether the email is registered.

        :return: The registered of this VerifyPasswordResponse.
        :rtype: bool
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this VerifyPasswordResponse.

        Whether the email is registered.

        :param registered: The registered of this VerifyPasswordResponse.
        :type registered: bool
        """

        self._registered = registered
