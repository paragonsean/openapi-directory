# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class IdentitytoolkitRelyingpartyUploadAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_overwrite: bool=None, block_size: int=None, cpu_mem_cost: int=None, delegated_project_number: str=None, dk_len: int=None, hash_algorithm: str=None, memory_cost: int=None, parallelization: int=None, rounds: int=None, salt_separator: str=None, sanity_check: bool=None, signer_key: str=None, target_project_id: str=None, users: List[UserInfo]=None):
        """IdentitytoolkitRelyingpartyUploadAccountRequest - a model defined in OpenAPI

        :param allow_overwrite: The allow_overwrite of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param block_size: The block_size of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param cpu_mem_cost: The cpu_mem_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param delegated_project_number: The delegated_project_number of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param dk_len: The dk_len of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param hash_algorithm: The hash_algorithm of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param memory_cost: The memory_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param parallelization: The parallelization of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param rounds: The rounds of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param salt_separator: The salt_separator of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param sanity_check: The sanity_check of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param signer_key: The signer_key of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param target_project_id: The target_project_id of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :param users: The users of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        """
        self.openapi_types = {
            'allow_overwrite': bool,
            'block_size': int,
            'cpu_mem_cost': int,
            'delegated_project_number': str,
            'dk_len': int,
            'hash_algorithm': str,
            'memory_cost': int,
            'parallelization': int,
            'rounds': int,
            'salt_separator': str,
            'sanity_check': bool,
            'signer_key': str,
            'target_project_id': str,
            'users': List[UserInfo]
        }

        self.attribute_map = {
            'allow_overwrite': 'allowOverwrite',
            'block_size': 'blockSize',
            'cpu_mem_cost': 'cpuMemCost',
            'delegated_project_number': 'delegatedProjectNumber',
            'dk_len': 'dkLen',
            'hash_algorithm': 'hashAlgorithm',
            'memory_cost': 'memoryCost',
            'parallelization': 'parallelization',
            'rounds': 'rounds',
            'salt_separator': 'saltSeparator',
            'sanity_check': 'sanityCheck',
            'signer_key': 'signerKey',
            'target_project_id': 'targetProjectId',
            'users': 'users'
        }

        self._allow_overwrite = allow_overwrite
        self._block_size = block_size
        self._cpu_mem_cost = cpu_mem_cost
        self._delegated_project_number = delegated_project_number
        self._dk_len = dk_len
        self._hash_algorithm = hash_algorithm
        self._memory_cost = memory_cost
        self._parallelization = parallelization
        self._rounds = rounds
        self._salt_separator = salt_separator
        self._sanity_check = sanity_check
        self._signer_key = signer_key
        self._target_project_id = target_project_id
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentitytoolkitRelyingpartyUploadAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentitytoolkitRelyingpartyUploadAccountRequest of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_overwrite(self):
        """Gets the allow_overwrite of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Whether allow overwrite existing account when user local_id exists.

        :return: The allow_overwrite of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: bool
        """
        return self._allow_overwrite

    @allow_overwrite.setter
    def allow_overwrite(self, allow_overwrite):
        """Sets the allow_overwrite of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Whether allow overwrite existing account when user local_id exists.

        :param allow_overwrite: The allow_overwrite of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type allow_overwrite: bool
        """

        self._allow_overwrite = allow_overwrite

    @property
    def block_size(self):
        """Gets the block_size of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :return: The block_size of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :param block_size: The block_size of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type block_size: int
        """

        self._block_size = block_size

    @property
    def cpu_mem_cost(self):
        """Gets the cpu_mem_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The following 4 fields are for standard scrypt algorithm.

        :return: The cpu_mem_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._cpu_mem_cost

    @cpu_mem_cost.setter
    def cpu_mem_cost(self, cpu_mem_cost):
        """Sets the cpu_mem_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The following 4 fields are for standard scrypt algorithm.

        :param cpu_mem_cost: The cpu_mem_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type cpu_mem_cost: int
        """

        self._cpu_mem_cost = cpu_mem_cost

    @property
    def delegated_project_number(self):
        """Gets the delegated_project_number of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.

        :return: The delegated_project_number of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: str
        """
        return self._delegated_project_number

    @delegated_project_number.setter
    def delegated_project_number(self, delegated_project_number):
        """Sets the delegated_project_number of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.

        :param delegated_project_number: The delegated_project_number of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type delegated_project_number: str
        """

        self._delegated_project_number = delegated_project_number

    @property
    def dk_len(self):
        """Gets the dk_len of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :return: The dk_len of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._dk_len

    @dk_len.setter
    def dk_len(self, dk_len):
        """Sets the dk_len of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :param dk_len: The dk_len of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type dk_len: int
        """

        self._dk_len = dk_len

    @property
    def hash_algorithm(self):
        """Gets the hash_algorithm of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The password hash algorithm.

        :return: The hash_algorithm of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: str
        """
        return self._hash_algorithm

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """Sets the hash_algorithm of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The password hash algorithm.

        :param hash_algorithm: The hash_algorithm of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type hash_algorithm: str
        """

        self._hash_algorithm = hash_algorithm

    @property
    def memory_cost(self):
        """Gets the memory_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Memory cost for hash calculation. Used by scrypt similar algorithms.

        :return: The memory_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._memory_cost

    @memory_cost.setter
    def memory_cost(self, memory_cost):
        """Sets the memory_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Memory cost for hash calculation. Used by scrypt similar algorithms.

        :param memory_cost: The memory_cost of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type memory_cost: int
        """

        self._memory_cost = memory_cost

    @property
    def parallelization(self):
        """Gets the parallelization of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :return: The parallelization of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._parallelization

    @parallelization.setter
    def parallelization(self, parallelization):
        """Sets the parallelization of this IdentitytoolkitRelyingpartyUploadAccountRequest.


        :param parallelization: The parallelization of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type parallelization: int
        """

        self._parallelization = parallelization

    @property
    def rounds(self):
        """Gets the rounds of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Rounds for hash calculation. Used by scrypt and similar algorithms.

        :return: The rounds of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: int
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Rounds for hash calculation. Used by scrypt and similar algorithms.

        :param rounds: The rounds of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type rounds: int
        """

        self._rounds = rounds

    @property
    def salt_separator(self):
        """Gets the salt_separator of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The salt separator.

        :return: The salt_separator of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: str
        """
        return self._salt_separator

    @salt_separator.setter
    def salt_separator(self, salt_separator):
        """Sets the salt_separator of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The salt separator.

        :param salt_separator: The salt_separator of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type salt_separator: str
        """

        self._salt_separator = salt_separator

    @property
    def sanity_check(self):
        """Gets the sanity_check of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        If true, backend will do sanity check(including duplicate email and federated id) when uploading account.

        :return: The sanity_check of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: bool
        """
        return self._sanity_check

    @sanity_check.setter
    def sanity_check(self, sanity_check):
        """Sets the sanity_check of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        If true, backend will do sanity check(including duplicate email and federated id) when uploading account.

        :param sanity_check: The sanity_check of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type sanity_check: bool
        """

        self._sanity_check = sanity_check

    @property
    def signer_key(self):
        """Gets the signer_key of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The key for to hash the password.

        :return: The signer_key of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: str
        """
        return self._signer_key

    @signer_key.setter
    def signer_key(self, signer_key):
        """Sets the signer_key of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The key for to hash the password.

        :param signer_key: The signer_key of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type signer_key: str
        """

        self._signer_key = signer_key

    @property
    def target_project_id(self):
        """Gets the target_project_id of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Specify which project (field value is actually project id) to operate. Only used when provided credential.

        :return: The target_project_id of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: str
        """
        return self._target_project_id

    @target_project_id.setter
    def target_project_id(self, target_project_id):
        """Sets the target_project_id of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        Specify which project (field value is actually project id) to operate. Only used when provided credential.

        :param target_project_id: The target_project_id of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type target_project_id: str
        """

        self._target_project_id = target_project_id

    @property
    def users(self):
        """Gets the users of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The account info to be stored.

        :return: The users of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :rtype: List[UserInfo]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this IdentitytoolkitRelyingpartyUploadAccountRequest.

        The account info to be stored.

        :param users: The users of this IdentitytoolkitRelyingpartyUploadAccountRequest.
        :type users: List[UserInfo]
        """

        self._users = users
