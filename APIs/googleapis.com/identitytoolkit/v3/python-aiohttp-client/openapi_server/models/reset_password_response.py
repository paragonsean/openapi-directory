# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResetPasswordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, kind: str='identitytoolkit#ResetPasswordResponse', new_email: str=None, request_type: str=None):
        """ResetPasswordResponse - a model defined in OpenAPI

        :param email: The email of this ResetPasswordResponse.
        :param kind: The kind of this ResetPasswordResponse.
        :param new_email: The new_email of this ResetPasswordResponse.
        :param request_type: The request_type of this ResetPasswordResponse.
        """
        self.openapi_types = {
            'email': str,
            'kind': str,
            'new_email': str,
            'request_type': str
        }

        self.attribute_map = {
            'email': 'email',
            'kind': 'kind',
            'new_email': 'newEmail',
            'request_type': 'requestType'
        }

        self._email = email
        self._kind = kind
        self._new_email = new_email
        self._request_type = request_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResetPasswordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResetPasswordResponse of this ResetPasswordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this ResetPasswordResponse.

        The user's email. If the out-of-band code is for email recovery, the user's original email.

        :return: The email of this ResetPasswordResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ResetPasswordResponse.

        The user's email. If the out-of-band code is for email recovery, the user's original email.

        :param email: The email of this ResetPasswordResponse.
        :type email: str
        """

        self._email = email

    @property
    def kind(self):
        """Gets the kind of this ResetPasswordResponse.

        The fixed string \"identitytoolkit#ResetPasswordResponse\".

        :return: The kind of this ResetPasswordResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ResetPasswordResponse.

        The fixed string \"identitytoolkit#ResetPasswordResponse\".

        :param kind: The kind of this ResetPasswordResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def new_email(self):
        """Gets the new_email of this ResetPasswordResponse.

        If the out-of-band code is for email recovery, the user's new email.

        :return: The new_email of this ResetPasswordResponse.
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this ResetPasswordResponse.

        If the out-of-band code is for email recovery, the user's new email.

        :param new_email: The new_email of this ResetPasswordResponse.
        :type new_email: str
        """

        self._new_email = new_email

    @property
    def request_type(self):
        """Gets the request_type of this ResetPasswordResponse.

        The request type.

        :return: The request_type of this ResetPasswordResponse.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this ResetPasswordResponse.

        The request type.

        :param request_type: The request_type of this ResetPasswordResponse.
        :type request_type: str
        """

        self._request_type = request_type
