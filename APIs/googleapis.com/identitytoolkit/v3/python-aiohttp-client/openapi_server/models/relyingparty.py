# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Relyingparty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_install_app: bool=None, android_minimum_version: str=None, android_package_name: str=None, can_handle_code_in_app: bool=None, captcha_resp: str=None, challenge: str=None, continue_url: str=None, email: str=None, i_os_app_store_id: str=None, i_os_bundle_id: str=None, id_token: str=None, kind: str='identitytoolkit#relyingparty', new_email: str=None, request_type: str=None, user_ip: str=None):
        """Relyingparty - a model defined in OpenAPI

        :param android_install_app: The android_install_app of this Relyingparty.
        :param android_minimum_version: The android_minimum_version of this Relyingparty.
        :param android_package_name: The android_package_name of this Relyingparty.
        :param can_handle_code_in_app: The can_handle_code_in_app of this Relyingparty.
        :param captcha_resp: The captcha_resp of this Relyingparty.
        :param challenge: The challenge of this Relyingparty.
        :param continue_url: The continue_url of this Relyingparty.
        :param email: The email of this Relyingparty.
        :param i_os_app_store_id: The i_os_app_store_id of this Relyingparty.
        :param i_os_bundle_id: The i_os_bundle_id of this Relyingparty.
        :param id_token: The id_token of this Relyingparty.
        :param kind: The kind of this Relyingparty.
        :param new_email: The new_email of this Relyingparty.
        :param request_type: The request_type of this Relyingparty.
        :param user_ip: The user_ip of this Relyingparty.
        """
        self.openapi_types = {
            'android_install_app': bool,
            'android_minimum_version': str,
            'android_package_name': str,
            'can_handle_code_in_app': bool,
            'captcha_resp': str,
            'challenge': str,
            'continue_url': str,
            'email': str,
            'i_os_app_store_id': str,
            'i_os_bundle_id': str,
            'id_token': str,
            'kind': str,
            'new_email': str,
            'request_type': str,
            'user_ip': str
        }

        self.attribute_map = {
            'android_install_app': 'androidInstallApp',
            'android_minimum_version': 'androidMinimumVersion',
            'android_package_name': 'androidPackageName',
            'can_handle_code_in_app': 'canHandleCodeInApp',
            'captcha_resp': 'captchaResp',
            'challenge': 'challenge',
            'continue_url': 'continueUrl',
            'email': 'email',
            'i_os_app_store_id': 'iOSAppStoreId',
            'i_os_bundle_id': 'iOSBundleId',
            'id_token': 'idToken',
            'kind': 'kind',
            'new_email': 'newEmail',
            'request_type': 'requestType',
            'user_ip': 'userIp'
        }

        self._android_install_app = android_install_app
        self._android_minimum_version = android_minimum_version
        self._android_package_name = android_package_name
        self._can_handle_code_in_app = can_handle_code_in_app
        self._captcha_resp = captcha_resp
        self._challenge = challenge
        self._continue_url = continue_url
        self._email = email
        self._i_os_app_store_id = i_os_app_store_id
        self._i_os_bundle_id = i_os_bundle_id
        self._id_token = id_token
        self._kind = kind
        self._new_email = new_email
        self._request_type = request_type
        self._user_ip = user_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Relyingparty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Relyingparty of this Relyingparty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_install_app(self):
        """Gets the android_install_app of this Relyingparty.

        whether or not to install the android app on the device where the link is opened

        :return: The android_install_app of this Relyingparty.
        :rtype: bool
        """
        return self._android_install_app

    @android_install_app.setter
    def android_install_app(self, android_install_app):
        """Sets the android_install_app of this Relyingparty.

        whether or not to install the android app on the device where the link is opened

        :param android_install_app: The android_install_app of this Relyingparty.
        :type android_install_app: bool
        """

        self._android_install_app = android_install_app

    @property
    def android_minimum_version(self):
        """Gets the android_minimum_version of this Relyingparty.

        minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app

        :return: The android_minimum_version of this Relyingparty.
        :rtype: str
        """
        return self._android_minimum_version

    @android_minimum_version.setter
    def android_minimum_version(self, android_minimum_version):
        """Sets the android_minimum_version of this Relyingparty.

        minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app

        :param android_minimum_version: The android_minimum_version of this Relyingparty.
        :type android_minimum_version: str
        """

        self._android_minimum_version = android_minimum_version

    @property
    def android_package_name(self):
        """Gets the android_package_name of this Relyingparty.

        android package name of the android app to handle the action code

        :return: The android_package_name of this Relyingparty.
        :rtype: str
        """
        return self._android_package_name

    @android_package_name.setter
    def android_package_name(self, android_package_name):
        """Sets the android_package_name of this Relyingparty.

        android package name of the android app to handle the action code

        :param android_package_name: The android_package_name of this Relyingparty.
        :type android_package_name: str
        """

        self._android_package_name = android_package_name

    @property
    def can_handle_code_in_app(self):
        """Gets the can_handle_code_in_app of this Relyingparty.

        whether or not the app can handle the oob code without first going to web

        :return: The can_handle_code_in_app of this Relyingparty.
        :rtype: bool
        """
        return self._can_handle_code_in_app

    @can_handle_code_in_app.setter
    def can_handle_code_in_app(self, can_handle_code_in_app):
        """Sets the can_handle_code_in_app of this Relyingparty.

        whether or not the app can handle the oob code without first going to web

        :param can_handle_code_in_app: The can_handle_code_in_app of this Relyingparty.
        :type can_handle_code_in_app: bool
        """

        self._can_handle_code_in_app = can_handle_code_in_app

    @property
    def captcha_resp(self):
        """Gets the captcha_resp of this Relyingparty.

        The recaptcha response from the user.

        :return: The captcha_resp of this Relyingparty.
        :rtype: str
        """
        return self._captcha_resp

    @captcha_resp.setter
    def captcha_resp(self, captcha_resp):
        """Sets the captcha_resp of this Relyingparty.

        The recaptcha response from the user.

        :param captcha_resp: The captcha_resp of this Relyingparty.
        :type captcha_resp: str
        """

        self._captcha_resp = captcha_resp

    @property
    def challenge(self):
        """Gets the challenge of this Relyingparty.

        The recaptcha challenge presented to the user.

        :return: The challenge of this Relyingparty.
        :rtype: str
        """
        return self._challenge

    @challenge.setter
    def challenge(self, challenge):
        """Sets the challenge of this Relyingparty.

        The recaptcha challenge presented to the user.

        :param challenge: The challenge of this Relyingparty.
        :type challenge: str
        """

        self._challenge = challenge

    @property
    def continue_url(self):
        """Gets the continue_url of this Relyingparty.

        The url to continue to the Gitkit app

        :return: The continue_url of this Relyingparty.
        :rtype: str
        """
        return self._continue_url

    @continue_url.setter
    def continue_url(self, continue_url):
        """Sets the continue_url of this Relyingparty.

        The url to continue to the Gitkit app

        :param continue_url: The continue_url of this Relyingparty.
        :type continue_url: str
        """

        self._continue_url = continue_url

    @property
    def email(self):
        """Gets the email of this Relyingparty.

        The email of the user.

        :return: The email of this Relyingparty.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Relyingparty.

        The email of the user.

        :param email: The email of this Relyingparty.
        :type email: str
        """

        self._email = email

    @property
    def i_os_app_store_id(self):
        """Gets the i_os_app_store_id of this Relyingparty.

        iOS app store id to download the app if it's not already installed

        :return: The i_os_app_store_id of this Relyingparty.
        :rtype: str
        """
        return self._i_os_app_store_id

    @i_os_app_store_id.setter
    def i_os_app_store_id(self, i_os_app_store_id):
        """Sets the i_os_app_store_id of this Relyingparty.

        iOS app store id to download the app if it's not already installed

        :param i_os_app_store_id: The i_os_app_store_id of this Relyingparty.
        :type i_os_app_store_id: str
        """

        self._i_os_app_store_id = i_os_app_store_id

    @property
    def i_os_bundle_id(self):
        """Gets the i_os_bundle_id of this Relyingparty.

        the iOS bundle id of iOS app to handle the action code

        :return: The i_os_bundle_id of this Relyingparty.
        :rtype: str
        """
        return self._i_os_bundle_id

    @i_os_bundle_id.setter
    def i_os_bundle_id(self, i_os_bundle_id):
        """Sets the i_os_bundle_id of this Relyingparty.

        the iOS bundle id of iOS app to handle the action code

        :param i_os_bundle_id: The i_os_bundle_id of this Relyingparty.
        :type i_os_bundle_id: str
        """

        self._i_os_bundle_id = i_os_bundle_id

    @property
    def id_token(self):
        """Gets the id_token of this Relyingparty.

        The user's Gitkit login token for email change.

        :return: The id_token of this Relyingparty.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this Relyingparty.

        The user's Gitkit login token for email change.

        :param id_token: The id_token of this Relyingparty.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def kind(self):
        """Gets the kind of this Relyingparty.

        The fixed string \"identitytoolkit#relyingparty\".

        :return: The kind of this Relyingparty.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Relyingparty.

        The fixed string \"identitytoolkit#relyingparty\".

        :param kind: The kind of this Relyingparty.
        :type kind: str
        """

        self._kind = kind

    @property
    def new_email(self):
        """Gets the new_email of this Relyingparty.

        The new email if the code is for email change.

        :return: The new_email of this Relyingparty.
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this Relyingparty.

        The new email if the code is for email change.

        :param new_email: The new_email of this Relyingparty.
        :type new_email: str
        """

        self._new_email = new_email

    @property
    def request_type(self):
        """Gets the request_type of this Relyingparty.

        The request type.

        :return: The request_type of this Relyingparty.
        :rtype: str
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this Relyingparty.

        The request type.

        :param request_type: The request_type of this Relyingparty.
        :type request_type: str
        """

        self._request_type = request_type

    @property
    def user_ip(self):
        """Gets the user_ip of this Relyingparty.

        The IP address of the user.

        :return: The user_ip of this Relyingparty.
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """Sets the user_ip of this Relyingparty.

        The IP address of the user.

        :param user_ip: The user_ip of this Relyingparty.
        :type user_ip: str
        """

        self._user_ip = user_ip
