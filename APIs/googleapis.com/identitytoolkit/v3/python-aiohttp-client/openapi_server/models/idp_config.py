# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdpConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, enabled: bool=None, experiment_percent: int=None, provider: str=None, secret: str=None, whitelisted_audiences: List[str]=None):
        """IdpConfig - a model defined in OpenAPI

        :param client_id: The client_id of this IdpConfig.
        :param enabled: The enabled of this IdpConfig.
        :param experiment_percent: The experiment_percent of this IdpConfig.
        :param provider: The provider of this IdpConfig.
        :param secret: The secret of this IdpConfig.
        :param whitelisted_audiences: The whitelisted_audiences of this IdpConfig.
        """
        self.openapi_types = {
            'client_id': str,
            'enabled': bool,
            'experiment_percent': int,
            'provider': str,
            'secret': str,
            'whitelisted_audiences': List[str]
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'enabled': 'enabled',
            'experiment_percent': 'experimentPercent',
            'provider': 'provider',
            'secret': 'secret',
            'whitelisted_audiences': 'whitelistedAudiences'
        }

        self._client_id = client_id
        self._enabled = enabled
        self._experiment_percent = experiment_percent
        self._provider = provider
        self._secret = secret
        self._whitelisted_audiences = whitelisted_audiences

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdpConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdpConfig of this IdpConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this IdpConfig.

        OAuth2 client ID.

        :return: The client_id of this IdpConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IdpConfig.

        OAuth2 client ID.

        :param client_id: The client_id of this IdpConfig.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def enabled(self):
        """Gets the enabled of this IdpConfig.

        Whether this IDP is enabled.

        :return: The enabled of this IdpConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IdpConfig.

        Whether this IDP is enabled.

        :param enabled: The enabled of this IdpConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def experiment_percent(self):
        """Gets the experiment_percent of this IdpConfig.

        Percent of users who will be prompted/redirected federated login for this IDP.

        :return: The experiment_percent of this IdpConfig.
        :rtype: int
        """
        return self._experiment_percent

    @experiment_percent.setter
    def experiment_percent(self, experiment_percent):
        """Sets the experiment_percent of this IdpConfig.

        Percent of users who will be prompted/redirected federated login for this IDP.

        :param experiment_percent: The experiment_percent of this IdpConfig.
        :type experiment_percent: int
        """

        self._experiment_percent = experiment_percent

    @property
    def provider(self):
        """Gets the provider of this IdpConfig.

        OAuth2 provider.

        :return: The provider of this IdpConfig.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IdpConfig.

        OAuth2 provider.

        :param provider: The provider of this IdpConfig.
        :type provider: str
        """

        self._provider = provider

    @property
    def secret(self):
        """Gets the secret of this IdpConfig.

        OAuth2 client secret.

        :return: The secret of this IdpConfig.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this IdpConfig.

        OAuth2 client secret.

        :param secret: The secret of this IdpConfig.
        :type secret: str
        """

        self._secret = secret

    @property
    def whitelisted_audiences(self):
        """Gets the whitelisted_audiences of this IdpConfig.

        Whitelisted client IDs for audience check.

        :return: The whitelisted_audiences of this IdpConfig.
        :rtype: List[str]
        """
        return self._whitelisted_audiences

    @whitelisted_audiences.setter
    def whitelisted_audiences(self, whitelisted_audiences):
        """Sets the whitelisted_audiences of this IdpConfig.

        Whitelisted client IDs for audience check.

        :param whitelisted_audiences: The whitelisted_audiences of this IdpConfig.
        :type whitelisted_audiences: List[str]
        """

        self._whitelisted_audiences = whitelisted_audiences
