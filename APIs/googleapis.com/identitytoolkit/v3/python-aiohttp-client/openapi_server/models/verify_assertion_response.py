# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyAssertionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, app_installation_url: str=None, app_scheme: str=None, context: str=None, date_of_birth: str=None, display_name: str=None, email: str=None, email_recycled: bool=None, email_verified: bool=None, error_message: str=None, expires_in: str=None, federated_id: str=None, first_name: str=None, full_name: str=None, id_token: str=None, input_email: str=None, is_new_user: bool=None, kind: str='identitytoolkit#VerifyAssertionResponse', language: str=None, last_name: str=None, local_id: str=None, need_confirmation: bool=None, need_email: bool=None, nick_name: str=None, oauth_access_token: str=None, oauth_authorization_code: str=None, oauth_expire_in: int=None, oauth_id_token: str=None, oauth_request_token: str=None, oauth_scope: str=None, oauth_token_secret: str=None, original_email: str=None, photo_url: str=None, provider_id: str=None, raw_user_info: str=None, refresh_token: str=None, screen_name: str=None, time_zone: str=None, verified_provider: List[str]=None):
        """VerifyAssertionResponse - a model defined in OpenAPI

        :param action: The action of this VerifyAssertionResponse.
        :param app_installation_url: The app_installation_url of this VerifyAssertionResponse.
        :param app_scheme: The app_scheme of this VerifyAssertionResponse.
        :param context: The context of this VerifyAssertionResponse.
        :param date_of_birth: The date_of_birth of this VerifyAssertionResponse.
        :param display_name: The display_name of this VerifyAssertionResponse.
        :param email: The email of this VerifyAssertionResponse.
        :param email_recycled: The email_recycled of this VerifyAssertionResponse.
        :param email_verified: The email_verified of this VerifyAssertionResponse.
        :param error_message: The error_message of this VerifyAssertionResponse.
        :param expires_in: The expires_in of this VerifyAssertionResponse.
        :param federated_id: The federated_id of this VerifyAssertionResponse.
        :param first_name: The first_name of this VerifyAssertionResponse.
        :param full_name: The full_name of this VerifyAssertionResponse.
        :param id_token: The id_token of this VerifyAssertionResponse.
        :param input_email: The input_email of this VerifyAssertionResponse.
        :param is_new_user: The is_new_user of this VerifyAssertionResponse.
        :param kind: The kind of this VerifyAssertionResponse.
        :param language: The language of this VerifyAssertionResponse.
        :param last_name: The last_name of this VerifyAssertionResponse.
        :param local_id: The local_id of this VerifyAssertionResponse.
        :param need_confirmation: The need_confirmation of this VerifyAssertionResponse.
        :param need_email: The need_email of this VerifyAssertionResponse.
        :param nick_name: The nick_name of this VerifyAssertionResponse.
        :param oauth_access_token: The oauth_access_token of this VerifyAssertionResponse.
        :param oauth_authorization_code: The oauth_authorization_code of this VerifyAssertionResponse.
        :param oauth_expire_in: The oauth_expire_in of this VerifyAssertionResponse.
        :param oauth_id_token: The oauth_id_token of this VerifyAssertionResponse.
        :param oauth_request_token: The oauth_request_token of this VerifyAssertionResponse.
        :param oauth_scope: The oauth_scope of this VerifyAssertionResponse.
        :param oauth_token_secret: The oauth_token_secret of this VerifyAssertionResponse.
        :param original_email: The original_email of this VerifyAssertionResponse.
        :param photo_url: The photo_url of this VerifyAssertionResponse.
        :param provider_id: The provider_id of this VerifyAssertionResponse.
        :param raw_user_info: The raw_user_info of this VerifyAssertionResponse.
        :param refresh_token: The refresh_token of this VerifyAssertionResponse.
        :param screen_name: The screen_name of this VerifyAssertionResponse.
        :param time_zone: The time_zone of this VerifyAssertionResponse.
        :param verified_provider: The verified_provider of this VerifyAssertionResponse.
        """
        self.openapi_types = {
            'action': str,
            'app_installation_url': str,
            'app_scheme': str,
            'context': str,
            'date_of_birth': str,
            'display_name': str,
            'email': str,
            'email_recycled': bool,
            'email_verified': bool,
            'error_message': str,
            'expires_in': str,
            'federated_id': str,
            'first_name': str,
            'full_name': str,
            'id_token': str,
            'input_email': str,
            'is_new_user': bool,
            'kind': str,
            'language': str,
            'last_name': str,
            'local_id': str,
            'need_confirmation': bool,
            'need_email': bool,
            'nick_name': str,
            'oauth_access_token': str,
            'oauth_authorization_code': str,
            'oauth_expire_in': int,
            'oauth_id_token': str,
            'oauth_request_token': str,
            'oauth_scope': str,
            'oauth_token_secret': str,
            'original_email': str,
            'photo_url': str,
            'provider_id': str,
            'raw_user_info': str,
            'refresh_token': str,
            'screen_name': str,
            'time_zone': str,
            'verified_provider': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'app_installation_url': 'appInstallationUrl',
            'app_scheme': 'appScheme',
            'context': 'context',
            'date_of_birth': 'dateOfBirth',
            'display_name': 'displayName',
            'email': 'email',
            'email_recycled': 'emailRecycled',
            'email_verified': 'emailVerified',
            'error_message': 'errorMessage',
            'expires_in': 'expiresIn',
            'federated_id': 'federatedId',
            'first_name': 'firstName',
            'full_name': 'fullName',
            'id_token': 'idToken',
            'input_email': 'inputEmail',
            'is_new_user': 'isNewUser',
            'kind': 'kind',
            'language': 'language',
            'last_name': 'lastName',
            'local_id': 'localId',
            'need_confirmation': 'needConfirmation',
            'need_email': 'needEmail',
            'nick_name': 'nickName',
            'oauth_access_token': 'oauthAccessToken',
            'oauth_authorization_code': 'oauthAuthorizationCode',
            'oauth_expire_in': 'oauthExpireIn',
            'oauth_id_token': 'oauthIdToken',
            'oauth_request_token': 'oauthRequestToken',
            'oauth_scope': 'oauthScope',
            'oauth_token_secret': 'oauthTokenSecret',
            'original_email': 'originalEmail',
            'photo_url': 'photoUrl',
            'provider_id': 'providerId',
            'raw_user_info': 'rawUserInfo',
            'refresh_token': 'refreshToken',
            'screen_name': 'screenName',
            'time_zone': 'timeZone',
            'verified_provider': 'verifiedProvider'
        }

        self._action = action
        self._app_installation_url = app_installation_url
        self._app_scheme = app_scheme
        self._context = context
        self._date_of_birth = date_of_birth
        self._display_name = display_name
        self._email = email
        self._email_recycled = email_recycled
        self._email_verified = email_verified
        self._error_message = error_message
        self._expires_in = expires_in
        self._federated_id = federated_id
        self._first_name = first_name
        self._full_name = full_name
        self._id_token = id_token
        self._input_email = input_email
        self._is_new_user = is_new_user
        self._kind = kind
        self._language = language
        self._last_name = last_name
        self._local_id = local_id
        self._need_confirmation = need_confirmation
        self._need_email = need_email
        self._nick_name = nick_name
        self._oauth_access_token = oauth_access_token
        self._oauth_authorization_code = oauth_authorization_code
        self._oauth_expire_in = oauth_expire_in
        self._oauth_id_token = oauth_id_token
        self._oauth_request_token = oauth_request_token
        self._oauth_scope = oauth_scope
        self._oauth_token_secret = oauth_token_secret
        self._original_email = original_email
        self._photo_url = photo_url
        self._provider_id = provider_id
        self._raw_user_info = raw_user_info
        self._refresh_token = refresh_token
        self._screen_name = screen_name
        self._time_zone = time_zone
        self._verified_provider = verified_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyAssertionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyAssertionResponse of this VerifyAssertionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this VerifyAssertionResponse.

        The action code.

        :return: The action of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this VerifyAssertionResponse.

        The action code.

        :param action: The action of this VerifyAssertionResponse.
        :type action: str
        """

        self._action = action

    @property
    def app_installation_url(self):
        """Gets the app_installation_url of this VerifyAssertionResponse.

        URL for OTA app installation.

        :return: The app_installation_url of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._app_installation_url

    @app_installation_url.setter
    def app_installation_url(self, app_installation_url):
        """Sets the app_installation_url of this VerifyAssertionResponse.

        URL for OTA app installation.

        :param app_installation_url: The app_installation_url of this VerifyAssertionResponse.
        :type app_installation_url: str
        """

        self._app_installation_url = app_installation_url

    @property
    def app_scheme(self):
        """Gets the app_scheme of this VerifyAssertionResponse.

        The custom scheme used by mobile app.

        :return: The app_scheme of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._app_scheme

    @app_scheme.setter
    def app_scheme(self, app_scheme):
        """Sets the app_scheme of this VerifyAssertionResponse.

        The custom scheme used by mobile app.

        :param app_scheme: The app_scheme of this VerifyAssertionResponse.
        :type app_scheme: str
        """

        self._app_scheme = app_scheme

    @property
    def context(self):
        """Gets the context of this VerifyAssertionResponse.

        The opaque value used by the client to maintain context info between the authentication request and the IDP callback.

        :return: The context of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this VerifyAssertionResponse.

        The opaque value used by the client to maintain context info between the authentication request and the IDP callback.

        :param context: The context of this VerifyAssertionResponse.
        :type context: str
        """

        self._context = context

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this VerifyAssertionResponse.

        The birth date of the IdP account.

        :return: The date_of_birth of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this VerifyAssertionResponse.

        The birth date of the IdP account.

        :param date_of_birth: The date_of_birth of this VerifyAssertionResponse.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def display_name(self):
        """Gets the display_name of this VerifyAssertionResponse.

        The display name of the user.

        :return: The display_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VerifyAssertionResponse.

        The display name of the user.

        :param display_name: The display_name of this VerifyAssertionResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this VerifyAssertionResponse.

        The email returned by the IdP. NOTE: The federated login user may not own the email.

        :return: The email of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VerifyAssertionResponse.

        The email returned by the IdP. NOTE: The federated login user may not own the email.

        :param email: The email of this VerifyAssertionResponse.
        :type email: str
        """

        self._email = email

    @property
    def email_recycled(self):
        """Gets the email_recycled of this VerifyAssertionResponse.

        It's true if the email is recycled.

        :return: The email_recycled of this VerifyAssertionResponse.
        :rtype: bool
        """
        return self._email_recycled

    @email_recycled.setter
    def email_recycled(self, email_recycled):
        """Sets the email_recycled of this VerifyAssertionResponse.

        It's true if the email is recycled.

        :param email_recycled: The email_recycled of this VerifyAssertionResponse.
        :type email_recycled: bool
        """

        self._email_recycled = email_recycled

    @property
    def email_verified(self):
        """Gets the email_verified of this VerifyAssertionResponse.

        The value is true if the IDP is also the email provider. It means the user owns the email.

        :return: The email_verified of this VerifyAssertionResponse.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this VerifyAssertionResponse.

        The value is true if the IDP is also the email provider. It means the user owns the email.

        :param email_verified: The email_verified of this VerifyAssertionResponse.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def error_message(self):
        """Gets the error_message of this VerifyAssertionResponse.

        Client error code.

        :return: The error_message of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this VerifyAssertionResponse.

        Client error code.

        :param error_message: The error_message of this VerifyAssertionResponse.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def expires_in(self):
        """Gets the expires_in of this VerifyAssertionResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :return: The expires_in of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this VerifyAssertionResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :param expires_in: The expires_in of this VerifyAssertionResponse.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def federated_id(self):
        """Gets the federated_id of this VerifyAssertionResponse.

        The unique ID identifies the IdP account.

        :return: The federated_id of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._federated_id

    @federated_id.setter
    def federated_id(self, federated_id):
        """Sets the federated_id of this VerifyAssertionResponse.

        The unique ID identifies the IdP account.

        :param federated_id: The federated_id of this VerifyAssertionResponse.
        :type federated_id: str
        """

        self._federated_id = federated_id

    @property
    def first_name(self):
        """Gets the first_name of this VerifyAssertionResponse.

        The first name of the user.

        :return: The first_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VerifyAssertionResponse.

        The first name of the user.

        :param first_name: The first_name of this VerifyAssertionResponse.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this VerifyAssertionResponse.

        The full name of the user.

        :return: The full_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this VerifyAssertionResponse.

        The full name of the user.

        :param full_name: The full_name of this VerifyAssertionResponse.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id_token(self):
        """Gets the id_token of this VerifyAssertionResponse.

        The ID token.

        :return: The id_token of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this VerifyAssertionResponse.

        The ID token.

        :param id_token: The id_token of this VerifyAssertionResponse.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def input_email(self):
        """Gets the input_email of this VerifyAssertionResponse.

        It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.

        :return: The input_email of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._input_email

    @input_email.setter
    def input_email(self, input_email):
        """Sets the input_email of this VerifyAssertionResponse.

        It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.

        :param input_email: The input_email of this VerifyAssertionResponse.
        :type input_email: str
        """

        self._input_email = input_email

    @property
    def is_new_user(self):
        """Gets the is_new_user of this VerifyAssertionResponse.

        True if it's a new user sign-in, false if it's a returning user.

        :return: The is_new_user of this VerifyAssertionResponse.
        :rtype: bool
        """
        return self._is_new_user

    @is_new_user.setter
    def is_new_user(self, is_new_user):
        """Sets the is_new_user of this VerifyAssertionResponse.

        True if it's a new user sign-in, false if it's a returning user.

        :param is_new_user: The is_new_user of this VerifyAssertionResponse.
        :type is_new_user: bool
        """

        self._is_new_user = is_new_user

    @property
    def kind(self):
        """Gets the kind of this VerifyAssertionResponse.

        The fixed string \"identitytoolkit#VerifyAssertionResponse\".

        :return: The kind of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VerifyAssertionResponse.

        The fixed string \"identitytoolkit#VerifyAssertionResponse\".

        :param kind: The kind of this VerifyAssertionResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def language(self):
        """Gets the language of this VerifyAssertionResponse.

        The language preference of the user.

        :return: The language of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this VerifyAssertionResponse.

        The language preference of the user.

        :param language: The language of this VerifyAssertionResponse.
        :type language: str
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this VerifyAssertionResponse.

        The last name of the user.

        :return: The last_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VerifyAssertionResponse.

        The last name of the user.

        :param last_name: The last_name of this VerifyAssertionResponse.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def local_id(self):
        """Gets the local_id of this VerifyAssertionResponse.

        The RP local ID if it's already been mapped to the IdP account identified by the federated ID.

        :return: The local_id of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this VerifyAssertionResponse.

        The RP local ID if it's already been mapped to the IdP account identified by the federated ID.

        :param local_id: The local_id of this VerifyAssertionResponse.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def need_confirmation(self):
        """Gets the need_confirmation of this VerifyAssertionResponse.

        Whether the assertion is from a non-trusted IDP and need account linking confirmation.

        :return: The need_confirmation of this VerifyAssertionResponse.
        :rtype: bool
        """
        return self._need_confirmation

    @need_confirmation.setter
    def need_confirmation(self, need_confirmation):
        """Sets the need_confirmation of this VerifyAssertionResponse.

        Whether the assertion is from a non-trusted IDP and need account linking confirmation.

        :param need_confirmation: The need_confirmation of this VerifyAssertionResponse.
        :type need_confirmation: bool
        """

        self._need_confirmation = need_confirmation

    @property
    def need_email(self):
        """Gets the need_email of this VerifyAssertionResponse.

        Whether need client to supply email to complete the federated login flow.

        :return: The need_email of this VerifyAssertionResponse.
        :rtype: bool
        """
        return self._need_email

    @need_email.setter
    def need_email(self, need_email):
        """Sets the need_email of this VerifyAssertionResponse.

        Whether need client to supply email to complete the federated login flow.

        :param need_email: The need_email of this VerifyAssertionResponse.
        :type need_email: bool
        """

        self._need_email = need_email

    @property
    def nick_name(self):
        """Gets the nick_name of this VerifyAssertionResponse.

        The nick name of the user.

        :return: The nick_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._nick_name

    @nick_name.setter
    def nick_name(self, nick_name):
        """Sets the nick_name of this VerifyAssertionResponse.

        The nick name of the user.

        :param nick_name: The nick_name of this VerifyAssertionResponse.
        :type nick_name: str
        """

        self._nick_name = nick_name

    @property
    def oauth_access_token(self):
        """Gets the oauth_access_token of this VerifyAssertionResponse.

        The OAuth2 access token.

        :return: The oauth_access_token of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_access_token

    @oauth_access_token.setter
    def oauth_access_token(self, oauth_access_token):
        """Sets the oauth_access_token of this VerifyAssertionResponse.

        The OAuth2 access token.

        :param oauth_access_token: The oauth_access_token of this VerifyAssertionResponse.
        :type oauth_access_token: str
        """

        self._oauth_access_token = oauth_access_token

    @property
    def oauth_authorization_code(self):
        """Gets the oauth_authorization_code of this VerifyAssertionResponse.

        The OAuth2 authorization code.

        :return: The oauth_authorization_code of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_authorization_code

    @oauth_authorization_code.setter
    def oauth_authorization_code(self, oauth_authorization_code):
        """Sets the oauth_authorization_code of this VerifyAssertionResponse.

        The OAuth2 authorization code.

        :param oauth_authorization_code: The oauth_authorization_code of this VerifyAssertionResponse.
        :type oauth_authorization_code: str
        """

        self._oauth_authorization_code = oauth_authorization_code

    @property
    def oauth_expire_in(self):
        """Gets the oauth_expire_in of this VerifyAssertionResponse.

        The lifetime in seconds of the OAuth2 access token.

        :return: The oauth_expire_in of this VerifyAssertionResponse.
        :rtype: int
        """
        return self._oauth_expire_in

    @oauth_expire_in.setter
    def oauth_expire_in(self, oauth_expire_in):
        """Sets the oauth_expire_in of this VerifyAssertionResponse.

        The lifetime in seconds of the OAuth2 access token.

        :param oauth_expire_in: The oauth_expire_in of this VerifyAssertionResponse.
        :type oauth_expire_in: int
        """

        self._oauth_expire_in = oauth_expire_in

    @property
    def oauth_id_token(self):
        """Gets the oauth_id_token of this VerifyAssertionResponse.

        The OIDC id token.

        :return: The oauth_id_token of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_id_token

    @oauth_id_token.setter
    def oauth_id_token(self, oauth_id_token):
        """Sets the oauth_id_token of this VerifyAssertionResponse.

        The OIDC id token.

        :param oauth_id_token: The oauth_id_token of this VerifyAssertionResponse.
        :type oauth_id_token: str
        """

        self._oauth_id_token = oauth_id_token

    @property
    def oauth_request_token(self):
        """Gets the oauth_request_token of this VerifyAssertionResponse.

        The user approved request token for the OpenID OAuth extension.

        :return: The oauth_request_token of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_request_token

    @oauth_request_token.setter
    def oauth_request_token(self, oauth_request_token):
        """Sets the oauth_request_token of this VerifyAssertionResponse.

        The user approved request token for the OpenID OAuth extension.

        :param oauth_request_token: The oauth_request_token of this VerifyAssertionResponse.
        :type oauth_request_token: str
        """

        self._oauth_request_token = oauth_request_token

    @property
    def oauth_scope(self):
        """Gets the oauth_scope of this VerifyAssertionResponse.

        The scope for the OpenID OAuth extension.

        :return: The oauth_scope of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_scope

    @oauth_scope.setter
    def oauth_scope(self, oauth_scope):
        """Sets the oauth_scope of this VerifyAssertionResponse.

        The scope for the OpenID OAuth extension.

        :param oauth_scope: The oauth_scope of this VerifyAssertionResponse.
        :type oauth_scope: str
        """

        self._oauth_scope = oauth_scope

    @property
    def oauth_token_secret(self):
        """Gets the oauth_token_secret of this VerifyAssertionResponse.

        The OAuth1 access token secret.

        :return: The oauth_token_secret of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._oauth_token_secret

    @oauth_token_secret.setter
    def oauth_token_secret(self, oauth_token_secret):
        """Sets the oauth_token_secret of this VerifyAssertionResponse.

        The OAuth1 access token secret.

        :param oauth_token_secret: The oauth_token_secret of this VerifyAssertionResponse.
        :type oauth_token_secret: str
        """

        self._oauth_token_secret = oauth_token_secret

    @property
    def original_email(self):
        """Gets the original_email of this VerifyAssertionResponse.

        The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.

        :return: The original_email of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._original_email

    @original_email.setter
    def original_email(self, original_email):
        """Sets the original_email of this VerifyAssertionResponse.

        The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.

        :param original_email: The original_email of this VerifyAssertionResponse.
        :type original_email: str
        """

        self._original_email = original_email

    @property
    def photo_url(self):
        """Gets the photo_url of this VerifyAssertionResponse.

        The URI of the public accessible profiel picture.

        :return: The photo_url of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this VerifyAssertionResponse.

        The URI of the public accessible profiel picture.

        :param photo_url: The photo_url of this VerifyAssertionResponse.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def provider_id(self):
        """Gets the provider_id of this VerifyAssertionResponse.

        The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.

        :return: The provider_id of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this VerifyAssertionResponse.

        The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.

        :param provider_id: The provider_id of this VerifyAssertionResponse.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def raw_user_info(self):
        """Gets the raw_user_info of this VerifyAssertionResponse.

        Raw IDP-returned user info.

        :return: The raw_user_info of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._raw_user_info

    @raw_user_info.setter
    def raw_user_info(self, raw_user_info):
        """Sets the raw_user_info of this VerifyAssertionResponse.

        Raw IDP-returned user info.

        :param raw_user_info: The raw_user_info of this VerifyAssertionResponse.
        :type raw_user_info: str
        """

        self._raw_user_info = raw_user_info

    @property
    def refresh_token(self):
        """Gets the refresh_token of this VerifyAssertionResponse.

        If idToken is STS id token, then this field will be refresh token.

        :return: The refresh_token of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this VerifyAssertionResponse.

        If idToken is STS id token, then this field will be refresh token.

        :param refresh_token: The refresh_token of this VerifyAssertionResponse.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token

    @property
    def screen_name(self):
        """Gets the screen_name of this VerifyAssertionResponse.

        The screen_name of a Twitter user or the login name at Github.

        :return: The screen_name of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name):
        """Sets the screen_name of this VerifyAssertionResponse.

        The screen_name of a Twitter user or the login name at Github.

        :param screen_name: The screen_name of this VerifyAssertionResponse.
        :type screen_name: str
        """

        self._screen_name = screen_name

    @property
    def time_zone(self):
        """Gets the time_zone of this VerifyAssertionResponse.

        The timezone of the user.

        :return: The time_zone of this VerifyAssertionResponse.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this VerifyAssertionResponse.

        The timezone of the user.

        :param time_zone: The time_zone of this VerifyAssertionResponse.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def verified_provider(self):
        """Gets the verified_provider of this VerifyAssertionResponse.

        When action is 'map', contains the idps which can be used for confirmation.

        :return: The verified_provider of this VerifyAssertionResponse.
        :rtype: List[str]
        """
        return self._verified_provider

    @verified_provider.setter
    def verified_provider(self, verified_provider):
        """Sets the verified_provider of this VerifyAssertionResponse.

        When action is 'map', contains the idps which can be used for confirmation.

        :param verified_provider: The verified_provider of this VerifyAssertionResponse.
        :type verified_provider: List[str]
        """

        self._verified_provider = verified_provider
