# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.set_account_info_response_provider_user_info_inner import SetAccountInfoResponseProviderUserInfoInner
from openapi_server import util


class SetAccountInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, email_verified: bool=None, expires_in: str=None, id_token: str=None, kind: str='identitytoolkit#SetAccountInfoResponse', local_id: str=None, new_email: str=None, password_hash: str=None, photo_url: str=None, provider_user_info: List[SetAccountInfoResponseProviderUserInfoInner]=None, refresh_token: str=None):
        """SetAccountInfoResponse - a model defined in OpenAPI

        :param display_name: The display_name of this SetAccountInfoResponse.
        :param email: The email of this SetAccountInfoResponse.
        :param email_verified: The email_verified of this SetAccountInfoResponse.
        :param expires_in: The expires_in of this SetAccountInfoResponse.
        :param id_token: The id_token of this SetAccountInfoResponse.
        :param kind: The kind of this SetAccountInfoResponse.
        :param local_id: The local_id of this SetAccountInfoResponse.
        :param new_email: The new_email of this SetAccountInfoResponse.
        :param password_hash: The password_hash of this SetAccountInfoResponse.
        :param photo_url: The photo_url of this SetAccountInfoResponse.
        :param provider_user_info: The provider_user_info of this SetAccountInfoResponse.
        :param refresh_token: The refresh_token of this SetAccountInfoResponse.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'email_verified': bool,
            'expires_in': str,
            'id_token': str,
            'kind': str,
            'local_id': str,
            'new_email': str,
            'password_hash': str,
            'photo_url': str,
            'provider_user_info': List[SetAccountInfoResponseProviderUserInfoInner],
            'refresh_token': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email': 'email',
            'email_verified': 'emailVerified',
            'expires_in': 'expiresIn',
            'id_token': 'idToken',
            'kind': 'kind',
            'local_id': 'localId',
            'new_email': 'newEmail',
            'password_hash': 'passwordHash',
            'photo_url': 'photoUrl',
            'provider_user_info': 'providerUserInfo',
            'refresh_token': 'refreshToken'
        }

        self._display_name = display_name
        self._email = email
        self._email_verified = email_verified
        self._expires_in = expires_in
        self._id_token = id_token
        self._kind = kind
        self._local_id = local_id
        self._new_email = new_email
        self._password_hash = password_hash
        self._photo_url = photo_url
        self._provider_user_info = provider_user_info
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetAccountInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetAccountInfoResponse of this SetAccountInfoResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this SetAccountInfoResponse.

        The name of the user.

        :return: The display_name of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SetAccountInfoResponse.

        The name of the user.

        :param display_name: The display_name of this SetAccountInfoResponse.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this SetAccountInfoResponse.

        The email of the user.

        :return: The email of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SetAccountInfoResponse.

        The email of the user.

        :param email: The email of this SetAccountInfoResponse.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this SetAccountInfoResponse.

        If email has been verified.

        :return: The email_verified of this SetAccountInfoResponse.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this SetAccountInfoResponse.

        If email has been verified.

        :param email_verified: The email_verified of this SetAccountInfoResponse.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def expires_in(self):
        """Gets the expires_in of this SetAccountInfoResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :return: The expires_in of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this SetAccountInfoResponse.

        If idToken is STS id token, then this field will be expiration time of STS id token in seconds.

        :param expires_in: The expires_in of this SetAccountInfoResponse.
        :type expires_in: str
        """

        self._expires_in = expires_in

    @property
    def id_token(self):
        """Gets the id_token of this SetAccountInfoResponse.

        The Gitkit id token to login the newly sign up user.

        :return: The id_token of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this SetAccountInfoResponse.

        The Gitkit id token to login the newly sign up user.

        :param id_token: The id_token of this SetAccountInfoResponse.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def kind(self):
        """Gets the kind of this SetAccountInfoResponse.

        The fixed string \"identitytoolkit#SetAccountInfoResponse\".

        :return: The kind of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SetAccountInfoResponse.

        The fixed string \"identitytoolkit#SetAccountInfoResponse\".

        :param kind: The kind of this SetAccountInfoResponse.
        :type kind: str
        """

        self._kind = kind

    @property
    def local_id(self):
        """Gets the local_id of this SetAccountInfoResponse.

        The local ID of the user.

        :return: The local_id of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this SetAccountInfoResponse.

        The local ID of the user.

        :param local_id: The local_id of this SetAccountInfoResponse.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def new_email(self):
        """Gets the new_email of this SetAccountInfoResponse.

        The new email the user attempts to change to.

        :return: The new_email of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this SetAccountInfoResponse.

        The new email the user attempts to change to.

        :param new_email: The new_email of this SetAccountInfoResponse.
        :type new_email: str
        """

        self._new_email = new_email

    @property
    def password_hash(self):
        """Gets the password_hash of this SetAccountInfoResponse.

        The user's hashed password.

        :return: The password_hash of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this SetAccountInfoResponse.

        The user's hashed password.

        :param password_hash: The password_hash of this SetAccountInfoResponse.
        :type password_hash: str
        """

        self._password_hash = password_hash

    @property
    def photo_url(self):
        """Gets the photo_url of this SetAccountInfoResponse.

        The photo url of the user.

        :return: The photo_url of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this SetAccountInfoResponse.

        The photo url of the user.

        :param photo_url: The photo_url of this SetAccountInfoResponse.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def provider_user_info(self):
        """Gets the provider_user_info of this SetAccountInfoResponse.

        The user's profiles at the associated IdPs.

        :return: The provider_user_info of this SetAccountInfoResponse.
        :rtype: List[SetAccountInfoResponseProviderUserInfoInner]
        """
        return self._provider_user_info

    @provider_user_info.setter
    def provider_user_info(self, provider_user_info):
        """Sets the provider_user_info of this SetAccountInfoResponse.

        The user's profiles at the associated IdPs.

        :param provider_user_info: The provider_user_info of this SetAccountInfoResponse.
        :type provider_user_info: List[SetAccountInfoResponseProviderUserInfoInner]
        """

        self._provider_user_info = provider_user_info

    @property
    def refresh_token(self):
        """Gets the refresh_token of this SetAccountInfoResponse.

        If idToken is STS id token, then this field will be refresh token.

        :return: The refresh_token of this SetAccountInfoResponse.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this SetAccountInfoResponse.

        If idToken is STS id token, then this field will be refresh token.

        :param refresh_token: The refresh_token of this SetAccountInfoResponse.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token
