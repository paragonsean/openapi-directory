# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info_provider_user_info_inner import UserInfoProviderUserInfoInner
from openapi_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, custom_attributes: str=None, custom_auth: bool=None, disabled: bool=None, display_name: str=None, email: str=None, email_verified: bool=None, last_login_at: str=None, local_id: str=None, password_hash: str=None, password_updated_at: float=None, phone_number: str=None, photo_url: str=None, provider_user_info: List[UserInfoProviderUserInfoInner]=None, raw_password: str=None, salt: str=None, screen_name: str=None, valid_since: str=None, version: int=None):
        """UserInfo - a model defined in OpenAPI

        :param created_at: The created_at of this UserInfo.
        :param custom_attributes: The custom_attributes of this UserInfo.
        :param custom_auth: The custom_auth of this UserInfo.
        :param disabled: The disabled of this UserInfo.
        :param display_name: The display_name of this UserInfo.
        :param email: The email of this UserInfo.
        :param email_verified: The email_verified of this UserInfo.
        :param last_login_at: The last_login_at of this UserInfo.
        :param local_id: The local_id of this UserInfo.
        :param password_hash: The password_hash of this UserInfo.
        :param password_updated_at: The password_updated_at of this UserInfo.
        :param phone_number: The phone_number of this UserInfo.
        :param photo_url: The photo_url of this UserInfo.
        :param provider_user_info: The provider_user_info of this UserInfo.
        :param raw_password: The raw_password of this UserInfo.
        :param salt: The salt of this UserInfo.
        :param screen_name: The screen_name of this UserInfo.
        :param valid_since: The valid_since of this UserInfo.
        :param version: The version of this UserInfo.
        """
        self.openapi_types = {
            'created_at': str,
            'custom_attributes': str,
            'custom_auth': bool,
            'disabled': bool,
            'display_name': str,
            'email': str,
            'email_verified': bool,
            'last_login_at': str,
            'local_id': str,
            'password_hash': str,
            'password_updated_at': float,
            'phone_number': str,
            'photo_url': str,
            'provider_user_info': List[UserInfoProviderUserInfoInner],
            'raw_password': str,
            'salt': str,
            'screen_name': str,
            'valid_since': str,
            'version': int
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'custom_attributes': 'customAttributes',
            'custom_auth': 'customAuth',
            'disabled': 'disabled',
            'display_name': 'displayName',
            'email': 'email',
            'email_verified': 'emailVerified',
            'last_login_at': 'lastLoginAt',
            'local_id': 'localId',
            'password_hash': 'passwordHash',
            'password_updated_at': 'passwordUpdatedAt',
            'phone_number': 'phoneNumber',
            'photo_url': 'photoUrl',
            'provider_user_info': 'providerUserInfo',
            'raw_password': 'rawPassword',
            'salt': 'salt',
            'screen_name': 'screenName',
            'valid_since': 'validSince',
            'version': 'version'
        }

        self._created_at = created_at
        self._custom_attributes = custom_attributes
        self._custom_auth = custom_auth
        self._disabled = disabled
        self._display_name = display_name
        self._email = email
        self._email_verified = email_verified
        self._last_login_at = last_login_at
        self._local_id = local_id
        self._password_hash = password_hash
        self._password_updated_at = password_updated_at
        self._phone_number = phone_number
        self._photo_url = photo_url
        self._provider_user_info = provider_user_info
        self._raw_password = raw_password
        self._salt = salt
        self._screen_name = screen_name
        self._valid_since = valid_since
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this UserInfo.

        User creation timestamp.

        :return: The created_at of this UserInfo.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserInfo.

        User creation timestamp.

        :param created_at: The created_at of this UserInfo.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this UserInfo.

        The custom attributes to be set in the user's id token.

        :return: The custom_attributes of this UserInfo.
        :rtype: str
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this UserInfo.

        The custom attributes to be set in the user's id token.

        :param custom_attributes: The custom_attributes of this UserInfo.
        :type custom_attributes: str
        """

        self._custom_attributes = custom_attributes

    @property
    def custom_auth(self):
        """Gets the custom_auth of this UserInfo.

        Whether the user is authenticated by the developer.

        :return: The custom_auth of this UserInfo.
        :rtype: bool
        """
        return self._custom_auth

    @custom_auth.setter
    def custom_auth(self, custom_auth):
        """Sets the custom_auth of this UserInfo.

        Whether the user is authenticated by the developer.

        :param custom_auth: The custom_auth of this UserInfo.
        :type custom_auth: bool
        """

        self._custom_auth = custom_auth

    @property
    def disabled(self):
        """Gets the disabled of this UserInfo.

        Whether the user is disabled.

        :return: The disabled of this UserInfo.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UserInfo.

        Whether the user is disabled.

        :param disabled: The disabled of this UserInfo.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def display_name(self):
        """Gets the display_name of this UserInfo.

        The name of the user.

        :return: The display_name of this UserInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserInfo.

        The name of the user.

        :param display_name: The display_name of this UserInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserInfo.

        The email of the user.

        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.

        The email of the user.

        :param email: The email of this UserInfo.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserInfo.

        Whether the email has been verified.

        :return: The email_verified of this UserInfo.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserInfo.

        Whether the email has been verified.

        :param email_verified: The email_verified of this UserInfo.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def last_login_at(self):
        """Gets the last_login_at of this UserInfo.

        last login timestamp.

        :return: The last_login_at of this UserInfo.
        :rtype: str
        """
        return self._last_login_at

    @last_login_at.setter
    def last_login_at(self, last_login_at):
        """Sets the last_login_at of this UserInfo.

        last login timestamp.

        :param last_login_at: The last_login_at of this UserInfo.
        :type last_login_at: str
        """

        self._last_login_at = last_login_at

    @property
    def local_id(self):
        """Gets the local_id of this UserInfo.

        The local ID of the user.

        :return: The local_id of this UserInfo.
        :rtype: str
        """
        return self._local_id

    @local_id.setter
    def local_id(self, local_id):
        """Sets the local_id of this UserInfo.

        The local ID of the user.

        :param local_id: The local_id of this UserInfo.
        :type local_id: str
        """

        self._local_id = local_id

    @property
    def password_hash(self):
        """Gets the password_hash of this UserInfo.

        The user's hashed password.

        :return: The password_hash of this UserInfo.
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this UserInfo.

        The user's hashed password.

        :param password_hash: The password_hash of this UserInfo.
        :type password_hash: str
        """

        self._password_hash = password_hash

    @property
    def password_updated_at(self):
        """Gets the password_updated_at of this UserInfo.

        The timestamp when the password was last updated.

        :return: The password_updated_at of this UserInfo.
        :rtype: float
        """
        return self._password_updated_at

    @password_updated_at.setter
    def password_updated_at(self, password_updated_at):
        """Sets the password_updated_at of this UserInfo.

        The timestamp when the password was last updated.

        :param password_updated_at: The password_updated_at of this UserInfo.
        :type password_updated_at: float
        """

        self._password_updated_at = password_updated_at

    @property
    def phone_number(self):
        """Gets the phone_number of this UserInfo.

        User's phone number.

        :return: The phone_number of this UserInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserInfo.

        User's phone number.

        :param phone_number: The phone_number of this UserInfo.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def photo_url(self):
        """Gets the photo_url of this UserInfo.

        The URL of the user profile photo.

        :return: The photo_url of this UserInfo.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this UserInfo.

        The URL of the user profile photo.

        :param photo_url: The photo_url of this UserInfo.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def provider_user_info(self):
        """Gets the provider_user_info of this UserInfo.

        The IDP of the user.

        :return: The provider_user_info of this UserInfo.
        :rtype: List[UserInfoProviderUserInfoInner]
        """
        return self._provider_user_info

    @provider_user_info.setter
    def provider_user_info(self, provider_user_info):
        """Sets the provider_user_info of this UserInfo.

        The IDP of the user.

        :param provider_user_info: The provider_user_info of this UserInfo.
        :type provider_user_info: List[UserInfoProviderUserInfoInner]
        """

        self._provider_user_info = provider_user_info

    @property
    def raw_password(self):
        """Gets the raw_password of this UserInfo.

        The user's plain text password.

        :return: The raw_password of this UserInfo.
        :rtype: str
        """
        return self._raw_password

    @raw_password.setter
    def raw_password(self, raw_password):
        """Sets the raw_password of this UserInfo.

        The user's plain text password.

        :param raw_password: The raw_password of this UserInfo.
        :type raw_password: str
        """

        self._raw_password = raw_password

    @property
    def salt(self):
        """Gets the salt of this UserInfo.

        The user's password salt.

        :return: The salt of this UserInfo.
        :rtype: str
        """
        return self._salt

    @salt.setter
    def salt(self, salt):
        """Sets the salt of this UserInfo.

        The user's password salt.

        :param salt: The salt of this UserInfo.
        :type salt: str
        """

        self._salt = salt

    @property
    def screen_name(self):
        """Gets the screen_name of this UserInfo.

        User's screen name at Twitter or login name at Github.

        :return: The screen_name of this UserInfo.
        :rtype: str
        """
        return self._screen_name

    @screen_name.setter
    def screen_name(self, screen_name):
        """Sets the screen_name of this UserInfo.

        User's screen name at Twitter or login name at Github.

        :param screen_name: The screen_name of this UserInfo.
        :type screen_name: str
        """

        self._screen_name = screen_name

    @property
    def valid_since(self):
        """Gets the valid_since of this UserInfo.

        Timestamp in seconds for valid login token.

        :return: The valid_since of this UserInfo.
        :rtype: str
        """
        return self._valid_since

    @valid_since.setter
    def valid_since(self, valid_since):
        """Sets the valid_since of this UserInfo.

        Timestamp in seconds for valid login token.

        :param valid_since: The valid_since of this UserInfo.
        :type valid_since: str
        """

        self._valid_since = valid_since

    @property
    def version(self):
        """Gets the version of this UserInfo.

        Version of the user's password.

        :return: The version of this UserInfo.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this UserInfo.

        Version of the user's password.

        :param version: The version of this UserInfo.
        :type version: int
        """

        self._version = version
