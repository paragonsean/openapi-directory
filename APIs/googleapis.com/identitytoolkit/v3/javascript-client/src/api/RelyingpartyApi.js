/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAuthUriResponse from '../model/CreateAuthUriResponse';
import DeleteAccountResponse from '../model/DeleteAccountResponse';
import DownloadAccountResponse from '../model/DownloadAccountResponse';
import EmailLinkSigninResponse from '../model/EmailLinkSigninResponse';
import GetAccountInfoResponse from '../model/GetAccountInfoResponse';
import GetOobConfirmationCodeResponse from '../model/GetOobConfirmationCodeResponse';
import GetRecaptchaParamResponse from '../model/GetRecaptchaParamResponse';
import IdentitytoolkitRelyingpartyCreateAuthUriRequest from '../model/IdentitytoolkitRelyingpartyCreateAuthUriRequest';
import IdentitytoolkitRelyingpartyDeleteAccountRequest from '../model/IdentitytoolkitRelyingpartyDeleteAccountRequest';
import IdentitytoolkitRelyingpartyDownloadAccountRequest from '../model/IdentitytoolkitRelyingpartyDownloadAccountRequest';
import IdentitytoolkitRelyingpartyEmailLinkSigninRequest from '../model/IdentitytoolkitRelyingpartyEmailLinkSigninRequest';
import IdentitytoolkitRelyingpartyGetAccountInfoRequest from '../model/IdentitytoolkitRelyingpartyGetAccountInfoRequest';
import IdentitytoolkitRelyingpartyGetProjectConfigResponse from '../model/IdentitytoolkitRelyingpartyGetProjectConfigResponse';
import IdentitytoolkitRelyingpartyResetPasswordRequest from '../model/IdentitytoolkitRelyingpartyResetPasswordRequest';
import IdentitytoolkitRelyingpartySendVerificationCodeRequest from '../model/IdentitytoolkitRelyingpartySendVerificationCodeRequest';
import IdentitytoolkitRelyingpartySendVerificationCodeResponse from '../model/IdentitytoolkitRelyingpartySendVerificationCodeResponse';
import IdentitytoolkitRelyingpartySetAccountInfoRequest from '../model/IdentitytoolkitRelyingpartySetAccountInfoRequest';
import IdentitytoolkitRelyingpartySetProjectConfigRequest from '../model/IdentitytoolkitRelyingpartySetProjectConfigRequest';
import IdentitytoolkitRelyingpartySetProjectConfigResponse from '../model/IdentitytoolkitRelyingpartySetProjectConfigResponse';
import IdentitytoolkitRelyingpartySignOutUserRequest from '../model/IdentitytoolkitRelyingpartySignOutUserRequest';
import IdentitytoolkitRelyingpartySignOutUserResponse from '../model/IdentitytoolkitRelyingpartySignOutUserResponse';
import IdentitytoolkitRelyingpartySignupNewUserRequest from '../model/IdentitytoolkitRelyingpartySignupNewUserRequest';
import IdentitytoolkitRelyingpartyUploadAccountRequest from '../model/IdentitytoolkitRelyingpartyUploadAccountRequest';
import IdentitytoolkitRelyingpartyVerifyAssertionRequest from '../model/IdentitytoolkitRelyingpartyVerifyAssertionRequest';
import IdentitytoolkitRelyingpartyVerifyCustomTokenRequest from '../model/IdentitytoolkitRelyingpartyVerifyCustomTokenRequest';
import IdentitytoolkitRelyingpartyVerifyPasswordRequest from '../model/IdentitytoolkitRelyingpartyVerifyPasswordRequest';
import IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest from '../model/IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest';
import IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse from '../model/IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse';
import Relyingparty from '../model/Relyingparty';
import ResetPasswordResponse from '../model/ResetPasswordResponse';
import SetAccountInfoResponse from '../model/SetAccountInfoResponse';
import SignupNewUserResponse from '../model/SignupNewUserResponse';
import UploadAccountResponse from '../model/UploadAccountResponse';
import VerifyAssertionResponse from '../model/VerifyAssertionResponse';
import VerifyCustomTokenResponse from '../model/VerifyCustomTokenResponse';
import VerifyPasswordResponse from '../model/VerifyPasswordResponse';

/**
* Relyingparty service.
* @module api/RelyingpartyApi
* @version v3
*/
export default class RelyingpartyApi {

    /**
    * Constructs a new RelyingpartyApi. 
    * @alias module:api/RelyingpartyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyCreateAuthUri operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyCreateAuthUriCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthUriResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the URI used by the IdP to authenticate the user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyCreateAuthUriRequest} [identitytoolkitRelyingpartyCreateAuthUriRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyCreateAuthUriCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthUriResponse}
     */
    identitytoolkitRelyingpartyCreateAuthUri(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyCreateAuthUriRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthUriResponse;
      return this.apiClient.callApi(
        '/createAuthUri', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyDeleteAccount operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyDeleteAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user account.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyDeleteAccountRequest} [identitytoolkitRelyingpartyDeleteAccountRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyDeleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAccountResponse}
     */
    identitytoolkitRelyingpartyDeleteAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyDeleteAccountRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAccountResponse;
      return this.apiClient.callApi(
        '/deleteAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyDownloadAccount operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyDownloadAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch download user accounts.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyDownloadAccountRequest} [identitytoolkitRelyingpartyDownloadAccountRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyDownloadAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadAccountResponse}
     */
    identitytoolkitRelyingpartyDownloadAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyDownloadAccountRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DownloadAccountResponse;
      return this.apiClient.callApi(
        '/downloadAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyEmailLinkSignin operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyEmailLinkSigninCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmailLinkSigninResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password for a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyEmailLinkSigninRequest} [identitytoolkitRelyingpartyEmailLinkSigninRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyEmailLinkSigninCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmailLinkSigninResponse}
     */
    identitytoolkitRelyingpartyEmailLinkSignin(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyEmailLinkSigninRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EmailLinkSigninResponse;
      return this.apiClient.callApi(
        '/emailLinkSignin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyGetAccountInfo operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the account info.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyGetAccountInfoRequest} [identitytoolkitRelyingpartyGetAccountInfoRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountInfoResponse}
     */
    identitytoolkitRelyingpartyGetAccountInfo(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyGetAccountInfoRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountInfoResponse;
      return this.apiClient.callApi(
        '/getAccountInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyGetOobConfirmationCode operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetOobConfirmationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOobConfirmationCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a code for user action confirmation.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Relyingparty} [relyingparty] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetOobConfirmationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOobConfirmationCodeResponse}
     */
    identitytoolkitRelyingpartyGetOobConfirmationCode(opts, callback) {
      opts = opts || {};
      let postBody = opts['relyingparty'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetOobConfirmationCodeResponse;
      return this.apiClient.callApi(
        '/getOobConfirmationCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyGetProjectConfig operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetProjectConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitytoolkitRelyingpartyGetProjectConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [delegatedProjectNumber] Delegated GCP project number of the request.
     * @param {String} [projectNumber] GCP project number of the request.
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetProjectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentitytoolkitRelyingpartyGetProjectConfigResponse}
     */
    identitytoolkitRelyingpartyGetProjectConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'delegatedProjectNumber': opts['delegatedProjectNumber'],
        'projectNumber': opts['projectNumber']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentitytoolkitRelyingpartyGetProjectConfigResponse;
      return this.apiClient.callApi(
        '/getProjectConfig', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyGetPublicKeys operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetPublicKeysCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: String}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get token signing public key.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetPublicKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: String}>}
     */
    identitytoolkitRelyingpartyGetPublicKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/publicKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyGetRecaptchaParam operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetRecaptchaParamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecaptchaParamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recaptcha secure param.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyGetRecaptchaParamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecaptchaParamResponse}
     */
    identitytoolkitRelyingpartyGetRecaptchaParam(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecaptchaParamResponse;
      return this.apiClient.callApi(
        '/getRecaptchaParam', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyResetPassword operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyResetPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password for a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyResetPasswordRequest} [identitytoolkitRelyingpartyResetPasswordRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyResetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetPasswordResponse}
     */
    identitytoolkitRelyingpartyResetPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyResetPasswordRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResetPasswordResponse;
      return this.apiClient.callApi(
        '/resetPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartySendVerificationCode operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartySendVerificationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitytoolkitRelyingpartySendVerificationCodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send SMS verification code.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartySendVerificationCodeRequest} [identitytoolkitRelyingpartySendVerificationCodeRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartySendVerificationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentitytoolkitRelyingpartySendVerificationCodeResponse}
     */
    identitytoolkitRelyingpartySendVerificationCode(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartySendVerificationCodeRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitytoolkitRelyingpartySendVerificationCodeResponse;
      return this.apiClient.callApi(
        '/sendVerificationCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartySetAccountInfo operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartySetAccountInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SetAccountInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set account info for a user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartySetAccountInfoRequest} [identitytoolkitRelyingpartySetAccountInfoRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartySetAccountInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SetAccountInfoResponse}
     */
    identitytoolkitRelyingpartySetAccountInfo(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartySetAccountInfoRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SetAccountInfoResponse;
      return this.apiClient.callApi(
        '/setAccountInfo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartySetProjectConfig operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartySetProjectConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitytoolkitRelyingpartySetProjectConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set project configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartySetProjectConfigRequest} [identitytoolkitRelyingpartySetProjectConfigRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartySetProjectConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentitytoolkitRelyingpartySetProjectConfigResponse}
     */
    identitytoolkitRelyingpartySetProjectConfig(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartySetProjectConfigRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitytoolkitRelyingpartySetProjectConfigResponse;
      return this.apiClient.callApi(
        '/setProjectConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartySignOutUser operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartySignOutUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitytoolkitRelyingpartySignOutUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sign out user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartySignOutUserRequest} [identitytoolkitRelyingpartySignOutUserRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartySignOutUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentitytoolkitRelyingpartySignOutUserResponse}
     */
    identitytoolkitRelyingpartySignOutUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartySignOutUserRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitytoolkitRelyingpartySignOutUserResponse;
      return this.apiClient.callApi(
        '/signOutUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartySignupNewUser operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartySignupNewUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignupNewUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signup new user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartySignupNewUserRequest} [identitytoolkitRelyingpartySignupNewUserRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartySignupNewUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignupNewUserResponse}
     */
    identitytoolkitRelyingpartySignupNewUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartySignupNewUserRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignupNewUserResponse;
      return this.apiClient.callApi(
        '/signupNewUser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyUploadAccount operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyUploadAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch upload existing user accounts.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyUploadAccountRequest} [identitytoolkitRelyingpartyUploadAccountRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyUploadAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadAccountResponse}
     */
    identitytoolkitRelyingpartyUploadAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyUploadAccountRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadAccountResponse;
      return this.apiClient.callApi(
        '/uploadAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyVerifyAssertion operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyAssertionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyAssertionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies the assertion returned by the IdP.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyAssertionRequest} [identitytoolkitRelyingpartyVerifyAssertionRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyAssertionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyAssertionResponse}
     */
    identitytoolkitRelyingpartyVerifyAssertion(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyVerifyAssertionRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyAssertionResponse;
      return this.apiClient.callApi(
        '/verifyAssertion', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyVerifyCustomToken operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyCustomTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyCustomTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies the developer asserted ID token.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyCustomTokenRequest} [identitytoolkitRelyingpartyVerifyCustomTokenRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyCustomTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyCustomTokenResponse}
     */
    identitytoolkitRelyingpartyVerifyCustomToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyVerifyCustomTokenRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyCustomTokenResponse;
      return this.apiClient.callApi(
        '/verifyCustomToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyVerifyPassword operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyPasswordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies the user entered password.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyPasswordRequest} [identitytoolkitRelyingpartyVerifyPasswordRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyPasswordResponse}
     */
    identitytoolkitRelyingpartyVerifyPassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyVerifyPasswordRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPasswordResponse;
      return this.apiClient.callApi(
        '/verifyPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the identitytoolkitRelyingpartyVerifyPhoneNumber operation.
     * @callback module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyPhoneNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verifies ownership of a phone number and creates/updates the user account accordingly.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyPhoneNumberRequest} [identitytoolkitRelyingpartyVerifyPhoneNumberRequest] 
     * @param {module:api/RelyingpartyApi~identitytoolkitRelyingpartyVerifyPhoneNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse}
     */
    identitytoolkitRelyingpartyVerifyPhoneNumber(opts, callback) {
      opts = opts || {};
      let postBody = opts['identitytoolkitRelyingpartyVerifyPhoneNumberRequest'];

      let pathParams = {
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentitytoolkitRelyingpartyVerifyPhoneNumberResponse;
      return this.apiClient.callApi(
        '/verifyPhoneNumber', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
