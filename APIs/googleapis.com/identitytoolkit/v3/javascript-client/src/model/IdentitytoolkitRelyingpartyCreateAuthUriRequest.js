/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentitytoolkitRelyingpartyCreateAuthUriRequest model module.
 * @module model/IdentitytoolkitRelyingpartyCreateAuthUriRequest
 * @version v3
 */
class IdentitytoolkitRelyingpartyCreateAuthUriRequest {
    /**
     * Constructs a new <code>IdentitytoolkitRelyingpartyCreateAuthUriRequest</code>.
     * Request to get the IDP authentication URL.
     * @alias module:model/IdentitytoolkitRelyingpartyCreateAuthUriRequest
     */
    constructor() { 
        
        IdentitytoolkitRelyingpartyCreateAuthUriRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentitytoolkitRelyingpartyCreateAuthUriRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentitytoolkitRelyingpartyCreateAuthUriRequest} obj Optional instance to populate.
     * @return {module:model/IdentitytoolkitRelyingpartyCreateAuthUriRequest} The populated <code>IdentitytoolkitRelyingpartyCreateAuthUriRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentitytoolkitRelyingpartyCreateAuthUriRequest();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('authFlowType')) {
                obj['authFlowType'] = ApiClient.convertToType(data['authFlowType'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('continueUri')) {
                obj['continueUri'] = ApiClient.convertToType(data['continueUri'], 'String');
            }
            if (data.hasOwnProperty('customParameter')) {
                obj['customParameter'] = ApiClient.convertToType(data['customParameter'], {'String': 'String'});
            }
            if (data.hasOwnProperty('hostedDomain')) {
                obj['hostedDomain'] = ApiClient.convertToType(data['hostedDomain'], 'String');
            }
            if (data.hasOwnProperty('identifier')) {
                obj['identifier'] = ApiClient.convertToType(data['identifier'], 'String');
            }
            if (data.hasOwnProperty('oauthConsumerKey')) {
                obj['oauthConsumerKey'] = ApiClient.convertToType(data['oauthConsumerKey'], 'String');
            }
            if (data.hasOwnProperty('oauthScope')) {
                obj['oauthScope'] = ApiClient.convertToType(data['oauthScope'], 'String');
            }
            if (data.hasOwnProperty('openidRealm')) {
                obj['openidRealm'] = ApiClient.convertToType(data['openidRealm'], 'String');
            }
            if (data.hasOwnProperty('otaApp')) {
                obj['otaApp'] = ApiClient.convertToType(data['otaApp'], 'String');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tenantProjectNumber')) {
                obj['tenantProjectNumber'] = ApiClient.convertToType(data['tenantProjectNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentitytoolkitRelyingpartyCreateAuthUriRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentitytoolkitRelyingpartyCreateAuthUriRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['authFlowType'] && !(typeof data['authFlowType'] === 'string' || data['authFlowType'] instanceof String)) {
            throw new Error("Expected the field `authFlowType` to be a primitive type in the JSON string but got " + data['authFlowType']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['continueUri'] && !(typeof data['continueUri'] === 'string' || data['continueUri'] instanceof String)) {
            throw new Error("Expected the field `continueUri` to be a primitive type in the JSON string but got " + data['continueUri']);
        }
        // ensure the json data is a string
        if (data['hostedDomain'] && !(typeof data['hostedDomain'] === 'string' || data['hostedDomain'] instanceof String)) {
            throw new Error("Expected the field `hostedDomain` to be a primitive type in the JSON string but got " + data['hostedDomain']);
        }
        // ensure the json data is a string
        if (data['identifier'] && !(typeof data['identifier'] === 'string' || data['identifier'] instanceof String)) {
            throw new Error("Expected the field `identifier` to be a primitive type in the JSON string but got " + data['identifier']);
        }
        // ensure the json data is a string
        if (data['oauthConsumerKey'] && !(typeof data['oauthConsumerKey'] === 'string' || data['oauthConsumerKey'] instanceof String)) {
            throw new Error("Expected the field `oauthConsumerKey` to be a primitive type in the JSON string but got " + data['oauthConsumerKey']);
        }
        // ensure the json data is a string
        if (data['oauthScope'] && !(typeof data['oauthScope'] === 'string' || data['oauthScope'] instanceof String)) {
            throw new Error("Expected the field `oauthScope` to be a primitive type in the JSON string but got " + data['oauthScope']);
        }
        // ensure the json data is a string
        if (data['openidRealm'] && !(typeof data['openidRealm'] === 'string' || data['openidRealm'] instanceof String)) {
            throw new Error("Expected the field `openidRealm` to be a primitive type in the JSON string but got " + data['openidRealm']);
        }
        // ensure the json data is a string
        if (data['otaApp'] && !(typeof data['otaApp'] === 'string' || data['otaApp'] instanceof String)) {
            throw new Error("Expected the field `otaApp` to be a primitive type in the JSON string but got " + data['otaApp']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['tenantProjectNumber'] && !(typeof data['tenantProjectNumber'] === 'string' || data['tenantProjectNumber'] instanceof String)) {
            throw new Error("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got " + data['tenantProjectNumber']);
        }

        return true;
    }


}



/**
 * The app ID of the mobile app, base64(CERT_SHA1):PACKAGE_NAME for Android, BUNDLE_ID for iOS.
 * @member {String} appId
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['appId'] = undefined;

/**
 * Explicitly specify the auth flow type. Currently only support \"CODE_FLOW\" type. The field is only used for Google provider.
 * @member {String} authFlowType
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['authFlowType'] = undefined;

/**
 * The relying party OAuth client ID.
 * @member {String} clientId
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['clientId'] = undefined;

/**
 * The opaque value used by the client to maintain context info between the authentication request and the IDP callback.
 * @member {String} context
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['context'] = undefined;

/**
 * The URI to which the IDP redirects the user after the federated login flow.
 * @member {String} continueUri
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['continueUri'] = undefined;

/**
 * The query parameter that client can customize by themselves in auth url. The following parameters are reserved for server so that they cannot be customized by clients: client_id, response_type, scope, redirect_uri, state, oauth_token.
 * @member {Object.<String, String>} customParameter
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['customParameter'] = undefined;

/**
 * The hosted domain to restrict sign-in to accounts at that domain for Google Apps hosted accounts.
 * @member {String} hostedDomain
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['hostedDomain'] = undefined;

/**
 * The email or federated ID of the user.
 * @member {String} identifier
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['identifier'] = undefined;

/**
 * The developer's consumer key for OpenId OAuth Extension
 * @member {String} oauthConsumerKey
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['oauthConsumerKey'] = undefined;

/**
 * Additional oauth scopes, beyond the basid user profile, that the user would be prompted to grant
 * @member {String} oauthScope
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['oauthScope'] = undefined;

/**
 * Optional realm for OpenID protocol. The sub string \"scheme://domain:port\" of the param \"continueUri\" is used if this is not set.
 * @member {String} openidRealm
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['openidRealm'] = undefined;

/**
 * The native app package for OTA installation.
 * @member {String} otaApp
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['otaApp'] = undefined;

/**
 * The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. For other OpenID IdPs it's the OP identifier.
 * @member {String} providerId
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['providerId'] = undefined;

/**
 * The session_id passed by client.
 * @member {String} sessionId
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['sessionId'] = undefined;

/**
 * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
 * @member {String} tenantId
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['tenantId'] = undefined;

/**
 * Tenant project number to be used for idp discovery.
 * @member {String} tenantProjectNumber
 */
IdentitytoolkitRelyingpartyCreateAuthUriRequest.prototype['tenantProjectNumber'] = undefined;






export default IdentitytoolkitRelyingpartyCreateAuthUriRequest;

