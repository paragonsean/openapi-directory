/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Relyingparty model module.
 * @module model/Relyingparty
 * @version v3
 */
class Relyingparty {
    /**
     * Constructs a new <code>Relyingparty</code>.
     * Request of getting a code for user confirmation (reset password, change email etc.)
     * @alias module:model/Relyingparty
     */
    constructor() { 
        
        Relyingparty.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'identitytoolkit#relyingparty';
    }

    /**
     * Constructs a <code>Relyingparty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Relyingparty} obj Optional instance to populate.
     * @return {module:model/Relyingparty} The populated <code>Relyingparty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Relyingparty();

            if (data.hasOwnProperty('androidInstallApp')) {
                obj['androidInstallApp'] = ApiClient.convertToType(data['androidInstallApp'], 'Boolean');
            }
            if (data.hasOwnProperty('androidMinimumVersion')) {
                obj['androidMinimumVersion'] = ApiClient.convertToType(data['androidMinimumVersion'], 'String');
            }
            if (data.hasOwnProperty('androidPackageName')) {
                obj['androidPackageName'] = ApiClient.convertToType(data['androidPackageName'], 'String');
            }
            if (data.hasOwnProperty('canHandleCodeInApp')) {
                obj['canHandleCodeInApp'] = ApiClient.convertToType(data['canHandleCodeInApp'], 'Boolean');
            }
            if (data.hasOwnProperty('captchaResp')) {
                obj['captchaResp'] = ApiClient.convertToType(data['captchaResp'], 'String');
            }
            if (data.hasOwnProperty('challenge')) {
                obj['challenge'] = ApiClient.convertToType(data['challenge'], 'String');
            }
            if (data.hasOwnProperty('continueUrl')) {
                obj['continueUrl'] = ApiClient.convertToType(data['continueUrl'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('iOSAppStoreId')) {
                obj['iOSAppStoreId'] = ApiClient.convertToType(data['iOSAppStoreId'], 'String');
            }
            if (data.hasOwnProperty('iOSBundleId')) {
                obj['iOSBundleId'] = ApiClient.convertToType(data['iOSBundleId'], 'String');
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('newEmail')) {
                obj['newEmail'] = ApiClient.convertToType(data['newEmail'], 'String');
            }
            if (data.hasOwnProperty('requestType')) {
                obj['requestType'] = ApiClient.convertToType(data['requestType'], 'String');
            }
            if (data.hasOwnProperty('userIp')) {
                obj['userIp'] = ApiClient.convertToType(data['userIp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Relyingparty</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Relyingparty</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['androidMinimumVersion'] && !(typeof data['androidMinimumVersion'] === 'string' || data['androidMinimumVersion'] instanceof String)) {
            throw new Error("Expected the field `androidMinimumVersion` to be a primitive type in the JSON string but got " + data['androidMinimumVersion']);
        }
        // ensure the json data is a string
        if (data['androidPackageName'] && !(typeof data['androidPackageName'] === 'string' || data['androidPackageName'] instanceof String)) {
            throw new Error("Expected the field `androidPackageName` to be a primitive type in the JSON string but got " + data['androidPackageName']);
        }
        // ensure the json data is a string
        if (data['captchaResp'] && !(typeof data['captchaResp'] === 'string' || data['captchaResp'] instanceof String)) {
            throw new Error("Expected the field `captchaResp` to be a primitive type in the JSON string but got " + data['captchaResp']);
        }
        // ensure the json data is a string
        if (data['challenge'] && !(typeof data['challenge'] === 'string' || data['challenge'] instanceof String)) {
            throw new Error("Expected the field `challenge` to be a primitive type in the JSON string but got " + data['challenge']);
        }
        // ensure the json data is a string
        if (data['continueUrl'] && !(typeof data['continueUrl'] === 'string' || data['continueUrl'] instanceof String)) {
            throw new Error("Expected the field `continueUrl` to be a primitive type in the JSON string but got " + data['continueUrl']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['iOSAppStoreId'] && !(typeof data['iOSAppStoreId'] === 'string' || data['iOSAppStoreId'] instanceof String)) {
            throw new Error("Expected the field `iOSAppStoreId` to be a primitive type in the JSON string but got " + data['iOSAppStoreId']);
        }
        // ensure the json data is a string
        if (data['iOSBundleId'] && !(typeof data['iOSBundleId'] === 'string' || data['iOSBundleId'] instanceof String)) {
            throw new Error("Expected the field `iOSBundleId` to be a primitive type in the JSON string but got " + data['iOSBundleId']);
        }
        // ensure the json data is a string
        if (data['idToken'] && !(typeof data['idToken'] === 'string' || data['idToken'] instanceof String)) {
            throw new Error("Expected the field `idToken` to be a primitive type in the JSON string but got " + data['idToken']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['newEmail'] && !(typeof data['newEmail'] === 'string' || data['newEmail'] instanceof String)) {
            throw new Error("Expected the field `newEmail` to be a primitive type in the JSON string but got " + data['newEmail']);
        }
        // ensure the json data is a string
        if (data['requestType'] && !(typeof data['requestType'] === 'string' || data['requestType'] instanceof String)) {
            throw new Error("Expected the field `requestType` to be a primitive type in the JSON string but got " + data['requestType']);
        }
        // ensure the json data is a string
        if (data['userIp'] && !(typeof data['userIp'] === 'string' || data['userIp'] instanceof String)) {
            throw new Error("Expected the field `userIp` to be a primitive type in the JSON string but got " + data['userIp']);
        }

        return true;
    }


}



/**
 * whether or not to install the android app on the device where the link is opened
 * @member {Boolean} androidInstallApp
 */
Relyingparty.prototype['androidInstallApp'] = undefined;

/**
 * minimum version of the app. if the version on the device is lower than this version then the user is taken to the play store to upgrade the app
 * @member {String} androidMinimumVersion
 */
Relyingparty.prototype['androidMinimumVersion'] = undefined;

/**
 * android package name of the android app to handle the action code
 * @member {String} androidPackageName
 */
Relyingparty.prototype['androidPackageName'] = undefined;

/**
 * whether or not the app can handle the oob code without first going to web
 * @member {Boolean} canHandleCodeInApp
 */
Relyingparty.prototype['canHandleCodeInApp'] = undefined;

/**
 * The recaptcha response from the user.
 * @member {String} captchaResp
 */
Relyingparty.prototype['captchaResp'] = undefined;

/**
 * The recaptcha challenge presented to the user.
 * @member {String} challenge
 */
Relyingparty.prototype['challenge'] = undefined;

/**
 * The url to continue to the Gitkit app
 * @member {String} continueUrl
 */
Relyingparty.prototype['continueUrl'] = undefined;

/**
 * The email of the user.
 * @member {String} email
 */
Relyingparty.prototype['email'] = undefined;

/**
 * iOS app store id to download the app if it's not already installed
 * @member {String} iOSAppStoreId
 */
Relyingparty.prototype['iOSAppStoreId'] = undefined;

/**
 * the iOS bundle id of iOS app to handle the action code
 * @member {String} iOSBundleId
 */
Relyingparty.prototype['iOSBundleId'] = undefined;

/**
 * The user's Gitkit login token for email change.
 * @member {String} idToken
 */
Relyingparty.prototype['idToken'] = undefined;

/**
 * The fixed string \"identitytoolkit#relyingparty\".
 * @member {String} kind
 * @default 'identitytoolkit#relyingparty'
 */
Relyingparty.prototype['kind'] = 'identitytoolkit#relyingparty';

/**
 * The new email if the code is for email change.
 * @member {String} newEmail
 */
Relyingparty.prototype['newEmail'] = undefined;

/**
 * The request type.
 * @member {String} requestType
 */
Relyingparty.prototype['requestType'] = undefined;

/**
 * The IP address of the user.
 * @member {String} userIp
 */
Relyingparty.prototype['userIp'] = undefined;






export default Relyingparty;

