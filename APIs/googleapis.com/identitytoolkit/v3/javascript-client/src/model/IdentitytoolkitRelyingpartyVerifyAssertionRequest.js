/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentitytoolkitRelyingpartyVerifyAssertionRequest model module.
 * @module model/IdentitytoolkitRelyingpartyVerifyAssertionRequest
 * @version v3
 */
class IdentitytoolkitRelyingpartyVerifyAssertionRequest {
    /**
     * Constructs a new <code>IdentitytoolkitRelyingpartyVerifyAssertionRequest</code>.
     * Request to verify the IDP assertion.
     * @alias module:model/IdentitytoolkitRelyingpartyVerifyAssertionRequest
     */
    constructor() { 
        
        IdentitytoolkitRelyingpartyVerifyAssertionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentitytoolkitRelyingpartyVerifyAssertionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentitytoolkitRelyingpartyVerifyAssertionRequest} obj Optional instance to populate.
     * @return {module:model/IdentitytoolkitRelyingpartyVerifyAssertionRequest} The populated <code>IdentitytoolkitRelyingpartyVerifyAssertionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentitytoolkitRelyingpartyVerifyAssertionRequest();

            if (data.hasOwnProperty('autoCreate')) {
                obj['autoCreate'] = ApiClient.convertToType(data['autoCreate'], 'Boolean');
            }
            if (data.hasOwnProperty('delegatedProjectNumber')) {
                obj['delegatedProjectNumber'] = ApiClient.convertToType(data['delegatedProjectNumber'], 'String');
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('pendingIdToken')) {
                obj['pendingIdToken'] = ApiClient.convertToType(data['pendingIdToken'], 'String');
            }
            if (data.hasOwnProperty('postBody')) {
                obj['postBody'] = ApiClient.convertToType(data['postBody'], 'String');
            }
            if (data.hasOwnProperty('requestUri')) {
                obj['requestUri'] = ApiClient.convertToType(data['requestUri'], 'String');
            }
            if (data.hasOwnProperty('returnIdpCredential')) {
                obj['returnIdpCredential'] = ApiClient.convertToType(data['returnIdpCredential'], 'Boolean');
            }
            if (data.hasOwnProperty('returnRefreshToken')) {
                obj['returnRefreshToken'] = ApiClient.convertToType(data['returnRefreshToken'], 'Boolean');
            }
            if (data.hasOwnProperty('returnSecureToken')) {
                obj['returnSecureToken'] = ApiClient.convertToType(data['returnSecureToken'], 'Boolean');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tenantProjectNumber')) {
                obj['tenantProjectNumber'] = ApiClient.convertToType(data['tenantProjectNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentitytoolkitRelyingpartyVerifyAssertionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentitytoolkitRelyingpartyVerifyAssertionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delegatedProjectNumber'] && !(typeof data['delegatedProjectNumber'] === 'string' || data['delegatedProjectNumber'] instanceof String)) {
            throw new Error("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got " + data['delegatedProjectNumber']);
        }
        // ensure the json data is a string
        if (data['idToken'] && !(typeof data['idToken'] === 'string' || data['idToken'] instanceof String)) {
            throw new Error("Expected the field `idToken` to be a primitive type in the JSON string but got " + data['idToken']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['pendingIdToken'] && !(typeof data['pendingIdToken'] === 'string' || data['pendingIdToken'] instanceof String)) {
            throw new Error("Expected the field `pendingIdToken` to be a primitive type in the JSON string but got " + data['pendingIdToken']);
        }
        // ensure the json data is a string
        if (data['postBody'] && !(typeof data['postBody'] === 'string' || data['postBody'] instanceof String)) {
            throw new Error("Expected the field `postBody` to be a primitive type in the JSON string but got " + data['postBody']);
        }
        // ensure the json data is a string
        if (data['requestUri'] && !(typeof data['requestUri'] === 'string' || data['requestUri'] instanceof String)) {
            throw new Error("Expected the field `requestUri` to be a primitive type in the JSON string but got " + data['requestUri']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['tenantProjectNumber'] && !(typeof data['tenantProjectNumber'] === 'string' || data['tenantProjectNumber'] instanceof String)) {
            throw new Error("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got " + data['tenantProjectNumber']);
        }

        return true;
    }


}



/**
 * When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.
 * @member {Boolean} autoCreate
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['autoCreate'] = undefined;

/**
 * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
 * @member {String} delegatedProjectNumber
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['delegatedProjectNumber'] = undefined;

/**
 * The GITKit token of the authenticated user.
 * @member {String} idToken
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['idToken'] = undefined;

/**
 * Instance id token of the app.
 * @member {String} instanceId
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['instanceId'] = undefined;

/**
 * The GITKit token for the non-trusted IDP pending to be confirmed by the user.
 * @member {String} pendingIdToken
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['pendingIdToken'] = undefined;

/**
 * The post body if the request is a HTTP POST.
 * @member {String} postBody
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['postBody'] = undefined;

/**
 * The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.
 * @member {String} requestUri
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['requestUri'] = undefined;

/**
 * Whether return 200 and IDP credential rather than throw exception when federated id is already linked.
 * @member {Boolean} returnIdpCredential
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['returnIdpCredential'] = undefined;

/**
 * Whether to return refresh tokens.
 * @member {Boolean} returnRefreshToken
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['returnRefreshToken'] = undefined;

/**
 * Whether return sts id token and refresh token instead of gitkit token.
 * @member {Boolean} returnSecureToken
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['returnSecureToken'] = undefined;

/**
 * Session ID, which should match the one in previous createAuthUri request.
 * @member {String} sessionId
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['sessionId'] = undefined;

/**
 * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
 * @member {String} tenantId
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['tenantId'] = undefined;

/**
 * Tenant project number to be used for idp discovery.
 * @member {String} tenantProjectNumber
 */
IdentitytoolkitRelyingpartyVerifyAssertionRequest.prototype['tenantProjectNumber'] = undefined;






export default IdentitytoolkitRelyingpartyVerifyAssertionRequest;

