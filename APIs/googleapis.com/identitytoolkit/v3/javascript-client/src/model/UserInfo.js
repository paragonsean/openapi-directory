/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfoProviderUserInfoInner from './UserInfoProviderUserInfoInner';

/**
 * The UserInfo model module.
 * @module model/UserInfo
 * @version v3
 */
class UserInfo {
    /**
     * Constructs a new <code>UserInfo</code>.
     * Template for an individual account info.
     * @alias module:model/UserInfo
     */
    constructor() { 
        
        UserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInfo} obj Optional instance to populate.
     * @return {module:model/UserInfo} The populated <code>UserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInfo();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('customAttributes')) {
                obj['customAttributes'] = ApiClient.convertToType(data['customAttributes'], 'String');
            }
            if (data.hasOwnProperty('customAuth')) {
                obj['customAuth'] = ApiClient.convertToType(data['customAuth'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('lastLoginAt')) {
                obj['lastLoginAt'] = ApiClient.convertToType(data['lastLoginAt'], 'String');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = ApiClient.convertToType(data['localId'], 'String');
            }
            if (data.hasOwnProperty('passwordHash')) {
                obj['passwordHash'] = ApiClient.convertToType(data['passwordHash'], 'Blob');
            }
            if (data.hasOwnProperty('passwordUpdatedAt')) {
                obj['passwordUpdatedAt'] = ApiClient.convertToType(data['passwordUpdatedAt'], 'Number');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
            if (data.hasOwnProperty('providerUserInfo')) {
                obj['providerUserInfo'] = ApiClient.convertToType(data['providerUserInfo'], [UserInfoProviderUserInfoInner]);
            }
            if (data.hasOwnProperty('rawPassword')) {
                obj['rawPassword'] = ApiClient.convertToType(data['rawPassword'], 'String');
            }
            if (data.hasOwnProperty('salt')) {
                obj['salt'] = ApiClient.convertToType(data['salt'], 'Blob');
            }
            if (data.hasOwnProperty('screenName')) {
                obj['screenName'] = ApiClient.convertToType(data['screenName'], 'String');
            }
            if (data.hasOwnProperty('validSince')) {
                obj['validSince'] = ApiClient.convertToType(data['validSince'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['customAttributes'] && !(typeof data['customAttributes'] === 'string' || data['customAttributes'] instanceof String)) {
            throw new Error("Expected the field `customAttributes` to be a primitive type in the JSON string but got " + data['customAttributes']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['lastLoginAt'] && !(typeof data['lastLoginAt'] === 'string' || data['lastLoginAt'] instanceof String)) {
            throw new Error("Expected the field `lastLoginAt` to be a primitive type in the JSON string but got " + data['lastLoginAt']);
        }
        // ensure the json data is a string
        if (data['localId'] && !(typeof data['localId'] === 'string' || data['localId'] instanceof String)) {
            throw new Error("Expected the field `localId` to be a primitive type in the JSON string but got " + data['localId']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }
        if (data['providerUserInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['providerUserInfo'])) {
                throw new Error("Expected the field `providerUserInfo` to be an array in the JSON data but got " + data['providerUserInfo']);
            }
            // validate the optional field `providerUserInfo` (array)
            for (const item of data['providerUserInfo']) {
                UserInfoProviderUserInfoInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['rawPassword'] && !(typeof data['rawPassword'] === 'string' || data['rawPassword'] instanceof String)) {
            throw new Error("Expected the field `rawPassword` to be a primitive type in the JSON string but got " + data['rawPassword']);
        }
        // ensure the json data is a string
        if (data['screenName'] && !(typeof data['screenName'] === 'string' || data['screenName'] instanceof String)) {
            throw new Error("Expected the field `screenName` to be a primitive type in the JSON string but got " + data['screenName']);
        }
        // ensure the json data is a string
        if (data['validSince'] && !(typeof data['validSince'] === 'string' || data['validSince'] instanceof String)) {
            throw new Error("Expected the field `validSince` to be a primitive type in the JSON string but got " + data['validSince']);
        }

        return true;
    }


}



/**
 * User creation timestamp.
 * @member {String} createdAt
 */
UserInfo.prototype['createdAt'] = undefined;

/**
 * The custom attributes to be set in the user's id token.
 * @member {String} customAttributes
 */
UserInfo.prototype['customAttributes'] = undefined;

/**
 * Whether the user is authenticated by the developer.
 * @member {Boolean} customAuth
 */
UserInfo.prototype['customAuth'] = undefined;

/**
 * Whether the user is disabled.
 * @member {Boolean} disabled
 */
UserInfo.prototype['disabled'] = undefined;

/**
 * The name of the user.
 * @member {String} displayName
 */
UserInfo.prototype['displayName'] = undefined;

/**
 * The email of the user.
 * @member {String} email
 */
UserInfo.prototype['email'] = undefined;

/**
 * Whether the email has been verified.
 * @member {Boolean} emailVerified
 */
UserInfo.prototype['emailVerified'] = undefined;

/**
 * last login timestamp.
 * @member {String} lastLoginAt
 */
UserInfo.prototype['lastLoginAt'] = undefined;

/**
 * The local ID of the user.
 * @member {String} localId
 */
UserInfo.prototype['localId'] = undefined;

/**
 * The user's hashed password.
 * @member {Blob} passwordHash
 */
UserInfo.prototype['passwordHash'] = undefined;

/**
 * The timestamp when the password was last updated.
 * @member {Number} passwordUpdatedAt
 */
UserInfo.prototype['passwordUpdatedAt'] = undefined;

/**
 * User's phone number.
 * @member {String} phoneNumber
 */
UserInfo.prototype['phoneNumber'] = undefined;

/**
 * The URL of the user profile photo.
 * @member {String} photoUrl
 */
UserInfo.prototype['photoUrl'] = undefined;

/**
 * The IDP of the user.
 * @member {Array.<module:model/UserInfoProviderUserInfoInner>} providerUserInfo
 */
UserInfo.prototype['providerUserInfo'] = undefined;

/**
 * The user's plain text password.
 * @member {String} rawPassword
 */
UserInfo.prototype['rawPassword'] = undefined;

/**
 * The user's password salt.
 * @member {Blob} salt
 */
UserInfo.prototype['salt'] = undefined;

/**
 * User's screen name at Twitter or login name at Github.
 * @member {String} screenName
 */
UserInfo.prototype['screenName'] = undefined;

/**
 * Timestamp in seconds for valid login token.
 * @member {String} validSince
 */
UserInfo.prototype['validSince'] = undefined;

/**
 * Version of the user's password.
 * @member {Number} version
 */
UserInfo.prototype['version'] = undefined;






export default UserInfo;

