/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfo from './UserInfo';

/**
 * The IdentitytoolkitRelyingpartyUploadAccountRequest model module.
 * @module model/IdentitytoolkitRelyingpartyUploadAccountRequest
 * @version v3
 */
class IdentitytoolkitRelyingpartyUploadAccountRequest {
    /**
     * Constructs a new <code>IdentitytoolkitRelyingpartyUploadAccountRequest</code>.
     * Request to upload user account in batch.
     * @alias module:model/IdentitytoolkitRelyingpartyUploadAccountRequest
     */
    constructor() { 
        
        IdentitytoolkitRelyingpartyUploadAccountRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentitytoolkitRelyingpartyUploadAccountRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentitytoolkitRelyingpartyUploadAccountRequest} obj Optional instance to populate.
     * @return {module:model/IdentitytoolkitRelyingpartyUploadAccountRequest} The populated <code>IdentitytoolkitRelyingpartyUploadAccountRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentitytoolkitRelyingpartyUploadAccountRequest();

            if (data.hasOwnProperty('allowOverwrite')) {
                obj['allowOverwrite'] = ApiClient.convertToType(data['allowOverwrite'], 'Boolean');
            }
            if (data.hasOwnProperty('blockSize')) {
                obj['blockSize'] = ApiClient.convertToType(data['blockSize'], 'Number');
            }
            if (data.hasOwnProperty('cpuMemCost')) {
                obj['cpuMemCost'] = ApiClient.convertToType(data['cpuMemCost'], 'Number');
            }
            if (data.hasOwnProperty('delegatedProjectNumber')) {
                obj['delegatedProjectNumber'] = ApiClient.convertToType(data['delegatedProjectNumber'], 'String');
            }
            if (data.hasOwnProperty('dkLen')) {
                obj['dkLen'] = ApiClient.convertToType(data['dkLen'], 'Number');
            }
            if (data.hasOwnProperty('hashAlgorithm')) {
                obj['hashAlgorithm'] = ApiClient.convertToType(data['hashAlgorithm'], 'String');
            }
            if (data.hasOwnProperty('memoryCost')) {
                obj['memoryCost'] = ApiClient.convertToType(data['memoryCost'], 'Number');
            }
            if (data.hasOwnProperty('parallelization')) {
                obj['parallelization'] = ApiClient.convertToType(data['parallelization'], 'Number');
            }
            if (data.hasOwnProperty('rounds')) {
                obj['rounds'] = ApiClient.convertToType(data['rounds'], 'Number');
            }
            if (data.hasOwnProperty('saltSeparator')) {
                obj['saltSeparator'] = ApiClient.convertToType(data['saltSeparator'], 'Blob');
            }
            if (data.hasOwnProperty('sanityCheck')) {
                obj['sanityCheck'] = ApiClient.convertToType(data['sanityCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('signerKey')) {
                obj['signerKey'] = ApiClient.convertToType(data['signerKey'], 'Blob');
            }
            if (data.hasOwnProperty('targetProjectId')) {
                obj['targetProjectId'] = ApiClient.convertToType(data['targetProjectId'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [UserInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentitytoolkitRelyingpartyUploadAccountRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentitytoolkitRelyingpartyUploadAccountRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['delegatedProjectNumber'] && !(typeof data['delegatedProjectNumber'] === 'string' || data['delegatedProjectNumber'] instanceof String)) {
            throw new Error("Expected the field `delegatedProjectNumber` to be a primitive type in the JSON string but got " + data['delegatedProjectNumber']);
        }
        // ensure the json data is a string
        if (data['hashAlgorithm'] && !(typeof data['hashAlgorithm'] === 'string' || data['hashAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `hashAlgorithm` to be a primitive type in the JSON string but got " + data['hashAlgorithm']);
        }
        // ensure the json data is a string
        if (data['targetProjectId'] && !(typeof data['targetProjectId'] === 'string' || data['targetProjectId'] instanceof String)) {
            throw new Error("Expected the field `targetProjectId` to be a primitive type in the JSON string but got " + data['targetProjectId']);
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                UserInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Whether allow overwrite existing account when user local_id exists.
 * @member {Boolean} allowOverwrite
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['allowOverwrite'] = undefined;

/**
 * @member {Number} blockSize
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['blockSize'] = undefined;

/**
 * The following 4 fields are for standard scrypt algorithm.
 * @member {Number} cpuMemCost
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['cpuMemCost'] = undefined;

/**
 * GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.
 * @member {String} delegatedProjectNumber
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['delegatedProjectNumber'] = undefined;

/**
 * @member {Number} dkLen
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['dkLen'] = undefined;

/**
 * The password hash algorithm.
 * @member {String} hashAlgorithm
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['hashAlgorithm'] = undefined;

/**
 * Memory cost for hash calculation. Used by scrypt similar algorithms.
 * @member {Number} memoryCost
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['memoryCost'] = undefined;

/**
 * @member {Number} parallelization
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['parallelization'] = undefined;

/**
 * Rounds for hash calculation. Used by scrypt and similar algorithms.
 * @member {Number} rounds
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['rounds'] = undefined;

/**
 * The salt separator.
 * @member {Blob} saltSeparator
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['saltSeparator'] = undefined;

/**
 * If true, backend will do sanity check(including duplicate email and federated id) when uploading account.
 * @member {Boolean} sanityCheck
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['sanityCheck'] = undefined;

/**
 * The key for to hash the password.
 * @member {Blob} signerKey
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['signerKey'] = undefined;

/**
 * Specify which project (field value is actually project id) to operate. Only used when provided credential.
 * @member {String} targetProjectId
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['targetProjectId'] = undefined;

/**
 * The account info to be stored.
 * @member {Array.<module:model/UserInfo>} users
 */
IdentitytoolkitRelyingpartyUploadAccountRequest.prototype['users'] = undefined;






export default IdentitytoolkitRelyingpartyUploadAccountRequest;

