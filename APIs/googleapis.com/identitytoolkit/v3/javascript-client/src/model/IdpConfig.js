/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdpConfig model module.
 * @module model/IdpConfig
 * @version v3
 */
class IdpConfig {
    /**
     * Constructs a new <code>IdpConfig</code>.
     * Template for a single idp configuration.
     * @alias module:model/IdpConfig
     */
    constructor() { 
        
        IdpConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdpConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdpConfig} obj Optional instance to populate.
     * @return {module:model/IdpConfig} The populated <code>IdpConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdpConfig();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('experimentPercent')) {
                obj['experimentPercent'] = ApiClient.convertToType(data['experimentPercent'], 'Number');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('whitelistedAudiences')) {
                obj['whitelistedAudiences'] = ApiClient.convertToType(data['whitelistedAudiences'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdpConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdpConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['whitelistedAudiences'])) {
            throw new Error("Expected the field `whitelistedAudiences` to be an array in the JSON data but got " + data['whitelistedAudiences']);
        }

        return true;
    }


}



/**
 * OAuth2 client ID.
 * @member {String} clientId
 */
IdpConfig.prototype['clientId'] = undefined;

/**
 * Whether this IDP is enabled.
 * @member {Boolean} enabled
 */
IdpConfig.prototype['enabled'] = undefined;

/**
 * Percent of users who will be prompted/redirected federated login for this IDP.
 * @member {Number} experimentPercent
 */
IdpConfig.prototype['experimentPercent'] = undefined;

/**
 * OAuth2 provider.
 * @member {String} provider
 */
IdpConfig.prototype['provider'] = undefined;

/**
 * OAuth2 client secret.
 * @member {String} secret
 */
IdpConfig.prototype['secret'] = undefined;

/**
 * Whitelisted client IDs for audience check.
 * @member {Array.<String>} whitelistedAudiences
 */
IdpConfig.prototype['whitelistedAudiences'] = undefined;






export default IdpConfig;

