/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAuthUriResponse model module.
 * @module model/CreateAuthUriResponse
 * @version v3
 */
class CreateAuthUriResponse {
    /**
     * Constructs a new <code>CreateAuthUriResponse</code>.
     * Response of creating the IDP authentication URL.
     * @alias module:model/CreateAuthUriResponse
     */
    constructor() { 
        
        CreateAuthUriResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'identitytoolkit#CreateAuthUriResponse';
    }

    /**
     * Constructs a <code>CreateAuthUriResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAuthUriResponse} obj Optional instance to populate.
     * @return {module:model/CreateAuthUriResponse} The populated <code>CreateAuthUriResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAuthUriResponse();

            if (data.hasOwnProperty('allProviders')) {
                obj['allProviders'] = ApiClient.convertToType(data['allProviders'], ['String']);
            }
            if (data.hasOwnProperty('authUri')) {
                obj['authUri'] = ApiClient.convertToType(data['authUri'], 'String');
            }
            if (data.hasOwnProperty('captchaRequired')) {
                obj['captchaRequired'] = ApiClient.convertToType(data['captchaRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('forExistingProvider')) {
                obj['forExistingProvider'] = ApiClient.convertToType(data['forExistingProvider'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('providerId')) {
                obj['providerId'] = ApiClient.convertToType(data['providerId'], 'String');
            }
            if (data.hasOwnProperty('registered')) {
                obj['registered'] = ApiClient.convertToType(data['registered'], 'Boolean');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('signinMethods')) {
                obj['signinMethods'] = ApiClient.convertToType(data['signinMethods'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAuthUriResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAuthUriResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allProviders'])) {
            throw new Error("Expected the field `allProviders` to be an array in the JSON data but got " + data['allProviders']);
        }
        // ensure the json data is a string
        if (data['authUri'] && !(typeof data['authUri'] === 'string' || data['authUri'] instanceof String)) {
            throw new Error("Expected the field `authUri` to be a primitive type in the JSON string but got " + data['authUri']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['providerId'] && !(typeof data['providerId'] === 'string' || data['providerId'] instanceof String)) {
            throw new Error("Expected the field `providerId` to be a primitive type in the JSON string but got " + data['providerId']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['signinMethods'])) {
            throw new Error("Expected the field `signinMethods` to be an array in the JSON data but got " + data['signinMethods']);
        }

        return true;
    }


}



/**
 * all providers the user has once used to do federated login
 * @member {Array.<String>} allProviders
 */
CreateAuthUriResponse.prototype['allProviders'] = undefined;

/**
 * The URI used by the IDP to authenticate the user.
 * @member {String} authUri
 */
CreateAuthUriResponse.prototype['authUri'] = undefined;

/**
 * True if captcha is required.
 * @member {Boolean} captchaRequired
 */
CreateAuthUriResponse.prototype['captchaRequired'] = undefined;

/**
 * True if the authUri is for user's existing provider.
 * @member {Boolean} forExistingProvider
 */
CreateAuthUriResponse.prototype['forExistingProvider'] = undefined;

/**
 * The fixed string identitytoolkit#CreateAuthUriResponse\".
 * @member {String} kind
 * @default 'identitytoolkit#CreateAuthUriResponse'
 */
CreateAuthUriResponse.prototype['kind'] = 'identitytoolkit#CreateAuthUriResponse';

/**
 * The provider ID of the auth URI.
 * @member {String} providerId
 */
CreateAuthUriResponse.prototype['providerId'] = undefined;

/**
 * Whether the user is registered if the identifier is an email.
 * @member {Boolean} registered
 */
CreateAuthUriResponse.prototype['registered'] = undefined;

/**
 * Session ID which should be passed in the following verifyAssertion request.
 * @member {String} sessionId
 */
CreateAuthUriResponse.prototype['sessionId'] = undefined;

/**
 * All sign-in methods this user has used.
 * @member {Array.<String>} signinMethods
 */
CreateAuthUriResponse.prototype['signinMethods'] = undefined;






export default CreateAuthUriResponse;

