/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VerifyPasswordResponse model module.
 * @module model/VerifyPasswordResponse
 * @version v3
 */
class VerifyPasswordResponse {
    /**
     * Constructs a new <code>VerifyPasswordResponse</code>.
     * Request of verifying the password.
     * @alias module:model/VerifyPasswordResponse
     */
    constructor() { 
        
        VerifyPasswordResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'identitytoolkit#VerifyPasswordResponse';
    }

    /**
     * Constructs a <code>VerifyPasswordResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerifyPasswordResponse} obj Optional instance to populate.
     * @return {module:model/VerifyPasswordResponse} The populated <code>VerifyPasswordResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerifyPasswordResponse();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expiresIn')) {
                obj['expiresIn'] = ApiClient.convertToType(data['expiresIn'], 'String');
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = ApiClient.convertToType(data['localId'], 'String');
            }
            if (data.hasOwnProperty('oauthAccessToken')) {
                obj['oauthAccessToken'] = ApiClient.convertToType(data['oauthAccessToken'], 'String');
            }
            if (data.hasOwnProperty('oauthAuthorizationCode')) {
                obj['oauthAuthorizationCode'] = ApiClient.convertToType(data['oauthAuthorizationCode'], 'String');
            }
            if (data.hasOwnProperty('oauthExpireIn')) {
                obj['oauthExpireIn'] = ApiClient.convertToType(data['oauthExpireIn'], 'Number');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
            if (data.hasOwnProperty('refreshToken')) {
                obj['refreshToken'] = ApiClient.convertToType(data['refreshToken'], 'String');
            }
            if (data.hasOwnProperty('registered')) {
                obj['registered'] = ApiClient.convertToType(data['registered'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerifyPasswordResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerifyPasswordResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['expiresIn'] && !(typeof data['expiresIn'] === 'string' || data['expiresIn'] instanceof String)) {
            throw new Error("Expected the field `expiresIn` to be a primitive type in the JSON string but got " + data['expiresIn']);
        }
        // ensure the json data is a string
        if (data['idToken'] && !(typeof data['idToken'] === 'string' || data['idToken'] instanceof String)) {
            throw new Error("Expected the field `idToken` to be a primitive type in the JSON string but got " + data['idToken']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['localId'] && !(typeof data['localId'] === 'string' || data['localId'] instanceof String)) {
            throw new Error("Expected the field `localId` to be a primitive type in the JSON string but got " + data['localId']);
        }
        // ensure the json data is a string
        if (data['oauthAccessToken'] && !(typeof data['oauthAccessToken'] === 'string' || data['oauthAccessToken'] instanceof String)) {
            throw new Error("Expected the field `oauthAccessToken` to be a primitive type in the JSON string but got " + data['oauthAccessToken']);
        }
        // ensure the json data is a string
        if (data['oauthAuthorizationCode'] && !(typeof data['oauthAuthorizationCode'] === 'string' || data['oauthAuthorizationCode'] instanceof String)) {
            throw new Error("Expected the field `oauthAuthorizationCode` to be a primitive type in the JSON string but got " + data['oauthAuthorizationCode']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }
        // ensure the json data is a string
        if (data['refreshToken'] && !(typeof data['refreshToken'] === 'string' || data['refreshToken'] instanceof String)) {
            throw new Error("Expected the field `refreshToken` to be a primitive type in the JSON string but got " + data['refreshToken']);
        }

        return true;
    }


}



/**
 * The name of the user.
 * @member {String} displayName
 */
VerifyPasswordResponse.prototype['displayName'] = undefined;

/**
 * The email returned by the IdP. NOTE: The federated login user may not own the email.
 * @member {String} email
 */
VerifyPasswordResponse.prototype['email'] = undefined;

/**
 * If idToken is STS id token, then this field will be expiration time of STS id token in seconds.
 * @member {String} expiresIn
 */
VerifyPasswordResponse.prototype['expiresIn'] = undefined;

/**
 * The GITKit token for authenticated user.
 * @member {String} idToken
 */
VerifyPasswordResponse.prototype['idToken'] = undefined;

/**
 * The fixed string \"identitytoolkit#VerifyPasswordResponse\".
 * @member {String} kind
 * @default 'identitytoolkit#VerifyPasswordResponse'
 */
VerifyPasswordResponse.prototype['kind'] = 'identitytoolkit#VerifyPasswordResponse';

/**
 * The RP local ID if it's already been mapped to the IdP account identified by the federated ID.
 * @member {String} localId
 */
VerifyPasswordResponse.prototype['localId'] = undefined;

/**
 * The OAuth2 access token.
 * @member {String} oauthAccessToken
 */
VerifyPasswordResponse.prototype['oauthAccessToken'] = undefined;

/**
 * The OAuth2 authorization code.
 * @member {String} oauthAuthorizationCode
 */
VerifyPasswordResponse.prototype['oauthAuthorizationCode'] = undefined;

/**
 * The lifetime in seconds of the OAuth2 access token.
 * @member {Number} oauthExpireIn
 */
VerifyPasswordResponse.prototype['oauthExpireIn'] = undefined;

/**
 * The URI of the user's photo at IdP
 * @member {String} photoUrl
 */
VerifyPasswordResponse.prototype['photoUrl'] = undefined;

/**
 * If idToken is STS id token, then this field will be refresh token.
 * @member {String} refreshToken
 */
VerifyPasswordResponse.prototype['refreshToken'] = undefined;

/**
 * Whether the email is registered.
 * @member {Boolean} registered
 */
VerifyPasswordResponse.prototype['registered'] = undefined;






export default VerifyPasswordResponse;

