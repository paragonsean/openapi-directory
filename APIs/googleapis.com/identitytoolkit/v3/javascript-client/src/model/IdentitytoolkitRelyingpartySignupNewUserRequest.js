/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentitytoolkitRelyingpartySignupNewUserRequest model module.
 * @module model/IdentitytoolkitRelyingpartySignupNewUserRequest
 * @version v3
 */
class IdentitytoolkitRelyingpartySignupNewUserRequest {
    /**
     * Constructs a new <code>IdentitytoolkitRelyingpartySignupNewUserRequest</code>.
     * Request to signup new user, create anonymous user or anonymous user reauth.
     * @alias module:model/IdentitytoolkitRelyingpartySignupNewUserRequest
     */
    constructor() { 
        
        IdentitytoolkitRelyingpartySignupNewUserRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentitytoolkitRelyingpartySignupNewUserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentitytoolkitRelyingpartySignupNewUserRequest} obj Optional instance to populate.
     * @return {module:model/IdentitytoolkitRelyingpartySignupNewUserRequest} The populated <code>IdentitytoolkitRelyingpartySignupNewUserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentitytoolkitRelyingpartySignupNewUserRequest();

            if (data.hasOwnProperty('captchaChallenge')) {
                obj['captchaChallenge'] = ApiClient.convertToType(data['captchaChallenge'], 'String');
            }
            if (data.hasOwnProperty('captchaResponse')) {
                obj['captchaResponse'] = ApiClient.convertToType(data['captchaResponse'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerified')) {
                obj['emailVerified'] = ApiClient.convertToType(data['emailVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('localId')) {
                obj['localId'] = ApiClient.convertToType(data['localId'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('photoUrl')) {
                obj['photoUrl'] = ApiClient.convertToType(data['photoUrl'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('tenantProjectNumber')) {
                obj['tenantProjectNumber'] = ApiClient.convertToType(data['tenantProjectNumber'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentitytoolkitRelyingpartySignupNewUserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentitytoolkitRelyingpartySignupNewUserRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['captchaChallenge'] && !(typeof data['captchaChallenge'] === 'string' || data['captchaChallenge'] instanceof String)) {
            throw new Error("Expected the field `captchaChallenge` to be a primitive type in the JSON string but got " + data['captchaChallenge']);
        }
        // ensure the json data is a string
        if (data['captchaResponse'] && !(typeof data['captchaResponse'] === 'string' || data['captchaResponse'] instanceof String)) {
            throw new Error("Expected the field `captchaResponse` to be a primitive type in the JSON string but got " + data['captchaResponse']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['idToken'] && !(typeof data['idToken'] === 'string' || data['idToken'] instanceof String)) {
            throw new Error("Expected the field `idToken` to be a primitive type in the JSON string but got " + data['idToken']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['localId'] && !(typeof data['localId'] === 'string' || data['localId'] instanceof String)) {
            throw new Error("Expected the field `localId` to be a primitive type in the JSON string but got " + data['localId']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['photoUrl'] && !(typeof data['photoUrl'] === 'string' || data['photoUrl'] instanceof String)) {
            throw new Error("Expected the field `photoUrl` to be a primitive type in the JSON string but got " + data['photoUrl']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['tenantProjectNumber'] && !(typeof data['tenantProjectNumber'] === 'string' || data['tenantProjectNumber'] instanceof String)) {
            throw new Error("Expected the field `tenantProjectNumber` to be a primitive type in the JSON string but got " + data['tenantProjectNumber']);
        }

        return true;
    }


}



/**
 * The captcha challenge.
 * @member {String} captchaChallenge
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['captchaChallenge'] = undefined;

/**
 * Response to the captcha.
 * @member {String} captchaResponse
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['captchaResponse'] = undefined;

/**
 * Whether to disable the user. Only can be used by service account.
 * @member {Boolean} disabled
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['disabled'] = undefined;

/**
 * The name of the user.
 * @member {String} displayName
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['displayName'] = undefined;

/**
 * The email of the user.
 * @member {String} email
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['email'] = undefined;

/**
 * Mark the email as verified or not. Only can be used by service account.
 * @member {Boolean} emailVerified
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['emailVerified'] = undefined;

/**
 * The GITKit token of the authenticated user.
 * @member {String} idToken
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['idToken'] = undefined;

/**
 * Instance id token of the app.
 * @member {String} instanceId
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['instanceId'] = undefined;

/**
 * Privileged caller can create user with specified user id.
 * @member {String} localId
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['localId'] = undefined;

/**
 * The new password of the user.
 * @member {String} password
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['password'] = undefined;

/**
 * Privileged caller can create user with specified phone number.
 * @member {String} phoneNumber
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['phoneNumber'] = undefined;

/**
 * The photo url of the user.
 * @member {String} photoUrl
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['photoUrl'] = undefined;

/**
 * For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.
 * @member {String} tenantId
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['tenantId'] = undefined;

/**
 * Tenant project number to be used for idp discovery.
 * @member {String} tenantProjectNumber
 */
IdentitytoolkitRelyingpartySignupNewUserRequest.prototype['tenantProjectNumber'] = undefined;






export default IdentitytoolkitRelyingpartySignupNewUserRequest;

