/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EmailTemplate model module.
 * @module model/EmailTemplate
 * @version v3
 */
class EmailTemplate {
    /**
     * Constructs a new <code>EmailTemplate</code>.
     * Template for an email template.
     * @alias module:model/EmailTemplate
     */
    constructor() { 
        
        EmailTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmailTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailTemplate} obj Optional instance to populate.
     * @return {module:model/EmailTemplate} The populated <code>EmailTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailTemplate();

            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'String');
            }
            if (data.hasOwnProperty('fromDisplayName')) {
                obj['fromDisplayName'] = ApiClient.convertToType(data['fromDisplayName'], 'String');
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = ApiClient.convertToType(data['replyTo'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailTemplate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['from'] && !(typeof data['from'] === 'string' || data['from'] instanceof String)) {
            throw new Error("Expected the field `from` to be a primitive type in the JSON string but got " + data['from']);
        }
        // ensure the json data is a string
        if (data['fromDisplayName'] && !(typeof data['fromDisplayName'] === 'string' || data['fromDisplayName'] instanceof String)) {
            throw new Error("Expected the field `fromDisplayName` to be a primitive type in the JSON string but got " + data['fromDisplayName']);
        }
        // ensure the json data is a string
        if (data['replyTo'] && !(typeof data['replyTo'] === 'string' || data['replyTo'] instanceof String)) {
            throw new Error("Expected the field `replyTo` to be a primitive type in the JSON string but got " + data['replyTo']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * Email body.
 * @member {String} body
 */
EmailTemplate.prototype['body'] = undefined;

/**
 * Email body format.
 * @member {String} format
 */
EmailTemplate.prototype['format'] = undefined;

/**
 * From address of the email.
 * @member {String} from
 */
EmailTemplate.prototype['from'] = undefined;

/**
 * From display name.
 * @member {String} fromDisplayName
 */
EmailTemplate.prototype['fromDisplayName'] = undefined;

/**
 * Reply-to address.
 * @member {String} replyTo
 */
EmailTemplate.prototype['replyTo'] = undefined;

/**
 * Subject of the email.
 * @member {String} subject
 */
EmailTemplate.prototype['subject'] = undefined;






export default EmailTemplate;

