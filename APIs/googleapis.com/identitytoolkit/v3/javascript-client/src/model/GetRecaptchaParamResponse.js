/**
 * Google Identity Toolkit API
 * Help the third party sites to implement federated login.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetRecaptchaParamResponse model module.
 * @module model/GetRecaptchaParamResponse
 * @version v3
 */
class GetRecaptchaParamResponse {
    /**
     * Constructs a new <code>GetRecaptchaParamResponse</code>.
     * Response of getting recaptcha param.
     * @alias module:model/GetRecaptchaParamResponse
     */
    constructor() { 
        
        GetRecaptchaParamResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'identitytoolkit#GetRecaptchaParamResponse';
    }

    /**
     * Constructs a <code>GetRecaptchaParamResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetRecaptchaParamResponse} obj Optional instance to populate.
     * @return {module:model/GetRecaptchaParamResponse} The populated <code>GetRecaptchaParamResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetRecaptchaParamResponse();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('recaptchaSiteKey')) {
                obj['recaptchaSiteKey'] = ApiClient.convertToType(data['recaptchaSiteKey'], 'String');
            }
            if (data.hasOwnProperty('recaptchaStoken')) {
                obj['recaptchaStoken'] = ApiClient.convertToType(data['recaptchaStoken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetRecaptchaParamResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetRecaptchaParamResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['recaptchaSiteKey'] && !(typeof data['recaptchaSiteKey'] === 'string' || data['recaptchaSiteKey'] instanceof String)) {
            throw new Error("Expected the field `recaptchaSiteKey` to be a primitive type in the JSON string but got " + data['recaptchaSiteKey']);
        }
        // ensure the json data is a string
        if (data['recaptchaStoken'] && !(typeof data['recaptchaStoken'] === 'string' || data['recaptchaStoken'] instanceof String)) {
            throw new Error("Expected the field `recaptchaStoken` to be a primitive type in the JSON string but got " + data['recaptchaStoken']);
        }

        return true;
    }


}



/**
 * The fixed string \"identitytoolkit#GetRecaptchaParamResponse\".
 * @member {String} kind
 * @default 'identitytoolkit#GetRecaptchaParamResponse'
 */
GetRecaptchaParamResponse.prototype['kind'] = 'identitytoolkit#GetRecaptchaParamResponse';

/**
 * Site key registered at recaptcha.
 * @member {String} recaptchaSiteKey
 */
GetRecaptchaParamResponse.prototype['recaptchaSiteKey'] = undefined;

/**
 * The stoken field for the recaptcha widget, used to request captcha challenge.
 * @member {String} recaptchaStoken
 */
GetRecaptchaParamResponse.prototype['recaptchaStoken'] = undefined;






export default GetRecaptchaParamResponse;

