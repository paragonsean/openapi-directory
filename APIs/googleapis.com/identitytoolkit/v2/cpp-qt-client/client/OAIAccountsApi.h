/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse.h"
#include "OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse.h"
#include "OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse.h"
#include "OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2StartMfaSignInResponse.h"
#include "OAIGoogleCloudIdentitytoolkitV2WithdrawMfaRequest.h"
#include "OAIGoogleCloudIdentitytoolkitV2WithdrawMfaResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_finalize_mfa_enrollment_request OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest [optional]
    */
    virtual void identitytoolkit_accounts_mfaEnrollment_finalize(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest> &oai_google_cloud_identitytoolkit_v2_finalize_mfa_enrollment_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_start_mfa_enrollment_request OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest [optional]
    */
    virtual void identitytoolkit_accounts_mfaEnrollment_start(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest> &oai_google_cloud_identitytoolkit_v2_start_mfa_enrollment_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_withdraw_mfa_request OAIGoogleCloudIdentitytoolkitV2WithdrawMfaRequest [optional]
    */
    virtual void identitytoolkit_accounts_mfaEnrollment_withdraw(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2WithdrawMfaRequest> &oai_google_cloud_identitytoolkit_v2_withdraw_mfa_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2WithdrawMfaRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_finalize_mfa_sign_in_request OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest [optional]
    */
    virtual void identitytoolkit_accounts_mfaSignIn_finalize(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest> &oai_google_cloud_identitytoolkit_v2_finalize_mfa_sign_in_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_start_mfa_sign_in_request OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest [optional]
    */
    virtual void identitytoolkit_accounts_mfaSignIn_start(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest> &oai_google_cloud_identitytoolkit_v2_start_mfa_sign_in_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_v2_revoke_token_request OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest [optional]
    */
    virtual void identitytoolkit_accounts_revokeToken(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest> &oai_google_cloud_identitytoolkit_v2_revoke_token_request = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void identitytoolkit_accounts_mfaEnrollment_finalizeCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_accounts_mfaEnrollment_startCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_accounts_mfaEnrollment_withdrawCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_accounts_mfaSignIn_finalizeCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_accounts_mfaSignIn_startCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_accounts_revokeTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void identitytoolkit_accounts_mfaEnrollment_finalizeSignal(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse summary);
    void identitytoolkit_accounts_mfaEnrollment_startSignal(OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse summary);
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignal(OAIGoogleCloudIdentitytoolkitV2WithdrawMfaResponse summary);
    void identitytoolkit_accounts_mfaSignIn_finalizeSignal(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse summary);
    void identitytoolkit_accounts_mfaSignIn_startSignal(OAIGoogleCloudIdentitytoolkitV2StartMfaSignInResponse summary);
    void identitytoolkit_accounts_revokeTokenSignal(OAIObject summary);


    void identitytoolkit_accounts_mfaEnrollment_finalizeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse summary);
    void identitytoolkit_accounts_mfaEnrollment_startSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse summary);
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitV2WithdrawMfaResponse summary);
    void identitytoolkit_accounts_mfaSignIn_finalizeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse summary);
    void identitytoolkit_accounts_mfaSignIn_startSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitV2StartMfaSignInResponse summary);
    void identitytoolkit_accounts_revokeTokenSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_finalizeSignalError() instead")
    void identitytoolkit_accounts_mfaEnrollment_finalizeSignalE(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_finalizeSignalError(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_startSignalError() instead")
    void identitytoolkit_accounts_mfaEnrollment_startSignalE(OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_startSignalError(OAIGoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_withdrawSignalError() instead")
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignalE(OAIGoogleCloudIdentitytoolkitV2WithdrawMfaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignalError(OAIGoogleCloudIdentitytoolkitV2WithdrawMfaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaSignIn_finalizeSignalError() instead")
    void identitytoolkit_accounts_mfaSignIn_finalizeSignalE(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaSignIn_finalizeSignalError(OAIGoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaSignIn_startSignalError() instead")
    void identitytoolkit_accounts_mfaSignIn_startSignalE(OAIGoogleCloudIdentitytoolkitV2StartMfaSignInResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaSignIn_startSignalError(OAIGoogleCloudIdentitytoolkitV2StartMfaSignInResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_revokeTokenSignalError() instead")
    void identitytoolkit_accounts_revokeTokenSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_revokeTokenSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_finalizeSignalErrorFull() instead")
    void identitytoolkit_accounts_mfaEnrollment_finalizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_finalizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_startSignalErrorFull() instead")
    void identitytoolkit_accounts_mfaEnrollment_startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaEnrollment_withdrawSignalErrorFull() instead")
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaEnrollment_withdrawSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaSignIn_finalizeSignalErrorFull() instead")
    void identitytoolkit_accounts_mfaSignIn_finalizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaSignIn_finalizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_mfaSignIn_startSignalErrorFull() instead")
    void identitytoolkit_accounts_mfaSignIn_startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_mfaSignIn_startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_accounts_revokeTokenSignalErrorFull() instead")
    void identitytoolkit_accounts_revokeTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_accounts_revokeTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
