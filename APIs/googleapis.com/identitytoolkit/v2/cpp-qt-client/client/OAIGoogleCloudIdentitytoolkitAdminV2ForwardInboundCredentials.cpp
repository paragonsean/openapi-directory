/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::~OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials() {}

void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::isAccessToken() const {
    return m_access_token;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::setAccessToken(const bool &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_access_token_Valid() const{
    return m_access_token_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::isIdToken() const {
    return m_id_token;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::setIdToken(const bool &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_id_token_Valid() const{
    return m_id_token_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::isRefreshToken() const {
    return m_refresh_token;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::setRefreshToken(const bool &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
