/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::~OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::initializeModel() {

    m_forward_inbound_credentials_isSet = false;
    m_forward_inbound_credentials_isValid = false;

    m_triggers_isSet = false;
    m_triggers_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::fromJsonObject(QJsonObject json) {

    m_forward_inbound_credentials_isValid = ::OpenAPI::fromJsonValue(m_forward_inbound_credentials, json[QString("forwardInboundCredentials")]);
    m_forward_inbound_credentials_isSet = !json[QString("forwardInboundCredentials")].isNull() && m_forward_inbound_credentials_isValid;

    m_triggers_isValid = ::OpenAPI::fromJsonValue(m_triggers, json[QString("triggers")]);
    m_triggers_isSet = !json[QString("triggers")].isNull() && m_triggers_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_forward_inbound_credentials.isSet()) {
        obj.insert(QString("forwardInboundCredentials"), ::OpenAPI::toJsonValue(m_forward_inbound_credentials));
    }
    if (m_triggers.size() > 0) {
        obj.insert(QString("triggers"), ::OpenAPI::toJsonValue(m_triggers));
    }
    return obj;
}

OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::getForwardInboundCredentials() const {
    return m_forward_inbound_credentials;
}
void OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::setForwardInboundCredentials(const OAIGoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials &forward_inbound_credentials) {
    m_forward_inbound_credentials = forward_inbound_credentials;
    m_forward_inbound_credentials_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::is_forward_inbound_credentials_Set() const{
    return m_forward_inbound_credentials_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::is_forward_inbound_credentials_Valid() const{
    return m_forward_inbound_credentials_isValid;
}

QMap<QString, OAIGoogleCloudIdentitytoolkitAdminV2Trigger> OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::getTriggers() const {
    return m_triggers;
}
void OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::setTriggers(const QMap<QString, OAIGoogleCloudIdentitytoolkitAdminV2Trigger> &triggers) {
    m_triggers = triggers;
    m_triggers_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::is_triggers_Set() const{
    return m_triggers_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::is_triggers_Valid() const{
    return m_triggers_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forward_inbound_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_triggers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
