/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::~OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions() {}

void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::initializeModel() {

    m_contains_lowercase_character_isSet = false;
    m_contains_lowercase_character_isValid = false;

    m_contains_non_alphanumeric_character_isSet = false;
    m_contains_non_alphanumeric_character_isValid = false;

    m_contains_numeric_character_isSet = false;
    m_contains_numeric_character_isValid = false;

    m_contains_uppercase_character_isSet = false;
    m_contains_uppercase_character_isValid = false;

    m_max_password_length_isSet = false;
    m_max_password_length_isValid = false;

    m_min_password_length_isSet = false;
    m_min_password_length_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::fromJsonObject(QJsonObject json) {

    m_contains_lowercase_character_isValid = ::OpenAPI::fromJsonValue(m_contains_lowercase_character, json[QString("containsLowercaseCharacter")]);
    m_contains_lowercase_character_isSet = !json[QString("containsLowercaseCharacter")].isNull() && m_contains_lowercase_character_isValid;

    m_contains_non_alphanumeric_character_isValid = ::OpenAPI::fromJsonValue(m_contains_non_alphanumeric_character, json[QString("containsNonAlphanumericCharacter")]);
    m_contains_non_alphanumeric_character_isSet = !json[QString("containsNonAlphanumericCharacter")].isNull() && m_contains_non_alphanumeric_character_isValid;

    m_contains_numeric_character_isValid = ::OpenAPI::fromJsonValue(m_contains_numeric_character, json[QString("containsNumericCharacter")]);
    m_contains_numeric_character_isSet = !json[QString("containsNumericCharacter")].isNull() && m_contains_numeric_character_isValid;

    m_contains_uppercase_character_isValid = ::OpenAPI::fromJsonValue(m_contains_uppercase_character, json[QString("containsUppercaseCharacter")]);
    m_contains_uppercase_character_isSet = !json[QString("containsUppercaseCharacter")].isNull() && m_contains_uppercase_character_isValid;

    m_max_password_length_isValid = ::OpenAPI::fromJsonValue(m_max_password_length, json[QString("maxPasswordLength")]);
    m_max_password_length_isSet = !json[QString("maxPasswordLength")].isNull() && m_max_password_length_isValid;

    m_min_password_length_isValid = ::OpenAPI::fromJsonValue(m_min_password_length, json[QString("minPasswordLength")]);
    m_min_password_length_isSet = !json[QString("minPasswordLength")].isNull() && m_min_password_length_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_lowercase_character_isSet) {
        obj.insert(QString("containsLowercaseCharacter"), ::OpenAPI::toJsonValue(m_contains_lowercase_character));
    }
    if (m_contains_non_alphanumeric_character_isSet) {
        obj.insert(QString("containsNonAlphanumericCharacter"), ::OpenAPI::toJsonValue(m_contains_non_alphanumeric_character));
    }
    if (m_contains_numeric_character_isSet) {
        obj.insert(QString("containsNumericCharacter"), ::OpenAPI::toJsonValue(m_contains_numeric_character));
    }
    if (m_contains_uppercase_character_isSet) {
        obj.insert(QString("containsUppercaseCharacter"), ::OpenAPI::toJsonValue(m_contains_uppercase_character));
    }
    if (m_max_password_length_isSet) {
        obj.insert(QString("maxPasswordLength"), ::OpenAPI::toJsonValue(m_max_password_length));
    }
    if (m_min_password_length_isSet) {
        obj.insert(QString("minPasswordLength"), ::OpenAPI::toJsonValue(m_min_password_length));
    }
    return obj;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isContainsLowercaseCharacter() const {
    return m_contains_lowercase_character;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setContainsLowercaseCharacter(const bool &contains_lowercase_character) {
    m_contains_lowercase_character = contains_lowercase_character;
    m_contains_lowercase_character_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_lowercase_character_Set() const{
    return m_contains_lowercase_character_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_lowercase_character_Valid() const{
    return m_contains_lowercase_character_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isContainsNonAlphanumericCharacter() const {
    return m_contains_non_alphanumeric_character;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setContainsNonAlphanumericCharacter(const bool &contains_non_alphanumeric_character) {
    m_contains_non_alphanumeric_character = contains_non_alphanumeric_character;
    m_contains_non_alphanumeric_character_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_non_alphanumeric_character_Set() const{
    return m_contains_non_alphanumeric_character_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_non_alphanumeric_character_Valid() const{
    return m_contains_non_alphanumeric_character_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isContainsNumericCharacter() const {
    return m_contains_numeric_character;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setContainsNumericCharacter(const bool &contains_numeric_character) {
    m_contains_numeric_character = contains_numeric_character;
    m_contains_numeric_character_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_numeric_character_Set() const{
    return m_contains_numeric_character_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_numeric_character_Valid() const{
    return m_contains_numeric_character_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isContainsUppercaseCharacter() const {
    return m_contains_uppercase_character;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setContainsUppercaseCharacter(const bool &contains_uppercase_character) {
    m_contains_uppercase_character = contains_uppercase_character;
    m_contains_uppercase_character_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_uppercase_character_Set() const{
    return m_contains_uppercase_character_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_contains_uppercase_character_Valid() const{
    return m_contains_uppercase_character_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::getMaxPasswordLength() const {
    return m_max_password_length;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setMaxPasswordLength(const qint32 &max_password_length) {
    m_max_password_length = max_password_length;
    m_max_password_length_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_max_password_length_Set() const{
    return m_max_password_length_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_max_password_length_Valid() const{
    return m_max_password_length_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::getMinPasswordLength() const {
    return m_min_password_length;
}
void OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::setMinPasswordLength(const qint32 &min_password_length) {
    m_min_password_length = min_password_length;
    m_min_password_length_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_min_password_length_Set() const{
    return m_min_password_length_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::is_min_password_length_Valid() const{
    return m_min_password_length_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_lowercase_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_non_alphanumeric_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_numeric_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_uppercase_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_password_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_password_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
