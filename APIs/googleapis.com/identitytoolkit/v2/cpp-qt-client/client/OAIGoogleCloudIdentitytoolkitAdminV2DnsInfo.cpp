/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::~OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo() {}

void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::initializeModel() {

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_custom_domain_state_isSet = false;
    m_custom_domain_state_isValid = false;

    m_domain_verification_request_time_isSet = false;
    m_domain_verification_request_time_isValid = false;

    m_pending_custom_domain_isSet = false;
    m_pending_custom_domain_isValid = false;

    m_use_custom_domain_isSet = false;
    m_use_custom_domain_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::fromJsonObject(QJsonObject json) {

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("customDomain")]);
    m_custom_domain_isSet = !json[QString("customDomain")].isNull() && m_custom_domain_isValid;

    m_custom_domain_state_isValid = ::OpenAPI::fromJsonValue(m_custom_domain_state, json[QString("customDomainState")]);
    m_custom_domain_state_isSet = !json[QString("customDomainState")].isNull() && m_custom_domain_state_isValid;

    m_domain_verification_request_time_isValid = ::OpenAPI::fromJsonValue(m_domain_verification_request_time, json[QString("domainVerificationRequestTime")]);
    m_domain_verification_request_time_isSet = !json[QString("domainVerificationRequestTime")].isNull() && m_domain_verification_request_time_isValid;

    m_pending_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_pending_custom_domain, json[QString("pendingCustomDomain")]);
    m_pending_custom_domain_isSet = !json[QString("pendingCustomDomain")].isNull() && m_pending_custom_domain_isValid;

    m_use_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_use_custom_domain, json[QString("useCustomDomain")]);
    m_use_custom_domain_isSet = !json[QString("useCustomDomain")].isNull() && m_use_custom_domain_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_domain_isSet) {
        obj.insert(QString("customDomain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_custom_domain_state_isSet) {
        obj.insert(QString("customDomainState"), ::OpenAPI::toJsonValue(m_custom_domain_state));
    }
    if (m_domain_verification_request_time_isSet) {
        obj.insert(QString("domainVerificationRequestTime"), ::OpenAPI::toJsonValue(m_domain_verification_request_time));
    }
    if (m_pending_custom_domain_isSet) {
        obj.insert(QString("pendingCustomDomain"), ::OpenAPI::toJsonValue(m_pending_custom_domain));
    }
    if (m_use_custom_domain_isSet) {
        obj.insert(QString("useCustomDomain"), ::OpenAPI::toJsonValue(m_use_custom_domain));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::getCustomDomain() const {
    return m_custom_domain;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::setCustomDomain(const QString &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::getCustomDomainState() const {
    return m_custom_domain_state;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::setCustomDomainState(const QString &custom_domain_state) {
    m_custom_domain_state = custom_domain_state;
    m_custom_domain_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_custom_domain_state_Set() const{
    return m_custom_domain_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_custom_domain_state_Valid() const{
    return m_custom_domain_state_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::getDomainVerificationRequestTime() const {
    return m_domain_verification_request_time;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::setDomainVerificationRequestTime(const QString &domain_verification_request_time) {
    m_domain_verification_request_time = domain_verification_request_time;
    m_domain_verification_request_time_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_domain_verification_request_time_Set() const{
    return m_domain_verification_request_time_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_domain_verification_request_time_Valid() const{
    return m_domain_verification_request_time_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::getPendingCustomDomain() const {
    return m_pending_custom_domain;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::setPendingCustomDomain(const QString &pending_custom_domain) {
    m_pending_custom_domain = pending_custom_domain;
    m_pending_custom_domain_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_pending_custom_domain_Set() const{
    return m_pending_custom_domain_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_pending_custom_domain_Valid() const{
    return m_pending_custom_domain_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::isUseCustomDomain() const {
    return m_use_custom_domain;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::setUseCustomDomain(const bool &use_custom_domain) {
    m_use_custom_domain = use_custom_domain;
    m_use_custom_domain_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_use_custom_domain_Set() const{
    return m_use_custom_domain_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::is_use_custom_domain_Valid() const{
    return m_use_custom_domain_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_verification_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DnsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
