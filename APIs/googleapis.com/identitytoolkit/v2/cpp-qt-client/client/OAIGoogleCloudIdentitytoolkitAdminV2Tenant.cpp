/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2Tenant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2Tenant::OAIGoogleCloudIdentitytoolkitAdminV2Tenant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2Tenant::OAIGoogleCloudIdentitytoolkitAdminV2Tenant() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2Tenant::~OAIGoogleCloudIdentitytoolkitAdminV2Tenant() {}

void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::initializeModel() {

    m_allow_password_signup_isSet = false;
    m_allow_password_signup_isValid = false;

    m_autodelete_anonymous_users_isSet = false;
    m_autodelete_anonymous_users_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_disable_auth_isSet = false;
    m_disable_auth_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_privacy_config_isSet = false;
    m_email_privacy_config_isValid = false;

    m_enable_anonymous_user_isSet = false;
    m_enable_anonymous_user_isValid = false;

    m_enable_email_link_signin_isSet = false;
    m_enable_email_link_signin_isValid = false;

    m_hash_config_isSet = false;
    m_hash_config_isValid = false;

    m_inheritance_isSet = false;
    m_inheritance_isValid = false;

    m_mfa_config_isSet = false;
    m_mfa_config_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_policy_config_isSet = false;
    m_password_policy_config_isValid = false;

    m_recaptcha_config_isSet = false;
    m_recaptcha_config_isValid = false;

    m_sms_region_config_isSet = false;
    m_sms_region_config_isValid = false;

    m_test_phone_numbers_isSet = false;
    m_test_phone_numbers_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::fromJsonObject(QJsonObject json) {

    m_allow_password_signup_isValid = ::OpenAPI::fromJsonValue(m_allow_password_signup, json[QString("allowPasswordSignup")]);
    m_allow_password_signup_isSet = !json[QString("allowPasswordSignup")].isNull() && m_allow_password_signup_isValid;

    m_autodelete_anonymous_users_isValid = ::OpenAPI::fromJsonValue(m_autodelete_anonymous_users, json[QString("autodeleteAnonymousUsers")]);
    m_autodelete_anonymous_users_isSet = !json[QString("autodeleteAnonymousUsers")].isNull() && m_autodelete_anonymous_users_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_disable_auth_isValid = ::OpenAPI::fromJsonValue(m_disable_auth, json[QString("disableAuth")]);
    m_disable_auth_isSet = !json[QString("disableAuth")].isNull() && m_disable_auth_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_privacy_config_isValid = ::OpenAPI::fromJsonValue(m_email_privacy_config, json[QString("emailPrivacyConfig")]);
    m_email_privacy_config_isSet = !json[QString("emailPrivacyConfig")].isNull() && m_email_privacy_config_isValid;

    m_enable_anonymous_user_isValid = ::OpenAPI::fromJsonValue(m_enable_anonymous_user, json[QString("enableAnonymousUser")]);
    m_enable_anonymous_user_isSet = !json[QString("enableAnonymousUser")].isNull() && m_enable_anonymous_user_isValid;

    m_enable_email_link_signin_isValid = ::OpenAPI::fromJsonValue(m_enable_email_link_signin, json[QString("enableEmailLinkSignin")]);
    m_enable_email_link_signin_isSet = !json[QString("enableEmailLinkSignin")].isNull() && m_enable_email_link_signin_isValid;

    m_hash_config_isValid = ::OpenAPI::fromJsonValue(m_hash_config, json[QString("hashConfig")]);
    m_hash_config_isSet = !json[QString("hashConfig")].isNull() && m_hash_config_isValid;

    m_inheritance_isValid = ::OpenAPI::fromJsonValue(m_inheritance, json[QString("inheritance")]);
    m_inheritance_isSet = !json[QString("inheritance")].isNull() && m_inheritance_isValid;

    m_mfa_config_isValid = ::OpenAPI::fromJsonValue(m_mfa_config, json[QString("mfaConfig")]);
    m_mfa_config_isSet = !json[QString("mfaConfig")].isNull() && m_mfa_config_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_policy_config_isValid = ::OpenAPI::fromJsonValue(m_password_policy_config, json[QString("passwordPolicyConfig")]);
    m_password_policy_config_isSet = !json[QString("passwordPolicyConfig")].isNull() && m_password_policy_config_isValid;

    m_recaptcha_config_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_config, json[QString("recaptchaConfig")]);
    m_recaptcha_config_isSet = !json[QString("recaptchaConfig")].isNull() && m_recaptcha_config_isValid;

    m_sms_region_config_isValid = ::OpenAPI::fromJsonValue(m_sms_region_config, json[QString("smsRegionConfig")]);
    m_sms_region_config_isSet = !json[QString("smsRegionConfig")].isNull() && m_sms_region_config_isValid;

    m_test_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_test_phone_numbers, json[QString("testPhoneNumbers")]);
    m_test_phone_numbers_isSet = !json[QString("testPhoneNumbers")].isNull() && m_test_phone_numbers_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Tenant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2Tenant::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_password_signup_isSet) {
        obj.insert(QString("allowPasswordSignup"), ::OpenAPI::toJsonValue(m_allow_password_signup));
    }
    if (m_autodelete_anonymous_users_isSet) {
        obj.insert(QString("autodeleteAnonymousUsers"), ::OpenAPI::toJsonValue(m_autodelete_anonymous_users));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_disable_auth_isSet) {
        obj.insert(QString("disableAuth"), ::OpenAPI::toJsonValue(m_disable_auth));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_privacy_config.isSet()) {
        obj.insert(QString("emailPrivacyConfig"), ::OpenAPI::toJsonValue(m_email_privacy_config));
    }
    if (m_enable_anonymous_user_isSet) {
        obj.insert(QString("enableAnonymousUser"), ::OpenAPI::toJsonValue(m_enable_anonymous_user));
    }
    if (m_enable_email_link_signin_isSet) {
        obj.insert(QString("enableEmailLinkSignin"), ::OpenAPI::toJsonValue(m_enable_email_link_signin));
    }
    if (m_hash_config.isSet()) {
        obj.insert(QString("hashConfig"), ::OpenAPI::toJsonValue(m_hash_config));
    }
    if (m_inheritance.isSet()) {
        obj.insert(QString("inheritance"), ::OpenAPI::toJsonValue(m_inheritance));
    }
    if (m_mfa_config.isSet()) {
        obj.insert(QString("mfaConfig"), ::OpenAPI::toJsonValue(m_mfa_config));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_policy_config.isSet()) {
        obj.insert(QString("passwordPolicyConfig"), ::OpenAPI::toJsonValue(m_password_policy_config));
    }
    if (m_recaptcha_config.isSet()) {
        obj.insert(QString("recaptchaConfig"), ::OpenAPI::toJsonValue(m_recaptcha_config));
    }
    if (m_sms_region_config.isSet()) {
        obj.insert(QString("smsRegionConfig"), ::OpenAPI::toJsonValue(m_sms_region_config));
    }
    if (m_test_phone_numbers.size() > 0) {
        obj.insert(QString("testPhoneNumbers"), ::OpenAPI::toJsonValue(m_test_phone_numbers));
    }
    return obj;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isAllowPasswordSignup() const {
    return m_allow_password_signup;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setAllowPasswordSignup(const bool &allow_password_signup) {
    m_allow_password_signup = allow_password_signup;
    m_allow_password_signup_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_allow_password_signup_Set() const{
    return m_allow_password_signup_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_allow_password_signup_Valid() const{
    return m_allow_password_signup_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isAutodeleteAnonymousUsers() const {
    return m_autodelete_anonymous_users;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setAutodeleteAnonymousUsers(const bool &autodelete_anonymous_users) {
    m_autodelete_anonymous_users = autodelete_anonymous_users;
    m_autodelete_anonymous_users_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_autodelete_anonymous_users_Set() const{
    return m_autodelete_anonymous_users_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_autodelete_anonymous_users_Valid() const{
    return m_autodelete_anonymous_users_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getClient() const {
    return m_client;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setClient(const OAIGoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_client_Set() const{
    return m_client_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_client_Valid() const{
    return m_client_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isDisableAuth() const {
    return m_disable_auth;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setDisableAuth(const bool &disable_auth) {
    m_disable_auth = disable_auth;
    m_disable_auth_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_disable_auth_Set() const{
    return m_disable_auth_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_disable_auth_Valid() const{
    return m_disable_auth_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getDisplayName() const {
    return m_display_name;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getEmailPrivacyConfig() const {
    return m_email_privacy_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setEmailPrivacyConfig(const OAIGoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig &email_privacy_config) {
    m_email_privacy_config = email_privacy_config;
    m_email_privacy_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_email_privacy_config_Set() const{
    return m_email_privacy_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_email_privacy_config_Valid() const{
    return m_email_privacy_config_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isEnableAnonymousUser() const {
    return m_enable_anonymous_user;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setEnableAnonymousUser(const bool &enable_anonymous_user) {
    m_enable_anonymous_user = enable_anonymous_user;
    m_enable_anonymous_user_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_enable_anonymous_user_Set() const{
    return m_enable_anonymous_user_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_enable_anonymous_user_Valid() const{
    return m_enable_anonymous_user_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isEnableEmailLinkSignin() const {
    return m_enable_email_link_signin;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setEnableEmailLinkSignin(const bool &enable_email_link_signin) {
    m_enable_email_link_signin = enable_email_link_signin;
    m_enable_email_link_signin_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_enable_email_link_signin_Set() const{
    return m_enable_email_link_signin_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_enable_email_link_signin_Valid() const{
    return m_enable_email_link_signin_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2HashConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getHashConfig() const {
    return m_hash_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setHashConfig(const OAIGoogleCloudIdentitytoolkitAdminV2HashConfig &hash_config) {
    m_hash_config = hash_config;
    m_hash_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_hash_config_Set() const{
    return m_hash_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_hash_config_Valid() const{
    return m_hash_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2Inheritance OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getInheritance() const {
    return m_inheritance;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setInheritance(const OAIGoogleCloudIdentitytoolkitAdminV2Inheritance &inheritance) {
    m_inheritance = inheritance;
    m_inheritance_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_inheritance_Set() const{
    return m_inheritance_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_inheritance_Valid() const{
    return m_inheritance_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getMfaConfig() const {
    return m_mfa_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setMfaConfig(const OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig &mfa_config) {
    m_mfa_config = mfa_config;
    m_mfa_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_mfa_config_Set() const{
    return m_mfa_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_mfa_config_Valid() const{
    return m_mfa_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2MonitoringConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getMonitoring() const {
    return m_monitoring;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setMonitoring(const OAIGoogleCloudIdentitytoolkitAdminV2MonitoringConfig &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getName() const {
    return m_name;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getPasswordPolicyConfig() const {
    return m_password_policy_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setPasswordPolicyConfig(const OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig &password_policy_config) {
    m_password_policy_config = password_policy_config;
    m_password_policy_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_password_policy_config_Set() const{
    return m_password_policy_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_password_policy_config_Valid() const{
    return m_password_policy_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getRecaptchaConfig() const {
    return m_recaptcha_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setRecaptchaConfig(const OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig &recaptcha_config) {
    m_recaptcha_config = recaptcha_config;
    m_recaptcha_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_recaptcha_config_Set() const{
    return m_recaptcha_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_recaptcha_config_Valid() const{
    return m_recaptcha_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2SmsRegionConfig OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getSmsRegionConfig() const {
    return m_sms_region_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setSmsRegionConfig(const OAIGoogleCloudIdentitytoolkitAdminV2SmsRegionConfig &sms_region_config) {
    m_sms_region_config = sms_region_config;
    m_sms_region_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_sms_region_config_Set() const{
    return m_sms_region_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_sms_region_config_Valid() const{
    return m_sms_region_config_isValid;
}

QMap<QString, QString> OAIGoogleCloudIdentitytoolkitAdminV2Tenant::getTestPhoneNumbers() const {
    return m_test_phone_numbers;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Tenant::setTestPhoneNumbers(const QMap<QString, QString> &test_phone_numbers) {
    m_test_phone_numbers = test_phone_numbers;
    m_test_phone_numbers_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_test_phone_numbers_Set() const{
    return m_test_phone_numbers_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::is_test_phone_numbers_Valid() const{
    return m_test_phone_numbers_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_password_signup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_autodelete_anonymous_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_privacy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_anonymous_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_email_link_signin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inheritance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_region_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Tenant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
