/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::~OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_totp_provider_config_isSet = false;
    m_totp_provider_config_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_totp_provider_config_isValid = ::OpenAPI::fromJsonValue(m_totp_provider_config, json[QString("totpProviderConfig")]);
    m_totp_provider_config_isSet = !json[QString("totpProviderConfig")].isNull() && m_totp_provider_config_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_totp_provider_config.isSet()) {
        obj.insert(QString("totpProviderConfig"), ::OpenAPI::toJsonValue(m_totp_provider_config));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::getState() const {
    return m_state;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::is_state_Valid() const{
    return m_state_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::getTotpProviderConfig() const {
    return m_totp_provider_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::setTotpProviderConfig(const OAIGoogleCloudIdentitytoolkitAdminV2TotpMfaProviderConfig &totp_provider_config) {
    m_totp_provider_config = totp_provider_config;
    m_totp_provider_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::is_totp_provider_config_Set() const{
    return m_totp_provider_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::is_totp_provider_config_Valid() const{
    return m_totp_provider_config_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totp_provider_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
