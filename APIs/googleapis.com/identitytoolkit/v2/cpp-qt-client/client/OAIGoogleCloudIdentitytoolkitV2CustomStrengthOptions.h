/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions.h
 *
 * Custom strength options to enforce on user passwords.
 */

#ifndef OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions_H
#define OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions : public OAIObject {
public:
    OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions();
    OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions(QString json);
    ~OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isContainsLowercaseCharacter() const;
    void setContainsLowercaseCharacter(const bool &contains_lowercase_character);
    bool is_contains_lowercase_character_Set() const;
    bool is_contains_lowercase_character_Valid() const;

    bool isContainsNonAlphanumericCharacter() const;
    void setContainsNonAlphanumericCharacter(const bool &contains_non_alphanumeric_character);
    bool is_contains_non_alphanumeric_character_Set() const;
    bool is_contains_non_alphanumeric_character_Valid() const;

    bool isContainsNumericCharacter() const;
    void setContainsNumericCharacter(const bool &contains_numeric_character);
    bool is_contains_numeric_character_Set() const;
    bool is_contains_numeric_character_Valid() const;

    bool isContainsUppercaseCharacter() const;
    void setContainsUppercaseCharacter(const bool &contains_uppercase_character);
    bool is_contains_uppercase_character_Set() const;
    bool is_contains_uppercase_character_Valid() const;

    qint32 getMaxPasswordLength() const;
    void setMaxPasswordLength(const qint32 &max_password_length);
    bool is_max_password_length_Set() const;
    bool is_max_password_length_Valid() const;

    qint32 getMinPasswordLength() const;
    void setMinPasswordLength(const qint32 &min_password_length);
    bool is_min_password_length_Set() const;
    bool is_min_password_length_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_contains_lowercase_character;
    bool m_contains_lowercase_character_isSet;
    bool m_contains_lowercase_character_isValid;

    bool m_contains_non_alphanumeric_character;
    bool m_contains_non_alphanumeric_character_isSet;
    bool m_contains_non_alphanumeric_character_isValid;

    bool m_contains_numeric_character;
    bool m_contains_numeric_character_isSet;
    bool m_contains_numeric_character_isValid;

    bool m_contains_uppercase_character;
    bool m_contains_uppercase_character_isSet;
    bool m_contains_uppercase_character_isValid;

    qint32 m_max_password_length;
    bool m_max_password_length_isSet;
    bool m_max_password_length_isValid;

    qint32 m_min_password_length;
    bool m_min_password_length_isSet;
    bool m_min_password_length_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions)

#endif // OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions_H
