/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::~OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest() {}

void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::initializeModel() {

    m_id_token_isSet = false;
    m_id_token_isValid = false;

    m_provider_id_isSet = false;
    m_provider_id_isValid = false;

    m_redirect_uri_isSet = false;
    m_redirect_uri_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_token_type_isSet = false;
    m_token_type_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::fromJsonObject(QJsonObject json) {

    m_id_token_isValid = ::OpenAPI::fromJsonValue(m_id_token, json[QString("idToken")]);
    m_id_token_isSet = !json[QString("idToken")].isNull() && m_id_token_isValid;

    m_provider_id_isValid = ::OpenAPI::fromJsonValue(m_provider_id, json[QString("providerId")]);
    m_provider_id_isSet = !json[QString("providerId")].isNull() && m_provider_id_isValid;

    m_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_redirect_uri, json[QString("redirectUri")]);
    m_redirect_uri_isSet = !json[QString("redirectUri")].isNull() && m_redirect_uri_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_token_type_isValid = ::OpenAPI::fromJsonValue(m_token_type, json[QString("tokenType")]);
    m_token_type_isSet = !json[QString("tokenType")].isNull() && m_token_type_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_token_isSet) {
        obj.insert(QString("idToken"), ::OpenAPI::toJsonValue(m_id_token));
    }
    if (m_provider_id_isSet) {
        obj.insert(QString("providerId"), ::OpenAPI::toJsonValue(m_provider_id));
    }
    if (m_redirect_uri_isSet) {
        obj.insert(QString("redirectUri"), ::OpenAPI::toJsonValue(m_redirect_uri));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_token_type_isSet) {
        obj.insert(QString("tokenType"), ::OpenAPI::toJsonValue(m_token_type));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getIdToken() const {
    return m_id_token;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setIdToken(const QString &id_token) {
    m_id_token = id_token;
    m_id_token_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_id_token_Set() const{
    return m_id_token_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_id_token_Valid() const{
    return m_id_token_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getProviderId() const {
    return m_provider_id;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setProviderId(const QString &provider_id) {
    m_provider_id = provider_id;
    m_provider_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_provider_id_Set() const{
    return m_provider_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_provider_id_Valid() const{
    return m_provider_id_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getRedirectUri() const {
    return m_redirect_uri;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setRedirectUri(const QString &redirect_uri) {
    m_redirect_uri = redirect_uri;
    m_redirect_uri_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_redirect_uri_Set() const{
    return m_redirect_uri_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_redirect_uri_Valid() const{
    return m_redirect_uri_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getTenantId() const {
    return m_tenant_id;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getToken() const {
    return m_token;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::getTokenType() const {
    return m_token_type;
}
void OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::setTokenType(const QString &token_type) {
    m_token_type = token_type;
    m_token_type_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_token_type_Set() const{
    return m_token_type_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::is_token_type_Valid() const{
    return m_token_type_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitV2RevokeTokenRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
