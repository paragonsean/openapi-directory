/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2Config::OAIGoogleCloudIdentitytoolkitAdminV2Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2Config::OAIGoogleCloudIdentitytoolkitAdminV2Config() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2Config::~OAIGoogleCloudIdentitytoolkitAdminV2Config() {}

void OAIGoogleCloudIdentitytoolkitAdminV2Config::initializeModel() {

    m_authorized_domains_isSet = false;
    m_authorized_domains_isValid = false;

    m_autodelete_anonymous_users_isSet = false;
    m_autodelete_anonymous_users_isValid = false;

    m_blocking_functions_isSet = false;
    m_blocking_functions_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_email_privacy_config_isSet = false;
    m_email_privacy_config_isValid = false;

    m_mfa_isSet = false;
    m_mfa_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;

    m_multi_tenant_isSet = false;
    m_multi_tenant_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_password_policy_config_isSet = false;
    m_password_policy_config_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_recaptcha_config_isSet = false;
    m_recaptcha_config_isValid = false;

    m_sign_in_isSet = false;
    m_sign_in_isValid = false;

    m_sms_region_config_isSet = false;
    m_sms_region_config_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2Config::fromJsonObject(QJsonObject json) {

    m_authorized_domains_isValid = ::OpenAPI::fromJsonValue(m_authorized_domains, json[QString("authorizedDomains")]);
    m_authorized_domains_isSet = !json[QString("authorizedDomains")].isNull() && m_authorized_domains_isValid;

    m_autodelete_anonymous_users_isValid = ::OpenAPI::fromJsonValue(m_autodelete_anonymous_users, json[QString("autodeleteAnonymousUsers")]);
    m_autodelete_anonymous_users_isSet = !json[QString("autodeleteAnonymousUsers")].isNull() && m_autodelete_anonymous_users_isValid;

    m_blocking_functions_isValid = ::OpenAPI::fromJsonValue(m_blocking_functions, json[QString("blockingFunctions")]);
    m_blocking_functions_isSet = !json[QString("blockingFunctions")].isNull() && m_blocking_functions_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_email_privacy_config_isValid = ::OpenAPI::fromJsonValue(m_email_privacy_config, json[QString("emailPrivacyConfig")]);
    m_email_privacy_config_isSet = !json[QString("emailPrivacyConfig")].isNull() && m_email_privacy_config_isValid;

    m_mfa_isValid = ::OpenAPI::fromJsonValue(m_mfa, json[QString("mfa")]);
    m_mfa_isSet = !json[QString("mfa")].isNull() && m_mfa_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;

    m_multi_tenant_isValid = ::OpenAPI::fromJsonValue(m_multi_tenant, json[QString("multiTenant")]);
    m_multi_tenant_isSet = !json[QString("multiTenant")].isNull() && m_multi_tenant_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("notification")]);
    m_notification_isSet = !json[QString("notification")].isNull() && m_notification_isValid;

    m_password_policy_config_isValid = ::OpenAPI::fromJsonValue(m_password_policy_config, json[QString("passwordPolicyConfig")]);
    m_password_policy_config_isSet = !json[QString("passwordPolicyConfig")].isNull() && m_password_policy_config_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_recaptcha_config_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_config, json[QString("recaptchaConfig")]);
    m_recaptcha_config_isSet = !json[QString("recaptchaConfig")].isNull() && m_recaptcha_config_isValid;

    m_sign_in_isValid = ::OpenAPI::fromJsonValue(m_sign_in, json[QString("signIn")]);
    m_sign_in_isSet = !json[QString("signIn")].isNull() && m_sign_in_isValid;

    m_sms_region_config_isValid = ::OpenAPI::fromJsonValue(m_sms_region_config, json[QString("smsRegionConfig")]);
    m_sms_region_config_isSet = !json[QString("smsRegionConfig")].isNull() && m_sms_region_config_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2Config::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_domains.size() > 0) {
        obj.insert(QString("authorizedDomains"), ::OpenAPI::toJsonValue(m_authorized_domains));
    }
    if (m_autodelete_anonymous_users_isSet) {
        obj.insert(QString("autodeleteAnonymousUsers"), ::OpenAPI::toJsonValue(m_autodelete_anonymous_users));
    }
    if (m_blocking_functions.isSet()) {
        obj.insert(QString("blockingFunctions"), ::OpenAPI::toJsonValue(m_blocking_functions));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_email_privacy_config.isSet()) {
        obj.insert(QString("emailPrivacyConfig"), ::OpenAPI::toJsonValue(m_email_privacy_config));
    }
    if (m_mfa.isSet()) {
        obj.insert(QString("mfa"), ::OpenAPI::toJsonValue(m_mfa));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    if (m_multi_tenant.isSet()) {
        obj.insert(QString("multiTenant"), ::OpenAPI::toJsonValue(m_multi_tenant));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_password_policy_config.isSet()) {
        obj.insert(QString("passwordPolicyConfig"), ::OpenAPI::toJsonValue(m_password_policy_config));
    }
    if (m_quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_recaptcha_config.isSet()) {
        obj.insert(QString("recaptchaConfig"), ::OpenAPI::toJsonValue(m_recaptcha_config));
    }
    if (m_sign_in.isSet()) {
        obj.insert(QString("signIn"), ::OpenAPI::toJsonValue(m_sign_in));
    }
    if (m_sms_region_config.isSet()) {
        obj.insert(QString("smsRegionConfig"), ::OpenAPI::toJsonValue(m_sms_region_config));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    return obj;
}

QList<QString> OAIGoogleCloudIdentitytoolkitAdminV2Config::getAuthorizedDomains() const {
    return m_authorized_domains;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setAuthorizedDomains(const QList<QString> &authorized_domains) {
    m_authorized_domains = authorized_domains;
    m_authorized_domains_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_authorized_domains_Set() const{
    return m_authorized_domains_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_authorized_domains_Valid() const{
    return m_authorized_domains_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::isAutodeleteAnonymousUsers() const {
    return m_autodelete_anonymous_users;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setAutodeleteAnonymousUsers(const bool &autodelete_anonymous_users) {
    m_autodelete_anonymous_users = autodelete_anonymous_users;
    m_autodelete_anonymous_users_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_autodelete_anonymous_users_Set() const{
    return m_autodelete_anonymous_users_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_autodelete_anonymous_users_Valid() const{
    return m_autodelete_anonymous_users_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getBlockingFunctions() const {
    return m_blocking_functions;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setBlockingFunctions(const OAIGoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig &blocking_functions) {
    m_blocking_functions = blocking_functions;
    m_blocking_functions_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_blocking_functions_Set() const{
    return m_blocking_functions_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_blocking_functions_Valid() const{
    return m_blocking_functions_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getClient() const {
    return m_client;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setClient(const OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_client_Set() const{
    return m_client_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_client_Valid() const{
    return m_client_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getEmailPrivacyConfig() const {
    return m_email_privacy_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setEmailPrivacyConfig(const OAIGoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig &email_privacy_config) {
    m_email_privacy_config = email_privacy_config;
    m_email_privacy_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_email_privacy_config_Set() const{
    return m_email_privacy_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_email_privacy_config_Valid() const{
    return m_email_privacy_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getMfa() const {
    return m_mfa;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setMfa(const OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig &mfa) {
    m_mfa = mfa;
    m_mfa_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_mfa_Set() const{
    return m_mfa_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_mfa_Valid() const{
    return m_mfa_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2MonitoringConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getMonitoring() const {
    return m_monitoring;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setMonitoring(const OAIGoogleCloudIdentitytoolkitAdminV2MonitoringConfig &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2MultiTenantConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getMultiTenant() const {
    return m_multi_tenant;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setMultiTenant(const OAIGoogleCloudIdentitytoolkitAdminV2MultiTenantConfig &multi_tenant) {
    m_multi_tenant = multi_tenant;
    m_multi_tenant_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_multi_tenant_Set() const{
    return m_multi_tenant_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_multi_tenant_Valid() const{
    return m_multi_tenant_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Config::getName() const {
    return m_name;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_name_Valid() const{
    return m_name_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2NotificationConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getNotification() const {
    return m_notification;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setNotification(const OAIGoogleCloudIdentitytoolkitAdminV2NotificationConfig &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_notification_Valid() const{
    return m_notification_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getPasswordPolicyConfig() const {
    return m_password_policy_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setPasswordPolicyConfig(const OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig &password_policy_config) {
    m_password_policy_config = password_policy_config;
    m_password_policy_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_password_policy_config_Set() const{
    return m_password_policy_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_password_policy_config_Valid() const{
    return m_password_policy_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2QuotaConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getQuota() const {
    return m_quota;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setQuota(const OAIGoogleCloudIdentitytoolkitAdminV2QuotaConfig &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_quota_Valid() const{
    return m_quota_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getRecaptchaConfig() const {
    return m_recaptcha_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setRecaptchaConfig(const OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig &recaptcha_config) {
    m_recaptcha_config = recaptcha_config;
    m_recaptcha_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_recaptcha_config_Set() const{
    return m_recaptcha_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_recaptcha_config_Valid() const{
    return m_recaptcha_config_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2SignInConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getSignIn() const {
    return m_sign_in;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setSignIn(const OAIGoogleCloudIdentitytoolkitAdminV2SignInConfig &sign_in) {
    m_sign_in = sign_in;
    m_sign_in_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_sign_in_Set() const{
    return m_sign_in_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_sign_in_Valid() const{
    return m_sign_in_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2SmsRegionConfig OAIGoogleCloudIdentitytoolkitAdminV2Config::getSmsRegionConfig() const {
    return m_sms_region_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setSmsRegionConfig(const OAIGoogleCloudIdentitytoolkitAdminV2SmsRegionConfig &sms_region_config) {
    m_sms_region_config = sms_region_config;
    m_sms_region_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_sms_region_config_Set() const{
    return m_sms_region_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_sms_region_config_Valid() const{
    return m_sms_region_config_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Config::getSubtype() const {
    return m_subtype;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Config::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::is_subtype_Valid() const{
    return m_subtype_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_autodelete_anonymous_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocking_functions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_privacy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_tenant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_in.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_region_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
