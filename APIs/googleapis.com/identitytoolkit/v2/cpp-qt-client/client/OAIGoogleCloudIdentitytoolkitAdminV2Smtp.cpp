/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2Smtp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2Smtp::OAIGoogleCloudIdentitytoolkitAdminV2Smtp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2Smtp::OAIGoogleCloudIdentitytoolkitAdminV2Smtp() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2Smtp::~OAIGoogleCloudIdentitytoolkitAdminV2Smtp() {}

void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::initializeModel() {

    m_host_isSet = false;
    m_host_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_security_mode_isSet = false;
    m_security_mode_isValid = false;

    m_sender_email_isSet = false;
    m_sender_email_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::fromJsonObject(QJsonObject json) {

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_security_mode_isValid = ::OpenAPI::fromJsonValue(m_security_mode, json[QString("securityMode")]);
    m_security_mode_isSet = !json[QString("securityMode")].isNull() && m_security_mode_isValid;

    m_sender_email_isValid = ::OpenAPI::fromJsonValue(m_sender_email, json[QString("senderEmail")]);
    m_sender_email_isSet = !json[QString("senderEmail")].isNull() && m_sender_email_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2Smtp::asJsonObject() const {
    QJsonObject obj;
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_security_mode_isSet) {
        obj.insert(QString("securityMode"), ::OpenAPI::toJsonValue(m_security_mode));
    }
    if (m_sender_email_isSet) {
        obj.insert(QString("senderEmail"), ::OpenAPI::toJsonValue(m_sender_email));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getHost() const {
    return m_host;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_host_Set() const{
    return m_host_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getPassword() const {
    return m_password;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_password_Set() const{
    return m_password_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_password_Valid() const{
    return m_password_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getPort() const {
    return m_port;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_port_Set() const{
    return m_port_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getSecurityMode() const {
    return m_security_mode;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setSecurityMode(const QString &security_mode) {
    m_security_mode = security_mode;
    m_security_mode_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_security_mode_Set() const{
    return m_security_mode_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_security_mode_Valid() const{
    return m_security_mode_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getSenderEmail() const {
    return m_sender_email;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setSenderEmail(const QString &sender_email) {
    m_sender_email = sender_email;
    m_sender_email_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_sender_email_Set() const{
    return m_sender_email_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_sender_email_Valid() const{
    return m_sender_email_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Smtp::getUsername() const {
    return m_username;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Smtp::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Smtp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
