/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::~OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::initializeModel() {

    m_force_upgrade_on_signin_isSet = false;
    m_force_upgrade_on_signin_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_password_policy_enforcement_state_isSet = false;
    m_password_policy_enforcement_state_isValid = false;

    m_password_policy_versions_isSet = false;
    m_password_policy_versions_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::fromJsonObject(QJsonObject json) {

    m_force_upgrade_on_signin_isValid = ::OpenAPI::fromJsonValue(m_force_upgrade_on_signin, json[QString("forceUpgradeOnSignin")]);
    m_force_upgrade_on_signin_isSet = !json[QString("forceUpgradeOnSignin")].isNull() && m_force_upgrade_on_signin_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_password_policy_enforcement_state_isValid = ::OpenAPI::fromJsonValue(m_password_policy_enforcement_state, json[QString("passwordPolicyEnforcementState")]);
    m_password_policy_enforcement_state_isSet = !json[QString("passwordPolicyEnforcementState")].isNull() && m_password_policy_enforcement_state_isValid;

    m_password_policy_versions_isValid = ::OpenAPI::fromJsonValue(m_password_policy_versions, json[QString("passwordPolicyVersions")]);
    m_password_policy_versions_isSet = !json[QString("passwordPolicyVersions")].isNull() && m_password_policy_versions_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_force_upgrade_on_signin_isSet) {
        obj.insert(QString("forceUpgradeOnSignin"), ::OpenAPI::toJsonValue(m_force_upgrade_on_signin));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_password_policy_enforcement_state_isSet) {
        obj.insert(QString("passwordPolicyEnforcementState"), ::OpenAPI::toJsonValue(m_password_policy_enforcement_state));
    }
    if (m_password_policy_versions.size() > 0) {
        obj.insert(QString("passwordPolicyVersions"), ::OpenAPI::toJsonValue(m_password_policy_versions));
    }
    return obj;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::isForceUpgradeOnSignin() const {
    return m_force_upgrade_on_signin;
}
void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::setForceUpgradeOnSignin(const bool &force_upgrade_on_signin) {
    m_force_upgrade_on_signin = force_upgrade_on_signin;
    m_force_upgrade_on_signin_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_force_upgrade_on_signin_Set() const{
    return m_force_upgrade_on_signin_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_force_upgrade_on_signin_Valid() const{
    return m_force_upgrade_on_signin_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::setLastUpdateTime(const QString &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::getPasswordPolicyEnforcementState() const {
    return m_password_policy_enforcement_state;
}
void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::setPasswordPolicyEnforcementState(const QString &password_policy_enforcement_state) {
    m_password_policy_enforcement_state = password_policy_enforcement_state;
    m_password_policy_enforcement_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_password_policy_enforcement_state_Set() const{
    return m_password_policy_enforcement_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_password_policy_enforcement_state_Valid() const{
    return m_password_policy_enforcement_state_isValid;
}

QList<OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::getPasswordPolicyVersions() const {
    return m_password_policy_versions;
}
void OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::setPasswordPolicyVersions(const QList<OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> &password_policy_versions) {
    m_password_policy_versions = password_policy_versions;
    m_password_policy_versions_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_password_policy_versions_Set() const{
    return m_password_policy_versions_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::is_password_policy_versions_Valid() const{
    return m_password_policy_versions_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_upgrade_on_signin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy_enforcement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
