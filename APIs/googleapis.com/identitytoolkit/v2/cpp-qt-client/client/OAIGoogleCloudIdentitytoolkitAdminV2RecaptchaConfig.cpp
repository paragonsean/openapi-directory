/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::~OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::initializeModel() {

    m_email_password_enforcement_state_isSet = false;
    m_email_password_enforcement_state_isValid = false;

    m_managed_rules_isSet = false;
    m_managed_rules_isValid = false;

    m_recaptcha_keys_isSet = false;
    m_recaptcha_keys_isValid = false;

    m_use_account_defender_isSet = false;
    m_use_account_defender_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::fromJsonObject(QJsonObject json) {

    m_email_password_enforcement_state_isValid = ::OpenAPI::fromJsonValue(m_email_password_enforcement_state, json[QString("emailPasswordEnforcementState")]);
    m_email_password_enforcement_state_isSet = !json[QString("emailPasswordEnforcementState")].isNull() && m_email_password_enforcement_state_isValid;

    m_managed_rules_isValid = ::OpenAPI::fromJsonValue(m_managed_rules, json[QString("managedRules")]);
    m_managed_rules_isSet = !json[QString("managedRules")].isNull() && m_managed_rules_isValid;

    m_recaptcha_keys_isValid = ::OpenAPI::fromJsonValue(m_recaptcha_keys, json[QString("recaptchaKeys")]);
    m_recaptcha_keys_isSet = !json[QString("recaptchaKeys")].isNull() && m_recaptcha_keys_isValid;

    m_use_account_defender_isValid = ::OpenAPI::fromJsonValue(m_use_account_defender, json[QString("useAccountDefender")]);
    m_use_account_defender_isSet = !json[QString("useAccountDefender")].isNull() && m_use_account_defender_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_email_password_enforcement_state_isSet) {
        obj.insert(QString("emailPasswordEnforcementState"), ::OpenAPI::toJsonValue(m_email_password_enforcement_state));
    }
    if (m_managed_rules.size() > 0) {
        obj.insert(QString("managedRules"), ::OpenAPI::toJsonValue(m_managed_rules));
    }
    if (m_recaptcha_keys.size() > 0) {
        obj.insert(QString("recaptchaKeys"), ::OpenAPI::toJsonValue(m_recaptcha_keys));
    }
    if (m_use_account_defender_isSet) {
        obj.insert(QString("useAccountDefender"), ::OpenAPI::toJsonValue(m_use_account_defender));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::getEmailPasswordEnforcementState() const {
    return m_email_password_enforcement_state;
}
void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::setEmailPasswordEnforcementState(const QString &email_password_enforcement_state) {
    m_email_password_enforcement_state = email_password_enforcement_state;
    m_email_password_enforcement_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_email_password_enforcement_state_Set() const{
    return m_email_password_enforcement_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_email_password_enforcement_state_Valid() const{
    return m_email_password_enforcement_state_isValid;
}

QList<OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::getManagedRules() const {
    return m_managed_rules;
}
void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::setManagedRules(const QList<OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> &managed_rules) {
    m_managed_rules = managed_rules;
    m_managed_rules_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_managed_rules_Set() const{
    return m_managed_rules_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_managed_rules_Valid() const{
    return m_managed_rules_isValid;
}

QList<OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaKey> OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::getRecaptchaKeys() const {
    return m_recaptcha_keys;
}
void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::setRecaptchaKeys(const QList<OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaKey> &recaptcha_keys) {
    m_recaptcha_keys = recaptcha_keys;
    m_recaptcha_keys_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_recaptcha_keys_Set() const{
    return m_recaptcha_keys_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_recaptcha_keys_Valid() const{
    return m_recaptcha_keys_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::isUseAccountDefender() const {
    return m_use_account_defender;
}
void OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::setUseAccountDefender(const bool &use_account_defender) {
    m_use_account_defender = use_account_defender;
    m_use_account_defender_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_use_account_defender_Set() const{
    return m_use_account_defender_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::is_use_account_defender_Valid() const{
    return m_use_account_defender_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_password_enforcement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recaptcha_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_account_defender_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2RecaptchaConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
