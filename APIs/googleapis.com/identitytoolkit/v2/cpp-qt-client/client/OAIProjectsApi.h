/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2ListTenantsResponse.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig.h"
#include "OAIGoogleCloudIdentitytoolkitAdminV2Tenant.h"
#include "OAIGoogleIamV1GetIamPolicyRequest.h"
#include "OAIGoogleIamV1Policy.h"
#include "OAIGoogleIamV1SetIamPolicyRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsRequest.h"
#include "OAIGoogleIamV1TestIamPermissionsResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void identitytoolkit_projects_identityPlatform_initializeAuth(const QString &project, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_admin_v2_tenant OAIGoogleCloudIdentitytoolkitAdminV2Tenant [optional]
    */
    virtual void identitytoolkit_projects_tenants_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2Tenant> &oai_google_cloud_identitytoolkit_admin_v2_tenant = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2Tenant>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  idp_id QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_admin_v2_default_supported_idp_config OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig [optional]
    */
    virtual void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idp_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig> &oai_google_cloud_identitytoolkit_admin_v2_default_supported_idp_config = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_get_iam_policy_request OAIGoogleIamV1GetIamPolicyRequest [optional]
    */
    virtual void identitytoolkit_projects_tenants_getIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1GetIamPolicyRequest> &oai_google_iam_v1_get_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1GetIamPolicyRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  inbound_saml_config_id QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_admin_v2_inbound_saml_config OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig [optional]
    */
    virtual void identitytoolkit_projects_tenants_inboundSamlConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inbound_saml_config_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig> &oai_google_cloud_identitytoolkit_admin_v2_inbound_saml_config = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_inboundSamlConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oauth_idp_config_id QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_admin_v2_o_auth_idp_config OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig [optional]
    */
    virtual void identitytoolkit_projects_tenants_oauthIdpConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_idp_config_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig> &oai_google_cloud_identitytoolkit_admin_v2_o_auth_idp_config = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_oauthIdpConfigs_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_oauthIdpConfigs_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void identitytoolkit_projects_tenants_oauthIdpConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_identitytoolkit_admin_v2_o_auth_idp_config OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig [optional]
    */
    virtual void identitytoolkit_projects_tenants_oauthIdpConfigs_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig> &oai_google_cloud_identitytoolkit_admin_v2_o_auth_idp_config = ::OpenAPI::OptionalParam<OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_set_iam_policy_request OAIGoogleIamV1SetIamPolicyRequest [optional]
    */
    virtual void identitytoolkit_projects_tenants_setIamPolicy(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest> &oai_google_iam_v1_set_iam_policy_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1SetIamPolicyRequest>());

    /**
    * @param[in]  resource QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_iam_v1_test_iam_permissions_request OAIGoogleIamV1TestIamPermissionsRequest [optional]
    */
    virtual void identitytoolkit_projects_tenants_testIamPermissions(const QString &resource, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest> &oai_google_iam_v1_test_iam_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleIamV1TestIamPermissionsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void identitytoolkit_projects_identityPlatform_initializeAuthCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_createCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_getIamPolicyCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_listCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_setIamPolicyCallback(OAIHttpRequestWorker *worker);
    void identitytoolkit_projects_tenants_testIamPermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void identitytoolkit_projects_identityPlatform_initializeAuthSignal(OAIObject summary);
    void identitytoolkit_projects_tenants_createSignal(OAIGoogleCloudIdentitytoolkitAdminV2Tenant summary);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignal(OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig summary);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignal(OAIGoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse summary);
    void identitytoolkit_projects_tenants_getIamPolicySignal(OAIGoogleIamV1Policy summary);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignal(OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig summary);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignal(OAIGoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse summary);
    void identitytoolkit_projects_tenants_listSignal(OAIGoogleCloudIdentitytoolkitAdminV2ListTenantsResponse summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignal(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignal(OAIObject summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignal(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignal(OAIGoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignal(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_setIamPolicySignal(OAIGoogleIamV1Policy summary);
    void identitytoolkit_projects_tenants_testIamPermissionsSignal(OAIGoogleIamV1TestIamPermissionsResponse summary);


    void identitytoolkit_projects_identityPlatform_initializeAuthSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void identitytoolkit_projects_tenants_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2Tenant summary);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig summary);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse summary);
    void identitytoolkit_projects_tenants_getIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig summary);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse summary);
    void identitytoolkit_projects_tenants_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2ListTenantsResponse summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse summary);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary);
    void identitytoolkit_projects_tenants_setIamPolicySignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1Policy summary);
    void identitytoolkit_projects_tenants_testIamPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleIamV1TestIamPermissionsResponse summary);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_identityPlatform_initializeAuthSignalError() instead")
    void identitytoolkit_projects_identityPlatform_initializeAuthSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_identityPlatform_initializeAuthSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_createSignalError() instead")
    void identitytoolkit_projects_tenants_createSignalE(OAIGoogleCloudIdentitytoolkitAdminV2Tenant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_createSignalError(OAIGoogleCloudIdentitytoolkitAdminV2Tenant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalError() instead")
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalE(OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalError(OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalError() instead")
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalE(OAIGoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalError(OAIGoogleCloudIdentitytoolkitAdminV2ListDefaultSupportedIdpConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_getIamPolicySignalError() instead")
    void identitytoolkit_projects_tenants_getIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_getIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalError() instead")
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalE(OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalError(OAIGoogleCloudIdentitytoolkitAdminV2InboundSamlConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalError() instead")
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalE(OAIGoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalError(OAIGoogleCloudIdentitytoolkitAdminV2ListInboundSamlConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_listSignalError() instead")
    void identitytoolkit_projects_tenants_listSignalE(OAIGoogleCloudIdentitytoolkitAdminV2ListTenantsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_listSignalError(OAIGoogleCloudIdentitytoolkitAdminV2ListTenantsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalError() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalE(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalError(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalError() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalError() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalE(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalError(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalError() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalE(OAIGoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalError(OAIGoogleCloudIdentitytoolkitAdminV2ListOAuthIdpConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalError() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalE(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalError(OAIGoogleCloudIdentitytoolkitAdminV2OAuthIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_setIamPolicySignalError() instead")
    void identitytoolkit_projects_tenants_setIamPolicySignalE(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_setIamPolicySignalError(OAIGoogleIamV1Policy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_testIamPermissionsSignalError() instead")
    void identitytoolkit_projects_tenants_testIamPermissionsSignalE(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_testIamPermissionsSignalError(OAIGoogleIamV1TestIamPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_identityPlatform_initializeAuthSignalErrorFull() instead")
    void identitytoolkit_projects_identityPlatform_initializeAuthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_identityPlatform_initializeAuthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_createSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_defaultSupportedIdpConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_getIamPolicySignalErrorFull() instead")
    void identitytoolkit_projects_tenants_getIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_getIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_inboundSamlConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_listSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_oauthIdpConfigs_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_setIamPolicySignalErrorFull() instead")
    void identitytoolkit_projects_tenants_setIamPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_setIamPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use identitytoolkit_projects_tenants_testIamPermissionsSignalErrorFull() instead")
    void identitytoolkit_projects_tenants_testIamPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void identitytoolkit_projects_tenants_testIamPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
