/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::~OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::initializeModel() {

    m_idp_certificates_isSet = false;
    m_idp_certificates_isValid = false;

    m_idp_entity_id_isSet = false;
    m_idp_entity_id_isValid = false;

    m_sign_request_isSet = false;
    m_sign_request_isValid = false;

    m_sso_url_isSet = false;
    m_sso_url_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::fromJsonObject(QJsonObject json) {

    m_idp_certificates_isValid = ::OpenAPI::fromJsonValue(m_idp_certificates, json[QString("idpCertificates")]);
    m_idp_certificates_isSet = !json[QString("idpCertificates")].isNull() && m_idp_certificates_isValid;

    m_idp_entity_id_isValid = ::OpenAPI::fromJsonValue(m_idp_entity_id, json[QString("idpEntityId")]);
    m_idp_entity_id_isSet = !json[QString("idpEntityId")].isNull() && m_idp_entity_id_isValid;

    m_sign_request_isValid = ::OpenAPI::fromJsonValue(m_sign_request, json[QString("signRequest")]);
    m_sign_request_isSet = !json[QString("signRequest")].isNull() && m_sign_request_isValid;

    m_sso_url_isValid = ::OpenAPI::fromJsonValue(m_sso_url, json[QString("ssoUrl")]);
    m_sso_url_isSet = !json[QString("ssoUrl")].isNull() && m_sso_url_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_idp_certificates.size() > 0) {
        obj.insert(QString("idpCertificates"), ::OpenAPI::toJsonValue(m_idp_certificates));
    }
    if (m_idp_entity_id_isSet) {
        obj.insert(QString("idpEntityId"), ::OpenAPI::toJsonValue(m_idp_entity_id));
    }
    if (m_sign_request_isSet) {
        obj.insert(QString("signRequest"), ::OpenAPI::toJsonValue(m_sign_request));
    }
    if (m_sso_url_isSet) {
        obj.insert(QString("ssoUrl"), ::OpenAPI::toJsonValue(m_sso_url));
    }
    return obj;
}

QList<OAIGoogleCloudIdentitytoolkitAdminV2IdpCertificate> OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::getIdpCertificates() const {
    return m_idp_certificates;
}
void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::setIdpCertificates(const QList<OAIGoogleCloudIdentitytoolkitAdminV2IdpCertificate> &idp_certificates) {
    m_idp_certificates = idp_certificates;
    m_idp_certificates_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_idp_certificates_Set() const{
    return m_idp_certificates_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_idp_certificates_Valid() const{
    return m_idp_certificates_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::getIdpEntityId() const {
    return m_idp_entity_id;
}
void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::setIdpEntityId(const QString &idp_entity_id) {
    m_idp_entity_id = idp_entity_id;
    m_idp_entity_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_idp_entity_id_Set() const{
    return m_idp_entity_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_idp_entity_id_Valid() const{
    return m_idp_entity_id_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::isSignRequest() const {
    return m_sign_request;
}
void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::setSignRequest(const bool &sign_request) {
    m_sign_request = sign_request;
    m_sign_request_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_sign_request_Set() const{
    return m_sign_request_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_sign_request_Valid() const{
    return m_sign_request_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::getSsoUrl() const {
    return m_sso_url;
}
void OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::setSsoUrl(const QString &sso_url) {
    m_sso_url = sso_url;
    m_sso_url_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_sso_url_Set() const{
    return m_sso_url_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::is_sso_url_Valid() const{
    return m_sso_url_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idp_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sso_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2IdpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
