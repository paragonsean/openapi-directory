/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::~OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest() {}

void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::initializeModel() {

    m_mfa_enrollment_id_isSet = false;
    m_mfa_enrollment_id_isValid = false;

    m_mfa_pending_credential_isSet = false;
    m_mfa_pending_credential_isValid = false;

    m_phone_sign_in_info_isSet = false;
    m_phone_sign_in_info_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::fromJsonObject(QJsonObject json) {

    m_mfa_enrollment_id_isValid = ::OpenAPI::fromJsonValue(m_mfa_enrollment_id, json[QString("mfaEnrollmentId")]);
    m_mfa_enrollment_id_isSet = !json[QString("mfaEnrollmentId")].isNull() && m_mfa_enrollment_id_isValid;

    m_mfa_pending_credential_isValid = ::OpenAPI::fromJsonValue(m_mfa_pending_credential, json[QString("mfaPendingCredential")]);
    m_mfa_pending_credential_isSet = !json[QString("mfaPendingCredential")].isNull() && m_mfa_pending_credential_isValid;

    m_phone_sign_in_info_isValid = ::OpenAPI::fromJsonValue(m_phone_sign_in_info, json[QString("phoneSignInInfo")]);
    m_phone_sign_in_info_isSet = !json[QString("phoneSignInInfo")].isNull() && m_phone_sign_in_info_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_mfa_enrollment_id_isSet) {
        obj.insert(QString("mfaEnrollmentId"), ::OpenAPI::toJsonValue(m_mfa_enrollment_id));
    }
    if (m_mfa_pending_credential_isSet) {
        obj.insert(QString("mfaPendingCredential"), ::OpenAPI::toJsonValue(m_mfa_pending_credential));
    }
    if (m_phone_sign_in_info.isSet()) {
        obj.insert(QString("phoneSignInInfo"), ::OpenAPI::toJsonValue(m_phone_sign_in_info));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::getMfaEnrollmentId() const {
    return m_mfa_enrollment_id;
}
void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::setMfaEnrollmentId(const QString &mfa_enrollment_id) {
    m_mfa_enrollment_id = mfa_enrollment_id;
    m_mfa_enrollment_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_mfa_enrollment_id_Set() const{
    return m_mfa_enrollment_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_mfa_enrollment_id_Valid() const{
    return m_mfa_enrollment_id_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::getMfaPendingCredential() const {
    return m_mfa_pending_credential;
}
void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::setMfaPendingCredential(const QString &mfa_pending_credential) {
    m_mfa_pending_credential = mfa_pending_credential;
    m_mfa_pending_credential_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_mfa_pending_credential_Set() const{
    return m_mfa_pending_credential_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_mfa_pending_credential_Valid() const{
    return m_mfa_pending_credential_isValid;
}

OAIGoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::getPhoneSignInInfo() const {
    return m_phone_sign_in_info;
}
void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::setPhoneSignInInfo(const OAIGoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo &phone_sign_in_info) {
    m_phone_sign_in_info = phone_sign_in_info;
    m_phone_sign_in_info_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_phone_sign_in_info_Set() const{
    return m_phone_sign_in_info_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_phone_sign_in_info_Valid() const{
    return m_phone_sign_in_info_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::getTenantId() const {
    return m_tenant_id;
}
void OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mfa_enrollment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_pending_credential_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_sign_in_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitV2StartMfaSignInRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
