/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2Trigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2Trigger::OAIGoogleCloudIdentitytoolkitAdminV2Trigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2Trigger::OAIGoogleCloudIdentitytoolkitAdminV2Trigger() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2Trigger::~OAIGoogleCloudIdentitytoolkitAdminV2Trigger() {}

void OAIGoogleCloudIdentitytoolkitAdminV2Trigger::initializeModel() {

    m_function_uri_isSet = false;
    m_function_uri_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2Trigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2Trigger::fromJsonObject(QJsonObject json) {

    m_function_uri_isValid = ::OpenAPI::fromJsonValue(m_function_uri, json[QString("functionUri")]);
    m_function_uri_isSet = !json[QString("functionUri")].isNull() && m_function_uri_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Trigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2Trigger::asJsonObject() const {
    QJsonObject obj;
    if (m_function_uri_isSet) {
        obj.insert(QString("functionUri"), ::OpenAPI::toJsonValue(m_function_uri));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Trigger::getFunctionUri() const {
    return m_function_uri;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Trigger::setFunctionUri(const QString &function_uri) {
    m_function_uri = function_uri;
    m_function_uri_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::is_function_uri_Set() const{
    return m_function_uri_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::is_function_uri_Valid() const{
    return m_function_uri_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2Trigger::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleCloudIdentitytoolkitAdminV2Trigger::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_function_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2Trigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
