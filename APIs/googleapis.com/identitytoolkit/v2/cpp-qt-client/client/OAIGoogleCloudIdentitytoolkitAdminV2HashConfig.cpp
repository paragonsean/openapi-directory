/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2HashConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::OAIGoogleCloudIdentitytoolkitAdminV2HashConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::OAIGoogleCloudIdentitytoolkitAdminV2HashConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::~OAIGoogleCloudIdentitytoolkitAdminV2HashConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_memory_cost_isSet = false;
    m_memory_cost_isValid = false;

    m_rounds_isSet = false;
    m_rounds_isValid = false;

    m_salt_separator_isSet = false;
    m_salt_separator_isValid = false;

    m_signer_key_isSet = false;
    m_signer_key_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_memory_cost_isValid = ::OpenAPI::fromJsonValue(m_memory_cost, json[QString("memoryCost")]);
    m_memory_cost_isSet = !json[QString("memoryCost")].isNull() && m_memory_cost_isValid;

    m_rounds_isValid = ::OpenAPI::fromJsonValue(m_rounds, json[QString("rounds")]);
    m_rounds_isSet = !json[QString("rounds")].isNull() && m_rounds_isValid;

    m_salt_separator_isValid = ::OpenAPI::fromJsonValue(m_salt_separator, json[QString("saltSeparator")]);
    m_salt_separator_isSet = !json[QString("saltSeparator")].isNull() && m_salt_separator_isValid;

    m_signer_key_isValid = ::OpenAPI::fromJsonValue(m_signer_key, json[QString("signerKey")]);
    m_signer_key_isSet = !json[QString("signerKey")].isNull() && m_signer_key_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_memory_cost_isSet) {
        obj.insert(QString("memoryCost"), ::OpenAPI::toJsonValue(m_memory_cost));
    }
    if (m_rounds_isSet) {
        obj.insert(QString("rounds"), ::OpenAPI::toJsonValue(m_rounds));
    }
    if (m_salt_separator_isSet) {
        obj.insert(QString("saltSeparator"), ::OpenAPI::toJsonValue(m_salt_separator));
    }
    if (m_signer_key_isSet) {
        obj.insert(QString("signerKey"), ::OpenAPI::toJsonValue(m_signer_key));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::getAlgorithm() const {
    return m_algorithm;
}
void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::getMemoryCost() const {
    return m_memory_cost;
}
void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::setMemoryCost(const qint32 &memory_cost) {
    m_memory_cost = memory_cost;
    m_memory_cost_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_memory_cost_Set() const{
    return m_memory_cost_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_memory_cost_Valid() const{
    return m_memory_cost_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::getRounds() const {
    return m_rounds;
}
void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::setRounds(const qint32 &rounds) {
    m_rounds = rounds;
    m_rounds_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_rounds_Set() const{
    return m_rounds_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_rounds_Valid() const{
    return m_rounds_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::getSaltSeparator() const {
    return m_salt_separator;
}
void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::setSaltSeparator(const QString &salt_separator) {
    m_salt_separator = salt_separator;
    m_salt_separator_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_salt_separator_Set() const{
    return m_salt_separator_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_salt_separator_Valid() const{
    return m_salt_separator_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::getSignerKey() const {
    return m_signer_key;
}
void OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::setSignerKey(const QString &signer_key) {
    m_signer_key = signer_key;
    m_signer_key_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_signer_key_Set() const{
    return m_signer_key_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::is_signer_key_Valid() const{
    return m_signer_key_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rounds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_salt_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signer_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2HashConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
