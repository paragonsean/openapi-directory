/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitV2PasswordPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::OAIGoogleCloudIdentitytoolkitV2PasswordPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::OAIGoogleCloudIdentitytoolkitV2PasswordPolicy() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::~OAIGoogleCloudIdentitytoolkitV2PasswordPolicy() {}

void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::initializeModel() {

    m_allowed_non_alphanumeric_characters_isSet = false;
    m_allowed_non_alphanumeric_characters_isValid = false;

    m_custom_strength_options_isSet = false;
    m_custom_strength_options_isValid = false;

    m_enforcement_state_isSet = false;
    m_enforcement_state_isValid = false;

    m_force_upgrade_on_signin_isSet = false;
    m_force_upgrade_on_signin_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::fromJsonObject(QJsonObject json) {

    m_allowed_non_alphanumeric_characters_isValid = ::OpenAPI::fromJsonValue(m_allowed_non_alphanumeric_characters, json[QString("allowedNonAlphanumericCharacters")]);
    m_allowed_non_alphanumeric_characters_isSet = !json[QString("allowedNonAlphanumericCharacters")].isNull() && m_allowed_non_alphanumeric_characters_isValid;

    m_custom_strength_options_isValid = ::OpenAPI::fromJsonValue(m_custom_strength_options, json[QString("customStrengthOptions")]);
    m_custom_strength_options_isSet = !json[QString("customStrengthOptions")].isNull() && m_custom_strength_options_isValid;

    m_enforcement_state_isValid = ::OpenAPI::fromJsonValue(m_enforcement_state, json[QString("enforcementState")]);
    m_enforcement_state_isSet = !json[QString("enforcementState")].isNull() && m_enforcement_state_isValid;

    m_force_upgrade_on_signin_isValid = ::OpenAPI::fromJsonValue(m_force_upgrade_on_signin, json[QString("forceUpgradeOnSignin")]);
    m_force_upgrade_on_signin_isSet = !json[QString("forceUpgradeOnSignin")].isNull() && m_force_upgrade_on_signin_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("schemaVersion")]);
    m_schema_version_isSet = !json[QString("schemaVersion")].isNull() && m_schema_version_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_non_alphanumeric_characters.size() > 0) {
        obj.insert(QString("allowedNonAlphanumericCharacters"), ::OpenAPI::toJsonValue(m_allowed_non_alphanumeric_characters));
    }
    if (m_custom_strength_options.isSet()) {
        obj.insert(QString("customStrengthOptions"), ::OpenAPI::toJsonValue(m_custom_strength_options));
    }
    if (m_enforcement_state_isSet) {
        obj.insert(QString("enforcementState"), ::OpenAPI::toJsonValue(m_enforcement_state));
    }
    if (m_force_upgrade_on_signin_isSet) {
        obj.insert(QString("forceUpgradeOnSignin"), ::OpenAPI::toJsonValue(m_force_upgrade_on_signin));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("schemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    return obj;
}

QList<QString> OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::getAllowedNonAlphanumericCharacters() const {
    return m_allowed_non_alphanumeric_characters;
}
void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::setAllowedNonAlphanumericCharacters(const QList<QString> &allowed_non_alphanumeric_characters) {
    m_allowed_non_alphanumeric_characters = allowed_non_alphanumeric_characters;
    m_allowed_non_alphanumeric_characters_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_allowed_non_alphanumeric_characters_Set() const{
    return m_allowed_non_alphanumeric_characters_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_allowed_non_alphanumeric_characters_Valid() const{
    return m_allowed_non_alphanumeric_characters_isValid;
}

OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::getCustomStrengthOptions() const {
    return m_custom_strength_options;
}
void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::setCustomStrengthOptions(const OAIGoogleCloudIdentitytoolkitV2CustomStrengthOptions &custom_strength_options) {
    m_custom_strength_options = custom_strength_options;
    m_custom_strength_options_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_custom_strength_options_Set() const{
    return m_custom_strength_options_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_custom_strength_options_Valid() const{
    return m_custom_strength_options_isValid;
}

QString OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::getEnforcementState() const {
    return m_enforcement_state;
}
void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::setEnforcementState(const QString &enforcement_state) {
    m_enforcement_state = enforcement_state;
    m_enforcement_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_enforcement_state_Set() const{
    return m_enforcement_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_enforcement_state_Valid() const{
    return m_enforcement_state_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::isForceUpgradeOnSignin() const {
    return m_force_upgrade_on_signin;
}
void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::setForceUpgradeOnSignin(const bool &force_upgrade_on_signin) {
    m_force_upgrade_on_signin = force_upgrade_on_signin;
    m_force_upgrade_on_signin_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_force_upgrade_on_signin_Set() const{
    return m_force_upgrade_on_signin_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_force_upgrade_on_signin_Valid() const{
    return m_force_upgrade_on_signin_isValid;
}

qint32 OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::getSchemaVersion() const {
    return m_schema_version;
}
void OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::setSchemaVersion(const qint32 &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_non_alphanumeric_characters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_strength_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforcement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_upgrade_on_signin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitV2PasswordPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
