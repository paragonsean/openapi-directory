/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::~OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::initializeModel() {

    m_enabled_providers_isSet = false;
    m_enabled_providers_isValid = false;

    m_provider_configs_isSet = false;
    m_provider_configs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::fromJsonObject(QJsonObject json) {

    m_enabled_providers_isValid = ::OpenAPI::fromJsonValue(m_enabled_providers, json[QString("enabledProviders")]);
    m_enabled_providers_isSet = !json[QString("enabledProviders")].isNull() && m_enabled_providers_isValid;

    m_provider_configs_isValid = ::OpenAPI::fromJsonValue(m_provider_configs, json[QString("providerConfigs")]);
    m_provider_configs_isSet = !json[QString("providerConfigs")].isNull() && m_provider_configs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_providers.size() > 0) {
        obj.insert(QString("enabledProviders"), ::OpenAPI::toJsonValue(m_enabled_providers));
    }
    if (m_provider_configs.size() > 0) {
        obj.insert(QString("providerConfigs"), ::OpenAPI::toJsonValue(m_provider_configs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<QString> OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::getEnabledProviders() const {
    return m_enabled_providers;
}
void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::setEnabledProviders(const QList<QString> &enabled_providers) {
    m_enabled_providers = enabled_providers;
    m_enabled_providers_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_enabled_providers_Set() const{
    return m_enabled_providers_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_enabled_providers_Valid() const{
    return m_enabled_providers_isValid;
}

QList<OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig> OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::getProviderConfigs() const {
    return m_provider_configs;
}
void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::setProviderConfigs(const QList<OAIGoogleCloudIdentitytoolkitAdminV2ProviderConfig> &provider_configs) {
    m_provider_configs = provider_configs;
    m_provider_configs_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_provider_configs_Set() const{
    return m_provider_configs_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_provider_configs_Valid() const{
    return m_provider_configs_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::getState() const {
    return m_state;
}
void OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
