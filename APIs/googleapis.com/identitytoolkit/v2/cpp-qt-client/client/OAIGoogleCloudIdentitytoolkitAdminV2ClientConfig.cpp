/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::~OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_firebase_subdomain_isSet = false;
    m_firebase_subdomain_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_firebase_subdomain_isValid = ::OpenAPI::fromJsonValue(m_firebase_subdomain, json[QString("firebaseSubdomain")]);
    m_firebase_subdomain_isSet = !json[QString("firebaseSubdomain")].isNull() && m_firebase_subdomain_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_firebase_subdomain_isSet) {
        obj.insert(QString("firebaseSubdomain"), ::OpenAPI::toJsonValue(m_firebase_subdomain));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::getApiKey() const {
    return m_api_key;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::getFirebaseSubdomain() const {
    return m_firebase_subdomain;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::setFirebaseSubdomain(const QString &firebase_subdomain) {
    m_firebase_subdomain = firebase_subdomain;
    m_firebase_subdomain_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_firebase_subdomain_Set() const{
    return m_firebase_subdomain_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_firebase_subdomain_Valid() const{
    return m_firebase_subdomain_isValid;
}

OAIGoogleCloudIdentitytoolkitAdminV2Permissions OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::getPermissions() const {
    return m_permissions;
}
void OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::setPermissions(const OAIGoogleCloudIdentitytoolkitAdminV2Permissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_subdomain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2ClientConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
