/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig() {
    this->initializeModel();
}

OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::~OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig() {}

void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::initializeModel() {

    m_apple_sign_in_config_isSet = false;
    m_apple_sign_in_config_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::fromJsonObject(QJsonObject json) {

    m_apple_sign_in_config_isValid = ::OpenAPI::fromJsonValue(m_apple_sign_in_config, json[QString("appleSignInConfig")]);
    m_apple_sign_in_config_isSet = !json[QString("appleSignInConfig")].isNull() && m_apple_sign_in_config_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_apple_sign_in_config.isSet()) {
        obj.insert(QString("appleSignInConfig"), ::OpenAPI::toJsonValue(m_apple_sign_in_config));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIGoogleCloudIdentitytoolkitAdminV2AppleSignInConfig OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::getAppleSignInConfig() const {
    return m_apple_sign_in_config;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::setAppleSignInConfig(const OAIGoogleCloudIdentitytoolkitAdminV2AppleSignInConfig &apple_sign_in_config) {
    m_apple_sign_in_config = apple_sign_in_config;
    m_apple_sign_in_config_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_apple_sign_in_config_Set() const{
    return m_apple_sign_in_config_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_apple_sign_in_config_Valid() const{
    return m_apple_sign_in_config_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::getClientId() const {
    return m_client_id;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::isEnabled() const {
    return m_enabled;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::getName() const {
    return m_name;
}
void OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apple_sign_in_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudIdentitytoolkitAdminV2DefaultSupportedIdpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
