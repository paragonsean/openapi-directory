# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudIdentitytoolkitV2RevokeTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_token: str=None, provider_id: str=None, redirect_uri: str=None, tenant_id: str=None, token: str=None, token_type: str=None):
        """GoogleCloudIdentitytoolkitV2RevokeTokenRequest - a model defined in OpenAPI

        :param id_token: The id_token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :param provider_id: The provider_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :param redirect_uri: The redirect_uri of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :param tenant_id: The tenant_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :param token: The token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :param token_type: The token_type of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        """
        self.openapi_types = {
            'id_token': str,
            'provider_id': str,
            'redirect_uri': str,
            'tenant_id': str,
            'token': str,
            'token_type': str
        }

        self.attribute_map = {
            'id_token': 'idToken',
            'provider_id': 'providerId',
            'redirect_uri': 'redirectUri',
            'tenant_id': 'tenantId',
            'token': 'token',
            'token_type': 'tokenType'
        }

        self._id_token = id_token
        self._provider_id = provider_id
        self._redirect_uri = redirect_uri
        self._tenant_id = tenant_id
        self._token = token
        self._token_type = token_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitV2RevokeTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitV2RevokeTokenRequest of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_token(self):
        """Gets the id_token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. A valid Identity Platform ID token to link the account. If there was a successful token revocation request on the account and no tokens are generated after the revocation, the duplicate requests will be ignored and returned immediately.

        :return: The id_token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._id_token

    @id_token.setter
    def id_token(self, id_token):
        """Sets the id_token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. A valid Identity Platform ID token to link the account. If there was a successful token revocation request on the account and no tokens are generated after the revocation, the duplicate requests will be ignored and returned immediately.

        :param id_token: The id_token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type id_token: str
        """

        self._id_token = id_token

    @property
    def provider_id(self):
        """Gets the provider_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The idp provider for the token. Currently only supports Apple Idp. The format should be \"apple.com\".

        :return: The provider_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The idp provider for the token. Currently only supports Apple Idp. The format should be \"apple.com\".

        :param provider_id: The provider_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type provider_id: str
        """

        self._provider_id = provider_id

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        The redirect URI provided in the initial authorization request made by the client to the IDP. The URI must use the HTTPS protocol, include a domain name, and can't contain an IP address or localhost. Required if token_type is CODE.

        :return: The redirect_uri of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        The redirect URI provided in the initial authorization request made by the client to the IDP. The URI must use the HTTPS protocol, include a domain name, and can't contain an IP address or localhost. Required if token_type is CODE.

        :param redirect_uri: The redirect_uri of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type redirect_uri: str
        """

        self._redirect_uri = redirect_uri

    @property
    def tenant_id(self):
        """Gets the tenant_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.

        :return: The tenant_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.

        :param tenant_id: The tenant_id of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def token(self):
        """Gets the token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The token to be revoked. If an authorization_code is passed in, the API will first exchange the code for access token and then revoke the token exchanged.

        :return: The token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The token to be revoked. If an authorization_code is passed in, the API will first exchange the code for access token and then revoke the token exchanged.

        :param token: The token of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type token: str
        """

        self._token = token

    @property
    def token_type(self):
        """Gets the token_type of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The type of the token to be revoked.

        :return: The token_type of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :rtype: str
        """
        return self._token_type

    @token_type.setter
    def token_type(self, token_type):
        """Sets the token_type of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.

        Required. The type of the token to be revoked.

        :param token_type: The token_type of this GoogleCloudIdentitytoolkitV2RevokeTokenRequest.
        :type token_type: str
        """
        allowed_values = ["TOKEN_TYPE_UNSPECIFIED", "REFRESH_TOKEN", "ACCESS_TOKEN", "CODE"]  # noqa: E501
        if token_type not in allowed_values:
            raise ValueError(
                "Invalid value for `token_type` ({0}), must be one of {1}"
                .format(token_type, allowed_values)
            )

        self._token_type = token_type
