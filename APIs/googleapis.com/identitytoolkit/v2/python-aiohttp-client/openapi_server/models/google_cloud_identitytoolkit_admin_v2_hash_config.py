# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2HashConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, memory_cost: int=None, rounds: int=None, salt_separator: str=None, signer_key: str=None):
        """GoogleCloudIdentitytoolkitAdminV2HashConfig - a model defined in OpenAPI

        :param algorithm: The algorithm of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :param memory_cost: The memory_cost of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :param rounds: The rounds of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :param salt_separator: The salt_separator of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :param signer_key: The signer_key of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        """
        self.openapi_types = {
            'algorithm': str,
            'memory_cost': int,
            'rounds': int,
            'salt_separator': str,
            'signer_key': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'memory_cost': 'memoryCost',
            'rounds': 'rounds',
            'salt_separator': 'saltSeparator',
            'signer_key': 'signerKey'
        }

        self._algorithm = algorithm
        self._memory_cost = memory_cost
        self._rounds = rounds
        self._salt_separator = salt_separator
        self._signer_key = signer_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2HashConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2HashConfig of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Different password hash algorithms used in Identity Toolkit.

        :return: The algorithm of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Different password hash algorithms used in Identity Toolkit.

        :param algorithm: The algorithm of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :type algorithm: str
        """
        allowed_values = ["HASH_ALGORITHM_UNSPECIFIED", "HMAC_SHA256", "HMAC_SHA1", "HMAC_MD5", "SCRYPT", "PBKDF_SHA1", "MD5", "HMAC_SHA512", "SHA1", "BCRYPT", "PBKDF2_SHA256", "SHA256", "SHA512", "STANDARD_SCRYPT"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def memory_cost(self):
        """Gets the memory_cost of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.

        :return: The memory_cost of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :rtype: int
        """
        return self._memory_cost

    @memory_cost.setter
    def memory_cost(self, memory_cost):
        """Sets the memory_cost of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.

        :param memory_cost: The memory_cost of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :type memory_cost: int
        """

        self._memory_cost = memory_cost

    @property
    def rounds(self):
        """Gets the rounds of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.

        :return: The rounds of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :rtype: int
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.

        :param rounds: The rounds of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :type rounds: int
        """

        self._rounds = rounds

    @property
    def salt_separator(self):
        """Gets the salt_separator of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Non-printable character to be inserted between the salt and plain text password in base64.

        :return: The salt_separator of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :rtype: str
        """
        return self._salt_separator

    @salt_separator.setter
    def salt_separator(self, salt_separator):
        """Sets the salt_separator of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Non-printable character to be inserted between the salt and plain text password in base64.

        :param salt_separator: The salt_separator of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :type salt_separator: str
        """

        self._salt_separator = salt_separator

    @property
    def signer_key(self):
        """Gets the signer_key of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Signer key in base64.

        :return: The signer_key of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :rtype: str
        """
        return self._signer_key

    @signer_key.setter
    def signer_key(self, signer_key):
        """Sets the signer_key of this GoogleCloudIdentitytoolkitAdminV2HashConfig.

        Output only. Signer key in base64.

        :param signer_key: The signer_key of this GoogleCloudIdentitytoolkitAdminV2HashConfig.
        :type signer_key: str
        """

        self._signer_key = signer_key
