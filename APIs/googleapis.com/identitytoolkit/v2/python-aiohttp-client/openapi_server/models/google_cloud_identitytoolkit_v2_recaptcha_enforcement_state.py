# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforcement_state: str=None, provider: str=None):
        """GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState - a model defined in OpenAPI

        :param enforcement_state: The enforcement_state of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        :param provider: The provider of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        """
        self.openapi_types = {
            'enforcement_state': str,
            'provider': str
        }

        self.attribute_map = {
            'enforcement_state': 'enforcementState',
            'provider': 'provider'
        }

        self._enforcement_state = enforcement_state
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforcement_state(self):
        """Gets the enforcement_state of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.

        The reCAPTCHA enforcement state for the provider.

        :return: The enforcement_state of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        :rtype: str
        """
        return self._enforcement_state

    @enforcement_state.setter
    def enforcement_state(self, enforcement_state):
        """Sets the enforcement_state of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.

        The reCAPTCHA enforcement state for the provider.

        :param enforcement_state: The enforcement_state of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        :type enforcement_state: str
        """
        allowed_values = ["ENFORCEMENT_STATE_UNSPECIFIED", "false", "AUDIT", "ENFORCE"]  # noqa: E501
        if enforcement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enforcement_state` ({0}), must be one of {1}"
                .format(enforcement_state, allowed_values)
            )

        self._enforcement_state = enforcement_state

    @property
    def provider(self):
        """Gets the provider of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.

        The provider that has reCAPTCHA protection.

        :return: The provider of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.

        The provider that has reCAPTCHA protection.

        :param provider: The provider of this GoogleCloudIdentitytoolkitV2RecaptchaEnforcementState.
        :type provider: str
        """
        allowed_values = ["RECAPTCHA_PROVIDER_UNSPECIFIED", "EMAIL_PASSWORD_PROVIDER"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider
