# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_forward_inbound_credentials import GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_trigger import GoogleCloudIdentitytoolkitAdminV2Trigger
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forward_inbound_credentials: GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials=None, triggers: Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]=None):
        """GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig - a model defined in OpenAPI

        :param forward_inbound_credentials: The forward_inbound_credentials of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        :param triggers: The triggers of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        """
        self.openapi_types = {
            'forward_inbound_credentials': GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials,
            'triggers': Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]
        }

        self.attribute_map = {
            'forward_inbound_credentials': 'forwardInboundCredentials',
            'triggers': 'triggers'
        }

        self._forward_inbound_credentials = forward_inbound_credentials
        self._triggers = triggers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forward_inbound_credentials(self):
        """Gets the forward_inbound_credentials of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.


        :return: The forward_inbound_credentials of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        :rtype: GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials
        """
        return self._forward_inbound_credentials

    @forward_inbound_credentials.setter
    def forward_inbound_credentials(self, forward_inbound_credentials):
        """Sets the forward_inbound_credentials of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.


        :param forward_inbound_credentials: The forward_inbound_credentials of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        :type forward_inbound_credentials: GoogleCloudIdentitytoolkitAdminV2ForwardInboundCredentials
        """

        self._forward_inbound_credentials = forward_inbound_credentials

    @property
    def triggers(self):
        """Gets the triggers of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.

        Map of Trigger to event type. Key should be one of the supported event types: \"beforeCreate\", \"beforeSignIn\"

        :return: The triggers of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        :rtype: Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]
        """
        return self._triggers

    @triggers.setter
    def triggers(self, triggers):
        """Sets the triggers of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.

        Map of Trigger to event type. Key should be one of the supported event types: \"beforeCreate\", \"beforeSignIn\"

        :param triggers: The triggers of this GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.
        :type triggers: Dict[str, GoogleCloudIdentitytoolkitAdminV2Trigger]
        """

        self._triggers = triggers
