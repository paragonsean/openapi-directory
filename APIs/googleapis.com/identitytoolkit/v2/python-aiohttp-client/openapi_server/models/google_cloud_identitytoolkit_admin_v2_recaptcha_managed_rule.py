# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, end_score: float=None):
        """GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule - a model defined in OpenAPI

        :param action: The action of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        :param end_score: The end_score of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        """
        self.openapi_types = {
            'action': str,
            'end_score': float
        }

        self.attribute_map = {
            'action': 'action',
            'end_score': 'endScore'
        }

        self._action = action
        self._end_score = end_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.

        The action taken if the reCAPTCHA score of a request is within the interval [start_score, end_score].

        :return: The action of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.

        The action taken if the reCAPTCHA score of a request is within the interval [start_score, end_score].

        :param action: The action of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        :type action: str
        """
        allowed_values = ["RECAPTCHA_ACTION_UNSPECIFIED", "BLOCK"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def end_score(self):
        """Gets the end_score of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.

        The end score (inclusive) of the score range for an action. Must be a value between 0.0 and 1.0, at 11 discrete values; e.g. 0, 0.1, 0.2, 0.3, ... 0.9, 1.0. A score of 0.0 indicates the riskiest request (likely a bot), whereas 1.0 indicates the safest request (likely a human). See https://cloud.google.com/recaptcha-enterprise/docs/interpret-assessment.

        :return: The end_score of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        :rtype: float
        """
        return self._end_score

    @end_score.setter
    def end_score(self, end_score):
        """Sets the end_score of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.

        The end score (inclusive) of the score range for an action. Must be a value between 0.0 and 1.0, at 11 discrete values; e.g. 0, 0.1, 0.2, 0.3, ... 0.9, 1.0. A score of 0.0 indicates the riskiest request (likely a bot), whereas 1.0 indicates the safest request (likely a human). See https://cloud.google.com/recaptcha-enterprise/docs/interpret-assessment.

        :param end_score: The end_score of this GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.
        :type end_score: float
        """

        self._end_score = end_score
