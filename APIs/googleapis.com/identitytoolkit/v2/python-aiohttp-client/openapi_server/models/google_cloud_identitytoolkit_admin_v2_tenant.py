# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_client_permission_config import GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_email_privacy_config import GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_hash_config import GoogleCloudIdentitytoolkitAdminV2HashConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_inheritance import GoogleCloudIdentitytoolkitAdminV2Inheritance
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_monitoring_config import GoogleCloudIdentitytoolkitAdminV2MonitoringConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_multi_factor_auth_config import GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_password_policy_config import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_recaptcha_config import GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_sms_region_config import GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2Tenant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_password_signup: bool=None, autodelete_anonymous_users: bool=None, client: GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig=None, disable_auth: bool=None, display_name: str=None, email_privacy_config: GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig=None, enable_anonymous_user: bool=None, enable_email_link_signin: bool=None, hash_config: GoogleCloudIdentitytoolkitAdminV2HashConfig=None, inheritance: GoogleCloudIdentitytoolkitAdminV2Inheritance=None, mfa_config: GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig=None, monitoring: GoogleCloudIdentitytoolkitAdminV2MonitoringConfig=None, name: str=None, password_policy_config: GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig=None, recaptcha_config: GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig=None, sms_region_config: GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig=None, test_phone_numbers: Dict[str, str]=None):
        """GoogleCloudIdentitytoolkitAdminV2Tenant - a model defined in OpenAPI

        :param allow_password_signup: The allow_password_signup of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param autodelete_anonymous_users: The autodelete_anonymous_users of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param client: The client of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param disable_auth: The disable_auth of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param display_name: The display_name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param email_privacy_config: The email_privacy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param enable_anonymous_user: The enable_anonymous_user of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param enable_email_link_signin: The enable_email_link_signin of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param hash_config: The hash_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param inheritance: The inheritance of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param mfa_config: The mfa_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param monitoring: The monitoring of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param name: The name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param password_policy_config: The password_policy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param recaptcha_config: The recaptcha_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param sms_region_config: The sms_region_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :param test_phone_numbers: The test_phone_numbers of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        """
        self.openapi_types = {
            'allow_password_signup': bool,
            'autodelete_anonymous_users': bool,
            'client': GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig,
            'disable_auth': bool,
            'display_name': str,
            'email_privacy_config': GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig,
            'enable_anonymous_user': bool,
            'enable_email_link_signin': bool,
            'hash_config': GoogleCloudIdentitytoolkitAdminV2HashConfig,
            'inheritance': GoogleCloudIdentitytoolkitAdminV2Inheritance,
            'mfa_config': GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig,
            'monitoring': GoogleCloudIdentitytoolkitAdminV2MonitoringConfig,
            'name': str,
            'password_policy_config': GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig,
            'recaptcha_config': GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig,
            'sms_region_config': GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig,
            'test_phone_numbers': Dict[str, str]
        }

        self.attribute_map = {
            'allow_password_signup': 'allowPasswordSignup',
            'autodelete_anonymous_users': 'autodeleteAnonymousUsers',
            'client': 'client',
            'disable_auth': 'disableAuth',
            'display_name': 'displayName',
            'email_privacy_config': 'emailPrivacyConfig',
            'enable_anonymous_user': 'enableAnonymousUser',
            'enable_email_link_signin': 'enableEmailLinkSignin',
            'hash_config': 'hashConfig',
            'inheritance': 'inheritance',
            'mfa_config': 'mfaConfig',
            'monitoring': 'monitoring',
            'name': 'name',
            'password_policy_config': 'passwordPolicyConfig',
            'recaptcha_config': 'recaptchaConfig',
            'sms_region_config': 'smsRegionConfig',
            'test_phone_numbers': 'testPhoneNumbers'
        }

        self._allow_password_signup = allow_password_signup
        self._autodelete_anonymous_users = autodelete_anonymous_users
        self._client = client
        self._disable_auth = disable_auth
        self._display_name = display_name
        self._email_privacy_config = email_privacy_config
        self._enable_anonymous_user = enable_anonymous_user
        self._enable_email_link_signin = enable_email_link_signin
        self._hash_config = hash_config
        self._inheritance = inheritance
        self._mfa_config = mfa_config
        self._monitoring = monitoring
        self._name = name
        self._password_policy_config = password_policy_config
        self._recaptcha_config = recaptcha_config
        self._sms_region_config = sms_region_config
        self._test_phone_numbers = test_phone_numbers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2Tenant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2Tenant of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_password_signup(self):
        """Gets the allow_password_signup of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to allow email/password user authentication.

        :return: The allow_password_signup of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: bool
        """
        return self._allow_password_signup

    @allow_password_signup.setter
    def allow_password_signup(self, allow_password_signup):
        """Sets the allow_password_signup of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to allow email/password user authentication.

        :param allow_password_signup: The allow_password_signup of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type allow_password_signup: bool
        """

        self._allow_password_signup = allow_password_signup

    @property
    def autodelete_anonymous_users(self):
        """Gets the autodelete_anonymous_users of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether anonymous users will be auto-deleted after a period of 30 days.

        :return: The autodelete_anonymous_users of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: bool
        """
        return self._autodelete_anonymous_users

    @autodelete_anonymous_users.setter
    def autodelete_anonymous_users(self, autodelete_anonymous_users):
        """Sets the autodelete_anonymous_users of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether anonymous users will be auto-deleted after a period of 30 days.

        :param autodelete_anonymous_users: The autodelete_anonymous_users of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type autodelete_anonymous_users: bool
        """

        self._autodelete_anonymous_users = autodelete_anonymous_users

    @property
    def client(self):
        """Gets the client of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The client of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param client: The client of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type client: GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig
        """

        self._client = client

    @property
    def disable_auth(self):
        """Gets the disable_auth of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.

        :return: The disable_auth of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: bool
        """
        return self._disable_auth

    @disable_auth.setter
    def disable_auth(self, disable_auth):
        """Sets the disable_auth of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.

        :param disable_auth: The disable_auth of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type disable_auth: bool
        """

        self._disable_auth = disable_auth

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Display name of the tenant.

        :return: The display_name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Display name of the tenant.

        :param display_name: The display_name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_privacy_config(self):
        """Gets the email_privacy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The email_privacy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
        """
        return self._email_privacy_config

    @email_privacy_config.setter
    def email_privacy_config(self, email_privacy_config):
        """Sets the email_privacy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param email_privacy_config: The email_privacy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type email_privacy_config: GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig
        """

        self._email_privacy_config = email_privacy_config

    @property
    def enable_anonymous_user(self):
        """Gets the enable_anonymous_user of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to enable anonymous user authentication.

        :return: The enable_anonymous_user of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: bool
        """
        return self._enable_anonymous_user

    @enable_anonymous_user.setter
    def enable_anonymous_user(self, enable_anonymous_user):
        """Sets the enable_anonymous_user of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to enable anonymous user authentication.

        :param enable_anonymous_user: The enable_anonymous_user of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type enable_anonymous_user: bool
        """

        self._enable_anonymous_user = enable_anonymous_user

    @property
    def enable_email_link_signin(self):
        """Gets the enable_email_link_signin of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to enable email link user authentication.

        :return: The enable_email_link_signin of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: bool
        """
        return self._enable_email_link_signin

    @enable_email_link_signin.setter
    def enable_email_link_signin(self, enable_email_link_signin):
        """Sets the enable_email_link_signin of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Whether to enable email link user authentication.

        :param enable_email_link_signin: The enable_email_link_signin of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type enable_email_link_signin: bool
        """

        self._enable_email_link_signin = enable_email_link_signin

    @property
    def hash_config(self):
        """Gets the hash_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The hash_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2HashConfig
        """
        return self._hash_config

    @hash_config.setter
    def hash_config(self, hash_config):
        """Sets the hash_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param hash_config: The hash_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type hash_config: GoogleCloudIdentitytoolkitAdminV2HashConfig
        """

        self._hash_config = hash_config

    @property
    def inheritance(self):
        """Gets the inheritance of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The inheritance of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2Inheritance
        """
        return self._inheritance

    @inheritance.setter
    def inheritance(self, inheritance):
        """Sets the inheritance of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param inheritance: The inheritance of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type inheritance: GoogleCloudIdentitytoolkitAdminV2Inheritance
        """

        self._inheritance = inheritance

    @property
    def mfa_config(self):
        """Gets the mfa_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The mfa_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
        """
        return self._mfa_config

    @mfa_config.setter
    def mfa_config(self, mfa_config):
        """Sets the mfa_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param mfa_config: The mfa_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type mfa_config: GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
        """

        self._mfa_config = mfa_config

    @property
    def monitoring(self):
        """Gets the monitoring of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The monitoring of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2MonitoringConfig
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param monitoring: The monitoring of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type monitoring: GoogleCloudIdentitytoolkitAdminV2MonitoringConfig
        """

        self._monitoring = monitoring

    @property
    def name(self):
        """Gets the name of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Output only. Resource name of a tenant. For example: \"projects/{project-id}/tenants/{tenant-id}\"

        :return: The name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        Output only. Resource name of a tenant. For example: \"projects/{project-id}/tenants/{tenant-id}\"

        :param name: The name of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type name: str
        """

        self._name = name

    @property
    def password_policy_config(self):
        """Gets the password_policy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The password_policy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
        """
        return self._password_policy_config

    @password_policy_config.setter
    def password_policy_config(self, password_policy_config):
        """Sets the password_policy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param password_policy_config: The password_policy_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type password_policy_config: GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
        """

        self._password_policy_config = password_policy_config

    @property
    def recaptcha_config(self):
        """Gets the recaptcha_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The recaptcha_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
        """
        return self._recaptcha_config

    @recaptcha_config.setter
    def recaptcha_config(self, recaptcha_config):
        """Sets the recaptcha_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param recaptcha_config: The recaptcha_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type recaptcha_config: GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
        """

        self._recaptcha_config = recaptcha_config

    @property
    def sms_region_config(self):
        """Gets the sms_region_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :return: The sms_region_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig
        """
        return self._sms_region_config

    @sms_region_config.setter
    def sms_region_config(self, sms_region_config):
        """Sets the sms_region_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.


        :param sms_region_config: The sms_region_config of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type sms_region_config: GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig
        """

        self._sms_region_config = sms_region_config

    @property
    def test_phone_numbers(self):
        """Gets the test_phone_numbers of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).

        :return: The test_phone_numbers of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :rtype: Dict[str, str]
        """
        return self._test_phone_numbers

    @test_phone_numbers.setter
    def test_phone_numbers(self, test_phone_numbers):
        """Sets the test_phone_numbers of this GoogleCloudIdentitytoolkitAdminV2Tenant.

        A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).

        :param test_phone_numbers: The test_phone_numbers of this GoogleCloudIdentitytoolkitAdminV2Tenant.
        :type test_phone_numbers: Dict[str, str]
        """

        self._test_phone_numbers = test_phone_numbers
