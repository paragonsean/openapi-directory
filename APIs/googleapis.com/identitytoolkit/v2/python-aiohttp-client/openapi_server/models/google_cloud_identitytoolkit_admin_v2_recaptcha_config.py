# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_recaptcha_key import GoogleCloudIdentitytoolkitAdminV2RecaptchaKey
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_recaptcha_managed_rule import GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_password_enforcement_state: str=None, managed_rules: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]=None, recaptcha_keys: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]=None, use_account_defender: bool=None):
        """GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig - a model defined in OpenAPI

        :param email_password_enforcement_state: The email_password_enforcement_state of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :param managed_rules: The managed_rules of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :param recaptcha_keys: The recaptcha_keys of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :param use_account_defender: The use_account_defender of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        """
        self.openapi_types = {
            'email_password_enforcement_state': str,
            'managed_rules': List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule],
            'recaptcha_keys': List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey],
            'use_account_defender': bool
        }

        self.attribute_map = {
            'email_password_enforcement_state': 'emailPasswordEnforcementState',
            'managed_rules': 'managedRules',
            'recaptcha_keys': 'recaptchaKeys',
            'use_account_defender': 'useAccountDefender'
        }

        self._email_password_enforcement_state = email_password_enforcement_state
        self._managed_rules = managed_rules
        self._recaptcha_keys = recaptcha_keys
        self._use_account_defender = use_account_defender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_password_enforcement_state(self):
        """Gets the email_password_enforcement_state of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.

        :return: The email_password_enforcement_state of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :rtype: str
        """
        return self._email_password_enforcement_state

    @email_password_enforcement_state.setter
    def email_password_enforcement_state(self, email_password_enforcement_state):
        """Sets the email_password_enforcement_state of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.

        :param email_password_enforcement_state: The email_password_enforcement_state of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :type email_password_enforcement_state: str
        """
        allowed_values = ["RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED", "false", "AUDIT", "ENFORCE"]  # noqa: E501
        if email_password_enforcement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `email_password_enforcement_state` ({0}), must be one of {1}"
                .format(email_password_enforcement_state, allowed_values)
            )

        self._email_password_enforcement_state = email_password_enforcement_state

    @property
    def managed_rules(self):
        """Gets the managed_rules of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.

        :return: The managed_rules of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :rtype: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]
        """
        return self._managed_rules

    @managed_rules.setter
    def managed_rules(self, managed_rules):
        """Sets the managed_rules of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.

        :param managed_rules: The managed_rules of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :type managed_rules: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]
        """

        self._managed_rules = managed_rules

    @property
    def recaptcha_keys(self):
        """Gets the recaptcha_keys of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        Output only. The reCAPTCHA keys.

        :return: The recaptcha_keys of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :rtype: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]
        """
        return self._recaptcha_keys

    @recaptcha_keys.setter
    def recaptcha_keys(self, recaptcha_keys):
        """Sets the recaptcha_keys of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        Output only. The reCAPTCHA keys.

        :param recaptcha_keys: The recaptcha_keys of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :type recaptcha_keys: List[GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]
        """

        self._recaptcha_keys = recaptcha_keys

    @property
    def use_account_defender(self):
        """Gets the use_account_defender of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.

        :return: The use_account_defender of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :rtype: bool
        """
        return self._use_account_defender

    @use_account_defender.setter
    def use_account_defender(self, use_account_defender):
        """Sets the use_account_defender of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.

        Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.

        :param use_account_defender: The use_account_defender of this GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.
        :type use_account_defender: bool
        """

        self._use_account_defender = use_account_defender
