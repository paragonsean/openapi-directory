# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_identitytoolkit_admin_v2_provider_config import GoogleCloudIdentitytoolkitAdminV2ProviderConfig
from openapi_server import util


class GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled_providers: List[str]=None, provider_configs: List[GoogleCloudIdentitytoolkitAdminV2ProviderConfig]=None, state: str=None):
        """GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig - a model defined in OpenAPI

        :param enabled_providers: The enabled_providers of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :param provider_configs: The provider_configs of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :param state: The state of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        """
        self.openapi_types = {
            'enabled_providers': List[str],
            'provider_configs': List[GoogleCloudIdentitytoolkitAdminV2ProviderConfig],
            'state': str
        }

        self.attribute_map = {
            'enabled_providers': 'enabledProviders',
            'provider_configs': 'providerConfigs',
            'state': 'state'
        }

        self._enabled_providers = enabled_providers
        self._provider_configs = provider_configs
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled_providers(self):
        """Gets the enabled_providers of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        A list of usable second factors for this project.

        :return: The enabled_providers of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :rtype: List[str]
        """
        return self._enabled_providers

    @enabled_providers.setter
    def enabled_providers(self, enabled_providers):
        """Sets the enabled_providers of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        A list of usable second factors for this project.

        :param enabled_providers: The enabled_providers of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :type enabled_providers: List[str]
        """
        allowed_values = ["PROVIDER_UNSPECIFIED", "PHONE_SMS"]  # noqa: E501
        if not set(enabled_providers).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `enabled_providers` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(enabled_providers) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._enabled_providers = enabled_providers

    @property
    def provider_configs(self):
        """Gets the provider_configs of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the 'enabled_providers' field.

        :return: The provider_configs of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :rtype: List[GoogleCloudIdentitytoolkitAdminV2ProviderConfig]
        """
        return self._provider_configs

    @provider_configs.setter
    def provider_configs(self, provider_configs):
        """Sets the provider_configs of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the 'enabled_providers' field.

        :param provider_configs: The provider_configs of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :type provider_configs: List[GoogleCloudIdentitytoolkitAdminV2ProviderConfig]
        """

        self._provider_configs = provider_configs

    @property
    def state(self):
        """Gets the state of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        Whether MultiFactor Authentication has been enabled for this project.

        :return: The state of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.

        Whether MultiFactor Authentication has been enabled for this project.

        :param state: The state of this GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DISABLED", "ENABLED", "MANDATORY"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
