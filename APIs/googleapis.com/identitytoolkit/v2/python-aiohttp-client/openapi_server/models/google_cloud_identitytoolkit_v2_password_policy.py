# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_identitytoolkit_v2_custom_strength_options import GoogleCloudIdentitytoolkitV2CustomStrengthOptions
from openapi_server import util


class GoogleCloudIdentitytoolkitV2PasswordPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_non_alphanumeric_characters: List[str]=None, custom_strength_options: GoogleCloudIdentitytoolkitV2CustomStrengthOptions=None, enforcement_state: str=None, force_upgrade_on_signin: bool=None, schema_version: int=None):
        """GoogleCloudIdentitytoolkitV2PasswordPolicy - a model defined in OpenAPI

        :param allowed_non_alphanumeric_characters: The allowed_non_alphanumeric_characters of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :param custom_strength_options: The custom_strength_options of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :param enforcement_state: The enforcement_state of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :param force_upgrade_on_signin: The force_upgrade_on_signin of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :param schema_version: The schema_version of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        """
        self.openapi_types = {
            'allowed_non_alphanumeric_characters': List[str],
            'custom_strength_options': GoogleCloudIdentitytoolkitV2CustomStrengthOptions,
            'enforcement_state': str,
            'force_upgrade_on_signin': bool,
            'schema_version': int
        }

        self.attribute_map = {
            'allowed_non_alphanumeric_characters': 'allowedNonAlphanumericCharacters',
            'custom_strength_options': 'customStrengthOptions',
            'enforcement_state': 'enforcementState',
            'force_upgrade_on_signin': 'forceUpgradeOnSignin',
            'schema_version': 'schemaVersion'
        }

        self._allowed_non_alphanumeric_characters = allowed_non_alphanumeric_characters
        self._custom_strength_options = custom_strength_options
        self._enforcement_state = enforcement_state
        self._force_upgrade_on_signin = force_upgrade_on_signin
        self._schema_version = schema_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudIdentitytoolkitV2PasswordPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudIdentitytoolkitV2PasswordPolicy of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_non_alphanumeric_characters(self):
        """Gets the allowed_non_alphanumeric_characters of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. Allowed characters which satisfy the non_alphanumeric requirement.

        :return: The allowed_non_alphanumeric_characters of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :rtype: List[str]
        """
        return self._allowed_non_alphanumeric_characters

    @allowed_non_alphanumeric_characters.setter
    def allowed_non_alphanumeric_characters(self, allowed_non_alphanumeric_characters):
        """Sets the allowed_non_alphanumeric_characters of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. Allowed characters which satisfy the non_alphanumeric requirement.

        :param allowed_non_alphanumeric_characters: The allowed_non_alphanumeric_characters of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :type allowed_non_alphanumeric_characters: List[str]
        """

        self._allowed_non_alphanumeric_characters = allowed_non_alphanumeric_characters

    @property
    def custom_strength_options(self):
        """Gets the custom_strength_options of this GoogleCloudIdentitytoolkitV2PasswordPolicy.


        :return: The custom_strength_options of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :rtype: GoogleCloudIdentitytoolkitV2CustomStrengthOptions
        """
        return self._custom_strength_options

    @custom_strength_options.setter
    def custom_strength_options(self, custom_strength_options):
        """Sets the custom_strength_options of this GoogleCloudIdentitytoolkitV2PasswordPolicy.


        :param custom_strength_options: The custom_strength_options of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :type custom_strength_options: GoogleCloudIdentitytoolkitV2CustomStrengthOptions
        """

        self._custom_strength_options = custom_strength_options

    @property
    def enforcement_state(self):
        """Gets the enforcement_state of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. Which enforcement mode to use for the password policy.

        :return: The enforcement_state of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :rtype: str
        """
        return self._enforcement_state

    @enforcement_state.setter
    def enforcement_state(self, enforcement_state):
        """Sets the enforcement_state of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. Which enforcement mode to use for the password policy.

        :param enforcement_state: The enforcement_state of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :type enforcement_state: str
        """
        allowed_values = ["ENFORCEMENT_STATE_UNSPECIFIED", "false", "ENFORCE"]  # noqa: E501
        if enforcement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enforcement_state` ({0}), must be one of {1}"
                .format(enforcement_state, allowed_values)
            )

        self._enforcement_state = enforcement_state

    @property
    def force_upgrade_on_signin(self):
        """Gets the force_upgrade_on_signin of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Users must have a password compliant with the password policy to sign-in.

        :return: The force_upgrade_on_signin of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :rtype: bool
        """
        return self._force_upgrade_on_signin

    @force_upgrade_on_signin.setter
    def force_upgrade_on_signin(self, force_upgrade_on_signin):
        """Sets the force_upgrade_on_signin of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Users must have a password compliant with the password policy to sign-in.

        :param force_upgrade_on_signin: The force_upgrade_on_signin of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :type force_upgrade_on_signin: bool
        """

        self._force_upgrade_on_signin = force_upgrade_on_signin

    @property
    def schema_version(self):
        """Gets the schema_version of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. schema version number for the password policy

        :return: The schema_version of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this GoogleCloudIdentitytoolkitV2PasswordPolicy.

        Output only. schema version number for the password policy

        :param schema_version: The schema_version of this GoogleCloudIdentitytoolkitV2PasswordPolicy.
        :type schema_version: int
        """

        self._schema_version = schema_version
