/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2RevokeTokenRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2StartMfaSignInRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2StartMfaSignInResponse;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2WithdrawMfaRequest;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2WithdrawMfaResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Finishes enrolling a second factor for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsMfaEnrollmentFinalizeTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest = null;
        GoogleCloudIdentitytoolkitV2FinalizeMfaEnrollmentResponse response = api.identitytoolkitAccountsMfaEnrollmentFinalize($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2FinalizeMfaEnrollmentRequest);
        // TODO: test validations
    }

    /**
     * Step one of the MFA enrollment process. In SMS case, this sends an SMS verification code to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsMfaEnrollmentStartTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2StartMfaEnrollmentRequest googleCloudIdentitytoolkitV2StartMfaEnrollmentRequest = null;
        GoogleCloudIdentitytoolkitV2StartMfaEnrollmentResponse response = api.identitytoolkitAccountsMfaEnrollmentStart($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2StartMfaEnrollmentRequest);
        // TODO: test validations
    }

    /**
     * Revokes one second factor from the enrolled second factors for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsMfaEnrollmentWithdrawTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2WithdrawMfaRequest googleCloudIdentitytoolkitV2WithdrawMfaRequest = null;
        GoogleCloudIdentitytoolkitV2WithdrawMfaResponse response = api.identitytoolkitAccountsMfaEnrollmentWithdraw($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2WithdrawMfaRequest);
        // TODO: test validations
    }

    /**
     * Verifies the MFA challenge and performs sign-in
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsMfaSignInFinalizeTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2FinalizeMfaSignInRequest googleCloudIdentitytoolkitV2FinalizeMfaSignInRequest = null;
        GoogleCloudIdentitytoolkitV2FinalizeMfaSignInResponse response = api.identitytoolkitAccountsMfaSignInFinalize($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2FinalizeMfaSignInRequest);
        // TODO: test validations
    }

    /**
     * Sends the MFA challenge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsMfaSignInStartTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2StartMfaSignInRequest googleCloudIdentitytoolkitV2StartMfaSignInRequest = null;
        GoogleCloudIdentitytoolkitV2StartMfaSignInResponse response = api.identitytoolkitAccountsMfaSignInStart($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2StartMfaSignInRequest);
        // TODO: test validations
    }

    /**
     * Revokes a user&#39;s token from an Identity Provider (IdP). This is done by manually providing an IdP credential, and the token types for revocation. An [API key](https://cloud.google.com/docs/authentication/api-keys) is required in the request in order to identify the Google Cloud project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void identitytoolkitAccountsRevokeTokenTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudIdentitytoolkitV2RevokeTokenRequest googleCloudIdentitytoolkitV2RevokeTokenRequest = null;
        Object response = api.identitytoolkitAccountsRevokeToken($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudIdentitytoolkitV2RevokeTokenRequest);
        // TODO: test validations
    }

}
