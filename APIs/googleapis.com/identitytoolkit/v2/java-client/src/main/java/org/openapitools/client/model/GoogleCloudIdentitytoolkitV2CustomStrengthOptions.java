/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom strength options to enforce on user passwords.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitV2CustomStrengthOptions {
  public static final String SERIALIZED_NAME_CONTAINS_LOWERCASE_CHARACTER = "containsLowercaseCharacter";
  @SerializedName(SERIALIZED_NAME_CONTAINS_LOWERCASE_CHARACTER)
  private Boolean containsLowercaseCharacter;

  public static final String SERIALIZED_NAME_CONTAINS_NON_ALPHANUMERIC_CHARACTER = "containsNonAlphanumericCharacter";
  @SerializedName(SERIALIZED_NAME_CONTAINS_NON_ALPHANUMERIC_CHARACTER)
  private Boolean containsNonAlphanumericCharacter;

  public static final String SERIALIZED_NAME_CONTAINS_NUMERIC_CHARACTER = "containsNumericCharacter";
  @SerializedName(SERIALIZED_NAME_CONTAINS_NUMERIC_CHARACTER)
  private Boolean containsNumericCharacter;

  public static final String SERIALIZED_NAME_CONTAINS_UPPERCASE_CHARACTER = "containsUppercaseCharacter";
  @SerializedName(SERIALIZED_NAME_CONTAINS_UPPERCASE_CHARACTER)
  private Boolean containsUppercaseCharacter;

  public static final String SERIALIZED_NAME_MAX_PASSWORD_LENGTH = "maxPasswordLength";
  @SerializedName(SERIALIZED_NAME_MAX_PASSWORD_LENGTH)
  private Integer maxPasswordLength;

  public static final String SERIALIZED_NAME_MIN_PASSWORD_LENGTH = "minPasswordLength";
  @SerializedName(SERIALIZED_NAME_MIN_PASSWORD_LENGTH)
  private Integer minPasswordLength;

  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions() {
  }

  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions containsLowercaseCharacter(Boolean containsLowercaseCharacter) {
    this.containsLowercaseCharacter = containsLowercaseCharacter;
    return this;
  }

  /**
   * The password must contain a lower case character.
   * @return containsLowercaseCharacter
   */
  @javax.annotation.Nullable
  public Boolean getContainsLowercaseCharacter() {
    return containsLowercaseCharacter;
  }

  public void setContainsLowercaseCharacter(Boolean containsLowercaseCharacter) {
    this.containsLowercaseCharacter = containsLowercaseCharacter;
  }


  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions containsNonAlphanumericCharacter(Boolean containsNonAlphanumericCharacter) {
    this.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter;
    return this;
  }

  /**
   * The password must contain a non alpha numeric character.
   * @return containsNonAlphanumericCharacter
   */
  @javax.annotation.Nullable
  public Boolean getContainsNonAlphanumericCharacter() {
    return containsNonAlphanumericCharacter;
  }

  public void setContainsNonAlphanumericCharacter(Boolean containsNonAlphanumericCharacter) {
    this.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter;
  }


  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions containsNumericCharacter(Boolean containsNumericCharacter) {
    this.containsNumericCharacter = containsNumericCharacter;
    return this;
  }

  /**
   * The password must contain a number.
   * @return containsNumericCharacter
   */
  @javax.annotation.Nullable
  public Boolean getContainsNumericCharacter() {
    return containsNumericCharacter;
  }

  public void setContainsNumericCharacter(Boolean containsNumericCharacter) {
    this.containsNumericCharacter = containsNumericCharacter;
  }


  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions containsUppercaseCharacter(Boolean containsUppercaseCharacter) {
    this.containsUppercaseCharacter = containsUppercaseCharacter;
    return this;
  }

  /**
   * The password must contain an upper case character.
   * @return containsUppercaseCharacter
   */
  @javax.annotation.Nullable
  public Boolean getContainsUppercaseCharacter() {
    return containsUppercaseCharacter;
  }

  public void setContainsUppercaseCharacter(Boolean containsUppercaseCharacter) {
    this.containsUppercaseCharacter = containsUppercaseCharacter;
  }


  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions maxPasswordLength(Integer maxPasswordLength) {
    this.maxPasswordLength = maxPasswordLength;
    return this;
  }

  /**
   * Maximum password length. No default max length
   * @return maxPasswordLength
   */
  @javax.annotation.Nullable
  public Integer getMaxPasswordLength() {
    return maxPasswordLength;
  }

  public void setMaxPasswordLength(Integer maxPasswordLength) {
    this.maxPasswordLength = maxPasswordLength;
  }


  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions minPasswordLength(Integer minPasswordLength) {
    this.minPasswordLength = minPasswordLength;
    return this;
  }

  /**
   * Minimum password length. Range from 6 to 30
   * @return minPasswordLength
   */
  @javax.annotation.Nullable
  public Integer getMinPasswordLength() {
    return minPasswordLength;
  }

  public void setMinPasswordLength(Integer minPasswordLength) {
    this.minPasswordLength = minPasswordLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitV2CustomStrengthOptions googleCloudIdentitytoolkitV2CustomStrengthOptions = (GoogleCloudIdentitytoolkitV2CustomStrengthOptions) o;
    return Objects.equals(this.containsLowercaseCharacter, googleCloudIdentitytoolkitV2CustomStrengthOptions.containsLowercaseCharacter) &&
        Objects.equals(this.containsNonAlphanumericCharacter, googleCloudIdentitytoolkitV2CustomStrengthOptions.containsNonAlphanumericCharacter) &&
        Objects.equals(this.containsNumericCharacter, googleCloudIdentitytoolkitV2CustomStrengthOptions.containsNumericCharacter) &&
        Objects.equals(this.containsUppercaseCharacter, googleCloudIdentitytoolkitV2CustomStrengthOptions.containsUppercaseCharacter) &&
        Objects.equals(this.maxPasswordLength, googleCloudIdentitytoolkitV2CustomStrengthOptions.maxPasswordLength) &&
        Objects.equals(this.minPasswordLength, googleCloudIdentitytoolkitV2CustomStrengthOptions.minPasswordLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsLowercaseCharacter, containsNonAlphanumericCharacter, containsNumericCharacter, containsUppercaseCharacter, maxPasswordLength, minPasswordLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitV2CustomStrengthOptions {\n");
    sb.append("    containsLowercaseCharacter: ").append(toIndentedString(containsLowercaseCharacter)).append("\n");
    sb.append("    containsNonAlphanumericCharacter: ").append(toIndentedString(containsNonAlphanumericCharacter)).append("\n");
    sb.append("    containsNumericCharacter: ").append(toIndentedString(containsNumericCharacter)).append("\n");
    sb.append("    containsUppercaseCharacter: ").append(toIndentedString(containsUppercaseCharacter)).append("\n");
    sb.append("    maxPasswordLength: ").append(toIndentedString(maxPasswordLength)).append("\n");
    sb.append("    minPasswordLength: ").append(toIndentedString(minPasswordLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containsLowercaseCharacter");
    openapiFields.add("containsNonAlphanumericCharacter");
    openapiFields.add("containsNumericCharacter");
    openapiFields.add("containsUppercaseCharacter");
    openapiFields.add("maxPasswordLength");
    openapiFields.add("minPasswordLength");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitV2CustomStrengthOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitV2CustomStrengthOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitV2CustomStrengthOptions is not found in the empty JSON string", GoogleCloudIdentitytoolkitV2CustomStrengthOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitV2CustomStrengthOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitV2CustomStrengthOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitV2CustomStrengthOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitV2CustomStrengthOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitV2CustomStrengthOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitV2CustomStrengthOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitV2CustomStrengthOptions>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitV2CustomStrengthOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitV2CustomStrengthOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitV2CustomStrengthOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitV2CustomStrengthOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitV2CustomStrengthOptions
   */
  public static GoogleCloudIdentitytoolkitV2CustomStrengthOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitV2CustomStrengthOptions.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitV2CustomStrengthOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

