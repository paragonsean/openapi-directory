/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2ProviderConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options related to MultiFactor Authentication for the project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig {
  /**
   * Gets or Sets enabledProviders
   */
  @JsonAdapter(EnabledProvidersEnum.Adapter.class)
  public enum EnabledProvidersEnum {
    PROVIDER_UNSPECIFIED("PROVIDER_UNSPECIFIED"),
    
    PHONE_SMS("PHONE_SMS");

    private String value;

    EnabledProvidersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledProvidersEnum fromValue(String value) {
      for (EnabledProvidersEnum b : EnabledProvidersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnabledProvidersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledProvidersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledProvidersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnabledProvidersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnabledProvidersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENABLED_PROVIDERS = "enabledProviders";
  @SerializedName(SERIALIZED_NAME_ENABLED_PROVIDERS)
  private List<EnabledProvidersEnum> enabledProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVIDER_CONFIGS = "providerConfigs";
  @SerializedName(SERIALIZED_NAME_PROVIDER_CONFIGS)
  private List<GoogleCloudIdentitytoolkitAdminV2ProviderConfig> providerConfigs = new ArrayList<>();

  /**
   * Whether MultiFactor Authentication has been enabled for this project.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    ENABLED("ENABLED"),
    
    MANDATORY("MANDATORY");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig enabledProviders(List<EnabledProvidersEnum> enabledProviders) {
    this.enabledProviders = enabledProviders;
    return this;
  }

  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig addEnabledProvidersItem(EnabledProvidersEnum enabledProvidersItem) {
    if (this.enabledProviders == null) {
      this.enabledProviders = new ArrayList<>();
    }
    this.enabledProviders.add(enabledProvidersItem);
    return this;
  }

  /**
   * A list of usable second factors for this project.
   * @return enabledProviders
   */
  @javax.annotation.Nullable
  public List<EnabledProvidersEnum> getEnabledProviders() {
    return enabledProviders;
  }

  public void setEnabledProviders(List<EnabledProvidersEnum> enabledProviders) {
    this.enabledProviders = enabledProviders;
  }


  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig providerConfigs(List<GoogleCloudIdentitytoolkitAdminV2ProviderConfig> providerConfigs) {
    this.providerConfigs = providerConfigs;
    return this;
  }

  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig addProviderConfigsItem(GoogleCloudIdentitytoolkitAdminV2ProviderConfig providerConfigsItem) {
    if (this.providerConfigs == null) {
      this.providerConfigs = new ArrayList<>();
    }
    this.providerConfigs.add(providerConfigsItem);
    return this;
  }

  /**
   * A list of usable second factors for this project along with their configurations. This field does not support phone based MFA, for that use the &#39;enabled_providers&#39; field.
   * @return providerConfigs
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2ProviderConfig> getProviderConfigs() {
    return providerConfigs;
  }

  public void setProviderConfigs(List<GoogleCloudIdentitytoolkitAdminV2ProviderConfig> providerConfigs) {
    this.providerConfigs = providerConfigs;
  }


  public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Whether MultiFactor Authentication has been enabled for this project.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig googleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig = (GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig) o;
    return Objects.equals(this.enabledProviders, googleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.enabledProviders) &&
        Objects.equals(this.providerConfigs, googleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.providerConfigs) &&
        Objects.equals(this.state, googleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabledProviders, providerConfigs, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig {\n");
    sb.append("    enabledProviders: ").append(toIndentedString(enabledProviders)).append("\n");
    sb.append("    providerConfigs: ").append(toIndentedString(providerConfigs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabledProviders");
    openapiFields.add("providerConfigs");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enabledProviders") != null && !jsonObj.get("enabledProviders").isJsonNull() && !jsonObj.get("enabledProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enabledProviders` to be an array in the JSON string but got `%s`", jsonObj.get("enabledProviders").toString()));
      }
      if (jsonObj.get("providerConfigs") != null && !jsonObj.get("providerConfigs").isJsonNull()) {
        JsonArray jsonArrayproviderConfigs = jsonObj.getAsJsonArray("providerConfigs");
        if (jsonArrayproviderConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providerConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providerConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("providerConfigs").toString()));
          }

          // validate the optional field `providerConfigs` (array)
          for (int i = 0; i < jsonArrayproviderConfigs.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2ProviderConfig.validateJsonElement(jsonArrayproviderConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

