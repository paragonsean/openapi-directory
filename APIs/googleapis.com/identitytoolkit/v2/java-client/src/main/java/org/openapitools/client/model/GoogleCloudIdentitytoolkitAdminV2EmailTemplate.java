/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Email template. The subject and body fields can contain the following placeholders which will be replaced with the appropriate values: %LINK% - The link to use to redeem the send OOB code. %EMAIL% - The email where the email is being sent. %NEW_EMAIL% - The new email being set for the account (when applicable). %APP_NAME% - The GCP project&#39;s display name. %DISPLAY_NAME% - The user&#39;s display name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2EmailTemplate {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  /**
   * Email body format
   */
  @JsonAdapter(BodyFormatEnum.Adapter.class)
  public enum BodyFormatEnum {
    BODY_FORMAT_UNSPECIFIED("BODY_FORMAT_UNSPECIFIED"),
    
    PLAIN_TEXT("PLAIN_TEXT"),
    
    HTML("HTML");

    private String value;

    BodyFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BodyFormatEnum fromValue(String value) {
      for (BodyFormatEnum b : BodyFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BodyFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BodyFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BodyFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BodyFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BodyFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BODY_FORMAT = "bodyFormat";
  @SerializedName(SERIALIZED_NAME_BODY_FORMAT)
  private BodyFormatEnum bodyFormat;

  public static final String SERIALIZED_NAME_CUSTOMIZED = "customized";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZED)
  private Boolean customized;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_SENDER_DISPLAY_NAME = "senderDisplayName";
  @SerializedName(SERIALIZED_NAME_SENDER_DISPLAY_NAME)
  private String senderDisplayName;

  public static final String SERIALIZED_NAME_SENDER_LOCAL_PART = "senderLocalPart";
  @SerializedName(SERIALIZED_NAME_SENDER_LOCAL_PART)
  private String senderLocalPart;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate() {
  }

  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate(
     Boolean customized
  ) {
    this();
    this.customized = customized;
  }

  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Email body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate bodyFormat(BodyFormatEnum bodyFormat) {
    this.bodyFormat = bodyFormat;
    return this;
  }

  /**
   * Email body format
   * @return bodyFormat
   */
  @javax.annotation.Nullable
  public BodyFormatEnum getBodyFormat() {
    return bodyFormat;
  }

  public void setBodyFormat(BodyFormatEnum bodyFormat) {
    this.bodyFormat = bodyFormat;
  }


  /**
   * Output only. Whether the body or subject of the email is customized.
   * @return customized
   */
  @javax.annotation.Nullable
  public Boolean getCustomized() {
    return customized;
  }



  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Reply-to address
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate senderDisplayName(String senderDisplayName) {
    this.senderDisplayName = senderDisplayName;
    return this;
  }

  /**
   * Sender display name
   * @return senderDisplayName
   */
  @javax.annotation.Nullable
  public String getSenderDisplayName() {
    return senderDisplayName;
  }

  public void setSenderDisplayName(String senderDisplayName) {
    this.senderDisplayName = senderDisplayName;
  }


  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate senderLocalPart(String senderLocalPart) {
    this.senderLocalPart = senderLocalPart;
    return this;
  }

  /**
   * Local part of From address
   * @return senderLocalPart
   */
  @javax.annotation.Nullable
  public String getSenderLocalPart() {
    return senderLocalPart;
  }

  public void setSenderLocalPart(String senderLocalPart) {
    this.senderLocalPart = senderLocalPart;
  }


  public GoogleCloudIdentitytoolkitAdminV2EmailTemplate subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject of the email
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2EmailTemplate googleCloudIdentitytoolkitAdminV2EmailTemplate = (GoogleCloudIdentitytoolkitAdminV2EmailTemplate) o;
    return Objects.equals(this.body, googleCloudIdentitytoolkitAdminV2EmailTemplate.body) &&
        Objects.equals(this.bodyFormat, googleCloudIdentitytoolkitAdminV2EmailTemplate.bodyFormat) &&
        Objects.equals(this.customized, googleCloudIdentitytoolkitAdminV2EmailTemplate.customized) &&
        Objects.equals(this.replyTo, googleCloudIdentitytoolkitAdminV2EmailTemplate.replyTo) &&
        Objects.equals(this.senderDisplayName, googleCloudIdentitytoolkitAdminV2EmailTemplate.senderDisplayName) &&
        Objects.equals(this.senderLocalPart, googleCloudIdentitytoolkitAdminV2EmailTemplate.senderLocalPart) &&
        Objects.equals(this.subject, googleCloudIdentitytoolkitAdminV2EmailTemplate.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyFormat, customized, replyTo, senderDisplayName, senderLocalPart, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2EmailTemplate {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyFormat: ").append(toIndentedString(bodyFormat)).append("\n");
    sb.append("    customized: ").append(toIndentedString(customized)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    senderDisplayName: ").append(toIndentedString(senderDisplayName)).append("\n");
    sb.append("    senderLocalPart: ").append(toIndentedString(senderLocalPart)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("bodyFormat");
    openapiFields.add("customized");
    openapiFields.add("replyTo");
    openapiFields.add("senderDisplayName");
    openapiFields.add("senderLocalPart");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2EmailTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2EmailTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2EmailTemplate is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2EmailTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2EmailTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2EmailTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("bodyFormat") != null && !jsonObj.get("bodyFormat").isJsonNull()) && !jsonObj.get("bodyFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyFormat").toString()));
      }
      // validate the optional field `bodyFormat`
      if (jsonObj.get("bodyFormat") != null && !jsonObj.get("bodyFormat").isJsonNull()) {
        BodyFormatEnum.validateJsonElement(jsonObj.get("bodyFormat"));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      if ((jsonObj.get("senderDisplayName") != null && !jsonObj.get("senderDisplayName").isJsonNull()) && !jsonObj.get("senderDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderDisplayName").toString()));
      }
      if ((jsonObj.get("senderLocalPart") != null && !jsonObj.get("senderLocalPart").isJsonNull()) && !jsonObj.get("senderLocalPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderLocalPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderLocalPart").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2EmailTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2EmailTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2EmailTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2EmailTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2EmailTemplate>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2EmailTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2EmailTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2EmailTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2EmailTemplate
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2EmailTemplate
   */
  public static GoogleCloudIdentitytoolkitAdminV2EmailTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2EmailTemplate.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2EmailTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

