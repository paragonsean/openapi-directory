/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Starts multi-factor sign-in by sending the multi-factor auth challenge.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitV2StartMfaSignInRequest {
  public static final String SERIALIZED_NAME_MFA_ENROLLMENT_ID = "mfaEnrollmentId";
  @SerializedName(SERIALIZED_NAME_MFA_ENROLLMENT_ID)
  private String mfaEnrollmentId;

  public static final String SERIALIZED_NAME_MFA_PENDING_CREDENTIAL = "mfaPendingCredential";
  @SerializedName(SERIALIZED_NAME_MFA_PENDING_CREDENTIAL)
  private String mfaPendingCredential;

  public static final String SERIALIZED_NAME_PHONE_SIGN_IN_INFO = "phoneSignInInfo";
  @SerializedName(SERIALIZED_NAME_PHONE_SIGN_IN_INFO)
  private GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo phoneSignInInfo;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest() {
  }

  public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest mfaEnrollmentId(String mfaEnrollmentId) {
    this.mfaEnrollmentId = mfaEnrollmentId;
    return this;
  }

  /**
   * Required. MFA enrollment id from the user&#39;s list of current MFA enrollments.
   * @return mfaEnrollmentId
   */
  @javax.annotation.Nullable
  public String getMfaEnrollmentId() {
    return mfaEnrollmentId;
  }

  public void setMfaEnrollmentId(String mfaEnrollmentId) {
    this.mfaEnrollmentId = mfaEnrollmentId;
  }


  public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest mfaPendingCredential(String mfaPendingCredential) {
    this.mfaPendingCredential = mfaPendingCredential;
    return this;
  }

  /**
   * Required. Pending credential from first factor sign-in.
   * @return mfaPendingCredential
   */
  @javax.annotation.Nullable
  public String getMfaPendingCredential() {
    return mfaPendingCredential;
  }

  public void setMfaPendingCredential(String mfaPendingCredential) {
    this.mfaPendingCredential = mfaPendingCredential;
  }


  public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest phoneSignInInfo(GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo phoneSignInInfo) {
    this.phoneSignInInfo = phoneSignInInfo;
    return this;
  }

  /**
   * Get phoneSignInInfo
   * @return phoneSignInInfo
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo getPhoneSignInInfo() {
    return phoneSignInInfo;
  }

  public void setPhoneSignInInfo(GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo phoneSignInInfo) {
    this.phoneSignInInfo = phoneSignInInfo;
  }


  public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The ID of the Identity Platform tenant the user is signing in to. If not set, the user will sign in to the default Identity Platform project.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitV2StartMfaSignInRequest googleCloudIdentitytoolkitV2StartMfaSignInRequest = (GoogleCloudIdentitytoolkitV2StartMfaSignInRequest) o;
    return Objects.equals(this.mfaEnrollmentId, googleCloudIdentitytoolkitV2StartMfaSignInRequest.mfaEnrollmentId) &&
        Objects.equals(this.mfaPendingCredential, googleCloudIdentitytoolkitV2StartMfaSignInRequest.mfaPendingCredential) &&
        Objects.equals(this.phoneSignInInfo, googleCloudIdentitytoolkitV2StartMfaSignInRequest.phoneSignInInfo) &&
        Objects.equals(this.tenantId, googleCloudIdentitytoolkitV2StartMfaSignInRequest.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mfaEnrollmentId, mfaPendingCredential, phoneSignInInfo, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitV2StartMfaSignInRequest {\n");
    sb.append("    mfaEnrollmentId: ").append(toIndentedString(mfaEnrollmentId)).append("\n");
    sb.append("    mfaPendingCredential: ").append(toIndentedString(mfaPendingCredential)).append("\n");
    sb.append("    phoneSignInInfo: ").append(toIndentedString(phoneSignInInfo)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mfaEnrollmentId");
    openapiFields.add("mfaPendingCredential");
    openapiFields.add("phoneSignInInfo");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitV2StartMfaSignInRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitV2StartMfaSignInRequest is not found in the empty JSON string", GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitV2StartMfaSignInRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mfaEnrollmentId") != null && !jsonObj.get("mfaEnrollmentId").isJsonNull()) && !jsonObj.get("mfaEnrollmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaEnrollmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaEnrollmentId").toString()));
      }
      if ((jsonObj.get("mfaPendingCredential") != null && !jsonObj.get("mfaPendingCredential").isJsonNull()) && !jsonObj.get("mfaPendingCredential").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mfaPendingCredential` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mfaPendingCredential").toString()));
      }
      // validate the optional field `phoneSignInInfo`
      if (jsonObj.get("phoneSignInInfo") != null && !jsonObj.get("phoneSignInInfo").isJsonNull()) {
        GoogleCloudIdentitytoolkitV2StartMfaPhoneRequestInfo.validateJsonElement(jsonObj.get("phoneSignInInfo"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitV2StartMfaSignInRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitV2StartMfaSignInRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitV2StartMfaSignInRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitV2StartMfaSignInRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitV2StartMfaSignInRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitV2StartMfaSignInRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitV2StartMfaSignInRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitV2StartMfaSignInRequest
   */
  public static GoogleCloudIdentitytoolkitV2StartMfaSignInRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitV2StartMfaSignInRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitV2StartMfaSignInRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

