/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitV2CustomStrengthOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for password policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitV2PasswordPolicy {
  public static final String SERIALIZED_NAME_ALLOWED_NON_ALPHANUMERIC_CHARACTERS = "allowedNonAlphanumericCharacters";
  @SerializedName(SERIALIZED_NAME_ALLOWED_NON_ALPHANUMERIC_CHARACTERS)
  private List<String> allowedNonAlphanumericCharacters = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_STRENGTH_OPTIONS = "customStrengthOptions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_STRENGTH_OPTIONS)
  private GoogleCloudIdentitytoolkitV2CustomStrengthOptions customStrengthOptions;

  /**
   * Output only. Which enforcement mode to use for the password policy.
   */
  @JsonAdapter(EnforcementStateEnum.Adapter.class)
  public enum EnforcementStateEnum {
    ENFORCEMENT_STATE_UNSPECIFIED("ENFORCEMENT_STATE_UNSPECIFIED"),
    
    FALSE("false"),
    
    ENFORCE("ENFORCE");

    private String value;

    EnforcementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnforcementStateEnum fromValue(String value) {
      for (EnforcementStateEnum b : EnforcementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnforcementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnforcementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnforcementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnforcementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnforcementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENFORCEMENT_STATE = "enforcementState";
  @SerializedName(SERIALIZED_NAME_ENFORCEMENT_STATE)
  private EnforcementStateEnum enforcementState;

  public static final String SERIALIZED_NAME_FORCE_UPGRADE_ON_SIGNIN = "forceUpgradeOnSignin";
  @SerializedName(SERIALIZED_NAME_FORCE_UPGRADE_ON_SIGNIN)
  private Boolean forceUpgradeOnSignin;

  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private Integer schemaVersion;

  public GoogleCloudIdentitytoolkitV2PasswordPolicy() {
  }

  public GoogleCloudIdentitytoolkitV2PasswordPolicy(
     List<String> allowedNonAlphanumericCharacters, 
     EnforcementStateEnum enforcementState, 
     Integer schemaVersion
  ) {
    this();
    this.allowedNonAlphanumericCharacters = allowedNonAlphanumericCharacters;
    this.enforcementState = enforcementState;
    this.schemaVersion = schemaVersion;
  }

  /**
   * Output only. Allowed characters which satisfy the non_alphanumeric requirement.
   * @return allowedNonAlphanumericCharacters
   */
  @javax.annotation.Nullable
  public List<String> getAllowedNonAlphanumericCharacters() {
    return allowedNonAlphanumericCharacters;
  }



  public GoogleCloudIdentitytoolkitV2PasswordPolicy customStrengthOptions(GoogleCloudIdentitytoolkitV2CustomStrengthOptions customStrengthOptions) {
    this.customStrengthOptions = customStrengthOptions;
    return this;
  }

  /**
   * Get customStrengthOptions
   * @return customStrengthOptions
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitV2CustomStrengthOptions getCustomStrengthOptions() {
    return customStrengthOptions;
  }

  public void setCustomStrengthOptions(GoogleCloudIdentitytoolkitV2CustomStrengthOptions customStrengthOptions) {
    this.customStrengthOptions = customStrengthOptions;
  }


  /**
   * Output only. Which enforcement mode to use for the password policy.
   * @return enforcementState
   */
  @javax.annotation.Nullable
  public EnforcementStateEnum getEnforcementState() {
    return enforcementState;
  }



  public GoogleCloudIdentitytoolkitV2PasswordPolicy forceUpgradeOnSignin(Boolean forceUpgradeOnSignin) {
    this.forceUpgradeOnSignin = forceUpgradeOnSignin;
    return this;
  }

  /**
   * Users must have a password compliant with the password policy to sign-in.
   * @return forceUpgradeOnSignin
   */
  @javax.annotation.Nullable
  public Boolean getForceUpgradeOnSignin() {
    return forceUpgradeOnSignin;
  }

  public void setForceUpgradeOnSignin(Boolean forceUpgradeOnSignin) {
    this.forceUpgradeOnSignin = forceUpgradeOnSignin;
  }


  /**
   * Output only. schema version number for the password policy
   * @return schemaVersion
   */
  @javax.annotation.Nullable
  public Integer getSchemaVersion() {
    return schemaVersion;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitV2PasswordPolicy googleCloudIdentitytoolkitV2PasswordPolicy = (GoogleCloudIdentitytoolkitV2PasswordPolicy) o;
    return Objects.equals(this.allowedNonAlphanumericCharacters, googleCloudIdentitytoolkitV2PasswordPolicy.allowedNonAlphanumericCharacters) &&
        Objects.equals(this.customStrengthOptions, googleCloudIdentitytoolkitV2PasswordPolicy.customStrengthOptions) &&
        Objects.equals(this.enforcementState, googleCloudIdentitytoolkitV2PasswordPolicy.enforcementState) &&
        Objects.equals(this.forceUpgradeOnSignin, googleCloudIdentitytoolkitV2PasswordPolicy.forceUpgradeOnSignin) &&
        Objects.equals(this.schemaVersion, googleCloudIdentitytoolkitV2PasswordPolicy.schemaVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedNonAlphanumericCharacters, customStrengthOptions, enforcementState, forceUpgradeOnSignin, schemaVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitV2PasswordPolicy {\n");
    sb.append("    allowedNonAlphanumericCharacters: ").append(toIndentedString(allowedNonAlphanumericCharacters)).append("\n");
    sb.append("    customStrengthOptions: ").append(toIndentedString(customStrengthOptions)).append("\n");
    sb.append("    enforcementState: ").append(toIndentedString(enforcementState)).append("\n");
    sb.append("    forceUpgradeOnSignin: ").append(toIndentedString(forceUpgradeOnSignin)).append("\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedNonAlphanumericCharacters");
    openapiFields.add("customStrengthOptions");
    openapiFields.add("enforcementState");
    openapiFields.add("forceUpgradeOnSignin");
    openapiFields.add("schemaVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitV2PasswordPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitV2PasswordPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitV2PasswordPolicy is not found in the empty JSON string", GoogleCloudIdentitytoolkitV2PasswordPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitV2PasswordPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitV2PasswordPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedNonAlphanumericCharacters") != null && !jsonObj.get("allowedNonAlphanumericCharacters").isJsonNull() && !jsonObj.get("allowedNonAlphanumericCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedNonAlphanumericCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("allowedNonAlphanumericCharacters").toString()));
      }
      // validate the optional field `customStrengthOptions`
      if (jsonObj.get("customStrengthOptions") != null && !jsonObj.get("customStrengthOptions").isJsonNull()) {
        GoogleCloudIdentitytoolkitV2CustomStrengthOptions.validateJsonElement(jsonObj.get("customStrengthOptions"));
      }
      if ((jsonObj.get("enforcementState") != null && !jsonObj.get("enforcementState").isJsonNull()) && !jsonObj.get("enforcementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforcementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforcementState").toString()));
      }
      // validate the optional field `enforcementState`
      if (jsonObj.get("enforcementState") != null && !jsonObj.get("enforcementState").isJsonNull()) {
        EnforcementStateEnum.validateJsonElement(jsonObj.get("enforcementState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitV2PasswordPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitV2PasswordPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitV2PasswordPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitV2PasswordPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitV2PasswordPolicy>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitV2PasswordPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitV2PasswordPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitV2PasswordPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitV2PasswordPolicy
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitV2PasswordPolicy
   */
  public static GoogleCloudIdentitytoolkitV2PasswordPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitV2PasswordPolicy.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitV2PasswordPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

