/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information of custom domain DNS verification. By default, default_domain will be used. A custom domain can be configured using VerifyCustomDomain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2DnsInfo {
  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "customDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private String customDomain;

  /**
   * Output only. The current verification state of the custom domain. The custom domain will only be used once the domain verification is successful.
   */
  @JsonAdapter(CustomDomainStateEnum.Adapter.class)
  public enum CustomDomainStateEnum {
    VERIFICATION_STATE_UNSPECIFIED("VERIFICATION_STATE_UNSPECIFIED"),
    
    NOT_STARTED("NOT_STARTED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    FAILED("FAILED"),
    
    SUCCEEDED("SUCCEEDED");

    private String value;

    CustomDomainStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomDomainStateEnum fromValue(String value) {
      for (CustomDomainStateEnum b : CustomDomainStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomDomainStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomDomainStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomDomainStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomDomainStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomDomainStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN_STATE = "customDomainState";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN_STATE)
  private CustomDomainStateEnum customDomainState;

  public static final String SERIALIZED_NAME_DOMAIN_VERIFICATION_REQUEST_TIME = "domainVerificationRequestTime";
  @SerializedName(SERIALIZED_NAME_DOMAIN_VERIFICATION_REQUEST_TIME)
  private String domainVerificationRequestTime;

  public static final String SERIALIZED_NAME_PENDING_CUSTOM_DOMAIN = "pendingCustomDomain";
  @SerializedName(SERIALIZED_NAME_PENDING_CUSTOM_DOMAIN)
  private String pendingCustomDomain;

  public static final String SERIALIZED_NAME_USE_CUSTOM_DOMAIN = "useCustomDomain";
  @SerializedName(SERIALIZED_NAME_USE_CUSTOM_DOMAIN)
  private Boolean useCustomDomain;

  public GoogleCloudIdentitytoolkitAdminV2DnsInfo() {
  }

  public GoogleCloudIdentitytoolkitAdminV2DnsInfo(
     String customDomain, 
     CustomDomainStateEnum customDomainState, 
     String domainVerificationRequestTime, 
     String pendingCustomDomain
  ) {
    this();
    this.customDomain = customDomain;
    this.customDomainState = customDomainState;
    this.domainVerificationRequestTime = domainVerificationRequestTime;
    this.pendingCustomDomain = pendingCustomDomain;
  }

  /**
   * Output only. The applied verified custom domain.
   * @return customDomain
   */
  @javax.annotation.Nullable
  public String getCustomDomain() {
    return customDomain;
  }



  /**
   * Output only. The current verification state of the custom domain. The custom domain will only be used once the domain verification is successful.
   * @return customDomainState
   */
  @javax.annotation.Nullable
  public CustomDomainStateEnum getCustomDomainState() {
    return customDomainState;
  }



  /**
   * Output only. The timestamp of initial request for the current domain verification.
   * @return domainVerificationRequestTime
   */
  @javax.annotation.Nullable
  public String getDomainVerificationRequestTime() {
    return domainVerificationRequestTime;
  }



  /**
   * Output only. The custom domain that&#39;s to be verified.
   * @return pendingCustomDomain
   */
  @javax.annotation.Nullable
  public String getPendingCustomDomain() {
    return pendingCustomDomain;
  }



  public GoogleCloudIdentitytoolkitAdminV2DnsInfo useCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
    return this;
  }

  /**
   * Whether to use custom domain.
   * @return useCustomDomain
   */
  @javax.annotation.Nullable
  public Boolean getUseCustomDomain() {
    return useCustomDomain;
  }

  public void setUseCustomDomain(Boolean useCustomDomain) {
    this.useCustomDomain = useCustomDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2DnsInfo googleCloudIdentitytoolkitAdminV2DnsInfo = (GoogleCloudIdentitytoolkitAdminV2DnsInfo) o;
    return Objects.equals(this.customDomain, googleCloudIdentitytoolkitAdminV2DnsInfo.customDomain) &&
        Objects.equals(this.customDomainState, googleCloudIdentitytoolkitAdminV2DnsInfo.customDomainState) &&
        Objects.equals(this.domainVerificationRequestTime, googleCloudIdentitytoolkitAdminV2DnsInfo.domainVerificationRequestTime) &&
        Objects.equals(this.pendingCustomDomain, googleCloudIdentitytoolkitAdminV2DnsInfo.pendingCustomDomain) &&
        Objects.equals(this.useCustomDomain, googleCloudIdentitytoolkitAdminV2DnsInfo.useCustomDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customDomain, customDomainState, domainVerificationRequestTime, pendingCustomDomain, useCustomDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2DnsInfo {\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    customDomainState: ").append(toIndentedString(customDomainState)).append("\n");
    sb.append("    domainVerificationRequestTime: ").append(toIndentedString(domainVerificationRequestTime)).append("\n");
    sb.append("    pendingCustomDomain: ").append(toIndentedString(pendingCustomDomain)).append("\n");
    sb.append("    useCustomDomain: ").append(toIndentedString(useCustomDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customDomain");
    openapiFields.add("customDomainState");
    openapiFields.add("domainVerificationRequestTime");
    openapiFields.add("pendingCustomDomain");
    openapiFields.add("useCustomDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2DnsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2DnsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2DnsInfo is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2DnsInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2DnsInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2DnsInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customDomain") != null && !jsonObj.get("customDomain").isJsonNull()) && !jsonObj.get("customDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customDomain").toString()));
      }
      if ((jsonObj.get("customDomainState") != null && !jsonObj.get("customDomainState").isJsonNull()) && !jsonObj.get("customDomainState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customDomainState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customDomainState").toString()));
      }
      // validate the optional field `customDomainState`
      if (jsonObj.get("customDomainState") != null && !jsonObj.get("customDomainState").isJsonNull()) {
        CustomDomainStateEnum.validateJsonElement(jsonObj.get("customDomainState"));
      }
      if ((jsonObj.get("domainVerificationRequestTime") != null && !jsonObj.get("domainVerificationRequestTime").isJsonNull()) && !jsonObj.get("domainVerificationRequestTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainVerificationRequestTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainVerificationRequestTime").toString()));
      }
      if ((jsonObj.get("pendingCustomDomain") != null && !jsonObj.get("pendingCustomDomain").isJsonNull()) && !jsonObj.get("pendingCustomDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pendingCustomDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pendingCustomDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2DnsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2DnsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2DnsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2DnsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2DnsInfo>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2DnsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2DnsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2DnsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2DnsInfo
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2DnsInfo
   */
  public static GoogleCloudIdentitytoolkitAdminV2DnsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2DnsInfo.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2DnsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

