/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for the password policy on the project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig {
  public static final String SERIALIZED_NAME_FORCE_UPGRADE_ON_SIGNIN = "forceUpgradeOnSignin";
  @SerializedName(SERIALIZED_NAME_FORCE_UPGRADE_ON_SIGNIN)
  private Boolean forceUpgradeOnSignin;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private String lastUpdateTime;

  /**
   * Which enforcement mode to use for the password policy.
   */
  @JsonAdapter(PasswordPolicyEnforcementStateEnum.Adapter.class)
  public enum PasswordPolicyEnforcementStateEnum {
    PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED("PASSWORD_POLICY_ENFORCEMENT_STATE_UNSPECIFIED"),
    
    FALSE("false"),
    
    ENFORCE("ENFORCE");

    private String value;

    PasswordPolicyEnforcementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PasswordPolicyEnforcementStateEnum fromValue(String value) {
      for (PasswordPolicyEnforcementStateEnum b : PasswordPolicyEnforcementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PasswordPolicyEnforcementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PasswordPolicyEnforcementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PasswordPolicyEnforcementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PasswordPolicyEnforcementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PasswordPolicyEnforcementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSWORD_POLICY_ENFORCEMENT_STATE = "passwordPolicyEnforcementState";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY_ENFORCEMENT_STATE)
  private PasswordPolicyEnforcementStateEnum passwordPolicyEnforcementState;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY_VERSIONS = "passwordPolicyVersions";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY_VERSIONS)
  private List<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> passwordPolicyVersions = new ArrayList<>();

  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig(
     String lastUpdateTime
  ) {
    this();
    this.lastUpdateTime = lastUpdateTime;
  }

  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig forceUpgradeOnSignin(Boolean forceUpgradeOnSignin) {
    this.forceUpgradeOnSignin = forceUpgradeOnSignin;
    return this;
  }

  /**
   * Users must have a password compliant with the password policy to sign-in.
   * @return forceUpgradeOnSignin
   */
  @javax.annotation.Nullable
  public Boolean getForceUpgradeOnSignin() {
    return forceUpgradeOnSignin;
  }

  public void setForceUpgradeOnSignin(Boolean forceUpgradeOnSignin) {
    this.forceUpgradeOnSignin = forceUpgradeOnSignin;
  }


  /**
   * Output only. The last time the password policy on the project was updated.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }



  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig passwordPolicyEnforcementState(PasswordPolicyEnforcementStateEnum passwordPolicyEnforcementState) {
    this.passwordPolicyEnforcementState = passwordPolicyEnforcementState;
    return this;
  }

  /**
   * Which enforcement mode to use for the password policy.
   * @return passwordPolicyEnforcementState
   */
  @javax.annotation.Nullable
  public PasswordPolicyEnforcementStateEnum getPasswordPolicyEnforcementState() {
    return passwordPolicyEnforcementState;
  }

  public void setPasswordPolicyEnforcementState(PasswordPolicyEnforcementStateEnum passwordPolicyEnforcementState) {
    this.passwordPolicyEnforcementState = passwordPolicyEnforcementState;
  }


  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig passwordPolicyVersions(List<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> passwordPolicyVersions) {
    this.passwordPolicyVersions = passwordPolicyVersions;
    return this;
  }

  public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig addPasswordPolicyVersionsItem(GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion passwordPolicyVersionsItem) {
    if (this.passwordPolicyVersions == null) {
      this.passwordPolicyVersions = new ArrayList<>();
    }
    this.passwordPolicyVersions.add(passwordPolicyVersionsItem);
    return this;
  }

  /**
   * Must be of length 1. Contains the strength attributes for the password policy.
   * @return passwordPolicyVersions
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> getPasswordPolicyVersions() {
    return passwordPolicyVersions;
  }

  public void setPasswordPolicyVersions(List<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion> passwordPolicyVersions) {
    this.passwordPolicyVersions = passwordPolicyVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig googleCloudIdentitytoolkitAdminV2PasswordPolicyConfig = (GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig) o;
    return Objects.equals(this.forceUpgradeOnSignin, googleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.forceUpgradeOnSignin) &&
        Objects.equals(this.lastUpdateTime, googleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.lastUpdateTime) &&
        Objects.equals(this.passwordPolicyEnforcementState, googleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.passwordPolicyEnforcementState) &&
        Objects.equals(this.passwordPolicyVersions, googleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.passwordPolicyVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forceUpgradeOnSignin, lastUpdateTime, passwordPolicyEnforcementState, passwordPolicyVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig {\n");
    sb.append("    forceUpgradeOnSignin: ").append(toIndentedString(forceUpgradeOnSignin)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    passwordPolicyEnforcementState: ").append(toIndentedString(passwordPolicyEnforcementState)).append("\n");
    sb.append("    passwordPolicyVersions: ").append(toIndentedString(passwordPolicyVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("forceUpgradeOnSignin");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("passwordPolicyEnforcementState");
    openapiFields.add("passwordPolicyVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) && !jsonObj.get("lastUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTime").toString()));
      }
      if ((jsonObj.get("passwordPolicyEnforcementState") != null && !jsonObj.get("passwordPolicyEnforcementState").isJsonNull()) && !jsonObj.get("passwordPolicyEnforcementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordPolicyEnforcementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordPolicyEnforcementState").toString()));
      }
      // validate the optional field `passwordPolicyEnforcementState`
      if (jsonObj.get("passwordPolicyEnforcementState") != null && !jsonObj.get("passwordPolicyEnforcementState").isJsonNull()) {
        PasswordPolicyEnforcementStateEnum.validateJsonElement(jsonObj.get("passwordPolicyEnforcementState"));
      }
      if (jsonObj.get("passwordPolicyVersions") != null && !jsonObj.get("passwordPolicyVersions").isJsonNull()) {
        JsonArray jsonArraypasswordPolicyVersions = jsonObj.getAsJsonArray("passwordPolicyVersions");
        if (jsonArraypasswordPolicyVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("passwordPolicyVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `passwordPolicyVersions` to be an array in the JSON string but got `%s`", jsonObj.get("passwordPolicyVersions").toString()));
          }

          // validate the optional field `passwordPolicyVersions` (array)
          for (int i = 0; i < jsonArraypasswordPolicyVersions.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2PasswordPolicyVersion.validateJsonElement(jsonArraypasswordPolicyVersions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

