/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2SpCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The SAML SP (Service Provider) configuration when the project acts as the relying party to receive and accept an authentication assertion issued by a SAML identity provider.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2SpConfig {
  public static final String SERIALIZED_NAME_CALLBACK_URI = "callbackUri";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URI)
  private String callbackUri;

  public static final String SERIALIZED_NAME_SP_CERTIFICATES = "spCertificates";
  @SerializedName(SERIALIZED_NAME_SP_CERTIFICATES)
  private List<GoogleCloudIdentitytoolkitAdminV2SpCertificate> spCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_SP_ENTITY_ID = "spEntityId";
  @SerializedName(SERIALIZED_NAME_SP_ENTITY_ID)
  private String spEntityId;

  public GoogleCloudIdentitytoolkitAdminV2SpConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2SpConfig(
     List<GoogleCloudIdentitytoolkitAdminV2SpCertificate> spCertificates
  ) {
    this();
    this.spCertificates = spCertificates;
  }

  public GoogleCloudIdentitytoolkitAdminV2SpConfig callbackUri(String callbackUri) {
    this.callbackUri = callbackUri;
    return this;
  }

  /**
   * Callback URI where responses from IDP are handled.
   * @return callbackUri
   */
  @javax.annotation.Nullable
  public String getCallbackUri() {
    return callbackUri;
  }

  public void setCallbackUri(String callbackUri) {
    this.callbackUri = callbackUri;
  }


  /**
   * Output only. Public certificates generated by the server to verify the signature in SAMLRequest in the SP-initiated flow.
   * @return spCertificates
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2SpCertificate> getSpCertificates() {
    return spCertificates;
  }



  public GoogleCloudIdentitytoolkitAdminV2SpConfig spEntityId(String spEntityId) {
    this.spEntityId = spEntityId;
    return this;
  }

  /**
   * Unique identifier for all SAML entities.
   * @return spEntityId
   */
  @javax.annotation.Nullable
  public String getSpEntityId() {
    return spEntityId;
  }

  public void setSpEntityId(String spEntityId) {
    this.spEntityId = spEntityId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2SpConfig googleCloudIdentitytoolkitAdminV2SpConfig = (GoogleCloudIdentitytoolkitAdminV2SpConfig) o;
    return Objects.equals(this.callbackUri, googleCloudIdentitytoolkitAdminV2SpConfig.callbackUri) &&
        Objects.equals(this.spCertificates, googleCloudIdentitytoolkitAdminV2SpConfig.spCertificates) &&
        Objects.equals(this.spEntityId, googleCloudIdentitytoolkitAdminV2SpConfig.spEntityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackUri, spCertificates, spEntityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2SpConfig {\n");
    sb.append("    callbackUri: ").append(toIndentedString(callbackUri)).append("\n");
    sb.append("    spCertificates: ").append(toIndentedString(spCertificates)).append("\n");
    sb.append("    spEntityId: ").append(toIndentedString(spEntityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callbackUri");
    openapiFields.add("spCertificates");
    openapiFields.add("spEntityId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2SpConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2SpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2SpConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2SpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2SpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2SpConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callbackUri") != null && !jsonObj.get("callbackUri").isJsonNull()) && !jsonObj.get("callbackUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUri").toString()));
      }
      if (jsonObj.get("spCertificates") != null && !jsonObj.get("spCertificates").isJsonNull()) {
        JsonArray jsonArrayspCertificates = jsonObj.getAsJsonArray("spCertificates");
        if (jsonArrayspCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("spCertificates").toString()));
          }

          // validate the optional field `spCertificates` (array)
          for (int i = 0; i < jsonArrayspCertificates.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2SpCertificate.validateJsonElement(jsonArrayspCertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("spEntityId") != null && !jsonObj.get("spEntityId").isJsonNull()) && !jsonObj.get("spEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spEntityId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2SpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2SpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2SpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2SpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2SpConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2SpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2SpConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2SpConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2SpConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2SpConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2SpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2SpConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2SpConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

