/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * History information of the hash algorithm and key. Different accounts&#39; passwords may be generated by different version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2HashConfig {
  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   */
  @JsonAdapter(AlgorithmEnum.Adapter.class)
  public enum AlgorithmEnum {
    HASH_ALGORITHM_UNSPECIFIED("HASH_ALGORITHM_UNSPECIFIED"),
    
    HMAC_SHA256("HMAC_SHA256"),
    
    HMAC_SHA1("HMAC_SHA1"),
    
    HMAC_MD5("HMAC_MD5"),
    
    SCRYPT("SCRYPT"),
    
    PBKDF_SHA1("PBKDF_SHA1"),
    
    MD5("MD5"),
    
    HMAC_SHA512("HMAC_SHA512"),
    
    SHA1("SHA1"),
    
    BCRYPT("BCRYPT"),
    
    PBKDF2_SHA256("PBKDF2_SHA256"),
    
    SHA256("SHA256"),
    
    SHA512("SHA512"),
    
    STANDARD_SCRYPT("STANDARD_SCRYPT");

    private String value;

    AlgorithmEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlgorithmEnum fromValue(String value) {
      for (AlgorithmEnum b : AlgorithmEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlgorithmEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlgorithmEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlgorithmEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlgorithmEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlgorithmEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  private AlgorithmEnum algorithm;

  public static final String SERIALIZED_NAME_MEMORY_COST = "memoryCost";
  @SerializedName(SERIALIZED_NAME_MEMORY_COST)
  private Integer memoryCost;

  public static final String SERIALIZED_NAME_ROUNDS = "rounds";
  @SerializedName(SERIALIZED_NAME_ROUNDS)
  private Integer rounds;

  public static final String SERIALIZED_NAME_SALT_SEPARATOR = "saltSeparator";
  @SerializedName(SERIALIZED_NAME_SALT_SEPARATOR)
  private String saltSeparator;

  public static final String SERIALIZED_NAME_SIGNER_KEY = "signerKey";
  @SerializedName(SERIALIZED_NAME_SIGNER_KEY)
  private String signerKey;

  public GoogleCloudIdentitytoolkitAdminV2HashConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2HashConfig(
     AlgorithmEnum algorithm, 
     Integer memoryCost, 
     Integer rounds, 
     String saltSeparator, 
     String signerKey
  ) {
    this();
    this.algorithm = algorithm;
    this.memoryCost = memoryCost;
    this.rounds = rounds;
    this.saltSeparator = saltSeparator;
    this.signerKey = signerKey;
  }

  /**
   * Output only. Different password hash algorithms used in Identity Toolkit.
   * @return algorithm
   */
  @javax.annotation.Nullable
  public AlgorithmEnum getAlgorithm() {
    return algorithm;
  }



  /**
   * Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
   * @return memoryCost
   */
  @javax.annotation.Nullable
  public Integer getMemoryCost() {
    return memoryCost;
  }



  /**
   * Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
   * @return rounds
   */
  @javax.annotation.Nullable
  public Integer getRounds() {
    return rounds;
  }



  /**
   * Output only. Non-printable character to be inserted between the salt and plain text password in base64.
   * @return saltSeparator
   */
  @javax.annotation.Nullable
  public String getSaltSeparator() {
    return saltSeparator;
  }



  /**
   * Output only. Signer key in base64.
   * @return signerKey
   */
  @javax.annotation.Nullable
  public String getSignerKey() {
    return signerKey;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2HashConfig googleCloudIdentitytoolkitAdminV2HashConfig = (GoogleCloudIdentitytoolkitAdminV2HashConfig) o;
    return Objects.equals(this.algorithm, googleCloudIdentitytoolkitAdminV2HashConfig.algorithm) &&
        Objects.equals(this.memoryCost, googleCloudIdentitytoolkitAdminV2HashConfig.memoryCost) &&
        Objects.equals(this.rounds, googleCloudIdentitytoolkitAdminV2HashConfig.rounds) &&
        Objects.equals(this.saltSeparator, googleCloudIdentitytoolkitAdminV2HashConfig.saltSeparator) &&
        Objects.equals(this.signerKey, googleCloudIdentitytoolkitAdminV2HashConfig.signerKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithm, memoryCost, rounds, saltSeparator, signerKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2HashConfig {\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("    memoryCost: ").append(toIndentedString(memoryCost)).append("\n");
    sb.append("    rounds: ").append(toIndentedString(rounds)).append("\n");
    sb.append("    saltSeparator: ").append(toIndentedString(saltSeparator)).append("\n");
    sb.append("    signerKey: ").append(toIndentedString(signerKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("algorithm");
    openapiFields.add("memoryCost");
    openapiFields.add("rounds");
    openapiFields.add("saltSeparator");
    openapiFields.add("signerKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2HashConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2HashConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2HashConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2HashConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2HashConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2HashConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
      // validate the optional field `algorithm`
      if (jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) {
        AlgorithmEnum.validateJsonElement(jsonObj.get("algorithm"));
      }
      if ((jsonObj.get("saltSeparator") != null && !jsonObj.get("saltSeparator").isJsonNull()) && !jsonObj.get("saltSeparator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `saltSeparator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("saltSeparator").toString()));
      }
      if ((jsonObj.get("signerKey") != null && !jsonObj.get("signerKey").isJsonNull()) && !jsonObj.get("signerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signerKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2HashConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2HashConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2HashConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2HashConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2HashConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2HashConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2HashConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2HashConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2HashConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2HashConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2HashConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2HashConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2HashConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

