/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2RecaptchaKey;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The reCAPTCHA Enterprise integration config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig {
  /**
   * The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
   */
  @JsonAdapter(EmailPasswordEnforcementStateEnum.Adapter.class)
  public enum EmailPasswordEnforcementStateEnum {
    RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED("RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED"),
    
    FALSE("false"),
    
    AUDIT("AUDIT"),
    
    ENFORCE("ENFORCE");

    private String value;

    EmailPasswordEnforcementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailPasswordEnforcementStateEnum fromValue(String value) {
      for (EmailPasswordEnforcementStateEnum b : EmailPasswordEnforcementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailPasswordEnforcementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailPasswordEnforcementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailPasswordEnforcementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailPasswordEnforcementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EmailPasswordEnforcementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EMAIL_PASSWORD_ENFORCEMENT_STATE = "emailPasswordEnforcementState";
  @SerializedName(SERIALIZED_NAME_EMAIL_PASSWORD_ENFORCEMENT_STATE)
  private EmailPasswordEnforcementStateEnum emailPasswordEnforcementState;

  public static final String SERIALIZED_NAME_MANAGED_RULES = "managedRules";
  @SerializedName(SERIALIZED_NAME_MANAGED_RULES)
  private List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> managedRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECAPTCHA_KEYS = "recaptchaKeys";
  @SerializedName(SERIALIZED_NAME_RECAPTCHA_KEYS)
  private List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> recaptchaKeys = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_ACCOUNT_DEFENDER = "useAccountDefender";
  @SerializedName(SERIALIZED_NAME_USE_ACCOUNT_DEFENDER)
  private Boolean useAccountDefender;

  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig(
     List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> recaptchaKeys
  ) {
    this();
    this.recaptchaKeys = recaptchaKeys;
  }

  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig emailPasswordEnforcementState(EmailPasswordEnforcementStateEnum emailPasswordEnforcementState) {
    this.emailPasswordEnforcementState = emailPasswordEnforcementState;
    return this;
  }

  /**
   * The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
   * @return emailPasswordEnforcementState
   */
  @javax.annotation.Nullable
  public EmailPasswordEnforcementStateEnum getEmailPasswordEnforcementState() {
    return emailPasswordEnforcementState;
  }

  public void setEmailPasswordEnforcementState(EmailPasswordEnforcementStateEnum emailPasswordEnforcementState) {
    this.emailPasswordEnforcementState = emailPasswordEnforcementState;
  }


  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig managedRules(List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> managedRules) {
    this.managedRules = managedRules;
    return this;
  }

  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig addManagedRulesItem(GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule managedRulesItem) {
    if (this.managedRules == null) {
      this.managedRules = new ArrayList<>();
    }
    this.managedRules.add(managedRulesItem);
    return this;
  }

  /**
   * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
   * @return managedRules
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> getManagedRules() {
    return managedRules;
  }

  public void setManagedRules(List<GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule> managedRules) {
    this.managedRules = managedRules;
  }


  /**
   * Output only. The reCAPTCHA keys.
   * @return recaptchaKeys
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2RecaptchaKey> getRecaptchaKeys() {
    return recaptchaKeys;
  }



  public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig useAccountDefender(Boolean useAccountDefender) {
    this.useAccountDefender = useAccountDefender;
    return this;
  }

  /**
   * Whether to use the account defender for reCAPTCHA assessment. Defaults to &#x60;false&#x60;.
   * @return useAccountDefender
   */
  @javax.annotation.Nullable
  public Boolean getUseAccountDefender() {
    return useAccountDefender;
  }

  public void setUseAccountDefender(Boolean useAccountDefender) {
    this.useAccountDefender = useAccountDefender;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig googleCloudIdentitytoolkitAdminV2RecaptchaConfig = (GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig) o;
    return Objects.equals(this.emailPasswordEnforcementState, googleCloudIdentitytoolkitAdminV2RecaptchaConfig.emailPasswordEnforcementState) &&
        Objects.equals(this.managedRules, googleCloudIdentitytoolkitAdminV2RecaptchaConfig.managedRules) &&
        Objects.equals(this.recaptchaKeys, googleCloudIdentitytoolkitAdminV2RecaptchaConfig.recaptchaKeys) &&
        Objects.equals(this.useAccountDefender, googleCloudIdentitytoolkitAdminV2RecaptchaConfig.useAccountDefender);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailPasswordEnforcementState, managedRules, recaptchaKeys, useAccountDefender);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig {\n");
    sb.append("    emailPasswordEnforcementState: ").append(toIndentedString(emailPasswordEnforcementState)).append("\n");
    sb.append("    managedRules: ").append(toIndentedString(managedRules)).append("\n");
    sb.append("    recaptchaKeys: ").append(toIndentedString(recaptchaKeys)).append("\n");
    sb.append("    useAccountDefender: ").append(toIndentedString(useAccountDefender)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailPasswordEnforcementState");
    openapiFields.add("managedRules");
    openapiFields.add("recaptchaKeys");
    openapiFields.add("useAccountDefender");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("emailPasswordEnforcementState") != null && !jsonObj.get("emailPasswordEnforcementState").isJsonNull()) && !jsonObj.get("emailPasswordEnforcementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailPasswordEnforcementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailPasswordEnforcementState").toString()));
      }
      // validate the optional field `emailPasswordEnforcementState`
      if (jsonObj.get("emailPasswordEnforcementState") != null && !jsonObj.get("emailPasswordEnforcementState").isJsonNull()) {
        EmailPasswordEnforcementStateEnum.validateJsonElement(jsonObj.get("emailPasswordEnforcementState"));
      }
      if (jsonObj.get("managedRules") != null && !jsonObj.get("managedRules").isJsonNull()) {
        JsonArray jsonArraymanagedRules = jsonObj.getAsJsonArray("managedRules");
        if (jsonArraymanagedRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("managedRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `managedRules` to be an array in the JSON string but got `%s`", jsonObj.get("managedRules").toString()));
          }

          // validate the optional field `managedRules` (array)
          for (int i = 0; i < jsonArraymanagedRules.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.validateJsonElement(jsonArraymanagedRules.get(i));
          };
        }
      }
      if (jsonObj.get("recaptchaKeys") != null && !jsonObj.get("recaptchaKeys").isJsonNull()) {
        JsonArray jsonArrayrecaptchaKeys = jsonObj.getAsJsonArray("recaptchaKeys");
        if (jsonArrayrecaptchaKeys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recaptchaKeys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recaptchaKeys` to be an array in the JSON string but got `%s`", jsonObj.get("recaptchaKeys").toString()));
          }

          // validate the optional field `recaptchaKeys` (array)
          for (int i = 0; i < jsonArrayrecaptchaKeys.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2RecaptchaKey.validateJsonElement(jsonArrayrecaptchaKeys.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

