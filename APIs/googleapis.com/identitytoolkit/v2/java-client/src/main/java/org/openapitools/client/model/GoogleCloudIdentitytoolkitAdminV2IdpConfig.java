/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2IdpCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The SAML IdP (Identity Provider) configuration when the project acts as the relying party.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2IdpConfig {
  public static final String SERIALIZED_NAME_IDP_CERTIFICATES = "idpCertificates";
  @SerializedName(SERIALIZED_NAME_IDP_CERTIFICATES)
  private List<GoogleCloudIdentitytoolkitAdminV2IdpCertificate> idpCertificates = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDP_ENTITY_ID = "idpEntityId";
  @SerializedName(SERIALIZED_NAME_IDP_ENTITY_ID)
  private String idpEntityId;

  public static final String SERIALIZED_NAME_SIGN_REQUEST = "signRequest";
  @SerializedName(SERIALIZED_NAME_SIGN_REQUEST)
  private Boolean signRequest;

  public static final String SERIALIZED_NAME_SSO_URL = "ssoUrl";
  @SerializedName(SERIALIZED_NAME_SSO_URL)
  private String ssoUrl;

  public GoogleCloudIdentitytoolkitAdminV2IdpConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2IdpConfig idpCertificates(List<GoogleCloudIdentitytoolkitAdminV2IdpCertificate> idpCertificates) {
    this.idpCertificates = idpCertificates;
    return this;
  }

  public GoogleCloudIdentitytoolkitAdminV2IdpConfig addIdpCertificatesItem(GoogleCloudIdentitytoolkitAdminV2IdpCertificate idpCertificatesItem) {
    if (this.idpCertificates == null) {
      this.idpCertificates = new ArrayList<>();
    }
    this.idpCertificates.add(idpCertificatesItem);
    return this;
  }

  /**
   * IDP&#39;s public keys for verifying signature in the assertions.
   * @return idpCertificates
   */
  @javax.annotation.Nullable
  public List<GoogleCloudIdentitytoolkitAdminV2IdpCertificate> getIdpCertificates() {
    return idpCertificates;
  }

  public void setIdpCertificates(List<GoogleCloudIdentitytoolkitAdminV2IdpCertificate> idpCertificates) {
    this.idpCertificates = idpCertificates;
  }


  public GoogleCloudIdentitytoolkitAdminV2IdpConfig idpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
    return this;
  }

  /**
   * Unique identifier for all SAML entities.
   * @return idpEntityId
   */
  @javax.annotation.Nullable
  public String getIdpEntityId() {
    return idpEntityId;
  }

  public void setIdpEntityId(String idpEntityId) {
    this.idpEntityId = idpEntityId;
  }


  public GoogleCloudIdentitytoolkitAdminV2IdpConfig signRequest(Boolean signRequest) {
    this.signRequest = signRequest;
    return this;
  }

  /**
   * Indicates if outbounding SAMLRequest should be signed.
   * @return signRequest
   */
  @javax.annotation.Nullable
  public Boolean getSignRequest() {
    return signRequest;
  }

  public void setSignRequest(Boolean signRequest) {
    this.signRequest = signRequest;
  }


  public GoogleCloudIdentitytoolkitAdminV2IdpConfig ssoUrl(String ssoUrl) {
    this.ssoUrl = ssoUrl;
    return this;
  }

  /**
   * URL to send Authentication request to.
   * @return ssoUrl
   */
  @javax.annotation.Nullable
  public String getSsoUrl() {
    return ssoUrl;
  }

  public void setSsoUrl(String ssoUrl) {
    this.ssoUrl = ssoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2IdpConfig googleCloudIdentitytoolkitAdminV2IdpConfig = (GoogleCloudIdentitytoolkitAdminV2IdpConfig) o;
    return Objects.equals(this.idpCertificates, googleCloudIdentitytoolkitAdminV2IdpConfig.idpCertificates) &&
        Objects.equals(this.idpEntityId, googleCloudIdentitytoolkitAdminV2IdpConfig.idpEntityId) &&
        Objects.equals(this.signRequest, googleCloudIdentitytoolkitAdminV2IdpConfig.signRequest) &&
        Objects.equals(this.ssoUrl, googleCloudIdentitytoolkitAdminV2IdpConfig.ssoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idpCertificates, idpEntityId, signRequest, ssoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2IdpConfig {\n");
    sb.append("    idpCertificates: ").append(toIndentedString(idpCertificates)).append("\n");
    sb.append("    idpEntityId: ").append(toIndentedString(idpEntityId)).append("\n");
    sb.append("    signRequest: ").append(toIndentedString(signRequest)).append("\n");
    sb.append("    ssoUrl: ").append(toIndentedString(ssoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idpCertificates");
    openapiFields.add("idpEntityId");
    openapiFields.add("signRequest");
    openapiFields.add("ssoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2IdpConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2IdpConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2IdpConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2IdpConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2IdpConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2IdpConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("idpCertificates") != null && !jsonObj.get("idpCertificates").isJsonNull()) {
        JsonArray jsonArrayidpCertificates = jsonObj.getAsJsonArray("idpCertificates");
        if (jsonArrayidpCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("idpCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `idpCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("idpCertificates").toString()));
          }

          // validate the optional field `idpCertificates` (array)
          for (int i = 0; i < jsonArrayidpCertificates.size(); i++) {
            GoogleCloudIdentitytoolkitAdminV2IdpCertificate.validateJsonElement(jsonArrayidpCertificates.get(i));
          };
        }
      }
      if ((jsonObj.get("idpEntityId") != null && !jsonObj.get("idpEntityId").isJsonNull()) && !jsonObj.get("idpEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idpEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idpEntityId").toString()));
      }
      if ((jsonObj.get("ssoUrl") != null && !jsonObj.get("ssoUrl").isJsonNull()) && !jsonObj.get("ssoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2IdpConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2IdpConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2IdpConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2IdpConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2IdpConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2IdpConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2IdpConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2IdpConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2IdpConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2IdpConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2IdpConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2IdpConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2IdpConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

