/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2Anonymous;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2Email;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2HashConfig;
import org.openapitools.client.model.GoogleCloudIdentitytoolkitAdminV2PhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration related to local sign in methods.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudIdentitytoolkitAdminV2SignInConfig {
  public static final String SERIALIZED_NAME_ALLOW_DUPLICATE_EMAILS = "allowDuplicateEmails";
  @SerializedName(SERIALIZED_NAME_ALLOW_DUPLICATE_EMAILS)
  private Boolean allowDuplicateEmails;

  public static final String SERIALIZED_NAME_ANONYMOUS = "anonymous";
  @SerializedName(SERIALIZED_NAME_ANONYMOUS)
  private GoogleCloudIdentitytoolkitAdminV2Anonymous anonymous;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private GoogleCloudIdentitytoolkitAdminV2Email email;

  public static final String SERIALIZED_NAME_HASH_CONFIG = "hashConfig";
  @SerializedName(SERIALIZED_NAME_HASH_CONFIG)
  private GoogleCloudIdentitytoolkitAdminV2HashConfig hashConfig;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private GoogleCloudIdentitytoolkitAdminV2PhoneNumber phoneNumber;

  public GoogleCloudIdentitytoolkitAdminV2SignInConfig() {
  }

  public GoogleCloudIdentitytoolkitAdminV2SignInConfig allowDuplicateEmails(Boolean allowDuplicateEmails) {
    this.allowDuplicateEmails = allowDuplicateEmails;
    return this;
  }

  /**
   * Whether to allow more than one account to have the same email.
   * @return allowDuplicateEmails
   */
  @javax.annotation.Nullable
  public Boolean getAllowDuplicateEmails() {
    return allowDuplicateEmails;
  }

  public void setAllowDuplicateEmails(Boolean allowDuplicateEmails) {
    this.allowDuplicateEmails = allowDuplicateEmails;
  }


  public GoogleCloudIdentitytoolkitAdminV2SignInConfig anonymous(GoogleCloudIdentitytoolkitAdminV2Anonymous anonymous) {
    this.anonymous = anonymous;
    return this;
  }

  /**
   * Get anonymous
   * @return anonymous
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitAdminV2Anonymous getAnonymous() {
    return anonymous;
  }

  public void setAnonymous(GoogleCloudIdentitytoolkitAdminV2Anonymous anonymous) {
    this.anonymous = anonymous;
  }


  public GoogleCloudIdentitytoolkitAdminV2SignInConfig email(GoogleCloudIdentitytoolkitAdminV2Email email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitAdminV2Email getEmail() {
    return email;
  }

  public void setEmail(GoogleCloudIdentitytoolkitAdminV2Email email) {
    this.email = email;
  }


  public GoogleCloudIdentitytoolkitAdminV2SignInConfig hashConfig(GoogleCloudIdentitytoolkitAdminV2HashConfig hashConfig) {
    this.hashConfig = hashConfig;
    return this;
  }

  /**
   * Get hashConfig
   * @return hashConfig
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitAdminV2HashConfig getHashConfig() {
    return hashConfig;
  }

  public void setHashConfig(GoogleCloudIdentitytoolkitAdminV2HashConfig hashConfig) {
    this.hashConfig = hashConfig;
  }


  public GoogleCloudIdentitytoolkitAdminV2SignInConfig phoneNumber(GoogleCloudIdentitytoolkitAdminV2PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public GoogleCloudIdentitytoolkitAdminV2PhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(GoogleCloudIdentitytoolkitAdminV2PhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudIdentitytoolkitAdminV2SignInConfig googleCloudIdentitytoolkitAdminV2SignInConfig = (GoogleCloudIdentitytoolkitAdminV2SignInConfig) o;
    return Objects.equals(this.allowDuplicateEmails, googleCloudIdentitytoolkitAdminV2SignInConfig.allowDuplicateEmails) &&
        Objects.equals(this.anonymous, googleCloudIdentitytoolkitAdminV2SignInConfig.anonymous) &&
        Objects.equals(this.email, googleCloudIdentitytoolkitAdminV2SignInConfig.email) &&
        Objects.equals(this.hashConfig, googleCloudIdentitytoolkitAdminV2SignInConfig.hashConfig) &&
        Objects.equals(this.phoneNumber, googleCloudIdentitytoolkitAdminV2SignInConfig.phoneNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowDuplicateEmails, anonymous, email, hashConfig, phoneNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudIdentitytoolkitAdminV2SignInConfig {\n");
    sb.append("    allowDuplicateEmails: ").append(toIndentedString(allowDuplicateEmails)).append("\n");
    sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    hashConfig: ").append(toIndentedString(hashConfig)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowDuplicateEmails");
    openapiFields.add("anonymous");
    openapiFields.add("email");
    openapiFields.add("hashConfig");
    openapiFields.add("phoneNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudIdentitytoolkitAdminV2SignInConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudIdentitytoolkitAdminV2SignInConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudIdentitytoolkitAdminV2SignInConfig is not found in the empty JSON string", GoogleCloudIdentitytoolkitAdminV2SignInConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudIdentitytoolkitAdminV2SignInConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudIdentitytoolkitAdminV2SignInConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `anonymous`
      if (jsonObj.get("anonymous") != null && !jsonObj.get("anonymous").isJsonNull()) {
        GoogleCloudIdentitytoolkitAdminV2Anonymous.validateJsonElement(jsonObj.get("anonymous"));
      }
      // validate the optional field `email`
      if (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) {
        GoogleCloudIdentitytoolkitAdminV2Email.validateJsonElement(jsonObj.get("email"));
      }
      // validate the optional field `hashConfig`
      if (jsonObj.get("hashConfig") != null && !jsonObj.get("hashConfig").isJsonNull()) {
        GoogleCloudIdentitytoolkitAdminV2HashConfig.validateJsonElement(jsonObj.get("hashConfig"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        GoogleCloudIdentitytoolkitAdminV2PhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudIdentitytoolkitAdminV2SignInConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudIdentitytoolkitAdminV2SignInConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudIdentitytoolkitAdminV2SignInConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudIdentitytoolkitAdminV2SignInConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudIdentitytoolkitAdminV2SignInConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudIdentitytoolkitAdminV2SignInConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudIdentitytoolkitAdminV2SignInConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudIdentitytoolkitAdminV2SignInConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudIdentitytoolkitAdminV2SignInConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudIdentitytoolkitAdminV2SignInConfig
   */
  public static GoogleCloudIdentitytoolkitAdminV2SignInConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudIdentitytoolkitAdminV2SignInConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudIdentitytoolkitAdminV2SignInConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

