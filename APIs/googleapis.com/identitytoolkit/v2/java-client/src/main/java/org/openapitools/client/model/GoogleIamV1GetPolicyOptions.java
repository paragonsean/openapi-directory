/*
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encapsulates settings provided to GetIamPolicy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:31.846413-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleIamV1GetPolicyOptions {
  public static final String SERIALIZED_NAME_REQUESTED_POLICY_VERSION = "requestedPolicyVersion";
  @SerializedName(SERIALIZED_NAME_REQUESTED_POLICY_VERSION)
  private Integer requestedPolicyVersion;

  public GoogleIamV1GetPolicyOptions() {
  }

  public GoogleIamV1GetPolicyOptions requestedPolicyVersion(Integer requestedPolicyVersion) {
    this.requestedPolicyVersion = requestedPolicyVersion;
    return this;
  }

  /**
   * Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
   * @return requestedPolicyVersion
   */
  @javax.annotation.Nullable
  public Integer getRequestedPolicyVersion() {
    return requestedPolicyVersion;
  }

  public void setRequestedPolicyVersion(Integer requestedPolicyVersion) {
    this.requestedPolicyVersion = requestedPolicyVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleIamV1GetPolicyOptions googleIamV1GetPolicyOptions = (GoogleIamV1GetPolicyOptions) o;
    return Objects.equals(this.requestedPolicyVersion, googleIamV1GetPolicyOptions.requestedPolicyVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestedPolicyVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleIamV1GetPolicyOptions {\n");
    sb.append("    requestedPolicyVersion: ").append(toIndentedString(requestedPolicyVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestedPolicyVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleIamV1GetPolicyOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleIamV1GetPolicyOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleIamV1GetPolicyOptions is not found in the empty JSON string", GoogleIamV1GetPolicyOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleIamV1GetPolicyOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleIamV1GetPolicyOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleIamV1GetPolicyOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleIamV1GetPolicyOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleIamV1GetPolicyOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleIamV1GetPolicyOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleIamV1GetPolicyOptions>() {
           @Override
           public void write(JsonWriter out, GoogleIamV1GetPolicyOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleIamV1GetPolicyOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleIamV1GetPolicyOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleIamV1GetPolicyOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleIamV1GetPolicyOptions
   */
  public static GoogleIamV1GetPolicyOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleIamV1GetPolicyOptions.class);
  }

  /**
   * Convert an instance of GoogleIamV1GetPolicyOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

