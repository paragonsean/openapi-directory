/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudIdentitytoolkitV2CustomStrengthOptions from './GoogleCloudIdentitytoolkitV2CustomStrengthOptions';

/**
 * The GoogleCloudIdentitytoolkitV2PasswordPolicy model module.
 * @module model/GoogleCloudIdentitytoolkitV2PasswordPolicy
 * @version v2
 */
class GoogleCloudIdentitytoolkitV2PasswordPolicy {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitV2PasswordPolicy</code>.
     * Configuration for password policy.
     * @alias module:model/GoogleCloudIdentitytoolkitV2PasswordPolicy
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitV2PasswordPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitV2PasswordPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitV2PasswordPolicy} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitV2PasswordPolicy} The populated <code>GoogleCloudIdentitytoolkitV2PasswordPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitV2PasswordPolicy();

            if (data.hasOwnProperty('allowedNonAlphanumericCharacters')) {
                obj['allowedNonAlphanumericCharacters'] = ApiClient.convertToType(data['allowedNonAlphanumericCharacters'], ['String']);
            }
            if (data.hasOwnProperty('customStrengthOptions')) {
                obj['customStrengthOptions'] = GoogleCloudIdentitytoolkitV2CustomStrengthOptions.constructFromObject(data['customStrengthOptions']);
            }
            if (data.hasOwnProperty('enforcementState')) {
                obj['enforcementState'] = ApiClient.convertToType(data['enforcementState'], 'String');
            }
            if (data.hasOwnProperty('forceUpgradeOnSignin')) {
                obj['forceUpgradeOnSignin'] = ApiClient.convertToType(data['forceUpgradeOnSignin'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaVersion')) {
                obj['schemaVersion'] = ApiClient.convertToType(data['schemaVersion'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitV2PasswordPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitV2PasswordPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedNonAlphanumericCharacters'])) {
            throw new Error("Expected the field `allowedNonAlphanumericCharacters` to be an array in the JSON data but got " + data['allowedNonAlphanumericCharacters']);
        }
        // validate the optional field `customStrengthOptions`
        if (data['customStrengthOptions']) { // data not null
          GoogleCloudIdentitytoolkitV2CustomStrengthOptions.validateJSON(data['customStrengthOptions']);
        }
        // ensure the json data is a string
        if (data['enforcementState'] && !(typeof data['enforcementState'] === 'string' || data['enforcementState'] instanceof String)) {
            throw new Error("Expected the field `enforcementState` to be a primitive type in the JSON string but got " + data['enforcementState']);
        }

        return true;
    }


}



/**
 * Output only. Allowed characters which satisfy the non_alphanumeric requirement.
 * @member {Array.<String>} allowedNonAlphanumericCharacters
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy.prototype['allowedNonAlphanumericCharacters'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitV2CustomStrengthOptions} customStrengthOptions
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy.prototype['customStrengthOptions'] = undefined;

/**
 * Output only. Which enforcement mode to use for the password policy.
 * @member {module:model/GoogleCloudIdentitytoolkitV2PasswordPolicy.EnforcementStateEnum} enforcementState
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy.prototype['enforcementState'] = undefined;

/**
 * Users must have a password compliant with the password policy to sign-in.
 * @member {Boolean} forceUpgradeOnSignin
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy.prototype['forceUpgradeOnSignin'] = undefined;

/**
 * Output only. schema version number for the password policy
 * @member {Number} schemaVersion
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy.prototype['schemaVersion'] = undefined;





/**
 * Allowed values for the <code>enforcementState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudIdentitytoolkitV2PasswordPolicy['EnforcementStateEnum'] = {

    /**
     * value: "ENFORCEMENT_STATE_UNSPECIFIED"
     * @const
     */
    "ENFORCEMENT_STATE_UNSPECIFIED": "ENFORCEMENT_STATE_UNSPECIFIED",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "ENFORCE"
     * @const
     */
    "ENFORCE": "ENFORCE"
};



export default GoogleCloudIdentitytoolkitV2PasswordPolicy;

