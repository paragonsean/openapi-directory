/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudIdentitytoolkitAdminV2Smtp model module.
 * @module model/GoogleCloudIdentitytoolkitAdminV2Smtp
 * @version v2
 */
class GoogleCloudIdentitytoolkitAdminV2Smtp {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitAdminV2Smtp</code>.
     * Configuration for SMTP relay
     * @alias module:model/GoogleCloudIdentitytoolkitAdminV2Smtp
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitAdminV2Smtp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitAdminV2Smtp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitAdminV2Smtp} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitAdminV2Smtp} The populated <code>GoogleCloudIdentitytoolkitAdminV2Smtp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitAdminV2Smtp();

            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('securityMode')) {
                obj['securityMode'] = ApiClient.convertToType(data['securityMode'], 'String');
            }
            if (data.hasOwnProperty('senderEmail')) {
                obj['senderEmail'] = ApiClient.convertToType(data['senderEmail'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitAdminV2Smtp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitAdminV2Smtp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['securityMode'] && !(typeof data['securityMode'] === 'string' || data['securityMode'] instanceof String)) {
            throw new Error("Expected the field `securityMode` to be a primitive type in the JSON string but got " + data['securityMode']);
        }
        // ensure the json data is a string
        if (data['senderEmail'] && !(typeof data['senderEmail'] === 'string' || data['senderEmail'] instanceof String)) {
            throw new Error("Expected the field `senderEmail` to be a primitive type in the JSON string but got " + data['senderEmail']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * SMTP relay host
 * @member {String} host
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['host'] = undefined;

/**
 * SMTP relay password
 * @member {String} password
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['password'] = undefined;

/**
 * SMTP relay port
 * @member {Number} port
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['port'] = undefined;

/**
 * SMTP security mode.
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2Smtp.SecurityModeEnum} securityMode
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['securityMode'] = undefined;

/**
 * Sender email for the SMTP relay
 * @member {String} senderEmail
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['senderEmail'] = undefined;

/**
 * SMTP relay username
 * @member {String} username
 */
GoogleCloudIdentitytoolkitAdminV2Smtp.prototype['username'] = undefined;





/**
 * Allowed values for the <code>securityMode</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudIdentitytoolkitAdminV2Smtp['SecurityModeEnum'] = {

    /**
     * value: "SECURITY_MODE_UNSPECIFIED"
     * @const
     */
    "SECURITY_MODE_UNSPECIFIED": "SECURITY_MODE_UNSPECIFIED",

    /**
     * value: "SSL"
     * @const
     */
    "SSL": "SSL",

    /**
     * value: "START_TLS"
     * @const
     */
    "START_TLS": "START_TLS"
};



export default GoogleCloudIdentitytoolkitAdminV2Smtp;

