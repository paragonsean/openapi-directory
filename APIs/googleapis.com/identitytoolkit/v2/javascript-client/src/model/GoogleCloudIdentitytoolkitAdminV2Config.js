/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig from './GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig';
import GoogleCloudIdentitytoolkitAdminV2ClientConfig from './GoogleCloudIdentitytoolkitAdminV2ClientConfig';
import GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig from './GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig';
import GoogleCloudIdentitytoolkitAdminV2MonitoringConfig from './GoogleCloudIdentitytoolkitAdminV2MonitoringConfig';
import GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig from './GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig';
import GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig from './GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig';
import GoogleCloudIdentitytoolkitAdminV2NotificationConfig from './GoogleCloudIdentitytoolkitAdminV2NotificationConfig';
import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig from './GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig';
import GoogleCloudIdentitytoolkitAdminV2QuotaConfig from './GoogleCloudIdentitytoolkitAdminV2QuotaConfig';
import GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig from './GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig';
import GoogleCloudIdentitytoolkitAdminV2SignInConfig from './GoogleCloudIdentitytoolkitAdminV2SignInConfig';
import GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig from './GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig';

/**
 * The GoogleCloudIdentitytoolkitAdminV2Config model module.
 * @module model/GoogleCloudIdentitytoolkitAdminV2Config
 * @version v2
 */
class GoogleCloudIdentitytoolkitAdminV2Config {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitAdminV2Config</code>.
     * Represents an Identity Toolkit project.
     * @alias module:model/GoogleCloudIdentitytoolkitAdminV2Config
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitAdminV2Config.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitAdminV2Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitAdminV2Config} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitAdminV2Config} The populated <code>GoogleCloudIdentitytoolkitAdminV2Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitAdminV2Config();

            if (data.hasOwnProperty('authorizedDomains')) {
                obj['authorizedDomains'] = ApiClient.convertToType(data['authorizedDomains'], ['String']);
            }
            if (data.hasOwnProperty('autodeleteAnonymousUsers')) {
                obj['autodeleteAnonymousUsers'] = ApiClient.convertToType(data['autodeleteAnonymousUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('blockingFunctions')) {
                obj['blockingFunctions'] = GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.constructFromObject(data['blockingFunctions']);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = GoogleCloudIdentitytoolkitAdminV2ClientConfig.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('emailPrivacyConfig')) {
                obj['emailPrivacyConfig'] = GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.constructFromObject(data['emailPrivacyConfig']);
            }
            if (data.hasOwnProperty('mfa')) {
                obj['mfa'] = GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.constructFromObject(data['mfa']);
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('multiTenant')) {
                obj['multiTenant'] = GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig.constructFromObject(data['multiTenant']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = GoogleCloudIdentitytoolkitAdminV2NotificationConfig.constructFromObject(data['notification']);
            }
            if (data.hasOwnProperty('passwordPolicyConfig')) {
                obj['passwordPolicyConfig'] = GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.constructFromObject(data['passwordPolicyConfig']);
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = GoogleCloudIdentitytoolkitAdminV2QuotaConfig.constructFromObject(data['quota']);
            }
            if (data.hasOwnProperty('recaptchaConfig')) {
                obj['recaptchaConfig'] = GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.constructFromObject(data['recaptchaConfig']);
            }
            if (data.hasOwnProperty('signIn')) {
                obj['signIn'] = GoogleCloudIdentitytoolkitAdminV2SignInConfig.constructFromObject(data['signIn']);
            }
            if (data.hasOwnProperty('smsRegionConfig')) {
                obj['smsRegionConfig'] = GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.constructFromObject(data['smsRegionConfig']);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = ApiClient.convertToType(data['subtype'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitAdminV2Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitAdminV2Config</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['authorizedDomains'])) {
            throw new Error("Expected the field `authorizedDomains` to be an array in the JSON data but got " + data['authorizedDomains']);
        }
        // validate the optional field `blockingFunctions`
        if (data['blockingFunctions']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig.validateJSON(data['blockingFunctions']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2ClientConfig.validateJSON(data['client']);
        }
        // validate the optional field `emailPrivacyConfig`
        if (data['emailPrivacyConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.validateJSON(data['emailPrivacyConfig']);
        }
        // validate the optional field `mfa`
        if (data['mfa']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.validateJSON(data['mfa']);
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.validateJSON(data['monitoring']);
        }
        // validate the optional field `multiTenant`
        if (data['multiTenant']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig.validateJSON(data['multiTenant']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2NotificationConfig.validateJSON(data['notification']);
        }
        // validate the optional field `passwordPolicyConfig`
        if (data['passwordPolicyConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.validateJSON(data['passwordPolicyConfig']);
        }
        // validate the optional field `quota`
        if (data['quota']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2QuotaConfig.validateJSON(data['quota']);
        }
        // validate the optional field `recaptchaConfig`
        if (data['recaptchaConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.validateJSON(data['recaptchaConfig']);
        }
        // validate the optional field `signIn`
        if (data['signIn']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2SignInConfig.validateJSON(data['signIn']);
        }
        // validate the optional field `smsRegionConfig`
        if (data['smsRegionConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.validateJSON(data['smsRegionConfig']);
        }
        // ensure the json data is a string
        if (data['subtype'] && !(typeof data['subtype'] === 'string' || data['subtype'] instanceof String)) {
            throw new Error("Expected the field `subtype` to be a primitive type in the JSON string but got " + data['subtype']);
        }

        return true;
    }


}



/**
 * List of domains authorized for OAuth redirects
 * @member {Array.<String>} authorizedDomains
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['authorizedDomains'] = undefined;

/**
 * Whether anonymous users will be auto-deleted after a period of 30 days.
 * @member {Boolean} autodeleteAnonymousUsers
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['autodeleteAnonymousUsers'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2BlockingFunctionsConfig} blockingFunctions
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['blockingFunctions'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2ClientConfig} client
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['client'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig} emailPrivacyConfig
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['emailPrivacyConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig} mfa
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['mfa'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2MonitoringConfig} monitoring
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['monitoring'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2MultiTenantConfig} multiTenant
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['multiTenant'] = undefined;

/**
 * Output only. The name of the Config resource. Example: \"projects/my-awesome-project/config\"
 * @member {String} name
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2NotificationConfig} notification
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['notification'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig} passwordPolicyConfig
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['passwordPolicyConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2QuotaConfig} quota
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['quota'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig} recaptchaConfig
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['recaptchaConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2SignInConfig} signIn
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['signIn'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig} smsRegionConfig
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['smsRegionConfig'] = undefined;

/**
 * Output only. The subtype of this config.
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2Config.SubtypeEnum} subtype
 */
GoogleCloudIdentitytoolkitAdminV2Config.prototype['subtype'] = undefined;





/**
 * Allowed values for the <code>subtype</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudIdentitytoolkitAdminV2Config['SubtypeEnum'] = {

    /**
     * value: "SUBTYPE_UNSPECIFIED"
     * @const
     */
    "SUBTYPE_UNSPECIFIED": "SUBTYPE_UNSPECIFIED",

    /**
     * value: "IDENTITY_PLATFORM"
     * @const
     */
    "IDENTITY_PLATFORM": "IDENTITY_PLATFORM",

    /**
     * value: "FIREBASE_AUTH"
     * @const
     */
    "FIREBASE_AUTH": "FIREBASE_AUTH"
};



export default GoogleCloudIdentitytoolkitAdminV2Config;

