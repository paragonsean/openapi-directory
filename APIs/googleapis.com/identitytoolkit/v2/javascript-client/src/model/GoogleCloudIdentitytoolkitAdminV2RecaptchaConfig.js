/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudIdentitytoolkitAdminV2RecaptchaKey from './GoogleCloudIdentitytoolkitAdminV2RecaptchaKey';
import GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule from './GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule';

/**
 * The GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig model module.
 * @module model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
 * @version v2
 */
class GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig</code>.
     * The reCAPTCHA Enterprise integration config.
     * @alias module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig} The populated <code>GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig();

            if (data.hasOwnProperty('emailPasswordEnforcementState')) {
                obj['emailPasswordEnforcementState'] = ApiClient.convertToType(data['emailPasswordEnforcementState'], 'String');
            }
            if (data.hasOwnProperty('managedRules')) {
                obj['managedRules'] = ApiClient.convertToType(data['managedRules'], [GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule]);
            }
            if (data.hasOwnProperty('recaptchaKeys')) {
                obj['recaptchaKeys'] = ApiClient.convertToType(data['recaptchaKeys'], [GoogleCloudIdentitytoolkitAdminV2RecaptchaKey]);
            }
            if (data.hasOwnProperty('useAccountDefender')) {
                obj['useAccountDefender'] = ApiClient.convertToType(data['useAccountDefender'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailPasswordEnforcementState'] && !(typeof data['emailPasswordEnforcementState'] === 'string' || data['emailPasswordEnforcementState'] instanceof String)) {
            throw new Error("Expected the field `emailPasswordEnforcementState` to be a primitive type in the JSON string but got " + data['emailPasswordEnforcementState']);
        }
        if (data['managedRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['managedRules'])) {
                throw new Error("Expected the field `managedRules` to be an array in the JSON data but got " + data['managedRules']);
            }
            // validate the optional field `managedRules` (array)
            for (const item of data['managedRules']) {
                GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule.validateJSON(item);
            };
        }
        if (data['recaptchaKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recaptchaKeys'])) {
                throw new Error("Expected the field `recaptchaKeys` to be an array in the JSON data but got " + data['recaptchaKeys']);
            }
            // validate the optional field `recaptchaKeys` (array)
            for (const item of data['recaptchaKeys']) {
                GoogleCloudIdentitytoolkitAdminV2RecaptchaKey.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The reCAPTCHA config for email/password provider, containing the enforcement status. The email/password provider contains all related user flows protected by reCAPTCHA.
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.EmailPasswordEnforcementStateEnum} emailPasswordEnforcementState
 */
GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.prototype['emailPasswordEnforcementState'] = undefined;

/**
 * The managed rules for authentication action based on reCAPTCHA scores. The rules are shared across providers for a given tenant project.
 * @member {Array.<module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaManagedRule>} managedRules
 */
GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.prototype['managedRules'] = undefined;

/**
 * Output only. The reCAPTCHA keys.
 * @member {Array.<module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaKey>} recaptchaKeys
 */
GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.prototype['recaptchaKeys'] = undefined;

/**
 * Whether to use the account defender for reCAPTCHA assessment. Defaults to `false`.
 * @member {Boolean} useAccountDefender
 */
GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.prototype['useAccountDefender'] = undefined;





/**
 * Allowed values for the <code>emailPasswordEnforcementState</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig['EmailPasswordEnforcementStateEnum'] = {

    /**
     * value: "RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED"
     * @const
     */
    "RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED": "RECAPTCHA_PROVIDER_ENFORCEMENT_STATE_UNSPECIFIED",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "AUDIT"
     * @const
     */
    "AUDIT": "AUDIT",

    /**
     * value: "ENFORCE"
     * @const
     */
    "ENFORCE": "ENFORCE"
};



export default GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig;

