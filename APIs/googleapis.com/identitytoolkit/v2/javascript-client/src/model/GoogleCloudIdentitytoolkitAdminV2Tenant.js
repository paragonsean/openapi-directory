/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig from './GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig';
import GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig from './GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig';
import GoogleCloudIdentitytoolkitAdminV2HashConfig from './GoogleCloudIdentitytoolkitAdminV2HashConfig';
import GoogleCloudIdentitytoolkitAdminV2Inheritance from './GoogleCloudIdentitytoolkitAdminV2Inheritance';
import GoogleCloudIdentitytoolkitAdminV2MonitoringConfig from './GoogleCloudIdentitytoolkitAdminV2MonitoringConfig';
import GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig from './GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig';
import GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig from './GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig';
import GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig from './GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig';
import GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig from './GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig';

/**
 * The GoogleCloudIdentitytoolkitAdminV2Tenant model module.
 * @module model/GoogleCloudIdentitytoolkitAdminV2Tenant
 * @version v2
 */
class GoogleCloudIdentitytoolkitAdminV2Tenant {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitAdminV2Tenant</code>.
     * A Tenant contains configuration for the tenant in a multi-tenant project.
     * @alias module:model/GoogleCloudIdentitytoolkitAdminV2Tenant
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitAdminV2Tenant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitAdminV2Tenant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitAdminV2Tenant} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitAdminV2Tenant} The populated <code>GoogleCloudIdentitytoolkitAdminV2Tenant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitAdminV2Tenant();

            if (data.hasOwnProperty('allowPasswordSignup')) {
                obj['allowPasswordSignup'] = ApiClient.convertToType(data['allowPasswordSignup'], 'Boolean');
            }
            if (data.hasOwnProperty('autodeleteAnonymousUsers')) {
                obj['autodeleteAnonymousUsers'] = ApiClient.convertToType(data['autodeleteAnonymousUsers'], 'Boolean');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('disableAuth')) {
                obj['disableAuth'] = ApiClient.convertToType(data['disableAuth'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emailPrivacyConfig')) {
                obj['emailPrivacyConfig'] = GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.constructFromObject(data['emailPrivacyConfig']);
            }
            if (data.hasOwnProperty('enableAnonymousUser')) {
                obj['enableAnonymousUser'] = ApiClient.convertToType(data['enableAnonymousUser'], 'Boolean');
            }
            if (data.hasOwnProperty('enableEmailLinkSignin')) {
                obj['enableEmailLinkSignin'] = ApiClient.convertToType(data['enableEmailLinkSignin'], 'Boolean');
            }
            if (data.hasOwnProperty('hashConfig')) {
                obj['hashConfig'] = GoogleCloudIdentitytoolkitAdminV2HashConfig.constructFromObject(data['hashConfig']);
            }
            if (data.hasOwnProperty('inheritance')) {
                obj['inheritance'] = GoogleCloudIdentitytoolkitAdminV2Inheritance.constructFromObject(data['inheritance']);
            }
            if (data.hasOwnProperty('mfaConfig')) {
                obj['mfaConfig'] = GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.constructFromObject(data['mfaConfig']);
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('passwordPolicyConfig')) {
                obj['passwordPolicyConfig'] = GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.constructFromObject(data['passwordPolicyConfig']);
            }
            if (data.hasOwnProperty('recaptchaConfig')) {
                obj['recaptchaConfig'] = GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.constructFromObject(data['recaptchaConfig']);
            }
            if (data.hasOwnProperty('smsRegionConfig')) {
                obj['smsRegionConfig'] = GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.constructFromObject(data['smsRegionConfig']);
            }
            if (data.hasOwnProperty('testPhoneNumbers')) {
                obj['testPhoneNumbers'] = ApiClient.convertToType(data['testPhoneNumbers'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitAdminV2Tenant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitAdminV2Tenant</code>.
     */
    static validateJSON(data) {
        // validate the optional field `client`
        if (data['client']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig.validateJSON(data['client']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `emailPrivacyConfig`
        if (data['emailPrivacyConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig.validateJSON(data['emailPrivacyConfig']);
        }
        // validate the optional field `hashConfig`
        if (data['hashConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2HashConfig.validateJSON(data['hashConfig']);
        }
        // validate the optional field `inheritance`
        if (data['inheritance']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2Inheritance.validateJSON(data['inheritance']);
        }
        // validate the optional field `mfaConfig`
        if (data['mfaConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig.validateJSON(data['mfaConfig']);
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2MonitoringConfig.validateJSON(data['monitoring']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `passwordPolicyConfig`
        if (data['passwordPolicyConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig.validateJSON(data['passwordPolicyConfig']);
        }
        // validate the optional field `recaptchaConfig`
        if (data['recaptchaConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig.validateJSON(data['recaptchaConfig']);
        }
        // validate the optional field `smsRegionConfig`
        if (data['smsRegionConfig']) { // data not null
          GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig.validateJSON(data['smsRegionConfig']);
        }

        return true;
    }


}



/**
 * Whether to allow email/password user authentication.
 * @member {Boolean} allowPasswordSignup
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['allowPasswordSignup'] = undefined;

/**
 * Whether anonymous users will be auto-deleted after a period of 30 days.
 * @member {Boolean} autodeleteAnonymousUsers
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['autodeleteAnonymousUsers'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2ClientPermissionConfig} client
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['client'] = undefined;

/**
 * Whether authentication is disabled for the tenant. If true, the users under the disabled tenant are not allowed to sign-in. Admins of the disabled tenant are not able to manage its users.
 * @member {Boolean} disableAuth
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['disableAuth'] = undefined;

/**
 * Display name of the tenant.
 * @member {String} displayName
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['displayName'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2EmailPrivacyConfig} emailPrivacyConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['emailPrivacyConfig'] = undefined;

/**
 * Whether to enable anonymous user authentication.
 * @member {Boolean} enableAnonymousUser
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['enableAnonymousUser'] = undefined;

/**
 * Whether to enable email link user authentication.
 * @member {Boolean} enableEmailLinkSignin
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['enableEmailLinkSignin'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2HashConfig} hashConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['hashConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2Inheritance} inheritance
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['inheritance'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2MultiFactorAuthConfig} mfaConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['mfaConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2MonitoringConfig} monitoring
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['monitoring'] = undefined;

/**
 * Output only. Resource name of a tenant. For example: \"projects/{project-id}/tenants/{tenant-id}\"
 * @member {String} name
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2PasswordPolicyConfig} passwordPolicyConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['passwordPolicyConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2RecaptchaConfig} recaptchaConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['recaptchaConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2SmsRegionConfig} smsRegionConfig
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['smsRegionConfig'] = undefined;

/**
 * A map of pairs that can be used for MFA. The phone number should be in E.164 format (https://www.itu.int/rec/T-REC-E.164/) and a maximum of 10 pairs can be added (error will be thrown once exceeded).
 * @member {Object.<String, String>} testPhoneNumbers
 */
GoogleCloudIdentitytoolkitAdminV2Tenant.prototype['testPhoneNumbers'] = undefined;






export default GoogleCloudIdentitytoolkitAdminV2Tenant;

