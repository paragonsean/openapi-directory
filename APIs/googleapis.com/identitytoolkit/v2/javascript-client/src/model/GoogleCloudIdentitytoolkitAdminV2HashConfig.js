/**
 * Identity Toolkit API
 * The Google Identity Toolkit API lets you use open standards to verify a user's identity.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudIdentitytoolkitAdminV2HashConfig model module.
 * @module model/GoogleCloudIdentitytoolkitAdminV2HashConfig
 * @version v2
 */
class GoogleCloudIdentitytoolkitAdminV2HashConfig {
    /**
     * Constructs a new <code>GoogleCloudIdentitytoolkitAdminV2HashConfig</code>.
     * History information of the hash algorithm and key. Different accounts&#39; passwords may be generated by different version.
     * @alias module:model/GoogleCloudIdentitytoolkitAdminV2HashConfig
     */
    constructor() { 
        
        GoogleCloudIdentitytoolkitAdminV2HashConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudIdentitytoolkitAdminV2HashConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudIdentitytoolkitAdminV2HashConfig} obj Optional instance to populate.
     * @return {module:model/GoogleCloudIdentitytoolkitAdminV2HashConfig} The populated <code>GoogleCloudIdentitytoolkitAdminV2HashConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudIdentitytoolkitAdminV2HashConfig();

            if (data.hasOwnProperty('algorithm')) {
                obj['algorithm'] = ApiClient.convertToType(data['algorithm'], 'String');
            }
            if (data.hasOwnProperty('memoryCost')) {
                obj['memoryCost'] = ApiClient.convertToType(data['memoryCost'], 'Number');
            }
            if (data.hasOwnProperty('rounds')) {
                obj['rounds'] = ApiClient.convertToType(data['rounds'], 'Number');
            }
            if (data.hasOwnProperty('saltSeparator')) {
                obj['saltSeparator'] = ApiClient.convertToType(data['saltSeparator'], 'String');
            }
            if (data.hasOwnProperty('signerKey')) {
                obj['signerKey'] = ApiClient.convertToType(data['signerKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudIdentitytoolkitAdminV2HashConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudIdentitytoolkitAdminV2HashConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['algorithm'] && !(typeof data['algorithm'] === 'string' || data['algorithm'] instanceof String)) {
            throw new Error("Expected the field `algorithm` to be a primitive type in the JSON string but got " + data['algorithm']);
        }
        // ensure the json data is a string
        if (data['saltSeparator'] && !(typeof data['saltSeparator'] === 'string' || data['saltSeparator'] instanceof String)) {
            throw new Error("Expected the field `saltSeparator` to be a primitive type in the JSON string but got " + data['saltSeparator']);
        }
        // ensure the json data is a string
        if (data['signerKey'] && !(typeof data['signerKey'] === 'string' || data['signerKey'] instanceof String)) {
            throw new Error("Expected the field `signerKey` to be a primitive type in the JSON string but got " + data['signerKey']);
        }

        return true;
    }


}



/**
 * Output only. Different password hash algorithms used in Identity Toolkit.
 * @member {module:model/GoogleCloudIdentitytoolkitAdminV2HashConfig.AlgorithmEnum} algorithm
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig.prototype['algorithm'] = undefined;

/**
 * Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
 * @member {Number} memoryCost
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig.prototype['memoryCost'] = undefined;

/**
 * Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
 * @member {Number} rounds
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig.prototype['rounds'] = undefined;

/**
 * Output only. Non-printable character to be inserted between the salt and plain text password in base64.
 * @member {String} saltSeparator
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig.prototype['saltSeparator'] = undefined;

/**
 * Output only. Signer key in base64.
 * @member {String} signerKey
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig.prototype['signerKey'] = undefined;





/**
 * Allowed values for the <code>algorithm</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudIdentitytoolkitAdminV2HashConfig['AlgorithmEnum'] = {

    /**
     * value: "HASH_ALGORITHM_UNSPECIFIED"
     * @const
     */
    "HASH_ALGORITHM_UNSPECIFIED": "HASH_ALGORITHM_UNSPECIFIED",

    /**
     * value: "HMAC_SHA256"
     * @const
     */
    "HMAC_SHA256": "HMAC_SHA256",

    /**
     * value: "HMAC_SHA1"
     * @const
     */
    "HMAC_SHA1": "HMAC_SHA1",

    /**
     * value: "HMAC_MD5"
     * @const
     */
    "HMAC_MD5": "HMAC_MD5",

    /**
     * value: "SCRYPT"
     * @const
     */
    "SCRYPT": "SCRYPT",

    /**
     * value: "PBKDF_SHA1"
     * @const
     */
    "PBKDF_SHA1": "PBKDF_SHA1",

    /**
     * value: "MD5"
     * @const
     */
    "MD5": "MD5",

    /**
     * value: "HMAC_SHA512"
     * @const
     */
    "HMAC_SHA512": "HMAC_SHA512",

    /**
     * value: "SHA1"
     * @const
     */
    "SHA1": "SHA1",

    /**
     * value: "BCRYPT"
     * @const
     */
    "BCRYPT": "BCRYPT",

    /**
     * value: "PBKDF2_SHA256"
     * @const
     */
    "PBKDF2_SHA256": "PBKDF2_SHA256",

    /**
     * value: "SHA256"
     * @const
     */
    "SHA256": "SHA256",

    /**
     * value: "SHA512"
     * @const
     */
    "SHA512": "SHA512",

    /**
     * value: "STANDARD_SCRYPT"
     * @const
     */
    "STANDARD_SCRYPT": "STANDARD_SCRYPT"
};



export default GoogleCloudIdentitytoolkitAdminV2HashConfig;

