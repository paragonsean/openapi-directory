# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Annotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, labels: Dict[str, str]=None, name: str=None, type: str=None, update_time: str=None):
        """Annotation - a model defined in OpenAPI

        :param create_time: The create_time of this Annotation.
        :param labels: The labels of this Annotation.
        :param name: The name of this Annotation.
        :param type: The type of this Annotation.
        :param update_time: The update_time of this Annotation.
        """
        self.openapi_types = {
            'create_time': str,
            'labels': Dict[str, str],
            'name': str,
            'type': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'labels': 'labels',
            'name': 'name',
            'type': 'type',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._labels = labels
        self._name = name
        self._type = type
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Annotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Annotation of this Annotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Annotation.

        Output only. Create time stamp.

        :return: The create_time of this Annotation.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Annotation.

        Output only. Create time stamp.

        :param create_time: The create_time of this Annotation.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def labels(self):
        """Gets the labels of this Annotation.

        Labels as key value pairs.

        :return: The labels of this Annotation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Annotation.

        Labels as key value pairs.

        :param labels: The labels of this Annotation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Annotation.

        name of resource.

        :return: The name of this Annotation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Annotation.

        name of resource.

        :param name: The name of this Annotation.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Annotation.

        Type of an annotation.

        :return: The type of this Annotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Annotation.

        Type of an annotation.

        :param type: The type of this Annotation.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_LEGACY_EXPORT_CONSENT", "TYPE_QWIKLAB"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_time(self):
        """Gets the update_time of this Annotation.

        Output only. Update time stamp.

        :return: The update_time of this Annotation.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Annotation.

        Output only. Update time stamp.

        :param update_time: The update_time of this Annotation.
        :type update_time: str
        """

        self._update_time = update_time
