# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_os_scan import GuestOsScan
from openapi_server.models.v_sphere_scan import VSphereScan
from openapi_server import util


class Collector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, client_version: str=None, collection_days: int=None, create_time: str=None, description: str=None, display_name: str=None, eula_uri: str=None, expected_asset_count: str=None, guest_os_scan: GuestOsScan=None, labels: Dict[str, str]=None, name: str=None, service_account: str=None, state: str=None, update_time: str=None, vsphere_scan: VSphereScan=None):
        """Collector - a model defined in OpenAPI

        :param bucket: The bucket of this Collector.
        :param client_version: The client_version of this Collector.
        :param collection_days: The collection_days of this Collector.
        :param create_time: The create_time of this Collector.
        :param description: The description of this Collector.
        :param display_name: The display_name of this Collector.
        :param eula_uri: The eula_uri of this Collector.
        :param expected_asset_count: The expected_asset_count of this Collector.
        :param guest_os_scan: The guest_os_scan of this Collector.
        :param labels: The labels of this Collector.
        :param name: The name of this Collector.
        :param service_account: The service_account of this Collector.
        :param state: The state of this Collector.
        :param update_time: The update_time of this Collector.
        :param vsphere_scan: The vsphere_scan of this Collector.
        """
        self.openapi_types = {
            'bucket': str,
            'client_version': str,
            'collection_days': int,
            'create_time': str,
            'description': str,
            'display_name': str,
            'eula_uri': str,
            'expected_asset_count': str,
            'guest_os_scan': GuestOsScan,
            'labels': Dict[str, str],
            'name': str,
            'service_account': str,
            'state': str,
            'update_time': str,
            'vsphere_scan': VSphereScan
        }

        self.attribute_map = {
            'bucket': 'bucket',
            'client_version': 'clientVersion',
            'collection_days': 'collectionDays',
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'eula_uri': 'eulaUri',
            'expected_asset_count': 'expectedAssetCount',
            'guest_os_scan': 'guestOsScan',
            'labels': 'labels',
            'name': 'name',
            'service_account': 'serviceAccount',
            'state': 'state',
            'update_time': 'updateTime',
            'vsphere_scan': 'vsphereScan'
        }

        self._bucket = bucket
        self._client_version = client_version
        self._collection_days = collection_days
        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._eula_uri = eula_uri
        self._expected_asset_count = expected_asset_count
        self._guest_os_scan = guest_os_scan
        self._labels = labels
        self._name = name
        self._service_account = service_account
        self._state = state
        self._update_time = update_time
        self._vsphere_scan = vsphere_scan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Collector of this Collector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this Collector.

        Output only. Store cloud storage bucket name (which is a guid) created with this Collector.

        :return: The bucket of this Collector.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this Collector.

        Output only. Store cloud storage bucket name (which is a guid) created with this Collector.

        :param bucket: The bucket of this Collector.
        :type bucket: str
        """

        self._bucket = bucket

    @property
    def client_version(self):
        """Gets the client_version of this Collector.

        Output only. Client version.

        :return: The client_version of this Collector.
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this Collector.

        Output only. Client version.

        :param client_version: The client_version of this Collector.
        :type client_version: str
        """

        self._client_version = client_version

    @property
    def collection_days(self):
        """Gets the collection_days of this Collector.

        How many days to collect data.

        :return: The collection_days of this Collector.
        :rtype: int
        """
        return self._collection_days

    @collection_days.setter
    def collection_days(self, collection_days):
        """Sets the collection_days of this Collector.

        How many days to collect data.

        :param collection_days: The collection_days of this Collector.
        :type collection_days: int
        """

        self._collection_days = collection_days

    @property
    def create_time(self):
        """Gets the create_time of this Collector.

        Output only. Create time stamp.

        :return: The create_time of this Collector.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Collector.

        Output only. Create time stamp.

        :param create_time: The create_time of this Collector.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Collector.

        User specified description of the Collector.

        :return: The description of this Collector.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Collector.

        User specified description of the Collector.

        :param description: The description of this Collector.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Collector.

        User specified name of the Collector.

        :return: The display_name of this Collector.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Collector.

        User specified name of the Collector.

        :param display_name: The display_name of this Collector.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def eula_uri(self):
        """Gets the eula_uri of this Collector.

        Uri for EULA (End User License Agreement) from customer.

        :return: The eula_uri of this Collector.
        :rtype: str
        """
        return self._eula_uri

    @eula_uri.setter
    def eula_uri(self, eula_uri):
        """Sets the eula_uri of this Collector.

        Uri for EULA (End User License Agreement) from customer.

        :param eula_uri: The eula_uri of this Collector.
        :type eula_uri: str
        """

        self._eula_uri = eula_uri

    @property
    def expected_asset_count(self):
        """Gets the expected_asset_count of this Collector.

        User specified expected asset count.

        :return: The expected_asset_count of this Collector.
        :rtype: str
        """
        return self._expected_asset_count

    @expected_asset_count.setter
    def expected_asset_count(self, expected_asset_count):
        """Sets the expected_asset_count of this Collector.

        User specified expected asset count.

        :param expected_asset_count: The expected_asset_count of this Collector.
        :type expected_asset_count: str
        """

        self._expected_asset_count = expected_asset_count

    @property
    def guest_os_scan(self):
        """Gets the guest_os_scan of this Collector.


        :return: The guest_os_scan of this Collector.
        :rtype: GuestOsScan
        """
        return self._guest_os_scan

    @guest_os_scan.setter
    def guest_os_scan(self, guest_os_scan):
        """Sets the guest_os_scan of this Collector.


        :param guest_os_scan: The guest_os_scan of this Collector.
        :type guest_os_scan: GuestOsScan
        """

        self._guest_os_scan = guest_os_scan

    @property
    def labels(self):
        """Gets the labels of this Collector.

        Labels as key value pairs.

        :return: The labels of this Collector.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Collector.

        Labels as key value pairs.

        :param labels: The labels of this Collector.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Collector.

        name of resource.

        :return: The name of this Collector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collector.

        name of resource.

        :param name: The name of this Collector.
        :type name: str
        """

        self._name = name

    @property
    def service_account(self):
        """Gets the service_account of this Collector.

        Service Account email used to ingest data to this Collector.

        :return: The service_account of this Collector.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this Collector.

        Service Account email used to ingest data to this Collector.

        :param service_account: The service_account of this Collector.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def state(self):
        """Gets the state of this Collector.

        Output only. State of the Collector.

        :return: The state of this Collector.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Collector.

        Output only. State of the Collector.

        :param state: The state of this Collector.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "STATE_INITIALIZING", "STATE_READY_TO_USE", "STATE_REGISTERED", "STATE_ACTIVE", "STATE_PAUSED", "STATE_DELETING", "STATE_DECOMMISSIONED", "STATE_ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Collector.

        Output only. Update time stamp.

        :return: The update_time of this Collector.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Collector.

        Output only. Update time stamp.

        :param update_time: The update_time of this Collector.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vsphere_scan(self):
        """Gets the vsphere_scan of this Collector.


        :return: The vsphere_scan of this Collector.
        :rtype: VSphereScan
        """
        return self._vsphere_scan

    @vsphere_scan.setter
    def vsphere_scan(self, vsphere_scan):
        """Sets the vsphere_scan of this Collector.


        :param vsphere_scan: The vsphere_scan of this Collector.
        :type vsphere_scan: VSphereScan
        """

        self._vsphere_scan = vsphere_scan
