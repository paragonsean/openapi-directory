/*
 * Rapid Migration Assessment API
 * The Rapid Migration Assessment service is our first-party migration assessment and planning tool.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GuestOsScan;
import org.openapitools.client.model.VSphereScan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message describing Collector object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:00.270743-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Collector {
  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "clientVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_COLLECTION_DAYS = "collectionDays";
  @SerializedName(SERIALIZED_NAME_COLLECTION_DAYS)
  private Integer collectionDays;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EULA_URI = "eulaUri";
  @SerializedName(SERIALIZED_NAME_EULA_URI)
  private String eulaUri;

  public static final String SERIALIZED_NAME_EXPECTED_ASSET_COUNT = "expectedAssetCount";
  @SerializedName(SERIALIZED_NAME_EXPECTED_ASSET_COUNT)
  private String expectedAssetCount;

  public static final String SERIALIZED_NAME_GUEST_OS_SCAN = "guestOsScan";
  @SerializedName(SERIALIZED_NAME_GUEST_OS_SCAN)
  private GuestOsScan guestOsScan;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT = "serviceAccount";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT)
  private String serviceAccount;

  /**
   * Output only. State of the Collector.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    UNSPECIFIED("STATE_UNSPECIFIED"),
    
    INITIALIZING("STATE_INITIALIZING"),
    
    READY_TO_USE("STATE_READY_TO_USE"),
    
    REGISTERED("STATE_REGISTERED"),
    
    ACTIVE("STATE_ACTIVE"),
    
    PAUSED("STATE_PAUSED"),
    
    DELETING("STATE_DELETING"),
    
    DECOMMISSIONED("STATE_DECOMMISSIONED"),
    
    ERROR("STATE_ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VSPHERE_SCAN = "vsphereScan";
  @SerializedName(SERIALIZED_NAME_VSPHERE_SCAN)
  private VSphereScan vsphereScan;

  public Collector() {
  }

  public Collector(
     String bucket, 
     String clientVersion, 
     String createTime, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.bucket = bucket;
    this.clientVersion = clientVersion;
    this.createTime = createTime;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Store cloud storage bucket name (which is a guid) created with this Collector.
   * @return bucket
   */
  @javax.annotation.Nullable
  public String getBucket() {
    return bucket;
  }



  /**
   * Output only. Client version.
   * @return clientVersion
   */
  @javax.annotation.Nullable
  public String getClientVersion() {
    return clientVersion;
  }



  public Collector collectionDays(Integer collectionDays) {
    this.collectionDays = collectionDays;
    return this;
  }

  /**
   * How many days to collect data.
   * @return collectionDays
   */
  @javax.annotation.Nullable
  public Integer getCollectionDays() {
    return collectionDays;
  }

  public void setCollectionDays(Integer collectionDays) {
    this.collectionDays = collectionDays;
  }


  /**
   * Output only. Create time stamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Collector description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User specified description of the Collector.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Collector displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User specified name of the Collector.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Collector eulaUri(String eulaUri) {
    this.eulaUri = eulaUri;
    return this;
  }

  /**
   * Uri for EULA (End User License Agreement) from customer.
   * @return eulaUri
   */
  @javax.annotation.Nullable
  public String getEulaUri() {
    return eulaUri;
  }

  public void setEulaUri(String eulaUri) {
    this.eulaUri = eulaUri;
  }


  public Collector expectedAssetCount(String expectedAssetCount) {
    this.expectedAssetCount = expectedAssetCount;
    return this;
  }

  /**
   * User specified expected asset count.
   * @return expectedAssetCount
   */
  @javax.annotation.Nullable
  public String getExpectedAssetCount() {
    return expectedAssetCount;
  }

  public void setExpectedAssetCount(String expectedAssetCount) {
    this.expectedAssetCount = expectedAssetCount;
  }


  public Collector guestOsScan(GuestOsScan guestOsScan) {
    this.guestOsScan = guestOsScan;
    return this;
  }

  /**
   * Get guestOsScan
   * @return guestOsScan
   */
  @javax.annotation.Nullable
  public GuestOsScan getGuestOsScan() {
    return guestOsScan;
  }

  public void setGuestOsScan(GuestOsScan guestOsScan) {
    this.guestOsScan = guestOsScan;
  }


  public Collector labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Collector putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Collector name(String name) {
    this.name = name;
    return this;
  }

  /**
   * name of resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Collector serviceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
    return this;
  }

  /**
   * Service Account email used to ingest data to this Collector.
   * @return serviceAccount
   */
  @javax.annotation.Nullable
  public String getServiceAccount() {
    return serviceAccount;
  }

  public void setServiceAccount(String serviceAccount) {
    this.serviceAccount = serviceAccount;
  }


  /**
   * Output only. State of the Collector.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Update time stamp.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Collector vsphereScan(VSphereScan vsphereScan) {
    this.vsphereScan = vsphereScan;
    return this;
  }

  /**
   * Get vsphereScan
   * @return vsphereScan
   */
  @javax.annotation.Nullable
  public VSphereScan getVsphereScan() {
    return vsphereScan;
  }

  public void setVsphereScan(VSphereScan vsphereScan) {
    this.vsphereScan = vsphereScan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Collector collector = (Collector) o;
    return Objects.equals(this.bucket, collector.bucket) &&
        Objects.equals(this.clientVersion, collector.clientVersion) &&
        Objects.equals(this.collectionDays, collector.collectionDays) &&
        Objects.equals(this.createTime, collector.createTime) &&
        Objects.equals(this.description, collector.description) &&
        Objects.equals(this.displayName, collector.displayName) &&
        Objects.equals(this.eulaUri, collector.eulaUri) &&
        Objects.equals(this.expectedAssetCount, collector.expectedAssetCount) &&
        Objects.equals(this.guestOsScan, collector.guestOsScan) &&
        Objects.equals(this.labels, collector.labels) &&
        Objects.equals(this.name, collector.name) &&
        Objects.equals(this.serviceAccount, collector.serviceAccount) &&
        Objects.equals(this.state, collector.state) &&
        Objects.equals(this.updateTime, collector.updateTime) &&
        Objects.equals(this.vsphereScan, collector.vsphereScan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, clientVersion, collectionDays, createTime, description, displayName, eulaUri, expectedAssetCount, guestOsScan, labels, name, serviceAccount, state, updateTime, vsphereScan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Collector {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    collectionDays: ").append(toIndentedString(collectionDays)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    eulaUri: ").append(toIndentedString(eulaUri)).append("\n");
    sb.append("    expectedAssetCount: ").append(toIndentedString(expectedAssetCount)).append("\n");
    sb.append("    guestOsScan: ").append(toIndentedString(guestOsScan)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serviceAccount: ").append(toIndentedString(serviceAccount)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    vsphereScan: ").append(toIndentedString(vsphereScan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucket");
    openapiFields.add("clientVersion");
    openapiFields.add("collectionDays");
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("eulaUri");
    openapiFields.add("expectedAssetCount");
    openapiFields.add("guestOsScan");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("serviceAccount");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("vsphereScan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Collector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Collector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Collector is not found in the empty JSON string", Collector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Collector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Collector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bucket") != null && !jsonObj.get("bucket").isJsonNull()) && !jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("clientVersion") != null && !jsonObj.get("clientVersion").isJsonNull()) && !jsonObj.get("clientVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVersion").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("eulaUri") != null && !jsonObj.get("eulaUri").isJsonNull()) && !jsonObj.get("eulaUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eulaUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eulaUri").toString()));
      }
      if ((jsonObj.get("expectedAssetCount") != null && !jsonObj.get("expectedAssetCount").isJsonNull()) && !jsonObj.get("expectedAssetCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedAssetCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedAssetCount").toString()));
      }
      // validate the optional field `guestOsScan`
      if (jsonObj.get("guestOsScan") != null && !jsonObj.get("guestOsScan").isJsonNull()) {
        GuestOsScan.validateJsonElement(jsonObj.get("guestOsScan"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("serviceAccount") != null && !jsonObj.get("serviceAccount").isJsonNull()) && !jsonObj.get("serviceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccount").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `vsphereScan`
      if (jsonObj.get("vsphereScan") != null && !jsonObj.get("vsphereScan").isJsonNull()) {
        VSphereScan.validateJsonElement(jsonObj.get("vsphereScan"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Collector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Collector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Collector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Collector.class));

       return (TypeAdapter<T>) new TypeAdapter<Collector>() {
           @Override
           public void write(JsonWriter out, Collector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Collector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Collector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Collector
   * @throws IOException if the JSON string is invalid with respect to Collector
   */
  public static Collector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Collector.class);
  }

  /**
   * Convert an instance of Collector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

