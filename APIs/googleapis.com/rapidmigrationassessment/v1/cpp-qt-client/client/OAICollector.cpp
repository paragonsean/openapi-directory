/**
 * Rapid Migration Assessment API
 * The Rapid Migration Assessment service is our first-party migration assessment and planning tool.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollector::OAICollector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollector::OAICollector() {
    this->initializeModel();
}

OAICollector::~OAICollector() {}

void OAICollector::initializeModel() {

    m_bucket_isSet = false;
    m_bucket_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_collection_days_isSet = false;
    m_collection_days_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_eula_uri_isSet = false;
    m_eula_uri_isValid = false;

    m_expected_asset_count_isSet = false;
    m_expected_asset_count_isValid = false;

    m_guest_os_scan_isSet = false;
    m_guest_os_scan_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_account_isSet = false;
    m_service_account_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vsphere_scan_isSet = false;
    m_vsphere_scan_isValid = false;
}

void OAICollector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollector::fromJsonObject(QJsonObject json) {

    m_bucket_isValid = ::OpenAPI::fromJsonValue(m_bucket, json[QString("bucket")]);
    m_bucket_isSet = !json[QString("bucket")].isNull() && m_bucket_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_collection_days_isValid = ::OpenAPI::fromJsonValue(m_collection_days, json[QString("collectionDays")]);
    m_collection_days_isSet = !json[QString("collectionDays")].isNull() && m_collection_days_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_eula_uri_isValid = ::OpenAPI::fromJsonValue(m_eula_uri, json[QString("eulaUri")]);
    m_eula_uri_isSet = !json[QString("eulaUri")].isNull() && m_eula_uri_isValid;

    m_expected_asset_count_isValid = ::OpenAPI::fromJsonValue(m_expected_asset_count, json[QString("expectedAssetCount")]);
    m_expected_asset_count_isSet = !json[QString("expectedAssetCount")].isNull() && m_expected_asset_count_isValid;

    m_guest_os_scan_isValid = ::OpenAPI::fromJsonValue(m_guest_os_scan, json[QString("guestOsScan")]);
    m_guest_os_scan_isSet = !json[QString("guestOsScan")].isNull() && m_guest_os_scan_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_account_isValid = ::OpenAPI::fromJsonValue(m_service_account, json[QString("serviceAccount")]);
    m_service_account_isSet = !json[QString("serviceAccount")].isNull() && m_service_account_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vsphere_scan_isValid = ::OpenAPI::fromJsonValue(m_vsphere_scan, json[QString("vsphereScan")]);
    m_vsphere_scan_isSet = !json[QString("vsphereScan")].isNull() && m_vsphere_scan_isValid;
}

QString OAICollector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollector::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_isSet) {
        obj.insert(QString("bucket"), ::OpenAPI::toJsonValue(m_bucket));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_collection_days_isSet) {
        obj.insert(QString("collectionDays"), ::OpenAPI::toJsonValue(m_collection_days));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_eula_uri_isSet) {
        obj.insert(QString("eulaUri"), ::OpenAPI::toJsonValue(m_eula_uri));
    }
    if (m_expected_asset_count_isSet) {
        obj.insert(QString("expectedAssetCount"), ::OpenAPI::toJsonValue(m_expected_asset_count));
    }
    if (m_guest_os_scan.isSet()) {
        obj.insert(QString("guestOsScan"), ::OpenAPI::toJsonValue(m_guest_os_scan));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_account_isSet) {
        obj.insert(QString("serviceAccount"), ::OpenAPI::toJsonValue(m_service_account));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vsphere_scan.isSet()) {
        obj.insert(QString("vsphereScan"), ::OpenAPI::toJsonValue(m_vsphere_scan));
    }
    return obj;
}

QString OAICollector::getBucket() const {
    return m_bucket;
}
void OAICollector::setBucket(const QString &bucket) {
    m_bucket = bucket;
    m_bucket_isSet = true;
}

bool OAICollector::is_bucket_Set() const{
    return m_bucket_isSet;
}

bool OAICollector::is_bucket_Valid() const{
    return m_bucket_isValid;
}

QString OAICollector::getClientVersion() const {
    return m_client_version;
}
void OAICollector::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAICollector::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAICollector::is_client_version_Valid() const{
    return m_client_version_isValid;
}

qint32 OAICollector::getCollectionDays() const {
    return m_collection_days;
}
void OAICollector::setCollectionDays(const qint32 &collection_days) {
    m_collection_days = collection_days;
    m_collection_days_isSet = true;
}

bool OAICollector::is_collection_days_Set() const{
    return m_collection_days_isSet;
}

bool OAICollector::is_collection_days_Valid() const{
    return m_collection_days_isValid;
}

QString OAICollector::getCreateTime() const {
    return m_create_time;
}
void OAICollector::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICollector::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICollector::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICollector::getDescription() const {
    return m_description;
}
void OAICollector::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollector::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollector::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICollector::getDisplayName() const {
    return m_display_name;
}
void OAICollector::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICollector::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICollector::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICollector::getEulaUri() const {
    return m_eula_uri;
}
void OAICollector::setEulaUri(const QString &eula_uri) {
    m_eula_uri = eula_uri;
    m_eula_uri_isSet = true;
}

bool OAICollector::is_eula_uri_Set() const{
    return m_eula_uri_isSet;
}

bool OAICollector::is_eula_uri_Valid() const{
    return m_eula_uri_isValid;
}

QString OAICollector::getExpectedAssetCount() const {
    return m_expected_asset_count;
}
void OAICollector::setExpectedAssetCount(const QString &expected_asset_count) {
    m_expected_asset_count = expected_asset_count;
    m_expected_asset_count_isSet = true;
}

bool OAICollector::is_expected_asset_count_Set() const{
    return m_expected_asset_count_isSet;
}

bool OAICollector::is_expected_asset_count_Valid() const{
    return m_expected_asset_count_isValid;
}

OAIGuestOsScan OAICollector::getGuestOsScan() const {
    return m_guest_os_scan;
}
void OAICollector::setGuestOsScan(const OAIGuestOsScan &guest_os_scan) {
    m_guest_os_scan = guest_os_scan;
    m_guest_os_scan_isSet = true;
}

bool OAICollector::is_guest_os_scan_Set() const{
    return m_guest_os_scan_isSet;
}

bool OAICollector::is_guest_os_scan_Valid() const{
    return m_guest_os_scan_isValid;
}

QMap<QString, QString> OAICollector::getLabels() const {
    return m_labels;
}
void OAICollector::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICollector::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICollector::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICollector::getName() const {
    return m_name;
}
void OAICollector::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollector::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollector::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICollector::getServiceAccount() const {
    return m_service_account;
}
void OAICollector::setServiceAccount(const QString &service_account) {
    m_service_account = service_account;
    m_service_account_isSet = true;
}

bool OAICollector::is_service_account_Set() const{
    return m_service_account_isSet;
}

bool OAICollector::is_service_account_Valid() const{
    return m_service_account_isValid;
}

QString OAICollector::getState() const {
    return m_state;
}
void OAICollector::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICollector::is_state_Set() const{
    return m_state_isSet;
}

bool OAICollector::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICollector::getUpdateTime() const {
    return m_update_time;
}
void OAICollector::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICollector::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICollector::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVSphereScan OAICollector::getVsphereScan() const {
    return m_vsphere_scan;
}
void OAICollector::setVsphereScan(const OAIVSphereScan &vsphere_scan) {
    m_vsphere_scan = vsphere_scan;
    m_vsphere_scan_isSet = true;
}

bool OAICollector::is_vsphere_scan_Set() const{
    return m_vsphere_scan_isSet;
}

bool OAICollector::is_vsphere_scan_Valid() const{
    return m_vsphere_scan_isValid;
}

bool OAICollector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_asset_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os_scan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vsphere_scan.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
