/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndCondition::OAIEndCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndCondition::OAIEndCondition() {
    this->initializeModel();
}

OAIEndCondition::~OAIEndCondition() {}

void OAIEndCondition::initializeModel() {

    m_cardinality_isSet = false;
    m_cardinality_isValid = false;
}

void OAIEndCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndCondition::fromJsonObject(QJsonObject json) {

    m_cardinality_isValid = ::OpenAPI::fromJsonValue(m_cardinality, json[QString("cardinality")]);
    m_cardinality_isSet = !json[QString("cardinality")].isNull() && m_cardinality_isValid;
}

QString OAIEndCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_cardinality.isSet()) {
        obj.insert(QString("cardinality"), ::OpenAPI::toJsonValue(m_cardinality));
    }
    return obj;
}

OAICardinality OAIEndCondition::getCardinality() const {
    return m_cardinality;
}
void OAIEndCondition::setCardinality(const OAICardinality &cardinality) {
    m_cardinality = cardinality;
    m_cardinality_isSet = true;
}

bool OAIEndCondition::is_cardinality_Set() const{
    return m_cardinality_isSet;
}

bool OAIEndCondition::is_cardinality_Valid() const{
    return m_cardinality_isValid;
}

bool OAIEndCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cardinality.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
