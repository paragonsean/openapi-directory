/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICardinality.h
 *
 * A Cardinality condition for the Waiter resource. A cardinality condition is met when the number of variables under a specified path prefix reaches a predefined number. For example, if you set a Cardinality condition where the &#x60;path&#x60; is set to &#x60;/foo&#x60; and the number of paths is set to &#x60;2&#x60;, the following variables would meet the condition in a RuntimeConfig resource: + &#x60;/foo/variable1 &#x3D; \&quot;value1\&quot;&#x60; + &#x60;/foo/variable2 &#x3D; \&quot;value2\&quot;&#x60; + &#x60;/bar/variable3 &#x3D; \&quot;value3\&quot;&#x60; It would not satisfy the same condition with the &#x60;number&#x60; set to &#x60;3&#x60;, however, because there is only 2 paths that start with &#x60;/foo&#x60;. Cardinality conditions are recursive; all subtrees under the specific path prefix are counted.
 */

#ifndef OAICardinality_H
#define OAICardinality_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICardinality : public OAIObject {
public:
    OAICardinality();
    OAICardinality(QString json);
    ~OAICardinality() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getNumber() const;
    void setNumber(const qint32 &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICardinality)

#endif // OAICardinality_H
