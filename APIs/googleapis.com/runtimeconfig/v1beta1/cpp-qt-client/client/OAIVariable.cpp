/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariable::OAIVariable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariable::OAIVariable() {
    this->initializeModel();
}

OAIVariable::~OAIVariable() {}

void OAIVariable::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIVariable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariable::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIVariable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariable::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIVariable::getName() const {
    return m_name;
}
void OAIVariable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVariable::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVariable::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVariable::getState() const {
    return m_state;
}
void OAIVariable::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVariable::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVariable::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVariable::getText() const {
    return m_text;
}
void OAIVariable::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIVariable::is_text_Set() const{
    return m_text_isSet;
}

bool OAIVariable::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIVariable::getUpdateTime() const {
    return m_update_time;
}
void OAIVariable::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIVariable::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIVariable::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QByteArray OAIVariable::getValue() const {
    return m_value;
}
void OAIVariable::setValue(const QByteArray &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIVariable::is_value_Set() const{
    return m_value_isSet;
}

bool OAIVariable::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIVariable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
