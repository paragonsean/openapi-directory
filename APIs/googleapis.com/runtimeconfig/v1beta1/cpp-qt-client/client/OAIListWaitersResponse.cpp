/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListWaitersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListWaitersResponse::OAIListWaitersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListWaitersResponse::OAIListWaitersResponse() {
    this->initializeModel();
}

OAIListWaitersResponse::~OAIListWaitersResponse() {}

void OAIListWaitersResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_waiters_isSet = false;
    m_waiters_isValid = false;
}

void OAIListWaitersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListWaitersResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_waiters_isValid = ::OpenAPI::fromJsonValue(m_waiters, json[QString("waiters")]);
    m_waiters_isSet = !json[QString("waiters")].isNull() && m_waiters_isValid;
}

QString OAIListWaitersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListWaitersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_waiters.size() > 0) {
        obj.insert(QString("waiters"), ::OpenAPI::toJsonValue(m_waiters));
    }
    return obj;
}

QString OAIListWaitersResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListWaitersResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListWaitersResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListWaitersResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIWaiter> OAIListWaitersResponse::getWaiters() const {
    return m_waiters;
}
void OAIListWaitersResponse::setWaiters(const QList<OAIWaiter> &waiters) {
    m_waiters = waiters;
    m_waiters_isSet = true;
}

bool OAIListWaitersResponse::is_waiters_Set() const{
    return m_waiters_isSet;
}

bool OAIListWaitersResponse::is_waiters_Valid() const{
    return m_waiters_isValid;
}

bool OAIListWaitersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waiters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListWaitersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
