/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardinality.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardinality::OAICardinality(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardinality::OAICardinality() {
    this->initializeModel();
}

OAICardinality::~OAICardinality() {}

void OAICardinality::initializeModel() {

    m_number_isSet = false;
    m_number_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAICardinality::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardinality::fromJsonObject(QJsonObject json) {

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAICardinality::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardinality::asJsonObject() const {
    QJsonObject obj;
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

qint32 OAICardinality::getNumber() const {
    return m_number;
}
void OAICardinality::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICardinality::is_number_Set() const{
    return m_number_isSet;
}

bool OAICardinality::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICardinality::getPath() const {
    return m_path;
}
void OAICardinality::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAICardinality::is_path_Set() const{
    return m_path_isSet;
}

bool OAICardinality::is_path_Valid() const{
    return m_path_isValid;
}

bool OAICardinality::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardinality::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
