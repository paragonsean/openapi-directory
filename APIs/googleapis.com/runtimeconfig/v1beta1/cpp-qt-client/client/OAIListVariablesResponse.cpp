/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVariablesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVariablesResponse::OAIListVariablesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVariablesResponse::OAIListVariablesResponse() {
    this->initializeModel();
}

OAIListVariablesResponse::~OAIListVariablesResponse() {}

void OAIListVariablesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIListVariablesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVariablesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;
}

QString OAIListVariablesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVariablesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_variables.size() > 0) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

QString OAIListVariablesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListVariablesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListVariablesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListVariablesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIVariable> OAIListVariablesResponse::getVariables() const {
    return m_variables;
}
void OAIListVariablesResponse::setVariables(const QList<OAIVariable> &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIListVariablesResponse::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIListVariablesResponse::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAIListVariablesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVariablesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
