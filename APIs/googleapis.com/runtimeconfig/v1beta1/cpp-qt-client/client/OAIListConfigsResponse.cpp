/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListConfigsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListConfigsResponse::OAIListConfigsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListConfigsResponse::OAIListConfigsResponse() {
    this->initializeModel();
}

OAIListConfigsResponse::~OAIListConfigsResponse() {}

void OAIListConfigsResponse::initializeModel() {

    m_configs_isSet = false;
    m_configs_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListConfigsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListConfigsResponse::fromJsonObject(QJsonObject json) {

    m_configs_isValid = ::OpenAPI::fromJsonValue(m_configs, json[QString("configs")]);
    m_configs_isSet = !json[QString("configs")].isNull() && m_configs_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListConfigsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListConfigsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_configs.size() > 0) {
        obj.insert(QString("configs"), ::OpenAPI::toJsonValue(m_configs));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIRuntimeConfig> OAIListConfigsResponse::getConfigs() const {
    return m_configs;
}
void OAIListConfigsResponse::setConfigs(const QList<OAIRuntimeConfig> &configs) {
    m_configs = configs;
    m_configs_isSet = true;
}

bool OAIListConfigsResponse::is_configs_Set() const{
    return m_configs_isSet;
}

bool OAIListConfigsResponse::is_configs_Valid() const{
    return m_configs_isValid;
}

QString OAIListConfigsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListConfigsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListConfigsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListConfigsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListConfigsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListConfigsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
