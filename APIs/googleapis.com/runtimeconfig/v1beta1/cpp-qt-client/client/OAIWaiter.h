/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWaiter.h
 *
 * A Waiter resource waits for some end condition within a RuntimeConfig resource to be met before it returns. For example, assume you have a distributed system where each node writes to a Variable resource indicating the node&#39;s readiness as part of the startup process. You then configure a Waiter resource with the success condition set to wait until some number of nodes have checked in. Afterwards, your application runs some arbitrary code after the condition has been met and the waiter returns successfully. Once created, a Waiter resource is immutable. To learn more about using waiters, read the [Creating a Waiter](/deployment-manager/runtime-configurator/creating-a-waiter) documentation.
 */

#ifndef OAIWaiter_H
#define OAIWaiter_H

#include <QJsonObject>

#include "OAIEndCondition.h"
#include "OAIStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;
class OAIEndCondition;

class OAIWaiter : public OAIObject {
public:
    OAIWaiter();
    OAIWaiter(QString json);
    ~OAIWaiter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    bool isDone() const;
    void setDone(const bool &done);
    bool is_done_Set() const;
    bool is_done_Valid() const;

    OAIStatus getError() const;
    void setError(const OAIStatus &error);
    bool is_error_Set() const;
    bool is_error_Valid() const;

    OAIEndCondition getFailure() const;
    void setFailure(const OAIEndCondition &failure);
    bool is_failure_Set() const;
    bool is_failure_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIEndCondition getSuccess() const;
    void setSuccess(const OAIEndCondition &success);
    bool is_success_Set() const;
    bool is_success_Valid() const;

    QString getTimeout() const;
    void setTimeout(const QString &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    bool m_done;
    bool m_done_isSet;
    bool m_done_isValid;

    OAIStatus m_error;
    bool m_error_isSet;
    bool m_error_isValid;

    OAIEndCondition m_failure;
    bool m_failure_isSet;
    bool m_failure_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIEndCondition m_success;
    bool m_success_isSet;
    bool m_success_isValid;

    QString m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWaiter)

#endif // OAIWaiter_H
