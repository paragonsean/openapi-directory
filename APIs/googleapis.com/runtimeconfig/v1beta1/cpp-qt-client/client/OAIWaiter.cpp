/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaiter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaiter::OAIWaiter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaiter::OAIWaiter() {
    this->initializeModel();
}

OAIWaiter::~OAIWaiter() {}

void OAIWaiter::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_done_isSet = false;
    m_done_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_failure_isSet = false;
    m_failure_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAIWaiter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaiter::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_failure_isValid = ::OpenAPI::fromJsonValue(m_failure, json[QString("failure")]);
    m_failure_isSet = !json[QString("failure")].isNull() && m_failure_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAIWaiter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaiter::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_failure.isSet()) {
        obj.insert(QString("failure"), ::OpenAPI::toJsonValue(m_failure));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_success.isSet()) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAIWaiter::getCreateTime() const {
    return m_create_time;
}
void OAIWaiter::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWaiter::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWaiter::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIWaiter::isDone() const {
    return m_done;
}
void OAIWaiter::setDone(const bool &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIWaiter::is_done_Set() const{
    return m_done_isSet;
}

bool OAIWaiter::is_done_Valid() const{
    return m_done_isValid;
}

OAIStatus OAIWaiter::getError() const {
    return m_error;
}
void OAIWaiter::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWaiter::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWaiter::is_error_Valid() const{
    return m_error_isValid;
}

OAIEndCondition OAIWaiter::getFailure() const {
    return m_failure;
}
void OAIWaiter::setFailure(const OAIEndCondition &failure) {
    m_failure = failure;
    m_failure_isSet = true;
}

bool OAIWaiter::is_failure_Set() const{
    return m_failure_isSet;
}

bool OAIWaiter::is_failure_Valid() const{
    return m_failure_isValid;
}

QString OAIWaiter::getName() const {
    return m_name;
}
void OAIWaiter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWaiter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWaiter::is_name_Valid() const{
    return m_name_isValid;
}

OAIEndCondition OAIWaiter::getSuccess() const {
    return m_success;
}
void OAIWaiter::setSuccess(const OAIEndCondition &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIWaiter::is_success_Set() const{
    return m_success_isSet;
}

bool OAIWaiter::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIWaiter::getTimeout() const {
    return m_timeout;
}
void OAIWaiter::setTimeout(const QString &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIWaiter::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIWaiter::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAIWaiter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaiter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
