/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WatchVariableRequest model module.
 * @module model/WatchVariableRequest
 * @version v1beta1
 */
class WatchVariableRequest {
    /**
     * Constructs a new <code>WatchVariableRequest</code>.
     * Request for the &#x60;WatchVariable()&#x60; method.
     * @alias module:model/WatchVariableRequest
     */
    constructor() { 
        
        WatchVariableRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WatchVariableRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WatchVariableRequest} obj Optional instance to populate.
     * @return {module:model/WatchVariableRequest} The populated <code>WatchVariableRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WatchVariableRequest();

            if (data.hasOwnProperty('newerThan')) {
                obj['newerThan'] = ApiClient.convertToType(data['newerThan'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WatchVariableRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WatchVariableRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['newerThan'] && !(typeof data['newerThan'] === 'string' || data['newerThan'] instanceof String)) {
            throw new Error("Expected the field `newerThan` to be a primitive type in the JSON string but got " + data['newerThan']);
        }

        return true;
    }


}



/**
 * If specified, checks the current timestamp of the variable and if the current timestamp is newer than `newerThan` timestamp, the method returns immediately. If not specified or the variable has an older timestamp, the watcher waits for a the value to change before returning.
 * @member {String} newerThan
 */
WatchVariableRequest.prototype['newerThan'] = undefined;






export default WatchVariableRequest;

