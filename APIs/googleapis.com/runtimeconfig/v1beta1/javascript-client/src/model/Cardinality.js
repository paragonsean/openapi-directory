/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Cardinality model module.
 * @module model/Cardinality
 * @version v1beta1
 */
class Cardinality {
    /**
     * Constructs a new <code>Cardinality</code>.
     * A Cardinality condition for the Waiter resource. A cardinality condition is met when the number of variables under a specified path prefix reaches a predefined number. For example, if you set a Cardinality condition where the &#x60;path&#x60; is set to &#x60;/foo&#x60; and the number of paths is set to &#x60;2&#x60;, the following variables would meet the condition in a RuntimeConfig resource: + &#x60;/foo/variable1 &#x3D; \&quot;value1\&quot;&#x60; + &#x60;/foo/variable2 &#x3D; \&quot;value2\&quot;&#x60; + &#x60;/bar/variable3 &#x3D; \&quot;value3\&quot;&#x60; It would not satisfy the same condition with the &#x60;number&#x60; set to &#x60;3&#x60;, however, because there is only 2 paths that start with &#x60;/foo&#x60;. Cardinality conditions are recursive; all subtrees under the specific path prefix are counted.
     * @alias module:model/Cardinality
     */
    constructor() { 
        
        Cardinality.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Cardinality</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Cardinality} obj Optional instance to populate.
     * @return {module:model/Cardinality} The populated <code>Cardinality</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cardinality();

            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Cardinality</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Cardinality</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * The number variables under the `path` that must exist to meet this condition. Defaults to 1 if not specified.
 * @member {Number} number
 */
Cardinality.prototype['number'] = undefined;

/**
 * The root of the variable subtree to monitor. For example, `/foo`.
 * @member {String} path
 */
Cardinality.prototype['path'] = undefined;






export default Cardinality;

