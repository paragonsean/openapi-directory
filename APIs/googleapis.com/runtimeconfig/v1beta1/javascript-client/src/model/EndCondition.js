/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cardinality from './Cardinality';

/**
 * The EndCondition model module.
 * @module model/EndCondition
 * @version v1beta1
 */
class EndCondition {
    /**
     * Constructs a new <code>EndCondition</code>.
     * The condition that a Waiter resource is waiting for.
     * @alias module:model/EndCondition
     */
    constructor() { 
        
        EndCondition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EndCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EndCondition} obj Optional instance to populate.
     * @return {module:model/EndCondition} The populated <code>EndCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EndCondition();

            if (data.hasOwnProperty('cardinality')) {
                obj['cardinality'] = Cardinality.constructFromObject(data['cardinality']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EndCondition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EndCondition</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cardinality`
        if (data['cardinality']) { // data not null
          Cardinality.validateJSON(data['cardinality']);
        }

        return true;
    }


}



/**
 * @member {module:model/Cardinality} cardinality
 */
EndCondition.prototype['cardinality'] = undefined;






export default EndCondition;

