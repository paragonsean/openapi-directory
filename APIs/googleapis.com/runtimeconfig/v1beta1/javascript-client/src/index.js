/**
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Binding from './model/Binding';
import Cardinality from './model/Cardinality';
import EndCondition from './model/EndCondition';
import Expr from './model/Expr';
import ListConfigsResponse from './model/ListConfigsResponse';
import ListVariablesResponse from './model/ListVariablesResponse';
import ListWaitersResponse from './model/ListWaitersResponse';
import Operation from './model/Operation';
import Policy from './model/Policy';
import RuntimeConfig from './model/RuntimeConfig';
import SetIamPolicyRequest from './model/SetIamPolicyRequest';
import Status from './model/Status';
import TestIamPermissionsRequest from './model/TestIamPermissionsRequest';
import TestIamPermissionsResponse from './model/TestIamPermissionsResponse';
import Variable from './model/Variable';
import Waiter from './model/Waiter';
import WatchVariableRequest from './model/WatchVariableRequest';
import ProjectsApi from './api/ProjectsApi';


/**
* The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var CloudRuntimeConfigurationApi = require('index'); // See note below*.
* var xxxSvc = new CloudRuntimeConfigurationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new CloudRuntimeConfigurationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new CloudRuntimeConfigurationApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new CloudRuntimeConfigurationApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Binding model constructor.
     * @property {module:model/Binding}
     */
    Binding,

    /**
     * The Cardinality model constructor.
     * @property {module:model/Cardinality}
     */
    Cardinality,

    /**
     * The EndCondition model constructor.
     * @property {module:model/EndCondition}
     */
    EndCondition,

    /**
     * The Expr model constructor.
     * @property {module:model/Expr}
     */
    Expr,

    /**
     * The ListConfigsResponse model constructor.
     * @property {module:model/ListConfigsResponse}
     */
    ListConfigsResponse,

    /**
     * The ListVariablesResponse model constructor.
     * @property {module:model/ListVariablesResponse}
     */
    ListVariablesResponse,

    /**
     * The ListWaitersResponse model constructor.
     * @property {module:model/ListWaitersResponse}
     */
    ListWaitersResponse,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The Policy model constructor.
     * @property {module:model/Policy}
     */
    Policy,

    /**
     * The RuntimeConfig model constructor.
     * @property {module:model/RuntimeConfig}
     */
    RuntimeConfig,

    /**
     * The SetIamPolicyRequest model constructor.
     * @property {module:model/SetIamPolicyRequest}
     */
    SetIamPolicyRequest,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The TestIamPermissionsRequest model constructor.
     * @property {module:model/TestIamPermissionsRequest}
     */
    TestIamPermissionsRequest,

    /**
     * The TestIamPermissionsResponse model constructor.
     * @property {module:model/TestIamPermissionsResponse}
     */
    TestIamPermissionsResponse,

    /**
     * The Variable model constructor.
     * @property {module:model/Variable}
     */
    Variable,

    /**
     * The Waiter model constructor.
     * @property {module:model/Waiter}
     */
    Waiter,

    /**
     * The WatchVariableRequest model constructor.
     * @property {module:model/WatchVariableRequest}
     */
    WatchVariableRequest,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi
};
