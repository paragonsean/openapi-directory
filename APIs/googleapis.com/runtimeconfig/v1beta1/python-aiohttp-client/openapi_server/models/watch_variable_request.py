# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WatchVariableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, newer_than: str=None):
        """WatchVariableRequest - a model defined in OpenAPI

        :param newer_than: The newer_than of this WatchVariableRequest.
        """
        self.openapi_types = {
            'newer_than': str
        }

        self.attribute_map = {
            'newer_than': 'newerThan'
        }

        self._newer_than = newer_than

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WatchVariableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WatchVariableRequest of this WatchVariableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def newer_than(self):
        """Gets the newer_than of this WatchVariableRequest.

        If specified, checks the current timestamp of the variable and if the current timestamp is newer than `newerThan` timestamp, the method returns immediately. If not specified or the variable has an older timestamp, the watcher waits for a the value to change before returning.

        :return: The newer_than of this WatchVariableRequest.
        :rtype: str
        """
        return self._newer_than

    @newer_than.setter
    def newer_than(self, newer_than):
        """Sets the newer_than of this WatchVariableRequest.

        If specified, checks the current timestamp of the variable and if the current timestamp is newer than `newerThan` timestamp, the method returns immediately. If not specified or the variable has an older timestamp, the watcher waits for a the value to change before returning.

        :param newer_than: The newer_than of this WatchVariableRequest.
        :type newer_than: str
        """

        self._newer_than = newer_than
