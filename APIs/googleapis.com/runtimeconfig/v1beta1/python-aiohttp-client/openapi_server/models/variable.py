# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Variable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, state: str=None, text: str=None, update_time: str=None, value: str=None):
        """Variable - a model defined in OpenAPI

        :param name: The name of this Variable.
        :param state: The state of this Variable.
        :param text: The text of this Variable.
        :param update_time: The update_time of this Variable.
        :param value: The value of this Variable.
        """
        self.openapi_types = {
            'name': str,
            'state': str,
            'text': str,
            'update_time': str,
            'value': str
        }

        self.attribute_map = {
            'name': 'name',
            'state': 'state',
            'text': 'text',
            'update_time': 'updateTime',
            'value': 'value'
        }

        self._name = name
        self._state = state
        self._text = text
        self._update_time = update_time
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Variable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Variable of this Variable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Variable.

        The name of the variable resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME] The `[PROJECT_ID]` must be a valid project ID, `[CONFIG_NAME]` must be a valid RuntimeConfig resource and `[VARIABLE_NAME]` follows Unix file system file path naming. The `[VARIABLE_NAME]` can contain ASCII letters, numbers, slashes and dashes. Slashes are used as path element separators and are not part of the `[VARIABLE_NAME]` itself, so `[VARIABLE_NAME]` must contain at least one non-slash character. Multiple slashes are coalesced into single slash character. Each path segment should match [0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])? regular expression. The length of a `[VARIABLE_NAME]` must be less than 256 characters. Once you create a variable, you cannot change the variable name.

        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Variable.

        The name of the variable resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/variables/[VARIABLE_NAME] The `[PROJECT_ID]` must be a valid project ID, `[CONFIG_NAME]` must be a valid RuntimeConfig resource and `[VARIABLE_NAME]` follows Unix file system file path naming. The `[VARIABLE_NAME]` can contain ASCII letters, numbers, slashes and dashes. Slashes are used as path element separators and are not part of the `[VARIABLE_NAME]` itself, so `[VARIABLE_NAME]` must contain at least one non-slash character. Multiple slashes are coalesced into single slash character. Each path segment should match [0-9A-Za-z](?:[_.A-Za-z0-9-]{0,62}[_.A-Za-z0-9])? regular expression. The length of a `[VARIABLE_NAME]` must be less than 256 characters. Once you create a variable, you cannot change the variable name.

        :param name: The name of this Variable.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Variable.

        Output only. The current state of the variable. The variable state indicates the outcome of the `variables().watch` call and is visible through the `get` and `list` calls.

        :return: The state of this Variable.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Variable.

        Output only. The current state of the variable. The variable state indicates the outcome of the `variables().watch` call and is visible through the `get` and `list` calls.

        :param state: The state of this Variable.
        :type state: str
        """
        allowed_values = ["VARIABLE_STATE_UNSPECIFIED", "UPDATED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def text(self):
        """Gets the text of this Variable.

        The string value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. For example, `text: \"my text value\"`. The string must be valid UTF-8.

        :return: The text of this Variable.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Variable.

        The string value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. For example, `text: \"my text value\"`. The string must be valid UTF-8.

        :param text: The text of this Variable.
        :type text: str
        """

        self._text = text

    @property
    def update_time(self):
        """Gets the update_time of this Variable.

        Output only. The time of the last variable update. Timestamp will be UTC timestamp.

        :return: The update_time of this Variable.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Variable.

        Output only. The time of the last variable update. Timestamp will be UTC timestamp.

        :param update_time: The update_time of this Variable.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def value(self):
        """Gets the value of this Variable.

        The binary value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. The value must be base64 encoded, and must comply with IETF RFC4648 (https://www.ietf.org/rfc/rfc4648.txt). Only one of `value` or `text` can be set.

        :return: The value of this Variable.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Variable.

        The binary value of the variable. The length of the value must be less than 4096 bytes. Empty values are also accepted. The value must be base64 encoded, and must comply with IETF RFC4648 (https://www.ietf.org/rfc/rfc4648.txt). Only one of `value` or `text` can be set.

        :param value: The value of this Variable.
        :type value: str
        """

        self._value = value
