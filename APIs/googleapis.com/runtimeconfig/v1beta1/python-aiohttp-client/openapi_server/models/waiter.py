# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.end_condition import EndCondition
from openapi_server.models.status import Status
from openapi_server import util


class Waiter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, done: bool=None, error: Status=None, failure: EndCondition=None, name: str=None, success: EndCondition=None, timeout: str=None):
        """Waiter - a model defined in OpenAPI

        :param create_time: The create_time of this Waiter.
        :param done: The done of this Waiter.
        :param error: The error of this Waiter.
        :param failure: The failure of this Waiter.
        :param name: The name of this Waiter.
        :param success: The success of this Waiter.
        :param timeout: The timeout of this Waiter.
        """
        self.openapi_types = {
            'create_time': str,
            'done': bool,
            'error': Status,
            'failure': EndCondition,
            'name': str,
            'success': EndCondition,
            'timeout': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'done': 'done',
            'error': 'error',
            'failure': 'failure',
            'name': 'name',
            'success': 'success',
            'timeout': 'timeout'
        }

        self._create_time = create_time
        self._done = done
        self._error = error
        self._failure = failure
        self._name = name
        self._success = success
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Waiter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Waiter of this Waiter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Waiter.

        Output only. The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.

        :return: The create_time of this Waiter.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Waiter.

        Output only. The instant at which this Waiter resource was created. Adding the value of `timeout` to this instant yields the timeout deadline for the waiter.

        :param create_time: The create_time of this Waiter.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def done(self):
        """Gets the done of this Waiter.

        Output only. If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.

        :return: The done of this Waiter.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this Waiter.

        Output only. If the value is `false`, it means the waiter is still waiting for one of its conditions to be met. If true, the waiter has finished. If the waiter finished due to a timeout or failure, `error` will be set.

        :param done: The done of this Waiter.
        :type done: bool
        """

        self._done = done

    @property
    def error(self):
        """Gets the error of this Waiter.


        :return: The error of this Waiter.
        :rtype: Status
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Waiter.


        :param error: The error of this Waiter.
        :type error: Status
        """

        self._error = error

    @property
    def failure(self):
        """Gets the failure of this Waiter.


        :return: The failure of this Waiter.
        :rtype: EndCondition
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this Waiter.


        :param failure: The failure of this Waiter.
        :type failure: EndCondition
        """

        self._failure = failure

    @property
    def name(self):
        """Gets the name of this Waiter.

        The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.

        :return: The name of this Waiter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Waiter.

        The name of the Waiter resource, in the format: projects/[PROJECT_ID]/configs/[CONFIG_NAME]/waiters/[WAITER_NAME] The `[PROJECT_ID]` must be a valid Google Cloud project ID, the `[CONFIG_NAME]` must be a valid RuntimeConfig resource, the `[WAITER_NAME]` must match RFC 1035 segment specification, and the length of `[WAITER_NAME]` must be less than 64 bytes. After you create a Waiter resource, you cannot change the resource name.

        :param name: The name of this Waiter.
        :type name: str
        """

        self._name = name

    @property
    def success(self):
        """Gets the success of this Waiter.


        :return: The success of this Waiter.
        :rtype: EndCondition
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this Waiter.


        :param success: The success of this Waiter.
        :type success: EndCondition
        """

        self._success = success

    @property
    def timeout(self):
        """Gets the timeout of this Waiter.

        [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.

        :return: The timeout of this Waiter.
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Waiter.

        [Required] Specifies the timeout of the waiter in seconds, beginning from the instant that `waiters().create` method is called. If this time elapses before the success or failure conditions are met, the waiter fails and sets the `error` code to `DEADLINE_EXCEEDED`.

        :param timeout: The timeout of this Waiter.
        :type timeout: str
        """

        self._timeout = timeout
