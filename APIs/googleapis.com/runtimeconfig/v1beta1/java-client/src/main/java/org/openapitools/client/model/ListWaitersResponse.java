/*
 * Cloud Runtime Configuration API
 * The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Waiter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for the &#x60;ListWaiters()&#x60; method. Order of returned waiter objects is arbitrary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:38.022358-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListWaitersResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_WAITERS = "waiters";
  @SerializedName(SERIALIZED_NAME_WAITERS)
  private List<Waiter> waiters = new ArrayList<>();

  public ListWaitersResponse() {
  }

  public ListWaitersResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * This token allows you to get the next page of results for list requests. If the number of results is larger than &#x60;pageSize&#x60;, use the &#x60;nextPageToken&#x60; as a value for the query parameter &#x60;pageToken&#x60; in the next list request. Subsequent list requests will have their own &#x60;nextPageToken&#x60; to continue paging through the results
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListWaitersResponse waiters(List<Waiter> waiters) {
    this.waiters = waiters;
    return this;
  }

  public ListWaitersResponse addWaitersItem(Waiter waitersItem) {
    if (this.waiters == null) {
      this.waiters = new ArrayList<>();
    }
    this.waiters.add(waitersItem);
    return this;
  }

  /**
   * Found waiters in the project.
   * @return waiters
   */
  @javax.annotation.Nullable
  public List<Waiter> getWaiters() {
    return waiters;
  }

  public void setWaiters(List<Waiter> waiters) {
    this.waiters = waiters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListWaitersResponse listWaitersResponse = (ListWaitersResponse) o;
    return Objects.equals(this.nextPageToken, listWaitersResponse.nextPageToken) &&
        Objects.equals(this.waiters, listWaitersResponse.waiters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, waiters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListWaitersResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    waiters: ").append(toIndentedString(waiters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("waiters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListWaitersResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListWaitersResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListWaitersResponse is not found in the empty JSON string", ListWaitersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListWaitersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListWaitersResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("waiters") != null && !jsonObj.get("waiters").isJsonNull()) {
        JsonArray jsonArraywaiters = jsonObj.getAsJsonArray("waiters");
        if (jsonArraywaiters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("waiters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `waiters` to be an array in the JSON string but got `%s`", jsonObj.get("waiters").toString()));
          }

          // validate the optional field `waiters` (array)
          for (int i = 0; i < jsonArraywaiters.size(); i++) {
            Waiter.validateJsonElement(jsonArraywaiters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListWaitersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListWaitersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListWaitersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListWaitersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListWaitersResponse>() {
           @Override
           public void write(JsonWriter out, ListWaitersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListWaitersResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListWaitersResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListWaitersResponse
   * @throws IOException if the JSON string is invalid with respect to ListWaitersResponse
   */
  public static ListWaitersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListWaitersResponse.class);
  }

  /**
   * Convert an instance of ListWaitersResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

