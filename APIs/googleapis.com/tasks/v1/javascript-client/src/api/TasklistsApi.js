/**
 * Google Tasks API
 * The Google Tasks API lets you manage your tasks and task lists.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TaskList from '../model/TaskList';
import TaskLists from '../model/TaskLists';

/**
* Tasklists service.
* @module api/TasklistsApi
* @version v1
*/
export default class TasklistsApi {

    /**
    * Constructs a new TasklistsApi. 
    * @alias module:api/TasklistsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tasksTasklistsDelete operation.
     * @callback module:api/TasklistsApi~tasksTasklistsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the authenticated user's specified task list.
     * @param {String} tasklist Task list identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/TasklistsApi~tasksTasklistsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksTasklistsDelete(tasklist, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tasklist' is set
      if (tasklist === undefined || tasklist === null) {
        throw new Error("Missing the required parameter 'tasklist' when calling tasksTasklistsDelete");
      }

      let pathParams = {
        'tasklist': tasklist
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists/{tasklist}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTasklistsGet operation.
     * @callback module:api/TasklistsApi~tasksTasklistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the authenticated user's specified task list.
     * @param {String} tasklist Task list identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/TasklistsApi~tasksTasklistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskList}
     */
    tasksTasklistsGet(tasklist, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tasklist' is set
      if (tasklist === undefined || tasklist === null) {
        throw new Error("Missing the required parameter 'tasklist' when calling tasksTasklistsGet");
      }

      let pathParams = {
        'tasklist': tasklist
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists/{tasklist}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTasklistsInsert operation.
     * @callback module:api/TasklistsApi~tasksTasklistsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new task list and adds it to the authenticated user's task lists.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TaskList} [taskList] 
     * @param {module:api/TasklistsApi~tasksTasklistsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskList}
     */
    tasksTasklistsInsert(opts, callback) {
      opts = opts || {};
      let postBody = opts['taskList'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTasklistsList operation.
     * @callback module:api/TasklistsApi~tasksTasklistsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskLists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the authenticated user's task lists.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] Maximum number of task lists returned on one page. Optional. The default is 20 (max allowed: 100).
     * @param {String} [pageToken] Token specifying the result page to return. Optional.
     * @param {module:api/TasklistsApi~tasksTasklistsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskLists}
     */
    tasksTasklistsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TaskLists;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTasklistsPatch operation.
     * @callback module:api/TasklistsApi~tasksTasklistsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the authenticated user's specified task list. This method supports patch semantics.
     * @param {String} tasklist Task list identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TaskList} [taskList] 
     * @param {module:api/TasklistsApi~tasksTasklistsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskList}
     */
    tasksTasklistsPatch(tasklist, opts, callback) {
      opts = opts || {};
      let postBody = opts['taskList'];
      // verify the required parameter 'tasklist' is set
      if (tasklist === undefined || tasklist === null) {
        throw new Error("Missing the required parameter 'tasklist' when calling tasksTasklistsPatch");
      }

      let pathParams = {
        'tasklist': tasklist
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists/{tasklist}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksTasklistsUpdate operation.
     * @callback module:api/TasklistsApi~tasksTasklistsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the authenticated user's specified task list.
     * @param {String} tasklist Task list identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TaskList} [taskList] 
     * @param {module:api/TasklistsApi~tasksTasklistsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskList}
     */
    tasksTasklistsUpdate(tasklist, opts, callback) {
      opts = opts || {};
      let postBody = opts['taskList'];
      // verify the required parameter 'tasklist' is set
      if (tasklist === undefined || tasklist === null) {
        throw new Error("Missing the required parameter 'tasklist' when calling tasksTasklistsUpdate");
      }

      let pathParams = {
        'tasklist': tasklist
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TaskList;
      return this.apiClient.callApi(
        '/tasks/v1/users/@me/lists/{tasklist}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
