/**
 * Google Tasks API
 * The Google Tasks API lets you manage your tasks and task lists.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TaskList model module.
 * @module model/TaskList
 * @version v1
 */
class TaskList {
    /**
     * Constructs a new <code>TaskList</code>.
     * @alias module:model/TaskList
     */
    constructor() { 
        
        TaskList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaskList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskList} obj Optional instance to populate.
     * @return {module:model/TaskList} The populated <code>TaskList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskList();

            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }

        return true;
    }


}



/**
 * ETag of the resource.
 * @member {String} etag
 */
TaskList.prototype['etag'] = undefined;

/**
 * Task list identifier.
 * @member {String} id
 */
TaskList.prototype['id'] = undefined;

/**
 * Type of the resource. This is always \"tasks#taskList\".
 * @member {String} kind
 */
TaskList.prototype['kind'] = undefined;

/**
 * URL pointing to this task list. Used to retrieve, update, or delete this task list.
 * @member {String} selfLink
 */
TaskList.prototype['selfLink'] = undefined;

/**
 * Title of the task list.
 * @member {String} title
 */
TaskList.prototype['title'] = undefined;

/**
 * Last modification time of the task list (as a RFC 3339 timestamp).
 * @member {String} updated
 */
TaskList.prototype['updated'] = undefined;






export default TaskList;

