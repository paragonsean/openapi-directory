/**
 * Google Tasks API
 * The Google Tasks API lets you manage your tasks and task lists.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITask::OAITask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITask::OAITask() {
    this->initializeModel();
}

OAITask::~OAITask() {}

void OAITask::initializeModel() {

    m_completed_isSet = false;
    m_completed_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_due_isSet = false;
    m_due_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAITask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITask::fromJsonObject(QJsonObject json) {

    m_completed_isValid = ::OpenAPI::fromJsonValue(m_completed, json[QString("completed")]);
    m_completed_isSet = !json[QString("completed")].isNull() && m_completed_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_due_isValid = ::OpenAPI::fromJsonValue(m_due, json[QString("due")]);
    m_due_isSet = !json[QString("due")].isNull() && m_due_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAITask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITask::asJsonObject() const {
    QJsonObject obj;
    if (m_completed_isSet) {
        obj.insert(QString("completed"), ::OpenAPI::toJsonValue(m_completed));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_due_isSet) {
        obj.insert(QString("due"), ::OpenAPI::toJsonValue(m_due));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QString OAITask::getCompleted() const {
    return m_completed;
}
void OAITask::setCompleted(const QString &completed) {
    m_completed = completed;
    m_completed_isSet = true;
}

bool OAITask::is_completed_Set() const{
    return m_completed_isSet;
}

bool OAITask::is_completed_Valid() const{
    return m_completed_isValid;
}

bool OAITask::isDeleted() const {
    return m_deleted;
}
void OAITask::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAITask::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAITask::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAITask::getDue() const {
    return m_due;
}
void OAITask::setDue(const QString &due) {
    m_due = due;
    m_due_isSet = true;
}

bool OAITask::is_due_Set() const{
    return m_due_isSet;
}

bool OAITask::is_due_Valid() const{
    return m_due_isValid;
}

QString OAITask::getEtag() const {
    return m_etag;
}
void OAITask::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAITask::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAITask::is_etag_Valid() const{
    return m_etag_isValid;
}

bool OAITask::isHidden() const {
    return m_hidden;
}
void OAITask::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAITask::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAITask::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QString OAITask::getId() const {
    return m_id;
}
void OAITask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITask::is_id_Set() const{
    return m_id_isSet;
}

bool OAITask::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITask::getKind() const {
    return m_kind;
}
void OAITask::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITask::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITask::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAITask_links_inner> OAITask::getLinks() const {
    return m_links;
}
void OAITask::setLinks(const QList<OAITask_links_inner> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAITask::is_links_Set() const{
    return m_links_isSet;
}

bool OAITask::is_links_Valid() const{
    return m_links_isValid;
}

QString OAITask::getNotes() const {
    return m_notes;
}
void OAITask::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAITask::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAITask::is_notes_Valid() const{
    return m_notes_isValid;
}

QString OAITask::getParent() const {
    return m_parent;
}
void OAITask::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAITask::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAITask::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAITask::getPosition() const {
    return m_position;
}
void OAITask::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAITask::is_position_Set() const{
    return m_position_isSet;
}

bool OAITask::is_position_Valid() const{
    return m_position_isValid;
}

QString OAITask::getSelfLink() const {
    return m_self_link;
}
void OAITask::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAITask::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAITask::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAITask::getStatus() const {
    return m_status;
}
void OAITask::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITask::is_status_Set() const{
    return m_status_isSet;
}

bool OAITask::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITask::getTitle() const {
    return m_title;
}
void OAITask::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAITask::is_title_Set() const{
    return m_title_isSet;
}

bool OAITask::is_title_Valid() const{
    return m_title_isValid;
}

QString OAITask::getUpdated() const {
    return m_updated;
}
void OAITask::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITask::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITask::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAITask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
