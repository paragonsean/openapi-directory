/*
 * Google Tasks API
 * The Google Tasks API lets you manage your tasks and task lists.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Task;
import org.openapitools.client.model.Tasks;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasksApi
 */
@Disabled
public class TasksApiTest {

    private final TasksApi api = new TasksApi();

    /**
     * Clears all completed tasks from the specified task list. The affected tasks will be marked as &#39;hidden&#39; and no longer be returned by default when retrieving all tasks for a task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksClearTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tasksTasksClear(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes the specified task from the task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksDeleteTest() throws ApiException {
        String tasklist = null;
        String task = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tasksTasksDelete(tasklist, task, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksGetTest() throws ApiException {
        String tasklist = null;
        String task = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Task response = api.tasksTasksGet(tasklist, task, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new task on the specified task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksInsertTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        String previous = null;
        Task task = null;
        Task response = api.tasksTasksInsert(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent, previous, task);
        // TODO: test validations
    }

    /**
     * Returns all tasks in the specified task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksListTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String completedMax = null;
        String completedMin = null;
        String dueMax = null;
        String dueMin = null;
        Integer maxResults = null;
        String pageToken = null;
        Boolean showCompleted = null;
        Boolean showDeleted = null;
        Boolean showHidden = null;
        String updatedMin = null;
        Tasks response = api.tasksTasksList(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completedMax, completedMin, dueMax, dueMin, maxResults, pageToken, showCompleted, showDeleted, showHidden, updatedMin);
        // TODO: test validations
    }

    /**
     * Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksMoveTest() throws ApiException {
        String tasklist = null;
        String task = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String parent = null;
        String previous = null;
        Task response = api.tasksTasksMove(tasklist, task, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, parent, previous);
        // TODO: test validations
    }

    /**
     * Updates the specified task. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksPatchTest() throws ApiException {
        String tasklist = null;
        String task = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Task task2 = null;
        Task response = api.tasksTasksPatch(tasklist, task, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, task2);
        // TODO: test validations
    }

    /**
     * Updates the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasksUpdateTest() throws ApiException {
        String tasklist = null;
        String task = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Task task2 = null;
        Task response = api.tasksTasksUpdate(tasklist, task, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, task2);
        // TODO: test validations
    }

}
