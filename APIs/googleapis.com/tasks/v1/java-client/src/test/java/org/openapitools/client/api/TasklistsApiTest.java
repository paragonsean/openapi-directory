/*
 * Google Tasks API
 * The Google Tasks API lets you manage your tasks and task lists.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TaskList;
import org.openapitools.client.model.TaskLists;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TasklistsApi
 */
@Disabled
public class TasklistsApiTest {

    private final TasklistsApi api = new TasklistsApi();

    /**
     * Deletes the authenticated user&#39;s specified task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsDeleteTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.tasksTasklistsDelete(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the authenticated user&#39;s specified task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsGetTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TaskList response = api.tasksTasklistsGet(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new task list and adds it to the authenticated user&#39;s task lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsInsertTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TaskList taskList = null;
        TaskList response = api.tasksTasklistsInsert($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, taskList);
        // TODO: test validations
    }

    /**
     * Returns all the authenticated user&#39;s task lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        TaskLists response = api.tasksTasklistsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the authenticated user&#39;s specified task list. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsPatchTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TaskList taskList = null;
        TaskList response = api.tasksTasklistsPatch(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, taskList);
        // TODO: test validations
    }

    /**
     * Updates the authenticated user&#39;s specified task list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksTasklistsUpdateTest() throws ApiException {
        String tasklist = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TaskList taskList = null;
        TaskList response = api.tasksTasklistsUpdate(tasklist, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, taskList);
        // TODO: test validations
    }

}
