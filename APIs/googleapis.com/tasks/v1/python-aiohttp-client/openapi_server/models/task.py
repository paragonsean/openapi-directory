# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.task_links_inner import TaskLinksInner
from openapi_server import util


class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed: str=None, deleted: bool=None, due: str=None, etag: str=None, hidden: bool=None, id: str=None, kind: str=None, links: List[TaskLinksInner]=None, notes: str=None, parent: str=None, position: str=None, self_link: str=None, status: str=None, title: str=None, updated: str=None):
        """Task - a model defined in OpenAPI

        :param completed: The completed of this Task.
        :param deleted: The deleted of this Task.
        :param due: The due of this Task.
        :param etag: The etag of this Task.
        :param hidden: The hidden of this Task.
        :param id: The id of this Task.
        :param kind: The kind of this Task.
        :param links: The links of this Task.
        :param notes: The notes of this Task.
        :param parent: The parent of this Task.
        :param position: The position of this Task.
        :param self_link: The self_link of this Task.
        :param status: The status of this Task.
        :param title: The title of this Task.
        :param updated: The updated of this Task.
        """
        self.openapi_types = {
            'completed': str,
            'deleted': bool,
            'due': str,
            'etag': str,
            'hidden': bool,
            'id': str,
            'kind': str,
            'links': List[TaskLinksInner],
            'notes': str,
            'parent': str,
            'position': str,
            'self_link': str,
            'status': str,
            'title': str,
            'updated': str
        }

        self.attribute_map = {
            'completed': 'completed',
            'deleted': 'deleted',
            'due': 'due',
            'etag': 'etag',
            'hidden': 'hidden',
            'id': 'id',
            'kind': 'kind',
            'links': 'links',
            'notes': 'notes',
            'parent': 'parent',
            'position': 'position',
            'self_link': 'selfLink',
            'status': 'status',
            'title': 'title',
            'updated': 'updated'
        }

        self._completed = completed
        self._deleted = deleted
        self._due = due
        self._etag = etag
        self._hidden = hidden
        self._id = id
        self._kind = kind
        self._links = links
        self._notes = notes
        self._parent = parent
        self._position = position
        self._self_link = self_link
        self._status = status
        self._title = title
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Task of this Task.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed(self):
        """Gets the completed of this Task.

        Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.

        :return: The completed of this Task.
        :rtype: str
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this Task.

        Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.

        :param completed: The completed of this Task.
        :type completed: str
        """

        self._completed = completed

    @property
    def deleted(self):
        """Gets the deleted of this Task.

        Flag indicating whether the task has been deleted. The default is False.

        :return: The deleted of this Task.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Task.

        Flag indicating whether the task has been deleted. The default is False.

        :param deleted: The deleted of this Task.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def due(self):
        """Gets the due of this Task.

        Due date of the task (as a RFC 3339 timestamp). Optional. The due date only records date information; the time portion of the timestamp is discarded when setting the due date. It isn't possible to read or write the time that a task is due via the API.

        :return: The due of this Task.
        :rtype: str
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Task.

        Due date of the task (as a RFC 3339 timestamp). Optional. The due date only records date information; the time portion of the timestamp is discarded when setting the due date. It isn't possible to read or write the time that a task is due via the API.

        :param due: The due of this Task.
        :type due: str
        """

        self._due = due

    @property
    def etag(self):
        """Gets the etag of this Task.

        ETag of the resource.

        :return: The etag of this Task.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Task.

        ETag of the resource.

        :param etag: The etag of this Task.
        :type etag: str
        """

        self._etag = etag

    @property
    def hidden(self):
        """Gets the hidden of this Task.

        Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.

        :return: The hidden of this Task.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Task.

        Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.

        :param hidden: The hidden of this Task.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Task.

        Task identifier.

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        Task identifier.

        :param id: The id of this Task.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Task.

        Type of the resource. This is always \"tasks#task\".

        :return: The kind of this Task.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Task.

        Type of the resource. This is always \"tasks#task\".

        :param kind: The kind of this Task.
        :type kind: str
        """

        self._kind = kind

    @property
    def links(self):
        """Gets the links of this Task.

        Collection of links. This collection is read-only.

        :return: The links of this Task.
        :rtype: List[TaskLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Task.

        Collection of links. This collection is read-only.

        :param links: The links of this Task.
        :type links: List[TaskLinksInner]
        """

        self._links = links

    @property
    def notes(self):
        """Gets the notes of this Task.

        Notes describing the task. Optional.

        :return: The notes of this Task.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Task.

        Notes describing the task. Optional.

        :param notes: The notes of this Task.
        :type notes: str
        """

        self._notes = notes

    @property
    def parent(self):
        """Gets the parent of this Task.

        Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level.

        :return: The parent of this Task.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Task.

        Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level.

        :param parent: The parent of this Task.
        :type parent: str
        """

        self._parent = parent

    @property
    def position(self):
        """Gets the position of this Task.

        String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position.

        :return: The position of this Task.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Task.

        String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position.

        :param position: The position of this Task.
        :type position: str
        """

        self._position = position

    @property
    def self_link(self):
        """Gets the self_link of this Task.

        URL pointing to this task. Used to retrieve, update, or delete this task.

        :return: The self_link of this Task.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Task.

        URL pointing to this task. Used to retrieve, update, or delete this task.

        :param self_link: The self_link of this Task.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Task.

        Status of the task. This is either \"needsAction\" or \"completed\".

        :return: The status of this Task.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.

        Status of the task. This is either \"needsAction\" or \"completed\".

        :param status: The status of this Task.
        :type status: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Task.

        Title of the task.

        :return: The title of this Task.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Task.

        Title of the task.

        :param title: The title of this Task.
        :type title: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this Task.

        Last modification time of the task (as a RFC 3339 timestamp).

        :return: The updated of this Task.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Task.

        Last modification time of the task (as a RFC 3339 timestamp).

        :param updated: The updated of this Task.
        :type updated: str
        """

        self._updated = updated
