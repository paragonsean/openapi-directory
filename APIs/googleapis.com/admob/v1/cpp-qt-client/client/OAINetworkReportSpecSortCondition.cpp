/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkReportSpecSortCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkReportSpecSortCondition::OAINetworkReportSpecSortCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkReportSpecSortCondition::OAINetworkReportSpecSortCondition() {
    this->initializeModel();
}

OAINetworkReportSpecSortCondition::~OAINetworkReportSpecSortCondition() {}

void OAINetworkReportSpecSortCondition::initializeModel() {

    m_dimension_isSet = false;
    m_dimension_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;
}

void OAINetworkReportSpecSortCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkReportSpecSortCondition::fromJsonObject(QJsonObject json) {

    m_dimension_isValid = ::OpenAPI::fromJsonValue(m_dimension, json[QString("dimension")]);
    m_dimension_isSet = !json[QString("dimension")].isNull() && m_dimension_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;
}

QString OAINetworkReportSpecSortCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkReportSpecSortCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_dimension_isSet) {
        obj.insert(QString("dimension"), ::OpenAPI::toJsonValue(m_dimension));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    return obj;
}

QString OAINetworkReportSpecSortCondition::getDimension() const {
    return m_dimension;
}
void OAINetworkReportSpecSortCondition::setDimension(const QString &dimension) {
    m_dimension = dimension;
    m_dimension_isSet = true;
}

bool OAINetworkReportSpecSortCondition::is_dimension_Set() const{
    return m_dimension_isSet;
}

bool OAINetworkReportSpecSortCondition::is_dimension_Valid() const{
    return m_dimension_isValid;
}

QString OAINetworkReportSpecSortCondition::getMetric() const {
    return m_metric;
}
void OAINetworkReportSpecSortCondition::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAINetworkReportSpecSortCondition::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAINetworkReportSpecSortCondition::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAINetworkReportSpecSortCondition::getOrder() const {
    return m_order;
}
void OAINetworkReportSpecSortCondition::setOrder(const QString &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAINetworkReportSpecSortCondition::is_order_Set() const{
    return m_order_isSet;
}

bool OAINetworkReportSpecSortCondition::is_order_Valid() const{
    return m_order_isValid;
}

bool OAINetworkReportSpecSortCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkReportSpecSortCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
