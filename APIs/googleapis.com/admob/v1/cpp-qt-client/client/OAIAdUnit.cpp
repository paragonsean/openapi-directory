/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnit::OAIAdUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnit::OAIAdUnit() {
    this->initializeModel();
}

OAIAdUnit::~OAIAdUnit() {}

void OAIAdUnit::initializeModel() {

    m_ad_format_isSet = false;
    m_ad_format_isValid = false;

    m_ad_types_isSet = false;
    m_ad_types_isValid = false;

    m_ad_unit_id_isSet = false;
    m_ad_unit_id_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIAdUnit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnit::fromJsonObject(QJsonObject json) {

    m_ad_format_isValid = ::OpenAPI::fromJsonValue(m_ad_format, json[QString("adFormat")]);
    m_ad_format_isSet = !json[QString("adFormat")].isNull() && m_ad_format_isValid;

    m_ad_types_isValid = ::OpenAPI::fromJsonValue(m_ad_types, json[QString("adTypes")]);
    m_ad_types_isSet = !json[QString("adTypes")].isNull() && m_ad_types_isValid;

    m_ad_unit_id_isValid = ::OpenAPI::fromJsonValue(m_ad_unit_id, json[QString("adUnitId")]);
    m_ad_unit_id_isSet = !json[QString("adUnitId")].isNull() && m_ad_unit_id_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIAdUnit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnit::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_format_isSet) {
        obj.insert(QString("adFormat"), ::OpenAPI::toJsonValue(m_ad_format));
    }
    if (m_ad_types.size() > 0) {
        obj.insert(QString("adTypes"), ::OpenAPI::toJsonValue(m_ad_types));
    }
    if (m_ad_unit_id_isSet) {
        obj.insert(QString("adUnitId"), ::OpenAPI::toJsonValue(m_ad_unit_id));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIAdUnit::getAdFormat() const {
    return m_ad_format;
}
void OAIAdUnit::setAdFormat(const QString &ad_format) {
    m_ad_format = ad_format;
    m_ad_format_isSet = true;
}

bool OAIAdUnit::is_ad_format_Set() const{
    return m_ad_format_isSet;
}

bool OAIAdUnit::is_ad_format_Valid() const{
    return m_ad_format_isValid;
}

QList<QString> OAIAdUnit::getAdTypes() const {
    return m_ad_types;
}
void OAIAdUnit::setAdTypes(const QList<QString> &ad_types) {
    m_ad_types = ad_types;
    m_ad_types_isSet = true;
}

bool OAIAdUnit::is_ad_types_Set() const{
    return m_ad_types_isSet;
}

bool OAIAdUnit::is_ad_types_Valid() const{
    return m_ad_types_isValid;
}

QString OAIAdUnit::getAdUnitId() const {
    return m_ad_unit_id;
}
void OAIAdUnit::setAdUnitId(const QString &ad_unit_id) {
    m_ad_unit_id = ad_unit_id;
    m_ad_unit_id_isSet = true;
}

bool OAIAdUnit::is_ad_unit_id_Set() const{
    return m_ad_unit_id_isSet;
}

bool OAIAdUnit::is_ad_unit_id_Valid() const{
    return m_ad_unit_id_isValid;
}

QString OAIAdUnit::getAppId() const {
    return m_app_id;
}
void OAIAdUnit::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAdUnit::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAdUnit::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAdUnit::getDisplayName() const {
    return m_display_name;
}
void OAIAdUnit::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAdUnit::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAdUnit::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAdUnit::getName() const {
    return m_name;
}
void OAIAdUnit::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdUnit::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdUnit::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIAdUnit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
