/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkReportSpec.h
 *
 * The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the &#39;US&#39; and &#39;CN&#39; countries can look like the following example: { &#39;date_range&#39;: { &#39;start_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 1}, &#39;end_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 30} }, &#39;dimensions&#39;: [&#39;DATE&#39;, &#39;APP&#39;, &#39;COUNTRY&#39;], &#39;metrics&#39;: [&#39;CLICKS&#39;, &#39;ESTIMATED_EARNINGS&#39;], &#39;dimension_filters&#39;: [ { &#39;dimension&#39;: &#39;COUNTRY&#39;, &#39;matches_any&#39;: {&#39;values&#39;: [{&#39;value&#39;: &#39;US&#39;, &#39;value&#39;: &#39;CN&#39;}]} } ], &#39;sort_conditions&#39;: [ {&#39;dimension&#39;:&#39;APP&#39;, order: &#39;ASCENDING&#39;}, {&#39;metric&#39;:&#39;CLICKS&#39;, order: &#39;DESCENDING&#39;} ], &#39;localization_settings&#39;: { &#39;currency_code&#39;: &#39;USD&#39;, &#39;language_code&#39;: &#39;en-US&#39; } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE &gt;&#x3D; &#39;2021-09-01&#39; AND DATE &lt;&#x3D; &#39;2021-09-30&#39; AND COUNTRY IN (&#39;US&#39;, &#39;CN&#39;) GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
 */

#ifndef OAINetworkReportSpec_H
#define OAINetworkReportSpec_H

#include <QJsonObject>

#include "OAIDateRange.h"
#include "OAILocalizationSettings.h"
#include "OAINetworkReportSpecDimensionFilter.h"
#include "OAINetworkReportSpecSortCondition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDateRange;
class OAINetworkReportSpecDimensionFilter;
class OAILocalizationSettings;
class OAINetworkReportSpecSortCondition;

class OAINetworkReportSpec : public OAIObject {
public:
    OAINetworkReportSpec();
    OAINetworkReportSpec(QString json);
    ~OAINetworkReportSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDateRange getDateRange() const;
    void setDateRange(const OAIDateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    QList<OAINetworkReportSpecDimensionFilter> getDimensionFilters() const;
    void setDimensionFilters(const QList<OAINetworkReportSpecDimensionFilter> &dimension_filters);
    bool is_dimension_filters_Set() const;
    bool is_dimension_filters_Valid() const;

    QList<QString> getDimensions() const;
    void setDimensions(const QList<QString> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAILocalizationSettings getLocalizationSettings() const;
    void setLocalizationSettings(const OAILocalizationSettings &localization_settings);
    bool is_localization_settings_Set() const;
    bool is_localization_settings_Valid() const;

    qint32 getMaxReportRows() const;
    void setMaxReportRows(const qint32 &max_report_rows);
    bool is_max_report_rows_Set() const;
    bool is_max_report_rows_Valid() const;

    QList<QString> getMetrics() const;
    void setMetrics(const QList<QString> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAINetworkReportSpecSortCondition> getSortConditions() const;
    void setSortConditions(const QList<OAINetworkReportSpecSortCondition> &sort_conditions);
    bool is_sort_conditions_Set() const;
    bool is_sort_conditions_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    QList<OAINetworkReportSpecDimensionFilter> m_dimension_filters;
    bool m_dimension_filters_isSet;
    bool m_dimension_filters_isValid;

    QList<QString> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAILocalizationSettings m_localization_settings;
    bool m_localization_settings_isSet;
    bool m_localization_settings_isValid;

    qint32 m_max_report_rows;
    bool m_max_report_rows_isSet;
    bool m_max_report_rows_isValid;

    QList<QString> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAINetworkReportSpecSortCondition> m_sort_conditions;
    bool m_sort_conditions_isSet;
    bool m_sort_conditions_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkReportSpec)

#endif // OAINetworkReportSpec_H
