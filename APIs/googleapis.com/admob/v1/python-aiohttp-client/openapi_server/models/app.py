# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_linked_app_info import AppLinkedAppInfo
from openapi_server.models.app_manual_app_info import AppManualAppInfo
from openapi_server import util


class App(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_approval_state: str=None, app_id: str=None, linked_app_info: AppLinkedAppInfo=None, manual_app_info: AppManualAppInfo=None, name: str=None, platform: str=None):
        """App - a model defined in OpenAPI

        :param app_approval_state: The app_approval_state of this App.
        :param app_id: The app_id of this App.
        :param linked_app_info: The linked_app_info of this App.
        :param manual_app_info: The manual_app_info of this App.
        :param name: The name of this App.
        :param platform: The platform of this App.
        """
        self.openapi_types = {
            'app_approval_state': str,
            'app_id': str,
            'linked_app_info': AppLinkedAppInfo,
            'manual_app_info': AppManualAppInfo,
            'name': str,
            'platform': str
        }

        self.attribute_map = {
            'app_approval_state': 'appApprovalState',
            'app_id': 'appId',
            'linked_app_info': 'linkedAppInfo',
            'manual_app_info': 'manualAppInfo',
            'name': 'name',
            'platform': 'platform'
        }

        self._app_approval_state = app_approval_state
        self._app_id = app_id
        self._linked_app_info = linked_app_info
        self._manual_app_info = manual_app_info
        self._name = name
        self._platform = platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'App':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The App of this App.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_approval_state(self):
        """Gets the app_approval_state of this App.

        Output only. The approval state for the app. The field is read-only.

        :return: The app_approval_state of this App.
        :rtype: str
        """
        return self._app_approval_state

    @app_approval_state.setter
    def app_approval_state(self, app_approval_state):
        """Sets the app_approval_state of this App.

        Output only. The approval state for the app. The field is read-only.

        :param app_approval_state: The app_approval_state of this App.
        :type app_approval_state: str
        """
        allowed_values = ["APP_APPROVAL_STATE_UNSPECIFIED", "ACTION_REQUIRED", "IN_REVIEW", "APPROVED"]  # noqa: E501
        if app_approval_state not in allowed_values:
            raise ValueError(
                "Invalid value for `app_approval_state` ({0}), must be one of {1}"
                .format(app_approval_state, allowed_values)
            )

        self._app_approval_state = app_approval_state

    @property
    def app_id(self):
        """Gets the app_id of this App.

        The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789

        :return: The app_id of this App.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this App.

        The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789

        :param app_id: The app_id of this App.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def linked_app_info(self):
        """Gets the linked_app_info of this App.


        :return: The linked_app_info of this App.
        :rtype: AppLinkedAppInfo
        """
        return self._linked_app_info

    @linked_app_info.setter
    def linked_app_info(self, linked_app_info):
        """Sets the linked_app_info of this App.


        :param linked_app_info: The linked_app_info of this App.
        :type linked_app_info: AppLinkedAppInfo
        """

        self._linked_app_info = linked_app_info

    @property
    def manual_app_info(self):
        """Gets the manual_app_info of this App.


        :return: The manual_app_info of this App.
        :rtype: AppManualAppInfo
        """
        return self._manual_app_info

    @manual_app_info.setter
    def manual_app_info(self, manual_app_info):
        """Sets the manual_app_info of this App.


        :param manual_app_info: The manual_app_info of this App.
        :type manual_app_info: AppManualAppInfo
        """

        self._manual_app_info = manual_app_info

    @property
    def name(self):
        """Gets the name of this App.

        Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789

        :return: The name of this App.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.

        Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789

        :param name: The name of this App.
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this App.

        Describes the platform of the app. Limited to \"IOS\" and \"ANDROID\".

        :return: The platform of this App.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this App.

        Describes the platform of the app. Limited to \"IOS\" and \"ANDROID\".

        :param platform: The platform of this App.
        :type platform: str
        """

        self._platform = platform
