# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportRowMetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, double_value: float=None, integer_value: str=None, micros_value: str=None):
        """ReportRowMetricValue - a model defined in OpenAPI

        :param double_value: The double_value of this ReportRowMetricValue.
        :param integer_value: The integer_value of this ReportRowMetricValue.
        :param micros_value: The micros_value of this ReportRowMetricValue.
        """
        self.openapi_types = {
            'double_value': float,
            'integer_value': str,
            'micros_value': str
        }

        self.attribute_map = {
            'double_value': 'doubleValue',
            'integer_value': 'integerValue',
            'micros_value': 'microsValue'
        }

        self._double_value = double_value
        self._integer_value = integer_value
        self._micros_value = micros_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportRowMetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportRowMetricValue of this ReportRowMetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def double_value(self):
        """Gets the double_value of this ReportRowMetricValue.

        Double precision (approximate) decimal values. Rates are from 0 to 1.

        :return: The double_value of this ReportRowMetricValue.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this ReportRowMetricValue.

        Double precision (approximate) decimal values. Rates are from 0 to 1.

        :param double_value: The double_value of this ReportRowMetricValue.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def integer_value(self):
        """Gets the integer_value of this ReportRowMetricValue.

        Metric integer value.

        :return: The integer_value of this ReportRowMetricValue.
        :rtype: str
        """
        return self._integer_value

    @integer_value.setter
    def integer_value(self, integer_value):
        """Sets the integer_value of this ReportRowMetricValue.

        Metric integer value.

        :param integer_value: The integer_value of this ReportRowMetricValue.
        :type integer_value: str
        """

        self._integer_value = integer_value

    @property
    def micros_value(self):
        """Gets the micros_value of this ReportRowMetricValue.

        Amount in micros. One million is equivalent to one unit. Currency value is in the unit (USD, EUR or other) specified by the request. For example, $6.50 whould be represented as 6500000 micros.

        :return: The micros_value of this ReportRowMetricValue.
        :rtype: str
        """
        return self._micros_value

    @micros_value.setter
    def micros_value(self, micros_value):
        """Sets the micros_value of this ReportRowMetricValue.

        Amount in micros. One million is equivalent to one unit. Currency value is in the unit (USD, EUR or other) specified by the request. For example, $6.50 whould be represented as 6500000 micros.

        :param micros_value: The micros_value of this ReportRowMetricValue.
        :type micros_value: str
        """

        self._micros_value = micros_value
