# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkReportSpecSortCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension: str=None, metric: str=None, order: str=None):
        """NetworkReportSpecSortCondition - a model defined in OpenAPI

        :param dimension: The dimension of this NetworkReportSpecSortCondition.
        :param metric: The metric of this NetworkReportSpecSortCondition.
        :param order: The order of this NetworkReportSpecSortCondition.
        """
        self.openapi_types = {
            'dimension': str,
            'metric': str,
            'order': str
        }

        self.attribute_map = {
            'dimension': 'dimension',
            'metric': 'metric',
            'order': 'order'
        }

        self._dimension = dimension
        self._metric = metric
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkReportSpecSortCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkReportSpecSortCondition of this NetworkReportSpecSortCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension(self):
        """Gets the dimension of this NetworkReportSpecSortCondition.

        Sort by the specified dimension.

        :return: The dimension of this NetworkReportSpecSortCondition.
        :rtype: str
        """
        return self._dimension

    @dimension.setter
    def dimension(self, dimension):
        """Sets the dimension of this NetworkReportSpecSortCondition.

        Sort by the specified dimension.

        :param dimension: The dimension of this NetworkReportSpecSortCondition.
        :type dimension: str
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "DATE", "MONTH", "WEEK", "AD_UNIT", "APP", "AD_TYPE", "COUNTRY", "FORMAT", "PLATFORM", "MOBILE_OS_VERSION", "GMA_SDK_VERSION", "APP_VERSION_NAME", "SERVING_RESTRICTION"]  # noqa: E501
        if dimension not in allowed_values:
            raise ValueError(
                "Invalid value for `dimension` ({0}), must be one of {1}"
                .format(dimension, allowed_values)
            )

        self._dimension = dimension

    @property
    def metric(self):
        """Gets the metric of this NetworkReportSpecSortCondition.

        Sort by the specified metric.

        :return: The metric of this NetworkReportSpecSortCondition.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this NetworkReportSpecSortCondition.

        Sort by the specified metric.

        :param metric: The metric of this NetworkReportSpecSortCondition.
        :type metric: str
        """
        allowed_values = ["METRIC_UNSPECIFIED", "AD_REQUESTS", "CLICKS", "ESTIMATED_EARNINGS", "IMPRESSIONS", "IMPRESSION_CTR", "IMPRESSION_RPM", "MATCHED_REQUESTS", "MATCH_RATE", "SHOW_RATE"]  # noqa: E501
        if metric not in allowed_values:
            raise ValueError(
                "Invalid value for `metric` ({0}), must be one of {1}"
                .format(metric, allowed_values)
            )

        self._metric = metric

    @property
    def order(self):
        """Gets the order of this NetworkReportSpecSortCondition.

        Sorting order of the dimension or metric.

        :return: The order of this NetworkReportSpecSortCondition.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this NetworkReportSpecSortCondition.

        Sorting order of the dimension or metric.

        :param order: The order of this NetworkReportSpecSortCondition.
        :type order: str
        """
        allowed_values = ["SORT_ORDER_UNSPECIFIED", "ASCENDING", "DESCENDING"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order
