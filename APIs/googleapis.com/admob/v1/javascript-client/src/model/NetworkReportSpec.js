/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateRange from './DateRange';
import LocalizationSettings from './LocalizationSettings';
import NetworkReportSpecDimensionFilter from './NetworkReportSpecDimensionFilter';
import NetworkReportSpecSortCondition from './NetworkReportSpecSortCondition';

/**
 * The NetworkReportSpec model module.
 * @module model/NetworkReportSpec
 * @version v1
 */
class NetworkReportSpec {
    /**
     * Constructs a new <code>NetworkReportSpec</code>.
     * The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the &#39;US&#39; and &#39;CN&#39; countries can look like the following example: { &#39;date_range&#39;: { &#39;start_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 1}, &#39;end_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 30} }, &#39;dimensions&#39;: [&#39;DATE&#39;, &#39;APP&#39;, &#39;COUNTRY&#39;], &#39;metrics&#39;: [&#39;CLICKS&#39;, &#39;ESTIMATED_EARNINGS&#39;], &#39;dimension_filters&#39;: [ { &#39;dimension&#39;: &#39;COUNTRY&#39;, &#39;matches_any&#39;: {&#39;values&#39;: [{&#39;value&#39;: &#39;US&#39;, &#39;value&#39;: &#39;CN&#39;}]} } ], &#39;sort_conditions&#39;: [ {&#39;dimension&#39;:&#39;APP&#39;, order: &#39;ASCENDING&#39;}, {&#39;metric&#39;:&#39;CLICKS&#39;, order: &#39;DESCENDING&#39;} ], &#39;localization_settings&#39;: { &#39;currency_code&#39;: &#39;USD&#39;, &#39;language_code&#39;: &#39;en-US&#39; } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE &gt;&#x3D; &#39;2021-09-01&#39; AND DATE &lt;&#x3D; &#39;2021-09-30&#39; AND COUNTRY IN (&#39;US&#39;, &#39;CN&#39;) GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
     * @alias module:model/NetworkReportSpec
     */
    constructor() { 
        
        NetworkReportSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkReportSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkReportSpec} obj Optional instance to populate.
     * @return {module:model/NetworkReportSpec} The populated <code>NetworkReportSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkReportSpec();

            if (data.hasOwnProperty('dateRange')) {
                obj['dateRange'] = DateRange.constructFromObject(data['dateRange']);
            }
            if (data.hasOwnProperty('dimensionFilters')) {
                obj['dimensionFilters'] = ApiClient.convertToType(data['dimensionFilters'], [NetworkReportSpecDimensionFilter]);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], ['String']);
            }
            if (data.hasOwnProperty('localizationSettings')) {
                obj['localizationSettings'] = LocalizationSettings.constructFromObject(data['localizationSettings']);
            }
            if (data.hasOwnProperty('maxReportRows')) {
                obj['maxReportRows'] = ApiClient.convertToType(data['maxReportRows'], 'Number');
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], ['String']);
            }
            if (data.hasOwnProperty('sortConditions')) {
                obj['sortConditions'] = ApiClient.convertToType(data['sortConditions'], [NetworkReportSpecSortCondition]);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkReportSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkReportSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dateRange`
        if (data['dateRange']) { // data not null
          DateRange.validateJSON(data['dateRange']);
        }
        if (data['dimensionFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensionFilters'])) {
                throw new Error("Expected the field `dimensionFilters` to be an array in the JSON data but got " + data['dimensionFilters']);
            }
            // validate the optional field `dimensionFilters` (array)
            for (const item of data['dimensionFilters']) {
                NetworkReportSpecDimensionFilter.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dimensions'])) {
            throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
        }
        // validate the optional field `localizationSettings`
        if (data['localizationSettings']) { // data not null
          LocalizationSettings.validateJSON(data['localizationSettings']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metrics'])) {
            throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
        }
        if (data['sortConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sortConditions'])) {
                throw new Error("Expected the field `sortConditions` to be an array in the JSON data but got " + data['sortConditions']);
            }
            // validate the optional field `sortConditions` (array)
            for (const item of data['sortConditions']) {
                NetworkReportSpecSortCondition.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * @member {module:model/DateRange} dateRange
 */
NetworkReportSpec.prototype['dateRange'] = undefined;

/**
 * Describes which report rows to match based on their dimension values.
 * @member {Array.<module:model/NetworkReportSpecDimensionFilter>} dimensionFilters
 */
NetworkReportSpec.prototype['dimensionFilters'] = undefined;

/**
 * List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.
 * @member {Array.<module:model/NetworkReportSpec.DimensionsEnum>} dimensions
 */
NetworkReportSpec.prototype['dimensions'] = undefined;

/**
 * @member {module:model/LocalizationSettings} localizationSettings
 */
NetworkReportSpec.prototype['localizationSettings'] = undefined;

/**
 * Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.
 * @member {Number} maxReportRows
 */
NetworkReportSpec.prototype['maxReportRows'] = undefined;

/**
 * List of metrics of the report. A report must specify at least one metric.
 * @member {Array.<module:model/NetworkReportSpec.MetricsEnum>} metrics
 */
NetworkReportSpec.prototype['metrics'] = undefined;

/**
 * Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.
 * @member {Array.<module:model/NetworkReportSpecSortCondition>} sortConditions
 */
NetworkReportSpec.prototype['sortConditions'] = undefined;

/**
 * A report time zone. Accepts an IANA TZ name values, such as \"America/Los_Angeles.\" If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The \"America/Los_Angeles\" is the only supported value at the moment.
 * @member {String} timeZone
 */
NetworkReportSpec.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>dimensions</code> property.
 * @enum {String}
 * @readonly
 */
NetworkReportSpec['DimensionsEnum'] = {

    /**
     * value: "DIMENSION_UNSPECIFIED"
     * @const
     */
    "DIMENSION_UNSPECIFIED": "DIMENSION_UNSPECIFIED",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "MONTH"
     * @const
     */
    "MONTH": "MONTH",

    /**
     * value: "WEEK"
     * @const
     */
    "WEEK": "WEEK",

    /**
     * value: "AD_UNIT"
     * @const
     */
    "AD_UNIT": "AD_UNIT",

    /**
     * value: "APP"
     * @const
     */
    "APP": "APP",

    /**
     * value: "AD_TYPE"
     * @const
     */
    "AD_TYPE": "AD_TYPE",

    /**
     * value: "COUNTRY"
     * @const
     */
    "COUNTRY": "COUNTRY",

    /**
     * value: "FORMAT"
     * @const
     */
    "FORMAT": "FORMAT",

    /**
     * value: "PLATFORM"
     * @const
     */
    "PLATFORM": "PLATFORM",

    /**
     * value: "MOBILE_OS_VERSION"
     * @const
     */
    "MOBILE_OS_VERSION": "MOBILE_OS_VERSION",

    /**
     * value: "GMA_SDK_VERSION"
     * @const
     */
    "GMA_SDK_VERSION": "GMA_SDK_VERSION",

    /**
     * value: "APP_VERSION_NAME"
     * @const
     */
    "APP_VERSION_NAME": "APP_VERSION_NAME",

    /**
     * value: "SERVING_RESTRICTION"
     * @const
     */
    "SERVING_RESTRICTION": "SERVING_RESTRICTION"
};


/**
 * Allowed values for the <code>metrics</code> property.
 * @enum {String}
 * @readonly
 */
NetworkReportSpec['MetricsEnum'] = {

    /**
     * value: "METRIC_UNSPECIFIED"
     * @const
     */
    "METRIC_UNSPECIFIED": "METRIC_UNSPECIFIED",

    /**
     * value: "AD_REQUESTS"
     * @const
     */
    "AD_REQUESTS": "AD_REQUESTS",

    /**
     * value: "CLICKS"
     * @const
     */
    "CLICKS": "CLICKS",

    /**
     * value: "ESTIMATED_EARNINGS"
     * @const
     */
    "ESTIMATED_EARNINGS": "ESTIMATED_EARNINGS",

    /**
     * value: "IMPRESSIONS"
     * @const
     */
    "IMPRESSIONS": "IMPRESSIONS",

    /**
     * value: "IMPRESSION_CTR"
     * @const
     */
    "IMPRESSION_CTR": "IMPRESSION_CTR",

    /**
     * value: "IMPRESSION_RPM"
     * @const
     */
    "IMPRESSION_RPM": "IMPRESSION_RPM",

    /**
     * value: "MATCHED_REQUESTS"
     * @const
     */
    "MATCHED_REQUESTS": "MATCHED_REQUESTS",

    /**
     * value: "MATCH_RATE"
     * @const
     */
    "MATCH_RATE": "MATCH_RATE",

    /**
     * value: "SHOW_RATE"
     * @const
     */
    "SHOW_RATE": "SHOW_RATE"
};



export default NetworkReportSpec;

