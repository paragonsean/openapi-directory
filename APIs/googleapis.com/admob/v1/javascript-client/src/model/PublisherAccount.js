/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublisherAccount model module.
 * @module model/PublisherAccount
 * @version v1
 */
class PublisherAccount {
    /**
     * Constructs a new <code>PublisherAccount</code>.
     * A publisher account contains information relevant to the use of this API, such as the time zone used for the reports.
     * @alias module:model/PublisherAccount
     */
    constructor() { 
        
        PublisherAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PublisherAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublisherAccount} obj Optional instance to populate.
     * @return {module:model/PublisherAccount} The populated <code>PublisherAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublisherAccount();

            if (data.hasOwnProperty('currencyCode')) {
                obj['currencyCode'] = ApiClient.convertToType(data['currencyCode'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('publisherId')) {
                obj['publisherId'] = ApiClient.convertToType(data['publisherId'], 'String');
            }
            if (data.hasOwnProperty('reportingTimeZone')) {
                obj['reportingTimeZone'] = ApiClient.convertToType(data['reportingTimeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublisherAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublisherAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currencyCode'] && !(typeof data['currencyCode'] === 'string' || data['currencyCode'] instanceof String)) {
            throw new Error("Expected the field `currencyCode` to be a primitive type in the JSON string but got " + data['currencyCode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['publisherId'] && !(typeof data['publisherId'] === 'string' || data['publisherId'] instanceof String)) {
            throw new Error("Expected the field `publisherId` to be a primitive type in the JSON string but got " + data['publisherId']);
        }
        // ensure the json data is a string
        if (data['reportingTimeZone'] && !(typeof data['reportingTimeZone'] === 'string' || data['reportingTimeZone'] instanceof String)) {
            throw new Error("Expected the field `reportingTimeZone` to be a primitive type in the JSON string but got " + data['reportingTimeZone']);
        }

        return true;
    }


}



/**
 * Currency code of the earning-related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion.
 * @member {String} currencyCode
 */
PublisherAccount.prototype['currencyCode'] = undefined;

/**
 * Resource name of this account. Format is accounts/{publisher_id}.
 * @member {String} name
 */
PublisherAccount.prototype['name'] = undefined;

/**
 * The unique ID by which this publisher account can be identified in the API requests (for example, pub-1234567890).
 * @member {String} publisherId
 */
PublisherAccount.prototype['publisherId'] = undefined;

/**
 * The time zone that is used in reports that are generated for this account. The value is a time-zone ID as specified by the CLDR project, for example, \"America/Los_Angeles\".
 * @member {String} reportingTimeZone
 */
PublisherAccount.prototype['reportingTimeZone'] = undefined;






export default PublisherAccount;

