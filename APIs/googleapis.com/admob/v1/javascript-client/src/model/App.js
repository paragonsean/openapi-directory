/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppLinkedAppInfo from './AppLinkedAppInfo';
import AppManualAppInfo from './AppManualAppInfo';

/**
 * The App model module.
 * @module model/App
 * @version v1
 */
class App {
    /**
     * Constructs a new <code>App</code>.
     * Describes an AdMob app for a specific platform (For example: Android or iOS).
     * @alias module:model/App
     */
    constructor() { 
        
        App.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>App</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/App} obj Optional instance to populate.
     * @return {module:model/App} The populated <code>App</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new App();

            if (data.hasOwnProperty('appApprovalState')) {
                obj['appApprovalState'] = ApiClient.convertToType(data['appApprovalState'], 'String');
            }
            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('linkedAppInfo')) {
                obj['linkedAppInfo'] = AppLinkedAppInfo.constructFromObject(data['linkedAppInfo']);
            }
            if (data.hasOwnProperty('manualAppInfo')) {
                obj['manualAppInfo'] = AppManualAppInfo.constructFromObject(data['manualAppInfo']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>App</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>App</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appApprovalState'] && !(typeof data['appApprovalState'] === 'string' || data['appApprovalState'] instanceof String)) {
            throw new Error("Expected the field `appApprovalState` to be a primitive type in the JSON string but got " + data['appApprovalState']);
        }
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // validate the optional field `linkedAppInfo`
        if (data['linkedAppInfo']) { // data not null
          AppLinkedAppInfo.validateJSON(data['linkedAppInfo']);
        }
        // validate the optional field `manualAppInfo`
        if (data['manualAppInfo']) { // data not null
          AppManualAppInfo.validateJSON(data['manualAppInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }

        return true;
    }


}



/**
 * Output only. The approval state for the app. The field is read-only.
 * @member {module:model/App.AppApprovalStateEnum} appApprovalState
 */
App.prototype['appApprovalState'] = undefined;

/**
 * The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789
 * @member {String} appId
 */
App.prototype['appId'] = undefined;

/**
 * @member {module:model/AppLinkedAppInfo} linkedAppInfo
 */
App.prototype['linkedAppInfo'] = undefined;

/**
 * @member {module:model/AppManualAppInfo} manualAppInfo
 */
App.prototype['manualAppInfo'] = undefined;

/**
 * Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789
 * @member {String} name
 */
App.prototype['name'] = undefined;

/**
 * Describes the platform of the app. Limited to \"IOS\" and \"ANDROID\".
 * @member {String} platform
 */
App.prototype['platform'] = undefined;





/**
 * Allowed values for the <code>appApprovalState</code> property.
 * @enum {String}
 * @readonly
 */
App['AppApprovalStateEnum'] = {

    /**
     * value: "APP_APPROVAL_STATE_UNSPECIFIED"
     * @const
     */
    "APP_APPROVAL_STATE_UNSPECIFIED": "APP_APPROVAL_STATE_UNSPECIFIED",

    /**
     * value: "ACTION_REQUIRED"
     * @const
     */
    "ACTION_REQUIRED": "ACTION_REQUIRED",

    /**
     * value: "IN_REVIEW"
     * @const
     */
    "IN_REVIEW": "IN_REVIEW",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED"
};



export default App;

