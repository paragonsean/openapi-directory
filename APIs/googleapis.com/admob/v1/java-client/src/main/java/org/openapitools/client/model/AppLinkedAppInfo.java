/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information from the app store if the app is linked to an app store.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:44.550729-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppLinkedAppInfo {
  public static final String SERIALIZED_NAME_APP_STORE_ID = "appStoreId";
  @SerializedName(SERIALIZED_NAME_APP_STORE_ID)
  private String appStoreId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public AppLinkedAppInfo() {
  }

  public AppLinkedAppInfo(
     String displayName
  ) {
    this();
    this.displayName = displayName;
  }

  public AppLinkedAppInfo appStoreId(String appStoreId) {
    this.appStoreId = appStoreId;
    return this;
  }

  /**
   * The app store ID of the app; present if and only if the app is linked to an app store. If the app is added to the Google Play store, it will be the application ID of the app. For example: \&quot;com.example.myapp\&quot;. See https://developer.android.com/studio/build/application-id. If the app is added to the Apple App Store, it will be app store ID. For example \&quot;105169111\&quot;. Note that setting the app store id is considered an irreversible action. Once an app is linked, it cannot be unlinked.
   * @return appStoreId
   */
  @javax.annotation.Nullable
  public String getAppStoreId() {
    return appStoreId;
  }

  public void setAppStoreId(String appStoreId) {
    this.appStoreId = appStoreId;
  }


  /**
   * Output only. Display name of the app as it appears in the app store. This is an output-only field, and may be empty if the app cannot be found in the store.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppLinkedAppInfo appLinkedAppInfo = (AppLinkedAppInfo) o;
    return Objects.equals(this.appStoreId, appLinkedAppInfo.appStoreId) &&
        Objects.equals(this.displayName, appLinkedAppInfo.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appStoreId, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppLinkedAppInfo {\n");
    sb.append("    appStoreId: ").append(toIndentedString(appStoreId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appStoreId");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppLinkedAppInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppLinkedAppInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppLinkedAppInfo is not found in the empty JSON string", AppLinkedAppInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppLinkedAppInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppLinkedAppInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appStoreId") != null && !jsonObj.get("appStoreId").isJsonNull()) && !jsonObj.get("appStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appStoreId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppLinkedAppInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppLinkedAppInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppLinkedAppInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppLinkedAppInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppLinkedAppInfo>() {
           @Override
           public void write(JsonWriter out, AppLinkedAppInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppLinkedAppInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppLinkedAppInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppLinkedAppInfo
   * @throws IOException if the JSON string is invalid with respect to AppLinkedAppInfo
   */
  public static AppLinkedAppInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppLinkedAppInfo.class);
  }

  /**
   * Convert an instance of AppLinkedAppInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

