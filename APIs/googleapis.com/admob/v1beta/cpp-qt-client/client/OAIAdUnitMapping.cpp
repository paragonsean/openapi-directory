/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnitMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnitMapping::OAIAdUnitMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnitMapping::OAIAdUnitMapping() {
    this->initializeModel();
}

OAIAdUnitMapping::~OAIAdUnitMapping() {}

void OAIAdUnitMapping::initializeModel() {

    m_ad_unit_configurations_isSet = false;
    m_ad_unit_configurations_isValid = false;

    m_adapter_id_isSet = false;
    m_adapter_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAdUnitMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnitMapping::fromJsonObject(QJsonObject json) {

    m_ad_unit_configurations_isValid = ::OpenAPI::fromJsonValue(m_ad_unit_configurations, json[QString("adUnitConfigurations")]);
    m_ad_unit_configurations_isSet = !json[QString("adUnitConfigurations")].isNull() && m_ad_unit_configurations_isValid;

    m_adapter_id_isValid = ::OpenAPI::fromJsonValue(m_adapter_id, json[QString("adapterId")]);
    m_adapter_id_isSet = !json[QString("adapterId")].isNull() && m_adapter_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAdUnitMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnitMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_unit_configurations.size() > 0) {
        obj.insert(QString("adUnitConfigurations"), ::OpenAPI::toJsonValue(m_ad_unit_configurations));
    }
    if (m_adapter_id_isSet) {
        obj.insert(QString("adapterId"), ::OpenAPI::toJsonValue(m_adapter_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QMap<QString, QString> OAIAdUnitMapping::getAdUnitConfigurations() const {
    return m_ad_unit_configurations;
}
void OAIAdUnitMapping::setAdUnitConfigurations(const QMap<QString, QString> &ad_unit_configurations) {
    m_ad_unit_configurations = ad_unit_configurations;
    m_ad_unit_configurations_isSet = true;
}

bool OAIAdUnitMapping::is_ad_unit_configurations_Set() const{
    return m_ad_unit_configurations_isSet;
}

bool OAIAdUnitMapping::is_ad_unit_configurations_Valid() const{
    return m_ad_unit_configurations_isValid;
}

QString OAIAdUnitMapping::getAdapterId() const {
    return m_adapter_id;
}
void OAIAdUnitMapping::setAdapterId(const QString &adapter_id) {
    m_adapter_id = adapter_id;
    m_adapter_id_isSet = true;
}

bool OAIAdUnitMapping::is_adapter_id_Set() const{
    return m_adapter_id_isSet;
}

bool OAIAdUnitMapping::is_adapter_id_Valid() const{
    return m_adapter_id_isValid;
}

QString OAIAdUnitMapping::getDisplayName() const {
    return m_display_name;
}
void OAIAdUnitMapping::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAdUnitMapping::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAdUnitMapping::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAdUnitMapping::getName() const {
    return m_name;
}
void OAIAdUnitMapping::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdUnitMapping::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdUnitMapping::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdUnitMapping::getState() const {
    return m_state;
}
void OAIAdUnitMapping::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAdUnitMapping::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAdUnitMapping::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAdUnitMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_unit_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adapter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnitMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
