/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkReportSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkReportSpec::OAINetworkReportSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkReportSpec::OAINetworkReportSpec() {
    this->initializeModel();
}

OAINetworkReportSpec::~OAINetworkReportSpec() {}

void OAINetworkReportSpec::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_dimension_filters_isSet = false;
    m_dimension_filters_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_localization_settings_isSet = false;
    m_localization_settings_isValid = false;

    m_max_report_rows_isSet = false;
    m_max_report_rows_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_sort_conditions_isSet = false;
    m_sort_conditions_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAINetworkReportSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkReportSpec::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_dimension_filters_isValid = ::OpenAPI::fromJsonValue(m_dimension_filters, json[QString("dimensionFilters")]);
    m_dimension_filters_isSet = !json[QString("dimensionFilters")].isNull() && m_dimension_filters_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_localization_settings_isValid = ::OpenAPI::fromJsonValue(m_localization_settings, json[QString("localizationSettings")]);
    m_localization_settings_isSet = !json[QString("localizationSettings")].isNull() && m_localization_settings_isValid;

    m_max_report_rows_isValid = ::OpenAPI::fromJsonValue(m_max_report_rows, json[QString("maxReportRows")]);
    m_max_report_rows_isSet = !json[QString("maxReportRows")].isNull() && m_max_report_rows_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_sort_conditions_isValid = ::OpenAPI::fromJsonValue(m_sort_conditions, json[QString("sortConditions")]);
    m_sort_conditions_isSet = !json[QString("sortConditions")].isNull() && m_sort_conditions_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAINetworkReportSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkReportSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_dimension_filters.size() > 0) {
        obj.insert(QString("dimensionFilters"), ::OpenAPI::toJsonValue(m_dimension_filters));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_localization_settings.isSet()) {
        obj.insert(QString("localizationSettings"), ::OpenAPI::toJsonValue(m_localization_settings));
    }
    if (m_max_report_rows_isSet) {
        obj.insert(QString("maxReportRows"), ::OpenAPI::toJsonValue(m_max_report_rows));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_sort_conditions.size() > 0) {
        obj.insert(QString("sortConditions"), ::OpenAPI::toJsonValue(m_sort_conditions));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

OAIDateRange OAINetworkReportSpec::getDateRange() const {
    return m_date_range;
}
void OAINetworkReportSpec::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAINetworkReportSpec::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAINetworkReportSpec::is_date_range_Valid() const{
    return m_date_range_isValid;
}

QList<OAINetworkReportSpecDimensionFilter> OAINetworkReportSpec::getDimensionFilters() const {
    return m_dimension_filters;
}
void OAINetworkReportSpec::setDimensionFilters(const QList<OAINetworkReportSpecDimensionFilter> &dimension_filters) {
    m_dimension_filters = dimension_filters;
    m_dimension_filters_isSet = true;
}

bool OAINetworkReportSpec::is_dimension_filters_Set() const{
    return m_dimension_filters_isSet;
}

bool OAINetworkReportSpec::is_dimension_filters_Valid() const{
    return m_dimension_filters_isValid;
}

QList<QString> OAINetworkReportSpec::getDimensions() const {
    return m_dimensions;
}
void OAINetworkReportSpec::setDimensions(const QList<QString> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAINetworkReportSpec::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAINetworkReportSpec::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

OAILocalizationSettings OAINetworkReportSpec::getLocalizationSettings() const {
    return m_localization_settings;
}
void OAINetworkReportSpec::setLocalizationSettings(const OAILocalizationSettings &localization_settings) {
    m_localization_settings = localization_settings;
    m_localization_settings_isSet = true;
}

bool OAINetworkReportSpec::is_localization_settings_Set() const{
    return m_localization_settings_isSet;
}

bool OAINetworkReportSpec::is_localization_settings_Valid() const{
    return m_localization_settings_isValid;
}

qint32 OAINetworkReportSpec::getMaxReportRows() const {
    return m_max_report_rows;
}
void OAINetworkReportSpec::setMaxReportRows(const qint32 &max_report_rows) {
    m_max_report_rows = max_report_rows;
    m_max_report_rows_isSet = true;
}

bool OAINetworkReportSpec::is_max_report_rows_Set() const{
    return m_max_report_rows_isSet;
}

bool OAINetworkReportSpec::is_max_report_rows_Valid() const{
    return m_max_report_rows_isValid;
}

QList<QString> OAINetworkReportSpec::getMetrics() const {
    return m_metrics;
}
void OAINetworkReportSpec::setMetrics(const QList<QString> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAINetworkReportSpec::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAINetworkReportSpec::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QList<OAINetworkReportSpecSortCondition> OAINetworkReportSpec::getSortConditions() const {
    return m_sort_conditions;
}
void OAINetworkReportSpec::setSortConditions(const QList<OAINetworkReportSpecSortCondition> &sort_conditions) {
    m_sort_conditions = sort_conditions;
    m_sort_conditions_isSet = true;
}

bool OAINetworkReportSpec::is_sort_conditions_Set() const{
    return m_sort_conditions_isSet;
}

bool OAINetworkReportSpec::is_sort_conditions_Valid() const{
    return m_sort_conditions_isValid;
}

QString OAINetworkReportSpec::getTimeZone() const {
    return m_time_zone;
}
void OAINetworkReportSpec::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAINetworkReportSpec::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAINetworkReportSpec::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAINetworkReportSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimension_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_report_rows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkReportSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
