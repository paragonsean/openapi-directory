/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp::OAIApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp::OAIApp() {
    this->initializeModel();
}

OAIApp::~OAIApp() {}

void OAIApp::initializeModel() {

    m_app_approval_state_isSet = false;
    m_app_approval_state_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_linked_app_info_isSet = false;
    m_linked_app_info_isValid = false;

    m_manual_app_info_isSet = false;
    m_manual_app_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;
}

void OAIApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp::fromJsonObject(QJsonObject json) {

    m_app_approval_state_isValid = ::OpenAPI::fromJsonValue(m_app_approval_state, json[QString("appApprovalState")]);
    m_app_approval_state_isSet = !json[QString("appApprovalState")].isNull() && m_app_approval_state_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_linked_app_info_isValid = ::OpenAPI::fromJsonValue(m_linked_app_info, json[QString("linkedAppInfo")]);
    m_linked_app_info_isSet = !json[QString("linkedAppInfo")].isNull() && m_linked_app_info_isValid;

    m_manual_app_info_isValid = ::OpenAPI::fromJsonValue(m_manual_app_info, json[QString("manualAppInfo")]);
    m_manual_app_info_isSet = !json[QString("manualAppInfo")].isNull() && m_manual_app_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;
}

QString OAIApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp::asJsonObject() const {
    QJsonObject obj;
    if (m_app_approval_state_isSet) {
        obj.insert(QString("appApprovalState"), ::OpenAPI::toJsonValue(m_app_approval_state));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_linked_app_info.isSet()) {
        obj.insert(QString("linkedAppInfo"), ::OpenAPI::toJsonValue(m_linked_app_info));
    }
    if (m_manual_app_info.isSet()) {
        obj.insert(QString("manualAppInfo"), ::OpenAPI::toJsonValue(m_manual_app_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    return obj;
}

QString OAIApp::getAppApprovalState() const {
    return m_app_approval_state;
}
void OAIApp::setAppApprovalState(const QString &app_approval_state) {
    m_app_approval_state = app_approval_state;
    m_app_approval_state_isSet = true;
}

bool OAIApp::is_app_approval_state_Set() const{
    return m_app_approval_state_isSet;
}

bool OAIApp::is_app_approval_state_Valid() const{
    return m_app_approval_state_isValid;
}

QString OAIApp::getAppId() const {
    return m_app_id;
}
void OAIApp::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIApp::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIApp::is_app_id_Valid() const{
    return m_app_id_isValid;
}

OAIAppLinkedAppInfo OAIApp::getLinkedAppInfo() const {
    return m_linked_app_info;
}
void OAIApp::setLinkedAppInfo(const OAIAppLinkedAppInfo &linked_app_info) {
    m_linked_app_info = linked_app_info;
    m_linked_app_info_isSet = true;
}

bool OAIApp::is_linked_app_info_Set() const{
    return m_linked_app_info_isSet;
}

bool OAIApp::is_linked_app_info_Valid() const{
    return m_linked_app_info_isValid;
}

OAIAppManualAppInfo OAIApp::getManualAppInfo() const {
    return m_manual_app_info;
}
void OAIApp::setManualAppInfo(const OAIAppManualAppInfo &manual_app_info) {
    m_manual_app_info = manual_app_info;
    m_manual_app_info_isSet = true;
}

bool OAIApp::is_manual_app_info_Set() const{
    return m_manual_app_info_isSet;
}

bool OAIApp::is_manual_app_info_Valid() const{
    return m_manual_app_info_isValid;
}

QString OAIApp::getName() const {
    return m_name;
}
void OAIApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApp::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApp::getPlatform() const {
    return m_platform;
}
void OAIApp::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIApp::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIApp::is_platform_Valid() const{
    return m_platform_isValid;
}

bool OAIApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_approval_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_app_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_app_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
