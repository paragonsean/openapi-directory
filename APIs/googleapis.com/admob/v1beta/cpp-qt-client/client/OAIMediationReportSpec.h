/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMediationReportSpec.h
 *
 * The specification for generating an AdMob Mediation report. For example, the specification to get observed ECPM sliced by ad source and app for the &#39;US&#39; and &#39;CN&#39; countries can look like the following example: { \&quot;date_range\&quot;: { \&quot;start_date\&quot;: {\&quot;year\&quot;: 2021, \&quot;month\&quot;: 9, \&quot;day\&quot;: 1}, \&quot;end_date\&quot;: {\&quot;year\&quot;: 2021, \&quot;month\&quot;: 9, \&quot;day\&quot;: 30} }, \&quot;dimensions\&quot;: [\&quot;AD_SOURCE\&quot;, \&quot;APP\&quot;, \&quot;COUNTRY\&quot;], \&quot;metrics\&quot;: [\&quot;OBSERVED_ECPM\&quot;], \&quot;dimension_filters\&quot;: [ { \&quot;dimension\&quot;: \&quot;COUNTRY\&quot;, \&quot;matches_any\&quot;: {\&quot;values\&quot;: [{\&quot;value\&quot;: \&quot;US\&quot;, \&quot;value\&quot;: \&quot;CN\&quot;}]} } ], \&quot;sort_conditions\&quot;: [ {\&quot;dimension\&quot;:\&quot;APP\&quot;, order: \&quot;ASCENDING\&quot;} ], \&quot;localization_settings\&quot;: { \&quot;currency_code\&quot;: \&quot;USD\&quot;, \&quot;language_code\&quot;: \&quot;en-US\&quot; } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT AD_SOURCE, APP, COUNTRY, OBSERVED_ECPM FROM MEDIATION_REPORT WHERE DATE &gt;&#x3D; &#39;2021-09-01&#39; AND DATE &lt;&#x3D; &#39;2021-09-30&#39; AND COUNTRY IN (&#39;US&#39;, &#39;CN&#39;) GROUP BY AD_SOURCE, APP, COUNTRY ORDER BY APP ASC;
 */

#ifndef OAIMediationReportSpec_H
#define OAIMediationReportSpec_H

#include <QJsonObject>

#include "OAIDateRange.h"
#include "OAILocalizationSettings.h"
#include "OAIMediationReportSpecDimensionFilter.h"
#include "OAIMediationReportSpecSortCondition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDateRange;
class OAIMediationReportSpecDimensionFilter;
class OAILocalizationSettings;
class OAIMediationReportSpecSortCondition;

class OAIMediationReportSpec : public OAIObject {
public:
    OAIMediationReportSpec();
    OAIMediationReportSpec(QString json);
    ~OAIMediationReportSpec() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDateRange getDateRange() const;
    void setDateRange(const OAIDateRange &date_range);
    bool is_date_range_Set() const;
    bool is_date_range_Valid() const;

    QList<OAIMediationReportSpecDimensionFilter> getDimensionFilters() const;
    void setDimensionFilters(const QList<OAIMediationReportSpecDimensionFilter> &dimension_filters);
    bool is_dimension_filters_Set() const;
    bool is_dimension_filters_Valid() const;

    QList<QString> getDimensions() const;
    void setDimensions(const QList<QString> &dimensions);
    bool is_dimensions_Set() const;
    bool is_dimensions_Valid() const;

    OAILocalizationSettings getLocalizationSettings() const;
    void setLocalizationSettings(const OAILocalizationSettings &localization_settings);
    bool is_localization_settings_Set() const;
    bool is_localization_settings_Valid() const;

    qint32 getMaxReportRows() const;
    void setMaxReportRows(const qint32 &max_report_rows);
    bool is_max_report_rows_Set() const;
    bool is_max_report_rows_Valid() const;

    QList<QString> getMetrics() const;
    void setMetrics(const QList<QString> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QList<OAIMediationReportSpecSortCondition> getSortConditions() const;
    void setSortConditions(const QList<OAIMediationReportSpecSortCondition> &sort_conditions);
    bool is_sort_conditions_Set() const;
    bool is_sort_conditions_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDateRange m_date_range;
    bool m_date_range_isSet;
    bool m_date_range_isValid;

    QList<OAIMediationReportSpecDimensionFilter> m_dimension_filters;
    bool m_dimension_filters_isSet;
    bool m_dimension_filters_isValid;

    QList<QString> m_dimensions;
    bool m_dimensions_isSet;
    bool m_dimensions_isValid;

    OAILocalizationSettings m_localization_settings;
    bool m_localization_settings_isSet;
    bool m_localization_settings_isValid;

    qint32 m_max_report_rows;
    bool m_max_report_rows_isSet;
    bool m_max_report_rows_isValid;

    QList<QString> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QList<OAIMediationReportSpecSortCondition> m_sort_conditions;
    bool m_sort_conditions_isSet;
    bool m_sort_conditions_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMediationReportSpec)

#endif // OAIMediationReportSpec_H
