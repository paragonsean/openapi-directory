/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdapter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdapter::OAIAdapter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdapter::OAIAdapter() {
    this->initializeModel();
}

OAIAdapter::~OAIAdapter() {}

void OAIAdapter::initializeModel() {

    m_adapter_config_metadata_isSet = false;
    m_adapter_config_metadata_isValid = false;

    m_adapter_id_isSet = false;
    m_adapter_id_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIAdapter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdapter::fromJsonObject(QJsonObject json) {

    m_adapter_config_metadata_isValid = ::OpenAPI::fromJsonValue(m_adapter_config_metadata, json[QString("adapterConfigMetadata")]);
    m_adapter_config_metadata_isSet = !json[QString("adapterConfigMetadata")].isNull() && m_adapter_config_metadata_isValid;

    m_adapter_id_isValid = ::OpenAPI::fromJsonValue(m_adapter_id, json[QString("adapterId")]);
    m_adapter_id_isSet = !json[QString("adapterId")].isNull() && m_adapter_id_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIAdapter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdapter::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_config_metadata.size() > 0) {
        obj.insert(QString("adapterConfigMetadata"), ::OpenAPI::toJsonValue(m_adapter_config_metadata));
    }
    if (m_adapter_id_isSet) {
        obj.insert(QString("adapterId"), ::OpenAPI::toJsonValue(m_adapter_id));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<OAIAdapterAdapterConfigMetadata> OAIAdapter::getAdapterConfigMetadata() const {
    return m_adapter_config_metadata;
}
void OAIAdapter::setAdapterConfigMetadata(const QList<OAIAdapterAdapterConfigMetadata> &adapter_config_metadata) {
    m_adapter_config_metadata = adapter_config_metadata;
    m_adapter_config_metadata_isSet = true;
}

bool OAIAdapter::is_adapter_config_metadata_Set() const{
    return m_adapter_config_metadata_isSet;
}

bool OAIAdapter::is_adapter_config_metadata_Valid() const{
    return m_adapter_config_metadata_isValid;
}

QString OAIAdapter::getAdapterId() const {
    return m_adapter_id;
}
void OAIAdapter::setAdapterId(const QString &adapter_id) {
    m_adapter_id = adapter_id;
    m_adapter_id_isSet = true;
}

bool OAIAdapter::is_adapter_id_Set() const{
    return m_adapter_id_isSet;
}

bool OAIAdapter::is_adapter_id_Valid() const{
    return m_adapter_id_isValid;
}

QList<QString> OAIAdapter::getFormats() const {
    return m_formats;
}
void OAIAdapter::setFormats(const QList<QString> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAIAdapter::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAIAdapter::is_formats_Valid() const{
    return m_formats_isValid;
}

QString OAIAdapter::getName() const {
    return m_name;
}
void OAIAdapter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdapter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdapter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdapter::getPlatform() const {
    return m_platform;
}
void OAIAdapter::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAdapter::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAdapter::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIAdapter::getTitle() const {
    return m_title;
}
void OAIAdapter::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAdapter::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAdapter::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIAdapter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_config_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_adapter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdapter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
