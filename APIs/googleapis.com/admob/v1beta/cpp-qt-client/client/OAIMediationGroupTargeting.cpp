/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediationGroupTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediationGroupTargeting::OAIMediationGroupTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediationGroupTargeting::OAIMediationGroupTargeting() {
    this->initializeModel();
}

OAIMediationGroupTargeting::~OAIMediationGroupTargeting() {}

void OAIMediationGroupTargeting::initializeModel() {

    m_ad_unit_ids_isSet = false;
    m_ad_unit_ids_isValid = false;

    m_excluded_region_codes_isSet = false;
    m_excluded_region_codes_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_idfa_targeting_isSet = false;
    m_idfa_targeting_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_targeted_region_codes_isSet = false;
    m_targeted_region_codes_isValid = false;
}

void OAIMediationGroupTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediationGroupTargeting::fromJsonObject(QJsonObject json) {

    m_ad_unit_ids_isValid = ::OpenAPI::fromJsonValue(m_ad_unit_ids, json[QString("adUnitIds")]);
    m_ad_unit_ids_isSet = !json[QString("adUnitIds")].isNull() && m_ad_unit_ids_isValid;

    m_excluded_region_codes_isValid = ::OpenAPI::fromJsonValue(m_excluded_region_codes, json[QString("excludedRegionCodes")]);
    m_excluded_region_codes_isSet = !json[QString("excludedRegionCodes")].isNull() && m_excluded_region_codes_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_idfa_targeting_isValid = ::OpenAPI::fromJsonValue(m_idfa_targeting, json[QString("idfaTargeting")]);
    m_idfa_targeting_isSet = !json[QString("idfaTargeting")].isNull() && m_idfa_targeting_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_targeted_region_codes_isValid = ::OpenAPI::fromJsonValue(m_targeted_region_codes, json[QString("targetedRegionCodes")]);
    m_targeted_region_codes_isSet = !json[QString("targetedRegionCodes")].isNull() && m_targeted_region_codes_isValid;
}

QString OAIMediationGroupTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediationGroupTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_unit_ids.size() > 0) {
        obj.insert(QString("adUnitIds"), ::OpenAPI::toJsonValue(m_ad_unit_ids));
    }
    if (m_excluded_region_codes.size() > 0) {
        obj.insert(QString("excludedRegionCodes"), ::OpenAPI::toJsonValue(m_excluded_region_codes));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_idfa_targeting_isSet) {
        obj.insert(QString("idfaTargeting"), ::OpenAPI::toJsonValue(m_idfa_targeting));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_targeted_region_codes.size() > 0) {
        obj.insert(QString("targetedRegionCodes"), ::OpenAPI::toJsonValue(m_targeted_region_codes));
    }
    return obj;
}

QList<QString> OAIMediationGroupTargeting::getAdUnitIds() const {
    return m_ad_unit_ids;
}
void OAIMediationGroupTargeting::setAdUnitIds(const QList<QString> &ad_unit_ids) {
    m_ad_unit_ids = ad_unit_ids;
    m_ad_unit_ids_isSet = true;
}

bool OAIMediationGroupTargeting::is_ad_unit_ids_Set() const{
    return m_ad_unit_ids_isSet;
}

bool OAIMediationGroupTargeting::is_ad_unit_ids_Valid() const{
    return m_ad_unit_ids_isValid;
}

QList<QString> OAIMediationGroupTargeting::getExcludedRegionCodes() const {
    return m_excluded_region_codes;
}
void OAIMediationGroupTargeting::setExcludedRegionCodes(const QList<QString> &excluded_region_codes) {
    m_excluded_region_codes = excluded_region_codes;
    m_excluded_region_codes_isSet = true;
}

bool OAIMediationGroupTargeting::is_excluded_region_codes_Set() const{
    return m_excluded_region_codes_isSet;
}

bool OAIMediationGroupTargeting::is_excluded_region_codes_Valid() const{
    return m_excluded_region_codes_isValid;
}

QString OAIMediationGroupTargeting::getFormat() const {
    return m_format;
}
void OAIMediationGroupTargeting::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIMediationGroupTargeting::is_format_Set() const{
    return m_format_isSet;
}

bool OAIMediationGroupTargeting::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIMediationGroupTargeting::getIdfaTargeting() const {
    return m_idfa_targeting;
}
void OAIMediationGroupTargeting::setIdfaTargeting(const QString &idfa_targeting) {
    m_idfa_targeting = idfa_targeting;
    m_idfa_targeting_isSet = true;
}

bool OAIMediationGroupTargeting::is_idfa_targeting_Set() const{
    return m_idfa_targeting_isSet;
}

bool OAIMediationGroupTargeting::is_idfa_targeting_Valid() const{
    return m_idfa_targeting_isValid;
}

QString OAIMediationGroupTargeting::getPlatform() const {
    return m_platform;
}
void OAIMediationGroupTargeting::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIMediationGroupTargeting::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIMediationGroupTargeting::is_platform_Valid() const{
    return m_platform_isValid;
}

QList<QString> OAIMediationGroupTargeting::getTargetedRegionCodes() const {
    return m_targeted_region_codes;
}
void OAIMediationGroupTargeting::setTargetedRegionCodes(const QList<QString> &targeted_region_codes) {
    m_targeted_region_codes = targeted_region_codes;
    m_targeted_region_codes_isSet = true;
}

bool OAIMediationGroupTargeting::is_targeted_region_codes_Set() const{
    return m_targeted_region_codes_isSet;
}

bool OAIMediationGroupTargeting::is_targeted_region_codes_Valid() const{
    return m_targeted_region_codes_isValid;
}

bool OAIMediationGroupTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_unit_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_region_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idfa_targeting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_region_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediationGroupTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
