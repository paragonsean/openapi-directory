/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdUnitRewardSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdUnitRewardSettings::OAIAdUnitRewardSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdUnitRewardSettings::OAIAdUnitRewardSettings() {
    this->initializeModel();
}

OAIAdUnitRewardSettings::~OAIAdUnitRewardSettings() {}

void OAIAdUnitRewardSettings::initializeModel() {

    m_unit_amount_isSet = false;
    m_unit_amount_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;
}

void OAIAdUnitRewardSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdUnitRewardSettings::fromJsonObject(QJsonObject json) {

    m_unit_amount_isValid = ::OpenAPI::fromJsonValue(m_unit_amount, json[QString("unitAmount")]);
    m_unit_amount_isSet = !json[QString("unitAmount")].isNull() && m_unit_amount_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("unitType")]);
    m_unit_type_isSet = !json[QString("unitType")].isNull() && m_unit_type_isValid;
}

QString OAIAdUnitRewardSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdUnitRewardSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_unit_amount_isSet) {
        obj.insert(QString("unitAmount"), ::OpenAPI::toJsonValue(m_unit_amount));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unitType"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    return obj;
}

QString OAIAdUnitRewardSettings::getUnitAmount() const {
    return m_unit_amount;
}
void OAIAdUnitRewardSettings::setUnitAmount(const QString &unit_amount) {
    m_unit_amount = unit_amount;
    m_unit_amount_isSet = true;
}

bool OAIAdUnitRewardSettings::is_unit_amount_Set() const{
    return m_unit_amount_isSet;
}

bool OAIAdUnitRewardSettings::is_unit_amount_Valid() const{
    return m_unit_amount_isValid;
}

QString OAIAdUnitRewardSettings::getUnitType() const {
    return m_unit_type;
}
void OAIAdUnitRewardSettings::setUnitType(const QString &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAIAdUnitRewardSettings::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAIAdUnitRewardSettings::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

bool OAIAdUnitRewardSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdUnitRewardSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
