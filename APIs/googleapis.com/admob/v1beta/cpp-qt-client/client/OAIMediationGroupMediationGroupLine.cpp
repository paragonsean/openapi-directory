/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediationGroupMediationGroupLine.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediationGroupMediationGroupLine::OAIMediationGroupMediationGroupLine(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediationGroupMediationGroupLine::OAIMediationGroupMediationGroupLine() {
    this->initializeModel();
}

OAIMediationGroupMediationGroupLine::~OAIMediationGroupMediationGroupLine() {}

void OAIMediationGroupMediationGroupLine::initializeModel() {

    m_ad_source_id_isSet = false;
    m_ad_source_id_isValid = false;

    m_ad_unit_mappings_isSet = false;
    m_ad_unit_mappings_isValid = false;

    m_cpm_micros_isSet = false;
    m_cpm_micros_isValid = false;

    m_cpm_mode_isSet = false;
    m_cpm_mode_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_experiment_variant_isSet = false;
    m_experiment_variant_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMediationGroupMediationGroupLine::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediationGroupMediationGroupLine::fromJsonObject(QJsonObject json) {

    m_ad_source_id_isValid = ::OpenAPI::fromJsonValue(m_ad_source_id, json[QString("adSourceId")]);
    m_ad_source_id_isSet = !json[QString("adSourceId")].isNull() && m_ad_source_id_isValid;

    m_ad_unit_mappings_isValid = ::OpenAPI::fromJsonValue(m_ad_unit_mappings, json[QString("adUnitMappings")]);
    m_ad_unit_mappings_isSet = !json[QString("adUnitMappings")].isNull() && m_ad_unit_mappings_isValid;

    m_cpm_micros_isValid = ::OpenAPI::fromJsonValue(m_cpm_micros, json[QString("cpmMicros")]);
    m_cpm_micros_isSet = !json[QString("cpmMicros")].isNull() && m_cpm_micros_isValid;

    m_cpm_mode_isValid = ::OpenAPI::fromJsonValue(m_cpm_mode, json[QString("cpmMode")]);
    m_cpm_mode_isSet = !json[QString("cpmMode")].isNull() && m_cpm_mode_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_experiment_variant_isValid = ::OpenAPI::fromJsonValue(m_experiment_variant, json[QString("experimentVariant")]);
    m_experiment_variant_isSet = !json[QString("experimentVariant")].isNull() && m_experiment_variant_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMediationGroupMediationGroupLine::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediationGroupMediationGroupLine::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_source_id_isSet) {
        obj.insert(QString("adSourceId"), ::OpenAPI::toJsonValue(m_ad_source_id));
    }
    if (m_ad_unit_mappings.size() > 0) {
        obj.insert(QString("adUnitMappings"), ::OpenAPI::toJsonValue(m_ad_unit_mappings));
    }
    if (m_cpm_micros_isSet) {
        obj.insert(QString("cpmMicros"), ::OpenAPI::toJsonValue(m_cpm_micros));
    }
    if (m_cpm_mode_isSet) {
        obj.insert(QString("cpmMode"), ::OpenAPI::toJsonValue(m_cpm_mode));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_experiment_variant_isSet) {
        obj.insert(QString("experimentVariant"), ::OpenAPI::toJsonValue(m_experiment_variant));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIMediationGroupMediationGroupLine::getAdSourceId() const {
    return m_ad_source_id;
}
void OAIMediationGroupMediationGroupLine::setAdSourceId(const QString &ad_source_id) {
    m_ad_source_id = ad_source_id;
    m_ad_source_id_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_ad_source_id_Set() const{
    return m_ad_source_id_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_ad_source_id_Valid() const{
    return m_ad_source_id_isValid;
}

QMap<QString, QString> OAIMediationGroupMediationGroupLine::getAdUnitMappings() const {
    return m_ad_unit_mappings;
}
void OAIMediationGroupMediationGroupLine::setAdUnitMappings(const QMap<QString, QString> &ad_unit_mappings) {
    m_ad_unit_mappings = ad_unit_mappings;
    m_ad_unit_mappings_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_ad_unit_mappings_Set() const{
    return m_ad_unit_mappings_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_ad_unit_mappings_Valid() const{
    return m_ad_unit_mappings_isValid;
}

QString OAIMediationGroupMediationGroupLine::getCpmMicros() const {
    return m_cpm_micros;
}
void OAIMediationGroupMediationGroupLine::setCpmMicros(const QString &cpm_micros) {
    m_cpm_micros = cpm_micros;
    m_cpm_micros_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_cpm_micros_Set() const{
    return m_cpm_micros_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_cpm_micros_Valid() const{
    return m_cpm_micros_isValid;
}

QString OAIMediationGroupMediationGroupLine::getCpmMode() const {
    return m_cpm_mode;
}
void OAIMediationGroupMediationGroupLine::setCpmMode(const QString &cpm_mode) {
    m_cpm_mode = cpm_mode;
    m_cpm_mode_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_cpm_mode_Set() const{
    return m_cpm_mode_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_cpm_mode_Valid() const{
    return m_cpm_mode_isValid;
}

QString OAIMediationGroupMediationGroupLine::getDisplayName() const {
    return m_display_name;
}
void OAIMediationGroupMediationGroupLine::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMediationGroupMediationGroupLine::getExperimentVariant() const {
    return m_experiment_variant;
}
void OAIMediationGroupMediationGroupLine::setExperimentVariant(const QString &experiment_variant) {
    m_experiment_variant = experiment_variant;
    m_experiment_variant_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_experiment_variant_Set() const{
    return m_experiment_variant_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_experiment_variant_Valid() const{
    return m_experiment_variant_isValid;
}

QString OAIMediationGroupMediationGroupLine::getId() const {
    return m_id;
}
void OAIMediationGroupMediationGroupLine::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMediationGroupMediationGroupLine::getState() const {
    return m_state;
}
void OAIMediationGroupMediationGroupLine::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMediationGroupMediationGroupLine::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMediationGroupMediationGroupLine::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMediationGroupMediationGroupLine::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_unit_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpm_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpm_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediationGroupMediationGroupLine::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
