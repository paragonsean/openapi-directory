/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisherAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisherAccount::OAIPublisherAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisherAccount::OAIPublisherAccount() {
    this->initializeModel();
}

OAIPublisherAccount::~OAIPublisherAccount() {}

void OAIPublisherAccount::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_reporting_time_zone_isSet = false;
    m_reporting_time_zone_isValid = false;
}

void OAIPublisherAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisherAccount::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currencyCode")]);
    m_currency_code_isSet = !json[QString("currencyCode")].isNull() && m_currency_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("publisherId")]);
    m_publisher_id_isSet = !json[QString("publisherId")].isNull() && m_publisher_id_isValid;

    m_reporting_time_zone_isValid = ::OpenAPI::fromJsonValue(m_reporting_time_zone, json[QString("reportingTimeZone")]);
    m_reporting_time_zone_isSet = !json[QString("reportingTimeZone")].isNull() && m_reporting_time_zone_isValid;
}

QString OAIPublisherAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisherAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("publisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_reporting_time_zone_isSet) {
        obj.insert(QString("reportingTimeZone"), ::OpenAPI::toJsonValue(m_reporting_time_zone));
    }
    return obj;
}

QString OAIPublisherAccount::getCurrencyCode() const {
    return m_currency_code;
}
void OAIPublisherAccount::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIPublisherAccount::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIPublisherAccount::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIPublisherAccount::getName() const {
    return m_name;
}
void OAIPublisherAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublisherAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublisherAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublisherAccount::getPublisherId() const {
    return m_publisher_id;
}
void OAIPublisherAccount::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIPublisherAccount::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIPublisherAccount::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIPublisherAccount::getReportingTimeZone() const {
    return m_reporting_time_zone;
}
void OAIPublisherAccount::setReportingTimeZone(const QString &reporting_time_zone) {
    m_reporting_time_zone = reporting_time_zone;
    m_reporting_time_zone_isSet = true;
}

bool OAIPublisherAccount::is_reporting_time_zone_Set() const{
    return m_reporting_time_zone_isSet;
}

bool OAIPublisherAccount::is_reporting_time_zone_Valid() const{
    return m_reporting_time_zone_isValid;
}

bool OAIPublisherAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisherAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
