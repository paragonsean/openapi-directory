/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdapterAdapterConfigMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdapterAdapterConfigMetadata::OAIAdapterAdapterConfigMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdapterAdapterConfigMetadata::OAIAdapterAdapterConfigMetadata() {
    this->initializeModel();
}

OAIAdapterAdapterConfigMetadata::~OAIAdapterAdapterConfigMetadata() {}

void OAIAdapterAdapterConfigMetadata::initializeModel() {

    m_adapter_config_metadata_id_isSet = false;
    m_adapter_config_metadata_id_isValid = false;

    m_adapter_config_metadata_label_isSet = false;
    m_adapter_config_metadata_label_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;
}

void OAIAdapterAdapterConfigMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdapterAdapterConfigMetadata::fromJsonObject(QJsonObject json) {

    m_adapter_config_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_adapter_config_metadata_id, json[QString("adapterConfigMetadataId")]);
    m_adapter_config_metadata_id_isSet = !json[QString("adapterConfigMetadataId")].isNull() && m_adapter_config_metadata_id_isValid;

    m_adapter_config_metadata_label_isValid = ::OpenAPI::fromJsonValue(m_adapter_config_metadata_label, json[QString("adapterConfigMetadataLabel")]);
    m_adapter_config_metadata_label_isSet = !json[QString("adapterConfigMetadataLabel")].isNull() && m_adapter_config_metadata_label_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("isRequired")]);
    m_is_required_isSet = !json[QString("isRequired")].isNull() && m_is_required_isValid;
}

QString OAIAdapterAdapterConfigMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdapterAdapterConfigMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_config_metadata_id_isSet) {
        obj.insert(QString("adapterConfigMetadataId"), ::OpenAPI::toJsonValue(m_adapter_config_metadata_id));
    }
    if (m_adapter_config_metadata_label_isSet) {
        obj.insert(QString("adapterConfigMetadataLabel"), ::OpenAPI::toJsonValue(m_adapter_config_metadata_label));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("isRequired"), ::OpenAPI::toJsonValue(m_is_required));
    }
    return obj;
}

QString OAIAdapterAdapterConfigMetadata::getAdapterConfigMetadataId() const {
    return m_adapter_config_metadata_id;
}
void OAIAdapterAdapterConfigMetadata::setAdapterConfigMetadataId(const QString &adapter_config_metadata_id) {
    m_adapter_config_metadata_id = adapter_config_metadata_id;
    m_adapter_config_metadata_id_isSet = true;
}

bool OAIAdapterAdapterConfigMetadata::is_adapter_config_metadata_id_Set() const{
    return m_adapter_config_metadata_id_isSet;
}

bool OAIAdapterAdapterConfigMetadata::is_adapter_config_metadata_id_Valid() const{
    return m_adapter_config_metadata_id_isValid;
}

QString OAIAdapterAdapterConfigMetadata::getAdapterConfigMetadataLabel() const {
    return m_adapter_config_metadata_label;
}
void OAIAdapterAdapterConfigMetadata::setAdapterConfigMetadataLabel(const QString &adapter_config_metadata_label) {
    m_adapter_config_metadata_label = adapter_config_metadata_label;
    m_adapter_config_metadata_label_isSet = true;
}

bool OAIAdapterAdapterConfigMetadata::is_adapter_config_metadata_label_Set() const{
    return m_adapter_config_metadata_label_isSet;
}

bool OAIAdapterAdapterConfigMetadata::is_adapter_config_metadata_label_Valid() const{
    return m_adapter_config_metadata_label_isValid;
}

bool OAIAdapterAdapterConfigMetadata::isIsRequired() const {
    return m_is_required;
}
void OAIAdapterAdapterConfigMetadata::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIAdapterAdapterConfigMetadata::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIAdapterAdapterConfigMetadata::is_is_required_Valid() const{
    return m_is_required_isValid;
}

bool OAIAdapterAdapterConfigMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_config_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adapter_config_metadata_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdapterAdapterConfigMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
