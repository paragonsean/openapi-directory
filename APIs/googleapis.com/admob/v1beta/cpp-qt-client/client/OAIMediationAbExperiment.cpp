/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediationAbExperiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediationAbExperiment::OAIMediationAbExperiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediationAbExperiment::OAIMediationAbExperiment() {
    this->initializeModel();
}

OAIMediationAbExperiment::~OAIMediationAbExperiment() {}

void OAIMediationAbExperiment::initializeModel() {

    m_control_mediation_lines_isSet = false;
    m_control_mediation_lines_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_experiment_id_isSet = false;
    m_experiment_id_isValid = false;

    m_mediation_group_id_isSet = false;
    m_mediation_group_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_treatment_mediation_lines_isSet = false;
    m_treatment_mediation_lines_isValid = false;

    m_treatment_traffic_percentage_isSet = false;
    m_treatment_traffic_percentage_isValid = false;

    m_variant_leader_isSet = false;
    m_variant_leader_isValid = false;
}

void OAIMediationAbExperiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediationAbExperiment::fromJsonObject(QJsonObject json) {

    m_control_mediation_lines_isValid = ::OpenAPI::fromJsonValue(m_control_mediation_lines, json[QString("controlMediationLines")]);
    m_control_mediation_lines_isSet = !json[QString("controlMediationLines")].isNull() && m_control_mediation_lines_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_experiment_id_isValid = ::OpenAPI::fromJsonValue(m_experiment_id, json[QString("experimentId")]);
    m_experiment_id_isSet = !json[QString("experimentId")].isNull() && m_experiment_id_isValid;

    m_mediation_group_id_isValid = ::OpenAPI::fromJsonValue(m_mediation_group_id, json[QString("mediationGroupId")]);
    m_mediation_group_id_isSet = !json[QString("mediationGroupId")].isNull() && m_mediation_group_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_treatment_mediation_lines_isValid = ::OpenAPI::fromJsonValue(m_treatment_mediation_lines, json[QString("treatmentMediationLines")]);
    m_treatment_mediation_lines_isSet = !json[QString("treatmentMediationLines")].isNull() && m_treatment_mediation_lines_isValid;

    m_treatment_traffic_percentage_isValid = ::OpenAPI::fromJsonValue(m_treatment_traffic_percentage, json[QString("treatmentTrafficPercentage")]);
    m_treatment_traffic_percentage_isSet = !json[QString("treatmentTrafficPercentage")].isNull() && m_treatment_traffic_percentage_isValid;

    m_variant_leader_isValid = ::OpenAPI::fromJsonValue(m_variant_leader, json[QString("variantLeader")]);
    m_variant_leader_isSet = !json[QString("variantLeader")].isNull() && m_variant_leader_isValid;
}

QString OAIMediationAbExperiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediationAbExperiment::asJsonObject() const {
    QJsonObject obj;
    if (m_control_mediation_lines.size() > 0) {
        obj.insert(QString("controlMediationLines"), ::OpenAPI::toJsonValue(m_control_mediation_lines));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_experiment_id_isSet) {
        obj.insert(QString("experimentId"), ::OpenAPI::toJsonValue(m_experiment_id));
    }
    if (m_mediation_group_id_isSet) {
        obj.insert(QString("mediationGroupId"), ::OpenAPI::toJsonValue(m_mediation_group_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_treatment_mediation_lines.size() > 0) {
        obj.insert(QString("treatmentMediationLines"), ::OpenAPI::toJsonValue(m_treatment_mediation_lines));
    }
    if (m_treatment_traffic_percentage_isSet) {
        obj.insert(QString("treatmentTrafficPercentage"), ::OpenAPI::toJsonValue(m_treatment_traffic_percentage));
    }
    if (m_variant_leader_isSet) {
        obj.insert(QString("variantLeader"), ::OpenAPI::toJsonValue(m_variant_leader));
    }
    return obj;
}

QList<OAIMediationAbExperimentExperimentMediationLine> OAIMediationAbExperiment::getControlMediationLines() const {
    return m_control_mediation_lines;
}
void OAIMediationAbExperiment::setControlMediationLines(const QList<OAIMediationAbExperimentExperimentMediationLine> &control_mediation_lines) {
    m_control_mediation_lines = control_mediation_lines;
    m_control_mediation_lines_isSet = true;
}

bool OAIMediationAbExperiment::is_control_mediation_lines_Set() const{
    return m_control_mediation_lines_isSet;
}

bool OAIMediationAbExperiment::is_control_mediation_lines_Valid() const{
    return m_control_mediation_lines_isValid;
}

QString OAIMediationAbExperiment::getDisplayName() const {
    return m_display_name;
}
void OAIMediationAbExperiment::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMediationAbExperiment::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMediationAbExperiment::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIMediationAbExperiment::getEndTime() const {
    return m_end_time;
}
void OAIMediationAbExperiment::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIMediationAbExperiment::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIMediationAbExperiment::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIMediationAbExperiment::getExperimentId() const {
    return m_experiment_id;
}
void OAIMediationAbExperiment::setExperimentId(const QString &experiment_id) {
    m_experiment_id = experiment_id;
    m_experiment_id_isSet = true;
}

bool OAIMediationAbExperiment::is_experiment_id_Set() const{
    return m_experiment_id_isSet;
}

bool OAIMediationAbExperiment::is_experiment_id_Valid() const{
    return m_experiment_id_isValid;
}

QString OAIMediationAbExperiment::getMediationGroupId() const {
    return m_mediation_group_id;
}
void OAIMediationAbExperiment::setMediationGroupId(const QString &mediation_group_id) {
    m_mediation_group_id = mediation_group_id;
    m_mediation_group_id_isSet = true;
}

bool OAIMediationAbExperiment::is_mediation_group_id_Set() const{
    return m_mediation_group_id_isSet;
}

bool OAIMediationAbExperiment::is_mediation_group_id_Valid() const{
    return m_mediation_group_id_isValid;
}

QString OAIMediationAbExperiment::getName() const {
    return m_name;
}
void OAIMediationAbExperiment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMediationAbExperiment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMediationAbExperiment::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMediationAbExperiment::getStartTime() const {
    return m_start_time;
}
void OAIMediationAbExperiment::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIMediationAbExperiment::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIMediationAbExperiment::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIMediationAbExperiment::getState() const {
    return m_state;
}
void OAIMediationAbExperiment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMediationAbExperiment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMediationAbExperiment::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIMediationAbExperimentExperimentMediationLine> OAIMediationAbExperiment::getTreatmentMediationLines() const {
    return m_treatment_mediation_lines;
}
void OAIMediationAbExperiment::setTreatmentMediationLines(const QList<OAIMediationAbExperimentExperimentMediationLine> &treatment_mediation_lines) {
    m_treatment_mediation_lines = treatment_mediation_lines;
    m_treatment_mediation_lines_isSet = true;
}

bool OAIMediationAbExperiment::is_treatment_mediation_lines_Set() const{
    return m_treatment_mediation_lines_isSet;
}

bool OAIMediationAbExperiment::is_treatment_mediation_lines_Valid() const{
    return m_treatment_mediation_lines_isValid;
}

QString OAIMediationAbExperiment::getTreatmentTrafficPercentage() const {
    return m_treatment_traffic_percentage;
}
void OAIMediationAbExperiment::setTreatmentTrafficPercentage(const QString &treatment_traffic_percentage) {
    m_treatment_traffic_percentage = treatment_traffic_percentage;
    m_treatment_traffic_percentage_isSet = true;
}

bool OAIMediationAbExperiment::is_treatment_traffic_percentage_Set() const{
    return m_treatment_traffic_percentage_isSet;
}

bool OAIMediationAbExperiment::is_treatment_traffic_percentage_Valid() const{
    return m_treatment_traffic_percentage_isValid;
}

QString OAIMediationAbExperiment::getVariantLeader() const {
    return m_variant_leader;
}
void OAIMediationAbExperiment::setVariantLeader(const QString &variant_leader) {
    m_variant_leader = variant_leader;
    m_variant_leader_isSet = true;
}

bool OAIMediationAbExperiment::is_variant_leader_Set() const{
    return m_variant_leader_isSet;
}

bool OAIMediationAbExperiment::is_variant_leader_Valid() const{
    return m_variant_leader_isValid;
}

bool OAIMediationAbExperiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_mediation_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mediation_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_mediation_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_traffic_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_leader_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediationAbExperiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
