/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportHeader::OAIReportHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportHeader::OAIReportHeader() {
    this->initializeModel();
}

OAIReportHeader::~OAIReportHeader() {}

void OAIReportHeader::initializeModel() {

    m_date_range_isSet = false;
    m_date_range_isValid = false;

    m_localization_settings_isSet = false;
    m_localization_settings_isValid = false;

    m_reporting_time_zone_isSet = false;
    m_reporting_time_zone_isValid = false;
}

void OAIReportHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportHeader::fromJsonObject(QJsonObject json) {

    m_date_range_isValid = ::OpenAPI::fromJsonValue(m_date_range, json[QString("dateRange")]);
    m_date_range_isSet = !json[QString("dateRange")].isNull() && m_date_range_isValid;

    m_localization_settings_isValid = ::OpenAPI::fromJsonValue(m_localization_settings, json[QString("localizationSettings")]);
    m_localization_settings_isSet = !json[QString("localizationSettings")].isNull() && m_localization_settings_isValid;

    m_reporting_time_zone_isValid = ::OpenAPI::fromJsonValue(m_reporting_time_zone, json[QString("reportingTimeZone")]);
    m_reporting_time_zone_isSet = !json[QString("reportingTimeZone")].isNull() && m_reporting_time_zone_isValid;
}

QString OAIReportHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_date_range.isSet()) {
        obj.insert(QString("dateRange"), ::OpenAPI::toJsonValue(m_date_range));
    }
    if (m_localization_settings.isSet()) {
        obj.insert(QString("localizationSettings"), ::OpenAPI::toJsonValue(m_localization_settings));
    }
    if (m_reporting_time_zone_isSet) {
        obj.insert(QString("reportingTimeZone"), ::OpenAPI::toJsonValue(m_reporting_time_zone));
    }
    return obj;
}

OAIDateRange OAIReportHeader::getDateRange() const {
    return m_date_range;
}
void OAIReportHeader::setDateRange(const OAIDateRange &date_range) {
    m_date_range = date_range;
    m_date_range_isSet = true;
}

bool OAIReportHeader::is_date_range_Set() const{
    return m_date_range_isSet;
}

bool OAIReportHeader::is_date_range_Valid() const{
    return m_date_range_isValid;
}

OAILocalizationSettings OAIReportHeader::getLocalizationSettings() const {
    return m_localization_settings;
}
void OAIReportHeader::setLocalizationSettings(const OAILocalizationSettings &localization_settings) {
    m_localization_settings = localization_settings;
    m_localization_settings_isSet = true;
}

bool OAIReportHeader::is_localization_settings_Set() const{
    return m_localization_settings_isSet;
}

bool OAIReportHeader::is_localization_settings_Valid() const{
    return m_localization_settings_isValid;
}

QString OAIReportHeader::getReportingTimeZone() const {
    return m_reporting_time_zone;
}
void OAIReportHeader::setReportingTimeZone(const QString &reporting_time_zone) {
    m_reporting_time_zone = reporting_time_zone;
    m_reporting_time_zone_isSet = true;
}

bool OAIReportHeader::is_reporting_time_zone_Set() const{
    return m_reporting_time_zone_isSet;
}

bool OAIReportHeader::is_reporting_time_zone_Valid() const{
    return m_reporting_time_zone_isValid;
}

bool OAIReportHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
