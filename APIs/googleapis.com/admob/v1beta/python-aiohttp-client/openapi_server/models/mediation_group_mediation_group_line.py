# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediationGroupMediationGroupLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_source_id: str=None, ad_unit_mappings: Dict[str, str]=None, cpm_micros: str=None, cpm_mode: str=None, display_name: str=None, experiment_variant: str=None, id: str=None, state: str=None):
        """MediationGroupMediationGroupLine - a model defined in OpenAPI

        :param ad_source_id: The ad_source_id of this MediationGroupMediationGroupLine.
        :param ad_unit_mappings: The ad_unit_mappings of this MediationGroupMediationGroupLine.
        :param cpm_micros: The cpm_micros of this MediationGroupMediationGroupLine.
        :param cpm_mode: The cpm_mode of this MediationGroupMediationGroupLine.
        :param display_name: The display_name of this MediationGroupMediationGroupLine.
        :param experiment_variant: The experiment_variant of this MediationGroupMediationGroupLine.
        :param id: The id of this MediationGroupMediationGroupLine.
        :param state: The state of this MediationGroupMediationGroupLine.
        """
        self.openapi_types = {
            'ad_source_id': str,
            'ad_unit_mappings': Dict[str, str],
            'cpm_micros': str,
            'cpm_mode': str,
            'display_name': str,
            'experiment_variant': str,
            'id': str,
            'state': str
        }

        self.attribute_map = {
            'ad_source_id': 'adSourceId',
            'ad_unit_mappings': 'adUnitMappings',
            'cpm_micros': 'cpmMicros',
            'cpm_mode': 'cpmMode',
            'display_name': 'displayName',
            'experiment_variant': 'experimentVariant',
            'id': 'id',
            'state': 'state'
        }

        self._ad_source_id = ad_source_id
        self._ad_unit_mappings = ad_unit_mappings
        self._cpm_micros = cpm_micros
        self._cpm_mode = cpm_mode
        self._display_name = display_name
        self._experiment_variant = experiment_variant
        self._id = id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediationGroupMediationGroupLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediationGroupMediationGroupLine of this MediationGroupMediationGroupLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_source_id(self):
        """Gets the ad_source_id of this MediationGroupMediationGroupLine.

        The ID of the ad source this mediation line is associated with.

        :return: The ad_source_id of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._ad_source_id

    @ad_source_id.setter
    def ad_source_id(self, ad_source_id):
        """Sets the ad_source_id of this MediationGroupMediationGroupLine.

        The ID of the ad source this mediation line is associated with.

        :param ad_source_id: The ad_source_id of this MediationGroupMediationGroupLine.
        :type ad_source_id: str
        """

        self._ad_source_id = ad_source_id

    @property
    def ad_unit_mappings(self):
        """Gets the ad_unit_mappings of this MediationGroupMediationGroupLine.

        References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.

        :return: The ad_unit_mappings of this MediationGroupMediationGroupLine.
        :rtype: Dict[str, str]
        """
        return self._ad_unit_mappings

    @ad_unit_mappings.setter
    def ad_unit_mappings(self, ad_unit_mappings):
        """Sets the ad_unit_mappings of this MediationGroupMediationGroupLine.

        References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.

        :param ad_unit_mappings: The ad_unit_mappings of this MediationGroupMediationGroupLine.
        :type ad_unit_mappings: Dict[str, str]
        """

        self._ad_unit_mappings = ad_unit_mappings

    @property
    def cpm_micros(self):
        """Gets the cpm_micros of this MediationGroupMediationGroupLine.

        The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if `cpm_mode` is `LIVE`. **Warning:** \"USD\" is the only supported currency at the moment. The unit is in micros.

        :return: The cpm_micros of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._cpm_micros

    @cpm_micros.setter
    def cpm_micros(self, cpm_micros):
        """Sets the cpm_micros of this MediationGroupMediationGroupLine.

        The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if `cpm_mode` is `LIVE`. **Warning:** \"USD\" is the only supported currency at the moment. The unit is in micros.

        :param cpm_micros: The cpm_micros of this MediationGroupMediationGroupLine.
        :type cpm_micros: str
        """

        self._cpm_micros = cpm_micros

    @property
    def cpm_mode(self):
        """Gets the cpm_mode of this MediationGroupMediationGroupLine.

        Indicates how the CPM for this mediation line is provided. Note that `MANUAL` and `LIVE` are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.

        :return: The cpm_mode of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._cpm_mode

    @cpm_mode.setter
    def cpm_mode(self, cpm_mode):
        """Sets the cpm_mode of this MediationGroupMediationGroupLine.

        Indicates how the CPM for this mediation line is provided. Note that `MANUAL` and `LIVE` are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.

        :param cpm_mode: The cpm_mode of this MediationGroupMediationGroupLine.
        :type cpm_mode: str
        """
        allowed_values = ["CPM_MODE_UNSPECIFIED", "LIVE", "MANUAL", "ANO"]  # noqa: E501
        if cpm_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `cpm_mode` ({0}), must be one of {1}"
                .format(cpm_mode, allowed_values)
            )

        self._cpm_mode = cpm_mode

    @property
    def display_name(self):
        """Gets the display_name of this MediationGroupMediationGroupLine.

        User-provided label for this mediation line. The maximum length allowed is 255 characters.

        :return: The display_name of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MediationGroupMediationGroupLine.

        User-provided label for this mediation line. The maximum length allowed is 255 characters.

        :param display_name: The display_name of this MediationGroupMediationGroupLine.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def experiment_variant(self):
        """Gets the experiment_variant of this MediationGroupMediationGroupLine.

        Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.

        :return: The experiment_variant of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._experiment_variant

    @experiment_variant.setter
    def experiment_variant(self, experiment_variant):
        """Sets the experiment_variant of this MediationGroupMediationGroupLine.

        Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.

        :param experiment_variant: The experiment_variant of this MediationGroupMediationGroupLine.
        :type experiment_variant: str
        """
        allowed_values = ["VARIANT_UNSPECIFIED", "VARIANT_A", "VARIANT_B", "ORIGINAL"]  # noqa: E501
        if experiment_variant not in allowed_values:
            raise ValueError(
                "Invalid value for `experiment_variant` ({0}), must be one of {1}"
                .format(experiment_variant, allowed_values)
            )

        self._experiment_variant = experiment_variant

    @property
    def id(self):
        """Gets the id of this MediationGroupMediationGroupLine.

        The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.

        :return: The id of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediationGroupMediationGroupLine.

        The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.

        :param id: The id of this MediationGroupMediationGroupLine.
        :type id: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this MediationGroupMediationGroupLine.

        The status of the mediation group line. Only enabled mediation group lines will be served.

        :return: The state of this MediationGroupMediationGroupLine.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MediationGroupMediationGroupLine.

        The status of the mediation group line. Only enabled mediation group lines will be served.

        :param state: The state of this MediationGroupMediationGroupLine.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "DISABLED", "REMOVED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
