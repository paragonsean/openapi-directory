# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.publisher_account import PublisherAccount
from openapi_server import util


class ListPublisherAccountsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: List[PublisherAccount]=None, next_page_token: str=None):
        """ListPublisherAccountsResponse - a model defined in OpenAPI

        :param account: The account of this ListPublisherAccountsResponse.
        :param next_page_token: The next_page_token of this ListPublisherAccountsResponse.
        """
        self.openapi_types = {
            'account': List[PublisherAccount],
            'next_page_token': str
        }

        self.attribute_map = {
            'account': 'account',
            'next_page_token': 'nextPageToken'
        }

        self._account = account
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPublisherAccountsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPublisherAccountsResponse of this ListPublisherAccountsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ListPublisherAccountsResponse.

        Publisher that the client credentials can access.

        :return: The account of this ListPublisherAccountsResponse.
        :rtype: List[PublisherAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ListPublisherAccountsResponse.

        Publisher that the client credentials can access.

        :param account: The account of this ListPublisherAccountsResponse.
        :type account: List[PublisherAccount]
        """

        self._account = account

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListPublisherAccountsResponse.

        If not empty, indicates that there might be more accounts for the request; you must pass this value in a new `ListPublisherAccountsRequest`.

        :return: The next_page_token of this ListPublisherAccountsResponse.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListPublisherAccountsResponse.

        If not empty, indicates that there might be more accounts for the request; you must pass this value in a new `ListPublisherAccountsRequest`.

        :param next_page_token: The next_page_token of this ListPublisherAccountsResponse.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
