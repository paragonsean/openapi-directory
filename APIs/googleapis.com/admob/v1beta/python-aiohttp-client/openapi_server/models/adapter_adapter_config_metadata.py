# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdapterAdapterConfigMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adapter_config_metadata_id: str=None, adapter_config_metadata_label: str=None, is_required: bool=None):
        """AdapterAdapterConfigMetadata - a model defined in OpenAPI

        :param adapter_config_metadata_id: The adapter_config_metadata_id of this AdapterAdapterConfigMetadata.
        :param adapter_config_metadata_label: The adapter_config_metadata_label of this AdapterAdapterConfigMetadata.
        :param is_required: The is_required of this AdapterAdapterConfigMetadata.
        """
        self.openapi_types = {
            'adapter_config_metadata_id': str,
            'adapter_config_metadata_label': str,
            'is_required': bool
        }

        self.attribute_map = {
            'adapter_config_metadata_id': 'adapterConfigMetadataId',
            'adapter_config_metadata_label': 'adapterConfigMetadataLabel',
            'is_required': 'isRequired'
        }

        self._adapter_config_metadata_id = adapter_config_metadata_id
        self._adapter_config_metadata_label = adapter_config_metadata_label
        self._is_required = is_required

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdapterAdapterConfigMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdapterAdapterConfigMetadata of this AdapterAdapterConfigMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adapter_config_metadata_id(self):
        """Gets the adapter_config_metadata_id of this AdapterAdapterConfigMetadata.

        This is used to fill the key of the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations).

        :return: The adapter_config_metadata_id of this AdapterAdapterConfigMetadata.
        :rtype: str
        """
        return self._adapter_config_metadata_id

    @adapter_config_metadata_id.setter
    def adapter_config_metadata_id(self, adapter_config_metadata_id):
        """Sets the adapter_config_metadata_id of this AdapterAdapterConfigMetadata.

        This is used to fill the key of the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations).

        :param adapter_config_metadata_id: The adapter_config_metadata_id of this AdapterAdapterConfigMetadata.
        :type adapter_config_metadata_id: str
        """

        self._adapter_config_metadata_id = adapter_config_metadata_id

    @property
    def adapter_config_metadata_label(self):
        """Gets the adapter_config_metadata_label of this AdapterAdapterConfigMetadata.

        Name of the adapter configuration metadata.

        :return: The adapter_config_metadata_label of this AdapterAdapterConfigMetadata.
        :rtype: str
        """
        return self._adapter_config_metadata_label

    @adapter_config_metadata_label.setter
    def adapter_config_metadata_label(self, adapter_config_metadata_label):
        """Sets the adapter_config_metadata_label of this AdapterAdapterConfigMetadata.

        Name of the adapter configuration metadata.

        :param adapter_config_metadata_label: The adapter_config_metadata_label of this AdapterAdapterConfigMetadata.
        :type adapter_config_metadata_label: str
        """

        self._adapter_config_metadata_label = adapter_config_metadata_label

    @property
    def is_required(self):
        """Gets the is_required of this AdapterAdapterConfigMetadata.

        Whether this metadata is required for configuring the AdUnitMappings.

        :return: The is_required of this AdapterAdapterConfigMetadata.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this AdapterAdapterConfigMetadata.

        Whether this metadata is required for configuring the AdUnitMappings.

        :param is_required: The is_required of this AdapterAdapterConfigMetadata.
        :type is_required: bool
        """

        self._is_required = is_required
