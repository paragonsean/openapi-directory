# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediationGroupTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_unit_ids: List[str]=None, excluded_region_codes: List[str]=None, format: str=None, idfa_targeting: str=None, platform: str=None, targeted_region_codes: List[str]=None):
        """MediationGroupTargeting - a model defined in OpenAPI

        :param ad_unit_ids: The ad_unit_ids of this MediationGroupTargeting.
        :param excluded_region_codes: The excluded_region_codes of this MediationGroupTargeting.
        :param format: The format of this MediationGroupTargeting.
        :param idfa_targeting: The idfa_targeting of this MediationGroupTargeting.
        :param platform: The platform of this MediationGroupTargeting.
        :param targeted_region_codes: The targeted_region_codes of this MediationGroupTargeting.
        """
        self.openapi_types = {
            'ad_unit_ids': List[str],
            'excluded_region_codes': List[str],
            'format': str,
            'idfa_targeting': str,
            'platform': str,
            'targeted_region_codes': List[str]
        }

        self.attribute_map = {
            'ad_unit_ids': 'adUnitIds',
            'excluded_region_codes': 'excludedRegionCodes',
            'format': 'format',
            'idfa_targeting': 'idfaTargeting',
            'platform': 'platform',
            'targeted_region_codes': 'targetedRegionCodes'
        }

        self._ad_unit_ids = ad_unit_ids
        self._excluded_region_codes = excluded_region_codes
        self._format = format
        self._idfa_targeting = idfa_targeting
        self._platform = platform
        self._targeted_region_codes = targeted_region_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediationGroupTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediationGroupTargeting of this MediationGroupTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_unit_ids(self):
        """Gets the ad_unit_ids of this MediationGroupTargeting.

        Ad units targeted by this mediation group. Example: \"ca-app-pub-1234/8790\".

        :return: The ad_unit_ids of this MediationGroupTargeting.
        :rtype: List[str]
        """
        return self._ad_unit_ids

    @ad_unit_ids.setter
    def ad_unit_ids(self, ad_unit_ids):
        """Sets the ad_unit_ids of this MediationGroupTargeting.

        Ad units targeted by this mediation group. Example: \"ca-app-pub-1234/8790\".

        :param ad_unit_ids: The ad_unit_ids of this MediationGroupTargeting.
        :type ad_unit_ids: List[str]
        """

        self._ad_unit_ids = ad_unit_ids

    @property
    def excluded_region_codes(self):
        """Gets the excluded_region_codes of this MediationGroupTargeting.

        The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group does not exclude any region.

        :return: The excluded_region_codes of this MediationGroupTargeting.
        :rtype: List[str]
        """
        return self._excluded_region_codes

    @excluded_region_codes.setter
    def excluded_region_codes(self, excluded_region_codes):
        """Sets the excluded_region_codes of this MediationGroupTargeting.

        The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group does not exclude any region.

        :param excluded_region_codes: The excluded_region_codes of this MediationGroupTargeting.
        :type excluded_region_codes: List[str]
        """

        self._excluded_region_codes = excluded_region_codes

    @property
    def format(self):
        """Gets the format of this MediationGroupTargeting.

        Ad format targeted by this mediation group. Examples: \"banner\", \"native\".

        :return: The format of this MediationGroupTargeting.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MediationGroupTargeting.

        Ad format targeted by this mediation group. Examples: \"banner\", \"native\".

        :param format: The format of this MediationGroupTargeting.
        :type format: str
        """

        self._format = format

    @property
    def idfa_targeting(self):
        """Gets the idfa_targeting of this MediationGroupTargeting.

        The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn't need to be specified for an ANDROID device.

        :return: The idfa_targeting of this MediationGroupTargeting.
        :rtype: str
        """
        return self._idfa_targeting

    @idfa_targeting.setter
    def idfa_targeting(self, idfa_targeting):
        """Sets the idfa_targeting of this MediationGroupTargeting.

        The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn't need to be specified for an ANDROID device.

        :param idfa_targeting: The idfa_targeting of this MediationGroupTargeting.
        :type idfa_targeting: str
        """
        allowed_values = ["IDFA_TARGETING_UNSPECIFIED", "ALL", "AVAILABLE", "NOT_AVAILABLE"]  # noqa: E501
        if idfa_targeting not in allowed_values:
            raise ValueError(
                "Invalid value for `idfa_targeting` ({0}), must be one of {1}"
                .format(idfa_targeting, allowed_values)
            )

        self._idfa_targeting = idfa_targeting

    @property
    def platform(self):
        """Gets the platform of this MediationGroupTargeting.

        Describes the platform of the app. Examples: \"IOS\", \"Android\".

        :return: The platform of this MediationGroupTargeting.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this MediationGroupTargeting.

        Describes the platform of the app. Examples: \"IOS\", \"Android\".

        :param platform: The platform of this MediationGroupTargeting.
        :type platform: str
        """

        self._platform = platform

    @property
    def targeted_region_codes(self):
        """Gets the targeted_region_codes of this MediationGroupTargeting.

        The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.

        :return: The targeted_region_codes of this MediationGroupTargeting.
        :rtype: List[str]
        """
        return self._targeted_region_codes

    @targeted_region_codes.setter
    def targeted_region_codes(self, targeted_region_codes):
        """Sets the targeted_region_codes of this MediationGroupTargeting.

        The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.

        :param targeted_region_codes: The targeted_region_codes of this MediationGroupTargeting.
        :type targeted_region_codes: List[str]
        """

        self._targeted_region_codes = targeted_region_codes
