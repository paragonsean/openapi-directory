# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mediation_ab_experiment_experiment_mediation_line import MediationAbExperimentExperimentMediationLine
from openapi_server import util


class MediationAbExperiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_mediation_lines: List[MediationAbExperimentExperimentMediationLine]=None, display_name: str=None, end_time: str=None, experiment_id: str=None, mediation_group_id: str=None, name: str=None, start_time: str=None, state: str=None, treatment_mediation_lines: List[MediationAbExperimentExperimentMediationLine]=None, treatment_traffic_percentage: str=None, variant_leader: str=None):
        """MediationAbExperiment - a model defined in OpenAPI

        :param control_mediation_lines: The control_mediation_lines of this MediationAbExperiment.
        :param display_name: The display_name of this MediationAbExperiment.
        :param end_time: The end_time of this MediationAbExperiment.
        :param experiment_id: The experiment_id of this MediationAbExperiment.
        :param mediation_group_id: The mediation_group_id of this MediationAbExperiment.
        :param name: The name of this MediationAbExperiment.
        :param start_time: The start_time of this MediationAbExperiment.
        :param state: The state of this MediationAbExperiment.
        :param treatment_mediation_lines: The treatment_mediation_lines of this MediationAbExperiment.
        :param treatment_traffic_percentage: The treatment_traffic_percentage of this MediationAbExperiment.
        :param variant_leader: The variant_leader of this MediationAbExperiment.
        """
        self.openapi_types = {
            'control_mediation_lines': List[MediationAbExperimentExperimentMediationLine],
            'display_name': str,
            'end_time': str,
            'experiment_id': str,
            'mediation_group_id': str,
            'name': str,
            'start_time': str,
            'state': str,
            'treatment_mediation_lines': List[MediationAbExperimentExperimentMediationLine],
            'treatment_traffic_percentage': str,
            'variant_leader': str
        }

        self.attribute_map = {
            'control_mediation_lines': 'controlMediationLines',
            'display_name': 'displayName',
            'end_time': 'endTime',
            'experiment_id': 'experimentId',
            'mediation_group_id': 'mediationGroupId',
            'name': 'name',
            'start_time': 'startTime',
            'state': 'state',
            'treatment_mediation_lines': 'treatmentMediationLines',
            'treatment_traffic_percentage': 'treatmentTrafficPercentage',
            'variant_leader': 'variantLeader'
        }

        self._control_mediation_lines = control_mediation_lines
        self._display_name = display_name
        self._end_time = end_time
        self._experiment_id = experiment_id
        self._mediation_group_id = mediation_group_id
        self._name = name
        self._start_time = start_time
        self._state = state
        self._treatment_mediation_lines = treatment_mediation_lines
        self._treatment_traffic_percentage = treatment_traffic_percentage
        self._variant_leader = variant_leader

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediationAbExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediationAbExperiment of this MediationAbExperiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_mediation_lines(self):
        """Gets the control_mediation_lines of this MediationAbExperiment.

        Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.

        :return: The control_mediation_lines of this MediationAbExperiment.
        :rtype: List[MediationAbExperimentExperimentMediationLine]
        """
        return self._control_mediation_lines

    @control_mediation_lines.setter
    def control_mediation_lines(self, control_mediation_lines):
        """Sets the control_mediation_lines of this MediationAbExperiment.

        Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.

        :param control_mediation_lines: The control_mediation_lines of this MediationAbExperiment.
        :type control_mediation_lines: List[MediationAbExperimentExperimentMediationLine]
        """

        self._control_mediation_lines = control_mediation_lines

    @property
    def display_name(self):
        """Gets the display_name of this MediationAbExperiment.

        The display name for the mediation A/B experiment.

        :return: The display_name of this MediationAbExperiment.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MediationAbExperiment.

        The display name for the mediation A/B experiment.

        :param display_name: The display_name of this MediationAbExperiment.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def end_time(self):
        """Gets the end_time of this MediationAbExperiment.

        Output only. The time at which the experiment was ended or target to end (in UTC).

        :return: The end_time of this MediationAbExperiment.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MediationAbExperiment.

        Output only. The time at which the experiment was ended or target to end (in UTC).

        :param end_time: The end_time of this MediationAbExperiment.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def experiment_id(self):
        """Gets the experiment_id of this MediationAbExperiment.

        Output only. Unique identifier for the mediation A/B experiment. It is an output only property.

        :return: The experiment_id of this MediationAbExperiment.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this MediationAbExperiment.

        Output only. Unique identifier for the mediation A/B experiment. It is an output only property.

        :param experiment_id: The experiment_id of this MediationAbExperiment.
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def mediation_group_id(self):
        """Gets the mediation_group_id of this MediationAbExperiment.

        Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.

        :return: The mediation_group_id of this MediationAbExperiment.
        :rtype: str
        """
        return self._mediation_group_id

    @mediation_group_id.setter
    def mediation_group_id(self, mediation_group_id):
        """Sets the mediation_group_id of this MediationAbExperiment.

        Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.

        :param mediation_group_id: The mediation_group_id of this MediationAbExperiment.
        :type mediation_group_id: str
        """

        self._mediation_group_id = mediation_group_id

    @property
    def name(self):
        """Gets the name of this MediationAbExperiment.

        Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345

        :return: The name of this MediationAbExperiment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediationAbExperiment.

        Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345

        :param name: The name of this MediationAbExperiment.
        :type name: str
        """

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this MediationAbExperiment.

        Output only. The time at which the experiment was started (in UTC).

        :return: The start_time of this MediationAbExperiment.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MediationAbExperiment.

        Output only. The time at which the experiment was started (in UTC).

        :param start_time: The start_time of this MediationAbExperiment.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this MediationAbExperiment.

        Output only. The state of the experiment. It is an output only field.

        :return: The state of this MediationAbExperiment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MediationAbExperiment.

        Output only. The state of the experiment. It is an output only field.

        :param state: The state of this MediationAbExperiment.
        :type state: str
        """
        allowed_values = ["EXPERIMENT_STATE_UNSPECIFIED", "EXPIRED", "RUNNING", "ENDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def treatment_mediation_lines(self):
        """Gets the treatment_mediation_lines of this MediationAbExperiment.

        The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.

        :return: The treatment_mediation_lines of this MediationAbExperiment.
        :rtype: List[MediationAbExperimentExperimentMediationLine]
        """
        return self._treatment_mediation_lines

    @treatment_mediation_lines.setter
    def treatment_mediation_lines(self, treatment_mediation_lines):
        """Sets the treatment_mediation_lines of this MediationAbExperiment.

        The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.

        :param treatment_mediation_lines: The treatment_mediation_lines of this MediationAbExperiment.
        :type treatment_mediation_lines: List[MediationAbExperimentExperimentMediationLine]
        """

        self._treatment_mediation_lines = treatment_mediation_lines

    @property
    def treatment_traffic_percentage(self):
        """Gets the treatment_traffic_percentage of this MediationAbExperiment.

        The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.

        :return: The treatment_traffic_percentage of this MediationAbExperiment.
        :rtype: str
        """
        return self._treatment_traffic_percentage

    @treatment_traffic_percentage.setter
    def treatment_traffic_percentage(self, treatment_traffic_percentage):
        """Sets the treatment_traffic_percentage of this MediationAbExperiment.

        The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.

        :param treatment_traffic_percentage: The treatment_traffic_percentage of this MediationAbExperiment.
        :type treatment_traffic_percentage: str
        """

        self._treatment_traffic_percentage = treatment_traffic_percentage

    @property
    def variant_leader(self):
        """Gets the variant_leader of this MediationAbExperiment.

        Output only. The variant leader for the experiment according to some key metrics.

        :return: The variant_leader of this MediationAbExperiment.
        :rtype: str
        """
        return self._variant_leader

    @variant_leader.setter
    def variant_leader(self, variant_leader):
        """Sets the variant_leader of this MediationAbExperiment.

        Output only. The variant leader for the experiment according to some key metrics.

        :param variant_leader: The variant_leader of this MediationAbExperiment.
        :type variant_leader: str
        """
        allowed_values = ["VARIANT_LEADER_UNSPECIFIED", "CONTROL", "TREATMENT", "INSUFFICIENT_DATA", "TOO_EARLY_TO_CALL", "NO_VARIANT_LEADER"]  # noqa: E501
        if variant_leader not in allowed_values:
            raise ValueError(
                "Invalid value for `variant_leader` ({0}), must be one of {1}"
                .format(variant_leader, allowed_values)
            )

        self._variant_leader = variant_leader
