# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StopMediationAbExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, variant_choice: str=None):
        """StopMediationAbExperimentRequest - a model defined in OpenAPI

        :param variant_choice: The variant_choice of this StopMediationAbExperimentRequest.
        """
        self.openapi_types = {
            'variant_choice': str
        }

        self.attribute_map = {
            'variant_choice': 'variantChoice'
        }

        self._variant_choice = variant_choice

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopMediationAbExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopMediationAbExperimentRequest of this StopMediationAbExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def variant_choice(self):
        """Gets the variant_choice of this StopMediationAbExperimentRequest.

        The choice for the winning variant.

        :return: The variant_choice of this StopMediationAbExperimentRequest.
        :rtype: str
        """
        return self._variant_choice

    @variant_choice.setter
    def variant_choice(self, variant_choice):
        """Sets the variant_choice of this StopMediationAbExperimentRequest.

        The choice for the winning variant.

        :param variant_choice: The variant_choice of this StopMediationAbExperimentRequest.
        :type variant_choice: str
        """
        allowed_values = ["VARIANT_CHOICE_UNSPECIFIED", "VARIANT_CHOICE_A", "VARIANT_CHOICE_B"]  # noqa: E501
        if variant_choice not in allowed_values:
            raise ValueError(
                "Invalid value for `variant_choice` ({0}), must be one of {1}"
                .format(variant_choice, allowed_values)
            )

        self._variant_choice = variant_choice
