# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.adapter_adapter_config_metadata import AdapterAdapterConfigMetadata
from openapi_server import util


class Adapter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adapter_config_metadata: List[AdapterAdapterConfigMetadata]=None, adapter_id: str=None, formats: List[str]=None, name: str=None, platform: str=None, title: str=None):
        """Adapter - a model defined in OpenAPI

        :param adapter_config_metadata: The adapter_config_metadata of this Adapter.
        :param adapter_id: The adapter_id of this Adapter.
        :param formats: The formats of this Adapter.
        :param name: The name of this Adapter.
        :param platform: The platform of this Adapter.
        :param title: The title of this Adapter.
        """
        self.openapi_types = {
            'adapter_config_metadata': List[AdapterAdapterConfigMetadata],
            'adapter_id': str,
            'formats': List[str],
            'name': str,
            'platform': str,
            'title': str
        }

        self.attribute_map = {
            'adapter_config_metadata': 'adapterConfigMetadata',
            'adapter_id': 'adapterId',
            'formats': 'formats',
            'name': 'name',
            'platform': 'platform',
            'title': 'title'
        }

        self._adapter_config_metadata = adapter_config_metadata
        self._adapter_id = adapter_id
        self._formats = formats
        self._name = name
        self._platform = platform
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Adapter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Adapter of this Adapter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adapter_config_metadata(self):
        """Gets the adapter_config_metadata of this Adapter.

        Output only. Configuration metadata associated with this adapter.

        :return: The adapter_config_metadata of this Adapter.
        :rtype: List[AdapterAdapterConfigMetadata]
        """
        return self._adapter_config_metadata

    @adapter_config_metadata.setter
    def adapter_config_metadata(self, adapter_config_metadata):
        """Sets the adapter_config_metadata of this Adapter.

        Output only. Configuration metadata associated with this adapter.

        :param adapter_config_metadata: The adapter_config_metadata of this Adapter.
        :type adapter_config_metadata: List[AdapterAdapterConfigMetadata]
        """

        self._adapter_config_metadata = adapter_config_metadata

    @property
    def adapter_id(self):
        """Gets the adapter_id of this Adapter.

        Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).

        :return: The adapter_id of this Adapter.
        :rtype: str
        """
        return self._adapter_id

    @adapter_id.setter
    def adapter_id(self, adapter_id):
        """Sets the adapter_id of this Adapter.

        Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).

        :param adapter_id: The adapter_id of this Adapter.
        :type adapter_id: str
        """

        self._adapter_id = adapter_id

    @property
    def formats(self):
        """Gets the formats of this Adapter.

        Output only. Indicates the formats of the ad units supported by this adapter.

        :return: The formats of this Adapter.
        :rtype: List[str]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this Adapter.

        Output only. Indicates the formats of the ad units supported by this adapter.

        :param formats: The formats of this Adapter.
        :type formats: List[str]
        """

        self._formats = formats

    @property
    def name(self):
        """Gets the name of this Adapter.

        Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.

        :return: The name of this Adapter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Adapter.

        Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.

        :param name: The name of this Adapter.
        :type name: str
        """

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this Adapter.

        Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE

        :return: The platform of this Adapter.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Adapter.

        Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE

        :param platform: The platform of this Adapter.
        :type platform: str
        """

        self._platform = platform

    @property
    def title(self):
        """Gets the title of this Adapter.

        Output only. The display name of this adapter.

        :return: The title of this Adapter.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Adapter.

        Output only. The display name of this adapter.

        :param title: The title of this Adapter.
        :type title: str
        """

        self._title = title
