# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mediation_group_mediation_group_line import MediationGroupMediationGroupLine
from openapi_server.models.mediation_group_targeting import MediationGroupTargeting
from openapi_server import util


class MediationGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, mediation_ab_experiment_state: str=None, mediation_group_id: str=None, mediation_group_lines: Dict[str, MediationGroupMediationGroupLine]=None, name: str=None, state: str=None, targeting: MediationGroupTargeting=None):
        """MediationGroup - a model defined in OpenAPI

        :param display_name: The display_name of this MediationGroup.
        :param mediation_ab_experiment_state: The mediation_ab_experiment_state of this MediationGroup.
        :param mediation_group_id: The mediation_group_id of this MediationGroup.
        :param mediation_group_lines: The mediation_group_lines of this MediationGroup.
        :param name: The name of this MediationGroup.
        :param state: The state of this MediationGroup.
        :param targeting: The targeting of this MediationGroup.
        """
        self.openapi_types = {
            'display_name': str,
            'mediation_ab_experiment_state': str,
            'mediation_group_id': str,
            'mediation_group_lines': Dict[str, MediationGroupMediationGroupLine],
            'name': str,
            'state': str,
            'targeting': MediationGroupTargeting
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'mediation_ab_experiment_state': 'mediationAbExperimentState',
            'mediation_group_id': 'mediationGroupId',
            'mediation_group_lines': 'mediationGroupLines',
            'name': 'name',
            'state': 'state',
            'targeting': 'targeting'
        }

        self._display_name = display_name
        self._mediation_ab_experiment_state = mediation_ab_experiment_state
        self._mediation_group_id = mediation_group_id
        self._mediation_group_lines = mediation_group_lines
        self._name = name
        self._state = state
        self._targeting = targeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediationGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediationGroup of this MediationGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this MediationGroup.

        User provided name for the mediation group. The maximum length allowed is 120 characters.

        :return: The display_name of this MediationGroup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MediationGroup.

        User provided name for the mediation group. The maximum length allowed is 120 characters.

        :param display_name: The display_name of this MediationGroup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def mediation_ab_experiment_state(self):
        """Gets the mediation_ab_experiment_state of this MediationGroup.

        Output only. The state of the mediation a/b experiment that belongs to this mediation group.

        :return: The mediation_ab_experiment_state of this MediationGroup.
        :rtype: str
        """
        return self._mediation_ab_experiment_state

    @mediation_ab_experiment_state.setter
    def mediation_ab_experiment_state(self, mediation_ab_experiment_state):
        """Sets the mediation_ab_experiment_state of this MediationGroup.

        Output only. The state of the mediation a/b experiment that belongs to this mediation group.

        :param mediation_ab_experiment_state: The mediation_ab_experiment_state of this MediationGroup.
        :type mediation_ab_experiment_state: str
        """
        allowed_values = ["EXPERIMENT_STATE_UNSPECIFIED", "RUNNING", "NOT_RUNNING"]  # noqa: E501
        if mediation_ab_experiment_state not in allowed_values:
            raise ValueError(
                "Invalid value for `mediation_ab_experiment_state` ({0}), must be one of {1}"
                .format(mediation_ab_experiment_state, allowed_values)
            )

        self._mediation_ab_experiment_state = mediation_ab_experiment_state

    @property
    def mediation_group_id(self):
        """Gets the mediation_group_id of this MediationGroup.

        The ID of the mediation group. Example: \"0123456789\". This is a read only property.

        :return: The mediation_group_id of this MediationGroup.
        :rtype: str
        """
        return self._mediation_group_id

    @mediation_group_id.setter
    def mediation_group_id(self, mediation_group_id):
        """Sets the mediation_group_id of this MediationGroup.

        The ID of the mediation group. Example: \"0123456789\". This is a read only property.

        :param mediation_group_id: The mediation_group_id of this MediationGroup.
        :type mediation_group_id: str
        """

        self._mediation_group_id = mediation_group_id

    @property
    def mediation_group_lines(self):
        """Gets the mediation_group_lines of this MediationGroup.

        The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.

        :return: The mediation_group_lines of this MediationGroup.
        :rtype: Dict[str, MediationGroupMediationGroupLine]
        """
        return self._mediation_group_lines

    @mediation_group_lines.setter
    def mediation_group_lines(self, mediation_group_lines):
        """Sets the mediation_group_lines of this MediationGroup.

        The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.

        :param mediation_group_lines: The mediation_group_lines of this MediationGroup.
        :type mediation_group_lines: Dict[str, MediationGroupMediationGroupLine]
        """

        self._mediation_group_lines = mediation_group_lines

    @property
    def name(self):
        """Gets the name of this MediationGroup.

        Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789

        :return: The name of this MediationGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediationGroup.

        Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789

        :param name: The name of this MediationGroup.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this MediationGroup.

        The status of the mediation group. Only enabled mediation groups will be served.

        :return: The state of this MediationGroup.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MediationGroup.

        The status of the mediation group. Only enabled mediation groups will be served.

        :param state: The state of this MediationGroup.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def targeting(self):
        """Gets the targeting of this MediationGroup.


        :return: The targeting of this MediationGroup.
        :rtype: MediationGroupTargeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this MediationGroup.


        :param targeting: The targeting of this MediationGroup.
        :type targeting: MediationGroupTargeting
        """

        self._targeting = targeting
