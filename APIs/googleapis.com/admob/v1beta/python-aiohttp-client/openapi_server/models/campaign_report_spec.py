# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util


class CampaignReportSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, dimensions: List[str]=None, language_code: str=None, metrics: List[str]=None):
        """CampaignReportSpec - a model defined in OpenAPI

        :param date_range: The date_range of this CampaignReportSpec.
        :param dimensions: The dimensions of this CampaignReportSpec.
        :param language_code: The language_code of this CampaignReportSpec.
        :param metrics: The metrics of this CampaignReportSpec.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'dimensions': List[str],
            'language_code': str,
            'metrics': List[str]
        }

        self.attribute_map = {
            'date_range': 'dateRange',
            'dimensions': 'dimensions',
            'language_code': 'languageCode',
            'metrics': 'metrics'
        }

        self._date_range = date_range
        self._dimensions = dimensions
        self._language_code = language_code
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignReportSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignReportSpec of this CampaignReportSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this CampaignReportSpec.


        :return: The date_range of this CampaignReportSpec.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this CampaignReportSpec.


        :param date_range: The date_range of this CampaignReportSpec.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def dimensions(self):
        """Gets the dimensions of this CampaignReportSpec.

        List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.

        :return: The dimensions of this CampaignReportSpec.
        :rtype: List[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this CampaignReportSpec.

        List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.

        :param dimensions: The dimensions of this CampaignReportSpec.
        :type dimensions: List[str]
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "DATE", "CAMPAIGN_ID", "CAMPAIGN_NAME", "AD_ID", "AD_NAME", "PLACEMENT_ID", "PLACEMENT_NAME", "PLACEMENT_PLATFORM", "COUNTRY", "FORMAT"]  # noqa: E501
        if not set(dimensions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dimensions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(dimensions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._dimensions = dimensions

    @property
    def language_code(self):
        """Gets the language_code of this CampaignReportSpec.

        Language used for any localized text, such as certain applicable dimension values. The language tag is defined in the IETF BCP47. Defaults to 'en-US' if unspecified or invalid.

        :return: The language_code of this CampaignReportSpec.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CampaignReportSpec.

        Language used for any localized text, such as certain applicable dimension values. The language tag is defined in the IETF BCP47. Defaults to 'en-US' if unspecified or invalid.

        :param language_code: The language_code of this CampaignReportSpec.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def metrics(self):
        """Gets the metrics of this CampaignReportSpec.

        List of metrics of the report. A report must specify at least one metric.

        :return: The metrics of this CampaignReportSpec.
        :rtype: List[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this CampaignReportSpec.

        List of metrics of the report. A report must specify at least one metric.

        :param metrics: The metrics of this CampaignReportSpec.
        :type metrics: List[str]
        """
        allowed_values = ["METRIC_UNSPECIFIED", "IMPRESSIONS", "CLICKS", "CLICK_THROUGH_RATE", "INSTALLS", "ESTIMATED_COST", "AVERAGE_CPI", "INTERACTIONS"]  # noqa: E501
        if not set(metrics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metrics` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(metrics) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._metrics = metrics
