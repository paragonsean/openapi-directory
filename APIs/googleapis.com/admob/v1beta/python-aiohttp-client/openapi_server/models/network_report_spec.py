# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server.models.localization_settings import LocalizationSettings
from openapi_server.models.network_report_spec_dimension_filter import NetworkReportSpecDimensionFilter
from openapi_server.models.network_report_spec_sort_condition import NetworkReportSpecSortCondition
from openapi_server import util


class NetworkReportSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_range: DateRange=None, dimension_filters: List[NetworkReportSpecDimensionFilter]=None, dimensions: List[str]=None, localization_settings: LocalizationSettings=None, max_report_rows: int=None, metrics: List[str]=None, sort_conditions: List[NetworkReportSpecSortCondition]=None, time_zone: str=None):
        """NetworkReportSpec - a model defined in OpenAPI

        :param date_range: The date_range of this NetworkReportSpec.
        :param dimension_filters: The dimension_filters of this NetworkReportSpec.
        :param dimensions: The dimensions of this NetworkReportSpec.
        :param localization_settings: The localization_settings of this NetworkReportSpec.
        :param max_report_rows: The max_report_rows of this NetworkReportSpec.
        :param metrics: The metrics of this NetworkReportSpec.
        :param sort_conditions: The sort_conditions of this NetworkReportSpec.
        :param time_zone: The time_zone of this NetworkReportSpec.
        """
        self.openapi_types = {
            'date_range': DateRange,
            'dimension_filters': List[NetworkReportSpecDimensionFilter],
            'dimensions': List[str],
            'localization_settings': LocalizationSettings,
            'max_report_rows': int,
            'metrics': List[str],
            'sort_conditions': List[NetworkReportSpecSortCondition],
            'time_zone': str
        }

        self.attribute_map = {
            'date_range': 'dateRange',
            'dimension_filters': 'dimensionFilters',
            'dimensions': 'dimensions',
            'localization_settings': 'localizationSettings',
            'max_report_rows': 'maxReportRows',
            'metrics': 'metrics',
            'sort_conditions': 'sortConditions',
            'time_zone': 'timeZone'
        }

        self._date_range = date_range
        self._dimension_filters = dimension_filters
        self._dimensions = dimensions
        self._localization_settings = localization_settings
        self._max_report_rows = max_report_rows
        self._metrics = metrics
        self._sort_conditions = sort_conditions
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkReportSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkReportSpec of this NetworkReportSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_range(self):
        """Gets the date_range of this NetworkReportSpec.


        :return: The date_range of this NetworkReportSpec.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """Sets the date_range of this NetworkReportSpec.


        :param date_range: The date_range of this NetworkReportSpec.
        :type date_range: DateRange
        """

        self._date_range = date_range

    @property
    def dimension_filters(self):
        """Gets the dimension_filters of this NetworkReportSpec.

        Describes which report rows to match based on their dimension values.

        :return: The dimension_filters of this NetworkReportSpec.
        :rtype: List[NetworkReportSpecDimensionFilter]
        """
        return self._dimension_filters

    @dimension_filters.setter
    def dimension_filters(self, dimension_filters):
        """Sets the dimension_filters of this NetworkReportSpec.

        Describes which report rows to match based on their dimension values.

        :param dimension_filters: The dimension_filters of this NetworkReportSpec.
        :type dimension_filters: List[NetworkReportSpecDimensionFilter]
        """

        self._dimension_filters = dimension_filters

    @property
    def dimensions(self):
        """Gets the dimensions of this NetworkReportSpec.

        List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.

        :return: The dimensions of this NetworkReportSpec.
        :rtype: List[str]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this NetworkReportSpec.

        List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.

        :param dimensions: The dimensions of this NetworkReportSpec.
        :type dimensions: List[str]
        """
        allowed_values = ["DIMENSION_UNSPECIFIED", "DATE", "MONTH", "WEEK", "AD_UNIT", "APP", "AD_TYPE", "COUNTRY", "FORMAT", "PLATFORM", "MOBILE_OS_VERSION", "GMA_SDK_VERSION", "APP_VERSION_NAME", "SERVING_RESTRICTION"]  # noqa: E501
        if not set(dimensions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `dimensions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(dimensions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._dimensions = dimensions

    @property
    def localization_settings(self):
        """Gets the localization_settings of this NetworkReportSpec.


        :return: The localization_settings of this NetworkReportSpec.
        :rtype: LocalizationSettings
        """
        return self._localization_settings

    @localization_settings.setter
    def localization_settings(self, localization_settings):
        """Sets the localization_settings of this NetworkReportSpec.


        :param localization_settings: The localization_settings of this NetworkReportSpec.
        :type localization_settings: LocalizationSettings
        """

        self._localization_settings = localization_settings

    @property
    def max_report_rows(self):
        """Gets the max_report_rows of this NetworkReportSpec.

        Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.

        :return: The max_report_rows of this NetworkReportSpec.
        :rtype: int
        """
        return self._max_report_rows

    @max_report_rows.setter
    def max_report_rows(self, max_report_rows):
        """Sets the max_report_rows of this NetworkReportSpec.

        Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.

        :param max_report_rows: The max_report_rows of this NetworkReportSpec.
        :type max_report_rows: int
        """

        self._max_report_rows = max_report_rows

    @property
    def metrics(self):
        """Gets the metrics of this NetworkReportSpec.

        List of metrics of the report. A report must specify at least one metric.

        :return: The metrics of this NetworkReportSpec.
        :rtype: List[str]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this NetworkReportSpec.

        List of metrics of the report. A report must specify at least one metric.

        :param metrics: The metrics of this NetworkReportSpec.
        :type metrics: List[str]
        """
        allowed_values = ["METRIC_UNSPECIFIED", "AD_REQUESTS", "CLICKS", "ESTIMATED_EARNINGS", "IMPRESSIONS", "IMPRESSION_CTR", "IMPRESSION_RPM", "MATCHED_REQUESTS", "MATCH_RATE", "SHOW_RATE"]  # noqa: E501
        if not set(metrics).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `metrics` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(metrics) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._metrics = metrics

    @property
    def sort_conditions(self):
        """Gets the sort_conditions of this NetworkReportSpec.

        Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.

        :return: The sort_conditions of this NetworkReportSpec.
        :rtype: List[NetworkReportSpecSortCondition]
        """
        return self._sort_conditions

    @sort_conditions.setter
    def sort_conditions(self, sort_conditions):
        """Sets the sort_conditions of this NetworkReportSpec.

        Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.

        :param sort_conditions: The sort_conditions of this NetworkReportSpec.
        :type sort_conditions: List[NetworkReportSpecSortCondition]
        """

        self._sort_conditions = sort_conditions

    @property
    def time_zone(self):
        """Gets the time_zone of this NetworkReportSpec.

        A report time zone. Accepts an IANA TZ name values, such as \"America/Los_Angeles.\" If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The \"America/Los_Angeles\" is the only supported value at the moment.

        :return: The time_zone of this NetworkReportSpec.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this NetworkReportSpec.

        A report time zone. Accepts an IANA TZ name values, such as \"America/Los_Angeles.\" If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The \"America/Los_Angeles\" is the only supported value at the moment.

        :param time_zone: The time_zone of this NetworkReportSpec.
        :type time_zone: str
        """

        self._time_zone = time_zone
