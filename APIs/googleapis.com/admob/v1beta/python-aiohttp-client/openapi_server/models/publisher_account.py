# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublisherAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, name: str=None, publisher_id: str=None, reporting_time_zone: str=None):
        """PublisherAccount - a model defined in OpenAPI

        :param currency_code: The currency_code of this PublisherAccount.
        :param name: The name of this PublisherAccount.
        :param publisher_id: The publisher_id of this PublisherAccount.
        :param reporting_time_zone: The reporting_time_zone of this PublisherAccount.
        """
        self.openapi_types = {
            'currency_code': str,
            'name': str,
            'publisher_id': str,
            'reporting_time_zone': str
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'name': 'name',
            'publisher_id': 'publisherId',
            'reporting_time_zone': 'reportingTimeZone'
        }

        self._currency_code = currency_code
        self._name = name
        self._publisher_id = publisher_id
        self._reporting_time_zone = reporting_time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherAccount of this PublisherAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this PublisherAccount.

        Currency code of the earning-related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion.

        :return: The currency_code of this PublisherAccount.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this PublisherAccount.

        Currency code of the earning-related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion.

        :param currency_code: The currency_code of this PublisherAccount.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def name(self):
        """Gets the name of this PublisherAccount.

        Resource name of this account. Format is accounts/{publisher_id}.

        :return: The name of this PublisherAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublisherAccount.

        Resource name of this account. Format is accounts/{publisher_id}.

        :param name: The name of this PublisherAccount.
        :type name: str
        """

        self._name = name

    @property
    def publisher_id(self):
        """Gets the publisher_id of this PublisherAccount.

        The unique ID by which this publisher account can be identified in the API requests (for example, pub-1234567890).

        :return: The publisher_id of this PublisherAccount.
        :rtype: str
        """
        return self._publisher_id

    @publisher_id.setter
    def publisher_id(self, publisher_id):
        """Sets the publisher_id of this PublisherAccount.

        The unique ID by which this publisher account can be identified in the API requests (for example, pub-1234567890).

        :param publisher_id: The publisher_id of this PublisherAccount.
        :type publisher_id: str
        """

        self._publisher_id = publisher_id

    @property
    def reporting_time_zone(self):
        """Gets the reporting_time_zone of this PublisherAccount.

        The time zone that is used in reports that are generated for this account. The value is a time-zone ID as specified by the CLDR project, for example, \"America/Los_Angeles\".

        :return: The reporting_time_zone of this PublisherAccount.
        :rtype: str
        """
        return self._reporting_time_zone

    @reporting_time_zone.setter
    def reporting_time_zone(self, reporting_time_zone):
        """Sets the reporting_time_zone of this PublisherAccount.

        The time zone that is used in reports that are generated for this account. The value is a time-zone ID as specified by the CLDR project, for example, \"America/Los_Angeles\".

        :param reporting_time_zone: The reporting_time_zone of this PublisherAccount.
        :type reporting_time_zone: str
        """

        self._reporting_time_zone = reporting_time_zone
