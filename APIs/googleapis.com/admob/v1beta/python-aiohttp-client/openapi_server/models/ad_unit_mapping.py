# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdUnitMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_unit_configurations: Dict[str, str]=None, adapter_id: str=None, display_name: str=None, name: str=None, state: str=None):
        """AdUnitMapping - a model defined in OpenAPI

        :param ad_unit_configurations: The ad_unit_configurations of this AdUnitMapping.
        :param adapter_id: The adapter_id of this AdUnitMapping.
        :param display_name: The display_name of this AdUnitMapping.
        :param name: The name of this AdUnitMapping.
        :param state: The state of this AdUnitMapping.
        """
        self.openapi_types = {
            'ad_unit_configurations': Dict[str, str],
            'adapter_id': str,
            'display_name': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'ad_unit_configurations': 'adUnitConfigurations',
            'adapter_id': 'adapterId',
            'display_name': 'displayName',
            'name': 'name',
            'state': 'state'
        }

        self._ad_unit_configurations = ad_unit_configurations
        self._adapter_id = adapter_id
        self._display_name = display_name
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdUnitMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdUnitMapping of this AdUnitMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_unit_configurations(self):
        """Gets the ad_unit_configurations of this AdUnitMapping.

        Settings for the specified ad unit to make an ad request to 3rd party ad network. Key-value pairs with values set by the user for the keys requested by the ad network. Please see https://support.google.com/admob/answer/3245073 for details on how to configure the network settings.

        :return: The ad_unit_configurations of this AdUnitMapping.
        :rtype: Dict[str, str]
        """
        return self._ad_unit_configurations

    @ad_unit_configurations.setter
    def ad_unit_configurations(self, ad_unit_configurations):
        """Sets the ad_unit_configurations of this AdUnitMapping.

        Settings for the specified ad unit to make an ad request to 3rd party ad network. Key-value pairs with values set by the user for the keys requested by the ad network. Please see https://support.google.com/admob/answer/3245073 for details on how to configure the network settings.

        :param ad_unit_configurations: The ad_unit_configurations of this AdUnitMapping.
        :type ad_unit_configurations: Dict[str, str]
        """

        self._ad_unit_configurations = ad_unit_configurations

    @property
    def adapter_id(self):
        """Gets the adapter_id of this AdUnitMapping.

        The ID of mediation ad source adapter used by this ad unit mapping. The adapter determines the information needed in the ad_network_settings.

        :return: The adapter_id of this AdUnitMapping.
        :rtype: str
        """
        return self._adapter_id

    @adapter_id.setter
    def adapter_id(self, adapter_id):
        """Sets the adapter_id of this AdUnitMapping.

        The ID of mediation ad source adapter used by this ad unit mapping. The adapter determines the information needed in the ad_network_settings.

        :param adapter_id: The adapter_id of this AdUnitMapping.
        :type adapter_id: str
        """

        self._adapter_id = adapter_id

    @property
    def display_name(self):
        """Gets the display_name of this AdUnitMapping.

        Optional. The display name of this ad unit mapping instance.

        :return: The display_name of this AdUnitMapping.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AdUnitMapping.

        Optional. The display name of this ad unit mapping instance.

        :param display_name: The display_name of this AdUnitMapping.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this AdUnitMapping.

        Resource name of this ad unit mapping. Format is: accounts/{publisher_id}/adUnits/{ad_unit_id_fragment}/adUnitMappings/{ad_unit_mapping_id} Example: accounts/pub-1234567890123456/adUnits/0123456789/adUnitMappings/987654321

        :return: The name of this AdUnitMapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdUnitMapping.

        Resource name of this ad unit mapping. Format is: accounts/{publisher_id}/adUnits/{ad_unit_id_fragment}/adUnitMappings/{ad_unit_mapping_id} Example: accounts/pub-1234567890123456/adUnits/0123456789/adUnitMappings/987654321

        :param name: The name of this AdUnitMapping.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this AdUnitMapping.

        Output only. The status of this ad unit mapping.

        :return: The state of this AdUnitMapping.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AdUnitMapping.

        Output only. The status of this ad unit mapping.

        :param state: The state of this AdUnitMapping.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ENABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
