/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediationGroupTargeting model module.
 * @module model/MediationGroupTargeting
 * @version v1beta
 */
class MediationGroupTargeting {
    /**
     * Constructs a new <code>MediationGroupTargeting</code>.
     * Set of criteria targeted by this mediation group. For example, a mediation group can target specific ad unit IDs, platform, format and geo location.
     * @alias module:model/MediationGroupTargeting
     */
    constructor() { 
        
        MediationGroupTargeting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediationGroupTargeting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediationGroupTargeting} obj Optional instance to populate.
     * @return {module:model/MediationGroupTargeting} The populated <code>MediationGroupTargeting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediationGroupTargeting();

            if (data.hasOwnProperty('adUnitIds')) {
                obj['adUnitIds'] = ApiClient.convertToType(data['adUnitIds'], ['String']);
            }
            if (data.hasOwnProperty('excludedRegionCodes')) {
                obj['excludedRegionCodes'] = ApiClient.convertToType(data['excludedRegionCodes'], ['String']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('idfaTargeting')) {
                obj['idfaTargeting'] = ApiClient.convertToType(data['idfaTargeting'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('targetedRegionCodes')) {
                obj['targetedRegionCodes'] = ApiClient.convertToType(data['targetedRegionCodes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediationGroupTargeting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediationGroupTargeting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['adUnitIds'])) {
            throw new Error("Expected the field `adUnitIds` to be an array in the JSON data but got " + data['adUnitIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['excludedRegionCodes'])) {
            throw new Error("Expected the field `excludedRegionCodes` to be an array in the JSON data but got " + data['excludedRegionCodes']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['idfaTargeting'] && !(typeof data['idfaTargeting'] === 'string' || data['idfaTargeting'] instanceof String)) {
            throw new Error("Expected the field `idfaTargeting` to be a primitive type in the JSON string but got " + data['idfaTargeting']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetedRegionCodes'])) {
            throw new Error("Expected the field `targetedRegionCodes` to be an array in the JSON data but got " + data['targetedRegionCodes']);
        }

        return true;
    }


}



/**
 * Ad units targeted by this mediation group. Example: \"ca-app-pub-1234/8790\".
 * @member {Array.<String>} adUnitIds
 */
MediationGroupTargeting.prototype['adUnitIds'] = undefined;

/**
 * The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group does not exclude any region.
 * @member {Array.<String>} excludedRegionCodes
 */
MediationGroupTargeting.prototype['excludedRegionCodes'] = undefined;

/**
 * Ad format targeted by this mediation group. Examples: \"banner\", \"native\".
 * @member {String} format
 */
MediationGroupTargeting.prototype['format'] = undefined;

/**
 * The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn't need to be specified for an ANDROID device.
 * @member {module:model/MediationGroupTargeting.IdfaTargetingEnum} idfaTargeting
 */
MediationGroupTargeting.prototype['idfaTargeting'] = undefined;

/**
 * Describes the platform of the app. Examples: \"IOS\", \"Android\".
 * @member {String} platform
 */
MediationGroupTargeting.prototype['platform'] = undefined;

/**
 * The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
 * @member {Array.<String>} targetedRegionCodes
 */
MediationGroupTargeting.prototype['targetedRegionCodes'] = undefined;





/**
 * Allowed values for the <code>idfaTargeting</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroupTargeting['IdfaTargetingEnum'] = {

    /**
     * value: "IDFA_TARGETING_UNSPECIFIED"
     * @const
     */
    "IDFA_TARGETING_UNSPECIFIED": "IDFA_TARGETING_UNSPECIFIED",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "AVAILABLE"
     * @const
     */
    "AVAILABLE": "AVAILABLE",

    /**
     * value: "NOT_AVAILABLE"
     * @const
     */
    "NOT_AVAILABLE": "NOT_AVAILABLE"
};



export default MediationGroupTargeting;

