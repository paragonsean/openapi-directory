/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdUnitMapping model module.
 * @module model/AdUnitMapping
 * @version v1beta
 */
class AdUnitMapping {
    /**
     * Constructs a new <code>AdUnitMapping</code>.
     * Settings to map an AdMob ad unit to a 3rd party ad unit.
     * @alias module:model/AdUnitMapping
     */
    constructor() { 
        
        AdUnitMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdUnitMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdUnitMapping} obj Optional instance to populate.
     * @return {module:model/AdUnitMapping} The populated <code>AdUnitMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdUnitMapping();

            if (data.hasOwnProperty('adUnitConfigurations')) {
                obj['adUnitConfigurations'] = ApiClient.convertToType(data['adUnitConfigurations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('adapterId')) {
                obj['adapterId'] = ApiClient.convertToType(data['adapterId'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdUnitMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdUnitMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adapterId'] && !(typeof data['adapterId'] === 'string' || data['adapterId'] instanceof String)) {
            throw new Error("Expected the field `adapterId` to be a primitive type in the JSON string but got " + data['adapterId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Settings for the specified ad unit to make an ad request to 3rd party ad network. Key-value pairs with values set by the user for the keys requested by the ad network. Please see https://support.google.com/admob/answer/3245073 for details on how to configure the network settings.
 * @member {Object.<String, String>} adUnitConfigurations
 */
AdUnitMapping.prototype['adUnitConfigurations'] = undefined;

/**
 * The ID of mediation ad source adapter used by this ad unit mapping. The adapter determines the information needed in the ad_network_settings.
 * @member {String} adapterId
 */
AdUnitMapping.prototype['adapterId'] = undefined;

/**
 * Optional. The display name of this ad unit mapping instance.
 * @member {String} displayName
 */
AdUnitMapping.prototype['displayName'] = undefined;

/**
 * Resource name of this ad unit mapping. Format is: accounts/{publisher_id}/adUnits/{ad_unit_id_fragment}/adUnitMappings/{ad_unit_mapping_id} Example: accounts/pub-1234567890123456/adUnits/0123456789/adUnitMappings/987654321
 * @member {String} name
 */
AdUnitMapping.prototype['name'] = undefined;

/**
 * Output only. The status of this ad unit mapping.
 * @member {module:model/AdUnitMapping.StateEnum} state
 */
AdUnitMapping.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
AdUnitMapping['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED"
};



export default AdUnitMapping;

