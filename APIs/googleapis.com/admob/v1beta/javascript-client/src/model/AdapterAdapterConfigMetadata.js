/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdapterAdapterConfigMetadata model module.
 * @module model/AdapterAdapterConfigMetadata
 * @version v1beta
 */
class AdapterAdapterConfigMetadata {
    /**
     * Constructs a new <code>AdapterAdapterConfigMetadata</code>.
     * Configuration metadata associated with this adapter. They are used to define the ad_unit_configurations associated with AdUnitMappings for the this adapter.
     * @alias module:model/AdapterAdapterConfigMetadata
     */
    constructor() { 
        
        AdapterAdapterConfigMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdapterAdapterConfigMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdapterAdapterConfigMetadata} obj Optional instance to populate.
     * @return {module:model/AdapterAdapterConfigMetadata} The populated <code>AdapterAdapterConfigMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdapterAdapterConfigMetadata();

            if (data.hasOwnProperty('adapterConfigMetadataId')) {
                obj['adapterConfigMetadataId'] = ApiClient.convertToType(data['adapterConfigMetadataId'], 'String');
            }
            if (data.hasOwnProperty('adapterConfigMetadataLabel')) {
                obj['adapterConfigMetadataLabel'] = ApiClient.convertToType(data['adapterConfigMetadataLabel'], 'String');
            }
            if (data.hasOwnProperty('isRequired')) {
                obj['isRequired'] = ApiClient.convertToType(data['isRequired'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdapterAdapterConfigMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdapterAdapterConfigMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adapterConfigMetadataId'] && !(typeof data['adapterConfigMetadataId'] === 'string' || data['adapterConfigMetadataId'] instanceof String)) {
            throw new Error("Expected the field `adapterConfigMetadataId` to be a primitive type in the JSON string but got " + data['adapterConfigMetadataId']);
        }
        // ensure the json data is a string
        if (data['adapterConfigMetadataLabel'] && !(typeof data['adapterConfigMetadataLabel'] === 'string' || data['adapterConfigMetadataLabel'] instanceof String)) {
            throw new Error("Expected the field `adapterConfigMetadataLabel` to be a primitive type in the JSON string but got " + data['adapterConfigMetadataLabel']);
        }

        return true;
    }


}



/**
 * This is used to fill the key of the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations).
 * @member {String} adapterConfigMetadataId
 */
AdapterAdapterConfigMetadata.prototype['adapterConfigMetadataId'] = undefined;

/**
 * Name of the adapter configuration metadata.
 * @member {String} adapterConfigMetadataLabel
 */
AdapterAdapterConfigMetadata.prototype['adapterConfigMetadataLabel'] = undefined;

/**
 * Whether this metadata is required for configuring the AdUnitMappings.
 * @member {Boolean} isRequired
 */
AdapterAdapterConfigMetadata.prototype['isRequired'] = undefined;






export default AdapterAdapterConfigMetadata;

