/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediationGroupMediationGroupLine model module.
 * @module model/MediationGroupMediationGroupLine
 * @version v1beta
 */
class MediationGroupMediationGroupLine {
    /**
     * Constructs a new <code>MediationGroupMediationGroupLine</code>.
     * Settings for an ad network used by a mediation group.
     * @alias module:model/MediationGroupMediationGroupLine
     */
    constructor() { 
        
        MediationGroupMediationGroupLine.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediationGroupMediationGroupLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediationGroupMediationGroupLine} obj Optional instance to populate.
     * @return {module:model/MediationGroupMediationGroupLine} The populated <code>MediationGroupMediationGroupLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediationGroupMediationGroupLine();

            if (data.hasOwnProperty('adSourceId')) {
                obj['adSourceId'] = ApiClient.convertToType(data['adSourceId'], 'String');
            }
            if (data.hasOwnProperty('adUnitMappings')) {
                obj['adUnitMappings'] = ApiClient.convertToType(data['adUnitMappings'], {'String': 'String'});
            }
            if (data.hasOwnProperty('cpmMicros')) {
                obj['cpmMicros'] = ApiClient.convertToType(data['cpmMicros'], 'String');
            }
            if (data.hasOwnProperty('cpmMode')) {
                obj['cpmMode'] = ApiClient.convertToType(data['cpmMode'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('experimentVariant')) {
                obj['experimentVariant'] = ApiClient.convertToType(data['experimentVariant'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediationGroupMediationGroupLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediationGroupMediationGroupLine</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adSourceId'] && !(typeof data['adSourceId'] === 'string' || data['adSourceId'] instanceof String)) {
            throw new Error("Expected the field `adSourceId` to be a primitive type in the JSON string but got " + data['adSourceId']);
        }
        // ensure the json data is a string
        if (data['cpmMicros'] && !(typeof data['cpmMicros'] === 'string' || data['cpmMicros'] instanceof String)) {
            throw new Error("Expected the field `cpmMicros` to be a primitive type in the JSON string but got " + data['cpmMicros']);
        }
        // ensure the json data is a string
        if (data['cpmMode'] && !(typeof data['cpmMode'] === 'string' || data['cpmMode'] instanceof String)) {
            throw new Error("Expected the field `cpmMode` to be a primitive type in the JSON string but got " + data['cpmMode']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['experimentVariant'] && !(typeof data['experimentVariant'] === 'string' || data['experimentVariant'] instanceof String)) {
            throw new Error("Expected the field `experimentVariant` to be a primitive type in the JSON string but got " + data['experimentVariant']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The ID of the ad source this mediation line is associated with.
 * @member {String} adSourceId
 */
MediationGroupMediationGroupLine.prototype['adSourceId'] = undefined;

/**
 * References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.
 * @member {Object.<String, String>} adUnitMappings
 */
MediationGroupMediationGroupLine.prototype['adUnitMappings'] = undefined;

/**
 * The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if `cpm_mode` is `LIVE`. **Warning:** \"USD\" is the only supported currency at the moment. The unit is in micros.
 * @member {String} cpmMicros
 */
MediationGroupMediationGroupLine.prototype['cpmMicros'] = undefined;

/**
 * Indicates how the CPM for this mediation line is provided. Note that `MANUAL` and `LIVE` are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.
 * @member {module:model/MediationGroupMediationGroupLine.CpmModeEnum} cpmMode
 */
MediationGroupMediationGroupLine.prototype['cpmMode'] = undefined;

/**
 * User-provided label for this mediation line. The maximum length allowed is 255 characters.
 * @member {String} displayName
 */
MediationGroupMediationGroupLine.prototype['displayName'] = undefined;

/**
 * Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.
 * @member {module:model/MediationGroupMediationGroupLine.ExperimentVariantEnum} experimentVariant
 */
MediationGroupMediationGroupLine.prototype['experimentVariant'] = undefined;

/**
 * The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.
 * @member {String} id
 */
MediationGroupMediationGroupLine.prototype['id'] = undefined;

/**
 * The status of the mediation group line. Only enabled mediation group lines will be served.
 * @member {module:model/MediationGroupMediationGroupLine.StateEnum} state
 */
MediationGroupMediationGroupLine.prototype['state'] = undefined;





/**
 * Allowed values for the <code>cpmMode</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroupMediationGroupLine['CpmModeEnum'] = {

    /**
     * value: "CPM_MODE_UNSPECIFIED"
     * @const
     */
    "CPM_MODE_UNSPECIFIED": "CPM_MODE_UNSPECIFIED",

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "MANUAL"
     * @const
     */
    "MANUAL": "MANUAL",

    /**
     * value: "ANO"
     * @const
     */
    "ANO": "ANO"
};


/**
 * Allowed values for the <code>experimentVariant</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroupMediationGroupLine['ExperimentVariantEnum'] = {

    /**
     * value: "VARIANT_UNSPECIFIED"
     * @const
     */
    "VARIANT_UNSPECIFIED": "VARIANT_UNSPECIFIED",

    /**
     * value: "VARIANT_A"
     * @const
     */
    "VARIANT_A": "VARIANT_A",

    /**
     * value: "VARIANT_B"
     * @const
     */
    "VARIANT_B": "VARIANT_B",

    /**
     * value: "ORIGINAL"
     * @const
     */
    "ORIGINAL": "ORIGINAL"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroupMediationGroupLine['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED"
};



export default MediationGroupMediationGroupLine;

