/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediationGroupMediationGroupLine from './MediationGroupMediationGroupLine';
import MediationGroupTargeting from './MediationGroupTargeting';

/**
 * The MediationGroup model module.
 * @module model/MediationGroup
 * @version v1beta
 */
class MediationGroup {
    /**
     * Constructs a new <code>MediationGroup</code>.
     * Describes an AdMob mediation group.
     * @alias module:model/MediationGroup
     */
    constructor() { 
        
        MediationGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediationGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediationGroup} obj Optional instance to populate.
     * @return {module:model/MediationGroup} The populated <code>MediationGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediationGroup();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('mediationAbExperimentState')) {
                obj['mediationAbExperimentState'] = ApiClient.convertToType(data['mediationAbExperimentState'], 'String');
            }
            if (data.hasOwnProperty('mediationGroupId')) {
                obj['mediationGroupId'] = ApiClient.convertToType(data['mediationGroupId'], 'String');
            }
            if (data.hasOwnProperty('mediationGroupLines')) {
                obj['mediationGroupLines'] = ApiClient.convertToType(data['mediationGroupLines'], {'String': MediationGroupMediationGroupLine});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('targeting')) {
                obj['targeting'] = MediationGroupTargeting.constructFromObject(data['targeting']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediationGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediationGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['mediationAbExperimentState'] && !(typeof data['mediationAbExperimentState'] === 'string' || data['mediationAbExperimentState'] instanceof String)) {
            throw new Error("Expected the field `mediationAbExperimentState` to be a primitive type in the JSON string but got " + data['mediationAbExperimentState']);
        }
        // ensure the json data is a string
        if (data['mediationGroupId'] && !(typeof data['mediationGroupId'] === 'string' || data['mediationGroupId'] instanceof String)) {
            throw new Error("Expected the field `mediationGroupId` to be a primitive type in the JSON string but got " + data['mediationGroupId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `targeting`
        if (data['targeting']) { // data not null
          MediationGroupTargeting.validateJSON(data['targeting']);
        }

        return true;
    }


}



/**
 * User provided name for the mediation group. The maximum length allowed is 120 characters.
 * @member {String} displayName
 */
MediationGroup.prototype['displayName'] = undefined;

/**
 * Output only. The state of the mediation a/b experiment that belongs to this mediation group.
 * @member {module:model/MediationGroup.MediationAbExperimentStateEnum} mediationAbExperimentState
 */
MediationGroup.prototype['mediationAbExperimentState'] = undefined;

/**
 * The ID of the mediation group. Example: \"0123456789\". This is a read only property.
 * @member {String} mediationGroupId
 */
MediationGroup.prototype['mediationGroupId'] = undefined;

/**
 * The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.
 * @member {Object.<String, module:model/MediationGroupMediationGroupLine>} mediationGroupLines
 */
MediationGroup.prototype['mediationGroupLines'] = undefined;

/**
 * Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789
 * @member {String} name
 */
MediationGroup.prototype['name'] = undefined;

/**
 * The status of the mediation group. Only enabled mediation groups will be served.
 * @member {module:model/MediationGroup.StateEnum} state
 */
MediationGroup.prototype['state'] = undefined;

/**
 * @member {module:model/MediationGroupTargeting} targeting
 */
MediationGroup.prototype['targeting'] = undefined;





/**
 * Allowed values for the <code>mediationAbExperimentState</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroup['MediationAbExperimentStateEnum'] = {

    /**
     * value: "EXPERIMENT_STATE_UNSPECIFIED"
     * @const
     */
    "EXPERIMENT_STATE_UNSPECIFIED": "EXPERIMENT_STATE_UNSPECIFIED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "NOT_RUNNING"
     * @const
     */
    "NOT_RUNNING": "NOT_RUNNING"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MediationGroup['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED"
};



export default MediationGroup;

