/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdapterAdapterConfigMetadata from './AdapterAdapterConfigMetadata';

/**
 * The Adapter model module.
 * @module model/Adapter
 * @version v1beta
 */
class Adapter {
    /**
     * Constructs a new <code>Adapter</code>.
     * Describes adapters supported by each mediation ad source. Adapters correspond to a specific SDK implementation of the ad source, and are each associated with a single platform and a list of supported ad unit formats. Adapters may also require setting some configurations to perform ad requests. Configurations can be specified in the AdUnitMapping by setting the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations) key/value pairs. For example, the ad_unit_configurations can be used to pass various IDs to the adapter&#39;s third-party SDK.
     * @alias module:model/Adapter
     */
    constructor() { 
        
        Adapter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Adapter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Adapter} obj Optional instance to populate.
     * @return {module:model/Adapter} The populated <code>Adapter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Adapter();

            if (data.hasOwnProperty('adapterConfigMetadata')) {
                obj['adapterConfigMetadata'] = ApiClient.convertToType(data['adapterConfigMetadata'], [AdapterAdapterConfigMetadata]);
            }
            if (data.hasOwnProperty('adapterId')) {
                obj['adapterId'] = ApiClient.convertToType(data['adapterId'], 'String');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Adapter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Adapter</code>.
     */
    static validateJSON(data) {
        if (data['adapterConfigMetadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['adapterConfigMetadata'])) {
                throw new Error("Expected the field `adapterConfigMetadata` to be an array in the JSON data but got " + data['adapterConfigMetadata']);
            }
            // validate the optional field `adapterConfigMetadata` (array)
            for (const item of data['adapterConfigMetadata']) {
                AdapterAdapterConfigMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['adapterId'] && !(typeof data['adapterId'] === 'string' || data['adapterId'] instanceof String)) {
            throw new Error("Expected the field `adapterId` to be a primitive type in the JSON string but got " + data['adapterId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['formats'])) {
            throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Output only. Configuration metadata associated with this adapter.
 * @member {Array.<module:model/AdapterAdapterConfigMetadata>} adapterConfigMetadata
 */
Adapter.prototype['adapterConfigMetadata'] = undefined;

/**
 * Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).
 * @member {String} adapterId
 */
Adapter.prototype['adapterId'] = undefined;

/**
 * Output only. Indicates the formats of the ad units supported by this adapter.
 * @member {Array.<String>} formats
 */
Adapter.prototype['formats'] = undefined;

/**
 * Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.
 * @member {String} name
 */
Adapter.prototype['name'] = undefined;

/**
 * Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE
 * @member {String} platform
 */
Adapter.prototype['platform'] = undefined;

/**
 * Output only. The display name of this adapter.
 * @member {String} title
 */
Adapter.prototype['title'] = undefined;






export default Adapter;

