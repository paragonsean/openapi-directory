/**
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediationAbExperimentExperimentMediationLine from './MediationAbExperimentExperimentMediationLine';

/**
 * The MediationAbExperiment model module.
 * @module model/MediationAbExperiment
 * @version v1beta
 */
class MediationAbExperiment {
    /**
     * Constructs a new <code>MediationAbExperiment</code>.
     * The mediation A/B experiment.
     * @alias module:model/MediationAbExperiment
     */
    constructor() { 
        
        MediationAbExperiment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediationAbExperiment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediationAbExperiment} obj Optional instance to populate.
     * @return {module:model/MediationAbExperiment} The populated <code>MediationAbExperiment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediationAbExperiment();

            if (data.hasOwnProperty('controlMediationLines')) {
                obj['controlMediationLines'] = ApiClient.convertToType(data['controlMediationLines'], [MediationAbExperimentExperimentMediationLine]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('experimentId')) {
                obj['experimentId'] = ApiClient.convertToType(data['experimentId'], 'String');
            }
            if (data.hasOwnProperty('mediationGroupId')) {
                obj['mediationGroupId'] = ApiClient.convertToType(data['mediationGroupId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('treatmentMediationLines')) {
                obj['treatmentMediationLines'] = ApiClient.convertToType(data['treatmentMediationLines'], [MediationAbExperimentExperimentMediationLine]);
            }
            if (data.hasOwnProperty('treatmentTrafficPercentage')) {
                obj['treatmentTrafficPercentage'] = ApiClient.convertToType(data['treatmentTrafficPercentage'], 'String');
            }
            if (data.hasOwnProperty('variantLeader')) {
                obj['variantLeader'] = ApiClient.convertToType(data['variantLeader'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediationAbExperiment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediationAbExperiment</code>.
     */
    static validateJSON(data) {
        if (data['controlMediationLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['controlMediationLines'])) {
                throw new Error("Expected the field `controlMediationLines` to be an array in the JSON data but got " + data['controlMediationLines']);
            }
            // validate the optional field `controlMediationLines` (array)
            for (const item of data['controlMediationLines']) {
                MediationAbExperimentExperimentMediationLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['experimentId'] && !(typeof data['experimentId'] === 'string' || data['experimentId'] instanceof String)) {
            throw new Error("Expected the field `experimentId` to be a primitive type in the JSON string but got " + data['experimentId']);
        }
        // ensure the json data is a string
        if (data['mediationGroupId'] && !(typeof data['mediationGroupId'] === 'string' || data['mediationGroupId'] instanceof String)) {
            throw new Error("Expected the field `mediationGroupId` to be a primitive type in the JSON string but got " + data['mediationGroupId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['treatmentMediationLines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['treatmentMediationLines'])) {
                throw new Error("Expected the field `treatmentMediationLines` to be an array in the JSON data but got " + data['treatmentMediationLines']);
            }
            // validate the optional field `treatmentMediationLines` (array)
            for (const item of data['treatmentMediationLines']) {
                MediationAbExperimentExperimentMediationLine.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['treatmentTrafficPercentage'] && !(typeof data['treatmentTrafficPercentage'] === 'string' || data['treatmentTrafficPercentage'] instanceof String)) {
            throw new Error("Expected the field `treatmentTrafficPercentage` to be a primitive type in the JSON string but got " + data['treatmentTrafficPercentage']);
        }
        // ensure the json data is a string
        if (data['variantLeader'] && !(typeof data['variantLeader'] === 'string' || data['variantLeader'] instanceof String)) {
            throw new Error("Expected the field `variantLeader` to be a primitive type in the JSON string but got " + data['variantLeader']);
        }

        return true;
    }


}



/**
 * Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.
 * @member {Array.<module:model/MediationAbExperimentExperimentMediationLine>} controlMediationLines
 */
MediationAbExperiment.prototype['controlMediationLines'] = undefined;

/**
 * The display name for the mediation A/B experiment.
 * @member {String} displayName
 */
MediationAbExperiment.prototype['displayName'] = undefined;

/**
 * Output only. The time at which the experiment was ended or target to end (in UTC).
 * @member {String} endTime
 */
MediationAbExperiment.prototype['endTime'] = undefined;

/**
 * Output only. Unique identifier for the mediation A/B experiment. It is an output only property.
 * @member {String} experimentId
 */
MediationAbExperiment.prototype['experimentId'] = undefined;

/**
 * Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.
 * @member {String} mediationGroupId
 */
MediationAbExperiment.prototype['mediationGroupId'] = undefined;

/**
 * Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345
 * @member {String} name
 */
MediationAbExperiment.prototype['name'] = undefined;

/**
 * Output only. The time at which the experiment was started (in UTC).
 * @member {String} startTime
 */
MediationAbExperiment.prototype['startTime'] = undefined;

/**
 * Output only. The state of the experiment. It is an output only field.
 * @member {module:model/MediationAbExperiment.StateEnum} state
 */
MediationAbExperiment.prototype['state'] = undefined;

/**
 * The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.
 * @member {Array.<module:model/MediationAbExperimentExperimentMediationLine>} treatmentMediationLines
 */
MediationAbExperiment.prototype['treatmentMediationLines'] = undefined;

/**
 * The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.
 * @member {String} treatmentTrafficPercentage
 */
MediationAbExperiment.prototype['treatmentTrafficPercentage'] = undefined;

/**
 * Output only. The variant leader for the experiment according to some key metrics.
 * @member {module:model/MediationAbExperiment.VariantLeaderEnum} variantLeader
 */
MediationAbExperiment.prototype['variantLeader'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MediationAbExperiment['StateEnum'] = {

    /**
     * value: "EXPERIMENT_STATE_UNSPECIFIED"
     * @const
     */
    "EXPERIMENT_STATE_UNSPECIFIED": "EXPERIMENT_STATE_UNSPECIFIED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "ENDED"
     * @const
     */
    "ENDED": "ENDED"
};


/**
 * Allowed values for the <code>variantLeader</code> property.
 * @enum {String}
 * @readonly
 */
MediationAbExperiment['VariantLeaderEnum'] = {

    /**
     * value: "VARIANT_LEADER_UNSPECIFIED"
     * @const
     */
    "VARIANT_LEADER_UNSPECIFIED": "VARIANT_LEADER_UNSPECIFIED",

    /**
     * value: "CONTROL"
     * @const
     */
    "CONTROL": "CONTROL",

    /**
     * value: "TREATMENT"
     * @const
     */
    "TREATMENT": "TREATMENT",

    /**
     * value: "INSUFFICIENT_DATA"
     * @const
     */
    "INSUFFICIENT_DATA": "INSUFFICIENT_DATA",

    /**
     * value: "TOO_EARLY_TO_CALL"
     * @const
     */
    "TOO_EARLY_TO_CALL": "TOO_EARLY_TO_CALL",

    /**
     * value: "NO_VARIANT_LEADER"
     * @const
     */
    "NO_VARIANT_LEADER": "NO_VARIANT_LEADER"
};



export default MediationAbExperiment;

