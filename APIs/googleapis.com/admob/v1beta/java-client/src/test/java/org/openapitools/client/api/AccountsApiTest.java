/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdUnit;
import org.openapitools.client.model.AdUnitMapping;
import org.openapitools.client.model.App;
import org.openapitools.client.model.BatchCreateAdUnitMappingsRequest;
import org.openapitools.client.model.BatchCreateAdUnitMappingsResponse;
import org.openapitools.client.model.GenerateCampaignReportRequest;
import org.openapitools.client.model.GenerateCampaignReportResponse;
import org.openapitools.client.model.GenerateMediationReportRequest;
import org.openapitools.client.model.GenerateMediationReportResponse;
import org.openapitools.client.model.GenerateNetworkReportRequest;
import org.openapitools.client.model.GenerateNetworkReportResponse;
import org.openapitools.client.model.ListAdSourcesResponse;
import org.openapitools.client.model.ListAdUnitMappingsResponse;
import org.openapitools.client.model.ListAdUnitsResponse;
import org.openapitools.client.model.ListAdaptersResponse;
import org.openapitools.client.model.ListAppsResponse;
import org.openapitools.client.model.ListMediationGroupsResponse;
import org.openapitools.client.model.ListPublisherAccountsResponse;
import org.openapitools.client.model.MediationAbExperiment;
import org.openapitools.client.model.MediationGroup;
import org.openapitools.client.model.PublisherAccount;
import org.openapitools.client.model.StopMediationAbExperimentRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * List the adapters of the ad source.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdSourcesAdaptersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdaptersResponse response = api.admobAccountsAdSourcesAdaptersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List the ad sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdSourcesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdSourcesResponse response = api.admobAccountsAdSourcesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Batch create the ad unit mappings under the specific AdMob account. The maximum allowed batch size is 100. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdUnitMappingsBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchCreateAdUnitMappingsRequest batchCreateAdUnitMappingsRequest = null;
        BatchCreateAdUnitMappingsResponse response = api.admobAccountsAdUnitMappingsBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchCreateAdUnitMappingsRequest);
        // TODO: test validations
    }

    /**
     * Create an ad unit mapping under the specific AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdUnitsAdUnitMappingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AdUnitMapping adUnitMapping = null;
        AdUnitMapping response = api.admobAccountsAdUnitsAdUnitMappingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, adUnitMapping);
        // TODO: test validations
    }

    /**
     * List ad unit mappings under the specified AdMob account and ad unit. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdUnitsAdUnitMappingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdUnitMappingsResponse response = api.admobAccountsAdUnitsAdUnitMappingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an ad unit under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdUnitsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AdUnit adUnit = null;
        AdUnit response = api.admobAccountsAdUnitsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, adUnit);
        // TODO: test validations
    }

    /**
     * List the ad units under the specified AdMob account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAdUnitsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAdUnitsResponse response = api.admobAccountsAdUnitsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an app under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAppsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        App app = null;
        App response = api.admobAccountsAppsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, app);
        // TODO: test validations
    }

    /**
     * List the apps under the specified AdMob account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsAppsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAppsResponse response = api.admobAccountsAppsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Generates Campaign Report based on provided specifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsCampaignReportGenerateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateCampaignReportRequest generateCampaignReportRequest = null;
        GenerateCampaignReportResponse response = api.admobAccountsCampaignReportGenerate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateCampaignReportRequest);
        // TODO: test validations
    }

    /**
     * Gets information about the specified AdMob publisher account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PublisherAccount response = api.admobAccountsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPublisherAccountsResponse response = api.admobAccountsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create a mediation group under the specific AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationGroupsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MediationGroup mediationGroup = null;
        MediationGroup response = api.admobAccountsMediationGroupsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, mediationGroup);
        // TODO: test validations
    }

    /**
     * List mediation groups under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMediationGroupsResponse response = api.admobAccountsMediationGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create an A/B testing experiment for a specified AdMob account and a mediation group. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationGroupsMediationAbExperimentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MediationAbExperiment mediationAbExperiment = null;
        MediationAbExperiment response = api.admobAccountsMediationGroupsMediationAbExperimentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, mediationAbExperiment);
        // TODO: test validations
    }

    /**
     * Stop the mediation A/B experiment and choose a variant. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationGroupsMediationAbExperimentsStopTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StopMediationAbExperimentRequest stopMediationAbExperimentRequest = null;
        MediationAbExperiment response = api.admobAccountsMediationGroupsMediationAbExperimentsStop(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, stopMediationAbExperimentRequest);
        // TODO: test validations
    }

    /**
     * Update the specified mediation group under the specified AdMob account. This method has limited access. If you see a 403 permission denied error, please reach out to your account manager for access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationGroupsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        MediationGroup mediationGroup = null;
        MediationGroup response = api.admobAccountsMediationGroupsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, mediationGroup);
        // TODO: test validations
    }

    /**
     * Generates an AdMob mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsMediationReportGenerateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateMediationReportRequest generateMediationReportRequest = null;
        GenerateMediationReportResponse response = api.admobAccountsMediationReportGenerate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateMediationReportRequest);
        // TODO: test validations
    }

    /**
     * Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void admobAccountsNetworkReportGenerateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateNetworkReportRequest generateNetworkReportRequest = null;
        GenerateNetworkReportResponse response = api.admobAccountsNetworkReportGenerate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateNetworkReportRequest);
        // TODO: test validations
    }

}
