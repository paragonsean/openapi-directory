/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRange;
import org.openapitools.client.model.LocalizationSettings;
import org.openapitools.client.model.NetworkReportSpecDimensionFilter;
import org.openapitools.client.model.NetworkReportSpecSortCondition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the &#39;US&#39; and &#39;CN&#39; countries can look like the following example: { &#39;date_range&#39;: { &#39;start_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 1}, &#39;end_date&#39;: {&#39;year&#39;: 2021, &#39;month&#39;: 9, &#39;day&#39;: 30} }, &#39;dimensions&#39;: [&#39;DATE&#39;, &#39;APP&#39;, &#39;COUNTRY&#39;], &#39;metrics&#39;: [&#39;CLICKS&#39;, &#39;ESTIMATED_EARNINGS&#39;], &#39;dimension_filters&#39;: [ { &#39;dimension&#39;: &#39;COUNTRY&#39;, &#39;matches_any&#39;: {&#39;values&#39;: [{&#39;value&#39;: &#39;US&#39;, &#39;value&#39;: &#39;CN&#39;}]} } ], &#39;sort_conditions&#39;: [ {&#39;dimension&#39;:&#39;APP&#39;, order: &#39;ASCENDING&#39;}, {&#39;metric&#39;:&#39;CLICKS&#39;, order: &#39;DESCENDING&#39;} ], &#39;localization_settings&#39;: { &#39;currency_code&#39;: &#39;USD&#39;, &#39;language_code&#39;: &#39;en-US&#39; } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE &gt;&#x3D; &#39;2021-09-01&#39; AND DATE &lt;&#x3D; &#39;2021-09-30&#39; AND COUNTRY IN (&#39;US&#39;, &#39;CN&#39;) GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkReportSpec {
  public static final String SERIALIZED_NAME_DATE_RANGE = "dateRange";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private DateRange dateRange;

  public static final String SERIALIZED_NAME_DIMENSION_FILTERS = "dimensionFilters";
  @SerializedName(SERIALIZED_NAME_DIMENSION_FILTERS)
  private List<NetworkReportSpecDimensionFilter> dimensionFilters = new ArrayList<>();

  /**
   * Gets or Sets dimensions
   */
  @JsonAdapter(DimensionsEnum.Adapter.class)
  public enum DimensionsEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    DATE("DATE"),
    
    MONTH("MONTH"),
    
    WEEK("WEEK"),
    
    AD_UNIT("AD_UNIT"),
    
    APP("APP"),
    
    AD_TYPE("AD_TYPE"),
    
    COUNTRY("COUNTRY"),
    
    FORMAT("FORMAT"),
    
    PLATFORM("PLATFORM"),
    
    MOBILE_OS_VERSION("MOBILE_OS_VERSION"),
    
    GMA_SDK_VERSION("GMA_SDK_VERSION"),
    
    APP_VERSION_NAME("APP_VERSION_NAME"),
    
    SERVING_RESTRICTION("SERVING_RESTRICTION");

    private String value;

    DimensionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionsEnum fromValue(String value) {
      for (DimensionsEnum b : DimensionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DimensionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<DimensionsEnum> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALIZATION_SETTINGS = "localizationSettings";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION_SETTINGS)
  private LocalizationSettings localizationSettings;

  public static final String SERIALIZED_NAME_MAX_REPORT_ROWS = "maxReportRows";
  @SerializedName(SERIALIZED_NAME_MAX_REPORT_ROWS)
  private Integer maxReportRows;

  /**
   * Gets or Sets metrics
   */
  @JsonAdapter(MetricsEnum.Adapter.class)
  public enum MetricsEnum {
    METRIC_UNSPECIFIED("METRIC_UNSPECIFIED"),
    
    AD_REQUESTS("AD_REQUESTS"),
    
    CLICKS("CLICKS"),
    
    ESTIMATED_EARNINGS("ESTIMATED_EARNINGS"),
    
    IMPRESSIONS("IMPRESSIONS"),
    
    IMPRESSION_CTR("IMPRESSION_CTR"),
    
    IMPRESSION_RPM("IMPRESSION_RPM"),
    
    MATCHED_REQUESTS("MATCHED_REQUESTS"),
    
    MATCH_RATE("MATCH_RATE"),
    
    SHOW_RATE("SHOW_RATE");

    private String value;

    MetricsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricsEnum fromValue(String value) {
      for (MetricsEnum b : MetricsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricsEnum> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT_CONDITIONS = "sortConditions";
  @SerializedName(SERIALIZED_NAME_SORT_CONDITIONS)
  private List<NetworkReportSpecSortCondition> sortConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public NetworkReportSpec() {
  }

  public NetworkReportSpec dateRange(DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

  /**
   * Get dateRange
   * @return dateRange
   */
  @javax.annotation.Nullable
  public DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public NetworkReportSpec dimensionFilters(List<NetworkReportSpecDimensionFilter> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
    return this;
  }

  public NetworkReportSpec addDimensionFiltersItem(NetworkReportSpecDimensionFilter dimensionFiltersItem) {
    if (this.dimensionFilters == null) {
      this.dimensionFilters = new ArrayList<>();
    }
    this.dimensionFilters.add(dimensionFiltersItem);
    return this;
  }

  /**
   * Describes which report rows to match based on their dimension values.
   * @return dimensionFilters
   */
  @javax.annotation.Nullable
  public List<NetworkReportSpecDimensionFilter> getDimensionFilters() {
    return dimensionFilters;
  }

  public void setDimensionFilters(List<NetworkReportSpecDimensionFilter> dimensionFilters) {
    this.dimensionFilters = dimensionFilters;
  }


  public NetworkReportSpec dimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public NetworkReportSpec addDimensionsItem(DimensionsEnum dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<DimensionsEnum> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<DimensionsEnum> dimensions) {
    this.dimensions = dimensions;
  }


  public NetworkReportSpec localizationSettings(LocalizationSettings localizationSettings) {
    this.localizationSettings = localizationSettings;
    return this;
  }

  /**
   * Get localizationSettings
   * @return localizationSettings
   */
  @javax.annotation.Nullable
  public LocalizationSettings getLocalizationSettings() {
    return localizationSettings;
  }

  public void setLocalizationSettings(LocalizationSettings localizationSettings) {
    this.localizationSettings = localizationSettings;
  }


  public NetworkReportSpec maxReportRows(Integer maxReportRows) {
    this.maxReportRows = maxReportRows;
    return this;
  }

  /**
   * Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.
   * @return maxReportRows
   */
  @javax.annotation.Nullable
  public Integer getMaxReportRows() {
    return maxReportRows;
  }

  public void setMaxReportRows(Integer maxReportRows) {
    this.maxReportRows = maxReportRows;
  }


  public NetworkReportSpec metrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
    return this;
  }

  public NetworkReportSpec addMetricsItem(MetricsEnum metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * List of metrics of the report. A report must specify at least one metric.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<MetricsEnum> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<MetricsEnum> metrics) {
    this.metrics = metrics;
  }


  public NetworkReportSpec sortConditions(List<NetworkReportSpecSortCondition> sortConditions) {
    this.sortConditions = sortConditions;
    return this;
  }

  public NetworkReportSpec addSortConditionsItem(NetworkReportSpecSortCondition sortConditionsItem) {
    if (this.sortConditions == null) {
      this.sortConditions = new ArrayList<>();
    }
    this.sortConditions.add(sortConditionsItem);
    return this;
  }

  /**
   * Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.
   * @return sortConditions
   */
  @javax.annotation.Nullable
  public List<NetworkReportSpecSortCondition> getSortConditions() {
    return sortConditions;
  }

  public void setSortConditions(List<NetworkReportSpecSortCondition> sortConditions) {
    this.sortConditions = sortConditions;
  }


  public NetworkReportSpec timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * A report time zone. Accepts an IANA TZ name values, such as \&quot;America/Los_Angeles.\&quot; If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The \&quot;America/Los_Angeles\&quot; is the only supported value at the moment.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkReportSpec networkReportSpec = (NetworkReportSpec) o;
    return Objects.equals(this.dateRange, networkReportSpec.dateRange) &&
        Objects.equals(this.dimensionFilters, networkReportSpec.dimensionFilters) &&
        Objects.equals(this.dimensions, networkReportSpec.dimensions) &&
        Objects.equals(this.localizationSettings, networkReportSpec.localizationSettings) &&
        Objects.equals(this.maxReportRows, networkReportSpec.maxReportRows) &&
        Objects.equals(this.metrics, networkReportSpec.metrics) &&
        Objects.equals(this.sortConditions, networkReportSpec.sortConditions) &&
        Objects.equals(this.timeZone, networkReportSpec.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateRange, dimensionFilters, dimensions, localizationSettings, maxReportRows, metrics, sortConditions, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkReportSpec {\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    dimensionFilters: ").append(toIndentedString(dimensionFilters)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    localizationSettings: ").append(toIndentedString(localizationSettings)).append("\n");
    sb.append("    maxReportRows: ").append(toIndentedString(maxReportRows)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    sortConditions: ").append(toIndentedString(sortConditions)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateRange");
    openapiFields.add("dimensionFilters");
    openapiFields.add("dimensions");
    openapiFields.add("localizationSettings");
    openapiFields.add("maxReportRows");
    openapiFields.add("metrics");
    openapiFields.add("sortConditions");
    openapiFields.add("timeZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkReportSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkReportSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkReportSpec is not found in the empty JSON string", NetworkReportSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkReportSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkReportSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dateRange`
      if (jsonObj.get("dateRange") != null && !jsonObj.get("dateRange").isJsonNull()) {
        DateRange.validateJsonElement(jsonObj.get("dateRange"));
      }
      if (jsonObj.get("dimensionFilters") != null && !jsonObj.get("dimensionFilters").isJsonNull()) {
        JsonArray jsonArraydimensionFilters = jsonObj.getAsJsonArray("dimensionFilters");
        if (jsonArraydimensionFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensionFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensionFilters` to be an array in the JSON string but got `%s`", jsonObj.get("dimensionFilters").toString()));
          }

          // validate the optional field `dimensionFilters` (array)
          for (int i = 0; i < jsonArraydimensionFilters.size(); i++) {
            NetworkReportSpecDimensionFilter.validateJsonElement(jsonArraydimensionFilters.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull() && !jsonObj.get("dimensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
      }
      // validate the optional field `localizationSettings`
      if (jsonObj.get("localizationSettings") != null && !jsonObj.get("localizationSettings").isJsonNull()) {
        LocalizationSettings.validateJsonElement(jsonObj.get("localizationSettings"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull() && !jsonObj.get("metrics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
      }
      if (jsonObj.get("sortConditions") != null && !jsonObj.get("sortConditions").isJsonNull()) {
        JsonArray jsonArraysortConditions = jsonObj.getAsJsonArray("sortConditions");
        if (jsonArraysortConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sortConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sortConditions` to be an array in the JSON string but got `%s`", jsonObj.get("sortConditions").toString()));
          }

          // validate the optional field `sortConditions` (array)
          for (int i = 0; i < jsonArraysortConditions.size(); i++) {
            NetworkReportSpecSortCondition.validateJsonElement(jsonArraysortConditions.get(i));
          };
        }
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkReportSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkReportSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkReportSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkReportSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkReportSpec>() {
           @Override
           public void write(JsonWriter out, NetworkReportSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkReportSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkReportSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkReportSpec
   * @throws IOException if the JSON string is invalid with respect to NetworkReportSpec
   */
  public static NetworkReportSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkReportSpec.class);
  }

  /**
   * Convert an instance of NetworkReportSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

