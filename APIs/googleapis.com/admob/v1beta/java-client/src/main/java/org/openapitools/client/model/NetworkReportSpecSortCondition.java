/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sorting direction to be applied on a dimension or a metric.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkReportSpecSortCondition {
  /**
   * Sort by the specified dimension.
   */
  @JsonAdapter(DimensionEnum.Adapter.class)
  public enum DimensionEnum {
    DIMENSION_UNSPECIFIED("DIMENSION_UNSPECIFIED"),
    
    DATE("DATE"),
    
    MONTH("MONTH"),
    
    WEEK("WEEK"),
    
    AD_UNIT("AD_UNIT"),
    
    APP("APP"),
    
    AD_TYPE("AD_TYPE"),
    
    COUNTRY("COUNTRY"),
    
    FORMAT("FORMAT"),
    
    PLATFORM("PLATFORM"),
    
    MOBILE_OS_VERSION("MOBILE_OS_VERSION"),
    
    GMA_SDK_VERSION("GMA_SDK_VERSION"),
    
    APP_VERSION_NAME("APP_VERSION_NAME"),
    
    SERVING_RESTRICTION("SERVING_RESTRICTION");

    private String value;

    DimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DimensionEnum fromValue(String value) {
      for (DimensionEnum b : DimensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DimensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DimensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DIMENSION = "dimension";
  @SerializedName(SERIALIZED_NAME_DIMENSION)
  private DimensionEnum dimension;

  /**
   * Sort by the specified metric.
   */
  @JsonAdapter(MetricEnum.Adapter.class)
  public enum MetricEnum {
    METRIC_UNSPECIFIED("METRIC_UNSPECIFIED"),
    
    AD_REQUESTS("AD_REQUESTS"),
    
    CLICKS("CLICKS"),
    
    ESTIMATED_EARNINGS("ESTIMATED_EARNINGS"),
    
    IMPRESSIONS("IMPRESSIONS"),
    
    IMPRESSION_CTR("IMPRESSION_CTR"),
    
    IMPRESSION_RPM("IMPRESSION_RPM"),
    
    MATCHED_REQUESTS("MATCHED_REQUESTS"),
    
    MATCH_RATE("MATCH_RATE"),
    
    SHOW_RATE("SHOW_RATE");

    private String value;

    MetricEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetricEnum fromValue(String value) {
      for (MetricEnum b : MetricEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetricEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetricEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetricEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetricEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetricEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private MetricEnum metric;

  /**
   * Sorting order of the dimension or metric.
   */
  @JsonAdapter(OrderEnum.Adapter.class)
  public enum OrderEnum {
    SORT_ORDER_UNSPECIFIED("SORT_ORDER_UNSPECIFIED"),
    
    ASCENDING("ASCENDING"),
    
    DESCENDING("DESCENDING");

    private String value;

    OrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderEnum fromValue(String value) {
      for (OrderEnum b : OrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private OrderEnum order;

  public NetworkReportSpecSortCondition() {
  }

  public NetworkReportSpecSortCondition dimension(DimensionEnum dimension) {
    this.dimension = dimension;
    return this;
  }

  /**
   * Sort by the specified dimension.
   * @return dimension
   */
  @javax.annotation.Nullable
  public DimensionEnum getDimension() {
    return dimension;
  }

  public void setDimension(DimensionEnum dimension) {
    this.dimension = dimension;
  }


  public NetworkReportSpecSortCondition metric(MetricEnum metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Sort by the specified metric.
   * @return metric
   */
  @javax.annotation.Nullable
  public MetricEnum getMetric() {
    return metric;
  }

  public void setMetric(MetricEnum metric) {
    this.metric = metric;
  }


  public NetworkReportSpecSortCondition order(OrderEnum order) {
    this.order = order;
    return this;
  }

  /**
   * Sorting order of the dimension or metric.
   * @return order
   */
  @javax.annotation.Nullable
  public OrderEnum getOrder() {
    return order;
  }

  public void setOrder(OrderEnum order) {
    this.order = order;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkReportSpecSortCondition networkReportSpecSortCondition = (NetworkReportSpecSortCondition) o;
    return Objects.equals(this.dimension, networkReportSpecSortCondition.dimension) &&
        Objects.equals(this.metric, networkReportSpecSortCondition.metric) &&
        Objects.equals(this.order, networkReportSpecSortCondition.order);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimension, metric, order);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkReportSpecSortCondition {\n");
    sb.append("    dimension: ").append(toIndentedString(dimension)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dimension");
    openapiFields.add("metric");
    openapiFields.add("order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkReportSpecSortCondition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkReportSpecSortCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkReportSpecSortCondition is not found in the empty JSON string", NetworkReportSpecSortCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkReportSpecSortCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkReportSpecSortCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) && !jsonObj.get("dimension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dimension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dimension").toString()));
      }
      // validate the optional field `dimension`
      if (jsonObj.get("dimension") != null && !jsonObj.get("dimension").isJsonNull()) {
        DimensionEnum.validateJsonElement(jsonObj.get("dimension"));
      }
      if ((jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) && !jsonObj.get("metric").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metric` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metric").toString()));
      }
      // validate the optional field `metric`
      if (jsonObj.get("metric") != null && !jsonObj.get("metric").isJsonNull()) {
        MetricEnum.validateJsonElement(jsonObj.get("metric"));
      }
      if ((jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) && !jsonObj.get("order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order").toString()));
      }
      // validate the optional field `order`
      if (jsonObj.get("order") != null && !jsonObj.get("order").isJsonNull()) {
        OrderEnum.validateJsonElement(jsonObj.get("order"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkReportSpecSortCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkReportSpecSortCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkReportSpecSortCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkReportSpecSortCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkReportSpecSortCondition>() {
           @Override
           public void write(JsonWriter out, NetworkReportSpecSortCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkReportSpecSortCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkReportSpecSortCondition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkReportSpecSortCondition
   * @throws IOException if the JSON string is invalid with respect to NetworkReportSpecSortCondition
   */
  public static NetworkReportSpecSortCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkReportSpecSortCondition.class);
  }

  /**
   * Convert an instance of NetworkReportSpecSortCondition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

