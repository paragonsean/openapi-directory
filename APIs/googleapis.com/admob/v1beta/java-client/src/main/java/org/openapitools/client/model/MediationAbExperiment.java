/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediationAbExperimentExperimentMediationLine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The mediation A/B experiment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediationAbExperiment {
  public static final String SERIALIZED_NAME_CONTROL_MEDIATION_LINES = "controlMediationLines";
  @SerializedName(SERIALIZED_NAME_CONTROL_MEDIATION_LINES)
  private List<MediationAbExperimentExperimentMediationLine> controlMediationLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_EXPERIMENT_ID = "experimentId";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_ID)
  private String experimentId;

  public static final String SERIALIZED_NAME_MEDIATION_GROUP_ID = "mediationGroupId";
  @SerializedName(SERIALIZED_NAME_MEDIATION_GROUP_ID)
  private String mediationGroupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * Output only. The state of the experiment. It is an output only field.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    EXPERIMENT_STATE_UNSPECIFIED("EXPERIMENT_STATE_UNSPECIFIED"),
    
    EXPIRED("EXPIRED"),
    
    RUNNING("RUNNING"),
    
    ENDED("ENDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TREATMENT_MEDIATION_LINES = "treatmentMediationLines";
  @SerializedName(SERIALIZED_NAME_TREATMENT_MEDIATION_LINES)
  private List<MediationAbExperimentExperimentMediationLine> treatmentMediationLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_TREATMENT_TRAFFIC_PERCENTAGE = "treatmentTrafficPercentage";
  @SerializedName(SERIALIZED_NAME_TREATMENT_TRAFFIC_PERCENTAGE)
  private String treatmentTrafficPercentage;

  /**
   * Output only. The variant leader for the experiment according to some key metrics.
   */
  @JsonAdapter(VariantLeaderEnum.Adapter.class)
  public enum VariantLeaderEnum {
    VARIANT_LEADER_UNSPECIFIED("VARIANT_LEADER_UNSPECIFIED"),
    
    CONTROL("CONTROL"),
    
    TREATMENT("TREATMENT"),
    
    INSUFFICIENT_DATA("INSUFFICIENT_DATA"),
    
    TOO_EARLY_TO_CALL("TOO_EARLY_TO_CALL"),
    
    NO_VARIANT_LEADER("NO_VARIANT_LEADER");

    private String value;

    VariantLeaderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariantLeaderEnum fromValue(String value) {
      for (VariantLeaderEnum b : VariantLeaderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariantLeaderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariantLeaderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariantLeaderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariantLeaderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VariantLeaderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIANT_LEADER = "variantLeader";
  @SerializedName(SERIALIZED_NAME_VARIANT_LEADER)
  private VariantLeaderEnum variantLeader;

  public MediationAbExperiment() {
  }

  public MediationAbExperiment(
     List<MediationAbExperimentExperimentMediationLine> controlMediationLines, 
     String endTime, 
     String experimentId, 
     String mediationGroupId, 
     String startTime, 
     StateEnum state, 
     VariantLeaderEnum variantLeader
  ) {
    this();
    this.controlMediationLines = controlMediationLines;
    this.endTime = endTime;
    this.experimentId = experimentId;
    this.mediationGroupId = mediationGroupId;
    this.startTime = startTime;
    this.state = state;
    this.variantLeader = variantLeader;
  }

  /**
   * Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.
   * @return controlMediationLines
   */
  @javax.annotation.Nullable
  public List<MediationAbExperimentExperimentMediationLine> getControlMediationLines() {
    return controlMediationLines;
  }



  public MediationAbExperiment displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name for the mediation A/B experiment.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The time at which the experiment was ended or target to end (in UTC).
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * Output only. Unique identifier for the mediation A/B experiment. It is an output only property.
   * @return experimentId
   */
  @javax.annotation.Nullable
  public String getExperimentId() {
    return experimentId;
  }



  /**
   * Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.
   * @return mediationGroupId
   */
  @javax.annotation.Nullable
  public String getMediationGroupId() {
    return mediationGroupId;
  }



  public MediationAbExperiment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The time at which the experiment was started (in UTC).
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }



  /**
   * Output only. The state of the experiment. It is an output only field.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public MediationAbExperiment treatmentMediationLines(List<MediationAbExperimentExperimentMediationLine> treatmentMediationLines) {
    this.treatmentMediationLines = treatmentMediationLines;
    return this;
  }

  public MediationAbExperiment addTreatmentMediationLinesItem(MediationAbExperimentExperimentMediationLine treatmentMediationLinesItem) {
    if (this.treatmentMediationLines == null) {
      this.treatmentMediationLines = new ArrayList<>();
    }
    this.treatmentMediationLines.add(treatmentMediationLinesItem);
    return this;
  }

  /**
   * The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.
   * @return treatmentMediationLines
   */
  @javax.annotation.Nullable
  public List<MediationAbExperimentExperimentMediationLine> getTreatmentMediationLines() {
    return treatmentMediationLines;
  }

  public void setTreatmentMediationLines(List<MediationAbExperimentExperimentMediationLine> treatmentMediationLines) {
    this.treatmentMediationLines = treatmentMediationLines;
  }


  public MediationAbExperiment treatmentTrafficPercentage(String treatmentTrafficPercentage) {
    this.treatmentTrafficPercentage = treatmentTrafficPercentage;
    return this;
  }

  /**
   * The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.
   * @return treatmentTrafficPercentage
   */
  @javax.annotation.Nullable
  public String getTreatmentTrafficPercentage() {
    return treatmentTrafficPercentage;
  }

  public void setTreatmentTrafficPercentage(String treatmentTrafficPercentage) {
    this.treatmentTrafficPercentage = treatmentTrafficPercentage;
  }


  /**
   * Output only. The variant leader for the experiment according to some key metrics.
   * @return variantLeader
   */
  @javax.annotation.Nullable
  public VariantLeaderEnum getVariantLeader() {
    return variantLeader;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediationAbExperiment mediationAbExperiment = (MediationAbExperiment) o;
    return Objects.equals(this.controlMediationLines, mediationAbExperiment.controlMediationLines) &&
        Objects.equals(this.displayName, mediationAbExperiment.displayName) &&
        Objects.equals(this.endTime, mediationAbExperiment.endTime) &&
        Objects.equals(this.experimentId, mediationAbExperiment.experimentId) &&
        Objects.equals(this.mediationGroupId, mediationAbExperiment.mediationGroupId) &&
        Objects.equals(this.name, mediationAbExperiment.name) &&
        Objects.equals(this.startTime, mediationAbExperiment.startTime) &&
        Objects.equals(this.state, mediationAbExperiment.state) &&
        Objects.equals(this.treatmentMediationLines, mediationAbExperiment.treatmentMediationLines) &&
        Objects.equals(this.treatmentTrafficPercentage, mediationAbExperiment.treatmentTrafficPercentage) &&
        Objects.equals(this.variantLeader, mediationAbExperiment.variantLeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlMediationLines, displayName, endTime, experimentId, mediationGroupId, name, startTime, state, treatmentMediationLines, treatmentTrafficPercentage, variantLeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediationAbExperiment {\n");
    sb.append("    controlMediationLines: ").append(toIndentedString(controlMediationLines)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    experimentId: ").append(toIndentedString(experimentId)).append("\n");
    sb.append("    mediationGroupId: ").append(toIndentedString(mediationGroupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    treatmentMediationLines: ").append(toIndentedString(treatmentMediationLines)).append("\n");
    sb.append("    treatmentTrafficPercentage: ").append(toIndentedString(treatmentTrafficPercentage)).append("\n");
    sb.append("    variantLeader: ").append(toIndentedString(variantLeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controlMediationLines");
    openapiFields.add("displayName");
    openapiFields.add("endTime");
    openapiFields.add("experimentId");
    openapiFields.add("mediationGroupId");
    openapiFields.add("name");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("treatmentMediationLines");
    openapiFields.add("treatmentTrafficPercentage");
    openapiFields.add("variantLeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediationAbExperiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediationAbExperiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediationAbExperiment is not found in the empty JSON string", MediationAbExperiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediationAbExperiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediationAbExperiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("controlMediationLines") != null && !jsonObj.get("controlMediationLines").isJsonNull()) {
        JsonArray jsonArraycontrolMediationLines = jsonObj.getAsJsonArray("controlMediationLines");
        if (jsonArraycontrolMediationLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("controlMediationLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `controlMediationLines` to be an array in the JSON string but got `%s`", jsonObj.get("controlMediationLines").toString()));
          }

          // validate the optional field `controlMediationLines` (array)
          for (int i = 0; i < jsonArraycontrolMediationLines.size(); i++) {
            MediationAbExperimentExperimentMediationLine.validateJsonElement(jsonArraycontrolMediationLines.get(i));
          };
        }
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("experimentId") != null && !jsonObj.get("experimentId").isJsonNull()) && !jsonObj.get("experimentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experimentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experimentId").toString()));
      }
      if ((jsonObj.get("mediationGroupId") != null && !jsonObj.get("mediationGroupId").isJsonNull()) && !jsonObj.get("mediationGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediationGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediationGroupId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("treatmentMediationLines") != null && !jsonObj.get("treatmentMediationLines").isJsonNull()) {
        JsonArray jsonArraytreatmentMediationLines = jsonObj.getAsJsonArray("treatmentMediationLines");
        if (jsonArraytreatmentMediationLines != null) {
          // ensure the json data is an array
          if (!jsonObj.get("treatmentMediationLines").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `treatmentMediationLines` to be an array in the JSON string but got `%s`", jsonObj.get("treatmentMediationLines").toString()));
          }

          // validate the optional field `treatmentMediationLines` (array)
          for (int i = 0; i < jsonArraytreatmentMediationLines.size(); i++) {
            MediationAbExperimentExperimentMediationLine.validateJsonElement(jsonArraytreatmentMediationLines.get(i));
          };
        }
      }
      if ((jsonObj.get("treatmentTrafficPercentage") != null && !jsonObj.get("treatmentTrafficPercentage").isJsonNull()) && !jsonObj.get("treatmentTrafficPercentage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatmentTrafficPercentage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("treatmentTrafficPercentage").toString()));
      }
      if ((jsonObj.get("variantLeader") != null && !jsonObj.get("variantLeader").isJsonNull()) && !jsonObj.get("variantLeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `variantLeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variantLeader").toString()));
      }
      // validate the optional field `variantLeader`
      if (jsonObj.get("variantLeader") != null && !jsonObj.get("variantLeader").isJsonNull()) {
        VariantLeaderEnum.validateJsonElement(jsonObj.get("variantLeader"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediationAbExperiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediationAbExperiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediationAbExperiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediationAbExperiment.class));

       return (TypeAdapter<T>) new TypeAdapter<MediationAbExperiment>() {
           @Override
           public void write(JsonWriter out, MediationAbExperiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediationAbExperiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediationAbExperiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediationAbExperiment
   * @throws IOException if the JSON string is invalid with respect to MediationAbExperiment
   */
  public static MediationAbExperiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediationAbExperiment.class);
  }

  /**
   * Convert an instance of MediationAbExperiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

