/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdapterAdapterConfigMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes adapters supported by each mediation ad source. Adapters correspond to a specific SDK implementation of the ad source, and are each associated with a single platform and a list of supported ad unit formats. Adapters may also require setting some configurations to perform ad requests. Configurations can be specified in the AdUnitMapping by setting the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations) key/value pairs. For example, the ad_unit_configurations can be used to pass various IDs to the adapter&#39;s third-party SDK.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Adapter {
  public static final String SERIALIZED_NAME_ADAPTER_CONFIG_METADATA = "adapterConfigMetadata";
  @SerializedName(SERIALIZED_NAME_ADAPTER_CONFIG_METADATA)
  private List<AdapterAdapterConfigMetadata> adapterConfigMetadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADAPTER_ID = "adapterId";
  @SerializedName(SERIALIZED_NAME_ADAPTER_ID)
  private String adapterId;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<String> formats = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Adapter() {
  }

  public Adapter(
     List<AdapterAdapterConfigMetadata> adapterConfigMetadata, 
     String adapterId, 
     List<String> formats, 
     String name, 
     String platform, 
     String title
  ) {
    this();
    this.adapterConfigMetadata = adapterConfigMetadata;
    this.adapterId = adapterId;
    this.formats = formats;
    this.name = name;
    this.platform = platform;
    this.title = title;
  }

  /**
   * Output only. Configuration metadata associated with this adapter.
   * @return adapterConfigMetadata
   */
  @javax.annotation.Nullable
  public List<AdapterAdapterConfigMetadata> getAdapterConfigMetadata() {
    return adapterConfigMetadata;
  }



  /**
   * Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).
   * @return adapterId
   */
  @javax.annotation.Nullable
  public String getAdapterId() {
    return adapterId;
  }



  /**
   * Output only. Indicates the formats of the ad units supported by this adapter.
   * @return formats
   */
  @javax.annotation.Nullable
  public List<String> getFormats() {
    return formats;
  }



  /**
   * Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }



  /**
   * Output only. The display name of this adapter.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Adapter adapter = (Adapter) o;
    return Objects.equals(this.adapterConfigMetadata, adapter.adapterConfigMetadata) &&
        Objects.equals(this.adapterId, adapter.adapterId) &&
        Objects.equals(this.formats, adapter.formats) &&
        Objects.equals(this.name, adapter.name) &&
        Objects.equals(this.platform, adapter.platform) &&
        Objects.equals(this.title, adapter.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adapterConfigMetadata, adapterId, formats, name, platform, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Adapter {\n");
    sb.append("    adapterConfigMetadata: ").append(toIndentedString(adapterConfigMetadata)).append("\n");
    sb.append("    adapterId: ").append(toIndentedString(adapterId)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adapterConfigMetadata");
    openapiFields.add("adapterId");
    openapiFields.add("formats");
    openapiFields.add("name");
    openapiFields.add("platform");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Adapter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Adapter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Adapter is not found in the empty JSON string", Adapter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Adapter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Adapter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("adapterConfigMetadata") != null && !jsonObj.get("adapterConfigMetadata").isJsonNull()) {
        JsonArray jsonArrayadapterConfigMetadata = jsonObj.getAsJsonArray("adapterConfigMetadata");
        if (jsonArrayadapterConfigMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("adapterConfigMetadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `adapterConfigMetadata` to be an array in the JSON string but got `%s`", jsonObj.get("adapterConfigMetadata").toString()));
          }

          // validate the optional field `adapterConfigMetadata` (array)
          for (int i = 0; i < jsonArrayadapterConfigMetadata.size(); i++) {
            AdapterAdapterConfigMetadata.validateJsonElement(jsonArrayadapterConfigMetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("adapterId") != null && !jsonObj.get("adapterId").isJsonNull()) && !jsonObj.get("adapterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adapterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adapterId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("formats") != null && !jsonObj.get("formats").isJsonNull() && !jsonObj.get("formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `formats` to be an array in the JSON string but got `%s`", jsonObj.get("formats").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Adapter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Adapter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Adapter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Adapter.class));

       return (TypeAdapter<T>) new TypeAdapter<Adapter>() {
           @Override
           public void write(JsonWriter out, Adapter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Adapter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Adapter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Adapter
   * @throws IOException if the JSON string is invalid with respect to Adapter
   */
  public static Adapter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Adapter.class);
  }

  /**
   * Convert an instance of Adapter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

