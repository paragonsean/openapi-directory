/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MediationGroupMediationGroupLine;
import org.openapitools.client.model.MediationGroupTargeting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an AdMob mediation group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediationGroup {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Output only. The state of the mediation a/b experiment that belongs to this mediation group.
   */
  @JsonAdapter(MediationAbExperimentStateEnum.Adapter.class)
  public enum MediationAbExperimentStateEnum {
    EXPERIMENT_STATE_UNSPECIFIED("EXPERIMENT_STATE_UNSPECIFIED"),
    
    RUNNING("RUNNING"),
    
    NOT_RUNNING("NOT_RUNNING");

    private String value;

    MediationAbExperimentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MediationAbExperimentStateEnum fromValue(String value) {
      for (MediationAbExperimentStateEnum b : MediationAbExperimentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MediationAbExperimentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MediationAbExperimentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MediationAbExperimentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MediationAbExperimentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MediationAbExperimentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDIATION_AB_EXPERIMENT_STATE = "mediationAbExperimentState";
  @SerializedName(SERIALIZED_NAME_MEDIATION_AB_EXPERIMENT_STATE)
  private MediationAbExperimentStateEnum mediationAbExperimentState;

  public static final String SERIALIZED_NAME_MEDIATION_GROUP_ID = "mediationGroupId";
  @SerializedName(SERIALIZED_NAME_MEDIATION_GROUP_ID)
  private String mediationGroupId;

  public static final String SERIALIZED_NAME_MEDIATION_GROUP_LINES = "mediationGroupLines";
  @SerializedName(SERIALIZED_NAME_MEDIATION_GROUP_LINES)
  private Map<String, MediationGroupMediationGroupLine> mediationGroupLines = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The status of the mediation group. Only enabled mediation groups will be served.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private MediationGroupTargeting targeting;

  public MediationGroup() {
  }

  public MediationGroup(
     MediationAbExperimentStateEnum mediationAbExperimentState
  ) {
    this();
    this.mediationAbExperimentState = mediationAbExperimentState;
  }

  public MediationGroup displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User provided name for the mediation group. The maximum length allowed is 120 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The state of the mediation a/b experiment that belongs to this mediation group.
   * @return mediationAbExperimentState
   */
  @javax.annotation.Nullable
  public MediationAbExperimentStateEnum getMediationAbExperimentState() {
    return mediationAbExperimentState;
  }



  public MediationGroup mediationGroupId(String mediationGroupId) {
    this.mediationGroupId = mediationGroupId;
    return this;
  }

  /**
   * The ID of the mediation group. Example: \&quot;0123456789\&quot;. This is a read only property.
   * @return mediationGroupId
   */
  @javax.annotation.Nullable
  public String getMediationGroupId() {
    return mediationGroupId;
  }

  public void setMediationGroupId(String mediationGroupId) {
    this.mediationGroupId = mediationGroupId;
  }


  public MediationGroup mediationGroupLines(Map<String, MediationGroupMediationGroupLine> mediationGroupLines) {
    this.mediationGroupLines = mediationGroupLines;
    return this;
  }

  public MediationGroup putMediationGroupLinesItem(String key, MediationGroupMediationGroupLine mediationGroupLinesItem) {
    if (this.mediationGroupLines == null) {
      this.mediationGroupLines = new HashMap<>();
    }
    this.mediationGroupLines.put(key, mediationGroupLinesItem);
    return this;
  }

  /**
   * The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.
   * @return mediationGroupLines
   */
  @javax.annotation.Nullable
  public Map<String, MediationGroupMediationGroupLine> getMediationGroupLines() {
    return mediationGroupLines;
  }

  public void setMediationGroupLines(Map<String, MediationGroupMediationGroupLine> mediationGroupLines) {
    this.mediationGroupLines = mediationGroupLines;
  }


  public MediationGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MediationGroup state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The status of the mediation group. Only enabled mediation groups will be served.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public MediationGroup targeting(MediationGroupTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public MediationGroupTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(MediationGroupTargeting targeting) {
    this.targeting = targeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediationGroup mediationGroup = (MediationGroup) o;
    return Objects.equals(this.displayName, mediationGroup.displayName) &&
        Objects.equals(this.mediationAbExperimentState, mediationGroup.mediationAbExperimentState) &&
        Objects.equals(this.mediationGroupId, mediationGroup.mediationGroupId) &&
        Objects.equals(this.mediationGroupLines, mediationGroup.mediationGroupLines) &&
        Objects.equals(this.name, mediationGroup.name) &&
        Objects.equals(this.state, mediationGroup.state) &&
        Objects.equals(this.targeting, mediationGroup.targeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, mediationAbExperimentState, mediationGroupId, mediationGroupLines, name, state, targeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediationGroup {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    mediationAbExperimentState: ").append(toIndentedString(mediationAbExperimentState)).append("\n");
    sb.append("    mediationGroupId: ").append(toIndentedString(mediationGroupId)).append("\n");
    sb.append("    mediationGroupLines: ").append(toIndentedString(mediationGroupLines)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("mediationAbExperimentState");
    openapiFields.add("mediationGroupId");
    openapiFields.add("mediationGroupLines");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("targeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediationGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediationGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediationGroup is not found in the empty JSON string", MediationGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediationGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediationGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("mediationAbExperimentState") != null && !jsonObj.get("mediationAbExperimentState").isJsonNull()) && !jsonObj.get("mediationAbExperimentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediationAbExperimentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediationAbExperimentState").toString()));
      }
      // validate the optional field `mediationAbExperimentState`
      if (jsonObj.get("mediationAbExperimentState") != null && !jsonObj.get("mediationAbExperimentState").isJsonNull()) {
        MediationAbExperimentStateEnum.validateJsonElement(jsonObj.get("mediationAbExperimentState"));
      }
      if ((jsonObj.get("mediationGroupId") != null && !jsonObj.get("mediationGroupId").isJsonNull()) && !jsonObj.get("mediationGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediationGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediationGroupId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        MediationGroupTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediationGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediationGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediationGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediationGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<MediationGroup>() {
           @Override
           public void write(JsonWriter out, MediationGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediationGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediationGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediationGroup
   * @throws IOException if the JSON string is invalid with respect to MediationGroup
   */
  public static MediationGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediationGroup.class);
  }

  /**
   * Convert an instance of MediationGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

