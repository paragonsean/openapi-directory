/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings for an ad network used by a mediation group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediationGroupMediationGroupLine {
  public static final String SERIALIZED_NAME_AD_SOURCE_ID = "adSourceId";
  @SerializedName(SERIALIZED_NAME_AD_SOURCE_ID)
  private String adSourceId;

  public static final String SERIALIZED_NAME_AD_UNIT_MAPPINGS = "adUnitMappings";
  @SerializedName(SERIALIZED_NAME_AD_UNIT_MAPPINGS)
  private Map<String, String> adUnitMappings = new HashMap<>();

  public static final String SERIALIZED_NAME_CPM_MICROS = "cpmMicros";
  @SerializedName(SERIALIZED_NAME_CPM_MICROS)
  private String cpmMicros;

  /**
   * Indicates how the CPM for this mediation line is provided. Note that &#x60;MANUAL&#x60; and &#x60;LIVE&#x60; are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.
   */
  @JsonAdapter(CpmModeEnum.Adapter.class)
  public enum CpmModeEnum {
    CPM_MODE_UNSPECIFIED("CPM_MODE_UNSPECIFIED"),
    
    LIVE("LIVE"),
    
    MANUAL("MANUAL"),
    
    ANO("ANO");

    private String value;

    CpmModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CpmModeEnum fromValue(String value) {
      for (CpmModeEnum b : CpmModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CpmModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CpmModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CpmModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CpmModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CpmModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CPM_MODE = "cpmMode";
  @SerializedName(SERIALIZED_NAME_CPM_MODE)
  private CpmModeEnum cpmMode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.
   */
  @JsonAdapter(ExperimentVariantEnum.Adapter.class)
  public enum ExperimentVariantEnum {
    VARIANT_UNSPECIFIED("VARIANT_UNSPECIFIED"),
    
    VARIANT_A("VARIANT_A"),
    
    VARIANT_B("VARIANT_B"),
    
    ORIGINAL("ORIGINAL");

    private String value;

    ExperimentVariantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExperimentVariantEnum fromValue(String value) {
      for (ExperimentVariantEnum b : ExperimentVariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExperimentVariantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExperimentVariantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExperimentVariantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExperimentVariantEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExperimentVariantEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPERIMENT_VARIANT = "experimentVariant";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_VARIANT)
  private ExperimentVariantEnum experimentVariant;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * The status of the mediation group line. Only enabled mediation group lines will be served.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    REMOVED("REMOVED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public MediationGroupMediationGroupLine() {
  }

  public MediationGroupMediationGroupLine(
     ExperimentVariantEnum experimentVariant
  ) {
    this();
    this.experimentVariant = experimentVariant;
  }

  public MediationGroupMediationGroupLine adSourceId(String adSourceId) {
    this.adSourceId = adSourceId;
    return this;
  }

  /**
   * The ID of the ad source this mediation line is associated with.
   * @return adSourceId
   */
  @javax.annotation.Nullable
  public String getAdSourceId() {
    return adSourceId;
  }

  public void setAdSourceId(String adSourceId) {
    this.adSourceId = adSourceId;
  }


  public MediationGroupMediationGroupLine adUnitMappings(Map<String, String> adUnitMappings) {
    this.adUnitMappings = adUnitMappings;
    return this;
  }

  public MediationGroupMediationGroupLine putAdUnitMappingsItem(String key, String adUnitMappingsItem) {
    if (this.adUnitMappings == null) {
      this.adUnitMappings = new HashMap<>();
    }
    this.adUnitMappings.put(key, adUnitMappingsItem);
    return this;
  }

  /**
   * References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.
   * @return adUnitMappings
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdUnitMappings() {
    return adUnitMappings;
  }

  public void setAdUnitMappings(Map<String, String> adUnitMappings) {
    this.adUnitMappings = adUnitMappings;
  }


  public MediationGroupMediationGroupLine cpmMicros(String cpmMicros) {
    this.cpmMicros = cpmMicros;
    return this;
  }

  /**
   * The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if &#x60;cpm_mode&#x60; is &#x60;LIVE&#x60;. **Warning:** \&quot;USD\&quot; is the only supported currency at the moment. The unit is in micros.
   * @return cpmMicros
   */
  @javax.annotation.Nullable
  public String getCpmMicros() {
    return cpmMicros;
  }

  public void setCpmMicros(String cpmMicros) {
    this.cpmMicros = cpmMicros;
  }


  public MediationGroupMediationGroupLine cpmMode(CpmModeEnum cpmMode) {
    this.cpmMode = cpmMode;
    return this;
  }

  /**
   * Indicates how the CPM for this mediation line is provided. Note that &#x60;MANUAL&#x60; and &#x60;LIVE&#x60; are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.
   * @return cpmMode
   */
  @javax.annotation.Nullable
  public CpmModeEnum getCpmMode() {
    return cpmMode;
  }

  public void setCpmMode(CpmModeEnum cpmMode) {
    this.cpmMode = cpmMode;
  }


  public MediationGroupMediationGroupLine displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User-provided label for this mediation line. The maximum length allowed is 255 characters.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  /**
   * Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.
   * @return experimentVariant
   */
  @javax.annotation.Nullable
  public ExperimentVariantEnum getExperimentVariant() {
    return experimentVariant;
  }



  public MediationGroupMediationGroupLine id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MediationGroupMediationGroupLine state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The status of the mediation group line. Only enabled mediation group lines will be served.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediationGroupMediationGroupLine mediationGroupMediationGroupLine = (MediationGroupMediationGroupLine) o;
    return Objects.equals(this.adSourceId, mediationGroupMediationGroupLine.adSourceId) &&
        Objects.equals(this.adUnitMappings, mediationGroupMediationGroupLine.adUnitMappings) &&
        Objects.equals(this.cpmMicros, mediationGroupMediationGroupLine.cpmMicros) &&
        Objects.equals(this.cpmMode, mediationGroupMediationGroupLine.cpmMode) &&
        Objects.equals(this.displayName, mediationGroupMediationGroupLine.displayName) &&
        Objects.equals(this.experimentVariant, mediationGroupMediationGroupLine.experimentVariant) &&
        Objects.equals(this.id, mediationGroupMediationGroupLine.id) &&
        Objects.equals(this.state, mediationGroupMediationGroupLine.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adSourceId, adUnitMappings, cpmMicros, cpmMode, displayName, experimentVariant, id, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediationGroupMediationGroupLine {\n");
    sb.append("    adSourceId: ").append(toIndentedString(adSourceId)).append("\n");
    sb.append("    adUnitMappings: ").append(toIndentedString(adUnitMappings)).append("\n");
    sb.append("    cpmMicros: ").append(toIndentedString(cpmMicros)).append("\n");
    sb.append("    cpmMode: ").append(toIndentedString(cpmMode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    experimentVariant: ").append(toIndentedString(experimentVariant)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adSourceId");
    openapiFields.add("adUnitMappings");
    openapiFields.add("cpmMicros");
    openapiFields.add("cpmMode");
    openapiFields.add("displayName");
    openapiFields.add("experimentVariant");
    openapiFields.add("id");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediationGroupMediationGroupLine
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediationGroupMediationGroupLine.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediationGroupMediationGroupLine is not found in the empty JSON string", MediationGroupMediationGroupLine.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediationGroupMediationGroupLine.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediationGroupMediationGroupLine` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adSourceId") != null && !jsonObj.get("adSourceId").isJsonNull()) && !jsonObj.get("adSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adSourceId").toString()));
      }
      if ((jsonObj.get("cpmMicros") != null && !jsonObj.get("cpmMicros").isJsonNull()) && !jsonObj.get("cpmMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpmMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpmMicros").toString()));
      }
      if ((jsonObj.get("cpmMode") != null && !jsonObj.get("cpmMode").isJsonNull()) && !jsonObj.get("cpmMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpmMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpmMode").toString()));
      }
      // validate the optional field `cpmMode`
      if (jsonObj.get("cpmMode") != null && !jsonObj.get("cpmMode").isJsonNull()) {
        CpmModeEnum.validateJsonElement(jsonObj.get("cpmMode"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("experimentVariant") != null && !jsonObj.get("experimentVariant").isJsonNull()) && !jsonObj.get("experimentVariant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `experimentVariant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("experimentVariant").toString()));
      }
      // validate the optional field `experimentVariant`
      if (jsonObj.get("experimentVariant") != null && !jsonObj.get("experimentVariant").isJsonNull()) {
        ExperimentVariantEnum.validateJsonElement(jsonObj.get("experimentVariant"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediationGroupMediationGroupLine.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediationGroupMediationGroupLine' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediationGroupMediationGroupLine> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediationGroupMediationGroupLine.class));

       return (TypeAdapter<T>) new TypeAdapter<MediationGroupMediationGroupLine>() {
           @Override
           public void write(JsonWriter out, MediationGroupMediationGroupLine value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediationGroupMediationGroupLine read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediationGroupMediationGroupLine given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediationGroupMediationGroupLine
   * @throws IOException if the JSON string is invalid with respect to MediationGroupMediationGroupLine
   */
  public static MediationGroupMediationGroupLine fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediationGroupMediationGroupLine.class);
  }

  /**
   * Convert an instance of MediationGroupMediationGroupLine to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

