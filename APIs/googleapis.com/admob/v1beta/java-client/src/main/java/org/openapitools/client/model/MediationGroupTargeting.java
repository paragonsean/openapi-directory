/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Set of criteria targeted by this mediation group. For example, a mediation group can target specific ad unit IDs, platform, format and geo location.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediationGroupTargeting {
  public static final String SERIALIZED_NAME_AD_UNIT_IDS = "adUnitIds";
  @SerializedName(SERIALIZED_NAME_AD_UNIT_IDS)
  private List<String> adUnitIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXCLUDED_REGION_CODES = "excludedRegionCodes";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_REGION_CODES)
  private List<String> excludedRegionCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  /**
   * The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn&#39;t need to be specified for an ANDROID device.
   */
  @JsonAdapter(IdfaTargetingEnum.Adapter.class)
  public enum IdfaTargetingEnum {
    IDFA_TARGETING_UNSPECIFIED("IDFA_TARGETING_UNSPECIFIED"),
    
    ALL("ALL"),
    
    AVAILABLE("AVAILABLE"),
    
    NOT_AVAILABLE("NOT_AVAILABLE");

    private String value;

    IdfaTargetingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IdfaTargetingEnum fromValue(String value) {
      for (IdfaTargetingEnum b : IdfaTargetingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IdfaTargetingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IdfaTargetingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IdfaTargetingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IdfaTargetingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IdfaTargetingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IDFA_TARGETING = "idfaTargeting";
  @SerializedName(SERIALIZED_NAME_IDFA_TARGETING)
  private IdfaTargetingEnum idfaTargeting;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_TARGETED_REGION_CODES = "targetedRegionCodes";
  @SerializedName(SERIALIZED_NAME_TARGETED_REGION_CODES)
  private List<String> targetedRegionCodes = new ArrayList<>();

  public MediationGroupTargeting() {
  }

  public MediationGroupTargeting adUnitIds(List<String> adUnitIds) {
    this.adUnitIds = adUnitIds;
    return this;
  }

  public MediationGroupTargeting addAdUnitIdsItem(String adUnitIdsItem) {
    if (this.adUnitIds == null) {
      this.adUnitIds = new ArrayList<>();
    }
    this.adUnitIds.add(adUnitIdsItem);
    return this;
  }

  /**
   * Ad units targeted by this mediation group. Example: \&quot;ca-app-pub-1234/8790\&quot;.
   * @return adUnitIds
   */
  @javax.annotation.Nullable
  public List<String> getAdUnitIds() {
    return adUnitIds;
  }

  public void setAdUnitIds(List<String> adUnitIds) {
    this.adUnitIds = adUnitIds;
  }


  public MediationGroupTargeting excludedRegionCodes(List<String> excludedRegionCodes) {
    this.excludedRegionCodes = excludedRegionCodes;
    return this;
  }

  public MediationGroupTargeting addExcludedRegionCodesItem(String excludedRegionCodesItem) {
    if (this.excludedRegionCodes == null) {
      this.excludedRegionCodes = new ArrayList<>();
    }
    this.excludedRegionCodes.add(excludedRegionCodesItem);
    return this;
  }

  /**
   * The Unicode country/region code (CLDR) of a location, such as \&quot;US\&quot;. Unset if this mediation group does not exclude any region.
   * @return excludedRegionCodes
   */
  @javax.annotation.Nullable
  public List<String> getExcludedRegionCodes() {
    return excludedRegionCodes;
  }

  public void setExcludedRegionCodes(List<String> excludedRegionCodes) {
    this.excludedRegionCodes = excludedRegionCodes;
  }


  public MediationGroupTargeting format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Ad format targeted by this mediation group. Examples: \&quot;banner\&quot;, \&quot;native\&quot;.
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public MediationGroupTargeting idfaTargeting(IdfaTargetingEnum idfaTargeting) {
    this.idfaTargeting = idfaTargeting;
    return this;
  }

  /**
   * The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn&#39;t need to be specified for an ANDROID device.
   * @return idfaTargeting
   */
  @javax.annotation.Nullable
  public IdfaTargetingEnum getIdfaTargeting() {
    return idfaTargeting;
  }

  public void setIdfaTargeting(IdfaTargetingEnum idfaTargeting) {
    this.idfaTargeting = idfaTargeting;
  }


  public MediationGroupTargeting platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Describes the platform of the app. Examples: \&quot;IOS\&quot;, \&quot;Android\&quot;.
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public MediationGroupTargeting targetedRegionCodes(List<String> targetedRegionCodes) {
    this.targetedRegionCodes = targetedRegionCodes;
    return this;
  }

  public MediationGroupTargeting addTargetedRegionCodesItem(String targetedRegionCodesItem) {
    if (this.targetedRegionCodes == null) {
      this.targetedRegionCodes = new ArrayList<>();
    }
    this.targetedRegionCodes.add(targetedRegionCodesItem);
    return this;
  }

  /**
   * The Unicode country/region code (CLDR) of a location, such as \&quot;US\&quot;. Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.
   * @return targetedRegionCodes
   */
  @javax.annotation.Nullable
  public List<String> getTargetedRegionCodes() {
    return targetedRegionCodes;
  }

  public void setTargetedRegionCodes(List<String> targetedRegionCodes) {
    this.targetedRegionCodes = targetedRegionCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediationGroupTargeting mediationGroupTargeting = (MediationGroupTargeting) o;
    return Objects.equals(this.adUnitIds, mediationGroupTargeting.adUnitIds) &&
        Objects.equals(this.excludedRegionCodes, mediationGroupTargeting.excludedRegionCodes) &&
        Objects.equals(this.format, mediationGroupTargeting.format) &&
        Objects.equals(this.idfaTargeting, mediationGroupTargeting.idfaTargeting) &&
        Objects.equals(this.platform, mediationGroupTargeting.platform) &&
        Objects.equals(this.targetedRegionCodes, mediationGroupTargeting.targetedRegionCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adUnitIds, excludedRegionCodes, format, idfaTargeting, platform, targetedRegionCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediationGroupTargeting {\n");
    sb.append("    adUnitIds: ").append(toIndentedString(adUnitIds)).append("\n");
    sb.append("    excludedRegionCodes: ").append(toIndentedString(excludedRegionCodes)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    idfaTargeting: ").append(toIndentedString(idfaTargeting)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    targetedRegionCodes: ").append(toIndentedString(targetedRegionCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adUnitIds");
    openapiFields.add("excludedRegionCodes");
    openapiFields.add("format");
    openapiFields.add("idfaTargeting");
    openapiFields.add("platform");
    openapiFields.add("targetedRegionCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediationGroupTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediationGroupTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediationGroupTargeting is not found in the empty JSON string", MediationGroupTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediationGroupTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediationGroupTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("adUnitIds") != null && !jsonObj.get("adUnitIds").isJsonNull() && !jsonObj.get("adUnitIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adUnitIds` to be an array in the JSON string but got `%s`", jsonObj.get("adUnitIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedRegionCodes") != null && !jsonObj.get("excludedRegionCodes").isJsonNull() && !jsonObj.get("excludedRegionCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedRegionCodes` to be an array in the JSON string but got `%s`", jsonObj.get("excludedRegionCodes").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("idfaTargeting") != null && !jsonObj.get("idfaTargeting").isJsonNull()) && !jsonObj.get("idfaTargeting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idfaTargeting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idfaTargeting").toString()));
      }
      // validate the optional field `idfaTargeting`
      if (jsonObj.get("idfaTargeting") != null && !jsonObj.get("idfaTargeting").isJsonNull()) {
        IdfaTargetingEnum.validateJsonElement(jsonObj.get("idfaTargeting"));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetedRegionCodes") != null && !jsonObj.get("targetedRegionCodes").isJsonNull() && !jsonObj.get("targetedRegionCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetedRegionCodes` to be an array in the JSON string but got `%s`", jsonObj.get("targetedRegionCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediationGroupTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediationGroupTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediationGroupTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediationGroupTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<MediationGroupTargeting>() {
           @Override
           public void write(JsonWriter out, MediationGroupTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediationGroupTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediationGroupTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediationGroupTargeting
   * @throws IOException if the JSON string is invalid with respect to MediationGroupTargeting
   */
  public static MediationGroupTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediationGroupTargeting.class);
  }

  /**
   * Convert an instance of MediationGroupTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

