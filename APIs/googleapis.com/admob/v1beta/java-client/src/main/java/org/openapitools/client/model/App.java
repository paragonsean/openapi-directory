/*
 * AdMob API
 * The AdMob API allows publishers to programmatically get information about their AdMob account. 
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppLinkedAppInfo;
import org.openapitools.client.model.AppManualAppInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an AdMob app for a specific platform (For example: Android or iOS).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:42:40.681529-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class App {
  /**
   * Output only. The approval state for the app. The field is read-only.
   */
  @JsonAdapter(AppApprovalStateEnum.Adapter.class)
  public enum AppApprovalStateEnum {
    APP_APPROVAL_STATE_UNSPECIFIED("APP_APPROVAL_STATE_UNSPECIFIED"),
    
    ACTION_REQUIRED("ACTION_REQUIRED"),
    
    IN_REVIEW("IN_REVIEW"),
    
    APPROVED("APPROVED");

    private String value;

    AppApprovalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppApprovalStateEnum fromValue(String value) {
      for (AppApprovalStateEnum b : AppApprovalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppApprovalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppApprovalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppApprovalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppApprovalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppApprovalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_APPROVAL_STATE = "appApprovalState";
  @SerializedName(SERIALIZED_NAME_APP_APPROVAL_STATE)
  private AppApprovalStateEnum appApprovalState;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_LINKED_APP_INFO = "linkedAppInfo";
  @SerializedName(SERIALIZED_NAME_LINKED_APP_INFO)
  private AppLinkedAppInfo linkedAppInfo;

  public static final String SERIALIZED_NAME_MANUAL_APP_INFO = "manualAppInfo";
  @SerializedName(SERIALIZED_NAME_MANUAL_APP_INFO)
  private AppManualAppInfo manualAppInfo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public App() {
  }

  public App(
     AppApprovalStateEnum appApprovalState
  ) {
    this();
    this.appApprovalState = appApprovalState;
  }

  /**
   * Output only. The approval state for the app. The field is read-only.
   * @return appApprovalState
   */
  @javax.annotation.Nullable
  public AppApprovalStateEnum getAppApprovalState() {
    return appApprovalState;
  }



  public App appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public App linkedAppInfo(AppLinkedAppInfo linkedAppInfo) {
    this.linkedAppInfo = linkedAppInfo;
    return this;
  }

  /**
   * Get linkedAppInfo
   * @return linkedAppInfo
   */
  @javax.annotation.Nullable
  public AppLinkedAppInfo getLinkedAppInfo() {
    return linkedAppInfo;
  }

  public void setLinkedAppInfo(AppLinkedAppInfo linkedAppInfo) {
    this.linkedAppInfo = linkedAppInfo;
  }


  public App manualAppInfo(AppManualAppInfo manualAppInfo) {
    this.manualAppInfo = manualAppInfo;
    return this;
  }

  /**
   * Get manualAppInfo
   * @return manualAppInfo
   */
  @javax.annotation.Nullable
  public AppManualAppInfo getManualAppInfo() {
    return manualAppInfo;
  }

  public void setManualAppInfo(AppManualAppInfo manualAppInfo) {
    this.manualAppInfo = manualAppInfo;
  }


  public App name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public App platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Describes the platform of the app. Limited to \&quot;IOS\&quot; and \&quot;ANDROID\&quot;.
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    App app = (App) o;
    return Objects.equals(this.appApprovalState, app.appApprovalState) &&
        Objects.equals(this.appId, app.appId) &&
        Objects.equals(this.linkedAppInfo, app.linkedAppInfo) &&
        Objects.equals(this.manualAppInfo, app.manualAppInfo) &&
        Objects.equals(this.name, app.name) &&
        Objects.equals(this.platform, app.platform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appApprovalState, appId, linkedAppInfo, manualAppInfo, name, platform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class App {\n");
    sb.append("    appApprovalState: ").append(toIndentedString(appApprovalState)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    linkedAppInfo: ").append(toIndentedString(linkedAppInfo)).append("\n");
    sb.append("    manualAppInfo: ").append(toIndentedString(manualAppInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appApprovalState");
    openapiFields.add("appId");
    openapiFields.add("linkedAppInfo");
    openapiFields.add("manualAppInfo");
    openapiFields.add("name");
    openapiFields.add("platform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to App
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!App.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in App is not found in the empty JSON string", App.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!App.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `App` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appApprovalState") != null && !jsonObj.get("appApprovalState").isJsonNull()) && !jsonObj.get("appApprovalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appApprovalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appApprovalState").toString()));
      }
      // validate the optional field `appApprovalState`
      if (jsonObj.get("appApprovalState") != null && !jsonObj.get("appApprovalState").isJsonNull()) {
        AppApprovalStateEnum.validateJsonElement(jsonObj.get("appApprovalState"));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      // validate the optional field `linkedAppInfo`
      if (jsonObj.get("linkedAppInfo") != null && !jsonObj.get("linkedAppInfo").isJsonNull()) {
        AppLinkedAppInfo.validateJsonElement(jsonObj.get("linkedAppInfo"));
      }
      // validate the optional field `manualAppInfo`
      if (jsonObj.get("manualAppInfo") != null && !jsonObj.get("manualAppInfo").isJsonNull()) {
        AppManualAppInfo.validateJsonElement(jsonObj.get("manualAppInfo"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!App.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'App' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<App> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(App.class));

       return (TypeAdapter<T>) new TypeAdapter<App>() {
           @Override
           public void write(JsonWriter out, App value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public App read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of App given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of App
   * @throws IOException if the JSON string is invalid with respect to App
   */
  public static App fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, App.class);
  }

  /**
   * Convert an instance of App to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

