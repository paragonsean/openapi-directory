/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryListItemsInnerIcons from './DirectoryListItemsInnerIcons';

/**
 * The DirectoryListItemsInner model module.
 * @module model/DirectoryListItemsInner
 * @version v1
 */
class DirectoryListItemsInner {
    /**
     * Constructs a new <code>DirectoryListItemsInner</code>.
     * @alias module:model/DirectoryListItemsInner
     */
    constructor() { 
        
        DirectoryListItemsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'discovery#directoryItem';
    }

    /**
     * Constructs a <code>DirectoryListItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectoryListItemsInner} obj Optional instance to populate.
     * @return {module:model/DirectoryListItemsInner} The populated <code>DirectoryListItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectoryListItemsInner();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveryLink')) {
                obj['discoveryLink'] = ApiClient.convertToType(data['discoveryLink'], 'String');
            }
            if (data.hasOwnProperty('discoveryRestUrl')) {
                obj['discoveryRestUrl'] = ApiClient.convertToType(data['discoveryRestUrl'], 'String');
            }
            if (data.hasOwnProperty('documentationLink')) {
                obj['documentationLink'] = ApiClient.convertToType(data['documentationLink'], 'String');
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = DirectoryListItemsInnerIcons.constructFromObject(data['icons']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('preferred')) {
                obj['preferred'] = ApiClient.convertToType(data['preferred'], 'Boolean');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectoryListItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectoryListItemsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveryLink'] && !(typeof data['discoveryLink'] === 'string' || data['discoveryLink'] instanceof String)) {
            throw new Error("Expected the field `discoveryLink` to be a primitive type in the JSON string but got " + data['discoveryLink']);
        }
        // ensure the json data is a string
        if (data['discoveryRestUrl'] && !(typeof data['discoveryRestUrl'] === 'string' || data['discoveryRestUrl'] instanceof String)) {
            throw new Error("Expected the field `discoveryRestUrl` to be a primitive type in the JSON string but got " + data['discoveryRestUrl']);
        }
        // ensure the json data is a string
        if (data['documentationLink'] && !(typeof data['documentationLink'] === 'string' || data['documentationLink'] instanceof String)) {
            throw new Error("Expected the field `documentationLink` to be a primitive type in the JSON string but got " + data['documentationLink']);
        }
        // validate the optional field `icons`
        if (data['icons']) { // data not null
          DirectoryListItemsInnerIcons.validateJSON(data['icons']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * The description of this API.
 * @member {String} description
 */
DirectoryListItemsInner.prototype['description'] = undefined;

/**
 * A link to the discovery document.
 * @member {String} discoveryLink
 */
DirectoryListItemsInner.prototype['discoveryLink'] = undefined;

/**
 * The URL for the discovery REST document.
 * @member {String} discoveryRestUrl
 */
DirectoryListItemsInner.prototype['discoveryRestUrl'] = undefined;

/**
 * A link to human readable documentation for the API.
 * @member {String} documentationLink
 */
DirectoryListItemsInner.prototype['documentationLink'] = undefined;

/**
 * @member {module:model/DirectoryListItemsInnerIcons} icons
 */
DirectoryListItemsInner.prototype['icons'] = undefined;

/**
 * The id of this API.
 * @member {String} id
 */
DirectoryListItemsInner.prototype['id'] = undefined;

/**
 * The kind for this response.
 * @member {String} kind
 * @default 'discovery#directoryItem'
 */
DirectoryListItemsInner.prototype['kind'] = 'discovery#directoryItem';

/**
 * Labels for the status of this API, such as labs or deprecated.
 * @member {Array.<String>} labels
 */
DirectoryListItemsInner.prototype['labels'] = undefined;

/**
 * The name of the API.
 * @member {String} name
 */
DirectoryListItemsInner.prototype['name'] = undefined;

/**
 * True if this version is the preferred version to use.
 * @member {Boolean} preferred
 */
DirectoryListItemsInner.prototype['preferred'] = undefined;

/**
 * The title of this API.
 * @member {String} title
 */
DirectoryListItemsInner.prototype['title'] = undefined;

/**
 * The version of the API.
 * @member {String} version
 */
DirectoryListItemsInner.prototype['version'] = undefined;






export default DirectoryListItemsInner;

