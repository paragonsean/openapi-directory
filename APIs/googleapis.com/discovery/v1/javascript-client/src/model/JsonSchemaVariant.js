/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonSchemaVariantMapInner from './JsonSchemaVariantMapInner';

/**
 * The JsonSchemaVariant model module.
 * @module model/JsonSchemaVariant
 * @version v1
 */
class JsonSchemaVariant {
    /**
     * Constructs a new <code>JsonSchemaVariant</code>.
     * In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
     * @alias module:model/JsonSchemaVariant
     */
    constructor() { 
        
        JsonSchemaVariant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonSchemaVariant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonSchemaVariant} obj Optional instance to populate.
     * @return {module:model/JsonSchemaVariant} The populated <code>JsonSchemaVariant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonSchemaVariant();

            if (data.hasOwnProperty('discriminant')) {
                obj['discriminant'] = ApiClient.convertToType(data['discriminant'], 'String');
            }
            if (data.hasOwnProperty('map')) {
                obj['map'] = ApiClient.convertToType(data['map'], [JsonSchemaVariantMapInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonSchemaVariant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonSchemaVariant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['discriminant'] && !(typeof data['discriminant'] === 'string' || data['discriminant'] instanceof String)) {
            throw new Error("Expected the field `discriminant` to be a primitive type in the JSON string but got " + data['discriminant']);
        }
        if (data['map']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['map'])) {
                throw new Error("Expected the field `map` to be an array in the JSON data but got " + data['map']);
            }
            // validate the optional field `map` (array)
            for (const item of data['map']) {
                JsonSchemaVariantMapInner.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the type discriminant property.
 * @member {String} discriminant
 */
JsonSchemaVariant.prototype['discriminant'] = undefined;

/**
 * The map of discriminant value to schema to use for parsing..
 * @member {Array.<module:model/JsonSchemaVariantMapInner>} map
 */
JsonSchemaVariant.prototype['map'] = undefined;






export default JsonSchemaVariant;

