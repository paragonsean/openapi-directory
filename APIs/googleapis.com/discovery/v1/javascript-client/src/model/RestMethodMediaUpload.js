/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RestMethodMediaUploadProtocols from './RestMethodMediaUploadProtocols';

/**
 * The RestMethodMediaUpload model module.
 * @module model/RestMethodMediaUpload
 * @version v1
 */
class RestMethodMediaUpload {
    /**
     * Constructs a new <code>RestMethodMediaUpload</code>.
     * Media upload parameters.
     * @alias module:model/RestMethodMediaUpload
     */
    constructor() { 
        
        RestMethodMediaUpload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestMethodMediaUpload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestMethodMediaUpload} obj Optional instance to populate.
     * @return {module:model/RestMethodMediaUpload} The populated <code>RestMethodMediaUpload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestMethodMediaUpload();

            if (data.hasOwnProperty('accept')) {
                obj['accept'] = ApiClient.convertToType(data['accept'], ['String']);
            }
            if (data.hasOwnProperty('maxSize')) {
                obj['maxSize'] = ApiClient.convertToType(data['maxSize'], 'String');
            }
            if (data.hasOwnProperty('protocols')) {
                obj['protocols'] = RestMethodMediaUploadProtocols.constructFromObject(data['protocols']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestMethodMediaUpload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestMethodMediaUpload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accept'])) {
            throw new Error("Expected the field `accept` to be an array in the JSON data but got " + data['accept']);
        }
        // ensure the json data is a string
        if (data['maxSize'] && !(typeof data['maxSize'] === 'string' || data['maxSize'] instanceof String)) {
            throw new Error("Expected the field `maxSize` to be a primitive type in the JSON string but got " + data['maxSize']);
        }
        // validate the optional field `protocols`
        if (data['protocols']) { // data not null
          RestMethodMediaUploadProtocols.validateJSON(data['protocols']);
        }

        return true;
    }


}



/**
 * MIME Media Ranges for acceptable media uploads to this method.
 * @member {Array.<String>} accept
 */
RestMethodMediaUpload.prototype['accept'] = undefined;

/**
 * Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\".
 * @member {String} maxSize
 */
RestMethodMediaUpload.prototype['maxSize'] = undefined;

/**
 * @member {module:model/RestMethodMediaUploadProtocols} protocols
 */
RestMethodMediaUpload.prototype['protocols'] = undefined;






export default RestMethodMediaUpload;

