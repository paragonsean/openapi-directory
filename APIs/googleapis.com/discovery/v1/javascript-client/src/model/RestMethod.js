/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonSchema from './JsonSchema';
import RestMethodMediaUpload from './RestMethodMediaUpload';
import RestMethodRequest from './RestMethodRequest';
import RestMethodResponse from './RestMethodResponse';

/**
 * The RestMethod model module.
 * @module model/RestMethod
 * @version v1
 */
class RestMethod {
    /**
     * Constructs a new <code>RestMethod</code>.
     * @alias module:model/RestMethod
     */
    constructor() { 
        
        RestMethod.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RestMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestMethod} obj Optional instance to populate.
     * @return {module:model/RestMethod} The populated <code>RestMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestMethod();

            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etagRequired')) {
                obj['etagRequired'] = ApiClient.convertToType(data['etagRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('flatPath')) {
                obj['flatPath'] = ApiClient.convertToType(data['flatPath'], 'String');
            }
            if (data.hasOwnProperty('httpMethod')) {
                obj['httpMethod'] = ApiClient.convertToType(data['httpMethod'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mediaUpload')) {
                obj['mediaUpload'] = RestMethodMediaUpload.constructFromObject(data['mediaUpload']);
            }
            if (data.hasOwnProperty('parameterOrder')) {
                obj['parameterOrder'] = ApiClient.convertToType(data['parameterOrder'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': JsonSchema});
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = RestMethodRequest.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = RestMethodResponse.constructFromObject(data['response']);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('supportsMediaDownload')) {
                obj['supportsMediaDownload'] = ApiClient.convertToType(data['supportsMediaDownload'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsMediaUpload')) {
                obj['supportsMediaUpload'] = ApiClient.convertToType(data['supportsMediaUpload'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsSubscription')) {
                obj['supportsSubscription'] = ApiClient.convertToType(data['supportsSubscription'], 'Boolean');
            }
            if (data.hasOwnProperty('useMediaDownloadService')) {
                obj['useMediaDownloadService'] = ApiClient.convertToType(data['useMediaDownloadService'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestMethod</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['flatPath'] && !(typeof data['flatPath'] === 'string' || data['flatPath'] instanceof String)) {
            throw new Error("Expected the field `flatPath` to be a primitive type in the JSON string but got " + data['flatPath']);
        }
        // ensure the json data is a string
        if (data['httpMethod'] && !(typeof data['httpMethod'] === 'string' || data['httpMethod'] instanceof String)) {
            throw new Error("Expected the field `httpMethod` to be a primitive type in the JSON string but got " + data['httpMethod']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `mediaUpload`
        if (data['mediaUpload']) { // data not null
          RestMethodMediaUpload.validateJSON(data['mediaUpload']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parameterOrder'])) {
            throw new Error("Expected the field `parameterOrder` to be an array in the JSON data but got " + data['parameterOrder']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          RestMethodRequest.validateJSON(data['request']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          RestMethodResponse.validateJSON(data['response']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }

        return true;
    }


}



/**
 * Whether this method is deprecated.
 * @member {Boolean} deprecated
 */
RestMethod.prototype['deprecated'] = undefined;

/**
 * Description of this method.
 * @member {String} description
 */
RestMethod.prototype['description'] = undefined;

/**
 * Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
 * @member {Boolean} etagRequired
 */
RestMethod.prototype['etagRequired'] = undefined;

/**
 * The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
 * @member {String} flatPath
 */
RestMethod.prototype['flatPath'] = undefined;

/**
 * HTTP method used by this method.
 * @member {String} httpMethod
 */
RestMethod.prototype['httpMethod'] = undefined;

/**
 * A unique ID for this method. This property can be used to match methods between different versions of Discovery.
 * @member {String} id
 */
RestMethod.prototype['id'] = undefined;

/**
 * @member {module:model/RestMethodMediaUpload} mediaUpload
 */
RestMethod.prototype['mediaUpload'] = undefined;

/**
 * Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.
 * @member {Array.<String>} parameterOrder
 */
RestMethod.prototype['parameterOrder'] = undefined;

/**
 * Details for all parameters in this method.
 * @member {Object.<String, module:model/JsonSchema>} parameters
 */
RestMethod.prototype['parameters'] = undefined;

/**
 * The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
 * @member {String} path
 */
RestMethod.prototype['path'] = undefined;

/**
 * @member {module:model/RestMethodRequest} request
 */
RestMethod.prototype['request'] = undefined;

/**
 * @member {module:model/RestMethodResponse} response
 */
RestMethod.prototype['response'] = undefined;

/**
 * OAuth 2.0 scopes applicable to this method.
 * @member {Array.<String>} scopes
 */
RestMethod.prototype['scopes'] = undefined;

/**
 * Whether this method supports media downloads.
 * @member {Boolean} supportsMediaDownload
 */
RestMethod.prototype['supportsMediaDownload'] = undefined;

/**
 * Whether this method supports media uploads.
 * @member {Boolean} supportsMediaUpload
 */
RestMethod.prototype['supportsMediaUpload'] = undefined;

/**
 * Whether this method supports subscriptions.
 * @member {Boolean} supportsSubscription
 */
RestMethod.prototype['supportsSubscription'] = undefined;

/**
 * Indicates that downloads from this method should use the download service URL (i.e. \"/download\"). Only applies if the method supports media download.
 * @member {Boolean} useMediaDownloadService
 */
RestMethod.prototype['useMediaDownloadService'] = undefined;






export default RestMethod;

