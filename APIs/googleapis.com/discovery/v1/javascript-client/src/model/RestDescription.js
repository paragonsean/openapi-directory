/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DirectoryListItemsInnerIcons from './DirectoryListItemsInnerIcons';
import JsonSchema from './JsonSchema';
import RestDescriptionAuth from './RestDescriptionAuth';
import RestDescriptionEndpointsInner from './RestDescriptionEndpointsInner';
import RestMethod from './RestMethod';
import RestResource from './RestResource';

/**
 * The RestDescription model module.
 * @module model/RestDescription
 * @version v1
 */
class RestDescription {
    /**
     * Constructs a new <code>RestDescription</code>.
     * @alias module:model/RestDescription
     */
    constructor() { 
        
        RestDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['discoveryVersion'] = 'v1';
        obj['kind'] = 'discovery#restDescription';
        obj['protocol'] = 'rest';
    }

    /**
     * Constructs a <code>RestDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RestDescription} obj Optional instance to populate.
     * @return {module:model/RestDescription} The populated <code>RestDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RestDescription();

            if (data.hasOwnProperty('auth')) {
                obj['auth'] = RestDescriptionAuth.constructFromObject(data['auth']);
            }
            if (data.hasOwnProperty('basePath')) {
                obj['basePath'] = ApiClient.convertToType(data['basePath'], 'String');
            }
            if (data.hasOwnProperty('baseUrl')) {
                obj['baseUrl'] = ApiClient.convertToType(data['baseUrl'], 'String');
            }
            if (data.hasOwnProperty('batchPath')) {
                obj['batchPath'] = ApiClient.convertToType(data['batchPath'], 'String');
            }
            if (data.hasOwnProperty('canonicalName')) {
                obj['canonicalName'] = ApiClient.convertToType(data['canonicalName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveryVersion')) {
                obj['discoveryVersion'] = ApiClient.convertToType(data['discoveryVersion'], 'String');
            }
            if (data.hasOwnProperty('documentationLink')) {
                obj['documentationLink'] = ApiClient.convertToType(data['documentationLink'], 'String');
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [RestDescriptionEndpointsInner]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('exponentialBackoffDefault')) {
                obj['exponentialBackoffDefault'] = ApiClient.convertToType(data['exponentialBackoffDefault'], 'Boolean');
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], ['String']);
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = DirectoryListItemsInnerIcons.constructFromObject(data['icons']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('methods')) {
                obj['methods'] = ApiClient.convertToType(data['methods'], {'String': RestMethod});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerDomain')) {
                obj['ownerDomain'] = ApiClient.convertToType(data['ownerDomain'], 'String');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('packagePath')) {
                obj['packagePath'] = ApiClient.convertToType(data['packagePath'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': JsonSchema});
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], {'String': RestResource});
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('rootUrl')) {
                obj['rootUrl'] = ApiClient.convertToType(data['rootUrl'], 'String');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], {'String': JsonSchema});
            }
            if (data.hasOwnProperty('servicePath')) {
                obj['servicePath'] = ApiClient.convertToType(data['servicePath'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('version_module')) {
                obj['version_module'] = ApiClient.convertToType(data['version_module'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RestDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RestDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `auth`
        if (data['auth']) { // data not null
          RestDescriptionAuth.validateJSON(data['auth']);
        }
        // ensure the json data is a string
        if (data['basePath'] && !(typeof data['basePath'] === 'string' || data['basePath'] instanceof String)) {
            throw new Error("Expected the field `basePath` to be a primitive type in the JSON string but got " + data['basePath']);
        }
        // ensure the json data is a string
        if (data['baseUrl'] && !(typeof data['baseUrl'] === 'string' || data['baseUrl'] instanceof String)) {
            throw new Error("Expected the field `baseUrl` to be a primitive type in the JSON string but got " + data['baseUrl']);
        }
        // ensure the json data is a string
        if (data['batchPath'] && !(typeof data['batchPath'] === 'string' || data['batchPath'] instanceof String)) {
            throw new Error("Expected the field `batchPath` to be a primitive type in the JSON string but got " + data['batchPath']);
        }
        // ensure the json data is a string
        if (data['canonicalName'] && !(typeof data['canonicalName'] === 'string' || data['canonicalName'] instanceof String)) {
            throw new Error("Expected the field `canonicalName` to be a primitive type in the JSON string but got " + data['canonicalName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveryVersion'] && !(typeof data['discoveryVersion'] === 'string' || data['discoveryVersion'] instanceof String)) {
            throw new Error("Expected the field `discoveryVersion` to be a primitive type in the JSON string but got " + data['discoveryVersion']);
        }
        // ensure the json data is a string
        if (data['documentationLink'] && !(typeof data['documentationLink'] === 'string' || data['documentationLink'] instanceof String)) {
            throw new Error("Expected the field `documentationLink` to be a primitive type in the JSON string but got " + data['documentationLink']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                RestDescriptionEndpointsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['features'])) {
            throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
        }
        // validate the optional field `icons`
        if (data['icons']) { // data not null
          DirectoryListItemsInnerIcons.validateJSON(data['icons']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerDomain'] && !(typeof data['ownerDomain'] === 'string' || data['ownerDomain'] instanceof String)) {
            throw new Error("Expected the field `ownerDomain` to be a primitive type in the JSON string but got " + data['ownerDomain']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['packagePath'] && !(typeof data['packagePath'] === 'string' || data['packagePath'] instanceof String)) {
            throw new Error("Expected the field `packagePath` to be a primitive type in the JSON string but got " + data['packagePath']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['rootUrl'] && !(typeof data['rootUrl'] === 'string' || data['rootUrl'] instanceof String)) {
            throw new Error("Expected the field `rootUrl` to be a primitive type in the JSON string but got " + data['rootUrl']);
        }
        // ensure the json data is a string
        if (data['servicePath'] && !(typeof data['servicePath'] === 'string' || data['servicePath'] instanceof String)) {
            throw new Error("Expected the field `servicePath` to be a primitive type in the JSON string but got " + data['servicePath']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/RestDescriptionAuth} auth
 */
RestDescription.prototype['auth'] = undefined;

/**
 * [DEPRECATED] The base path for REST requests.
 * @member {String} basePath
 */
RestDescription.prototype['basePath'] = undefined;

/**
 * [DEPRECATED] The base URL for REST requests.
 * @member {String} baseUrl
 */
RestDescription.prototype['baseUrl'] = undefined;

/**
 * The path for REST batch requests.
 * @member {String} batchPath
 */
RestDescription.prototype['batchPath'] = undefined;

/**
 * Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
 * @member {String} canonicalName
 */
RestDescription.prototype['canonicalName'] = undefined;

/**
 * The description of this API.
 * @member {String} description
 */
RestDescription.prototype['description'] = undefined;

/**
 * Indicate the version of the Discovery API used to generate this doc.
 * @member {String} discoveryVersion
 * @default 'v1'
 */
RestDescription.prototype['discoveryVersion'] = 'v1';

/**
 * A link to human readable documentation for the API.
 * @member {String} documentationLink
 */
RestDescription.prototype['documentationLink'] = undefined;

/**
 * A list of location-based endpoint objects for this API. Each object contains the endpoint URL, location, description and deprecation status.
 * @member {Array.<module:model/RestDescriptionEndpointsInner>} endpoints
 */
RestDescription.prototype['endpoints'] = undefined;

/**
 * The ETag for this response.
 * @member {String} etag
 */
RestDescription.prototype['etag'] = undefined;

/**
 * Enable exponential backoff for suitable methods in the generated clients.
 * @member {Boolean} exponentialBackoffDefault
 */
RestDescription.prototype['exponentialBackoffDefault'] = undefined;

/**
 * A list of supported features for this API.
 * @member {Array.<String>} features
 */
RestDescription.prototype['features'] = undefined;

/**
 * @member {module:model/DirectoryListItemsInnerIcons} icons
 */
RestDescription.prototype['icons'] = undefined;

/**
 * The ID of this API.
 * @member {String} id
 */
RestDescription.prototype['id'] = undefined;

/**
 * The kind for this response.
 * @member {String} kind
 * @default 'discovery#restDescription'
 */
RestDescription.prototype['kind'] = 'discovery#restDescription';

/**
 * Labels for the status of this API, such as labs or deprecated.
 * @member {Array.<String>} labels
 */
RestDescription.prototype['labels'] = undefined;

/**
 * API-level methods for this API.
 * @member {Object.<String, module:model/RestMethod>} methods
 */
RestDescription.prototype['methods'] = undefined;

/**
 * The name of this API.
 * @member {String} name
 */
RestDescription.prototype['name'] = undefined;

/**
 * The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
 * @member {String} ownerDomain
 */
RestDescription.prototype['ownerDomain'] = undefined;

/**
 * The name of the owner of this API. See ownerDomain.
 * @member {String} ownerName
 */
RestDescription.prototype['ownerName'] = undefined;

/**
 * The package of the owner of this API. See ownerDomain.
 * @member {String} packagePath
 */
RestDescription.prototype['packagePath'] = undefined;

/**
 * Common parameters that apply across all apis.
 * @member {Object.<String, module:model/JsonSchema>} parameters
 */
RestDescription.prototype['parameters'] = undefined;

/**
 * The protocol described by this document.
 * @member {String} protocol
 * @default 'rest'
 */
RestDescription.prototype['protocol'] = 'rest';

/**
 * The resources in this API.
 * @member {Object.<String, module:model/RestResource>} resources
 */
RestDescription.prototype['resources'] = undefined;

/**
 * The version of this API.
 * @member {String} revision
 */
RestDescription.prototype['revision'] = undefined;

/**
 * The root URL under which all API services live.
 * @member {String} rootUrl
 */
RestDescription.prototype['rootUrl'] = undefined;

/**
 * The schemas for this API.
 * @member {Object.<String, module:model/JsonSchema>} schemas
 */
RestDescription.prototype['schemas'] = undefined;

/**
 * The base path for all REST requests.
 * @member {String} servicePath
 */
RestDescription.prototype['servicePath'] = undefined;

/**
 * The title of this API.
 * @member {String} title
 */
RestDescription.prototype['title'] = undefined;

/**
 * The version of this API.
 * @member {String} version
 */
RestDescription.prototype['version'] = undefined;

/**
 * @member {Boolean} version_module
 */
RestDescription.prototype['version_module'] = undefined;






export default RestDescription;

