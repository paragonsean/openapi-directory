/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonSchemaAnnotations from './JsonSchemaAnnotations';
import JsonSchemaVariant from './JsonSchemaVariant';

/**
 * The JsonSchema model module.
 * @module model/JsonSchema
 * @version v1
 */
class JsonSchema {
    /**
     * Constructs a new <code>JsonSchema</code>.
     * @alias module:model/JsonSchema
     */
    constructor() { 
        
        JsonSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonSchema} obj Optional instance to populate.
     * @return {module:model/JsonSchema} The populated <code>JsonSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonSchema();

            if (data.hasOwnProperty('$ref')) {
                obj['$ref'] = ApiClient.convertToType(data['$ref'], 'String');
            }
            if (data.hasOwnProperty('additionalProperties')) {
                obj['additionalProperties'] = JsonSchema.constructFromObject(data['additionalProperties']);
            }
            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = JsonSchemaAnnotations.constructFromObject(data['annotations']);
            }
            if (data.hasOwnProperty('deprecated')) {
                obj['deprecated'] = ApiClient.convertToType(data['deprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], ['String']);
            }
            if (data.hasOwnProperty('enumDeprecated')) {
                obj['enumDeprecated'] = ApiClient.convertToType(data['enumDeprecated'], ['Boolean']);
            }
            if (data.hasOwnProperty('enumDescriptions')) {
                obj['enumDescriptions'] = ApiClient.convertToType(data['enumDescriptions'], ['String']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = JsonSchema.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'String');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'String');
            }
            if (data.hasOwnProperty('pattern')) {
                obj['pattern'] = ApiClient.convertToType(data['pattern'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': JsonSchema});
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('repeated')) {
                obj['repeated'] = ApiClient.convertToType(data['repeated'], 'Boolean');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = JsonSchemaVariant.constructFromObject(data['variant']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['$ref'] && !(typeof data['$ref'] === 'string' || data['$ref'] instanceof String)) {
            throw new Error("Expected the field `$ref` to be a primitive type in the JSON string but got " + data['$ref']);
        }
        // validate the optional field `additionalProperties`
        if (data['additionalProperties']) { // data not null
          JsonSchema.validateJSON(data['additionalProperties']);
        }
        // validate the optional field `annotations`
        if (data['annotations']) { // data not null
          JsonSchemaAnnotations.validateJSON(data['annotations']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enum'])) {
            throw new Error("Expected the field `enum` to be an array in the JSON data but got " + data['enum']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enumDeprecated'])) {
            throw new Error("Expected the field `enumDeprecated` to be an array in the JSON data but got " + data['enumDeprecated']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enumDescriptions'])) {
            throw new Error("Expected the field `enumDescriptions` to be an array in the JSON data but got " + data['enumDescriptions']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          JsonSchema.validateJSON(data['items']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['maximum'] && !(typeof data['maximum'] === 'string' || data['maximum'] instanceof String)) {
            throw new Error("Expected the field `maximum` to be a primitive type in the JSON string but got " + data['maximum']);
        }
        // ensure the json data is a string
        if (data['minimum'] && !(typeof data['minimum'] === 'string' || data['minimum'] instanceof String)) {
            throw new Error("Expected the field `minimum` to be a primitive type in the JSON string but got " + data['minimum']);
        }
        // ensure the json data is a string
        if (data['pattern'] && !(typeof data['pattern'] === 'string' || data['pattern'] instanceof String)) {
            throw new Error("Expected the field `pattern` to be a primitive type in the JSON string but got " + data['pattern']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `variant`
        if (data['variant']) { // data not null
          JsonSchemaVariant.validateJSON(data['variant']);
        }

        return true;
    }


}



/**
 * A reference to another schema. The value of this property is the \"id\" of another schema.
 * @member {String} $ref
 */
JsonSchema.prototype['$ref'] = undefined;

/**
 * @member {module:model/JsonSchema} additionalProperties
 */
JsonSchema.prototype['additionalProperties'] = undefined;

/**
 * @member {module:model/JsonSchemaAnnotations} annotations
 */
JsonSchema.prototype['annotations'] = undefined;

/**
 * Whether the parameter is deprecated.
 * @member {Boolean} deprecated
 */
JsonSchema.prototype['deprecated'] = undefined;

/**
 * A description of this object.
 * @member {String} description
 */
JsonSchema.prototype['description'] = undefined;

/**
 * Values this parameter may take (if it is an enum).
 * @member {Array.<String>} enum
 */
JsonSchema.prototype['enum'] = undefined;

/**
 * The deprecation status for the enums. Each position maps to the corresponding value in the \"enum\" array.
 * @member {Array.<Boolean>} enumDeprecated
 */
JsonSchema.prototype['enumDeprecated'] = undefined;

/**
 * The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.
 * @member {Array.<String>} enumDescriptions
 */
JsonSchema.prototype['enumDescriptions'] = undefined;

/**
 * An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
 * @member {String} format
 */
JsonSchema.prototype['format'] = undefined;

/**
 * Unique identifier for this schema.
 * @member {String} id
 */
JsonSchema.prototype['id'] = undefined;

/**
 * @member {module:model/JsonSchema} items
 */
JsonSchema.prototype['items'] = undefined;

/**
 * Whether this parameter goes in the query or the path for REST requests.
 * @member {String} location
 */
JsonSchema.prototype['location'] = undefined;

/**
 * The maximum value of this parameter.
 * @member {String} maximum
 */
JsonSchema.prototype['maximum'] = undefined;

/**
 * The minimum value of this parameter.
 * @member {String} minimum
 */
JsonSchema.prototype['minimum'] = undefined;

/**
 * The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
 * @member {String} pattern
 */
JsonSchema.prototype['pattern'] = undefined;

/**
 * If this is a schema for an object, list the schema for each property of this object.
 * @member {Object.<String, module:model/JsonSchema>} properties
 */
JsonSchema.prototype['properties'] = undefined;

/**
 * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
 * @member {Boolean} readOnly
 */
JsonSchema.prototype['readOnly'] = undefined;

/**
 * Whether this parameter may appear multiple times.
 * @member {Boolean} repeated
 */
JsonSchema.prototype['repeated'] = undefined;

/**
 * Whether the parameter is required.
 * @member {Boolean} required
 */
JsonSchema.prototype['required'] = undefined;

/**
 * The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
 * @member {String} type
 */
JsonSchema.prototype['type'] = undefined;

/**
 * @member {module:model/JsonSchemaVariant} variant
 */
JsonSchema.prototype['variant'] = undefined;






export default JsonSchema;

