/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDiscoveryService);
  }
}(this, function(expect, ApiDiscoveryService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDiscoveryService.RestDescription();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RestDescription', function() {
    it('should create an instance of RestDescription', function() {
      // uncomment below and update the code to test RestDescription
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be.a(ApiDiscoveryService.RestDescription);
    });

    it('should have the property auth (base name: "auth")', function() {
      // uncomment below and update the code to test the property auth
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property basePath (base name: "basePath")', function() {
      // uncomment below and update the code to test the property basePath
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property baseUrl (base name: "baseUrl")', function() {
      // uncomment below and update the code to test the property baseUrl
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property batchPath (base name: "batchPath")', function() {
      // uncomment below and update the code to test the property batchPath
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property canonicalName (base name: "canonicalName")', function() {
      // uncomment below and update the code to test the property canonicalName
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property discoveryVersion (base name: "discoveryVersion")', function() {
      // uncomment below and update the code to test the property discoveryVersion
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property documentationLink (base name: "documentationLink")', function() {
      // uncomment below and update the code to test the property documentationLink
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property endpoints (base name: "endpoints")', function() {
      // uncomment below and update the code to test the property endpoints
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property exponentialBackoffDefault (base name: "exponentialBackoffDefault")', function() {
      // uncomment below and update the code to test the property exponentialBackoffDefault
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property icons (base name: "icons")', function() {
      // uncomment below and update the code to test the property icons
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property labels (base name: "labels")', function() {
      // uncomment below and update the code to test the property labels
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property methods (base name: "methods")', function() {
      // uncomment below and update the code to test the property methods
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property ownerDomain (base name: "ownerDomain")', function() {
      // uncomment below and update the code to test the property ownerDomain
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property ownerName (base name: "ownerName")', function() {
      // uncomment below and update the code to test the property ownerName
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property packagePath (base name: "packagePath")', function() {
      // uncomment below and update the code to test the property packagePath
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property revision (base name: "revision")', function() {
      // uncomment below and update the code to test the property revision
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property rootUrl (base name: "rootUrl")', function() {
      // uncomment below and update the code to test the property rootUrl
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property schemas (base name: "schemas")', function() {
      // uncomment below and update the code to test the property schemas
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property servicePath (base name: "servicePath")', function() {
      // uncomment below and update the code to test the property servicePath
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

    it('should have the property versionModule (base name: "version_module")', function() {
      // uncomment below and update the code to test the property versionModule
      //var instance = new ApiDiscoveryService.RestDescription();
      //expect(instance).to.be();
    });

  });

}));
