# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rest_method_media_upload_protocols import RestMethodMediaUploadProtocols
from openapi_server import util


class RestMethodMediaUpload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept: List[str]=None, max_size: str=None, protocols: RestMethodMediaUploadProtocols=None):
        """RestMethodMediaUpload - a model defined in OpenAPI

        :param accept: The accept of this RestMethodMediaUpload.
        :param max_size: The max_size of this RestMethodMediaUpload.
        :param protocols: The protocols of this RestMethodMediaUpload.
        """
        self.openapi_types = {
            'accept': List[str],
            'max_size': str,
            'protocols': RestMethodMediaUploadProtocols
        }

        self.attribute_map = {
            'accept': 'accept',
            'max_size': 'maxSize',
            'protocols': 'protocols'
        }

        self._accept = accept
        self._max_size = max_size
        self._protocols = protocols

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestMethodMediaUpload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestMethod_mediaUpload of this RestMethodMediaUpload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept(self):
        """Gets the accept of this RestMethodMediaUpload.

        MIME Media Ranges for acceptable media uploads to this method.

        :return: The accept of this RestMethodMediaUpload.
        :rtype: List[str]
        """
        return self._accept

    @accept.setter
    def accept(self, accept):
        """Sets the accept of this RestMethodMediaUpload.

        MIME Media Ranges for acceptable media uploads to this method.

        :param accept: The accept of this RestMethodMediaUpload.
        :type accept: List[str]
        """

        self._accept = accept

    @property
    def max_size(self):
        """Gets the max_size of this RestMethodMediaUpload.

        Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\".

        :return: The max_size of this RestMethodMediaUpload.
        :rtype: str
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this RestMethodMediaUpload.

        Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\".

        :param max_size: The max_size of this RestMethodMediaUpload.
        :type max_size: str
        """

        self._max_size = max_size

    @property
    def protocols(self):
        """Gets the protocols of this RestMethodMediaUpload.


        :return: The protocols of this RestMethodMediaUpload.
        :rtype: RestMethodMediaUploadProtocols
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this RestMethodMediaUpload.


        :param protocols: The protocols of this RestMethodMediaUpload.
        :type protocols: RestMethodMediaUploadProtocols
        """

        self._protocols = protocols
