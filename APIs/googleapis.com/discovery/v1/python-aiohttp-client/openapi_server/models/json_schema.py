# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema_annotations import JsonSchemaAnnotations
from openapi_server.models.json_schema_variant import JsonSchemaVariant
from openapi_server import util


class JsonSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ref: str=None, additional_properties: JsonSchema=None, annotations: JsonSchemaAnnotations=None, deprecated: bool=None, description: str=None, enum: List[str]=None, enum_deprecated: List[bool]=None, enum_descriptions: List[str]=None, format: str=None, id: str=None, items: JsonSchema=None, location: str=None, maximum: str=None, minimum: str=None, pattern: str=None, properties: Dict[str, JsonSchema]=None, read_only: bool=None, repeated: bool=None, required: bool=None, type: str=None, variant: JsonSchemaVariant=None):
        """JsonSchema - a model defined in OpenAPI

        :param ref: The ref of this JsonSchema.
        :param additional_properties: The additional_properties of this JsonSchema.
        :param annotations: The annotations of this JsonSchema.
        :param deprecated: The deprecated of this JsonSchema.
        :param description: The description of this JsonSchema.
        :param enum: The enum of this JsonSchema.
        :param enum_deprecated: The enum_deprecated of this JsonSchema.
        :param enum_descriptions: The enum_descriptions of this JsonSchema.
        :param format: The format of this JsonSchema.
        :param id: The id of this JsonSchema.
        :param items: The items of this JsonSchema.
        :param location: The location of this JsonSchema.
        :param maximum: The maximum of this JsonSchema.
        :param minimum: The minimum of this JsonSchema.
        :param pattern: The pattern of this JsonSchema.
        :param properties: The properties of this JsonSchema.
        :param read_only: The read_only of this JsonSchema.
        :param repeated: The repeated of this JsonSchema.
        :param required: The required of this JsonSchema.
        :param type: The type of this JsonSchema.
        :param variant: The variant of this JsonSchema.
        """
        self.openapi_types = {
            'ref': str,
            'additional_properties': JsonSchema,
            'annotations': JsonSchemaAnnotations,
            'deprecated': bool,
            'description': str,
            'enum': List[str],
            'enum_deprecated': List[bool],
            'enum_descriptions': List[str],
            'format': str,
            'id': str,
            'items': JsonSchema,
            'location': str,
            'maximum': str,
            'minimum': str,
            'pattern': str,
            'properties': Dict[str, JsonSchema],
            'read_only': bool,
            'repeated': bool,
            'required': bool,
            'type': str,
            'variant': JsonSchemaVariant
        }

        self.attribute_map = {
            'ref': '$ref',
            'additional_properties': 'additionalProperties',
            'annotations': 'annotations',
            'deprecated': 'deprecated',
            'description': 'description',
            'enum': 'enum',
            'enum_deprecated': 'enumDeprecated',
            'enum_descriptions': 'enumDescriptions',
            'format': 'format',
            'id': 'id',
            'items': 'items',
            'location': 'location',
            'maximum': 'maximum',
            'minimum': 'minimum',
            'pattern': 'pattern',
            'properties': 'properties',
            'read_only': 'readOnly',
            'repeated': 'repeated',
            'required': 'required',
            'type': 'type',
            'variant': 'variant'
        }

        self._ref = ref
        self._additional_properties = additional_properties
        self._annotations = annotations
        self._deprecated = deprecated
        self._description = description
        self._enum = enum
        self._enum_deprecated = enum_deprecated
        self._enum_descriptions = enum_descriptions
        self._format = format
        self._id = id
        self._items = items
        self._location = location
        self._maximum = maximum
        self._minimum = minimum
        self._pattern = pattern
        self._properties = properties
        self._read_only = read_only
        self._repeated = repeated
        self._required = required
        self._type = type
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonSchema of this JsonSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ref(self):
        """Gets the ref of this JsonSchema.

        A reference to another schema. The value of this property is the \"id\" of another schema.

        :return: The ref of this JsonSchema.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this JsonSchema.

        A reference to another schema. The value of this property is the \"id\" of another schema.

        :param ref: The ref of this JsonSchema.
        :type ref: str
        """

        self._ref = ref

    @property
    def additional_properties(self):
        """Gets the additional_properties of this JsonSchema.


        :return: The additional_properties of this JsonSchema.
        :rtype: JsonSchema
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this JsonSchema.


        :param additional_properties: The additional_properties of this JsonSchema.
        :type additional_properties: JsonSchema
        """

        self._additional_properties = additional_properties

    @property
    def annotations(self):
        """Gets the annotations of this JsonSchema.


        :return: The annotations of this JsonSchema.
        :rtype: JsonSchemaAnnotations
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this JsonSchema.


        :param annotations: The annotations of this JsonSchema.
        :type annotations: JsonSchemaAnnotations
        """

        self._annotations = annotations

    @property
    def deprecated(self):
        """Gets the deprecated of this JsonSchema.

        Whether the parameter is deprecated.

        :return: The deprecated of this JsonSchema.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this JsonSchema.

        Whether the parameter is deprecated.

        :param deprecated: The deprecated of this JsonSchema.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this JsonSchema.

        A description of this object.

        :return: The description of this JsonSchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JsonSchema.

        A description of this object.

        :param description: The description of this JsonSchema.
        :type description: str
        """

        self._description = description

    @property
    def enum(self):
        """Gets the enum of this JsonSchema.

        Values this parameter may take (if it is an enum).

        :return: The enum of this JsonSchema.
        :rtype: List[str]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this JsonSchema.

        Values this parameter may take (if it is an enum).

        :param enum: The enum of this JsonSchema.
        :type enum: List[str]
        """

        self._enum = enum

    @property
    def enum_deprecated(self):
        """Gets the enum_deprecated of this JsonSchema.

        The deprecation status for the enums. Each position maps to the corresponding value in the \"enum\" array.

        :return: The enum_deprecated of this JsonSchema.
        :rtype: List[bool]
        """
        return self._enum_deprecated

    @enum_deprecated.setter
    def enum_deprecated(self, enum_deprecated):
        """Sets the enum_deprecated of this JsonSchema.

        The deprecation status for the enums. Each position maps to the corresponding value in the \"enum\" array.

        :param enum_deprecated: The enum_deprecated of this JsonSchema.
        :type enum_deprecated: List[bool]
        """

        self._enum_deprecated = enum_deprecated

    @property
    def enum_descriptions(self):
        """Gets the enum_descriptions of this JsonSchema.

        The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.

        :return: The enum_descriptions of this JsonSchema.
        :rtype: List[str]
        """
        return self._enum_descriptions

    @enum_descriptions.setter
    def enum_descriptions(self, enum_descriptions):
        """Sets the enum_descriptions of this JsonSchema.

        The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.

        :param enum_descriptions: The enum_descriptions of this JsonSchema.
        :type enum_descriptions: List[str]
        """

        self._enum_descriptions = enum_descriptions

    @property
    def format(self):
        """Gets the format of this JsonSchema.

        An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23

        :return: The format of this JsonSchema.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this JsonSchema.

        An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23

        :param format: The format of this JsonSchema.
        :type format: str
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this JsonSchema.

        Unique identifier for this schema.

        :return: The id of this JsonSchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonSchema.

        Unique identifier for this schema.

        :param id: The id of this JsonSchema.
        :type id: str
        """

        self._id = id

    @property
    def items(self):
        """Gets the items of this JsonSchema.


        :return: The items of this JsonSchema.
        :rtype: JsonSchema
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JsonSchema.


        :param items: The items of this JsonSchema.
        :type items: JsonSchema
        """

        self._items = items

    @property
    def location(self):
        """Gets the location of this JsonSchema.

        Whether this parameter goes in the query or the path for REST requests.

        :return: The location of this JsonSchema.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this JsonSchema.

        Whether this parameter goes in the query or the path for REST requests.

        :param location: The location of this JsonSchema.
        :type location: str
        """

        self._location = location

    @property
    def maximum(self):
        """Gets the maximum of this JsonSchema.

        The maximum value of this parameter.

        :return: The maximum of this JsonSchema.
        :rtype: str
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this JsonSchema.

        The maximum value of this parameter.

        :param maximum: The maximum of this JsonSchema.
        :type maximum: str
        """

        self._maximum = maximum

    @property
    def minimum(self):
        """Gets the minimum of this JsonSchema.

        The minimum value of this parameter.

        :return: The minimum of this JsonSchema.
        :rtype: str
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this JsonSchema.

        The minimum value of this parameter.

        :param minimum: The minimum of this JsonSchema.
        :type minimum: str
        """

        self._minimum = minimum

    @property
    def pattern(self):
        """Gets the pattern of this JsonSchema.

        The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html

        :return: The pattern of this JsonSchema.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this JsonSchema.

        The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html

        :param pattern: The pattern of this JsonSchema.
        :type pattern: str
        """

        self._pattern = pattern

    @property
    def properties(self):
        """Gets the properties of this JsonSchema.

        If this is a schema for an object, list the schema for each property of this object.

        :return: The properties of this JsonSchema.
        :rtype: Dict[str, JsonSchema]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JsonSchema.

        If this is a schema for an object, list the schema for each property of this object.

        :param properties: The properties of this JsonSchema.
        :type properties: Dict[str, JsonSchema]
        """

        self._properties = properties

    @property
    def read_only(self):
        """Gets the read_only of this JsonSchema.

        The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.

        :return: The read_only of this JsonSchema.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this JsonSchema.

        The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.

        :param read_only: The read_only of this JsonSchema.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def repeated(self):
        """Gets the repeated of this JsonSchema.

        Whether this parameter may appear multiple times.

        :return: The repeated of this JsonSchema.
        :rtype: bool
        """
        return self._repeated

    @repeated.setter
    def repeated(self, repeated):
        """Sets the repeated of this JsonSchema.

        Whether this parameter may appear multiple times.

        :param repeated: The repeated of this JsonSchema.
        :type repeated: bool
        """

        self._repeated = repeated

    @property
    def required(self):
        """Gets the required of this JsonSchema.

        Whether the parameter is required.

        :return: The required of this JsonSchema.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this JsonSchema.

        Whether the parameter is required.

        :param required: The required of this JsonSchema.
        :type required: bool
        """

        self._required = required

    @property
    def type(self):
        """Gets the type of this JsonSchema.

        The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1

        :return: The type of this JsonSchema.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JsonSchema.

        The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1

        :param type: The type of this JsonSchema.
        :type type: str
        """

        self._type = type

    @property
    def variant(self):
        """Gets the variant of this JsonSchema.


        :return: The variant of this JsonSchema.
        :rtype: JsonSchemaVariant
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this JsonSchema.


        :param variant: The variant of this JsonSchema.
        :type variant: JsonSchemaVariant
        """

        self._variant = variant
