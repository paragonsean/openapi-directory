# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema import JsonSchema
from openapi_server.models.rest_method_media_upload import RestMethodMediaUpload
from openapi_server.models.rest_method_request import RestMethodRequest
from openapi_server.models.rest_method_response import RestMethodResponse
from openapi_server import util


class RestMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: bool=None, description: str=None, etag_required: bool=None, flat_path: str=None, http_method: str=None, id: str=None, media_upload: RestMethodMediaUpload=None, parameter_order: List[str]=None, parameters: Dict[str, JsonSchema]=None, path: str=None, request: RestMethodRequest=None, response: RestMethodResponse=None, scopes: List[str]=None, supports_media_download: bool=None, supports_media_upload: bool=None, supports_subscription: bool=None, use_media_download_service: bool=None):
        """RestMethod - a model defined in OpenAPI

        :param deprecated: The deprecated of this RestMethod.
        :param description: The description of this RestMethod.
        :param etag_required: The etag_required of this RestMethod.
        :param flat_path: The flat_path of this RestMethod.
        :param http_method: The http_method of this RestMethod.
        :param id: The id of this RestMethod.
        :param media_upload: The media_upload of this RestMethod.
        :param parameter_order: The parameter_order of this RestMethod.
        :param parameters: The parameters of this RestMethod.
        :param path: The path of this RestMethod.
        :param request: The request of this RestMethod.
        :param response: The response of this RestMethod.
        :param scopes: The scopes of this RestMethod.
        :param supports_media_download: The supports_media_download of this RestMethod.
        :param supports_media_upload: The supports_media_upload of this RestMethod.
        :param supports_subscription: The supports_subscription of this RestMethod.
        :param use_media_download_service: The use_media_download_service of this RestMethod.
        """
        self.openapi_types = {
            'deprecated': bool,
            'description': str,
            'etag_required': bool,
            'flat_path': str,
            'http_method': str,
            'id': str,
            'media_upload': RestMethodMediaUpload,
            'parameter_order': List[str],
            'parameters': Dict[str, JsonSchema],
            'path': str,
            'request': RestMethodRequest,
            'response': RestMethodResponse,
            'scopes': List[str],
            'supports_media_download': bool,
            'supports_media_upload': bool,
            'supports_subscription': bool,
            'use_media_download_service': bool
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'description': 'description',
            'etag_required': 'etagRequired',
            'flat_path': 'flatPath',
            'http_method': 'httpMethod',
            'id': 'id',
            'media_upload': 'mediaUpload',
            'parameter_order': 'parameterOrder',
            'parameters': 'parameters',
            'path': 'path',
            'request': 'request',
            'response': 'response',
            'scopes': 'scopes',
            'supports_media_download': 'supportsMediaDownload',
            'supports_media_upload': 'supportsMediaUpload',
            'supports_subscription': 'supportsSubscription',
            'use_media_download_service': 'useMediaDownloadService'
        }

        self._deprecated = deprecated
        self._description = description
        self._etag_required = etag_required
        self._flat_path = flat_path
        self._http_method = http_method
        self._id = id
        self._media_upload = media_upload
        self._parameter_order = parameter_order
        self._parameters = parameters
        self._path = path
        self._request = request
        self._response = response
        self._scopes = scopes
        self._supports_media_download = supports_media_download
        self._supports_media_upload = supports_media_upload
        self._supports_subscription = supports_subscription
        self._use_media_download_service = use_media_download_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestMethod of this RestMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this RestMethod.

        Whether this method is deprecated.

        :return: The deprecated of this RestMethod.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this RestMethod.

        Whether this method is deprecated.

        :param deprecated: The deprecated of this RestMethod.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this RestMethod.

        Description of this method.

        :return: The description of this RestMethod.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RestMethod.

        Description of this method.

        :param description: The description of this RestMethod.
        :type description: str
        """

        self._description = description

    @property
    def etag_required(self):
        """Gets the etag_required of this RestMethod.

        Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.

        :return: The etag_required of this RestMethod.
        :rtype: bool
        """
        return self._etag_required

    @etag_required.setter
    def etag_required(self, etag_required):
        """Sets the etag_required of this RestMethod.

        Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.

        :param etag_required: The etag_required of this RestMethod.
        :type etag_required: bool
        """

        self._etag_required = etag_required

    @property
    def flat_path(self):
        """Gets the flat_path of this RestMethod.

        The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.

        :return: The flat_path of this RestMethod.
        :rtype: str
        """
        return self._flat_path

    @flat_path.setter
    def flat_path(self, flat_path):
        """Sets the flat_path of this RestMethod.

        The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.

        :param flat_path: The flat_path of this RestMethod.
        :type flat_path: str
        """

        self._flat_path = flat_path

    @property
    def http_method(self):
        """Gets the http_method of this RestMethod.

        HTTP method used by this method.

        :return: The http_method of this RestMethod.
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this RestMethod.

        HTTP method used by this method.

        :param http_method: The http_method of this RestMethod.
        :type http_method: str
        """

        self._http_method = http_method

    @property
    def id(self):
        """Gets the id of this RestMethod.

        A unique ID for this method. This property can be used to match methods between different versions of Discovery.

        :return: The id of this RestMethod.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestMethod.

        A unique ID for this method. This property can be used to match methods between different versions of Discovery.

        :param id: The id of this RestMethod.
        :type id: str
        """

        self._id = id

    @property
    def media_upload(self):
        """Gets the media_upload of this RestMethod.


        :return: The media_upload of this RestMethod.
        :rtype: RestMethodMediaUpload
        """
        return self._media_upload

    @media_upload.setter
    def media_upload(self, media_upload):
        """Sets the media_upload of this RestMethod.


        :param media_upload: The media_upload of this RestMethod.
        :type media_upload: RestMethodMediaUpload
        """

        self._media_upload = media_upload

    @property
    def parameter_order(self):
        """Gets the parameter_order of this RestMethod.

        Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.

        :return: The parameter_order of this RestMethod.
        :rtype: List[str]
        """
        return self._parameter_order

    @parameter_order.setter
    def parameter_order(self, parameter_order):
        """Sets the parameter_order of this RestMethod.

        Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.

        :param parameter_order: The parameter_order of this RestMethod.
        :type parameter_order: List[str]
        """

        self._parameter_order = parameter_order

    @property
    def parameters(self):
        """Gets the parameters of this RestMethod.

        Details for all parameters in this method.

        :return: The parameters of this RestMethod.
        :rtype: Dict[str, JsonSchema]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RestMethod.

        Details for all parameters in this method.

        :param parameters: The parameters of this RestMethod.
        :type parameters: Dict[str, JsonSchema]
        """

        self._parameters = parameters

    @property
    def path(self):
        """Gets the path of this RestMethod.

        The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.

        :return: The path of this RestMethod.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RestMethod.

        The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.

        :param path: The path of this RestMethod.
        :type path: str
        """

        self._path = path

    @property
    def request(self):
        """Gets the request of this RestMethod.


        :return: The request of this RestMethod.
        :rtype: RestMethodRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this RestMethod.


        :param request: The request of this RestMethod.
        :type request: RestMethodRequest
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this RestMethod.


        :return: The response of this RestMethod.
        :rtype: RestMethodResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this RestMethod.


        :param response: The response of this RestMethod.
        :type response: RestMethodResponse
        """

        self._response = response

    @property
    def scopes(self):
        """Gets the scopes of this RestMethod.

        OAuth 2.0 scopes applicable to this method.

        :return: The scopes of this RestMethod.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this RestMethod.

        OAuth 2.0 scopes applicable to this method.

        :param scopes: The scopes of this RestMethod.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def supports_media_download(self):
        """Gets the supports_media_download of this RestMethod.

        Whether this method supports media downloads.

        :return: The supports_media_download of this RestMethod.
        :rtype: bool
        """
        return self._supports_media_download

    @supports_media_download.setter
    def supports_media_download(self, supports_media_download):
        """Sets the supports_media_download of this RestMethod.

        Whether this method supports media downloads.

        :param supports_media_download: The supports_media_download of this RestMethod.
        :type supports_media_download: bool
        """

        self._supports_media_download = supports_media_download

    @property
    def supports_media_upload(self):
        """Gets the supports_media_upload of this RestMethod.

        Whether this method supports media uploads.

        :return: The supports_media_upload of this RestMethod.
        :rtype: bool
        """
        return self._supports_media_upload

    @supports_media_upload.setter
    def supports_media_upload(self, supports_media_upload):
        """Sets the supports_media_upload of this RestMethod.

        Whether this method supports media uploads.

        :param supports_media_upload: The supports_media_upload of this RestMethod.
        :type supports_media_upload: bool
        """

        self._supports_media_upload = supports_media_upload

    @property
    def supports_subscription(self):
        """Gets the supports_subscription of this RestMethod.

        Whether this method supports subscriptions.

        :return: The supports_subscription of this RestMethod.
        :rtype: bool
        """
        return self._supports_subscription

    @supports_subscription.setter
    def supports_subscription(self, supports_subscription):
        """Sets the supports_subscription of this RestMethod.

        Whether this method supports subscriptions.

        :param supports_subscription: The supports_subscription of this RestMethod.
        :type supports_subscription: bool
        """

        self._supports_subscription = supports_subscription

    @property
    def use_media_download_service(self):
        """Gets the use_media_download_service of this RestMethod.

        Indicates that downloads from this method should use the download service URL (i.e. \"/download\"). Only applies if the method supports media download.

        :return: The use_media_download_service of this RestMethod.
        :rtype: bool
        """
        return self._use_media_download_service

    @use_media_download_service.setter
    def use_media_download_service(self, use_media_download_service):
        """Sets the use_media_download_service of this RestMethod.

        Indicates that downloads from this method should use the download service URL (i.e. \"/download\"). Only applies if the method supports media download.

        :param use_media_download_service: The use_media_download_service of this RestMethod.
        :type use_media_download_service: bool
        """

        self._use_media_download_service = use_media_download_service
