# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_schema_variant_map_inner import JsonSchemaVariantMapInner
from openapi_server import util


class JsonSchemaVariant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, discriminant: str=None, map: List[JsonSchemaVariantMapInner]=None):
        """JsonSchemaVariant - a model defined in OpenAPI

        :param discriminant: The discriminant of this JsonSchemaVariant.
        :param map: The map of this JsonSchemaVariant.
        """
        self.openapi_types = {
            'discriminant': str,
            'map': List[JsonSchemaVariantMapInner]
        }

        self.attribute_map = {
            'discriminant': 'discriminant',
            'map': 'map'
        }

        self._discriminant = discriminant
        self._map = map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonSchemaVariant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonSchema_variant of this JsonSchemaVariant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def discriminant(self):
        """Gets the discriminant of this JsonSchemaVariant.

        The name of the type discriminant property.

        :return: The discriminant of this JsonSchemaVariant.
        :rtype: str
        """
        return self._discriminant

    @discriminant.setter
    def discriminant(self, discriminant):
        """Sets the discriminant of this JsonSchemaVariant.

        The name of the type discriminant property.

        :param discriminant: The discriminant of this JsonSchemaVariant.
        :type discriminant: str
        """

        self._discriminant = discriminant

    @property
    def map(self):
        """Gets the map of this JsonSchemaVariant.

        The map of discriminant value to schema to use for parsing..

        :return: The map of this JsonSchemaVariant.
        :rtype: List[JsonSchemaVariantMapInner]
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this JsonSchemaVariant.

        The map of discriminant value to schema to use for parsing..

        :param map: The map of this JsonSchemaVariant.
        :type map: List[JsonSchemaVariantMapInner]
        """

        self._map = map
