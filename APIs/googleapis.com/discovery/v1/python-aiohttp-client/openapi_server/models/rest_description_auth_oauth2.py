# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rest_description_auth_oauth2_scopes_value import RestDescriptionAuthOauth2ScopesValue
from openapi_server import util


class RestDescriptionAuthOauth2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scopes: Dict[str, RestDescriptionAuthOauth2ScopesValue]=None):
        """RestDescriptionAuthOauth2 - a model defined in OpenAPI

        :param scopes: The scopes of this RestDescriptionAuthOauth2.
        """
        self.openapi_types = {
            'scopes': Dict[str, RestDescriptionAuthOauth2ScopesValue]
        }

        self.attribute_map = {
            'scopes': 'scopes'
        }

        self._scopes = scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestDescriptionAuthOauth2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestDescription_auth_oauth2 of this RestDescriptionAuthOauth2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scopes(self):
        """Gets the scopes of this RestDescriptionAuthOauth2.

        Available OAuth 2.0 scopes.

        :return: The scopes of this RestDescriptionAuthOauth2.
        :rtype: Dict[str, RestDescriptionAuthOauth2ScopesValue]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this RestDescriptionAuthOauth2.

        Available OAuth 2.0 scopes.

        :param scopes: The scopes of this RestDescriptionAuthOauth2.
        :type scopes: Dict[str, RestDescriptionAuthOauth2ScopesValue]
        """

        self._scopes = scopes
