# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rest_method import RestMethod
from openapi_server import util


class RestResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated: bool=None, methods: Dict[str, RestMethod]=None, resources: Dict[str, RestResource]=None):
        """RestResource - a model defined in OpenAPI

        :param deprecated: The deprecated of this RestResource.
        :param methods: The methods of this RestResource.
        :param resources: The resources of this RestResource.
        """
        self.openapi_types = {
            'deprecated': bool,
            'methods': Dict[str, RestMethod],
            'resources': Dict[str, RestResource]
        }

        self.attribute_map = {
            'deprecated': 'deprecated',
            'methods': 'methods',
            'resources': 'resources'
        }

        self._deprecated = deprecated
        self._methods = methods
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestResource of this RestResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated(self):
        """Gets the deprecated of this RestResource.

        Whether this resource is deprecated.

        :return: The deprecated of this RestResource.
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this RestResource.

        Whether this resource is deprecated.

        :param deprecated: The deprecated of this RestResource.
        :type deprecated: bool
        """

        self._deprecated = deprecated

    @property
    def methods(self):
        """Gets the methods of this RestResource.

        Methods on this resource.

        :return: The methods of this RestResource.
        :rtype: Dict[str, RestMethod]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this RestResource.

        Methods on this resource.

        :param methods: The methods of this RestResource.
        :type methods: Dict[str, RestMethod]
        """

        self._methods = methods

    @property
    def resources(self):
        """Gets the resources of this RestResource.

        Sub-resources on this resource.

        :return: The resources of this RestResource.
        :rtype: Dict[str, RestResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this RestResource.

        Sub-resources on this resource.

        :param resources: The resources of this RestResource.
        :type resources: Dict[str, RestResource]
        """

        self._resources = resources
