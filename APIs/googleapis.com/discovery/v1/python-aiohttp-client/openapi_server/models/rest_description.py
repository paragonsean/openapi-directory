# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.directory_list_items_inner_icons import DirectoryListItemsInnerIcons
from openapi_server.models.json_schema import JsonSchema
from openapi_server.models.rest_description_auth import RestDescriptionAuth
from openapi_server.models.rest_description_endpoints_inner import RestDescriptionEndpointsInner
from openapi_server.models.rest_method import RestMethod
from openapi_server.models.rest_resource import RestResource
from openapi_server import util


class RestDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth: RestDescriptionAuth=None, base_path: str=None, base_url: str=None, batch_path: str=None, canonical_name: str=None, description: str=None, discovery_version: str='v1', documentation_link: str=None, endpoints: List[RestDescriptionEndpointsInner]=None, etag: str=None, exponential_backoff_default: bool=None, features: List[str]=None, icons: DirectoryListItemsInnerIcons=None, id: str=None, kind: str='discovery#restDescription', labels: List[str]=None, methods: Dict[str, RestMethod]=None, name: str=None, owner_domain: str=None, owner_name: str=None, package_path: str=None, parameters: Dict[str, JsonSchema]=None, protocol: str='rest', resources: Dict[str, RestResource]=None, revision: str=None, root_url: str=None, schemas: Dict[str, JsonSchema]=None, service_path: str=None, title: str=None, version: str=None, version_module: bool=None):
        """RestDescription - a model defined in OpenAPI

        :param auth: The auth of this RestDescription.
        :param base_path: The base_path of this RestDescription.
        :param base_url: The base_url of this RestDescription.
        :param batch_path: The batch_path of this RestDescription.
        :param canonical_name: The canonical_name of this RestDescription.
        :param description: The description of this RestDescription.
        :param discovery_version: The discovery_version of this RestDescription.
        :param documentation_link: The documentation_link of this RestDescription.
        :param endpoints: The endpoints of this RestDescription.
        :param etag: The etag of this RestDescription.
        :param exponential_backoff_default: The exponential_backoff_default of this RestDescription.
        :param features: The features of this RestDescription.
        :param icons: The icons of this RestDescription.
        :param id: The id of this RestDescription.
        :param kind: The kind of this RestDescription.
        :param labels: The labels of this RestDescription.
        :param methods: The methods of this RestDescription.
        :param name: The name of this RestDescription.
        :param owner_domain: The owner_domain of this RestDescription.
        :param owner_name: The owner_name of this RestDescription.
        :param package_path: The package_path of this RestDescription.
        :param parameters: The parameters of this RestDescription.
        :param protocol: The protocol of this RestDescription.
        :param resources: The resources of this RestDescription.
        :param revision: The revision of this RestDescription.
        :param root_url: The root_url of this RestDescription.
        :param schemas: The schemas of this RestDescription.
        :param service_path: The service_path of this RestDescription.
        :param title: The title of this RestDescription.
        :param version: The version of this RestDescription.
        :param version_module: The version_module of this RestDescription.
        """
        self.openapi_types = {
            'auth': RestDescriptionAuth,
            'base_path': str,
            'base_url': str,
            'batch_path': str,
            'canonical_name': str,
            'description': str,
            'discovery_version': str,
            'documentation_link': str,
            'endpoints': List[RestDescriptionEndpointsInner],
            'etag': str,
            'exponential_backoff_default': bool,
            'features': List[str],
            'icons': DirectoryListItemsInnerIcons,
            'id': str,
            'kind': str,
            'labels': List[str],
            'methods': Dict[str, RestMethod],
            'name': str,
            'owner_domain': str,
            'owner_name': str,
            'package_path': str,
            'parameters': Dict[str, JsonSchema],
            'protocol': str,
            'resources': Dict[str, RestResource],
            'revision': str,
            'root_url': str,
            'schemas': Dict[str, JsonSchema],
            'service_path': str,
            'title': str,
            'version': str,
            'version_module': bool
        }

        self.attribute_map = {
            'auth': 'auth',
            'base_path': 'basePath',
            'base_url': 'baseUrl',
            'batch_path': 'batchPath',
            'canonical_name': 'canonicalName',
            'description': 'description',
            'discovery_version': 'discoveryVersion',
            'documentation_link': 'documentationLink',
            'endpoints': 'endpoints',
            'etag': 'etag',
            'exponential_backoff_default': 'exponentialBackoffDefault',
            'features': 'features',
            'icons': 'icons',
            'id': 'id',
            'kind': 'kind',
            'labels': 'labels',
            'methods': 'methods',
            'name': 'name',
            'owner_domain': 'ownerDomain',
            'owner_name': 'ownerName',
            'package_path': 'packagePath',
            'parameters': 'parameters',
            'protocol': 'protocol',
            'resources': 'resources',
            'revision': 'revision',
            'root_url': 'rootUrl',
            'schemas': 'schemas',
            'service_path': 'servicePath',
            'title': 'title',
            'version': 'version',
            'version_module': 'version_module'
        }

        self._auth = auth
        self._base_path = base_path
        self._base_url = base_url
        self._batch_path = batch_path
        self._canonical_name = canonical_name
        self._description = description
        self._discovery_version = discovery_version
        self._documentation_link = documentation_link
        self._endpoints = endpoints
        self._etag = etag
        self._exponential_backoff_default = exponential_backoff_default
        self._features = features
        self._icons = icons
        self._id = id
        self._kind = kind
        self._labels = labels
        self._methods = methods
        self._name = name
        self._owner_domain = owner_domain
        self._owner_name = owner_name
        self._package_path = package_path
        self._parameters = parameters
        self._protocol = protocol
        self._resources = resources
        self._revision = revision
        self._root_url = root_url
        self._schemas = schemas
        self._service_path = service_path
        self._title = title
        self._version = version
        self._version_module = version_module

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestDescription of this RestDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth(self):
        """Gets the auth of this RestDescription.


        :return: The auth of this RestDescription.
        :rtype: RestDescriptionAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this RestDescription.


        :param auth: The auth of this RestDescription.
        :type auth: RestDescriptionAuth
        """

        self._auth = auth

    @property
    def base_path(self):
        """Gets the base_path of this RestDescription.

        [DEPRECATED] The base path for REST requests.

        :return: The base_path of this RestDescription.
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this RestDescription.

        [DEPRECATED] The base path for REST requests.

        :param base_path: The base_path of this RestDescription.
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def base_url(self):
        """Gets the base_url of this RestDescription.

        [DEPRECATED] The base URL for REST requests.

        :return: The base_url of this RestDescription.
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this RestDescription.

        [DEPRECATED] The base URL for REST requests.

        :param base_url: The base_url of this RestDescription.
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def batch_path(self):
        """Gets the batch_path of this RestDescription.

        The path for REST batch requests.

        :return: The batch_path of this RestDescription.
        :rtype: str
        """
        return self._batch_path

    @batch_path.setter
    def batch_path(self, batch_path):
        """Sets the batch_path of this RestDescription.

        The path for REST batch requests.

        :param batch_path: The batch_path of this RestDescription.
        :type batch_path: str
        """

        self._batch_path = batch_path

    @property
    def canonical_name(self):
        """Gets the canonical_name of this RestDescription.

        Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.

        :return: The canonical_name of this RestDescription.
        :rtype: str
        """
        return self._canonical_name

    @canonical_name.setter
    def canonical_name(self, canonical_name):
        """Sets the canonical_name of this RestDescription.

        Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.

        :param canonical_name: The canonical_name of this RestDescription.
        :type canonical_name: str
        """

        self._canonical_name = canonical_name

    @property
    def description(self):
        """Gets the description of this RestDescription.

        The description of this API.

        :return: The description of this RestDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RestDescription.

        The description of this API.

        :param description: The description of this RestDescription.
        :type description: str
        """

        self._description = description

    @property
    def discovery_version(self):
        """Gets the discovery_version of this RestDescription.

        Indicate the version of the Discovery API used to generate this doc.

        :return: The discovery_version of this RestDescription.
        :rtype: str
        """
        return self._discovery_version

    @discovery_version.setter
    def discovery_version(self, discovery_version):
        """Sets the discovery_version of this RestDescription.

        Indicate the version of the Discovery API used to generate this doc.

        :param discovery_version: The discovery_version of this RestDescription.
        :type discovery_version: str
        """

        self._discovery_version = discovery_version

    @property
    def documentation_link(self):
        """Gets the documentation_link of this RestDescription.

        A link to human readable documentation for the API.

        :return: The documentation_link of this RestDescription.
        :rtype: str
        """
        return self._documentation_link

    @documentation_link.setter
    def documentation_link(self, documentation_link):
        """Sets the documentation_link of this RestDescription.

        A link to human readable documentation for the API.

        :param documentation_link: The documentation_link of this RestDescription.
        :type documentation_link: str
        """

        self._documentation_link = documentation_link

    @property
    def endpoints(self):
        """Gets the endpoints of this RestDescription.

        A list of location-based endpoint objects for this API. Each object contains the endpoint URL, location, description and deprecation status.

        :return: The endpoints of this RestDescription.
        :rtype: List[RestDescriptionEndpointsInner]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this RestDescription.

        A list of location-based endpoint objects for this API. Each object contains the endpoint URL, location, description and deprecation status.

        :param endpoints: The endpoints of this RestDescription.
        :type endpoints: List[RestDescriptionEndpointsInner]
        """

        self._endpoints = endpoints

    @property
    def etag(self):
        """Gets the etag of this RestDescription.

        The ETag for this response.

        :return: The etag of this RestDescription.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this RestDescription.

        The ETag for this response.

        :param etag: The etag of this RestDescription.
        :type etag: str
        """

        self._etag = etag

    @property
    def exponential_backoff_default(self):
        """Gets the exponential_backoff_default of this RestDescription.

        Enable exponential backoff for suitable methods in the generated clients.

        :return: The exponential_backoff_default of this RestDescription.
        :rtype: bool
        """
        return self._exponential_backoff_default

    @exponential_backoff_default.setter
    def exponential_backoff_default(self, exponential_backoff_default):
        """Sets the exponential_backoff_default of this RestDescription.

        Enable exponential backoff for suitable methods in the generated clients.

        :param exponential_backoff_default: The exponential_backoff_default of this RestDescription.
        :type exponential_backoff_default: bool
        """

        self._exponential_backoff_default = exponential_backoff_default

    @property
    def features(self):
        """Gets the features of this RestDescription.

        A list of supported features for this API.

        :return: The features of this RestDescription.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this RestDescription.

        A list of supported features for this API.

        :param features: The features of this RestDescription.
        :type features: List[str]
        """

        self._features = features

    @property
    def icons(self):
        """Gets the icons of this RestDescription.


        :return: The icons of this RestDescription.
        :rtype: DirectoryListItemsInnerIcons
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this RestDescription.


        :param icons: The icons of this RestDescription.
        :type icons: DirectoryListItemsInnerIcons
        """

        self._icons = icons

    @property
    def id(self):
        """Gets the id of this RestDescription.

        The ID of this API.

        :return: The id of this RestDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RestDescription.

        The ID of this API.

        :param id: The id of this RestDescription.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this RestDescription.

        The kind for this response.

        :return: The kind of this RestDescription.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RestDescription.

        The kind for this response.

        :param kind: The kind of this RestDescription.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this RestDescription.

        Labels for the status of this API, such as labs or deprecated.

        :return: The labels of this RestDescription.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RestDescription.

        Labels for the status of this API, such as labs or deprecated.

        :param labels: The labels of this RestDescription.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def methods(self):
        """Gets the methods of this RestDescription.

        API-level methods for this API.

        :return: The methods of this RestDescription.
        :rtype: Dict[str, RestMethod]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this RestDescription.

        API-level methods for this API.

        :param methods: The methods of this RestDescription.
        :type methods: Dict[str, RestMethod]
        """

        self._methods = methods

    @property
    def name(self):
        """Gets the name of this RestDescription.

        The name of this API.

        :return: The name of this RestDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RestDescription.

        The name of this API.

        :param name: The name of this RestDescription.
        :type name: str
        """

        self._name = name

    @property
    def owner_domain(self):
        """Gets the owner_domain of this RestDescription.

        The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.

        :return: The owner_domain of this RestDescription.
        :rtype: str
        """
        return self._owner_domain

    @owner_domain.setter
    def owner_domain(self, owner_domain):
        """Sets the owner_domain of this RestDescription.

        The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.

        :param owner_domain: The owner_domain of this RestDescription.
        :type owner_domain: str
        """

        self._owner_domain = owner_domain

    @property
    def owner_name(self):
        """Gets the owner_name of this RestDescription.

        The name of the owner of this API. See ownerDomain.

        :return: The owner_name of this RestDescription.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this RestDescription.

        The name of the owner of this API. See ownerDomain.

        :param owner_name: The owner_name of this RestDescription.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def package_path(self):
        """Gets the package_path of this RestDescription.

        The package of the owner of this API. See ownerDomain.

        :return: The package_path of this RestDescription.
        :rtype: str
        """
        return self._package_path

    @package_path.setter
    def package_path(self, package_path):
        """Sets the package_path of this RestDescription.

        The package of the owner of this API. See ownerDomain.

        :param package_path: The package_path of this RestDescription.
        :type package_path: str
        """

        self._package_path = package_path

    @property
    def parameters(self):
        """Gets the parameters of this RestDescription.

        Common parameters that apply across all apis.

        :return: The parameters of this RestDescription.
        :rtype: Dict[str, JsonSchema]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this RestDescription.

        Common parameters that apply across all apis.

        :param parameters: The parameters of this RestDescription.
        :type parameters: Dict[str, JsonSchema]
        """

        self._parameters = parameters

    @property
    def protocol(self):
        """Gets the protocol of this RestDescription.

        The protocol described by this document.

        :return: The protocol of this RestDescription.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RestDescription.

        The protocol described by this document.

        :param protocol: The protocol of this RestDescription.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def resources(self):
        """Gets the resources of this RestDescription.

        The resources in this API.

        :return: The resources of this RestDescription.
        :rtype: Dict[str, RestResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this RestDescription.

        The resources in this API.

        :param resources: The resources of this RestDescription.
        :type resources: Dict[str, RestResource]
        """

        self._resources = resources

    @property
    def revision(self):
        """Gets the revision of this RestDescription.

        The version of this API.

        :return: The revision of this RestDescription.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this RestDescription.

        The version of this API.

        :param revision: The revision of this RestDescription.
        :type revision: str
        """

        self._revision = revision

    @property
    def root_url(self):
        """Gets the root_url of this RestDescription.

        The root URL under which all API services live.

        :return: The root_url of this RestDescription.
        :rtype: str
        """
        return self._root_url

    @root_url.setter
    def root_url(self, root_url):
        """Sets the root_url of this RestDescription.

        The root URL under which all API services live.

        :param root_url: The root_url of this RestDescription.
        :type root_url: str
        """

        self._root_url = root_url

    @property
    def schemas(self):
        """Gets the schemas of this RestDescription.

        The schemas for this API.

        :return: The schemas of this RestDescription.
        :rtype: Dict[str, JsonSchema]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this RestDescription.

        The schemas for this API.

        :param schemas: The schemas of this RestDescription.
        :type schemas: Dict[str, JsonSchema]
        """

        self._schemas = schemas

    @property
    def service_path(self):
        """Gets the service_path of this RestDescription.

        The base path for all REST requests.

        :return: The service_path of this RestDescription.
        :rtype: str
        """
        return self._service_path

    @service_path.setter
    def service_path(self, service_path):
        """Sets the service_path of this RestDescription.

        The base path for all REST requests.

        :param service_path: The service_path of this RestDescription.
        :type service_path: str
        """

        self._service_path = service_path

    @property
    def title(self):
        """Gets the title of this RestDescription.

        The title of this API.

        :return: The title of this RestDescription.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RestDescription.

        The title of this API.

        :param title: The title of this RestDescription.
        :type title: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this RestDescription.

        The version of this API.

        :return: The version of this RestDescription.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this RestDescription.

        The version of this API.

        :param version: The version of this RestDescription.
        :type version: str
        """

        self._version = version

    @property
    def version_module(self):
        """Gets the version_module of this RestDescription.


        :return: The version_module of this RestDescription.
        :rtype: bool
        """
        return self._version_module

    @version_module.setter
    def version_module(self, version_module):
        """Sets the version_module of this RestDescription.


        :param version_module: The version_module of this RestDescription.
        :type version_module: bool
        """

        self._version_module = version_module
