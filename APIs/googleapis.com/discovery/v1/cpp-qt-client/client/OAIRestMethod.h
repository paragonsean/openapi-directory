/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestMethod.h
 *
 * 
 */

#ifndef OAIRestMethod_H
#define OAIRestMethod_H

#include <QJsonObject>

#include "OAIJsonSchema.h"
#include "OAIRestMethod_mediaUpload.h"
#include "OAIRestMethod_request.h"
#include "OAIRestMethod_response.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRestMethod_mediaUpload;
class OAIJsonSchema;
class OAIRestMethod_request;
class OAIRestMethod_response;

class OAIRestMethod : public OAIObject {
public:
    OAIRestMethod();
    OAIRestMethod(QString json);
    ~OAIRestMethod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isDeprecated() const;
    void setDeprecated(const bool &deprecated);
    bool is_deprecated_Set() const;
    bool is_deprecated_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEtagRequired() const;
    void setEtagRequired(const bool &etag_required);
    bool is_etag_required_Set() const;
    bool is_etag_required_Valid() const;

    QString getFlatPath() const;
    void setFlatPath(const QString &flat_path);
    bool is_flat_path_Set() const;
    bool is_flat_path_Valid() const;

    QString getHttpMethod() const;
    void setHttpMethod(const QString &http_method);
    bool is_http_method_Set() const;
    bool is_http_method_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIRestMethod_mediaUpload getMediaUpload() const;
    void setMediaUpload(const OAIRestMethod_mediaUpload &media_upload);
    bool is_media_upload_Set() const;
    bool is_media_upload_Valid() const;

    QList<QString> getParameterOrder() const;
    void setParameterOrder(const QList<QString> &parameter_order);
    bool is_parameter_order_Set() const;
    bool is_parameter_order_Valid() const;

    QMap<QString, OAIJsonSchema> getParameters() const;
    void setParameters(const QMap<QString, OAIJsonSchema> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getPath() const;
    void setPath(const QString &path);
    bool is_path_Set() const;
    bool is_path_Valid() const;

    OAIRestMethod_request getRequest() const;
    void setRequest(const OAIRestMethod_request &request);
    bool is_request_Set() const;
    bool is_request_Valid() const;

    OAIRestMethod_response getResponse() const;
    void setResponse(const OAIRestMethod_response &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    bool isSupportsMediaDownload() const;
    void setSupportsMediaDownload(const bool &supports_media_download);
    bool is_supports_media_download_Set() const;
    bool is_supports_media_download_Valid() const;

    bool isSupportsMediaUpload() const;
    void setSupportsMediaUpload(const bool &supports_media_upload);
    bool is_supports_media_upload_Set() const;
    bool is_supports_media_upload_Valid() const;

    bool isSupportsSubscription() const;
    void setSupportsSubscription(const bool &supports_subscription);
    bool is_supports_subscription_Set() const;
    bool is_supports_subscription_Valid() const;

    bool isUseMediaDownloadService() const;
    void setUseMediaDownloadService(const bool &use_media_download_service);
    bool is_use_media_download_service_Set() const;
    bool is_use_media_download_service_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_deprecated;
    bool m_deprecated_isSet;
    bool m_deprecated_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_etag_required;
    bool m_etag_required_isSet;
    bool m_etag_required_isValid;

    QString m_flat_path;
    bool m_flat_path_isSet;
    bool m_flat_path_isValid;

    QString m_http_method;
    bool m_http_method_isSet;
    bool m_http_method_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIRestMethod_mediaUpload m_media_upload;
    bool m_media_upload_isSet;
    bool m_media_upload_isValid;

    QList<QString> m_parameter_order;
    bool m_parameter_order_isSet;
    bool m_parameter_order_isValid;

    QMap<QString, OAIJsonSchema> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_path;
    bool m_path_isSet;
    bool m_path_isValid;

    OAIRestMethod_request m_request;
    bool m_request_isSet;
    bool m_request_isValid;

    OAIRestMethod_response m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    bool m_supports_media_download;
    bool m_supports_media_download_isSet;
    bool m_supports_media_download_isValid;

    bool m_supports_media_upload;
    bool m_supports_media_upload_isSet;
    bool m_supports_media_upload_isValid;

    bool m_supports_subscription;
    bool m_supports_subscription_isSet;
    bool m_supports_subscription_isValid;

    bool m_use_media_download_service;
    bool m_use_media_download_service_isSet;
    bool m_use_media_download_service_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestMethod)

#endif // OAIRestMethod_H
