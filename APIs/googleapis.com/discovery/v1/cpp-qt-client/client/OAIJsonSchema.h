/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJsonSchema.h
 *
 * 
 */

#ifndef OAIJsonSchema_H
#define OAIJsonSchema_H

#include <QJsonObject>

#include "OAIJsonSchema_annotations.h"
#include "OAIJsonSchema_variant.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJsonSchema_annotations;
class OAIJsonSchema_variant;

class OAIJsonSchema : public OAIObject {
public:
    OAIJsonSchema();
    OAIJsonSchema(QString json);
    ~OAIJsonSchema() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRef() const;
    void setRef(const QString &ref);
    bool is_ref_Set() const;
    bool is_ref_Valid() const;

    OAIJsonSchema getAdditionalProperties() const;
    void setAdditionalProperties(const OAIJsonSchema &additional_properties);
    bool is_additional_properties_Set() const;
    bool is_additional_properties_Valid() const;

    OAIJsonSchema_annotations getAnnotations() const;
    void setAnnotations(const OAIJsonSchema_annotations &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    bool isDeprecated() const;
    void setDeprecated(const bool &deprecated);
    bool is_deprecated_Set() const;
    bool is_deprecated_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getREnum() const;
    void setREnum(const QList<QString> &r_enum);
    bool is_r_enum_Set() const;
    bool is_r_enum_Valid() const;

    QList<bool> getEnumDeprecated() const;
    void setEnumDeprecated(const QList<bool> &enum_deprecated);
    bool is_enum_deprecated_Set() const;
    bool is_enum_deprecated_Valid() const;

    QList<QString> getEnumDescriptions() const;
    void setEnumDescriptions(const QList<QString> &enum_descriptions);
    bool is_enum_descriptions_Set() const;
    bool is_enum_descriptions_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIJsonSchema getItems() const;
    void setItems(const OAIJsonSchema &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getMaximum() const;
    void setMaximum(const QString &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    QString getMinimum() const;
    void setMinimum(const QString &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    QString getPattern() const;
    void setPattern(const QString &pattern);
    bool is_pattern_Set() const;
    bool is_pattern_Valid() const;

    QMap<QString, OAIJsonSchema> getProperties() const;
    void setProperties(const QMap<QString, OAIJsonSchema> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    bool isReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    bool isRepeated() const;
    void setRepeated(const bool &repeated);
    bool is_repeated_Set() const;
    bool is_repeated_Valid() const;

    bool isRequired() const;
    void setRequired(const bool &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIJsonSchema_variant getVariant() const;
    void setVariant(const OAIJsonSchema_variant &variant);
    bool is_variant_Set() const;
    bool is_variant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ref;
    bool m_ref_isSet;
    bool m_ref_isValid;

    OAIJsonSchema m_additional_properties;
    bool m_additional_properties_isSet;
    bool m_additional_properties_isValid;

    OAIJsonSchema_annotations m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    bool m_deprecated;
    bool m_deprecated_isSet;
    bool m_deprecated_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_r_enum;
    bool m_r_enum_isSet;
    bool m_r_enum_isValid;

    QList<bool> m_enum_deprecated;
    bool m_enum_deprecated_isSet;
    bool m_enum_deprecated_isValid;

    QList<QString> m_enum_descriptions;
    bool m_enum_descriptions_isSet;
    bool m_enum_descriptions_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIJsonSchema m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;

    QString m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    QString m_pattern;
    bool m_pattern_isSet;
    bool m_pattern_isValid;

    QMap<QString, OAIJsonSchema> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;

    bool m_repeated;
    bool m_repeated_isSet;
    bool m_repeated_isValid;

    bool m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIJsonSchema_variant m_variant;
    bool m_variant_isSet;
    bool m_variant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJsonSchema)

#endif // OAIJsonSchema_H
