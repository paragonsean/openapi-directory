/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestMethod::OAIRestMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestMethod::OAIRestMethod() {
    this->initializeModel();
}

OAIRestMethod::~OAIRestMethod() {}

void OAIRestMethod::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_required_isSet = false;
    m_etag_required_isValid = false;

    m_flat_path_isSet = false;
    m_flat_path_isValid = false;

    m_http_method_isSet = false;
    m_http_method_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_upload_isSet = false;
    m_media_upload_isValid = false;

    m_parameter_order_isSet = false;
    m_parameter_order_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_supports_media_download_isSet = false;
    m_supports_media_download_isValid = false;

    m_supports_media_upload_isSet = false;
    m_supports_media_upload_isValid = false;

    m_supports_subscription_isSet = false;
    m_supports_subscription_isValid = false;

    m_use_media_download_service_isSet = false;
    m_use_media_download_service_isValid = false;
}

void OAIRestMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestMethod::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_required_isValid = ::OpenAPI::fromJsonValue(m_etag_required, json[QString("etagRequired")]);
    m_etag_required_isSet = !json[QString("etagRequired")].isNull() && m_etag_required_isValid;

    m_flat_path_isValid = ::OpenAPI::fromJsonValue(m_flat_path, json[QString("flatPath")]);
    m_flat_path_isSet = !json[QString("flatPath")].isNull() && m_flat_path_isValid;

    m_http_method_isValid = ::OpenAPI::fromJsonValue(m_http_method, json[QString("httpMethod")]);
    m_http_method_isSet = !json[QString("httpMethod")].isNull() && m_http_method_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_upload_isValid = ::OpenAPI::fromJsonValue(m_media_upload, json[QString("mediaUpload")]);
    m_media_upload_isSet = !json[QString("mediaUpload")].isNull() && m_media_upload_isValid;

    m_parameter_order_isValid = ::OpenAPI::fromJsonValue(m_parameter_order, json[QString("parameterOrder")]);
    m_parameter_order_isSet = !json[QString("parameterOrder")].isNull() && m_parameter_order_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_supports_media_download_isValid = ::OpenAPI::fromJsonValue(m_supports_media_download, json[QString("supportsMediaDownload")]);
    m_supports_media_download_isSet = !json[QString("supportsMediaDownload")].isNull() && m_supports_media_download_isValid;

    m_supports_media_upload_isValid = ::OpenAPI::fromJsonValue(m_supports_media_upload, json[QString("supportsMediaUpload")]);
    m_supports_media_upload_isSet = !json[QString("supportsMediaUpload")].isNull() && m_supports_media_upload_isValid;

    m_supports_subscription_isValid = ::OpenAPI::fromJsonValue(m_supports_subscription, json[QString("supportsSubscription")]);
    m_supports_subscription_isSet = !json[QString("supportsSubscription")].isNull() && m_supports_subscription_isValid;

    m_use_media_download_service_isValid = ::OpenAPI::fromJsonValue(m_use_media_download_service, json[QString("useMediaDownloadService")]);
    m_use_media_download_service_isSet = !json[QString("useMediaDownloadService")].isNull() && m_use_media_download_service_isValid;
}

QString OAIRestMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_required_isSet) {
        obj.insert(QString("etagRequired"), ::OpenAPI::toJsonValue(m_etag_required));
    }
    if (m_flat_path_isSet) {
        obj.insert(QString("flatPath"), ::OpenAPI::toJsonValue(m_flat_path));
    }
    if (m_http_method_isSet) {
        obj.insert(QString("httpMethod"), ::OpenAPI::toJsonValue(m_http_method));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_upload.isSet()) {
        obj.insert(QString("mediaUpload"), ::OpenAPI::toJsonValue(m_media_upload));
    }
    if (m_parameter_order.size() > 0) {
        obj.insert(QString("parameterOrder"), ::OpenAPI::toJsonValue(m_parameter_order));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_supports_media_download_isSet) {
        obj.insert(QString("supportsMediaDownload"), ::OpenAPI::toJsonValue(m_supports_media_download));
    }
    if (m_supports_media_upload_isSet) {
        obj.insert(QString("supportsMediaUpload"), ::OpenAPI::toJsonValue(m_supports_media_upload));
    }
    if (m_supports_subscription_isSet) {
        obj.insert(QString("supportsSubscription"), ::OpenAPI::toJsonValue(m_supports_subscription));
    }
    if (m_use_media_download_service_isSet) {
        obj.insert(QString("useMediaDownloadService"), ::OpenAPI::toJsonValue(m_use_media_download_service));
    }
    return obj;
}

bool OAIRestMethod::isDeprecated() const {
    return m_deprecated;
}
void OAIRestMethod::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIRestMethod::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIRestMethod::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIRestMethod::getDescription() const {
    return m_description;
}
void OAIRestMethod::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestMethod::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestMethod::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIRestMethod::isEtagRequired() const {
    return m_etag_required;
}
void OAIRestMethod::setEtagRequired(const bool &etag_required) {
    m_etag_required = etag_required;
    m_etag_required_isSet = true;
}

bool OAIRestMethod::is_etag_required_Set() const{
    return m_etag_required_isSet;
}

bool OAIRestMethod::is_etag_required_Valid() const{
    return m_etag_required_isValid;
}

QString OAIRestMethod::getFlatPath() const {
    return m_flat_path;
}
void OAIRestMethod::setFlatPath(const QString &flat_path) {
    m_flat_path = flat_path;
    m_flat_path_isSet = true;
}

bool OAIRestMethod::is_flat_path_Set() const{
    return m_flat_path_isSet;
}

bool OAIRestMethod::is_flat_path_Valid() const{
    return m_flat_path_isValid;
}

QString OAIRestMethod::getHttpMethod() const {
    return m_http_method;
}
void OAIRestMethod::setHttpMethod(const QString &http_method) {
    m_http_method = http_method;
    m_http_method_isSet = true;
}

bool OAIRestMethod::is_http_method_Set() const{
    return m_http_method_isSet;
}

bool OAIRestMethod::is_http_method_Valid() const{
    return m_http_method_isValid;
}

QString OAIRestMethod::getId() const {
    return m_id;
}
void OAIRestMethod::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRestMethod::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRestMethod::is_id_Valid() const{
    return m_id_isValid;
}

OAIRestMethod_mediaUpload OAIRestMethod::getMediaUpload() const {
    return m_media_upload;
}
void OAIRestMethod::setMediaUpload(const OAIRestMethod_mediaUpload &media_upload) {
    m_media_upload = media_upload;
    m_media_upload_isSet = true;
}

bool OAIRestMethod::is_media_upload_Set() const{
    return m_media_upload_isSet;
}

bool OAIRestMethod::is_media_upload_Valid() const{
    return m_media_upload_isValid;
}

QList<QString> OAIRestMethod::getParameterOrder() const {
    return m_parameter_order;
}
void OAIRestMethod::setParameterOrder(const QList<QString> &parameter_order) {
    m_parameter_order = parameter_order;
    m_parameter_order_isSet = true;
}

bool OAIRestMethod::is_parameter_order_Set() const{
    return m_parameter_order_isSet;
}

bool OAIRestMethod::is_parameter_order_Valid() const{
    return m_parameter_order_isValid;
}

QMap<QString, OAIJsonSchema> OAIRestMethod::getParameters() const {
    return m_parameters;
}
void OAIRestMethod::setParameters(const QMap<QString, OAIJsonSchema> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRestMethod::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRestMethod::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIRestMethod::getPath() const {
    return m_path;
}
void OAIRestMethod::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRestMethod::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRestMethod::is_path_Valid() const{
    return m_path_isValid;
}

OAIRestMethod_request OAIRestMethod::getRequest() const {
    return m_request;
}
void OAIRestMethod::setRequest(const OAIRestMethod_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIRestMethod::is_request_Set() const{
    return m_request_isSet;
}

bool OAIRestMethod::is_request_Valid() const{
    return m_request_isValid;
}

OAIRestMethod_response OAIRestMethod::getResponse() const {
    return m_response;
}
void OAIRestMethod::setResponse(const OAIRestMethod_response &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIRestMethod::is_response_Set() const{
    return m_response_isSet;
}

bool OAIRestMethod::is_response_Valid() const{
    return m_response_isValid;
}

QList<QString> OAIRestMethod::getScopes() const {
    return m_scopes;
}
void OAIRestMethod::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIRestMethod::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIRestMethod::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIRestMethod::isSupportsMediaDownload() const {
    return m_supports_media_download;
}
void OAIRestMethod::setSupportsMediaDownload(const bool &supports_media_download) {
    m_supports_media_download = supports_media_download;
    m_supports_media_download_isSet = true;
}

bool OAIRestMethod::is_supports_media_download_Set() const{
    return m_supports_media_download_isSet;
}

bool OAIRestMethod::is_supports_media_download_Valid() const{
    return m_supports_media_download_isValid;
}

bool OAIRestMethod::isSupportsMediaUpload() const {
    return m_supports_media_upload;
}
void OAIRestMethod::setSupportsMediaUpload(const bool &supports_media_upload) {
    m_supports_media_upload = supports_media_upload;
    m_supports_media_upload_isSet = true;
}

bool OAIRestMethod::is_supports_media_upload_Set() const{
    return m_supports_media_upload_isSet;
}

bool OAIRestMethod::is_supports_media_upload_Valid() const{
    return m_supports_media_upload_isValid;
}

bool OAIRestMethod::isSupportsSubscription() const {
    return m_supports_subscription;
}
void OAIRestMethod::setSupportsSubscription(const bool &supports_subscription) {
    m_supports_subscription = supports_subscription;
    m_supports_subscription_isSet = true;
}

bool OAIRestMethod::is_supports_subscription_Set() const{
    return m_supports_subscription_isSet;
}

bool OAIRestMethod::is_supports_subscription_Valid() const{
    return m_supports_subscription_isValid;
}

bool OAIRestMethod::isUseMediaDownloadService() const {
    return m_use_media_download_service;
}
void OAIRestMethod::setUseMediaDownloadService(const bool &use_media_download_service) {
    m_use_media_download_service = use_media_download_service;
    m_use_media_download_service_isSet = true;
}

bool OAIRestMethod::is_use_media_download_service_Set() const{
    return m_use_media_download_service_isSet;
}

bool OAIRestMethod::is_use_media_download_service_Valid() const{
    return m_use_media_download_service_isValid;
}

bool OAIRestMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flat_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_upload.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_media_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_media_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_media_download_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
