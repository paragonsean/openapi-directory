/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectoryList_items_inner_icons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectoryList_items_inner_icons::OAIDirectoryList_items_inner_icons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectoryList_items_inner_icons::OAIDirectoryList_items_inner_icons() {
    this->initializeModel();
}

OAIDirectoryList_items_inner_icons::~OAIDirectoryList_items_inner_icons() {}

void OAIDirectoryList_items_inner_icons::initializeModel() {

    m_x16_isSet = false;
    m_x16_isValid = false;

    m_x32_isSet = false;
    m_x32_isValid = false;
}

void OAIDirectoryList_items_inner_icons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectoryList_items_inner_icons::fromJsonObject(QJsonObject json) {

    m_x16_isValid = ::OpenAPI::fromJsonValue(m_x16, json[QString("x16")]);
    m_x16_isSet = !json[QString("x16")].isNull() && m_x16_isValid;

    m_x32_isValid = ::OpenAPI::fromJsonValue(m_x32, json[QString("x32")]);
    m_x32_isSet = !json[QString("x32")].isNull() && m_x32_isValid;
}

QString OAIDirectoryList_items_inner_icons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectoryList_items_inner_icons::asJsonObject() const {
    QJsonObject obj;
    if (m_x16_isSet) {
        obj.insert(QString("x16"), ::OpenAPI::toJsonValue(m_x16));
    }
    if (m_x32_isSet) {
        obj.insert(QString("x32"), ::OpenAPI::toJsonValue(m_x32));
    }
    return obj;
}

QString OAIDirectoryList_items_inner_icons::getX16() const {
    return m_x16;
}
void OAIDirectoryList_items_inner_icons::setX16(const QString &x16) {
    m_x16 = x16;
    m_x16_isSet = true;
}

bool OAIDirectoryList_items_inner_icons::is_x16_Set() const{
    return m_x16_isSet;
}

bool OAIDirectoryList_items_inner_icons::is_x16_Valid() const{
    return m_x16_isValid;
}

QString OAIDirectoryList_items_inner_icons::getX32() const {
    return m_x32;
}
void OAIDirectoryList_items_inner_icons::setX32(const QString &x32) {
    m_x32 = x32;
    m_x32_isSet = true;
}

bool OAIDirectoryList_items_inner_icons::is_x32_Set() const{
    return m_x32_isSet;
}

bool OAIDirectoryList_items_inner_icons::is_x32_Valid() const{
    return m_x32_isValid;
}

bool OAIDirectoryList_items_inner_icons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_x16_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x32_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectoryList_items_inner_icons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
