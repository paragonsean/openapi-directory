/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestResource::OAIRestResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestResource::OAIRestResource() {
    this->initializeModel();
}

OAIRestResource::~OAIRestResource() {}

void OAIRestResource::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIRestResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestResource::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIRestResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestResource::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_methods.size() > 0) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

bool OAIRestResource::isDeprecated() const {
    return m_deprecated;
}
void OAIRestResource::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIRestResource::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIRestResource::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QMap<QString, OAIRestMethod> OAIRestResource::getMethods() const {
    return m_methods;
}
void OAIRestResource::setMethods(const QMap<QString, OAIRestMethod> &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIRestResource::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIRestResource::is_methods_Valid() const{
    return m_methods_isValid;
}

QMap<QString, OAIRestResource> OAIRestResource::getResources() const {
    return m_resources;
}
void OAIRestResource::setResources(const QMap<QString, OAIRestResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIRestResource::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIRestResource::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIRestResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
