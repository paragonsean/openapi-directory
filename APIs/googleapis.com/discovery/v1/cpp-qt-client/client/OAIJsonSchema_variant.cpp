/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonSchema_variant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonSchema_variant::OAIJsonSchema_variant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonSchema_variant::OAIJsonSchema_variant() {
    this->initializeModel();
}

OAIJsonSchema_variant::~OAIJsonSchema_variant() {}

void OAIJsonSchema_variant::initializeModel() {

    m_discriminant_isSet = false;
    m_discriminant_isValid = false;

    m_map_isSet = false;
    m_map_isValid = false;
}

void OAIJsonSchema_variant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonSchema_variant::fromJsonObject(QJsonObject json) {

    m_discriminant_isValid = ::OpenAPI::fromJsonValue(m_discriminant, json[QString("discriminant")]);
    m_discriminant_isSet = !json[QString("discriminant")].isNull() && m_discriminant_isValid;

    m_map_isValid = ::OpenAPI::fromJsonValue(m_map, json[QString("map")]);
    m_map_isSet = !json[QString("map")].isNull() && m_map_isValid;
}

QString OAIJsonSchema_variant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonSchema_variant::asJsonObject() const {
    QJsonObject obj;
    if (m_discriminant_isSet) {
        obj.insert(QString("discriminant"), ::OpenAPI::toJsonValue(m_discriminant));
    }
    if (m_map.size() > 0) {
        obj.insert(QString("map"), ::OpenAPI::toJsonValue(m_map));
    }
    return obj;
}

QString OAIJsonSchema_variant::getDiscriminant() const {
    return m_discriminant;
}
void OAIJsonSchema_variant::setDiscriminant(const QString &discriminant) {
    m_discriminant = discriminant;
    m_discriminant_isSet = true;
}

bool OAIJsonSchema_variant::is_discriminant_Set() const{
    return m_discriminant_isSet;
}

bool OAIJsonSchema_variant::is_discriminant_Valid() const{
    return m_discriminant_isValid;
}

QList<OAIJsonSchema_variant_map_inner> OAIJsonSchema_variant::getMap() const {
    return m_map;
}
void OAIJsonSchema_variant::setMap(const QList<OAIJsonSchema_variant_map_inner> &map) {
    m_map = map;
    m_map_isSet = true;
}

bool OAIJsonSchema_variant::is_map_Set() const{
    return m_map_isSet;
}

bool OAIJsonSchema_variant::is_map_Valid() const{
    return m_map_isValid;
}

bool OAIJsonSchema_variant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discriminant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonSchema_variant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
