/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestMethod_mediaUpload_protocols.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestMethod_mediaUpload_protocols::OAIRestMethod_mediaUpload_protocols(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestMethod_mediaUpload_protocols::OAIRestMethod_mediaUpload_protocols() {
    this->initializeModel();
}

OAIRestMethod_mediaUpload_protocols::~OAIRestMethod_mediaUpload_protocols() {}

void OAIRestMethod_mediaUpload_protocols::initializeModel() {

    m_resumable_isSet = false;
    m_resumable_isValid = false;

    m_simple_isSet = false;
    m_simple_isValid = false;
}

void OAIRestMethod_mediaUpload_protocols::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestMethod_mediaUpload_protocols::fromJsonObject(QJsonObject json) {

    m_resumable_isValid = ::OpenAPI::fromJsonValue(m_resumable, json[QString("resumable")]);
    m_resumable_isSet = !json[QString("resumable")].isNull() && m_resumable_isValid;

    m_simple_isValid = ::OpenAPI::fromJsonValue(m_simple, json[QString("simple")]);
    m_simple_isSet = !json[QString("simple")].isNull() && m_simple_isValid;
}

QString OAIRestMethod_mediaUpload_protocols::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestMethod_mediaUpload_protocols::asJsonObject() const {
    QJsonObject obj;
    if (m_resumable.isSet()) {
        obj.insert(QString("resumable"), ::OpenAPI::toJsonValue(m_resumable));
    }
    if (m_simple.isSet()) {
        obj.insert(QString("simple"), ::OpenAPI::toJsonValue(m_simple));
    }
    return obj;
}

OAIRestMethod_mediaUpload_protocols_resumable OAIRestMethod_mediaUpload_protocols::getResumable() const {
    return m_resumable;
}
void OAIRestMethod_mediaUpload_protocols::setResumable(const OAIRestMethod_mediaUpload_protocols_resumable &resumable) {
    m_resumable = resumable;
    m_resumable_isSet = true;
}

bool OAIRestMethod_mediaUpload_protocols::is_resumable_Set() const{
    return m_resumable_isSet;
}

bool OAIRestMethod_mediaUpload_protocols::is_resumable_Valid() const{
    return m_resumable_isValid;
}

OAIRestMethod_mediaUpload_protocols_simple OAIRestMethod_mediaUpload_protocols::getSimple() const {
    return m_simple;
}
void OAIRestMethod_mediaUpload_protocols::setSimple(const OAIRestMethod_mediaUpload_protocols_simple &simple) {
    m_simple = simple;
    m_simple_isSet = true;
}

bool OAIRestMethod_mediaUpload_protocols::is_simple_Set() const{
    return m_simple_isSet;
}

bool OAIRestMethod_mediaUpload_protocols::is_simple_Valid() const{
    return m_simple_isValid;
}

bool OAIRestMethod_mediaUpload_protocols::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resumable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestMethod_mediaUpload_protocols::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
