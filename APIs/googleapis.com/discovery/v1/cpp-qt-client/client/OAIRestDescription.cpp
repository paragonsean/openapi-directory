/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestDescription::OAIRestDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestDescription::OAIRestDescription() {
    this->initializeModel();
}

OAIRestDescription::~OAIRestDescription() {}

void OAIRestDescription::initializeModel() {

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_base_path_isSet = false;
    m_base_path_isValid = false;

    m_base_url_isSet = false;
    m_base_url_isValid = false;

    m_batch_path_isSet = false;
    m_batch_path_isValid = false;

    m_canonical_name_isSet = false;
    m_canonical_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovery_version_isSet = false;
    m_discovery_version_isValid = false;

    m_documentation_link_isSet = false;
    m_documentation_link_isValid = false;

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_exponential_backoff_default_isSet = false;
    m_exponential_backoff_default_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_domain_isSet = false;
    m_owner_domain_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_package_path_isSet = false;
    m_package_path_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_root_url_isSet = false;
    m_root_url_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;

    m_service_path_isSet = false;
    m_service_path_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_version_module_isSet = false;
    m_version_module_isValid = false;
}

void OAIRestDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestDescription::fromJsonObject(QJsonObject json) {

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("basePath")]);
    m_base_path_isSet = !json[QString("basePath")].isNull() && m_base_path_isValid;

    m_base_url_isValid = ::OpenAPI::fromJsonValue(m_base_url, json[QString("baseUrl")]);
    m_base_url_isSet = !json[QString("baseUrl")].isNull() && m_base_url_isValid;

    m_batch_path_isValid = ::OpenAPI::fromJsonValue(m_batch_path, json[QString("batchPath")]);
    m_batch_path_isSet = !json[QString("batchPath")].isNull() && m_batch_path_isValid;

    m_canonical_name_isValid = ::OpenAPI::fromJsonValue(m_canonical_name, json[QString("canonicalName")]);
    m_canonical_name_isSet = !json[QString("canonicalName")].isNull() && m_canonical_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovery_version_isValid = ::OpenAPI::fromJsonValue(m_discovery_version, json[QString("discoveryVersion")]);
    m_discovery_version_isSet = !json[QString("discoveryVersion")].isNull() && m_discovery_version_isValid;

    m_documentation_link_isValid = ::OpenAPI::fromJsonValue(m_documentation_link, json[QString("documentationLink")]);
    m_documentation_link_isSet = !json[QString("documentationLink")].isNull() && m_documentation_link_isValid;

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_exponential_backoff_default_isValid = ::OpenAPI::fromJsonValue(m_exponential_backoff_default, json[QString("exponentialBackoffDefault")]);
    m_exponential_backoff_default_isSet = !json[QString("exponentialBackoffDefault")].isNull() && m_exponential_backoff_default_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_domain_isValid = ::OpenAPI::fromJsonValue(m_owner_domain, json[QString("ownerDomain")]);
    m_owner_domain_isSet = !json[QString("ownerDomain")].isNull() && m_owner_domain_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_package_path_isValid = ::OpenAPI::fromJsonValue(m_package_path, json[QString("packagePath")]);
    m_package_path_isSet = !json[QString("packagePath")].isNull() && m_package_path_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_root_url_isValid = ::OpenAPI::fromJsonValue(m_root_url, json[QString("rootUrl")]);
    m_root_url_isSet = !json[QString("rootUrl")].isNull() && m_root_url_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;

    m_service_path_isValid = ::OpenAPI::fromJsonValue(m_service_path, json[QString("servicePath")]);
    m_service_path_isSet = !json[QString("servicePath")].isNull() && m_service_path_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_version_module_isValid = ::OpenAPI::fromJsonValue(m_version_module, json[QString("version_module")]);
    m_version_module_isSet = !json[QString("version_module")].isNull() && m_version_module_isValid;
}

QString OAIRestDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_base_path_isSet) {
        obj.insert(QString("basePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    if (m_base_url_isSet) {
        obj.insert(QString("baseUrl"), ::OpenAPI::toJsonValue(m_base_url));
    }
    if (m_batch_path_isSet) {
        obj.insert(QString("batchPath"), ::OpenAPI::toJsonValue(m_batch_path));
    }
    if (m_canonical_name_isSet) {
        obj.insert(QString("canonicalName"), ::OpenAPI::toJsonValue(m_canonical_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovery_version_isSet) {
        obj.insert(QString("discoveryVersion"), ::OpenAPI::toJsonValue(m_discovery_version));
    }
    if (m_documentation_link_isSet) {
        obj.insert(QString("documentationLink"), ::OpenAPI::toJsonValue(m_documentation_link));
    }
    if (m_endpoints.size() > 0) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_exponential_backoff_default_isSet) {
        obj.insert(QString("exponentialBackoffDefault"), ::OpenAPI::toJsonValue(m_exponential_backoff_default));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_icons.isSet()) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_methods.size() > 0) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_domain_isSet) {
        obj.insert(QString("ownerDomain"), ::OpenAPI::toJsonValue(m_owner_domain));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_package_path_isSet) {
        obj.insert(QString("packagePath"), ::OpenAPI::toJsonValue(m_package_path));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_root_url_isSet) {
        obj.insert(QString("rootUrl"), ::OpenAPI::toJsonValue(m_root_url));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    if (m_service_path_isSet) {
        obj.insert(QString("servicePath"), ::OpenAPI::toJsonValue(m_service_path));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_version_module_isSet) {
        obj.insert(QString("version_module"), ::OpenAPI::toJsonValue(m_version_module));
    }
    return obj;
}

OAIRestDescription_auth OAIRestDescription::getAuth() const {
    return m_auth;
}
void OAIRestDescription::setAuth(const OAIRestDescription_auth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIRestDescription::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIRestDescription::is_auth_Valid() const{
    return m_auth_isValid;
}

QString OAIRestDescription::getBasePath() const {
    return m_base_path;
}
void OAIRestDescription::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIRestDescription::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIRestDescription::is_base_path_Valid() const{
    return m_base_path_isValid;
}

QString OAIRestDescription::getBaseUrl() const {
    return m_base_url;
}
void OAIRestDescription::setBaseUrl(const QString &base_url) {
    m_base_url = base_url;
    m_base_url_isSet = true;
}

bool OAIRestDescription::is_base_url_Set() const{
    return m_base_url_isSet;
}

bool OAIRestDescription::is_base_url_Valid() const{
    return m_base_url_isValid;
}

QString OAIRestDescription::getBatchPath() const {
    return m_batch_path;
}
void OAIRestDescription::setBatchPath(const QString &batch_path) {
    m_batch_path = batch_path;
    m_batch_path_isSet = true;
}

bool OAIRestDescription::is_batch_path_Set() const{
    return m_batch_path_isSet;
}

bool OAIRestDescription::is_batch_path_Valid() const{
    return m_batch_path_isValid;
}

QString OAIRestDescription::getCanonicalName() const {
    return m_canonical_name;
}
void OAIRestDescription::setCanonicalName(const QString &canonical_name) {
    m_canonical_name = canonical_name;
    m_canonical_name_isSet = true;
}

bool OAIRestDescription::is_canonical_name_Set() const{
    return m_canonical_name_isSet;
}

bool OAIRestDescription::is_canonical_name_Valid() const{
    return m_canonical_name_isValid;
}

QString OAIRestDescription::getDescription() const {
    return m_description;
}
void OAIRestDescription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestDescription::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestDescription::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRestDescription::getDiscoveryVersion() const {
    return m_discovery_version;
}
void OAIRestDescription::setDiscoveryVersion(const QString &discovery_version) {
    m_discovery_version = discovery_version;
    m_discovery_version_isSet = true;
}

bool OAIRestDescription::is_discovery_version_Set() const{
    return m_discovery_version_isSet;
}

bool OAIRestDescription::is_discovery_version_Valid() const{
    return m_discovery_version_isValid;
}

QString OAIRestDescription::getDocumentationLink() const {
    return m_documentation_link;
}
void OAIRestDescription::setDocumentationLink(const QString &documentation_link) {
    m_documentation_link = documentation_link;
    m_documentation_link_isSet = true;
}

bool OAIRestDescription::is_documentation_link_Set() const{
    return m_documentation_link_isSet;
}

bool OAIRestDescription::is_documentation_link_Valid() const{
    return m_documentation_link_isValid;
}

QList<OAIRestDescription_endpoints_inner> OAIRestDescription::getEndpoints() const {
    return m_endpoints;
}
void OAIRestDescription::setEndpoints(const QList<OAIRestDescription_endpoints_inner> &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIRestDescription::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIRestDescription::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

QString OAIRestDescription::getEtag() const {
    return m_etag;
}
void OAIRestDescription::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRestDescription::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRestDescription::is_etag_Valid() const{
    return m_etag_isValid;
}

bool OAIRestDescription::isExponentialBackoffDefault() const {
    return m_exponential_backoff_default;
}
void OAIRestDescription::setExponentialBackoffDefault(const bool &exponential_backoff_default) {
    m_exponential_backoff_default = exponential_backoff_default;
    m_exponential_backoff_default_isSet = true;
}

bool OAIRestDescription::is_exponential_backoff_default_Set() const{
    return m_exponential_backoff_default_isSet;
}

bool OAIRestDescription::is_exponential_backoff_default_Valid() const{
    return m_exponential_backoff_default_isValid;
}

QList<QString> OAIRestDescription::getFeatures() const {
    return m_features;
}
void OAIRestDescription::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIRestDescription::is_features_Set() const{
    return m_features_isSet;
}

bool OAIRestDescription::is_features_Valid() const{
    return m_features_isValid;
}

OAIDirectoryList_items_inner_icons OAIRestDescription::getIcons() const {
    return m_icons;
}
void OAIRestDescription::setIcons(const OAIDirectoryList_items_inner_icons &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIRestDescription::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIRestDescription::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAIRestDescription::getId() const {
    return m_id;
}
void OAIRestDescription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRestDescription::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRestDescription::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRestDescription::getKind() const {
    return m_kind;
}
void OAIRestDescription::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRestDescription::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRestDescription::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIRestDescription::getLabels() const {
    return m_labels;
}
void OAIRestDescription::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRestDescription::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRestDescription::is_labels_Valid() const{
    return m_labels_isValid;
}

QMap<QString, OAIRestMethod> OAIRestDescription::getMethods() const {
    return m_methods;
}
void OAIRestDescription::setMethods(const QMap<QString, OAIRestMethod> &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIRestDescription::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIRestDescription::is_methods_Valid() const{
    return m_methods_isValid;
}

QString OAIRestDescription::getName() const {
    return m_name;
}
void OAIRestDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRestDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRestDescription::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRestDescription::getOwnerDomain() const {
    return m_owner_domain;
}
void OAIRestDescription::setOwnerDomain(const QString &owner_domain) {
    m_owner_domain = owner_domain;
    m_owner_domain_isSet = true;
}

bool OAIRestDescription::is_owner_domain_Set() const{
    return m_owner_domain_isSet;
}

bool OAIRestDescription::is_owner_domain_Valid() const{
    return m_owner_domain_isValid;
}

QString OAIRestDescription::getOwnerName() const {
    return m_owner_name;
}
void OAIRestDescription::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIRestDescription::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIRestDescription::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIRestDescription::getPackagePath() const {
    return m_package_path;
}
void OAIRestDescription::setPackagePath(const QString &package_path) {
    m_package_path = package_path;
    m_package_path_isSet = true;
}

bool OAIRestDescription::is_package_path_Set() const{
    return m_package_path_isSet;
}

bool OAIRestDescription::is_package_path_Valid() const{
    return m_package_path_isValid;
}

QMap<QString, OAIJsonSchema> OAIRestDescription::getParameters() const {
    return m_parameters;
}
void OAIRestDescription::setParameters(const QMap<QString, OAIJsonSchema> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIRestDescription::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIRestDescription::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIRestDescription::getProtocol() const {
    return m_protocol;
}
void OAIRestDescription::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIRestDescription::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIRestDescription::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QMap<QString, OAIRestResource> OAIRestDescription::getResources() const {
    return m_resources;
}
void OAIRestDescription::setResources(const QMap<QString, OAIRestResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIRestDescription::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIRestDescription::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIRestDescription::getRevision() const {
    return m_revision;
}
void OAIRestDescription::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIRestDescription::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIRestDescription::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIRestDescription::getRootUrl() const {
    return m_root_url;
}
void OAIRestDescription::setRootUrl(const QString &root_url) {
    m_root_url = root_url;
    m_root_url_isSet = true;
}

bool OAIRestDescription::is_root_url_Set() const{
    return m_root_url_isSet;
}

bool OAIRestDescription::is_root_url_Valid() const{
    return m_root_url_isValid;
}

QMap<QString, OAIJsonSchema> OAIRestDescription::getSchemas() const {
    return m_schemas;
}
void OAIRestDescription::setSchemas(const QMap<QString, OAIJsonSchema> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIRestDescription::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIRestDescription::is_schemas_Valid() const{
    return m_schemas_isValid;
}

QString OAIRestDescription::getServicePath() const {
    return m_service_path;
}
void OAIRestDescription::setServicePath(const QString &service_path) {
    m_service_path = service_path;
    m_service_path_isSet = true;
}

bool OAIRestDescription::is_service_path_Set() const{
    return m_service_path_isSet;
}

bool OAIRestDescription::is_service_path_Valid() const{
    return m_service_path_isValid;
}

QString OAIRestDescription::getTitle() const {
    return m_title;
}
void OAIRestDescription::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRestDescription::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRestDescription::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIRestDescription::getVersion() const {
    return m_version;
}
void OAIRestDescription::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRestDescription::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRestDescription::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRestDescription::isVersionModule() const {
    return m_version_module;
}
void OAIRestDescription::setVersionModule(const bool &version_module) {
    m_version_module = version_module;
    m_version_module_isSet = true;
}

bool OAIRestDescription::is_version_module_Set() const{
    return m_version_module_isSet;
}

bool OAIRestDescription::is_version_module_Valid() const{
    return m_version_module_isValid;
}

bool OAIRestDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canonical_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exponential_backoff_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_module_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
