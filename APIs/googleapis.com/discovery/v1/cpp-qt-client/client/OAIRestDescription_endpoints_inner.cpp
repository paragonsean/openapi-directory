/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestDescription_endpoints_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestDescription_endpoints_inner::OAIRestDescription_endpoints_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestDescription_endpoints_inner::OAIRestDescription_endpoints_inner() {
    this->initializeModel();
}

OAIRestDescription_endpoints_inner::~OAIRestDescription_endpoints_inner() {}

void OAIRestDescription_endpoints_inner::initializeModel() {

    m_deprecated_isSet = false;
    m_deprecated_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIRestDescription_endpoints_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestDescription_endpoints_inner::fromJsonObject(QJsonObject json) {

    m_deprecated_isValid = ::OpenAPI::fromJsonValue(m_deprecated, json[QString("deprecated")]);
    m_deprecated_isSet = !json[QString("deprecated")].isNull() && m_deprecated_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIRestDescription_endpoints_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestDescription_endpoints_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_deprecated_isSet) {
        obj.insert(QString("deprecated"), ::OpenAPI::toJsonValue(m_deprecated));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

bool OAIRestDescription_endpoints_inner::isDeprecated() const {
    return m_deprecated;
}
void OAIRestDescription_endpoints_inner::setDeprecated(const bool &deprecated) {
    m_deprecated = deprecated;
    m_deprecated_isSet = true;
}

bool OAIRestDescription_endpoints_inner::is_deprecated_Set() const{
    return m_deprecated_isSet;
}

bool OAIRestDescription_endpoints_inner::is_deprecated_Valid() const{
    return m_deprecated_isValid;
}

QString OAIRestDescription_endpoints_inner::getDescription() const {
    return m_description;
}
void OAIRestDescription_endpoints_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRestDescription_endpoints_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRestDescription_endpoints_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRestDescription_endpoints_inner::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIRestDescription_endpoints_inner::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIRestDescription_endpoints_inner::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIRestDescription_endpoints_inner::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIRestDescription_endpoints_inner::getLocation() const {
    return m_location;
}
void OAIRestDescription_endpoints_inner::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRestDescription_endpoints_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRestDescription_endpoints_inner::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIRestDescription_endpoints_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deprecated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestDescription_endpoints_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
