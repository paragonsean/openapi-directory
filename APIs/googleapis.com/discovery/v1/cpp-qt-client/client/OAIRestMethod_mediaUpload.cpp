/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestMethod_mediaUpload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestMethod_mediaUpload::OAIRestMethod_mediaUpload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestMethod_mediaUpload::OAIRestMethod_mediaUpload() {
    this->initializeModel();
}

OAIRestMethod_mediaUpload::~OAIRestMethod_mediaUpload() {}

void OAIRestMethod_mediaUpload::initializeModel() {

    m_accept_isSet = false;
    m_accept_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_protocols_isSet = false;
    m_protocols_isValid = false;
}

void OAIRestMethod_mediaUpload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestMethod_mediaUpload::fromJsonObject(QJsonObject json) {

    m_accept_isValid = ::OpenAPI::fromJsonValue(m_accept, json[QString("accept")]);
    m_accept_isSet = !json[QString("accept")].isNull() && m_accept_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;

    m_protocols_isValid = ::OpenAPI::fromJsonValue(m_protocols, json[QString("protocols")]);
    m_protocols_isSet = !json[QString("protocols")].isNull() && m_protocols_isValid;
}

QString OAIRestMethod_mediaUpload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestMethod_mediaUpload::asJsonObject() const {
    QJsonObject obj;
    if (m_accept.size() > 0) {
        obj.insert(QString("accept"), ::OpenAPI::toJsonValue(m_accept));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_protocols.isSet()) {
        obj.insert(QString("protocols"), ::OpenAPI::toJsonValue(m_protocols));
    }
    return obj;
}

QList<QString> OAIRestMethod_mediaUpload::getAccept() const {
    return m_accept;
}
void OAIRestMethod_mediaUpload::setAccept(const QList<QString> &accept) {
    m_accept = accept;
    m_accept_isSet = true;
}

bool OAIRestMethod_mediaUpload::is_accept_Set() const{
    return m_accept_isSet;
}

bool OAIRestMethod_mediaUpload::is_accept_Valid() const{
    return m_accept_isValid;
}

QString OAIRestMethod_mediaUpload::getMaxSize() const {
    return m_max_size;
}
void OAIRestMethod_mediaUpload::setMaxSize(const QString &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIRestMethod_mediaUpload::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIRestMethod_mediaUpload::is_max_size_Valid() const{
    return m_max_size_isValid;
}

OAIRestMethod_mediaUpload_protocols OAIRestMethod_mediaUpload::getProtocols() const {
    return m_protocols;
}
void OAIRestMethod_mediaUpload::setProtocols(const OAIRestMethod_mediaUpload_protocols &protocols) {
    m_protocols = protocols;
    m_protocols_isSet = true;
}

bool OAIRestMethod_mediaUpload::is_protocols_Set() const{
    return m_protocols_isSet;
}

bool OAIRestMethod_mediaUpload::is_protocols_Valid() const{
    return m_protocols_isValid;
}

bool OAIRestMethod_mediaUpload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocols.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestMethod_mediaUpload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
