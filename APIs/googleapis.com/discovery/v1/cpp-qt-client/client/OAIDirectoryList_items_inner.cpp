/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectoryList_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectoryList_items_inner::OAIDirectoryList_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectoryList_items_inner::OAIDirectoryList_items_inner() {
    this->initializeModel();
}

OAIDirectoryList_items_inner::~OAIDirectoryList_items_inner() {}

void OAIDirectoryList_items_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovery_link_isSet = false;
    m_discovery_link_isValid = false;

    m_discovery_rest_url_isSet = false;
    m_discovery_rest_url_isValid = false;

    m_documentation_link_isSet = false;
    m_documentation_link_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_isSet = false;
    m_preferred_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDirectoryList_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectoryList_items_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovery_link_isValid = ::OpenAPI::fromJsonValue(m_discovery_link, json[QString("discoveryLink")]);
    m_discovery_link_isSet = !json[QString("discoveryLink")].isNull() && m_discovery_link_isValid;

    m_discovery_rest_url_isValid = ::OpenAPI::fromJsonValue(m_discovery_rest_url, json[QString("discoveryRestUrl")]);
    m_discovery_rest_url_isSet = !json[QString("discoveryRestUrl")].isNull() && m_discovery_rest_url_isValid;

    m_documentation_link_isValid = ::OpenAPI::fromJsonValue(m_documentation_link, json[QString("documentationLink")]);
    m_documentation_link_isSet = !json[QString("documentationLink")].isNull() && m_documentation_link_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_isValid = ::OpenAPI::fromJsonValue(m_preferred, json[QString("preferred")]);
    m_preferred_isSet = !json[QString("preferred")].isNull() && m_preferred_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIDirectoryList_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectoryList_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovery_link_isSet) {
        obj.insert(QString("discoveryLink"), ::OpenAPI::toJsonValue(m_discovery_link));
    }
    if (m_discovery_rest_url_isSet) {
        obj.insert(QString("discoveryRestUrl"), ::OpenAPI::toJsonValue(m_discovery_rest_url));
    }
    if (m_documentation_link_isSet) {
        obj.insert(QString("documentationLink"), ::OpenAPI::toJsonValue(m_documentation_link));
    }
    if (m_icons.isSet()) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_isSet) {
        obj.insert(QString("preferred"), ::OpenAPI::toJsonValue(m_preferred));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIDirectoryList_items_inner::getDescription() const {
    return m_description;
}
void OAIDirectoryList_items_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDirectoryList_items_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDirectoryList_items_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDirectoryList_items_inner::getDiscoveryLink() const {
    return m_discovery_link;
}
void OAIDirectoryList_items_inner::setDiscoveryLink(const QString &discovery_link) {
    m_discovery_link = discovery_link;
    m_discovery_link_isSet = true;
}

bool OAIDirectoryList_items_inner::is_discovery_link_Set() const{
    return m_discovery_link_isSet;
}

bool OAIDirectoryList_items_inner::is_discovery_link_Valid() const{
    return m_discovery_link_isValid;
}

QString OAIDirectoryList_items_inner::getDiscoveryRestUrl() const {
    return m_discovery_rest_url;
}
void OAIDirectoryList_items_inner::setDiscoveryRestUrl(const QString &discovery_rest_url) {
    m_discovery_rest_url = discovery_rest_url;
    m_discovery_rest_url_isSet = true;
}

bool OAIDirectoryList_items_inner::is_discovery_rest_url_Set() const{
    return m_discovery_rest_url_isSet;
}

bool OAIDirectoryList_items_inner::is_discovery_rest_url_Valid() const{
    return m_discovery_rest_url_isValid;
}

QString OAIDirectoryList_items_inner::getDocumentationLink() const {
    return m_documentation_link;
}
void OAIDirectoryList_items_inner::setDocumentationLink(const QString &documentation_link) {
    m_documentation_link = documentation_link;
    m_documentation_link_isSet = true;
}

bool OAIDirectoryList_items_inner::is_documentation_link_Set() const{
    return m_documentation_link_isSet;
}

bool OAIDirectoryList_items_inner::is_documentation_link_Valid() const{
    return m_documentation_link_isValid;
}

OAIDirectoryList_items_inner_icons OAIDirectoryList_items_inner::getIcons() const {
    return m_icons;
}
void OAIDirectoryList_items_inner::setIcons(const OAIDirectoryList_items_inner_icons &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIDirectoryList_items_inner::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIDirectoryList_items_inner::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAIDirectoryList_items_inner::getId() const {
    return m_id;
}
void OAIDirectoryList_items_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDirectoryList_items_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDirectoryList_items_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDirectoryList_items_inner::getKind() const {
    return m_kind;
}
void OAIDirectoryList_items_inner::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDirectoryList_items_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDirectoryList_items_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIDirectoryList_items_inner::getLabels() const {
    return m_labels;
}
void OAIDirectoryList_items_inner::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIDirectoryList_items_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIDirectoryList_items_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIDirectoryList_items_inner::getName() const {
    return m_name;
}
void OAIDirectoryList_items_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDirectoryList_items_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDirectoryList_items_inner::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIDirectoryList_items_inner::isPreferred() const {
    return m_preferred;
}
void OAIDirectoryList_items_inner::setPreferred(const bool &preferred) {
    m_preferred = preferred;
    m_preferred_isSet = true;
}

bool OAIDirectoryList_items_inner::is_preferred_Set() const{
    return m_preferred_isSet;
}

bool OAIDirectoryList_items_inner::is_preferred_Valid() const{
    return m_preferred_isValid;
}

QString OAIDirectoryList_items_inner::getTitle() const {
    return m_title;
}
void OAIDirectoryList_items_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDirectoryList_items_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDirectoryList_items_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDirectoryList_items_inner::getVersion() const {
    return m_version;
}
void OAIDirectoryList_items_inner::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDirectoryList_items_inner::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDirectoryList_items_inner::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDirectoryList_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_rest_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_documentation_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectoryList_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
