/**
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJsonSchema_variant_map_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJsonSchema_variant_map_inner::OAIJsonSchema_variant_map_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJsonSchema_variant_map_inner::OAIJsonSchema_variant_map_inner() {
    this->initializeModel();
}

OAIJsonSchema_variant_map_inner::~OAIJsonSchema_variant_map_inner() {}

void OAIJsonSchema_variant_map_inner::initializeModel() {

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_type_value_isSet = false;
    m_type_value_isValid = false;
}

void OAIJsonSchema_variant_map_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJsonSchema_variant_map_inner::fromJsonObject(QJsonObject json) {

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("$ref")]);
    m_ref_isSet = !json[QString("$ref")].isNull() && m_ref_isValid;

    m_type_value_isValid = ::OpenAPI::fromJsonValue(m_type_value, json[QString("type_value")]);
    m_type_value_isSet = !json[QString("type_value")].isNull() && m_type_value_isValid;
}

QString OAIJsonSchema_variant_map_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJsonSchema_variant_map_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_ref_isSet) {
        obj.insert(QString("$ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_type_value_isSet) {
        obj.insert(QString("type_value"), ::OpenAPI::toJsonValue(m_type_value));
    }
    return obj;
}

QString OAIJsonSchema_variant_map_inner::getRef() const {
    return m_ref;
}
void OAIJsonSchema_variant_map_inner::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIJsonSchema_variant_map_inner::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIJsonSchema_variant_map_inner::is_ref_Valid() const{
    return m_ref_isValid;
}

QString OAIJsonSchema_variant_map_inner::getTypeValue() const {
    return m_type_value;
}
void OAIJsonSchema_variant_map_inner::setTypeValue(const QString &type_value) {
    m_type_value = type_value;
    m_type_value_isSet = true;
}

bool OAIJsonSchema_variant_map_inner::is_type_value_Set() const{
    return m_type_value_isSet;
}

bool OAIJsonSchema_variant_map_inner::is_type_value_Valid() const{
    return m_type_value_isValid;
}

bool OAIJsonSchema_variant_map_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJsonSchema_variant_map_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
