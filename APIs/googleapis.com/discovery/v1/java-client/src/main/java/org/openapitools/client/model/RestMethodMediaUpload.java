/*
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RestMethodMediaUploadProtocols;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Media upload parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:17.268982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestMethodMediaUpload {
  public static final String SERIALIZED_NAME_ACCEPT = "accept";
  @SerializedName(SERIALIZED_NAME_ACCEPT)
  private List<String> accept = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_SIZE = "maxSize";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private String maxSize;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  private RestMethodMediaUploadProtocols protocols;

  public RestMethodMediaUpload() {
  }

  public RestMethodMediaUpload accept(List<String> accept) {
    this.accept = accept;
    return this;
  }

  public RestMethodMediaUpload addAcceptItem(String acceptItem) {
    if (this.accept == null) {
      this.accept = new ArrayList<>();
    }
    this.accept.add(acceptItem);
    return this;
  }

  /**
   * MIME Media Ranges for acceptable media uploads to this method.
   * @return accept
   */
  @javax.annotation.Nullable
  public List<String> getAccept() {
    return accept;
  }

  public void setAccept(List<String> accept) {
    this.accept = accept;
  }


  public RestMethodMediaUpload maxSize(String maxSize) {
    this.maxSize = maxSize;
    return this;
  }

  /**
   * Maximum size of a media upload, such as \&quot;1MB\&quot;, \&quot;2GB\&quot; or \&quot;3TB\&quot;.
   * @return maxSize
   */
  @javax.annotation.Nullable
  public String getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(String maxSize) {
    this.maxSize = maxSize;
  }


  public RestMethodMediaUpload protocols(RestMethodMediaUploadProtocols protocols) {
    this.protocols = protocols;
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  public RestMethodMediaUploadProtocols getProtocols() {
    return protocols;
  }

  public void setProtocols(RestMethodMediaUploadProtocols protocols) {
    this.protocols = protocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestMethodMediaUpload restMethodMediaUpload = (RestMethodMediaUpload) o;
    return Objects.equals(this.accept, restMethodMediaUpload.accept) &&
        Objects.equals(this.maxSize, restMethodMediaUpload.maxSize) &&
        Objects.equals(this.protocols, restMethodMediaUpload.protocols);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accept, maxSize, protocols);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestMethodMediaUpload {\n");
    sb.append("    accept: ").append(toIndentedString(accept)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept");
    openapiFields.add("maxSize");
    openapiFields.add("protocols");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestMethodMediaUpload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestMethodMediaUpload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestMethodMediaUpload is not found in the empty JSON string", RestMethodMediaUpload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestMethodMediaUpload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestMethodMediaUpload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("accept") != null && !jsonObj.get("accept").isJsonNull() && !jsonObj.get("accept").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept` to be an array in the JSON string but got `%s`", jsonObj.get("accept").toString()));
      }
      if ((jsonObj.get("maxSize") != null && !jsonObj.get("maxSize").isJsonNull()) && !jsonObj.get("maxSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxSize").toString()));
      }
      // validate the optional field `protocols`
      if (jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull()) {
        RestMethodMediaUploadProtocols.validateJsonElement(jsonObj.get("protocols"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestMethodMediaUpload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestMethodMediaUpload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestMethodMediaUpload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestMethodMediaUpload.class));

       return (TypeAdapter<T>) new TypeAdapter<RestMethodMediaUpload>() {
           @Override
           public void write(JsonWriter out, RestMethodMediaUpload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestMethodMediaUpload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestMethodMediaUpload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestMethodMediaUpload
   * @throws IOException if the JSON string is invalid with respect to RestMethodMediaUpload
   */
  public static RestMethodMediaUpload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestMethodMediaUpload.class);
  }

  /**
   * Convert an instance of RestMethodMediaUpload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

