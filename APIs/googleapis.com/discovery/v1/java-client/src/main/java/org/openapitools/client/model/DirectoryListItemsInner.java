/*
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DirectoryListItemsInnerIcons;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DirectoryListItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:17.268982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectoryListItemsInner {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOVERY_LINK = "discoveryLink";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_LINK)
  private String discoveryLink;

  public static final String SERIALIZED_NAME_DISCOVERY_REST_URL = "discoveryRestUrl";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_REST_URL)
  private String discoveryRestUrl;

  public static final String SERIALIZED_NAME_DOCUMENTATION_LINK = "documentationLink";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_LINK)
  private String documentationLink;

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private DirectoryListItemsInnerIcons icons;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "discovery#directoryItem";

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public DirectoryListItemsInner() {
  }

  public DirectoryListItemsInner description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this API.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DirectoryListItemsInner discoveryLink(String discoveryLink) {
    this.discoveryLink = discoveryLink;
    return this;
  }

  /**
   * A link to the discovery document.
   * @return discoveryLink
   */
  @javax.annotation.Nullable
  public String getDiscoveryLink() {
    return discoveryLink;
  }

  public void setDiscoveryLink(String discoveryLink) {
    this.discoveryLink = discoveryLink;
  }


  public DirectoryListItemsInner discoveryRestUrl(String discoveryRestUrl) {
    this.discoveryRestUrl = discoveryRestUrl;
    return this;
  }

  /**
   * The URL for the discovery REST document.
   * @return discoveryRestUrl
   */
  @javax.annotation.Nullable
  public String getDiscoveryRestUrl() {
    return discoveryRestUrl;
  }

  public void setDiscoveryRestUrl(String discoveryRestUrl) {
    this.discoveryRestUrl = discoveryRestUrl;
  }


  public DirectoryListItemsInner documentationLink(String documentationLink) {
    this.documentationLink = documentationLink;
    return this;
  }

  /**
   * A link to human readable documentation for the API.
   * @return documentationLink
   */
  @javax.annotation.Nullable
  public String getDocumentationLink() {
    return documentationLink;
  }

  public void setDocumentationLink(String documentationLink) {
    this.documentationLink = documentationLink;
  }


  public DirectoryListItemsInner icons(DirectoryListItemsInnerIcons icons) {
    this.icons = icons;
    return this;
  }

  /**
   * Get icons
   * @return icons
   */
  @javax.annotation.Nullable
  public DirectoryListItemsInnerIcons getIcons() {
    return icons;
  }

  public void setIcons(DirectoryListItemsInnerIcons icons) {
    this.icons = icons;
  }


  public DirectoryListItemsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of this API.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DirectoryListItemsInner kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind for this response.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public DirectoryListItemsInner labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public DirectoryListItemsInner addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels for the status of this API, such as labs or deprecated.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public DirectoryListItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the API.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DirectoryListItemsInner preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

  /**
   * True if this version is the preferred version to use.
   * @return preferred
   */
  @javax.annotation.Nullable
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  public DirectoryListItemsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this API.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DirectoryListItemsInner version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the API.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectoryListItemsInner directoryListItemsInner = (DirectoryListItemsInner) o;
    return Objects.equals(this.description, directoryListItemsInner.description) &&
        Objects.equals(this.discoveryLink, directoryListItemsInner.discoveryLink) &&
        Objects.equals(this.discoveryRestUrl, directoryListItemsInner.discoveryRestUrl) &&
        Objects.equals(this.documentationLink, directoryListItemsInner.documentationLink) &&
        Objects.equals(this.icons, directoryListItemsInner.icons) &&
        Objects.equals(this.id, directoryListItemsInner.id) &&
        Objects.equals(this.kind, directoryListItemsInner.kind) &&
        Objects.equals(this.labels, directoryListItemsInner.labels) &&
        Objects.equals(this.name, directoryListItemsInner.name) &&
        Objects.equals(this.preferred, directoryListItemsInner.preferred) &&
        Objects.equals(this.title, directoryListItemsInner.title) &&
        Objects.equals(this.version, directoryListItemsInner.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, discoveryLink, discoveryRestUrl, documentationLink, icons, id, kind, labels, name, preferred, title, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectoryListItemsInner {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveryLink: ").append(toIndentedString(discoveryLink)).append("\n");
    sb.append("    discoveryRestUrl: ").append(toIndentedString(discoveryRestUrl)).append("\n");
    sb.append("    documentationLink: ").append(toIndentedString(documentationLink)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("discoveryLink");
    openapiFields.add("discoveryRestUrl");
    openapiFields.add("documentationLink");
    openapiFields.add("icons");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("preferred");
    openapiFields.add("title");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectoryListItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectoryListItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectoryListItemsInner is not found in the empty JSON string", DirectoryListItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectoryListItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectoryListItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discoveryLink") != null && !jsonObj.get("discoveryLink").isJsonNull()) && !jsonObj.get("discoveryLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryLink").toString()));
      }
      if ((jsonObj.get("discoveryRestUrl") != null && !jsonObj.get("discoveryRestUrl").isJsonNull()) && !jsonObj.get("discoveryRestUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryRestUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryRestUrl").toString()));
      }
      if ((jsonObj.get("documentationLink") != null && !jsonObj.get("documentationLink").isJsonNull()) && !jsonObj.get("documentationLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationLink").toString()));
      }
      // validate the optional field `icons`
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        DirectoryListItemsInnerIcons.validateJsonElement(jsonObj.get("icons"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectoryListItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectoryListItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectoryListItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectoryListItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectoryListItemsInner>() {
           @Override
           public void write(JsonWriter out, DirectoryListItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectoryListItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectoryListItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectoryListItemsInner
   * @throws IOException if the JSON string is invalid with respect to DirectoryListItemsInner
   */
  public static DirectoryListItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectoryListItemsInner.class);
  }

  /**
   * Convert an instance of DirectoryListItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

