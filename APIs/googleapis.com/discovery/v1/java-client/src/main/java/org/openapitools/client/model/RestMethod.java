/*
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.JsonSchema;
import org.openapitools.client.model.RestMethodMediaUpload;
import org.openapitools.client.model.RestMethodRequest;
import org.openapitools.client.model.RestMethodResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestMethod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:17.268982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestMethod {
  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG_REQUIRED = "etagRequired";
  @SerializedName(SERIALIZED_NAME_ETAG_REQUIRED)
  private Boolean etagRequired;

  public static final String SERIALIZED_NAME_FLAT_PATH = "flatPath";
  @SerializedName(SERIALIZED_NAME_FLAT_PATH)
  private String flatPath;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MEDIA_UPLOAD = "mediaUpload";
  @SerializedName(SERIALIZED_NAME_MEDIA_UPLOAD)
  private RestMethodMediaUpload mediaUpload;

  public static final String SERIALIZED_NAME_PARAMETER_ORDER = "parameterOrder";
  @SerializedName(SERIALIZED_NAME_PARAMETER_ORDER)
  private List<String> parameterOrder = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, JsonSchema> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private RestMethodRequest request;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private RestMethodResponse response;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTS_MEDIA_DOWNLOAD = "supportsMediaDownload";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MEDIA_DOWNLOAD)
  private Boolean supportsMediaDownload;

  public static final String SERIALIZED_NAME_SUPPORTS_MEDIA_UPLOAD = "supportsMediaUpload";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_MEDIA_UPLOAD)
  private Boolean supportsMediaUpload;

  public static final String SERIALIZED_NAME_SUPPORTS_SUBSCRIPTION = "supportsSubscription";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_SUBSCRIPTION)
  private Boolean supportsSubscription;

  public static final String SERIALIZED_NAME_USE_MEDIA_DOWNLOAD_SERVICE = "useMediaDownloadService";
  @SerializedName(SERIALIZED_NAME_USE_MEDIA_DOWNLOAD_SERVICE)
  private Boolean useMediaDownloadService;

  public RestMethod() {
  }

  public RestMethod deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Whether this method is deprecated.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public RestMethod description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of this method.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RestMethod etagRequired(Boolean etagRequired) {
    this.etagRequired = etagRequired;
    return this;
  }

  /**
   * Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header.
   * @return etagRequired
   */
  @javax.annotation.Nullable
  public Boolean getEtagRequired() {
    return etagRequired;
  }

  public void setEtagRequired(Boolean etagRequired) {
    this.etagRequired = etagRequired;
  }


  public RestMethod flatPath(String flatPath) {
    this.flatPath = flatPath;
    return this;
  }

  /**
   * The URI path of this REST method in (RFC 6570) format without level 2 features ({+var}). Supplementary to the path property.
   * @return flatPath
   */
  @javax.annotation.Nullable
  public String getFlatPath() {
    return flatPath;
  }

  public void setFlatPath(String flatPath) {
    this.flatPath = flatPath;
  }


  public RestMethod httpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * HTTP method used by this method.
   * @return httpMethod
   */
  @javax.annotation.Nullable
  public String getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public RestMethod id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID for this method. This property can be used to match methods between different versions of Discovery.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RestMethod mediaUpload(RestMethodMediaUpload mediaUpload) {
    this.mediaUpload = mediaUpload;
    return this;
  }

  /**
   * Get mediaUpload
   * @return mediaUpload
   */
  @javax.annotation.Nullable
  public RestMethodMediaUpload getMediaUpload() {
    return mediaUpload;
  }

  public void setMediaUpload(RestMethodMediaUpload mediaUpload) {
    this.mediaUpload = mediaUpload;
  }


  public RestMethod parameterOrder(List<String> parameterOrder) {
    this.parameterOrder = parameterOrder;
    return this;
  }

  public RestMethod addParameterOrderItem(String parameterOrderItem) {
    if (this.parameterOrder == null) {
      this.parameterOrder = new ArrayList<>();
    }
    this.parameterOrder.add(parameterOrderItem);
    return this;
  }

  /**
   * Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \&quot;most-significant\&quot; parameter appears first.
   * @return parameterOrder
   */
  @javax.annotation.Nullable
  public List<String> getParameterOrder() {
    return parameterOrder;
  }

  public void setParameterOrder(List<String> parameterOrder) {
    this.parameterOrder = parameterOrder;
  }


  public RestMethod parameters(Map<String, JsonSchema> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RestMethod putParametersItem(String key, JsonSchema parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Details for all parameters in this method.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, JsonSchema> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, JsonSchema> parameters) {
    this.parameters = parameters;
  }


  public RestMethod path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public RestMethod request(RestMethodRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public RestMethodRequest getRequest() {
    return request;
  }

  public void setRequest(RestMethodRequest request) {
    this.request = request;
  }


  public RestMethod response(RestMethodResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public RestMethodResponse getResponse() {
    return response;
  }

  public void setResponse(RestMethodResponse response) {
    this.response = response;
  }


  public RestMethod scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public RestMethod addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * OAuth 2.0 scopes applicable to this method.
   * @return scopes
   */
  @javax.annotation.Nullable
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public RestMethod supportsMediaDownload(Boolean supportsMediaDownload) {
    this.supportsMediaDownload = supportsMediaDownload;
    return this;
  }

  /**
   * Whether this method supports media downloads.
   * @return supportsMediaDownload
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMediaDownload() {
    return supportsMediaDownload;
  }

  public void setSupportsMediaDownload(Boolean supportsMediaDownload) {
    this.supportsMediaDownload = supportsMediaDownload;
  }


  public RestMethod supportsMediaUpload(Boolean supportsMediaUpload) {
    this.supportsMediaUpload = supportsMediaUpload;
    return this;
  }

  /**
   * Whether this method supports media uploads.
   * @return supportsMediaUpload
   */
  @javax.annotation.Nullable
  public Boolean getSupportsMediaUpload() {
    return supportsMediaUpload;
  }

  public void setSupportsMediaUpload(Boolean supportsMediaUpload) {
    this.supportsMediaUpload = supportsMediaUpload;
  }


  public RestMethod supportsSubscription(Boolean supportsSubscription) {
    this.supportsSubscription = supportsSubscription;
    return this;
  }

  /**
   * Whether this method supports subscriptions.
   * @return supportsSubscription
   */
  @javax.annotation.Nullable
  public Boolean getSupportsSubscription() {
    return supportsSubscription;
  }

  public void setSupportsSubscription(Boolean supportsSubscription) {
    this.supportsSubscription = supportsSubscription;
  }


  public RestMethod useMediaDownloadService(Boolean useMediaDownloadService) {
    this.useMediaDownloadService = useMediaDownloadService;
    return this;
  }

  /**
   * Indicates that downloads from this method should use the download service URL (i.e. \&quot;/download\&quot;). Only applies if the method supports media download.
   * @return useMediaDownloadService
   */
  @javax.annotation.Nullable
  public Boolean getUseMediaDownloadService() {
    return useMediaDownloadService;
  }

  public void setUseMediaDownloadService(Boolean useMediaDownloadService) {
    this.useMediaDownloadService = useMediaDownloadService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestMethod restMethod = (RestMethod) o;
    return Objects.equals(this.deprecated, restMethod.deprecated) &&
        Objects.equals(this.description, restMethod.description) &&
        Objects.equals(this.etagRequired, restMethod.etagRequired) &&
        Objects.equals(this.flatPath, restMethod.flatPath) &&
        Objects.equals(this.httpMethod, restMethod.httpMethod) &&
        Objects.equals(this.id, restMethod.id) &&
        Objects.equals(this.mediaUpload, restMethod.mediaUpload) &&
        Objects.equals(this.parameterOrder, restMethod.parameterOrder) &&
        Objects.equals(this.parameters, restMethod.parameters) &&
        Objects.equals(this.path, restMethod.path) &&
        Objects.equals(this.request, restMethod.request) &&
        Objects.equals(this.response, restMethod.response) &&
        Objects.equals(this.scopes, restMethod.scopes) &&
        Objects.equals(this.supportsMediaDownload, restMethod.supportsMediaDownload) &&
        Objects.equals(this.supportsMediaUpload, restMethod.supportsMediaUpload) &&
        Objects.equals(this.supportsSubscription, restMethod.supportsSubscription) &&
        Objects.equals(this.useMediaDownloadService, restMethod.useMediaDownloadService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deprecated, description, etagRequired, flatPath, httpMethod, id, mediaUpload, parameterOrder, parameters, path, request, response, scopes, supportsMediaDownload, supportsMediaUpload, supportsSubscription, useMediaDownloadService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestMethod {\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etagRequired: ").append(toIndentedString(etagRequired)).append("\n");
    sb.append("    flatPath: ").append(toIndentedString(flatPath)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mediaUpload: ").append(toIndentedString(mediaUpload)).append("\n");
    sb.append("    parameterOrder: ").append(toIndentedString(parameterOrder)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    supportsMediaDownload: ").append(toIndentedString(supportsMediaDownload)).append("\n");
    sb.append("    supportsMediaUpload: ").append(toIndentedString(supportsMediaUpload)).append("\n");
    sb.append("    supportsSubscription: ").append(toIndentedString(supportsSubscription)).append("\n");
    sb.append("    useMediaDownloadService: ").append(toIndentedString(useMediaDownloadService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deprecated");
    openapiFields.add("description");
    openapiFields.add("etagRequired");
    openapiFields.add("flatPath");
    openapiFields.add("httpMethod");
    openapiFields.add("id");
    openapiFields.add("mediaUpload");
    openapiFields.add("parameterOrder");
    openapiFields.add("parameters");
    openapiFields.add("path");
    openapiFields.add("request");
    openapiFields.add("response");
    openapiFields.add("scopes");
    openapiFields.add("supportsMediaDownload");
    openapiFields.add("supportsMediaUpload");
    openapiFields.add("supportsSubscription");
    openapiFields.add("useMediaDownloadService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestMethod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestMethod is not found in the empty JSON string", RestMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestMethod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("flatPath") != null && !jsonObj.get("flatPath").isJsonNull()) && !jsonObj.get("flatPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flatPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flatPath").toString()));
      }
      if ((jsonObj.get("httpMethod") != null && !jsonObj.get("httpMethod").isJsonNull()) && !jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `mediaUpload`
      if (jsonObj.get("mediaUpload") != null && !jsonObj.get("mediaUpload").isJsonNull()) {
        RestMethodMediaUpload.validateJsonElement(jsonObj.get("mediaUpload"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parameterOrder") != null && !jsonObj.get("parameterOrder").isJsonNull() && !jsonObj.get("parameterOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterOrder` to be an array in the JSON string but got `%s`", jsonObj.get("parameterOrder").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        RestMethodRequest.validateJsonElement(jsonObj.get("request"));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        RestMethodResponse.validateJsonElement(jsonObj.get("response"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull() && !jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<RestMethod>() {
           @Override
           public void write(JsonWriter out, RestMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestMethod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestMethod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestMethod
   * @throws IOException if the JSON string is invalid with respect to RestMethod
   */
  public static RestMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestMethod.class);
  }

  /**
   * Convert an instance of RestMethod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

