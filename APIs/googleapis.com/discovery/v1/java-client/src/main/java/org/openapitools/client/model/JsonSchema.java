/*
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.JsonSchemaAnnotations;
import org.openapitools.client.model.JsonSchemaVariant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JsonSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:17.268982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonSchema {
  public static final String SERIALIZED_NAME_$_REF = "$ref";
  @SerializedName(SERIALIZED_NAME_$_REF)
  private String $ref;

  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private JsonSchema additionalProperties;

  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private JsonSchemaAnnotations annotations;

  public static final String SERIALIZED_NAME_DEPRECATED = "deprecated";
  @SerializedName(SERIALIZED_NAME_DEPRECATED)
  private Boolean deprecated;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENUM = "enum";
  @SerializedName(SERIALIZED_NAME_ENUM)
  private List<String> _enum = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENUM_DEPRECATED = "enumDeprecated";
  @SerializedName(SERIALIZED_NAME_ENUM_DEPRECATED)
  private List<Boolean> enumDeprecated = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENUM_DESCRIPTIONS = "enumDescriptions";
  @SerializedName(SERIALIZED_NAME_ENUM_DESCRIPTIONS)
  private List<String> enumDescriptions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private JsonSchema items;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private String maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private String minimum;

  public static final String SERIALIZED_NAME_PATTERN = "pattern";
  @SerializedName(SERIALIZED_NAME_PATTERN)
  private String pattern;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, JsonSchema> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_REPEATED = "repeated";
  @SerializedName(SERIALIZED_NAME_REPEATED)
  private Boolean repeated;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  private JsonSchemaVariant variant;

  public JsonSchema() {
  }

  public JsonSchema $ref(String $ref) {
    this.$ref = $ref;
    return this;
  }

  /**
   * A reference to another schema. The value of this property is the \&quot;id\&quot; of another schema.
   * @return $ref
   */
  @javax.annotation.Nullable
  public String get$Ref() {
    return $ref;
  }

  public void set$Ref(String $ref) {
    this.$ref = $ref;
  }


  public JsonSchema additionalProperties(JsonSchema additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  /**
   * Get additionalProperties
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public JsonSchema getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(JsonSchema additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public JsonSchema annotations(JsonSchemaAnnotations annotations) {
    this.annotations = annotations;
    return this;
  }

  /**
   * Get annotations
   * @return annotations
   */
  @javax.annotation.Nullable
  public JsonSchemaAnnotations getAnnotations() {
    return annotations;
  }

  public void setAnnotations(JsonSchemaAnnotations annotations) {
    this.annotations = annotations;
  }


  public JsonSchema deprecated(Boolean deprecated) {
    this.deprecated = deprecated;
    return this;
  }

  /**
   * Whether the parameter is deprecated.
   * @return deprecated
   */
  @javax.annotation.Nullable
  public Boolean getDeprecated() {
    return deprecated;
  }

  public void setDeprecated(Boolean deprecated) {
    this.deprecated = deprecated;
  }


  public JsonSchema description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of this object.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JsonSchema _enum(List<String> _enum) {
    this._enum = _enum;
    return this;
  }

  public JsonSchema addEnumItem(String _enumItem) {
    if (this._enum == null) {
      this._enum = new ArrayList<>();
    }
    this._enum.add(_enumItem);
    return this;
  }

  /**
   * Values this parameter may take (if it is an enum).
   * @return _enum
   */
  @javax.annotation.Nullable
  public List<String> getEnum() {
    return _enum;
  }

  public void setEnum(List<String> _enum) {
    this._enum = _enum;
  }


  public JsonSchema enumDeprecated(List<Boolean> enumDeprecated) {
    this.enumDeprecated = enumDeprecated;
    return this;
  }

  public JsonSchema addEnumDeprecatedItem(Boolean enumDeprecatedItem) {
    if (this.enumDeprecated == null) {
      this.enumDeprecated = new ArrayList<>();
    }
    this.enumDeprecated.add(enumDeprecatedItem);
    return this;
  }

  /**
   * The deprecation status for the enums. Each position maps to the corresponding value in the \&quot;enum\&quot; array.
   * @return enumDeprecated
   */
  @javax.annotation.Nullable
  public List<Boolean> getEnumDeprecated() {
    return enumDeprecated;
  }

  public void setEnumDeprecated(List<Boolean> enumDeprecated) {
    this.enumDeprecated = enumDeprecated;
  }


  public JsonSchema enumDescriptions(List<String> enumDescriptions) {
    this.enumDescriptions = enumDescriptions;
    return this;
  }

  public JsonSchema addEnumDescriptionsItem(String enumDescriptionsItem) {
    if (this.enumDescriptions == null) {
      this.enumDescriptions = new ArrayList<>();
    }
    this.enumDescriptions.add(enumDescriptionsItem);
    return this;
  }

  /**
   * The descriptions for the enums. Each position maps to the corresponding value in the \&quot;enum\&quot; array.
   * @return enumDescriptions
   */
  @javax.annotation.Nullable
  public List<String> getEnumDescriptions() {
    return enumDescriptions;
  }

  public void setEnumDescriptions(List<String> enumDescriptions) {
    this.enumDescriptions = enumDescriptions;
  }


  public JsonSchema format(String format) {
    this.format = format;
    return this;
  }

  /**
   * An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public JsonSchema id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for this schema.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public JsonSchema items(JsonSchema items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public JsonSchema getItems() {
    return items;
  }

  public void setItems(JsonSchema items) {
    this.items = items;
  }


  public JsonSchema location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Whether this parameter goes in the query or the path for REST requests.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public JsonSchema maximum(String maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * The maximum value of this parameter.
   * @return maximum
   */
  @javax.annotation.Nullable
  public String getMaximum() {
    return maximum;
  }

  public void setMaximum(String maximum) {
    this.maximum = maximum;
  }


  public JsonSchema minimum(String minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * The minimum value of this parameter.
   * @return minimum
   */
  @javax.annotation.Nullable
  public String getMinimum() {
    return minimum;
  }

  public void setMinimum(String minimum) {
    this.minimum = minimum;
  }


  public JsonSchema pattern(String pattern) {
    this.pattern = pattern;
    return this;
  }

  /**
   * The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
   * @return pattern
   */
  @javax.annotation.Nullable
  public String getPattern() {
    return pattern;
  }

  public void setPattern(String pattern) {
    this.pattern = pattern;
  }


  public JsonSchema properties(Map<String, JsonSchema> properties) {
    this.properties = properties;
    return this;
  }

  public JsonSchema putPropertiesItem(String key, JsonSchema propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * If this is a schema for an object, list the schema for each property of this object.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, JsonSchema> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, JsonSchema> properties) {
    this.properties = properties;
  }


  public JsonSchema readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public JsonSchema repeated(Boolean repeated) {
    this.repeated = repeated;
    return this;
  }

  /**
   * Whether this parameter may appear multiple times.
   * @return repeated
   */
  @javax.annotation.Nullable
  public Boolean getRepeated() {
    return repeated;
  }

  public void setRepeated(Boolean repeated) {
    this.repeated = repeated;
  }


  public JsonSchema required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Whether the parameter is required.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public JsonSchema type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public JsonSchema variant(JsonSchemaVariant variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nullable
  public JsonSchemaVariant getVariant() {
    return variant;
  }

  public void setVariant(JsonSchemaVariant variant) {
    this.variant = variant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonSchema jsonSchema = (JsonSchema) o;
    return Objects.equals(this.$ref, jsonSchema.$ref) &&
        Objects.equals(this.additionalProperties, jsonSchema.additionalProperties) &&
        Objects.equals(this.annotations, jsonSchema.annotations) &&
        Objects.equals(this.deprecated, jsonSchema.deprecated) &&
        Objects.equals(this.description, jsonSchema.description) &&
        Objects.equals(this._enum, jsonSchema._enum) &&
        Objects.equals(this.enumDeprecated, jsonSchema.enumDeprecated) &&
        Objects.equals(this.enumDescriptions, jsonSchema.enumDescriptions) &&
        Objects.equals(this.format, jsonSchema.format) &&
        Objects.equals(this.id, jsonSchema.id) &&
        Objects.equals(this.items, jsonSchema.items) &&
        Objects.equals(this.location, jsonSchema.location) &&
        Objects.equals(this.maximum, jsonSchema.maximum) &&
        Objects.equals(this.minimum, jsonSchema.minimum) &&
        Objects.equals(this.pattern, jsonSchema.pattern) &&
        Objects.equals(this.properties, jsonSchema.properties) &&
        Objects.equals(this.readOnly, jsonSchema.readOnly) &&
        Objects.equals(this.repeated, jsonSchema.repeated) &&
        Objects.equals(this.required, jsonSchema.required) &&
        Objects.equals(this.type, jsonSchema.type) &&
        Objects.equals(this.variant, jsonSchema.variant);
  }

  @Override
  public int hashCode() {
    return Objects.hash($ref, additionalProperties, annotations, deprecated, description, _enum, enumDeprecated, enumDescriptions, format, id, items, location, maximum, minimum, pattern, properties, readOnly, repeated, required, type, variant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonSchema {\n");
    sb.append("    $ref: ").append(toIndentedString($ref)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    deprecated: ").append(toIndentedString(deprecated)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    enumDeprecated: ").append(toIndentedString(enumDeprecated)).append("\n");
    sb.append("    enumDescriptions: ").append(toIndentedString(enumDescriptions)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    repeated: ").append(toIndentedString(repeated)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$ref");
    openapiFields.add("additionalProperties");
    openapiFields.add("annotations");
    openapiFields.add("deprecated");
    openapiFields.add("description");
    openapiFields.add("enum");
    openapiFields.add("enumDeprecated");
    openapiFields.add("enumDescriptions");
    openapiFields.add("format");
    openapiFields.add("id");
    openapiFields.add("items");
    openapiFields.add("location");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("pattern");
    openapiFields.add("properties");
    openapiFields.add("readOnly");
    openapiFields.add("repeated");
    openapiFields.add("required");
    openapiFields.add("type");
    openapiFields.add("variant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonSchema is not found in the empty JSON string", JsonSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$ref") != null && !jsonObj.get("$ref").isJsonNull()) && !jsonObj.get("$ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$ref").toString()));
      }
      // validate the optional field `additionalProperties`
      if (jsonObj.get("additionalProperties") != null && !jsonObj.get("additionalProperties").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("additionalProperties"));
      }
      // validate the optional field `annotations`
      if (jsonObj.get("annotations") != null && !jsonObj.get("annotations").isJsonNull()) {
        JsonSchemaAnnotations.validateJsonElement(jsonObj.get("annotations"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enum") != null && !jsonObj.get("enum").isJsonNull() && !jsonObj.get("enum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enum` to be an array in the JSON string but got `%s`", jsonObj.get("enum").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enumDeprecated") != null && !jsonObj.get("enumDeprecated").isJsonNull() && !jsonObj.get("enumDeprecated").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumDeprecated` to be an array in the JSON string but got `%s`", jsonObj.get("enumDeprecated").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("enumDescriptions") != null && !jsonObj.get("enumDescriptions").isJsonNull() && !jsonObj.get("enumDescriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enumDescriptions` to be an array in the JSON string but got `%s`", jsonObj.get("enumDescriptions").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonSchema.validateJsonElement(jsonObj.get("items"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("maximum") != null && !jsonObj.get("maximum").isJsonNull()) && !jsonObj.get("maximum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximum").toString()));
      }
      if ((jsonObj.get("minimum") != null && !jsonObj.get("minimum").isJsonNull()) && !jsonObj.get("minimum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minimum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minimum").toString()));
      }
      if ((jsonObj.get("pattern") != null && !jsonObj.get("pattern").isJsonNull()) && !jsonObj.get("pattern").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pattern` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pattern").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `variant`
      if (jsonObj.get("variant") != null && !jsonObj.get("variant").isJsonNull()) {
        JsonSchemaVariant.validateJsonElement(jsonObj.get("variant"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonSchema>() {
           @Override
           public void write(JsonWriter out, JsonSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonSchema
   * @throws IOException if the JSON string is invalid with respect to JsonSchema
   */
  public static JsonSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonSchema.class);
  }

  /**
   * Convert an instance of JsonSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

