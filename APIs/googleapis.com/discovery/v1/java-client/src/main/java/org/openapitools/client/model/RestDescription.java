/*
 * API Discovery Service
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DirectoryListItemsInnerIcons;
import org.openapitools.client.model.JsonSchema;
import org.openapitools.client.model.RestDescriptionAuth;
import org.openapitools.client.model.RestDescriptionEndpointsInner;
import org.openapitools.client.model.RestMethod;
import org.openapitools.client.model.RestResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RestDescription
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:17.268982-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestDescription {
  public static final String SERIALIZED_NAME_AUTH = "auth";
  @SerializedName(SERIALIZED_NAME_AUTH)
  private RestDescriptionAuth auth;

  public static final String SERIALIZED_NAME_BASE_PATH = "basePath";
  @SerializedName(SERIALIZED_NAME_BASE_PATH)
  private String basePath;

  public static final String SERIALIZED_NAME_BASE_URL = "baseUrl";
  @SerializedName(SERIALIZED_NAME_BASE_URL)
  private String baseUrl;

  public static final String SERIALIZED_NAME_BATCH_PATH = "batchPath";
  @SerializedName(SERIALIZED_NAME_BATCH_PATH)
  private String batchPath;

  public static final String SERIALIZED_NAME_CANONICAL_NAME = "canonicalName";
  @SerializedName(SERIALIZED_NAME_CANONICAL_NAME)
  private String canonicalName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOVERY_VERSION = "discoveryVersion";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_VERSION)
  private String discoveryVersion = "v1";

  public static final String SERIALIZED_NAME_DOCUMENTATION_LINK = "documentationLink";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION_LINK)
  private String documentationLink;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<RestDescriptionEndpointsInner> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPONENTIAL_BACKOFF_DEFAULT = "exponentialBackoffDefault";
  @SerializedName(SERIALIZED_NAME_EXPONENTIAL_BACKOFF_DEFAULT)
  private Boolean exponentialBackoffDefault;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private DirectoryListItemsInnerIcons icons;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "discovery#restDescription";

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_METHODS = "methods";
  @SerializedName(SERIALIZED_NAME_METHODS)
  private Map<String, RestMethod> methods = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_DOMAIN = "ownerDomain";
  @SerializedName(SERIALIZED_NAME_OWNER_DOMAIN)
  private String ownerDomain;

  public static final String SERIALIZED_NAME_OWNER_NAME = "ownerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_PACKAGE_PATH = "packagePath";
  @SerializedName(SERIALIZED_NAME_PACKAGE_PATH)
  private String packagePath;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, JsonSchema> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol = "rest";

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Map<String, RestResource> resources = new HashMap<>();

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_ROOT_URL = "rootUrl";
  @SerializedName(SERIALIZED_NAME_ROOT_URL)
  private String rootUrl;

  public static final String SERIALIZED_NAME_SCHEMAS = "schemas";
  @SerializedName(SERIALIZED_NAME_SCHEMAS)
  private Map<String, JsonSchema> schemas = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_PATH = "servicePath";
  @SerializedName(SERIALIZED_NAME_SERVICE_PATH)
  private String servicePath;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_MODULE = "version_module";
  @SerializedName(SERIALIZED_NAME_VERSION_MODULE)
  private Boolean versionModule;

  public RestDescription() {
  }

  public RestDescription(
     String etag
  ) {
    this();
    this.etag = etag;
  }

  public RestDescription auth(RestDescriptionAuth auth) {
    this.auth = auth;
    return this;
  }

  /**
   * Get auth
   * @return auth
   */
  @javax.annotation.Nullable
  public RestDescriptionAuth getAuth() {
    return auth;
  }

  public void setAuth(RestDescriptionAuth auth) {
    this.auth = auth;
  }


  public RestDescription basePath(String basePath) {
    this.basePath = basePath;
    return this;
  }

  /**
   * [DEPRECATED] The base path for REST requests.
   * @return basePath
   */
  @javax.annotation.Nullable
  public String getBasePath() {
    return basePath;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }


  public RestDescription baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * [DEPRECATED] The base URL for REST requests.
   * @return baseUrl
   */
  @javax.annotation.Nullable
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }


  public RestDescription batchPath(String batchPath) {
    this.batchPath = batchPath;
    return this;
  }

  /**
   * The path for REST batch requests.
   * @return batchPath
   */
  @javax.annotation.Nullable
  public String getBatchPath() {
    return batchPath;
  }

  public void setBatchPath(String batchPath) {
    this.batchPath = batchPath;
  }


  public RestDescription canonicalName(String canonicalName) {
    this.canonicalName = canonicalName;
    return this;
  }

  /**
   * Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names.
   * @return canonicalName
   */
  @javax.annotation.Nullable
  public String getCanonicalName() {
    return canonicalName;
  }

  public void setCanonicalName(String canonicalName) {
    this.canonicalName = canonicalName;
  }


  public RestDescription description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this API.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RestDescription discoveryVersion(String discoveryVersion) {
    this.discoveryVersion = discoveryVersion;
    return this;
  }

  /**
   * Indicate the version of the Discovery API used to generate this doc.
   * @return discoveryVersion
   */
  @javax.annotation.Nullable
  public String getDiscoveryVersion() {
    return discoveryVersion;
  }

  public void setDiscoveryVersion(String discoveryVersion) {
    this.discoveryVersion = discoveryVersion;
  }


  public RestDescription documentationLink(String documentationLink) {
    this.documentationLink = documentationLink;
    return this;
  }

  /**
   * A link to human readable documentation for the API.
   * @return documentationLink
   */
  @javax.annotation.Nullable
  public String getDocumentationLink() {
    return documentationLink;
  }

  public void setDocumentationLink(String documentationLink) {
    this.documentationLink = documentationLink;
  }


  public RestDescription endpoints(List<RestDescriptionEndpointsInner> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public RestDescription addEndpointsItem(RestDescriptionEndpointsInner endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * A list of location-based endpoint objects for this API. Each object contains the endpoint URL, location, description and deprecation status.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<RestDescriptionEndpointsInner> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<RestDescriptionEndpointsInner> endpoints) {
    this.endpoints = endpoints;
  }


  /**
   * The ETag for this response.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  public RestDescription exponentialBackoffDefault(Boolean exponentialBackoffDefault) {
    this.exponentialBackoffDefault = exponentialBackoffDefault;
    return this;
  }

  /**
   * Enable exponential backoff for suitable methods in the generated clients.
   * @return exponentialBackoffDefault
   */
  @javax.annotation.Nullable
  public Boolean getExponentialBackoffDefault() {
    return exponentialBackoffDefault;
  }

  public void setExponentialBackoffDefault(Boolean exponentialBackoffDefault) {
    this.exponentialBackoffDefault = exponentialBackoffDefault;
  }


  public RestDescription features(List<String> features) {
    this.features = features;
    return this;
  }

  public RestDescription addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * A list of supported features for this API.
   * @return features
   */
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public RestDescription icons(DirectoryListItemsInnerIcons icons) {
    this.icons = icons;
    return this;
  }

  /**
   * Get icons
   * @return icons
   */
  @javax.annotation.Nullable
  public DirectoryListItemsInnerIcons getIcons() {
    return icons;
  }

  public void setIcons(DirectoryListItemsInnerIcons icons) {
    this.icons = icons;
  }


  public RestDescription id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of this API.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RestDescription kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind for this response.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public RestDescription labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public RestDescription addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Labels for the status of this API, such as labs or deprecated.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public RestDescription methods(Map<String, RestMethod> methods) {
    this.methods = methods;
    return this;
  }

  public RestDescription putMethodsItem(String key, RestMethod methodsItem) {
    if (this.methods == null) {
      this.methods = new HashMap<>();
    }
    this.methods.put(key, methodsItem);
    return this;
  }

  /**
   * API-level methods for this API.
   * @return methods
   */
  @javax.annotation.Nullable
  public Map<String, RestMethod> getMethods() {
    return methods;
  }

  public void setMethods(Map<String, RestMethod> methods) {
    this.methods = methods;
  }


  public RestDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this API.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RestDescription ownerDomain(String ownerDomain) {
    this.ownerDomain = ownerDomain;
    return this;
  }

  /**
   * The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name.
   * @return ownerDomain
   */
  @javax.annotation.Nullable
  public String getOwnerDomain() {
    return ownerDomain;
  }

  public void setOwnerDomain(String ownerDomain) {
    this.ownerDomain = ownerDomain;
  }


  public RestDescription ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * The name of the owner of this API. See ownerDomain.
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public RestDescription packagePath(String packagePath) {
    this.packagePath = packagePath;
    return this;
  }

  /**
   * The package of the owner of this API. See ownerDomain.
   * @return packagePath
   */
  @javax.annotation.Nullable
  public String getPackagePath() {
    return packagePath;
  }

  public void setPackagePath(String packagePath) {
    this.packagePath = packagePath;
  }


  public RestDescription parameters(Map<String, JsonSchema> parameters) {
    this.parameters = parameters;
    return this;
  }

  public RestDescription putParametersItem(String key, JsonSchema parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Common parameters that apply across all apis.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, JsonSchema> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, JsonSchema> parameters) {
    this.parameters = parameters;
  }


  public RestDescription protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * The protocol described by this document.
   * @return protocol
   */
  @javax.annotation.Nullable
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public RestDescription resources(Map<String, RestResource> resources) {
    this.resources = resources;
    return this;
  }

  public RestDescription putResourcesItem(String key, RestResource resourcesItem) {
    if (this.resources == null) {
      this.resources = new HashMap<>();
    }
    this.resources.put(key, resourcesItem);
    return this;
  }

  /**
   * The resources in this API.
   * @return resources
   */
  @javax.annotation.Nullable
  public Map<String, RestResource> getResources() {
    return resources;
  }

  public void setResources(Map<String, RestResource> resources) {
    this.resources = resources;
  }


  public RestDescription revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The version of this API.
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public RestDescription rootUrl(String rootUrl) {
    this.rootUrl = rootUrl;
    return this;
  }

  /**
   * The root URL under which all API services live.
   * @return rootUrl
   */
  @javax.annotation.Nullable
  public String getRootUrl() {
    return rootUrl;
  }

  public void setRootUrl(String rootUrl) {
    this.rootUrl = rootUrl;
  }


  public RestDescription schemas(Map<String, JsonSchema> schemas) {
    this.schemas = schemas;
    return this;
  }

  public RestDescription putSchemasItem(String key, JsonSchema schemasItem) {
    if (this.schemas == null) {
      this.schemas = new HashMap<>();
    }
    this.schemas.put(key, schemasItem);
    return this;
  }

  /**
   * The schemas for this API.
   * @return schemas
   */
  @javax.annotation.Nullable
  public Map<String, JsonSchema> getSchemas() {
    return schemas;
  }

  public void setSchemas(Map<String, JsonSchema> schemas) {
    this.schemas = schemas;
  }


  public RestDescription servicePath(String servicePath) {
    this.servicePath = servicePath;
    return this;
  }

  /**
   * The base path for all REST requests.
   * @return servicePath
   */
  @javax.annotation.Nullable
  public String getServicePath() {
    return servicePath;
  }

  public void setServicePath(String servicePath) {
    this.servicePath = servicePath;
  }


  public RestDescription title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of this API.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public RestDescription version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of this API.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public RestDescription versionModule(Boolean versionModule) {
    this.versionModule = versionModule;
    return this;
  }

  /**
   * Get versionModule
   * @return versionModule
   */
  @javax.annotation.Nullable
  public Boolean getVersionModule() {
    return versionModule;
  }

  public void setVersionModule(Boolean versionModule) {
    this.versionModule = versionModule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestDescription restDescription = (RestDescription) o;
    return Objects.equals(this.auth, restDescription.auth) &&
        Objects.equals(this.basePath, restDescription.basePath) &&
        Objects.equals(this.baseUrl, restDescription.baseUrl) &&
        Objects.equals(this.batchPath, restDescription.batchPath) &&
        Objects.equals(this.canonicalName, restDescription.canonicalName) &&
        Objects.equals(this.description, restDescription.description) &&
        Objects.equals(this.discoveryVersion, restDescription.discoveryVersion) &&
        Objects.equals(this.documentationLink, restDescription.documentationLink) &&
        Objects.equals(this.endpoints, restDescription.endpoints) &&
        Objects.equals(this.etag, restDescription.etag) &&
        Objects.equals(this.exponentialBackoffDefault, restDescription.exponentialBackoffDefault) &&
        Objects.equals(this.features, restDescription.features) &&
        Objects.equals(this.icons, restDescription.icons) &&
        Objects.equals(this.id, restDescription.id) &&
        Objects.equals(this.kind, restDescription.kind) &&
        Objects.equals(this.labels, restDescription.labels) &&
        Objects.equals(this.methods, restDescription.methods) &&
        Objects.equals(this.name, restDescription.name) &&
        Objects.equals(this.ownerDomain, restDescription.ownerDomain) &&
        Objects.equals(this.ownerName, restDescription.ownerName) &&
        Objects.equals(this.packagePath, restDescription.packagePath) &&
        Objects.equals(this.parameters, restDescription.parameters) &&
        Objects.equals(this.protocol, restDescription.protocol) &&
        Objects.equals(this.resources, restDescription.resources) &&
        Objects.equals(this.revision, restDescription.revision) &&
        Objects.equals(this.rootUrl, restDescription.rootUrl) &&
        Objects.equals(this.schemas, restDescription.schemas) &&
        Objects.equals(this.servicePath, restDescription.servicePath) &&
        Objects.equals(this.title, restDescription.title) &&
        Objects.equals(this.version, restDescription.version) &&
        Objects.equals(this.versionModule, restDescription.versionModule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auth, basePath, baseUrl, batchPath, canonicalName, description, discoveryVersion, documentationLink, endpoints, etag, exponentialBackoffDefault, features, icons, id, kind, labels, methods, name, ownerDomain, ownerName, packagePath, parameters, protocol, resources, revision, rootUrl, schemas, servicePath, title, version, versionModule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestDescription {\n");
    sb.append("    auth: ").append(toIndentedString(auth)).append("\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    batchPath: ").append(toIndentedString(batchPath)).append("\n");
    sb.append("    canonicalName: ").append(toIndentedString(canonicalName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveryVersion: ").append(toIndentedString(discoveryVersion)).append("\n");
    sb.append("    documentationLink: ").append(toIndentedString(documentationLink)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    exponentialBackoffDefault: ").append(toIndentedString(exponentialBackoffDefault)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    methods: ").append(toIndentedString(methods)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerDomain: ").append(toIndentedString(ownerDomain)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    packagePath: ").append(toIndentedString(packagePath)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    rootUrl: ").append(toIndentedString(rootUrl)).append("\n");
    sb.append("    schemas: ").append(toIndentedString(schemas)).append("\n");
    sb.append("    servicePath: ").append(toIndentedString(servicePath)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionModule: ").append(toIndentedString(versionModule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth");
    openapiFields.add("basePath");
    openapiFields.add("baseUrl");
    openapiFields.add("batchPath");
    openapiFields.add("canonicalName");
    openapiFields.add("description");
    openapiFields.add("discoveryVersion");
    openapiFields.add("documentationLink");
    openapiFields.add("endpoints");
    openapiFields.add("etag");
    openapiFields.add("exponentialBackoffDefault");
    openapiFields.add("features");
    openapiFields.add("icons");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("methods");
    openapiFields.add("name");
    openapiFields.add("ownerDomain");
    openapiFields.add("ownerName");
    openapiFields.add("packagePath");
    openapiFields.add("parameters");
    openapiFields.add("protocol");
    openapiFields.add("resources");
    openapiFields.add("revision");
    openapiFields.add("rootUrl");
    openapiFields.add("schemas");
    openapiFields.add("servicePath");
    openapiFields.add("title");
    openapiFields.add("version");
    openapiFields.add("version_module");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestDescription is not found in the empty JSON string", RestDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auth`
      if (jsonObj.get("auth") != null && !jsonObj.get("auth").isJsonNull()) {
        RestDescriptionAuth.validateJsonElement(jsonObj.get("auth"));
      }
      if ((jsonObj.get("basePath") != null && !jsonObj.get("basePath").isJsonNull()) && !jsonObj.get("basePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePath").toString()));
      }
      if ((jsonObj.get("baseUrl") != null && !jsonObj.get("baseUrl").isJsonNull()) && !jsonObj.get("baseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseUrl").toString()));
      }
      if ((jsonObj.get("batchPath") != null && !jsonObj.get("batchPath").isJsonNull()) && !jsonObj.get("batchPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchPath").toString()));
      }
      if ((jsonObj.get("canonicalName") != null && !jsonObj.get("canonicalName").isJsonNull()) && !jsonObj.get("canonicalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonicalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonicalName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discoveryVersion") != null && !jsonObj.get("discoveryVersion").isJsonNull()) && !jsonObj.get("discoveryVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryVersion").toString()));
      }
      if ((jsonObj.get("documentationLink") != null && !jsonObj.get("documentationLink").isJsonNull()) && !jsonObj.get("documentationLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentationLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentationLink").toString()));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            RestDescriptionEndpointsInner.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull() && !jsonObj.get("features").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      // validate the optional field `icons`
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        DirectoryListItemsInnerIcons.validateJsonElement(jsonObj.get("icons"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerDomain") != null && !jsonObj.get("ownerDomain").isJsonNull()) && !jsonObj.get("ownerDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerDomain").toString()));
      }
      if ((jsonObj.get("ownerName") != null && !jsonObj.get("ownerName").isJsonNull()) && !jsonObj.get("ownerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerName").toString()));
      }
      if ((jsonObj.get("packagePath") != null && !jsonObj.get("packagePath").isJsonNull()) && !jsonObj.get("packagePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packagePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packagePath").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if ((jsonObj.get("rootUrl") != null && !jsonObj.get("rootUrl").isJsonNull()) && !jsonObj.get("rootUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootUrl").toString()));
      }
      if ((jsonObj.get("servicePath") != null && !jsonObj.get("servicePath").isJsonNull()) && !jsonObj.get("servicePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicePath").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<RestDescription>() {
           @Override
           public void write(JsonWriter out, RestDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestDescription
   * @throws IOException if the JSON string is invalid with respect to RestDescription
   */
  public static RestDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestDescription.class);
  }

  /**
   * Convert an instance of RestDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

