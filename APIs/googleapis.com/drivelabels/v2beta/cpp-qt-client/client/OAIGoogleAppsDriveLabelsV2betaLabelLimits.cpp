/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaLabelLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaLabelLimits::OAIGoogleAppsDriveLabelsV2betaLabelLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaLabelLimits::OAIGoogleAppsDriveLabelsV2betaLabelLimits() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaLabelLimits::~OAIGoogleAppsDriveLabelsV2betaLabelLimits() {}

void OAIGoogleAppsDriveLabelsV2betaLabelLimits::initializeModel() {

    m_field_limits_isSet = false;
    m_field_limits_isValid = false;

    m_max_deleted_fields_isSet = false;
    m_max_deleted_fields_isValid = false;

    m_max_description_length_isSet = false;
    m_max_description_length_isValid = false;

    m_max_draft_revisions_isSet = false;
    m_max_draft_revisions_isValid = false;

    m_max_fields_isSet = false;
    m_max_fields_isValid = false;

    m_max_title_length_isSet = false;
    m_max_title_length_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaLabelLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaLabelLimits::fromJsonObject(QJsonObject json) {

    m_field_limits_isValid = ::OpenAPI::fromJsonValue(m_field_limits, json[QString("fieldLimits")]);
    m_field_limits_isSet = !json[QString("fieldLimits")].isNull() && m_field_limits_isValid;

    m_max_deleted_fields_isValid = ::OpenAPI::fromJsonValue(m_max_deleted_fields, json[QString("maxDeletedFields")]);
    m_max_deleted_fields_isSet = !json[QString("maxDeletedFields")].isNull() && m_max_deleted_fields_isValid;

    m_max_description_length_isValid = ::OpenAPI::fromJsonValue(m_max_description_length, json[QString("maxDescriptionLength")]);
    m_max_description_length_isSet = !json[QString("maxDescriptionLength")].isNull() && m_max_description_length_isValid;

    m_max_draft_revisions_isValid = ::OpenAPI::fromJsonValue(m_max_draft_revisions, json[QString("maxDraftRevisions")]);
    m_max_draft_revisions_isSet = !json[QString("maxDraftRevisions")].isNull() && m_max_draft_revisions_isValid;

    m_max_fields_isValid = ::OpenAPI::fromJsonValue(m_max_fields, json[QString("maxFields")]);
    m_max_fields_isSet = !json[QString("maxFields")].isNull() && m_max_fields_isValid;

    m_max_title_length_isValid = ::OpenAPI::fromJsonValue(m_max_title_length, json[QString("maxTitleLength")]);
    m_max_title_length_isSet = !json[QString("maxTitleLength")].isNull() && m_max_title_length_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaLabelLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_field_limits.isSet()) {
        obj.insert(QString("fieldLimits"), ::OpenAPI::toJsonValue(m_field_limits));
    }
    if (m_max_deleted_fields_isSet) {
        obj.insert(QString("maxDeletedFields"), ::OpenAPI::toJsonValue(m_max_deleted_fields));
    }
    if (m_max_description_length_isSet) {
        obj.insert(QString("maxDescriptionLength"), ::OpenAPI::toJsonValue(m_max_description_length));
    }
    if (m_max_draft_revisions_isSet) {
        obj.insert(QString("maxDraftRevisions"), ::OpenAPI::toJsonValue(m_max_draft_revisions));
    }
    if (m_max_fields_isSet) {
        obj.insert(QString("maxFields"), ::OpenAPI::toJsonValue(m_max_fields));
    }
    if (m_max_title_length_isSet) {
        obj.insert(QString("maxTitleLength"), ::OpenAPI::toJsonValue(m_max_title_length));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

OAIGoogleAppsDriveLabelsV2betaFieldLimits OAIGoogleAppsDriveLabelsV2betaLabelLimits::getFieldLimits() const {
    return m_field_limits;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setFieldLimits(const OAIGoogleAppsDriveLabelsV2betaFieldLimits &field_limits) {
    m_field_limits = field_limits;
    m_field_limits_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_field_limits_Set() const{
    return m_field_limits_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_field_limits_Valid() const{
    return m_field_limits_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2betaLabelLimits::getMaxDeletedFields() const {
    return m_max_deleted_fields;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setMaxDeletedFields(const qint32 &max_deleted_fields) {
    m_max_deleted_fields = max_deleted_fields;
    m_max_deleted_fields_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_deleted_fields_Set() const{
    return m_max_deleted_fields_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_deleted_fields_Valid() const{
    return m_max_deleted_fields_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2betaLabelLimits::getMaxDescriptionLength() const {
    return m_max_description_length;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setMaxDescriptionLength(const qint32 &max_description_length) {
    m_max_description_length = max_description_length;
    m_max_description_length_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_description_length_Set() const{
    return m_max_description_length_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_description_length_Valid() const{
    return m_max_description_length_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2betaLabelLimits::getMaxDraftRevisions() const {
    return m_max_draft_revisions;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setMaxDraftRevisions(const qint32 &max_draft_revisions) {
    m_max_draft_revisions = max_draft_revisions;
    m_max_draft_revisions_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_draft_revisions_Set() const{
    return m_max_draft_revisions_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_draft_revisions_Valid() const{
    return m_max_draft_revisions_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2betaLabelLimits::getMaxFields() const {
    return m_max_fields;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setMaxFields(const qint32 &max_fields) {
    m_max_fields = max_fields;
    m_max_fields_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_fields_Set() const{
    return m_max_fields_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_fields_Valid() const{
    return m_max_fields_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2betaLabelLimits::getMaxTitleLength() const {
    return m_max_title_length;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setMaxTitleLength(const qint32 &max_title_length) {
    m_max_title_length = max_title_length;
    m_max_title_length_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_title_length_Set() const{
    return m_max_title_length_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_max_title_length_Valid() const{
    return m_max_title_length_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelLimits::getName() const {
    return m_name;
}
void OAIGoogleAppsDriveLabelsV2betaLabelLimits::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_deleted_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_description_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_draft_revisions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_title_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
