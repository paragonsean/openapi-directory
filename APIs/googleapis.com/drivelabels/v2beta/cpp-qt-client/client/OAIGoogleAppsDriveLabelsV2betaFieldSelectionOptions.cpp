/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::~OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions() {}

void OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::initializeModel() {

    m_choices_isSet = false;
    m_choices_isValid = false;

    m_list_options_isSet = false;
    m_list_options_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::fromJsonObject(QJsonObject json) {

    m_choices_isValid = ::OpenAPI::fromJsonValue(m_choices, json[QString("choices")]);
    m_choices_isSet = !json[QString("choices")].isNull() && m_choices_isValid;

    m_list_options_isValid = ::OpenAPI::fromJsonValue(m_list_options, json[QString("listOptions")]);
    m_list_options_isSet = !json[QString("listOptions")].isNull() && m_list_options_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_choices.size() > 0) {
        obj.insert(QString("choices"), ::OpenAPI::toJsonValue(m_choices));
    }
    if (m_list_options.isSet()) {
        obj.insert(QString("listOptions"), ::OpenAPI::toJsonValue(m_list_options));
    }
    return obj;
}

QList<OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoice> OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::getChoices() const {
    return m_choices;
}
void OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::setChoices(const QList<OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoice> &choices) {
    m_choices = choices;
    m_choices_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::is_choices_Set() const{
    return m_choices_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::is_choices_Valid() const{
    return m_choices_isValid;
}

OAIGoogleAppsDriveLabelsV2betaFieldListOptions OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::getListOptions() const {
    return m_list_options;
}
void OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::setListOptions(const OAIGoogleAppsDriveLabelsV2betaFieldListOptions &list_options) {
    m_list_options = list_options;
    m_list_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::is_list_options_Set() const{
    return m_list_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::is_list_options_Valid() const{
    return m_list_options_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaFieldSelectionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
