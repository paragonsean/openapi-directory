/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::~OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy() {}

void OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::initializeModel() {

    m_hide_in_search_isSet = false;
    m_hide_in_search_isValid = false;

    m_show_in_apply_isSet = false;
    m_show_in_apply_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::fromJsonObject(QJsonObject json) {

    m_hide_in_search_isValid = ::OpenAPI::fromJsonValue(m_hide_in_search, json[QString("hideInSearch")]);
    m_hide_in_search_isSet = !json[QString("hideInSearch")].isNull() && m_hide_in_search_isValid;

    m_show_in_apply_isValid = ::OpenAPI::fromJsonValue(m_show_in_apply, json[QString("showInApply")]);
    m_show_in_apply_isSet = !json[QString("showInApply")].isNull() && m_show_in_apply_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_hide_in_search_isSet) {
        obj.insert(QString("hideInSearch"), ::OpenAPI::toJsonValue(m_hide_in_search));
    }
    if (m_show_in_apply_isSet) {
        obj.insert(QString("showInApply"), ::OpenAPI::toJsonValue(m_show_in_apply));
    }
    return obj;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::isHideInSearch() const {
    return m_hide_in_search;
}
void OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::setHideInSearch(const bool &hide_in_search) {
    m_hide_in_search = hide_in_search;
    m_hide_in_search_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::is_hide_in_search_Set() const{
    return m_hide_in_search_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::is_hide_in_search_Valid() const{
    return m_hide_in_search_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::isShowInApply() const {
    return m_show_in_apply;
}
void OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::setShowInApply(const bool &show_in_apply) {
    m_show_in_apply = show_in_apply;
    m_show_in_apply_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::is_show_in_apply_Set() const{
    return m_show_in_apply_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::is_show_in_apply_Valid() const{
    return m_show_in_apply_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hide_in_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_apply_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
