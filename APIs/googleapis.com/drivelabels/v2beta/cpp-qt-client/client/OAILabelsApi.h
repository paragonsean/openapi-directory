/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILabelsApi_H
#define OAI_OAILabelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse.h"
#include "OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse.h"
#include "OAIGoogleAppsDriveLabelsV2betaDisableLabelRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaEnableLabelRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaLabel.h"
#include "OAIGoogleAppsDriveLabelsV2betaLabelPermission.h"
#include "OAIGoogleAppsDriveLabelsV2betaListLabelLocksResponse.h"
#include "OAIGoogleAppsDriveLabelsV2betaListLabelPermissionsResponse.h"
#include "OAIGoogleAppsDriveLabelsV2betaListLabelsResponse.h"
#include "OAIGoogleAppsDriveLabelsV2betaPublishLabelRequest.h"
#include "OAIGoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILabelsApi : public QObject {
    Q_OBJECT

public:
    OAILabelsApi(const int timeOut = 0);
    ~OAILabelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  use_admin_access bool [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_label OAIGoogleAppsDriveLabelsV2betaLabel [optional]
    */
    virtual void drivelabels_labels_create(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabel> &oai_google_apps_drive_labels_v2beta_label = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabel>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_delta_update_label_request OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest [optional]
    */
    virtual void drivelabels_labels_delta(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest> &oai_google_apps_drive_labels_v2beta_delta_update_label_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_disable_label_request OAIGoogleAppsDriveLabelsV2betaDisableLabelRequest [optional]
    */
    virtual void drivelabels_labels_disable(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaDisableLabelRequest> &oai_google_apps_drive_labels_v2beta_disable_label_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaDisableLabelRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_enable_label_request OAIGoogleAppsDriveLabelsV2betaEnableLabelRequest [optional]
    */
    virtual void drivelabels_labels_enable(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaEnableLabelRequest> &oai_google_apps_drive_labels_v2beta_enable_label_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaEnableLabelRequest>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  customer QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  minimum_role QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  published_only bool [optional]
    * @param[in]  use_admin_access bool [optional]
    * @param[in]  view QString [optional]
    */
    virtual void drivelabels_labels_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &customer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &minimum_role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &published_only = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_publish_label_request OAIGoogleAppsDriveLabelsV2betaPublishLabelRequest [optional]
    */
    virtual void drivelabels_labels_publish(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaPublishLabelRequest> &oai_google_apps_drive_labels_v2beta_publish_label_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaPublishLabelRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void drivelabels_labels_revisions_locks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_batch_delete_label_permissions_request OAIGoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest [optional]
    */
    virtual void drivelabels_labels_revisions_permissions_batchDelete(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest> &oai_google_apps_drive_labels_v2beta_batch_delete_label_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_batch_update_label_permissions_request OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest [optional]
    */
    virtual void drivelabels_labels_revisions_permissions_batchUpdate(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest> &oai_google_apps_drive_labels_v2beta_batch_update_label_permissions_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  use_admin_access bool [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_label_permission OAIGoogleAppsDriveLabelsV2betaLabelPermission [optional]
    */
    virtual void drivelabels_labels_revisions_permissions_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabelPermission> &oai_google_apps_drive_labels_v2beta_label_permission = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabelPermission>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  use_admin_access bool [optional]
    * @param[in]  write_control_required_revision_id QString [optional]
    */
    virtual void drivelabels_labels_revisions_permissions_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &write_control_required_revision_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  use_admin_access bool [optional]
    */
    virtual void drivelabels_labels_revisions_permissions_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  use_admin_access bool [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_label_permission OAIGoogleAppsDriveLabelsV2betaLabelPermission [optional]
    */
    virtual void drivelabels_labels_revisions_updatePermissions(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabelPermission> &oai_google_apps_drive_labels_v2beta_label_permission = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaLabelPermission>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_apps_drive_labels_v2beta_update_label_copy_mode_request OAIGoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest [optional]
    */
    virtual void drivelabels_labels_updateLabelCopyMode(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest> &oai_google_apps_drive_labels_v2beta_update_label_copy_mode_request = ::OpenAPI::OptionalParam<OAIGoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void drivelabels_labels_createCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_deltaCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_disableCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_enableCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_listCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_publishCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_locks_listCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_permissions_batchDeleteCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_permissions_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_permissions_createCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_permissions_deleteCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_permissions_listCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_revisions_updatePermissionsCallback(OAIHttpRequestWorker *worker);
    void drivelabels_labels_updateLabelCopyModeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void drivelabels_labels_createSignal(OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_deltaSignal(OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse summary);
    void drivelabels_labels_disableSignal(OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_enableSignal(OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_listSignal(OAIGoogleAppsDriveLabelsV2betaListLabelsResponse summary);
    void drivelabels_labels_publishSignal(OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_revisions_locks_listSignal(OAIGoogleAppsDriveLabelsV2betaListLabelLocksResponse summary);
    void drivelabels_labels_revisions_permissions_batchDeleteSignal(OAIObject summary);
    void drivelabels_labels_revisions_permissions_batchUpdateSignal(OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse summary);
    void drivelabels_labels_revisions_permissions_createSignal(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary);
    void drivelabels_labels_revisions_permissions_deleteSignal(OAIObject summary);
    void drivelabels_labels_revisions_permissions_listSignal(OAIGoogleAppsDriveLabelsV2betaListLabelPermissionsResponse summary);
    void drivelabels_labels_revisions_updatePermissionsSignal(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary);
    void drivelabels_labels_updateLabelCopyModeSignal(OAIGoogleAppsDriveLabelsV2betaLabel summary);


    void drivelabels_labels_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_deltaSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse summary);
    void drivelabels_labels_disableSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_enableSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaListLabelsResponse summary);
    void drivelabels_labels_publishSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabel summary);
    void drivelabels_labels_revisions_locks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaListLabelLocksResponse summary);
    void drivelabels_labels_revisions_permissions_batchDeleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void drivelabels_labels_revisions_permissions_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse summary);
    void drivelabels_labels_revisions_permissions_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabelPermission summary);
    void drivelabels_labels_revisions_permissions_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void drivelabels_labels_revisions_permissions_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaListLabelPermissionsResponse summary);
    void drivelabels_labels_revisions_updatePermissionsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabelPermission summary);
    void drivelabels_labels_updateLabelCopyModeSignalFull(OAIHttpRequestWorker *worker, OAIGoogleAppsDriveLabelsV2betaLabel summary);

    Q_DECL_DEPRECATED_X("Use drivelabels_labels_createSignalError() instead")
    void drivelabels_labels_createSignalE(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_createSignalError(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_deltaSignalError() instead")
    void drivelabels_labels_deltaSignalE(OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_deltaSignalError(OAIGoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_disableSignalError() instead")
    void drivelabels_labels_disableSignalE(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_disableSignalError(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_enableSignalError() instead")
    void drivelabels_labels_enableSignalE(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_enableSignalError(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_listSignalError() instead")
    void drivelabels_labels_listSignalE(OAIGoogleAppsDriveLabelsV2betaListLabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_listSignalError(OAIGoogleAppsDriveLabelsV2betaListLabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_publishSignalError() instead")
    void drivelabels_labels_publishSignalE(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_publishSignalError(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_locks_listSignalError() instead")
    void drivelabels_labels_revisions_locks_listSignalE(OAIGoogleAppsDriveLabelsV2betaListLabelLocksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_locks_listSignalError(OAIGoogleAppsDriveLabelsV2betaListLabelLocksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_batchDeleteSignalError() instead")
    void drivelabels_labels_revisions_permissions_batchDeleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_batchDeleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_batchUpdateSignalError() instead")
    void drivelabels_labels_revisions_permissions_batchUpdateSignalE(OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_batchUpdateSignalError(OAIGoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_createSignalError() instead")
    void drivelabels_labels_revisions_permissions_createSignalE(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_createSignalError(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_deleteSignalError() instead")
    void drivelabels_labels_revisions_permissions_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_listSignalError() instead")
    void drivelabels_labels_revisions_permissions_listSignalE(OAIGoogleAppsDriveLabelsV2betaListLabelPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_listSignalError(OAIGoogleAppsDriveLabelsV2betaListLabelPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_updatePermissionsSignalError() instead")
    void drivelabels_labels_revisions_updatePermissionsSignalE(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_updatePermissionsSignalError(OAIGoogleAppsDriveLabelsV2betaLabelPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_updateLabelCopyModeSignalError() instead")
    void drivelabels_labels_updateLabelCopyModeSignalE(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_updateLabelCopyModeSignalError(OAIGoogleAppsDriveLabelsV2betaLabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use drivelabels_labels_createSignalErrorFull() instead")
    void drivelabels_labels_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_deltaSignalErrorFull() instead")
    void drivelabels_labels_deltaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_deltaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_disableSignalErrorFull() instead")
    void drivelabels_labels_disableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_disableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_enableSignalErrorFull() instead")
    void drivelabels_labels_enableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_enableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_listSignalErrorFull() instead")
    void drivelabels_labels_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_publishSignalErrorFull() instead")
    void drivelabels_labels_publishSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_publishSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_locks_listSignalErrorFull() instead")
    void drivelabels_labels_revisions_locks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_locks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_batchDeleteSignalErrorFull() instead")
    void drivelabels_labels_revisions_permissions_batchDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_batchDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_batchUpdateSignalErrorFull() instead")
    void drivelabels_labels_revisions_permissions_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_createSignalErrorFull() instead")
    void drivelabels_labels_revisions_permissions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_deleteSignalErrorFull() instead")
    void drivelabels_labels_revisions_permissions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_permissions_listSignalErrorFull() instead")
    void drivelabels_labels_revisions_permissions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_permissions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_revisions_updatePermissionsSignalErrorFull() instead")
    void drivelabels_labels_revisions_updatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_revisions_updatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drivelabels_labels_updateLabelCopyModeSignalErrorFull() instead")
    void drivelabels_labels_updateLabelCopyModeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drivelabels_labels_updateLabelCopyModeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
