/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaBadgeColors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaBadgeColors::OAIGoogleAppsDriveLabelsV2betaBadgeColors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaBadgeColors::OAIGoogleAppsDriveLabelsV2betaBadgeColors() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaBadgeColors::~OAIGoogleAppsDriveLabelsV2betaBadgeColors() {}

void OAIGoogleAppsDriveLabelsV2betaBadgeColors::initializeModel() {

    m_background_color_isSet = false;
    m_background_color_isValid = false;

    m_foreground_color_isSet = false;
    m_foreground_color_isValid = false;

    m_solo_color_isSet = false;
    m_solo_color_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaBadgeColors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaBadgeColors::fromJsonObject(QJsonObject json) {

    m_background_color_isValid = ::OpenAPI::fromJsonValue(m_background_color, json[QString("backgroundColor")]);
    m_background_color_isSet = !json[QString("backgroundColor")].isNull() && m_background_color_isValid;

    m_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_foreground_color, json[QString("foregroundColor")]);
    m_foreground_color_isSet = !json[QString("foregroundColor")].isNull() && m_foreground_color_isValid;

    m_solo_color_isValid = ::OpenAPI::fromJsonValue(m_solo_color, json[QString("soloColor")]);
    m_solo_color_isSet = !json[QString("soloColor")].isNull() && m_solo_color_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaBadgeColors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaBadgeColors::asJsonObject() const {
    QJsonObject obj;
    if (m_background_color.isSet()) {
        obj.insert(QString("backgroundColor"), ::OpenAPI::toJsonValue(m_background_color));
    }
    if (m_foreground_color.isSet()) {
        obj.insert(QString("foregroundColor"), ::OpenAPI::toJsonValue(m_foreground_color));
    }
    if (m_solo_color.isSet()) {
        obj.insert(QString("soloColor"), ::OpenAPI::toJsonValue(m_solo_color));
    }
    return obj;
}

OAIGoogleTypeColor OAIGoogleAppsDriveLabelsV2betaBadgeColors::getBackgroundColor() const {
    return m_background_color;
}
void OAIGoogleAppsDriveLabelsV2betaBadgeColors::setBackgroundColor(const OAIGoogleTypeColor &background_color) {
    m_background_color = background_color;
    m_background_color_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_background_color_Set() const{
    return m_background_color_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_background_color_Valid() const{
    return m_background_color_isValid;
}

OAIGoogleTypeColor OAIGoogleAppsDriveLabelsV2betaBadgeColors::getForegroundColor() const {
    return m_foreground_color;
}
void OAIGoogleAppsDriveLabelsV2betaBadgeColors::setForegroundColor(const OAIGoogleTypeColor &foreground_color) {
    m_foreground_color = foreground_color;
    m_foreground_color_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_foreground_color_Set() const{
    return m_foreground_color_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_foreground_color_Valid() const{
    return m_foreground_color_isValid;
}

OAIGoogleTypeColor OAIGoogleAppsDriveLabelsV2betaBadgeColors::getSoloColor() const {
    return m_solo_color;
}
void OAIGoogleAppsDriveLabelsV2betaBadgeColors::setSoloColor(const OAIGoogleTypeColor &solo_color) {
    m_solo_color = solo_color;
    m_solo_color_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_solo_color_Set() const{
    return m_solo_color_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::is_solo_color_Valid() const{
    return m_solo_color_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreground_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_solo_color.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeColors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
