/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaLabelPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaLabelPermission::OAIGoogleAppsDriveLabelsV2betaLabelPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaLabelPermission::OAIGoogleAppsDriveLabelsV2betaLabelPermission() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaLabelPermission::~OAIGoogleAppsDriveLabelsV2betaLabelPermission() {}

void OAIGoogleAppsDriveLabelsV2betaLabelPermission::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaLabelPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaLabelPermission::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaLabelPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_person_isSet) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getAudience() const {
    return m_audience;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getEmail() const {
    return m_email;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_email_Set() const{
    return m_email_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getGroup() const {
    return m_group;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_group_Set() const{
    return m_group_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_group_Valid() const{
    return m_group_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getName() const {
    return m_name;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getPerson() const {
    return m_person;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setPerson(const QString &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_person_Set() const{
    return m_person_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_person_Valid() const{
    return m_person_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaLabelPermission::getRole() const {
    return m_role;
}
void OAIGoogleAppsDriveLabelsV2betaLabelPermission::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_role_Set() const{
    return m_role_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaLabelPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
