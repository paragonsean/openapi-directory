/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2betaBadgeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2betaBadgeConfig::OAIGoogleAppsDriveLabelsV2betaBadgeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2betaBadgeConfig::OAIGoogleAppsDriveLabelsV2betaBadgeConfig() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2betaBadgeConfig::~OAIGoogleAppsDriveLabelsV2betaBadgeConfig() {}

void OAIGoogleAppsDriveLabelsV2betaBadgeConfig::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_priority_override_isSet = false;
    m_priority_override_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2betaBadgeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2betaBadgeConfig::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_priority_override_isValid = ::OpenAPI::fromJsonValue(m_priority_override, json[QString("priorityOverride")]);
    m_priority_override_isSet = !json[QString("priorityOverride")].isNull() && m_priority_override_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaBadgeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2betaBadgeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_priority_override_isSet) {
        obj.insert(QString("priorityOverride"), ::OpenAPI::toJsonValue(m_priority_override));
    }
    return obj;
}

OAIGoogleTypeColor OAIGoogleAppsDriveLabelsV2betaBadgeConfig::getColor() const {
    return m_color;
}
void OAIGoogleAppsDriveLabelsV2betaBadgeConfig::setColor(const OAIGoogleTypeColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIGoogleAppsDriveLabelsV2betaBadgeConfig::getPriorityOverride() const {
    return m_priority_override;
}
void OAIGoogleAppsDriveLabelsV2betaBadgeConfig::setPriorityOverride(const QString &priority_override) {
    m_priority_override = priority_override;
    m_priority_override_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::is_priority_override_Set() const{
    return m_priority_override_isSet;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::is_priority_override_Valid() const{
    return m_priority_override_isValid;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_override_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2betaBadgeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
