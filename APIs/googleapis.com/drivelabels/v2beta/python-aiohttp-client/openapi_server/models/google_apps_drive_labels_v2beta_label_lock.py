# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_drive_labels_v2beta_label_lock_capabilities import GoogleAppsDriveLabelsV2betaLabelLockCapabilities
from openapi_server.models.google_apps_drive_labels_v2beta_user_info import GoogleAppsDriveLabelsV2betaUserInfo
from openapi_server import util


class GoogleAppsDriveLabelsV2betaLabelLock(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: GoogleAppsDriveLabelsV2betaLabelLockCapabilities=None, choice_id: str=None, create_time: str=None, creator: GoogleAppsDriveLabelsV2betaUserInfo=None, delete_time: str=None, field_id: str=None, name: str=None, state: str=None):
        """GoogleAppsDriveLabelsV2betaLabelLock - a model defined in OpenAPI

        :param capabilities: The capabilities of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param choice_id: The choice_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param create_time: The create_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param creator: The creator of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param delete_time: The delete_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param field_id: The field_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param name: The name of this GoogleAppsDriveLabelsV2betaLabelLock.
        :param state: The state of this GoogleAppsDriveLabelsV2betaLabelLock.
        """
        self.openapi_types = {
            'capabilities': GoogleAppsDriveLabelsV2betaLabelLockCapabilities,
            'choice_id': str,
            'create_time': str,
            'creator': GoogleAppsDriveLabelsV2betaUserInfo,
            'delete_time': str,
            'field_id': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'choice_id': 'choiceId',
            'create_time': 'createTime',
            'creator': 'creator',
            'delete_time': 'deleteTime',
            'field_id': 'fieldId',
            'name': 'name',
            'state': 'state'
        }

        self._capabilities = capabilities
        self._choice_id = choice_id
        self._create_time = create_time
        self._creator = creator
        self._delete_time = delete_time
        self._field_id = field_id
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2betaLabelLock':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2betaLabelLock of this GoogleAppsDriveLabelsV2betaLabelLock.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this GoogleAppsDriveLabelsV2betaLabelLock.


        :return: The capabilities of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: GoogleAppsDriveLabelsV2betaLabelLockCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this GoogleAppsDriveLabelsV2betaLabelLock.


        :param capabilities: The capabilities of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type capabilities: GoogleAppsDriveLabelsV2betaLabelLockCapabilities
        """

        self._capabilities = capabilities

    @property
    def choice_id(self):
        """Gets the choice_id of this GoogleAppsDriveLabelsV2betaLabelLock.

        The ID of the Selection Field Choice that should be locked. If present, `field_id` must also be present.

        :return: The choice_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._choice_id

    @choice_id.setter
    def choice_id(self, choice_id):
        """Sets the choice_id of this GoogleAppsDriveLabelsV2betaLabelLock.

        The ID of the Selection Field Choice that should be locked. If present, `field_id` must also be present.

        :param choice_id: The choice_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type choice_id: str
        """

        self._choice_id = choice_id

    @property
    def create_time(self):
        """Gets the create_time of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. The time this LabelLock was created.

        :return: The create_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. The time this LabelLock was created.

        :param create_time: The create_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def creator(self):
        """Gets the creator of this GoogleAppsDriveLabelsV2betaLabelLock.


        :return: The creator of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: GoogleAppsDriveLabelsV2betaUserInfo
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this GoogleAppsDriveLabelsV2betaLabelLock.


        :param creator: The creator of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type creator: GoogleAppsDriveLabelsV2betaUserInfo
        """

        self._creator = creator

    @property
    def delete_time(self):
        """Gets the delete_time of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. A timestamp indicating when this LabelLock was scheduled for deletion. This will be present only if this LabelLock is in the DELETING state.

        :return: The delete_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. A timestamp indicating when this LabelLock was scheduled for deletion. This will be present only if this LabelLock is in the DELETING state.

        :param delete_time: The delete_time of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def field_id(self):
        """Gets the field_id of this GoogleAppsDriveLabelsV2betaLabelLock.

        The ID of the Field that should be locked. Empty if the whole Label should be locked.

        :return: The field_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this GoogleAppsDriveLabelsV2betaLabelLock.

        The ID of the Field that should be locked. Empty if the whole Label should be locked.

        :param field_id: The field_id of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type field_id: str
        """

        self._field_id = field_id

    @property
    def name(self):
        """Gets the name of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. Resource name of this LabelLock.

        :return: The name of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. Resource name of this LabelLock.

        :param name: The name of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. This LabelLock's state.

        :return: The state of this GoogleAppsDriveLabelsV2betaLabelLock.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleAppsDriveLabelsV2betaLabelLock.

        Output only. This LabelLock's state.

        :param state: The state of this GoogleAppsDriveLabelsV2betaLabelLock.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
