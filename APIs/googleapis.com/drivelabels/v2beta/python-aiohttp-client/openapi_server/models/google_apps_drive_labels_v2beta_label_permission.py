# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAppsDriveLabelsV2betaLabelPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, email: str=None, group: str=None, name: str=None, person: str=None, role: str=None):
        """GoogleAppsDriveLabelsV2betaLabelPermission - a model defined in OpenAPI

        :param audience: The audience of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :param email: The email of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :param group: The group of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :param name: The name of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :param person: The person of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :param role: The role of this GoogleAppsDriveLabelsV2betaLabelPermission.
        """
        self.openapi_types = {
            'audience': str,
            'email': str,
            'group': str,
            'name': str,
            'person': str,
            'role': str
        }

        self.attribute_map = {
            'audience': 'audience',
            'email': 'email',
            'group': 'group',
            'name': 'name',
            'person': 'person',
            'role': 'role'
        }

        self._audience = audience
        self._email = email
        self._group = group
        self._name = name
        self._person = person
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2betaLabelPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2betaLabelPermission of this GoogleAppsDriveLabelsV2betaLabelPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Audience to grant a role to. The magic value of `audiences/default` may be used to apply the role to the default audience in the context of the organization that owns the Label.

        :return: The audience of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Audience to grant a role to. The magic value of `audiences/default` may be used to apply the role to the default audience in the context of the organization that owns the Label.

        :param audience: The audience of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type audience: str
        """

        self._audience = audience

    @property
    def email(self):
        """Gets the email of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Specifies the email address for a user or group pricinpal. Not populated for audience principals. User and Group permissions may only be inserted using email address. On update requests, if email address is specified, no principal should be specified.

        :return: The email of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Specifies the email address for a user or group pricinpal. Not populated for audience principals. User and Group permissions may only be inserted using email address. On update requests, if email address is specified, no principal should be specified.

        :param email: The email of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type email: str
        """

        self._email = email

    @property
    def group(self):
        """Gets the group of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Group resource name.

        :return: The group of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Group resource name.

        :param group: The group of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type group: str
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Resource name of this permission.

        :return: The name of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Resource name of this permission.

        :param name: The name of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type name: str
        """

        self._name = name

    @property
    def person(self):
        """Gets the person of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Person resource name.

        :return: The person of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this GoogleAppsDriveLabelsV2betaLabelPermission.

        Person resource name.

        :param person: The person of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type person: str
        """

        self._person = person

    @property
    def role(self):
        """Gets the role of this GoogleAppsDriveLabelsV2betaLabelPermission.

        The role the principal should have.

        :return: The role of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GoogleAppsDriveLabelsV2betaLabelPermission.

        The role the principal should have.

        :param role: The role of this GoogleAppsDriveLabelsV2betaLabelPermission.
        :type role: str
        """
        allowed_values = ["LABEL_ROLE_UNSPECIFIED", "READER", "APPLIER", "ORGANIZER", "EDITOR"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
