/*
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaWriteControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The set of requests for updating aspects of a Label. If any request is not valid, no requests will be applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:40.592480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "languageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_REQUESTS = "requests";
  @SerializedName(SERIALIZED_NAME_REQUESTS)
  private List<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest> requests = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_ADMIN_ACCESS = "useAdminAccess";
  @SerializedName(SERIALIZED_NAME_USE_ADMIN_ACCESS)
  private Boolean useAdminAccess;

  /**
   * When specified, only certain fields belonging to the indicated view will be returned.
   */
  @JsonAdapter(ViewEnum.Adapter.class)
  public enum ViewEnum {
    BASIC("LABEL_VIEW_BASIC"),
    
    FULL("LABEL_VIEW_FULL");

    private String value;

    ViewEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViewEnum fromValue(String value) {
      for (ViewEnum b : ViewEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViewEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViewEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViewEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViewEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIEW = "view";
  @SerializedName(SERIALIZED_NAME_VIEW)
  private ViewEnum view;

  public static final String SERIALIZED_NAME_WRITE_CONTROL = "writeControl";
  @SerializedName(SERIALIZED_NAME_WRITE_CONTROL)
  private GoogleAppsDriveLabelsV2betaWriteControl writeControl;

  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest() {
  }

  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The BCP-47 language code to use for evaluating localized Field labels when &#x60;include_label_in_response&#x60; is &#x60;true&#x60;.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest requests(List<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest> requests) {
    this.requests = requests;
    return this;
  }

  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest addRequestsItem(GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest requestsItem) {
    if (this.requests == null) {
      this.requests = new ArrayList<>();
    }
    this.requests.add(requestsItem);
    return this;
  }

  /**
   * A list of updates to apply to the Label. Requests will be applied in the order they are specified.
   * @return requests
   */
  @javax.annotation.Nullable
  public List<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest> getRequests() {
    return requests;
  }

  public void setRequests(List<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest> requests) {
    this.requests = requests;
  }


  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest useAdminAccess(Boolean useAdminAccess) {
    this.useAdminAccess = useAdminAccess;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; in order to use the user&#39;s admin credentials. The server will verify the user is an admin for the Label before allowing access.
   * @return useAdminAccess
   */
  @javax.annotation.Nullable
  public Boolean getUseAdminAccess() {
    return useAdminAccess;
  }

  public void setUseAdminAccess(Boolean useAdminAccess) {
    this.useAdminAccess = useAdminAccess;
  }


  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest view(ViewEnum view) {
    this.view = view;
    return this;
  }

  /**
   * When specified, only certain fields belonging to the indicated view will be returned.
   * @return view
   */
  @javax.annotation.Nullable
  public ViewEnum getView() {
    return view;
  }

  public void setView(ViewEnum view) {
    this.view = view;
  }


  public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest writeControl(GoogleAppsDriveLabelsV2betaWriteControl writeControl) {
    this.writeControl = writeControl;
    return this;
  }

  /**
   * Get writeControl
   * @return writeControl
   */
  @javax.annotation.Nullable
  public GoogleAppsDriveLabelsV2betaWriteControl getWriteControl() {
    return writeControl;
  }

  public void setWriteControl(GoogleAppsDriveLabelsV2betaWriteControl writeControl) {
    this.writeControl = writeControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest = (GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest) o;
    return Objects.equals(this.languageCode, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.languageCode) &&
        Objects.equals(this.requests, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.requests) &&
        Objects.equals(this.useAdminAccess, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.useAdminAccess) &&
        Objects.equals(this.view, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.view) &&
        Objects.equals(this.writeControl, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.writeControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, requests, useAdminAccess, view, writeControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    useAdminAccess: ").append(toIndentedString(useAdminAccess)).append("\n");
    sb.append("    view: ").append(toIndentedString(view)).append("\n");
    sb.append("    writeControl: ").append(toIndentedString(writeControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("languageCode");
    openapiFields.add("requests");
    openapiFields.add("useAdminAccess");
    openapiFields.add("view");
    openapiFields.add("writeControl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest is not found in the empty JSON string", GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("languageCode") != null && !jsonObj.get("languageCode").isJsonNull()) && !jsonObj.get("languageCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageCode").toString()));
      }
      if (jsonObj.get("requests") != null && !jsonObj.get("requests").isJsonNull()) {
        JsonArray jsonArrayrequests = jsonObj.getAsJsonArray("requests");
        if (jsonArrayrequests != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requests").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requests` to be an array in the JSON string but got `%s`", jsonObj.get("requests").toString()));
          }

          // validate the optional field `requests` (array)
          for (int i = 0; i < jsonArrayrequests.size(); i++) {
            GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest.validateJsonElement(jsonArrayrequests.get(i));
          };
        }
      }
      if ((jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) && !jsonObj.get("view").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `view` to be a primitive type in the JSON string but got `%s`", jsonObj.get("view").toString()));
      }
      // validate the optional field `view`
      if (jsonObj.get("view") != null && !jsonObj.get("view").isJsonNull()) {
        ViewEnum.validateJsonElement(jsonObj.get("view"));
      }
      // validate the optional field `writeControl`
      if (jsonObj.get("writeControl") != null && !jsonObj.get("writeControl").isJsonNull()) {
        GoogleAppsDriveLabelsV2betaWriteControl.validateJsonElement(jsonObj.get("writeControl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest>() {
           @Override
           public void write(JsonWriter out, GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest
   */
  public static GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest.class);
  }

  /**
   * Convert an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

