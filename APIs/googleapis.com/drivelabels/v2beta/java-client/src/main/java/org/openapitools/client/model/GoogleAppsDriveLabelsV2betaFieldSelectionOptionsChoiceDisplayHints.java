/*
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaBadgeColors;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UI display hints for rendering an option.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:40.592480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints {
  public static final String SERIALIZED_NAME_BADGE_COLORS = "badgeColors";
  @SerializedName(SERIALIZED_NAME_BADGE_COLORS)
  private GoogleAppsDriveLabelsV2betaBadgeColors badgeColors;

  public static final String SERIALIZED_NAME_BADGE_PRIORITY = "badgePriority";
  @SerializedName(SERIALIZED_NAME_BADGE_PRIORITY)
  private String badgePriority;

  public static final String SERIALIZED_NAME_DARK_BADGE_COLORS = "darkBadgeColors";
  @SerializedName(SERIALIZED_NAME_DARK_BADGE_COLORS)
  private GoogleAppsDriveLabelsV2betaBadgeColors darkBadgeColors;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_HIDDEN_IN_SEARCH = "hiddenInSearch";
  @SerializedName(SERIALIZED_NAME_HIDDEN_IN_SEARCH)
  private Boolean hiddenInSearch;

  public static final String SERIALIZED_NAME_SHOWN_IN_APPLY = "shownInApply";
  @SerializedName(SERIALIZED_NAME_SHOWN_IN_APPLY)
  private Boolean shownInApply;

  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints() {
  }

  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints badgeColors(GoogleAppsDriveLabelsV2betaBadgeColors badgeColors) {
    this.badgeColors = badgeColors;
    return this;
  }

  /**
   * Get badgeColors
   * @return badgeColors
   */
  @javax.annotation.Nullable
  public GoogleAppsDriveLabelsV2betaBadgeColors getBadgeColors() {
    return badgeColors;
  }

  public void setBadgeColors(GoogleAppsDriveLabelsV2betaBadgeColors badgeColors) {
    this.badgeColors = badgeColors;
  }


  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints badgePriority(String badgePriority) {
    this.badgePriority = badgePriority;
    return this;
  }

  /**
   * The priority of this badge. Used to compare and sort between multiple badges. A lower number means the badge should be shown first. When a badging configuration is not present, this will be 0. Otherwise, this will be set to &#x60;BadgeConfig.priority_override&#x60; or the default heuristic which prefers creation date of the label, and field and option priority.
   * @return badgePriority
   */
  @javax.annotation.Nullable
  public String getBadgePriority() {
    return badgePriority;
  }

  public void setBadgePriority(String badgePriority) {
    this.badgePriority = badgePriority;
  }


  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints darkBadgeColors(GoogleAppsDriveLabelsV2betaBadgeColors darkBadgeColors) {
    this.darkBadgeColors = darkBadgeColors;
    return this;
  }

  /**
   * Get darkBadgeColors
   * @return darkBadgeColors
   */
  @javax.annotation.Nullable
  public GoogleAppsDriveLabelsV2betaBadgeColors getDarkBadgeColors() {
    return darkBadgeColors;
  }

  public void setDarkBadgeColors(GoogleAppsDriveLabelsV2betaBadgeColors darkBadgeColors) {
    this.darkBadgeColors = darkBadgeColors;
  }


  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether the option should be shown in the UI as disabled.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints hiddenInSearch(Boolean hiddenInSearch) {
    this.hiddenInSearch = hiddenInSearch;
    return this;
  }

  /**
   * This option should be hidden in the search menu when searching for Drive items.
   * @return hiddenInSearch
   */
  @javax.annotation.Nullable
  public Boolean getHiddenInSearch() {
    return hiddenInSearch;
  }

  public void setHiddenInSearch(Boolean hiddenInSearch) {
    this.hiddenInSearch = hiddenInSearch;
  }


  public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints shownInApply(Boolean shownInApply) {
    this.shownInApply = shownInApply;
    return this;
  }

  /**
   * This option should be shown in the apply menu when applying values to a Drive item.
   * @return shownInApply
   */
  @javax.annotation.Nullable
  public Boolean getShownInApply() {
    return shownInApply;
  }

  public void setShownInApply(Boolean shownInApply) {
    this.shownInApply = shownInApply;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints = (GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints) o;
    return Objects.equals(this.badgeColors, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.badgeColors) &&
        Objects.equals(this.badgePriority, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.badgePriority) &&
        Objects.equals(this.darkBadgeColors, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.darkBadgeColors) &&
        Objects.equals(this.disabled, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.disabled) &&
        Objects.equals(this.hiddenInSearch, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.hiddenInSearch) &&
        Objects.equals(this.shownInApply, googleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.shownInApply);
  }

  @Override
  public int hashCode() {
    return Objects.hash(badgeColors, badgePriority, darkBadgeColors, disabled, hiddenInSearch, shownInApply);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints {\n");
    sb.append("    badgeColors: ").append(toIndentedString(badgeColors)).append("\n");
    sb.append("    badgePriority: ").append(toIndentedString(badgePriority)).append("\n");
    sb.append("    darkBadgeColors: ").append(toIndentedString(darkBadgeColors)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    hiddenInSearch: ").append(toIndentedString(hiddenInSearch)).append("\n");
    sb.append("    shownInApply: ").append(toIndentedString(shownInApply)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("badgeColors");
    openapiFields.add("badgePriority");
    openapiFields.add("darkBadgeColors");
    openapiFields.add("disabled");
    openapiFields.add("hiddenInSearch");
    openapiFields.add("shownInApply");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints is not found in the empty JSON string", GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `badgeColors`
      if (jsonObj.get("badgeColors") != null && !jsonObj.get("badgeColors").isJsonNull()) {
        GoogleAppsDriveLabelsV2betaBadgeColors.validateJsonElement(jsonObj.get("badgeColors"));
      }
      if ((jsonObj.get("badgePriority") != null && !jsonObj.get("badgePriority").isJsonNull()) && !jsonObj.get("badgePriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `badgePriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("badgePriority").toString()));
      }
      // validate the optional field `darkBadgeColors`
      if (jsonObj.get("darkBadgeColors") != null && !jsonObj.get("darkBadgeColors").isJsonNull()) {
        GoogleAppsDriveLabelsV2betaBadgeColors.validateJsonElement(jsonObj.get("darkBadgeColors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints>() {
           @Override
           public void write(JsonWriter out, GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints
   */
  public static GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints.class);
  }

  /**
   * Convert an instance of GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

