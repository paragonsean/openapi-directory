/*
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaDisableLabelRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaEnableLabelRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaLabel;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaLabelPermission;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaListLabelLocksResponse;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaListLabelPermissionsResponse;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaListLabelsResponse;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaPublishLabelRequest;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LabelsApi
 */
@Disabled
public class LabelsApiTest {

    private final LabelsApi api = new LabelsApi();

    /**
     * Creates a new Label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String languageCode = null;
        Boolean useAdminAccess = null;
        GoogleAppsDriveLabelsV2betaLabel googleAppsDriveLabelsV2betaLabel = null;
        GoogleAppsDriveLabelsV2betaLabel response = api.drivelabelsLabelsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, languageCode, useAdminAccess, googleAppsDriveLabelsV2betaLabel);
        // TODO: test validations
    }

    /**
     * Updates a single Label by applying a set of update requests resulting in a new draft revision. The batch update is all-or-nothing: If any of the update requests are invalid, no changes are applied. The resulting draft revision must be published before the changes may be used with Drive Items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsDeltaTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequest googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest = null;
        GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponse response = api.drivelabelsLabelsDelta(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaDeltaUpdateLabelRequest);
        // TODO: test validations
    }

    /**
     * Disable a published Label. Disabling a Label will result in a new disabled published revision based on the current published revision. If there is a draft revision, a new disabled draft revision will be created based on the latest draft revision. Older draft revisions will be deleted. Once disabled, a label may be deleted with &#x60;DeleteLabel&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsDisableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaDisableLabelRequest googleAppsDriveLabelsV2betaDisableLabelRequest = null;
        GoogleAppsDriveLabelsV2betaLabel response = api.drivelabelsLabelsDisable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaDisableLabelRequest);
        // TODO: test validations
    }

    /**
     * Enable a disabled Label and restore it to its published state. This will result in a new published revision based on the current disabled published revision. If there is an existing disabled draft revision, a new revision will be created based on that draft and will be enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsEnableTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaEnableLabelRequest googleAppsDriveLabelsV2betaEnableLabelRequest = null;
        GoogleAppsDriveLabelsV2betaLabel response = api.drivelabelsLabelsEnable(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaEnableLabelRequest);
        // TODO: test validations
    }

    /**
     * List labels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String customer = null;
        String languageCode = null;
        String minimumRole = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean publishedOnly = null;
        Boolean useAdminAccess = null;
        String view = null;
        GoogleAppsDriveLabelsV2betaListLabelsResponse response = api.drivelabelsLabelsList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, customer, languageCode, minimumRole, pageSize, pageToken, publishedOnly, useAdminAccess, view);
        // TODO: test validations
    }

    /**
     * Publish all draft changes to the Label. Once published, the Label may not return to its draft state. See &#x60;google.apps.drive.labels.v2.Lifecycle&#x60; for more information. Publishing a Label will result in a new published revision. All previous draft revisions will be deleted. Previous published revisions will be kept but are subject to automated deletion as needed. Once published, some changes are no longer permitted. Generally, any change that would invalidate or cause new restrictions on existing metadata related to the Label will be rejected. For example, the following changes to a Label will be rejected after the Label is published: * The label cannot be directly deleted. It must be disabled first, then deleted. * Field.FieldType cannot be changed. * Changes to Field validation options cannot reject something that was previously accepted. * Reducing the max entries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsPublishTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaPublishLabelRequest googleAppsDriveLabelsV2betaPublishLabelRequest = null;
        GoogleAppsDriveLabelsV2betaLabel response = api.drivelabelsLabelsPublish(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaPublishLabelRequest);
        // TODO: test validations
    }

    /**
     * Lists the LabelLocks on a Label.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsLocksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleAppsDriveLabelsV2betaListLabelLocksResponse response = api.drivelabelsLabelsRevisionsLocksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Deletes Label permissions. Permissions affect the Label resource as a whole, are not revisioned, and do not require publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsPermissionsBatchDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest googleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest = null;
        Object response = api.drivelabelsLabelsRevisionsPermissionsBatchDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaBatchDeleteLabelPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Updates Label permissions. If a permission for the indicated principal doesn&#39;t exist, a new Label Permission is created, otherwise the existing permission is updated. Permissions affect the Label resource as a whole, are not revisioned, and do not require publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsPermissionsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest googleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest = null;
        GoogleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsResponse response = api.drivelabelsLabelsRevisionsPermissionsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaBatchUpdateLabelPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Updates a Label&#39;s permissions. If a permission for the indicated principal doesn&#39;t exist, a new Label Permission is created, otherwise the existing permission is updated. Permissions affect the Label resource as a whole, are not revisioned, and do not require publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsPermissionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useAdminAccess = null;
        GoogleAppsDriveLabelsV2betaLabelPermission googleAppsDriveLabelsV2betaLabelPermission = null;
        GoogleAppsDriveLabelsV2betaLabelPermission response = api.drivelabelsLabelsRevisionsPermissionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useAdminAccess, googleAppsDriveLabelsV2betaLabelPermission);
        // TODO: test validations
    }

    /**
     * Deletes a Label&#39;s permission. Permissions affect the Label resource as a whole, are not revisioned, and do not require publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsPermissionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useAdminAccess = null;
        String writeControlRequiredRevisionId = null;
        Object response = api.drivelabelsLabelsRevisionsPermissionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useAdminAccess, writeControlRequiredRevisionId);
        // TODO: test validations
    }

    /**
     * Lists a Label&#39;s permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsPermissionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean useAdminAccess = null;
        GoogleAppsDriveLabelsV2betaListLabelPermissionsResponse response = api.drivelabelsLabelsRevisionsPermissionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, useAdminAccess);
        // TODO: test validations
    }

    /**
     * Updates a Label&#39;s permissions. If a permission for the indicated principal doesn&#39;t exist, a new Label Permission is created, otherwise the existing permission is updated. Permissions affect the Label resource as a whole, are not revisioned, and do not require publishing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsRevisionsUpdatePermissionsTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useAdminAccess = null;
        GoogleAppsDriveLabelsV2betaLabelPermission googleAppsDriveLabelsV2betaLabelPermission = null;
        GoogleAppsDriveLabelsV2betaLabelPermission response = api.drivelabelsLabelsRevisionsUpdatePermissions(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useAdminAccess, googleAppsDriveLabelsV2betaLabelPermission);
        // TODO: test validations
    }

    /**
     * Updates a Label&#39;s &#x60;CopyMode&#x60;. Changes to this policy are not revisioned, do not require publishing, and take effect immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void drivelabelsLabelsUpdateLabelCopyModeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest googleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest = null;
        GoogleAppsDriveLabelsV2betaLabel response = api.drivelabelsLabelsUpdateLabelCopyMode(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleAppsDriveLabelsV2betaUpdateLabelCopyModeRequest);
        // TODO: test validations
    }

}
