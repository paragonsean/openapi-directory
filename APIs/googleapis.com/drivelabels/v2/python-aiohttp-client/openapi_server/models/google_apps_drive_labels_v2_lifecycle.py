# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_drive_labels_v2_lifecycle_disabled_policy import GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
from openapi_server import util


class GoogleAppsDriveLabelsV2Lifecycle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_policy: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy=None, has_unpublished_changes: bool=None, state: str=None):
        """GoogleAppsDriveLabelsV2Lifecycle - a model defined in OpenAPI

        :param disabled_policy: The disabled_policy of this GoogleAppsDriveLabelsV2Lifecycle.
        :param has_unpublished_changes: The has_unpublished_changes of this GoogleAppsDriveLabelsV2Lifecycle.
        :param state: The state of this GoogleAppsDriveLabelsV2Lifecycle.
        """
        self.openapi_types = {
            'disabled_policy': GoogleAppsDriveLabelsV2LifecycleDisabledPolicy,
            'has_unpublished_changes': bool,
            'state': str
        }

        self.attribute_map = {
            'disabled_policy': 'disabledPolicy',
            'has_unpublished_changes': 'hasUnpublishedChanges',
            'state': 'state'
        }

        self._disabled_policy = disabled_policy
        self._has_unpublished_changes = has_unpublished_changes
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2Lifecycle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2Lifecycle of this GoogleAppsDriveLabelsV2Lifecycle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_policy(self):
        """Gets the disabled_policy of this GoogleAppsDriveLabelsV2Lifecycle.


        :return: The disabled_policy of this GoogleAppsDriveLabelsV2Lifecycle.
        :rtype: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
        """
        return self._disabled_policy

    @disabled_policy.setter
    def disabled_policy(self, disabled_policy):
        """Sets the disabled_policy of this GoogleAppsDriveLabelsV2Lifecycle.


        :param disabled_policy: The disabled_policy of this GoogleAppsDriveLabelsV2Lifecycle.
        :type disabled_policy: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
        """

        self._disabled_policy = disabled_policy

    @property
    def has_unpublished_changes(self):
        """Gets the has_unpublished_changes of this GoogleAppsDriveLabelsV2Lifecycle.

        Output only. Whether the object associated with this lifecycle has unpublished changes.

        :return: The has_unpublished_changes of this GoogleAppsDriveLabelsV2Lifecycle.
        :rtype: bool
        """
        return self._has_unpublished_changes

    @has_unpublished_changes.setter
    def has_unpublished_changes(self, has_unpublished_changes):
        """Sets the has_unpublished_changes of this GoogleAppsDriveLabelsV2Lifecycle.

        Output only. Whether the object associated with this lifecycle has unpublished changes.

        :param has_unpublished_changes: The has_unpublished_changes of this GoogleAppsDriveLabelsV2Lifecycle.
        :type has_unpublished_changes: bool
        """

        self._has_unpublished_changes = has_unpublished_changes

    @property
    def state(self):
        """Gets the state of this GoogleAppsDriveLabelsV2Lifecycle.

        Output only. The state of the object associated with this lifecycle.

        :return: The state of this GoogleAppsDriveLabelsV2Lifecycle.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GoogleAppsDriveLabelsV2Lifecycle.

        Output only. The state of the object associated with this lifecycle.

        :param state: The state of this GoogleAppsDriveLabelsV2Lifecycle.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "UNPUBLISHED_DRAFT", "PUBLISHED", "DISABLED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
