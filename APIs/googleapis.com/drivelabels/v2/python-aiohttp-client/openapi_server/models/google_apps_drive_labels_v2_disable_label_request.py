# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_drive_labels_v2_lifecycle_disabled_policy import GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
from openapi_server.models.google_apps_drive_labels_v2_write_control import GoogleAppsDriveLabelsV2WriteControl
from openapi_server import util


class GoogleAppsDriveLabelsV2DisableLabelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_policy: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy=None, language_code: str=None, update_mask: str=None, use_admin_access: bool=None, write_control: GoogleAppsDriveLabelsV2WriteControl=None):
        """GoogleAppsDriveLabelsV2DisableLabelRequest - a model defined in OpenAPI

        :param disabled_policy: The disabled_policy of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :param language_code: The language_code of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :param update_mask: The update_mask of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :param use_admin_access: The use_admin_access of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :param write_control: The write_control of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        """
        self.openapi_types = {
            'disabled_policy': GoogleAppsDriveLabelsV2LifecycleDisabledPolicy,
            'language_code': str,
            'update_mask': str,
            'use_admin_access': bool,
            'write_control': GoogleAppsDriveLabelsV2WriteControl
        }

        self.attribute_map = {
            'disabled_policy': 'disabledPolicy',
            'language_code': 'languageCode',
            'update_mask': 'updateMask',
            'use_admin_access': 'useAdminAccess',
            'write_control': 'writeControl'
        }

        self._disabled_policy = disabled_policy
        self._language_code = language_code
        self._update_mask = update_mask
        self._use_admin_access = use_admin_access
        self._write_control = write_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2DisableLabelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2DisableLabelRequest of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_policy(self):
        """Gets the disabled_policy of this GoogleAppsDriveLabelsV2DisableLabelRequest.


        :return: The disabled_policy of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :rtype: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
        """
        return self._disabled_policy

    @disabled_policy.setter
    def disabled_policy(self, disabled_policy):
        """Sets the disabled_policy of this GoogleAppsDriveLabelsV2DisableLabelRequest.


        :param disabled_policy: The disabled_policy of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :type disabled_policy: GoogleAppsDriveLabelsV2LifecycleDisabledPolicy
        """

        self._disabled_policy = disabled_policy

    @property
    def language_code(self):
        """Gets the language_code of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        The BCP-47 language code to use for evaluating localized field labels. When not specified, values in the default configured language will be used.

        :return: The language_code of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        The BCP-47 language code to use for evaluating localized field labels. When not specified, values in the default configured language will be used.

        :param language_code: The language_code of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def update_mask(self):
        """Gets the update_mask of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        The fields that should be updated. At least one field must be specified. The root `disabled_policy` is implied and should not be specified. A single `*` can be used as short-hand for updating every field.

        :return: The update_mask of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        The fields that should be updated. At least one field must be specified. The root `disabled_policy` is implied and should not be specified. A single `*` can be used as short-hand for updating every field.

        :param update_mask: The update_mask of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask

    @property
    def use_admin_access(self):
        """Gets the use_admin_access of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access.

        :return: The use_admin_access of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :rtype: bool
        """
        return self._use_admin_access

    @use_admin_access.setter
    def use_admin_access(self, use_admin_access):
        """Sets the use_admin_access of this GoogleAppsDriveLabelsV2DisableLabelRequest.

        Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access.

        :param use_admin_access: The use_admin_access of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :type use_admin_access: bool
        """

        self._use_admin_access = use_admin_access

    @property
    def write_control(self):
        """Gets the write_control of this GoogleAppsDriveLabelsV2DisableLabelRequest.


        :return: The write_control of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :rtype: GoogleAppsDriveLabelsV2WriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this GoogleAppsDriveLabelsV2DisableLabelRequest.


        :param write_control: The write_control of this GoogleAppsDriveLabelsV2DisableLabelRequest.
        :type write_control: GoogleAppsDriveLabelsV2WriteControl
        """

        self._write_control = write_control
