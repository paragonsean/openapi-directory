# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_mode: str=None):
        """GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy - a model defined in OpenAPI

        :param copy_mode: The copy_mode of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.
        """
        self.openapi_types = {
            'copy_mode': str
        }

        self.attribute_map = {
            'copy_mode': 'copyMode'
        }

        self._copy_mode = copy_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_mode(self):
        """Gets the copy_mode of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.

        Indicates how the applied label and field values should be copied when a Drive item is copied.

        :return: The copy_mode of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.
        :rtype: str
        """
        return self._copy_mode

    @copy_mode.setter
    def copy_mode(self, copy_mode):
        """Sets the copy_mode of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.

        Indicates how the applied label and field values should be copied when a Drive item is copied.

        :param copy_mode: The copy_mode of this GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.
        :type copy_mode: str
        """
        allowed_values = ["COPY_MODE_UNSPECIFIED", "DO_NOT_COPY", "ALWAYS_COPY", "COPY_APPLIABLE"]  # noqa: E501
        if copy_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `copy_mode` ({0}), must be one of {1}"
                .format(copy_mode, allowed_values)
            )

        self._copy_mode = copy_mode
