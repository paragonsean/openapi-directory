# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_apps_drive_labels_v2_delta_update_label_request_request import GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest
from openapi_server.models.google_apps_drive_labels_v2_write_control import GoogleAppsDriveLabelsV2WriteControl
from openapi_server import util


class GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str=None, requests: List[GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest]=None, use_admin_access: bool=None, view: str=None, write_control: GoogleAppsDriveLabelsV2WriteControl=None):
        """GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest - a model defined in OpenAPI

        :param language_code: The language_code of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :param requests: The requests of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :param use_admin_access: The use_admin_access of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :param view: The view of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :param write_control: The write_control of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        """
        self.openapi_types = {
            'language_code': str,
            'requests': List[GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest],
            'use_admin_access': bool,
            'view': str,
            'write_control': GoogleAppsDriveLabelsV2WriteControl
        }

        self.attribute_map = {
            'language_code': 'languageCode',
            'requests': 'requests',
            'use_admin_access': 'useAdminAccess',
            'view': 'view',
            'write_control': 'writeControl'
        }

        self._language_code = language_code
        self._requests = requests
        self._use_admin_access = use_admin_access
        self._view = view
        self._write_control = write_control

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        The BCP-47 language code to use for evaluating localized Field labels when `include_label_in_response` is `true`.

        :return: The language_code of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        The BCP-47 language code to use for evaluating localized Field labels when `include_label_in_response` is `true`.

        :param language_code: The language_code of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def requests(self):
        """Gets the requests of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        A list of updates to apply to the Label. Requests will be applied in the order they are specified.

        :return: The requests of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :rtype: List[GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        A list of updates to apply to the Label. Requests will be applied in the order they are specified.

        :param requests: The requests of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :type requests: List[GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest]
        """

        self._requests = requests

    @property
    def use_admin_access(self):
        """Gets the use_admin_access of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access.

        :return: The use_admin_access of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :rtype: bool
        """
        return self._use_admin_access

    @use_admin_access.setter
    def use_admin_access(self, use_admin_access):
        """Sets the use_admin_access of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access.

        :param use_admin_access: The use_admin_access of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :type use_admin_access: bool
        """

        self._use_admin_access = use_admin_access

    @property
    def view(self):
        """Gets the view of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        When specified, only certain fields belonging to the indicated view will be returned.

        :return: The view of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.

        When specified, only certain fields belonging to the indicated view will be returned.

        :param view: The view of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :type view: str
        """
        allowed_values = ["LABEL_VIEW_BASIC", "LABEL_VIEW_FULL"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view

    @property
    def write_control(self):
        """Gets the write_control of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.


        :return: The write_control of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :rtype: GoogleAppsDriveLabelsV2WriteControl
        """
        return self._write_control

    @write_control.setter
    def write_control(self, write_control):
        """Sets the write_control of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.


        :param write_control: The write_control of this GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.
        :type write_control: GoogleAppsDriveLabelsV2WriteControl
        """

        self._write_control = write_control
