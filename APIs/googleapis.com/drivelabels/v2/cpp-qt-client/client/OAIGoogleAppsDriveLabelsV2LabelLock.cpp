/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2LabelLock.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2LabelLock::OAIGoogleAppsDriveLabelsV2LabelLock(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2LabelLock::OAIGoogleAppsDriveLabelsV2LabelLock() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2LabelLock::~OAIGoogleAppsDriveLabelsV2LabelLock() {}

void OAIGoogleAppsDriveLabelsV2LabelLock::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_choice_id_isSet = false;
    m_choice_id_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2LabelLock::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2LabelLock::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_choice_id_isValid = ::OpenAPI::fromJsonValue(m_choice_id, json[QString("choiceId")]);
    m_choice_id_isSet = !json[QString("choiceId")].isNull() && m_choice_id_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("fieldId")]);
    m_field_id_isSet = !json[QString("fieldId")].isNull() && m_field_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2LabelLock::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_choice_id_isSet) {
        obj.insert(QString("choiceId"), ::OpenAPI::toJsonValue(m_choice_id));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_field_id_isSet) {
        obj.insert(QString("fieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIGoogleAppsDriveLabelsV2LabelLockCapabilities OAIGoogleAppsDriveLabelsV2LabelLock::getCapabilities() const {
    return m_capabilities;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setCapabilities(const OAIGoogleAppsDriveLabelsV2LabelLockCapabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getChoiceId() const {
    return m_choice_id;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setChoiceId(const QString &choice_id) {
    m_choice_id = choice_id;
    m_choice_id_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_choice_id_Set() const{
    return m_choice_id_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_choice_id_Valid() const{
    return m_choice_id_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGoogleAppsDriveLabelsV2UserInfo OAIGoogleAppsDriveLabelsV2LabelLock::getCreator() const {
    return m_creator;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setCreator(const OAIGoogleAppsDriveLabelsV2UserInfo &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_creator_Valid() const{
    return m_creator_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getDeleteTime() const {
    return m_delete_time;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getFieldId() const {
    return m_field_id;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getName() const {
    return m_name;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGoogleAppsDriveLabelsV2LabelLock::getState() const {
    return m_state;
}
void OAIGoogleAppsDriveLabelsV2LabelLock::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_choice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2LabelLock::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
