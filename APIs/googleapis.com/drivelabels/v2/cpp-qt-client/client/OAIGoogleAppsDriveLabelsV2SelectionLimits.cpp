/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2SelectionLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2SelectionLimits::OAIGoogleAppsDriveLabelsV2SelectionLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2SelectionLimits::OAIGoogleAppsDriveLabelsV2SelectionLimits() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2SelectionLimits::~OAIGoogleAppsDriveLabelsV2SelectionLimits() {}

void OAIGoogleAppsDriveLabelsV2SelectionLimits::initializeModel() {

    m_list_limits_isSet = false;
    m_list_limits_isValid = false;

    m_max_choices_isSet = false;
    m_max_choices_isValid = false;

    m_max_deleted_choices_isSet = false;
    m_max_deleted_choices_isValid = false;

    m_max_display_name_length_isSet = false;
    m_max_display_name_length_isValid = false;

    m_max_id_length_isSet = false;
    m_max_id_length_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2SelectionLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2SelectionLimits::fromJsonObject(QJsonObject json) {

    m_list_limits_isValid = ::OpenAPI::fromJsonValue(m_list_limits, json[QString("listLimits")]);
    m_list_limits_isSet = !json[QString("listLimits")].isNull() && m_list_limits_isValid;

    m_max_choices_isValid = ::OpenAPI::fromJsonValue(m_max_choices, json[QString("maxChoices")]);
    m_max_choices_isSet = !json[QString("maxChoices")].isNull() && m_max_choices_isValid;

    m_max_deleted_choices_isValid = ::OpenAPI::fromJsonValue(m_max_deleted_choices, json[QString("maxDeletedChoices")]);
    m_max_deleted_choices_isSet = !json[QString("maxDeletedChoices")].isNull() && m_max_deleted_choices_isValid;

    m_max_display_name_length_isValid = ::OpenAPI::fromJsonValue(m_max_display_name_length, json[QString("maxDisplayNameLength")]);
    m_max_display_name_length_isSet = !json[QString("maxDisplayNameLength")].isNull() && m_max_display_name_length_isValid;

    m_max_id_length_isValid = ::OpenAPI::fromJsonValue(m_max_id_length, json[QString("maxIdLength")]);
    m_max_id_length_isSet = !json[QString("maxIdLength")].isNull() && m_max_id_length_isValid;
}

QString OAIGoogleAppsDriveLabelsV2SelectionLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2SelectionLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_list_limits.isSet()) {
        obj.insert(QString("listLimits"), ::OpenAPI::toJsonValue(m_list_limits));
    }
    if (m_max_choices_isSet) {
        obj.insert(QString("maxChoices"), ::OpenAPI::toJsonValue(m_max_choices));
    }
    if (m_max_deleted_choices_isSet) {
        obj.insert(QString("maxDeletedChoices"), ::OpenAPI::toJsonValue(m_max_deleted_choices));
    }
    if (m_max_display_name_length_isSet) {
        obj.insert(QString("maxDisplayNameLength"), ::OpenAPI::toJsonValue(m_max_display_name_length));
    }
    if (m_max_id_length_isSet) {
        obj.insert(QString("maxIdLength"), ::OpenAPI::toJsonValue(m_max_id_length));
    }
    return obj;
}

OAIGoogleAppsDriveLabelsV2ListLimits OAIGoogleAppsDriveLabelsV2SelectionLimits::getListLimits() const {
    return m_list_limits;
}
void OAIGoogleAppsDriveLabelsV2SelectionLimits::setListLimits(const OAIGoogleAppsDriveLabelsV2ListLimits &list_limits) {
    m_list_limits = list_limits;
    m_list_limits_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_list_limits_Set() const{
    return m_list_limits_isSet;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_list_limits_Valid() const{
    return m_list_limits_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2SelectionLimits::getMaxChoices() const {
    return m_max_choices;
}
void OAIGoogleAppsDriveLabelsV2SelectionLimits::setMaxChoices(const qint32 &max_choices) {
    m_max_choices = max_choices;
    m_max_choices_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_choices_Set() const{
    return m_max_choices_isSet;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_choices_Valid() const{
    return m_max_choices_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2SelectionLimits::getMaxDeletedChoices() const {
    return m_max_deleted_choices;
}
void OAIGoogleAppsDriveLabelsV2SelectionLimits::setMaxDeletedChoices(const qint32 &max_deleted_choices) {
    m_max_deleted_choices = max_deleted_choices;
    m_max_deleted_choices_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_deleted_choices_Set() const{
    return m_max_deleted_choices_isSet;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_deleted_choices_Valid() const{
    return m_max_deleted_choices_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2SelectionLimits::getMaxDisplayNameLength() const {
    return m_max_display_name_length;
}
void OAIGoogleAppsDriveLabelsV2SelectionLimits::setMaxDisplayNameLength(const qint32 &max_display_name_length) {
    m_max_display_name_length = max_display_name_length;
    m_max_display_name_length_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_display_name_length_Set() const{
    return m_max_display_name_length_isSet;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_display_name_length_Valid() const{
    return m_max_display_name_length_isValid;
}

qint32 OAIGoogleAppsDriveLabelsV2SelectionLimits::getMaxIdLength() const {
    return m_max_id_length;
}
void OAIGoogleAppsDriveLabelsV2SelectionLimits::setMaxIdLength(const qint32 &max_id_length) {
    m_max_id_length = max_id_length;
    m_max_id_length_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_id_length_Set() const{
    return m_max_id_length_isSet;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::is_max_id_length_Valid() const{
    return m_max_id_length_isValid;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_choices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_deleted_choices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_display_name_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_id_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2SelectionLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
