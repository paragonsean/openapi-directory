/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::~OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest() {}

void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;

    m_use_admin_access_isSet = false;
    m_use_admin_access_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;

    m_write_control_isSet = false;
    m_write_control_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;

    m_use_admin_access_isValid = ::OpenAPI::fromJsonValue(m_use_admin_access, json[QString("useAdminAccess")]);
    m_use_admin_access_isSet = !json[QString("useAdminAccess")].isNull() && m_use_admin_access_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;

    m_write_control_isValid = ::OpenAPI::fromJsonValue(m_write_control, json[QString("writeControl")]);
    m_write_control_isSet = !json[QString("writeControl")].isNull() && m_write_control_isValid;
}

QString OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    if (m_use_admin_access_isSet) {
        obj.insert(QString("useAdminAccess"), ::OpenAPI::toJsonValue(m_use_admin_access));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    if (m_write_control.isSet()) {
        obj.insert(QString("writeControl"), ::OpenAPI::toJsonValue(m_write_control));
    }
    return obj;
}

QString OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QList<OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest> OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::getRequests() const {
    return m_requests;
}
void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::setRequests(const QList<OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::isUseAdminAccess() const {
    return m_use_admin_access;
}
void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::setUseAdminAccess(const bool &use_admin_access) {
    m_use_admin_access = use_admin_access;
    m_use_admin_access_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_use_admin_access_Set() const{
    return m_use_admin_access_isSet;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_use_admin_access_Valid() const{
    return m_use_admin_access_isValid;
}

QString OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::getView() const {
    return m_view;
}
void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_view_Set() const{
    return m_view_isSet;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_view_Valid() const{
    return m_view_isValid;
}

OAIGoogleAppsDriveLabelsV2WriteControl OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::getWriteControl() const {
    return m_write_control;
}
void OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::setWriteControl(const OAIGoogleAppsDriveLabelsV2WriteControl &write_control) {
    m_write_control = write_control;
    m_write_control_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_write_control_Set() const{
    return m_write_control_isSet;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::is_write_control_Valid() const{
    return m_write_control_isValid;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_admin_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_control.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2DeltaUpdateLabelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
