/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleAppsDriveLabelsV2Field.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleAppsDriveLabelsV2Field::OAIGoogleAppsDriveLabelsV2Field(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleAppsDriveLabelsV2Field::OAIGoogleAppsDriveLabelsV2Field() {
    this->initializeModel();
}

OAIGoogleAppsDriveLabelsV2Field::~OAIGoogleAppsDriveLabelsV2Field() {}

void OAIGoogleAppsDriveLabelsV2Field::initializeModel() {

    m_applied_capabilities_isSet = false;
    m_applied_capabilities_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_creator_isSet = false;
    m_creator_isValid = false;

    m_date_options_isSet = false;
    m_date_options_isValid = false;

    m_disable_time_isSet = false;
    m_disable_time_isValid = false;

    m_disabler_isSet = false;
    m_disabler_isValid = false;

    m_display_hints_isSet = false;
    m_display_hints_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_integer_options_isSet = false;
    m_integer_options_isValid = false;

    m_lifecycle_isSet = false;
    m_lifecycle_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_publisher_isSet = false;
    m_publisher_isValid = false;

    m_query_key_isSet = false;
    m_query_key_isValid = false;

    m_schema_capabilities_isSet = false;
    m_schema_capabilities_isValid = false;

    m_selection_options_isSet = false;
    m_selection_options_isValid = false;

    m_text_options_isSet = false;
    m_text_options_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_updater_isSet = false;
    m_updater_isValid = false;

    m_user_options_isSet = false;
    m_user_options_isValid = false;
}

void OAIGoogleAppsDriveLabelsV2Field::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleAppsDriveLabelsV2Field::fromJsonObject(QJsonObject json) {

    m_applied_capabilities_isValid = ::OpenAPI::fromJsonValue(m_applied_capabilities, json[QString("appliedCapabilities")]);
    m_applied_capabilities_isSet = !json[QString("appliedCapabilities")].isNull() && m_applied_capabilities_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_creator_isValid = ::OpenAPI::fromJsonValue(m_creator, json[QString("creator")]);
    m_creator_isSet = !json[QString("creator")].isNull() && m_creator_isValid;

    m_date_options_isValid = ::OpenAPI::fromJsonValue(m_date_options, json[QString("dateOptions")]);
    m_date_options_isSet = !json[QString("dateOptions")].isNull() && m_date_options_isValid;

    m_disable_time_isValid = ::OpenAPI::fromJsonValue(m_disable_time, json[QString("disableTime")]);
    m_disable_time_isSet = !json[QString("disableTime")].isNull() && m_disable_time_isValid;

    m_disabler_isValid = ::OpenAPI::fromJsonValue(m_disabler, json[QString("disabler")]);
    m_disabler_isSet = !json[QString("disabler")].isNull() && m_disabler_isValid;

    m_display_hints_isValid = ::OpenAPI::fromJsonValue(m_display_hints, json[QString("displayHints")]);
    m_display_hints_isSet = !json[QString("displayHints")].isNull() && m_display_hints_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_integer_options_isValid = ::OpenAPI::fromJsonValue(m_integer_options, json[QString("integerOptions")]);
    m_integer_options_isSet = !json[QString("integerOptions")].isNull() && m_integer_options_isValid;

    m_lifecycle_isValid = ::OpenAPI::fromJsonValue(m_lifecycle, json[QString("lifecycle")]);
    m_lifecycle_isSet = !json[QString("lifecycle")].isNull() && m_lifecycle_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_publisher_isValid = ::OpenAPI::fromJsonValue(m_publisher, json[QString("publisher")]);
    m_publisher_isSet = !json[QString("publisher")].isNull() && m_publisher_isValid;

    m_query_key_isValid = ::OpenAPI::fromJsonValue(m_query_key, json[QString("queryKey")]);
    m_query_key_isSet = !json[QString("queryKey")].isNull() && m_query_key_isValid;

    m_schema_capabilities_isValid = ::OpenAPI::fromJsonValue(m_schema_capabilities, json[QString("schemaCapabilities")]);
    m_schema_capabilities_isSet = !json[QString("schemaCapabilities")].isNull() && m_schema_capabilities_isValid;

    m_selection_options_isValid = ::OpenAPI::fromJsonValue(m_selection_options, json[QString("selectionOptions")]);
    m_selection_options_isSet = !json[QString("selectionOptions")].isNull() && m_selection_options_isValid;

    m_text_options_isValid = ::OpenAPI::fromJsonValue(m_text_options, json[QString("textOptions")]);
    m_text_options_isSet = !json[QString("textOptions")].isNull() && m_text_options_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_updater_isValid = ::OpenAPI::fromJsonValue(m_updater, json[QString("updater")]);
    m_updater_isSet = !json[QString("updater")].isNull() && m_updater_isValid;

    m_user_options_isValid = ::OpenAPI::fromJsonValue(m_user_options, json[QString("userOptions")]);
    m_user_options_isSet = !json[QString("userOptions")].isNull() && m_user_options_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleAppsDriveLabelsV2Field::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_capabilities.isSet()) {
        obj.insert(QString("appliedCapabilities"), ::OpenAPI::toJsonValue(m_applied_capabilities));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_creator.isSet()) {
        obj.insert(QString("creator"), ::OpenAPI::toJsonValue(m_creator));
    }
    if (m_date_options.isSet()) {
        obj.insert(QString("dateOptions"), ::OpenAPI::toJsonValue(m_date_options));
    }
    if (m_disable_time_isSet) {
        obj.insert(QString("disableTime"), ::OpenAPI::toJsonValue(m_disable_time));
    }
    if (m_disabler.isSet()) {
        obj.insert(QString("disabler"), ::OpenAPI::toJsonValue(m_disabler));
    }
    if (m_display_hints.isSet()) {
        obj.insert(QString("displayHints"), ::OpenAPI::toJsonValue(m_display_hints));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_integer_options.isSet()) {
        obj.insert(QString("integerOptions"), ::OpenAPI::toJsonValue(m_integer_options));
    }
    if (m_lifecycle.isSet()) {
        obj.insert(QString("lifecycle"), ::OpenAPI::toJsonValue(m_lifecycle));
    }
    if (m_lock_status.isSet()) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_publisher.isSet()) {
        obj.insert(QString("publisher"), ::OpenAPI::toJsonValue(m_publisher));
    }
    if (m_query_key_isSet) {
        obj.insert(QString("queryKey"), ::OpenAPI::toJsonValue(m_query_key));
    }
    if (m_schema_capabilities.isSet()) {
        obj.insert(QString("schemaCapabilities"), ::OpenAPI::toJsonValue(m_schema_capabilities));
    }
    if (m_selection_options.isSet()) {
        obj.insert(QString("selectionOptions"), ::OpenAPI::toJsonValue(m_selection_options));
    }
    if (m_text_options.isSet()) {
        obj.insert(QString("textOptions"), ::OpenAPI::toJsonValue(m_text_options));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_updater.isSet()) {
        obj.insert(QString("updater"), ::OpenAPI::toJsonValue(m_updater));
    }
    if (m_user_options.isSet()) {
        obj.insert(QString("userOptions"), ::OpenAPI::toJsonValue(m_user_options));
    }
    return obj;
}

OAIGoogleAppsDriveLabelsV2FieldAppliedCapabilities OAIGoogleAppsDriveLabelsV2Field::getAppliedCapabilities() const {
    return m_applied_capabilities;
}
void OAIGoogleAppsDriveLabelsV2Field::setAppliedCapabilities(const OAIGoogleAppsDriveLabelsV2FieldAppliedCapabilities &applied_capabilities) {
    m_applied_capabilities = applied_capabilities;
    m_applied_capabilities_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_applied_capabilities_Set() const{
    return m_applied_capabilities_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_applied_capabilities_Valid() const{
    return m_applied_capabilities_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::getCreateTime() const {
    return m_create_time;
}
void OAIGoogleAppsDriveLabelsV2Field::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIGoogleAppsDriveLabelsV2UserInfo OAIGoogleAppsDriveLabelsV2Field::getCreator() const {
    return m_creator;
}
void OAIGoogleAppsDriveLabelsV2Field::setCreator(const OAIGoogleAppsDriveLabelsV2UserInfo &creator) {
    m_creator = creator;
    m_creator_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_creator_Set() const{
    return m_creator_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_creator_Valid() const{
    return m_creator_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldDateOptions OAIGoogleAppsDriveLabelsV2Field::getDateOptions() const {
    return m_date_options;
}
void OAIGoogleAppsDriveLabelsV2Field::setDateOptions(const OAIGoogleAppsDriveLabelsV2FieldDateOptions &date_options) {
    m_date_options = date_options;
    m_date_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_date_options_Set() const{
    return m_date_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_date_options_Valid() const{
    return m_date_options_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::getDisableTime() const {
    return m_disable_time;
}
void OAIGoogleAppsDriveLabelsV2Field::setDisableTime(const QString &disable_time) {
    m_disable_time = disable_time;
    m_disable_time_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_disable_time_Set() const{
    return m_disable_time_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_disable_time_Valid() const{
    return m_disable_time_isValid;
}

OAIGoogleAppsDriveLabelsV2UserInfo OAIGoogleAppsDriveLabelsV2Field::getDisabler() const {
    return m_disabler;
}
void OAIGoogleAppsDriveLabelsV2Field::setDisabler(const OAIGoogleAppsDriveLabelsV2UserInfo &disabler) {
    m_disabler = disabler;
    m_disabler_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_disabler_Set() const{
    return m_disabler_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_disabler_Valid() const{
    return m_disabler_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldDisplayHints OAIGoogleAppsDriveLabelsV2Field::getDisplayHints() const {
    return m_display_hints;
}
void OAIGoogleAppsDriveLabelsV2Field::setDisplayHints(const OAIGoogleAppsDriveLabelsV2FieldDisplayHints &display_hints) {
    m_display_hints = display_hints;
    m_display_hints_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_display_hints_Set() const{
    return m_display_hints_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_display_hints_Valid() const{
    return m_display_hints_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::getId() const {
    return m_id;
}
void OAIGoogleAppsDriveLabelsV2Field::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_id_Valid() const{
    return m_id_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldIntegerOptions OAIGoogleAppsDriveLabelsV2Field::getIntegerOptions() const {
    return m_integer_options;
}
void OAIGoogleAppsDriveLabelsV2Field::setIntegerOptions(const OAIGoogleAppsDriveLabelsV2FieldIntegerOptions &integer_options) {
    m_integer_options = integer_options;
    m_integer_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_integer_options_Set() const{
    return m_integer_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_integer_options_Valid() const{
    return m_integer_options_isValid;
}

OAIGoogleAppsDriveLabelsV2Lifecycle OAIGoogleAppsDriveLabelsV2Field::getLifecycle() const {
    return m_lifecycle;
}
void OAIGoogleAppsDriveLabelsV2Field::setLifecycle(const OAIGoogleAppsDriveLabelsV2Lifecycle &lifecycle) {
    m_lifecycle = lifecycle;
    m_lifecycle_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_lifecycle_Set() const{
    return m_lifecycle_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_lifecycle_Valid() const{
    return m_lifecycle_isValid;
}

OAIGoogleAppsDriveLabelsV2LockStatus OAIGoogleAppsDriveLabelsV2Field::getLockStatus() const {
    return m_lock_status;
}
void OAIGoogleAppsDriveLabelsV2Field::setLockStatus(const OAIGoogleAppsDriveLabelsV2LockStatus &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldProperties OAIGoogleAppsDriveLabelsV2Field::getProperties() const {
    return m_properties;
}
void OAIGoogleAppsDriveLabelsV2Field::setProperties(const OAIGoogleAppsDriveLabelsV2FieldProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_properties_Valid() const{
    return m_properties_isValid;
}

OAIGoogleAppsDriveLabelsV2UserInfo OAIGoogleAppsDriveLabelsV2Field::getPublisher() const {
    return m_publisher;
}
void OAIGoogleAppsDriveLabelsV2Field::setPublisher(const OAIGoogleAppsDriveLabelsV2UserInfo &publisher) {
    m_publisher = publisher;
    m_publisher_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_publisher_Set() const{
    return m_publisher_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_publisher_Valid() const{
    return m_publisher_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::getQueryKey() const {
    return m_query_key;
}
void OAIGoogleAppsDriveLabelsV2Field::setQueryKey(const QString &query_key) {
    m_query_key = query_key;
    m_query_key_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_query_key_Set() const{
    return m_query_key_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_query_key_Valid() const{
    return m_query_key_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldSchemaCapabilities OAIGoogleAppsDriveLabelsV2Field::getSchemaCapabilities() const {
    return m_schema_capabilities;
}
void OAIGoogleAppsDriveLabelsV2Field::setSchemaCapabilities(const OAIGoogleAppsDriveLabelsV2FieldSchemaCapabilities &schema_capabilities) {
    m_schema_capabilities = schema_capabilities;
    m_schema_capabilities_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_schema_capabilities_Set() const{
    return m_schema_capabilities_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_schema_capabilities_Valid() const{
    return m_schema_capabilities_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldSelectionOptions OAIGoogleAppsDriveLabelsV2Field::getSelectionOptions() const {
    return m_selection_options;
}
void OAIGoogleAppsDriveLabelsV2Field::setSelectionOptions(const OAIGoogleAppsDriveLabelsV2FieldSelectionOptions &selection_options) {
    m_selection_options = selection_options;
    m_selection_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_selection_options_Set() const{
    return m_selection_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_selection_options_Valid() const{
    return m_selection_options_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldTextOptions OAIGoogleAppsDriveLabelsV2Field::getTextOptions() const {
    return m_text_options;
}
void OAIGoogleAppsDriveLabelsV2Field::setTextOptions(const OAIGoogleAppsDriveLabelsV2FieldTextOptions &text_options) {
    m_text_options = text_options;
    m_text_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_text_options_Set() const{
    return m_text_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_text_options_Valid() const{
    return m_text_options_isValid;
}

QString OAIGoogleAppsDriveLabelsV2Field::getUpdateTime() const {
    return m_update_time;
}
void OAIGoogleAppsDriveLabelsV2Field::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIGoogleAppsDriveLabelsV2UserInfo OAIGoogleAppsDriveLabelsV2Field::getUpdater() const {
    return m_updater;
}
void OAIGoogleAppsDriveLabelsV2Field::setUpdater(const OAIGoogleAppsDriveLabelsV2UserInfo &updater) {
    m_updater = updater;
    m_updater_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_updater_Set() const{
    return m_updater_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_updater_Valid() const{
    return m_updater_isValid;
}

OAIGoogleAppsDriveLabelsV2FieldUserOptions OAIGoogleAppsDriveLabelsV2Field::getUserOptions() const {
    return m_user_options;
}
void OAIGoogleAppsDriveLabelsV2Field::setUserOptions(const OAIGoogleAppsDriveLabelsV2FieldUserOptions &user_options) {
    m_user_options = user_options;
    m_user_options_isSet = true;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_user_options_Set() const{
    return m_user_options_isSet;
}

bool OAIGoogleAppsDriveLabelsV2Field::is_user_options_Valid() const{
    return m_user_options_isValid;
}

bool OAIGoogleAppsDriveLabelsV2Field::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabler.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lifecycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updater.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleAppsDriveLabelsV2Field::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
