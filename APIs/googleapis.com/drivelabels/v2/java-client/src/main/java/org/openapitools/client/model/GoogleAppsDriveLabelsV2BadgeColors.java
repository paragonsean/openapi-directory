/*
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleTypeColor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The color derived from BadgeConfig and changed to the closest recommended supported color.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:36.456078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsDriveLabelsV2BadgeColors {
  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "backgroundColor";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private GoogleTypeColor backgroundColor;

  public static final String SERIALIZED_NAME_FOREGROUND_COLOR = "foregroundColor";
  @SerializedName(SERIALIZED_NAME_FOREGROUND_COLOR)
  private GoogleTypeColor foregroundColor;

  public static final String SERIALIZED_NAME_SOLO_COLOR = "soloColor";
  @SerializedName(SERIALIZED_NAME_SOLO_COLOR)
  private GoogleTypeColor soloColor;

  public GoogleAppsDriveLabelsV2BadgeColors() {
  }

  public GoogleAppsDriveLabelsV2BadgeColors backgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
    return this;
  }

  /**
   * Get backgroundColor
   * @return backgroundColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getBackgroundColor() {
    return backgroundColor;
  }

  public void setBackgroundColor(GoogleTypeColor backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public GoogleAppsDriveLabelsV2BadgeColors foregroundColor(GoogleTypeColor foregroundColor) {
    this.foregroundColor = foregroundColor;
    return this;
  }

  /**
   * Get foregroundColor
   * @return foregroundColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getForegroundColor() {
    return foregroundColor;
  }

  public void setForegroundColor(GoogleTypeColor foregroundColor) {
    this.foregroundColor = foregroundColor;
  }


  public GoogleAppsDriveLabelsV2BadgeColors soloColor(GoogleTypeColor soloColor) {
    this.soloColor = soloColor;
    return this;
  }

  /**
   * Get soloColor
   * @return soloColor
   */
  @javax.annotation.Nullable
  public GoogleTypeColor getSoloColor() {
    return soloColor;
  }

  public void setSoloColor(GoogleTypeColor soloColor) {
    this.soloColor = soloColor;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsDriveLabelsV2BadgeColors googleAppsDriveLabelsV2BadgeColors = (GoogleAppsDriveLabelsV2BadgeColors) o;
    return Objects.equals(this.backgroundColor, googleAppsDriveLabelsV2BadgeColors.backgroundColor) &&
        Objects.equals(this.foregroundColor, googleAppsDriveLabelsV2BadgeColors.foregroundColor) &&
        Objects.equals(this.soloColor, googleAppsDriveLabelsV2BadgeColors.soloColor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, foregroundColor, soloColor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsDriveLabelsV2BadgeColors {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    foregroundColor: ").append(toIndentedString(foregroundColor)).append("\n");
    sb.append("    soloColor: ").append(toIndentedString(soloColor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backgroundColor");
    openapiFields.add("foregroundColor");
    openapiFields.add("soloColor");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsDriveLabelsV2BadgeColors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsDriveLabelsV2BadgeColors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsDriveLabelsV2BadgeColors is not found in the empty JSON string", GoogleAppsDriveLabelsV2BadgeColors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsDriveLabelsV2BadgeColors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsDriveLabelsV2BadgeColors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backgroundColor`
      if (jsonObj.get("backgroundColor") != null && !jsonObj.get("backgroundColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("backgroundColor"));
      }
      // validate the optional field `foregroundColor`
      if (jsonObj.get("foregroundColor") != null && !jsonObj.get("foregroundColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("foregroundColor"));
      }
      // validate the optional field `soloColor`
      if (jsonObj.get("soloColor") != null && !jsonObj.get("soloColor").isJsonNull()) {
        GoogleTypeColor.validateJsonElement(jsonObj.get("soloColor"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsDriveLabelsV2BadgeColors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsDriveLabelsV2BadgeColors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsDriveLabelsV2BadgeColors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsDriveLabelsV2BadgeColors.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsDriveLabelsV2BadgeColors>() {
           @Override
           public void write(JsonWriter out, GoogleAppsDriveLabelsV2BadgeColors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsDriveLabelsV2BadgeColors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsDriveLabelsV2BadgeColors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsDriveLabelsV2BadgeColors
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsDriveLabelsV2BadgeColors
   */
  public static GoogleAppsDriveLabelsV2BadgeColors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsDriveLabelsV2BadgeColors.class);
  }

  /**
   * Convert an instance of GoogleAppsDriveLabelsV2BadgeColors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

