/*
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleAppsDriveLabelsV2LifecycleDisabledPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The lifecycle state of an object, such as label, field, or choice. The lifecycle enforces the following transitions: * &#x60;UNPUBLISHED_DRAFT&#x60; (starting state) * &#x60;UNPUBLISHED_DRAFT&#x60; -&gt; &#x60;PUBLISHED&#x60; * &#x60;UNPUBLISHED_DRAFT&#x60; -&gt; (Deleted) * &#x60;PUBLISHED&#x60; -&gt; &#x60;DISABLED&#x60; * &#x60;DISABLED&#x60; -&gt; &#x60;PUBLISHED&#x60; * &#x60;DISABLED&#x60; -&gt; (Deleted) The published and disabled states have some distinct characteristics: * Published—Some kinds of changes might be made to an object in this state, in which case &#x60;has_unpublished_changes&#x60; will be true. Also, some kinds of changes are not permitted. Generally, any change that would invalidate or cause new restrictions on existing metadata related to the label are rejected. * Disabled—When disabled, the configured &#x60;DisabledPolicy&#x60; takes effect.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:36.456078-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleAppsDriveLabelsV2Lifecycle {
  public static final String SERIALIZED_NAME_DISABLED_POLICY = "disabledPolicy";
  @SerializedName(SERIALIZED_NAME_DISABLED_POLICY)
  private GoogleAppsDriveLabelsV2LifecycleDisabledPolicy disabledPolicy;

  public static final String SERIALIZED_NAME_HAS_UNPUBLISHED_CHANGES = "hasUnpublishedChanges";
  @SerializedName(SERIALIZED_NAME_HAS_UNPUBLISHED_CHANGES)
  private Boolean hasUnpublishedChanges;

  /**
   * Output only. The state of the object associated with this lifecycle.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    UNPUBLISHED_DRAFT("UNPUBLISHED_DRAFT"),
    
    PUBLISHED("PUBLISHED"),
    
    DISABLED("DISABLED"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public GoogleAppsDriveLabelsV2Lifecycle() {
  }

  public GoogleAppsDriveLabelsV2Lifecycle(
     Boolean hasUnpublishedChanges, 
     StateEnum state
  ) {
    this();
    this.hasUnpublishedChanges = hasUnpublishedChanges;
    this.state = state;
  }

  public GoogleAppsDriveLabelsV2Lifecycle disabledPolicy(GoogleAppsDriveLabelsV2LifecycleDisabledPolicy disabledPolicy) {
    this.disabledPolicy = disabledPolicy;
    return this;
  }

  /**
   * Get disabledPolicy
   * @return disabledPolicy
   */
  @javax.annotation.Nullable
  public GoogleAppsDriveLabelsV2LifecycleDisabledPolicy getDisabledPolicy() {
    return disabledPolicy;
  }

  public void setDisabledPolicy(GoogleAppsDriveLabelsV2LifecycleDisabledPolicy disabledPolicy) {
    this.disabledPolicy = disabledPolicy;
  }


  /**
   * Output only. Whether the object associated with this lifecycle has unpublished changes.
   * @return hasUnpublishedChanges
   */
  @javax.annotation.Nullable
  public Boolean getHasUnpublishedChanges() {
    return hasUnpublishedChanges;
  }



  /**
   * Output only. The state of the object associated with this lifecycle.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleAppsDriveLabelsV2Lifecycle googleAppsDriveLabelsV2Lifecycle = (GoogleAppsDriveLabelsV2Lifecycle) o;
    return Objects.equals(this.disabledPolicy, googleAppsDriveLabelsV2Lifecycle.disabledPolicy) &&
        Objects.equals(this.hasUnpublishedChanges, googleAppsDriveLabelsV2Lifecycle.hasUnpublishedChanges) &&
        Objects.equals(this.state, googleAppsDriveLabelsV2Lifecycle.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabledPolicy, hasUnpublishedChanges, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleAppsDriveLabelsV2Lifecycle {\n");
    sb.append("    disabledPolicy: ").append(toIndentedString(disabledPolicy)).append("\n");
    sb.append("    hasUnpublishedChanges: ").append(toIndentedString(hasUnpublishedChanges)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disabledPolicy");
    openapiFields.add("hasUnpublishedChanges");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleAppsDriveLabelsV2Lifecycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleAppsDriveLabelsV2Lifecycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleAppsDriveLabelsV2Lifecycle is not found in the empty JSON string", GoogleAppsDriveLabelsV2Lifecycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleAppsDriveLabelsV2Lifecycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleAppsDriveLabelsV2Lifecycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `disabledPolicy`
      if (jsonObj.get("disabledPolicy") != null && !jsonObj.get("disabledPolicy").isJsonNull()) {
        GoogleAppsDriveLabelsV2LifecycleDisabledPolicy.validateJsonElement(jsonObj.get("disabledPolicy"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleAppsDriveLabelsV2Lifecycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleAppsDriveLabelsV2Lifecycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleAppsDriveLabelsV2Lifecycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleAppsDriveLabelsV2Lifecycle.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleAppsDriveLabelsV2Lifecycle>() {
           @Override
           public void write(JsonWriter out, GoogleAppsDriveLabelsV2Lifecycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleAppsDriveLabelsV2Lifecycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleAppsDriveLabelsV2Lifecycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleAppsDriveLabelsV2Lifecycle
   * @throws IOException if the JSON string is invalid with respect to GoogleAppsDriveLabelsV2Lifecycle
   */
  public static GoogleAppsDriveLabelsV2Lifecycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleAppsDriveLabelsV2Lifecycle.class);
  }

  /**
   * Convert an instance of GoogleAppsDriveLabelsV2Lifecycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

