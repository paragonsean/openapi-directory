/**
 * Drive Labels API
 * An API for managing Drive Labels
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleAppsDriveLabelsV2LabelLockCapabilities from './GoogleAppsDriveLabelsV2LabelLockCapabilities';
import GoogleAppsDriveLabelsV2UserInfo from './GoogleAppsDriveLabelsV2UserInfo';

/**
 * The GoogleAppsDriveLabelsV2LabelLock model module.
 * @module model/GoogleAppsDriveLabelsV2LabelLock
 * @version v2
 */
class GoogleAppsDriveLabelsV2LabelLock {
    /**
     * Constructs a new <code>GoogleAppsDriveLabelsV2LabelLock</code>.
     * A Lock that can be applied to a Label, Field, or Choice.
     * @alias module:model/GoogleAppsDriveLabelsV2LabelLock
     */
    constructor() { 
        
        GoogleAppsDriveLabelsV2LabelLock.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleAppsDriveLabelsV2LabelLock</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleAppsDriveLabelsV2LabelLock} obj Optional instance to populate.
     * @return {module:model/GoogleAppsDriveLabelsV2LabelLock} The populated <code>GoogleAppsDriveLabelsV2LabelLock</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleAppsDriveLabelsV2LabelLock();

            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = GoogleAppsDriveLabelsV2LabelLockCapabilities.constructFromObject(data['capabilities']);
            }
            if (data.hasOwnProperty('choiceId')) {
                obj['choiceId'] = ApiClient.convertToType(data['choiceId'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('creator')) {
                obj['creator'] = GoogleAppsDriveLabelsV2UserInfo.constructFromObject(data['creator']);
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('fieldId')) {
                obj['fieldId'] = ApiClient.convertToType(data['fieldId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleAppsDriveLabelsV2LabelLock</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleAppsDriveLabelsV2LabelLock</code>.
     */
    static validateJSON(data) {
        // validate the optional field `capabilities`
        if (data['capabilities']) { // data not null
          GoogleAppsDriveLabelsV2LabelLockCapabilities.validateJSON(data['capabilities']);
        }
        // ensure the json data is a string
        if (data['choiceId'] && !(typeof data['choiceId'] === 'string' || data['choiceId'] instanceof String)) {
            throw new Error("Expected the field `choiceId` to be a primitive type in the JSON string but got " + data['choiceId']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `creator`
        if (data['creator']) { // data not null
          GoogleAppsDriveLabelsV2UserInfo.validateJSON(data['creator']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['fieldId'] && !(typeof data['fieldId'] === 'string' || data['fieldId'] instanceof String)) {
            throw new Error("Expected the field `fieldId` to be a primitive type in the JSON string but got " + data['fieldId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleAppsDriveLabelsV2LabelLockCapabilities} capabilities
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['capabilities'] = undefined;

/**
 * The ID of the Selection Field Choice that should be locked. If present, `field_id` must also be present.
 * @member {String} choiceId
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['choiceId'] = undefined;

/**
 * Output only. The time this LabelLock was created.
 * @member {String} createTime
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['createTime'] = undefined;

/**
 * @member {module:model/GoogleAppsDriveLabelsV2UserInfo} creator
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['creator'] = undefined;

/**
 * Output only. A timestamp indicating when this LabelLock was scheduled for deletion. This will be present only if this LabelLock is in the DELETING state.
 * @member {String} deleteTime
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['deleteTime'] = undefined;

/**
 * The ID of the Field that should be locked. Empty if the whole Label should be locked.
 * @member {String} fieldId
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['fieldId'] = undefined;

/**
 * Output only. Resource name of this LabelLock.
 * @member {String} name
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['name'] = undefined;

/**
 * Output only. This LabelLock's state.
 * @member {module:model/GoogleAppsDriveLabelsV2LabelLock.StateEnum} state
 */
GoogleAppsDriveLabelsV2LabelLock.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
GoogleAppsDriveLabelsV2LabelLock['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default GoogleAppsDriveLabelsV2LabelLock;

