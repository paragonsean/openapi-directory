/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopulateVersionFilesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopulateVersionFilesRequest::OAIPopulateVersionFilesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopulateVersionFilesRequest::OAIPopulateVersionFilesRequest() {
    this->initializeModel();
}

OAIPopulateVersionFilesRequest::~OAIPopulateVersionFilesRequest() {}

void OAIPopulateVersionFilesRequest::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;
}

void OAIPopulateVersionFilesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopulateVersionFilesRequest::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;
}

QString OAIPopulateVersionFilesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopulateVersionFilesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    return obj;
}

QMap<QString, QString> OAIPopulateVersionFilesRequest::getFiles() const {
    return m_files;
}
void OAIPopulateVersionFilesRequest::setFiles(const QMap<QString, QString> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIPopulateVersionFilesRequest::is_files_Set() const{
    return m_files_isSet;
}

bool OAIPopulateVersionFilesRequest::is_files_Valid() const{
    return m_files_isValid;
}

bool OAIPopulateVersionFilesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopulateVersionFilesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
