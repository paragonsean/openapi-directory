/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomDomain.h
 *
 * A &#x60;CustomDomain&#x60; is an entity that links a domain name to a Firebase Hosting site. Add a &#x60;CustomDomain&#x60; to your site to allow Hosting to serve the site&#39;s content in response to requests against your domain name.
 */

#ifndef OAICustomDomain_H
#define OAICustomDomain_H

#include <QJsonObject>

#include "OAICertificate.h"
#include "OAIDnsUpdates.h"
#include "OAIStatus.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificate;
class OAIStatus;
class OAIDnsUpdates;

class OAICustomDomain : public OAIObject {
public:
    OAICustomDomain();
    OAICustomDomain(QString json);
    ~OAICustomDomain() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAnnotations() const;
    void setAnnotations(const QMap<QString, QString> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    OAICertificate getCert() const;
    void setCert(const OAICertificate &cert);
    bool is_cert_Set() const;
    bool is_cert_Valid() const;

    QString getCertPreference() const;
    void setCertPreference(const QString &cert_preference);
    bool is_cert_preference_Set() const;
    bool is_cert_preference_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getHostState() const;
    void setHostState(const QString &host_state);
    bool is_host_state_Set() const;
    bool is_host_state_Valid() const;

    QList<OAIStatus> getIssues() const;
    void setIssues(const QList<OAIStatus> &issues);
    bool is_issues_Set() const;
    bool is_issues_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOwnershipState() const;
    void setOwnershipState(const QString &ownership_state);
    bool is_ownership_state_Set() const;
    bool is_ownership_state_Valid() const;

    bool isReconciling() const;
    void setReconciling(const bool &reconciling);
    bool is_reconciling_Set() const;
    bool is_reconciling_Valid() const;

    QString getRedirectTarget() const;
    void setRedirectTarget(const QString &redirect_target);
    bool is_redirect_target_Set() const;
    bool is_redirect_target_Valid() const;

    OAIDnsUpdates getRequiredDnsUpdates() const;
    void setRequiredDnsUpdates(const OAIDnsUpdates &required_dns_updates);
    bool is_required_dns_updates_Set() const;
    bool is_required_dns_updates_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    OAICertificate m_cert;
    bool m_cert_isSet;
    bool m_cert_isValid;

    QString m_cert_preference;
    bool m_cert_preference_isSet;
    bool m_cert_preference_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_host_state;
    bool m_host_state_isSet;
    bool m_host_state_isValid;

    QList<OAIStatus> m_issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_ownership_state;
    bool m_ownership_state_isSet;
    bool m_ownership_state_isValid;

    bool m_reconciling;
    bool m_reconciling_isSet;
    bool m_reconciling_isValid;

    QString m_redirect_target;
    bool m_redirect_target_isSet;
    bool m_redirect_target_isValid;

    OAIDnsUpdates m_required_dns_updates;
    bool m_required_dns_updates_isSet;
    bool m_required_dns_updates_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomDomain)

#endif // OAICustomDomain_H
