/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPopulateVersionFilesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPopulateVersionFilesResponse::OAIPopulateVersionFilesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPopulateVersionFilesResponse::OAIPopulateVersionFilesResponse() {
    this->initializeModel();
}

OAIPopulateVersionFilesResponse::~OAIPopulateVersionFilesResponse() {}

void OAIPopulateVersionFilesResponse::initializeModel() {

    m_upload_required_hashes_isSet = false;
    m_upload_required_hashes_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;
}

void OAIPopulateVersionFilesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPopulateVersionFilesResponse::fromJsonObject(QJsonObject json) {

    m_upload_required_hashes_isValid = ::OpenAPI::fromJsonValue(m_upload_required_hashes, json[QString("uploadRequiredHashes")]);
    m_upload_required_hashes_isSet = !json[QString("uploadRequiredHashes")].isNull() && m_upload_required_hashes_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("uploadUrl")]);
    m_upload_url_isSet = !json[QString("uploadUrl")].isNull() && m_upload_url_isValid;
}

QString OAIPopulateVersionFilesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPopulateVersionFilesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_upload_required_hashes.size() > 0) {
        obj.insert(QString("uploadRequiredHashes"), ::OpenAPI::toJsonValue(m_upload_required_hashes));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("uploadUrl"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    return obj;
}

QList<QString> OAIPopulateVersionFilesResponse::getUploadRequiredHashes() const {
    return m_upload_required_hashes;
}
void OAIPopulateVersionFilesResponse::setUploadRequiredHashes(const QList<QString> &upload_required_hashes) {
    m_upload_required_hashes = upload_required_hashes;
    m_upload_required_hashes_isSet = true;
}

bool OAIPopulateVersionFilesResponse::is_upload_required_hashes_Set() const{
    return m_upload_required_hashes_isSet;
}

bool OAIPopulateVersionFilesResponse::is_upload_required_hashes_Valid() const{
    return m_upload_required_hashes_isValid;
}

QString OAIPopulateVersionFilesResponse::getUploadUrl() const {
    return m_upload_url;
}
void OAIPopulateVersionFilesResponse::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAIPopulateVersionFilesResponse::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAIPopulateVersionFilesResponse::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

bool OAIPopulateVersionFilesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upload_required_hashes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPopulateVersionFilesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
