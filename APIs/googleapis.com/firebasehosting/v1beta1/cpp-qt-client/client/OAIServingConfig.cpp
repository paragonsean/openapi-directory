/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServingConfig::OAIServingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServingConfig::OAIServingConfig() {
    this->initializeModel();
}

OAIServingConfig::~OAIServingConfig() {}

void OAIServingConfig::initializeModel() {

    m_app_association_isSet = false;
    m_app_association_isValid = false;

    m_clean_urls_isSet = false;
    m_clean_urls_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_i18n_isSet = false;
    m_i18n_isValid = false;

    m_redirects_isSet = false;
    m_redirects_isValid = false;

    m_rewrites_isSet = false;
    m_rewrites_isValid = false;

    m_trailing_slash_behavior_isSet = false;
    m_trailing_slash_behavior_isValid = false;
}

void OAIServingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServingConfig::fromJsonObject(QJsonObject json) {

    m_app_association_isValid = ::OpenAPI::fromJsonValue(m_app_association, json[QString("appAssociation")]);
    m_app_association_isSet = !json[QString("appAssociation")].isNull() && m_app_association_isValid;

    m_clean_urls_isValid = ::OpenAPI::fromJsonValue(m_clean_urls, json[QString("cleanUrls")]);
    m_clean_urls_isSet = !json[QString("cleanUrls")].isNull() && m_clean_urls_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_i18n_isValid = ::OpenAPI::fromJsonValue(m_i18n, json[QString("i18n")]);
    m_i18n_isSet = !json[QString("i18n")].isNull() && m_i18n_isValid;

    m_redirects_isValid = ::OpenAPI::fromJsonValue(m_redirects, json[QString("redirects")]);
    m_redirects_isSet = !json[QString("redirects")].isNull() && m_redirects_isValid;

    m_rewrites_isValid = ::OpenAPI::fromJsonValue(m_rewrites, json[QString("rewrites")]);
    m_rewrites_isSet = !json[QString("rewrites")].isNull() && m_rewrites_isValid;

    m_trailing_slash_behavior_isValid = ::OpenAPI::fromJsonValue(m_trailing_slash_behavior, json[QString("trailingSlashBehavior")]);
    m_trailing_slash_behavior_isSet = !json[QString("trailingSlashBehavior")].isNull() && m_trailing_slash_behavior_isValid;
}

QString OAIServingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_app_association_isSet) {
        obj.insert(QString("appAssociation"), ::OpenAPI::toJsonValue(m_app_association));
    }
    if (m_clean_urls_isSet) {
        obj.insert(QString("cleanUrls"), ::OpenAPI::toJsonValue(m_clean_urls));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_i18n.isSet()) {
        obj.insert(QString("i18n"), ::OpenAPI::toJsonValue(m_i18n));
    }
    if (m_redirects.size() > 0) {
        obj.insert(QString("redirects"), ::OpenAPI::toJsonValue(m_redirects));
    }
    if (m_rewrites.size() > 0) {
        obj.insert(QString("rewrites"), ::OpenAPI::toJsonValue(m_rewrites));
    }
    if (m_trailing_slash_behavior_isSet) {
        obj.insert(QString("trailingSlashBehavior"), ::OpenAPI::toJsonValue(m_trailing_slash_behavior));
    }
    return obj;
}

QString OAIServingConfig::getAppAssociation() const {
    return m_app_association;
}
void OAIServingConfig::setAppAssociation(const QString &app_association) {
    m_app_association = app_association;
    m_app_association_isSet = true;
}

bool OAIServingConfig::is_app_association_Set() const{
    return m_app_association_isSet;
}

bool OAIServingConfig::is_app_association_Valid() const{
    return m_app_association_isValid;
}

bool OAIServingConfig::isCleanUrls() const {
    return m_clean_urls;
}
void OAIServingConfig::setCleanUrls(const bool &clean_urls) {
    m_clean_urls = clean_urls;
    m_clean_urls_isSet = true;
}

bool OAIServingConfig::is_clean_urls_Set() const{
    return m_clean_urls_isSet;
}

bool OAIServingConfig::is_clean_urls_Valid() const{
    return m_clean_urls_isValid;
}

QList<OAIHeader> OAIServingConfig::getHeaders() const {
    return m_headers;
}
void OAIServingConfig::setHeaders(const QList<OAIHeader> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIServingConfig::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIServingConfig::is_headers_Valid() const{
    return m_headers_isValid;
}

OAII18nConfig OAIServingConfig::getI18n() const {
    return m_i18n;
}
void OAIServingConfig::setI18n(const OAII18nConfig &i18n) {
    m_i18n = i18n;
    m_i18n_isSet = true;
}

bool OAIServingConfig::is_i18n_Set() const{
    return m_i18n_isSet;
}

bool OAIServingConfig::is_i18n_Valid() const{
    return m_i18n_isValid;
}

QList<OAIRedirect> OAIServingConfig::getRedirects() const {
    return m_redirects;
}
void OAIServingConfig::setRedirects(const QList<OAIRedirect> &redirects) {
    m_redirects = redirects;
    m_redirects_isSet = true;
}

bool OAIServingConfig::is_redirects_Set() const{
    return m_redirects_isSet;
}

bool OAIServingConfig::is_redirects_Valid() const{
    return m_redirects_isValid;
}

QList<OAIRewrite> OAIServingConfig::getRewrites() const {
    return m_rewrites;
}
void OAIServingConfig::setRewrites(const QList<OAIRewrite> &rewrites) {
    m_rewrites = rewrites;
    m_rewrites_isSet = true;
}

bool OAIServingConfig::is_rewrites_Set() const{
    return m_rewrites_isSet;
}

bool OAIServingConfig::is_rewrites_Valid() const{
    return m_rewrites_isValid;
}

QString OAIServingConfig::getTrailingSlashBehavior() const {
    return m_trailing_slash_behavior;
}
void OAIServingConfig::setTrailingSlashBehavior(const QString &trailing_slash_behavior) {
    m_trailing_slash_behavior = trailing_slash_behavior;
    m_trailing_slash_behavior_isSet = true;
}

bool OAIServingConfig::is_trailing_slash_behavior_Set() const{
    return m_trailing_slash_behavior_isSet;
}

bool OAIServingConfig::is_trailing_slash_behavior_Valid() const{
    return m_trailing_slash_behavior_isValid;
}

bool OAIServingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_association_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clean_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_i18n.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rewrites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailing_slash_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
