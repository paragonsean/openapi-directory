/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedirect.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedirect::OAIRedirect(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedirect::OAIRedirect() {
    this->initializeModel();
}

OAIRedirect::~OAIRedirect() {}

void OAIRedirect::initializeModel() {

    m_glob_isSet = false;
    m_glob_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIRedirect::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedirect::fromJsonObject(QJsonObject json) {

    m_glob_isValid = ::OpenAPI::fromJsonValue(m_glob, json[QString("glob")]);
    m_glob_isSet = !json[QString("glob")].isNull() && m_glob_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIRedirect::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedirect::asJsonObject() const {
    QJsonObject obj;
    if (m_glob_isSet) {
        obj.insert(QString("glob"), ::OpenAPI::toJsonValue(m_glob));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

QString OAIRedirect::getGlob() const {
    return m_glob;
}
void OAIRedirect::setGlob(const QString &glob) {
    m_glob = glob;
    m_glob_isSet = true;
}

bool OAIRedirect::is_glob_Set() const{
    return m_glob_isSet;
}

bool OAIRedirect::is_glob_Valid() const{
    return m_glob_isValid;
}

QString OAIRedirect::getLocation() const {
    return m_location;
}
void OAIRedirect::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRedirect::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRedirect::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIRedirect::getRegex() const {
    return m_regex;
}
void OAIRedirect::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIRedirect::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIRedirect::is_regex_Valid() const{
    return m_regex_isValid;
}

qint32 OAIRedirect::getStatusCode() const {
    return m_status_code;
}
void OAIRedirect::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIRedirect::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIRedirect::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIRedirect::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_glob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedirect::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
