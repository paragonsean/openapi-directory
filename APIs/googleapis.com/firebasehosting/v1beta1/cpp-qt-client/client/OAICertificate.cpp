/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate::OAICertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate::OAICertificate() {
    this->initializeModel();
}

OAICertificate::~OAICertificate() {}

void OAICertificate::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAICertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAICertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

QString OAICertificate::getCreateTime() const {
    return m_create_time;
}
void OAICertificate::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICertificate::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICertificate::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICertificate::getExpireTime() const {
    return m_expire_time;
}
void OAICertificate::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICertificate::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICertificate::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QList<OAIStatus> OAICertificate::getIssues() const {
    return m_issues;
}
void OAICertificate::setIssues(const QList<OAIStatus> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAICertificate::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAICertificate::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAICertificate::getState() const {
    return m_state;
}
void OAICertificate::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICertificate::is_state_Set() const{
    return m_state_isSet;
}

bool OAICertificate::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICertificate::getType() const {
    return m_type;
}
void OAICertificate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICertificate::is_type_Set() const{
    return m_type_isSet;
}

bool OAICertificate::is_type_Valid() const{
    return m_type_isValid;
}

OAICertVerification OAICertificate::getVerification() const {
    return m_verification;
}
void OAICertificate::setVerification(const OAICertVerification &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAICertificate::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAICertificate::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAICertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
