/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCustomDomainsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCustomDomainsResponse::OAIListCustomDomainsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCustomDomainsResponse::OAIListCustomDomainsResponse() {
    this->initializeModel();
}

OAIListCustomDomainsResponse::~OAIListCustomDomainsResponse() {}

void OAIListCustomDomainsResponse::initializeModel() {

    m_custom_domains_isSet = false;
    m_custom_domains_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListCustomDomainsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCustomDomainsResponse::fromJsonObject(QJsonObject json) {

    m_custom_domains_isValid = ::OpenAPI::fromJsonValue(m_custom_domains, json[QString("customDomains")]);
    m_custom_domains_isSet = !json[QString("customDomains")].isNull() && m_custom_domains_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListCustomDomainsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCustomDomainsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_domains.size() > 0) {
        obj.insert(QString("customDomains"), ::OpenAPI::toJsonValue(m_custom_domains));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAICustomDomain> OAIListCustomDomainsResponse::getCustomDomains() const {
    return m_custom_domains;
}
void OAIListCustomDomainsResponse::setCustomDomains(const QList<OAICustomDomain> &custom_domains) {
    m_custom_domains = custom_domains;
    m_custom_domains_isSet = true;
}

bool OAIListCustomDomainsResponse::is_custom_domains_Set() const{
    return m_custom_domains_isSet;
}

bool OAIListCustomDomainsResponse::is_custom_domains_Valid() const{
    return m_custom_domains_isValid;
}

QString OAIListCustomDomainsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListCustomDomainsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListCustomDomainsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListCustomDomainsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListCustomDomainsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCustomDomainsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
