/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_isSet = false;
    m_release_isValid = false;

    m_retained_release_count_isSet = false;
    m_retained_release_count_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_isValid = ::OpenAPI::fromJsonValue(m_release, json[QString("release")]);
    m_release_isSet = !json[QString("release")].isNull() && m_release_isValid;

    m_retained_release_count_isValid = ::OpenAPI::fromJsonValue(m_retained_release_count, json[QString("retainedReleaseCount")]);
    m_retained_release_count_isSet = !json[QString("retainedReleaseCount")].isNull() && m_retained_release_count_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release.isSet()) {
        obj.insert(QString("release"), ::OpenAPI::toJsonValue(m_release));
    }
    if (m_retained_release_count_isSet) {
        obj.insert(QString("retainedReleaseCount"), ::OpenAPI::toJsonValue(m_retained_release_count));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIChannel::getCreateTime() const {
    return m_create_time;
}
void OAIChannel::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIChannel::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIChannel::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIChannel::getExpireTime() const {
    return m_expire_time;
}
void OAIChannel::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIChannel::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIChannel::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QMap<QString, QString> OAIChannel::getLabels() const {
    return m_labels;
}
void OAIChannel::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIChannel::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIChannel::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIChannel::getName() const {
    return m_name;
}
void OAIChannel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannel::is_name_Valid() const{
    return m_name_isValid;
}

OAIRelease OAIChannel::getRelease() const {
    return m_release;
}
void OAIChannel::setRelease(const OAIRelease &release) {
    m_release = release;
    m_release_isSet = true;
}

bool OAIChannel::is_release_Set() const{
    return m_release_isSet;
}

bool OAIChannel::is_release_Valid() const{
    return m_release_isValid;
}

qint32 OAIChannel::getRetainedReleaseCount() const {
    return m_retained_release_count;
}
void OAIChannel::setRetainedReleaseCount(const qint32 &retained_release_count) {
    m_retained_release_count = retained_release_count;
    m_retained_release_count_isSet = true;
}

bool OAIChannel::is_retained_release_count_Set() const{
    return m_retained_release_count_isSet;
}

bool OAIChannel::is_retained_release_count_Valid() const{
    return m_retained_release_count_isValid;
}

QString OAIChannel::getTtl() const {
    return m_ttl;
}
void OAIChannel::setTtl(const QString &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIChannel::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIChannel::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIChannel::getUpdateTime() const {
    return m_update_time;
}
void OAIChannel::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIChannel::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIChannel::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIChannel::getUrl() const {
    return m_url;
}
void OAIChannel::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIChannel::is_url_Set() const{
    return m_url_isSet;
}

bool OAIChannel::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retained_release_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
