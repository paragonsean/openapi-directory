/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelease::OAIRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelease::OAIRelease() {
    this->initializeModel();
}

OAIRelease::~OAIRelease() {}

void OAIRelease::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_time_isSet = false;
    m_release_time_isValid = false;

    m_release_user_isSet = false;
    m_release_user_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelease::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_time_isValid = ::OpenAPI::fromJsonValue(m_release_time, json[QString("releaseTime")]);
    m_release_time_isSet = !json[QString("releaseTime")].isNull() && m_release_time_isValid;

    m_release_user_isValid = ::OpenAPI::fromJsonValue(m_release_user, json[QString("releaseUser")]);
    m_release_user_isSet = !json[QString("releaseUser")].isNull() && m_release_user_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_time_isSet) {
        obj.insert(QString("releaseTime"), ::OpenAPI::toJsonValue(m_release_time));
    }
    if (m_release_user.isSet()) {
        obj.insert(QString("releaseUser"), ::OpenAPI::toJsonValue(m_release_user));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIRelease::getMessage() const {
    return m_message;
}
void OAIRelease::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRelease::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRelease::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRelease::getName() const {
    return m_name;
}
void OAIRelease::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelease::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelease::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRelease::getReleaseTime() const {
    return m_release_time;
}
void OAIRelease::setReleaseTime(const QString &release_time) {
    m_release_time = release_time;
    m_release_time_isSet = true;
}

bool OAIRelease::is_release_time_Set() const{
    return m_release_time_isSet;
}

bool OAIRelease::is_release_time_Valid() const{
    return m_release_time_isValid;
}

OAIActingUser OAIRelease::getReleaseUser() const {
    return m_release_user;
}
void OAIRelease::setReleaseUser(const OAIActingUser &release_user) {
    m_release_user = release_user;
    m_release_user_isSet = true;
}

bool OAIRelease::is_release_user_Set() const{
    return m_release_user_isSet;
}

bool OAIRelease::is_release_user_Valid() const{
    return m_release_user_isValid;
}

QString OAIRelease::getType() const {
    return m_type;
}
void OAIRelease::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRelease::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRelease::is_type_Valid() const{
    return m_type_isValid;
}

OAIVersion OAIRelease::getVersion() const {
    return m_version;
}
void OAIRelease::setVersion(const OAIVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRelease::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRelease::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
