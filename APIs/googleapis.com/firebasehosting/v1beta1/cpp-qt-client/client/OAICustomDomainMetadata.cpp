/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDomainMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDomainMetadata::OAICustomDomainMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDomainMetadata::OAICustomDomainMetadata() {
    this->initializeModel();
}

OAICustomDomainMetadata::~OAICustomDomainMetadata() {}

void OAICustomDomainMetadata::initializeModel() {

    m_cert_state_isSet = false;
    m_cert_state_isValid = false;

    m_host_state_isSet = false;
    m_host_state_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_live_migration_steps_isSet = false;
    m_live_migration_steps_isValid = false;

    m_ownership_state_isSet = false;
    m_ownership_state_isValid = false;

    m_quick_setup_updates_isSet = false;
    m_quick_setup_updates_isValid = false;
}

void OAICustomDomainMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDomainMetadata::fromJsonObject(QJsonObject json) {

    m_cert_state_isValid = ::OpenAPI::fromJsonValue(m_cert_state, json[QString("certState")]);
    m_cert_state_isSet = !json[QString("certState")].isNull() && m_cert_state_isValid;

    m_host_state_isValid = ::OpenAPI::fromJsonValue(m_host_state, json[QString("hostState")]);
    m_host_state_isSet = !json[QString("hostState")].isNull() && m_host_state_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_live_migration_steps_isValid = ::OpenAPI::fromJsonValue(m_live_migration_steps, json[QString("liveMigrationSteps")]);
    m_live_migration_steps_isSet = !json[QString("liveMigrationSteps")].isNull() && m_live_migration_steps_isValid;

    m_ownership_state_isValid = ::OpenAPI::fromJsonValue(m_ownership_state, json[QString("ownershipState")]);
    m_ownership_state_isSet = !json[QString("ownershipState")].isNull() && m_ownership_state_isValid;

    m_quick_setup_updates_isValid = ::OpenAPI::fromJsonValue(m_quick_setup_updates, json[QString("quickSetupUpdates")]);
    m_quick_setup_updates_isSet = !json[QString("quickSetupUpdates")].isNull() && m_quick_setup_updates_isValid;
}

QString OAICustomDomainMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDomainMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_state_isSet) {
        obj.insert(QString("certState"), ::OpenAPI::toJsonValue(m_cert_state));
    }
    if (m_host_state_isSet) {
        obj.insert(QString("hostState"), ::OpenAPI::toJsonValue(m_host_state));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_live_migration_steps.size() > 0) {
        obj.insert(QString("liveMigrationSteps"), ::OpenAPI::toJsonValue(m_live_migration_steps));
    }
    if (m_ownership_state_isSet) {
        obj.insert(QString("ownershipState"), ::OpenAPI::toJsonValue(m_ownership_state));
    }
    if (m_quick_setup_updates.isSet()) {
        obj.insert(QString("quickSetupUpdates"), ::OpenAPI::toJsonValue(m_quick_setup_updates));
    }
    return obj;
}

QString OAICustomDomainMetadata::getCertState() const {
    return m_cert_state;
}
void OAICustomDomainMetadata::setCertState(const QString &cert_state) {
    m_cert_state = cert_state;
    m_cert_state_isSet = true;
}

bool OAICustomDomainMetadata::is_cert_state_Set() const{
    return m_cert_state_isSet;
}

bool OAICustomDomainMetadata::is_cert_state_Valid() const{
    return m_cert_state_isValid;
}

QString OAICustomDomainMetadata::getHostState() const {
    return m_host_state;
}
void OAICustomDomainMetadata::setHostState(const QString &host_state) {
    m_host_state = host_state;
    m_host_state_isSet = true;
}

bool OAICustomDomainMetadata::is_host_state_Set() const{
    return m_host_state_isSet;
}

bool OAICustomDomainMetadata::is_host_state_Valid() const{
    return m_host_state_isValid;
}

QList<OAIStatus> OAICustomDomainMetadata::getIssues() const {
    return m_issues;
}
void OAICustomDomainMetadata::setIssues(const QList<OAIStatus> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAICustomDomainMetadata::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAICustomDomainMetadata::is_issues_Valid() const{
    return m_issues_isValid;
}

QList<OAILiveMigrationStep> OAICustomDomainMetadata::getLiveMigrationSteps() const {
    return m_live_migration_steps;
}
void OAICustomDomainMetadata::setLiveMigrationSteps(const QList<OAILiveMigrationStep> &live_migration_steps) {
    m_live_migration_steps = live_migration_steps;
    m_live_migration_steps_isSet = true;
}

bool OAICustomDomainMetadata::is_live_migration_steps_Set() const{
    return m_live_migration_steps_isSet;
}

bool OAICustomDomainMetadata::is_live_migration_steps_Valid() const{
    return m_live_migration_steps_isValid;
}

QString OAICustomDomainMetadata::getOwnershipState() const {
    return m_ownership_state;
}
void OAICustomDomainMetadata::setOwnershipState(const QString &ownership_state) {
    m_ownership_state = ownership_state;
    m_ownership_state_isSet = true;
}

bool OAICustomDomainMetadata::is_ownership_state_Set() const{
    return m_ownership_state_isSet;
}

bool OAICustomDomainMetadata::is_ownership_state_Valid() const{
    return m_ownership_state_isValid;
}

OAIDnsUpdates OAICustomDomainMetadata::getQuickSetupUpdates() const {
    return m_quick_setup_updates;
}
void OAICustomDomainMetadata::setQuickSetupUpdates(const OAIDnsUpdates &quick_setup_updates) {
    m_quick_setup_updates = quick_setup_updates;
    m_quick_setup_updates_isSet = true;
}

bool OAICustomDomainMetadata::is_quick_setup_updates_Set() const{
    return m_quick_setup_updates_isSet;
}

bool OAICustomDomainMetadata::is_quick_setup_updates_Valid() const{
    return m_quick_setup_updates_isValid;
}

bool OAICustomDomainMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_migration_steps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quick_setup_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDomainMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
