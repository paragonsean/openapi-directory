/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertVerification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertVerification::OAICertVerification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertVerification::OAICertVerification() {
    this->initializeModel();
}

OAICertVerification::~OAICertVerification() {}

void OAICertVerification::initializeModel() {

    m_dns_isSet = false;
    m_dns_isValid = false;

    m_http_isSet = false;
    m_http_isValid = false;
}

void OAICertVerification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertVerification::fromJsonObject(QJsonObject json) {

    m_dns_isValid = ::OpenAPI::fromJsonValue(m_dns, json[QString("dns")]);
    m_dns_isSet = !json[QString("dns")].isNull() && m_dns_isValid;

    m_http_isValid = ::OpenAPI::fromJsonValue(m_http, json[QString("http")]);
    m_http_isSet = !json[QString("http")].isNull() && m_http_isValid;
}

QString OAICertVerification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertVerification::asJsonObject() const {
    QJsonObject obj;
    if (m_dns.isSet()) {
        obj.insert(QString("dns"), ::OpenAPI::toJsonValue(m_dns));
    }
    if (m_http.isSet()) {
        obj.insert(QString("http"), ::OpenAPI::toJsonValue(m_http));
    }
    return obj;
}

OAIDnsUpdates OAICertVerification::getDns() const {
    return m_dns;
}
void OAICertVerification::setDns(const OAIDnsUpdates &dns) {
    m_dns = dns;
    m_dns_isSet = true;
}

bool OAICertVerification::is_dns_Set() const{
    return m_dns_isSet;
}

bool OAICertVerification::is_dns_Valid() const{
    return m_dns_isValid;
}

OAIHttpUpdate OAICertVerification::getHttp() const {
    return m_http;
}
void OAICertVerification::setHttp(const OAIHttpUpdate &http) {
    m_http = http;
    m_http_isSet = true;
}

bool OAICertVerification::is_http_Set() const{
    return m_http_isSet;
}

bool OAICertVerification::is_http_Valid() const{
    return m_http_isValid;
}

bool OAICertVerification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertVerification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
