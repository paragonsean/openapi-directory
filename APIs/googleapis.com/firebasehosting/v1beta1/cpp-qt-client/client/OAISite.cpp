/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite::OAISite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite::OAISite() {
    this->initializeModel();
}

OAISite::~OAISite() {}

void OAISite::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_default_url_isSet = false;
    m_default_url_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_default_url_isValid = ::OpenAPI::fromJsonValue(m_default_url, json[QString("defaultUrl")]);
    m_default_url_isSet = !json[QString("defaultUrl")].isNull() && m_default_url_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_default_url_isSet) {
        obj.insert(QString("defaultUrl"), ::OpenAPI::toJsonValue(m_default_url));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISite::getAppId() const {
    return m_app_id;
}
void OAISite::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAISite::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAISite::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAISite::getDefaultUrl() const {
    return m_default_url;
}
void OAISite::setDefaultUrl(const QString &default_url) {
    m_default_url = default_url;
    m_default_url_isSet = true;
}

bool OAISite::is_default_url_Set() const{
    return m_default_url_isSet;
}

bool OAISite::is_default_url_Valid() const{
    return m_default_url_isValid;
}

QMap<QString, QString> OAISite::getLabels() const {
    return m_labels;
}
void OAISite::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISite::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISite::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAISite::getName() const {
    return m_name;
}
void OAISite::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISite::is_name_Set() const{
    return m_name_isSet;
}

bool OAISite::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISite::getType() const {
    return m_type;
}
void OAISite::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISite::is_type_Set() const{
    return m_type_isSet;
}

bool OAISite::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
