/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDomainProvisioning.h
 *
 * The current certificate provisioning status information for a domain.
 */

#ifndef OAIDomainProvisioning_H
#define OAIDomainProvisioning_H

#include <QJsonObject>

#include "OAICertDnsChallenge.h"
#include "OAICertHttpChallenge.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertDnsChallenge;
class OAICertHttpChallenge;

class OAIDomainProvisioning : public OAIObject {
public:
    OAIDomainProvisioning();
    OAIDomainProvisioning(QString json);
    ~OAIDomainProvisioning() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getCertChallengeDiscoveredTxt() const;
    void setCertChallengeDiscoveredTxt(const QList<QString> &cert_challenge_discovered_txt);
    bool is_cert_challenge_discovered_txt_Set() const;
    bool is_cert_challenge_discovered_txt_Valid() const;

    OAICertDnsChallenge getCertChallengeDns() const;
    void setCertChallengeDns(const OAICertDnsChallenge &cert_challenge_dns);
    bool is_cert_challenge_dns_Set() const;
    bool is_cert_challenge_dns_Valid() const;

    OAICertHttpChallenge getCertChallengeHttp() const;
    void setCertChallengeHttp(const OAICertHttpChallenge &cert_challenge_http);
    bool is_cert_challenge_http_Set() const;
    bool is_cert_challenge_http_Valid() const;

    QString getCertStatus() const;
    void setCertStatus(const QString &cert_status);
    bool is_cert_status_Set() const;
    bool is_cert_status_Valid() const;

    QList<QString> getDiscoveredIps() const;
    void setDiscoveredIps(const QList<QString> &discovered_ips);
    bool is_discovered_ips_Set() const;
    bool is_discovered_ips_Valid() const;

    QString getDnsFetchTime() const;
    void setDnsFetchTime(const QString &dns_fetch_time);
    bool is_dns_fetch_time_Set() const;
    bool is_dns_fetch_time_Valid() const;

    QString getDnsStatus() const;
    void setDnsStatus(const QString &dns_status);
    bool is_dns_status_Set() const;
    bool is_dns_status_Valid() const;

    QList<QString> getExpectedIps() const;
    void setExpectedIps(const QList<QString> &expected_ips);
    bool is_expected_ips_Set() const;
    bool is_expected_ips_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_cert_challenge_discovered_txt;
    bool m_cert_challenge_discovered_txt_isSet;
    bool m_cert_challenge_discovered_txt_isValid;

    OAICertDnsChallenge m_cert_challenge_dns;
    bool m_cert_challenge_dns_isSet;
    bool m_cert_challenge_dns_isValid;

    OAICertHttpChallenge m_cert_challenge_http;
    bool m_cert_challenge_http_isSet;
    bool m_cert_challenge_http_isValid;

    QString m_cert_status;
    bool m_cert_status_isSet;
    bool m_cert_status_isValid;

    QList<QString> m_discovered_ips;
    bool m_discovered_ips_isSet;
    bool m_discovered_ips_isValid;

    QString m_dns_fetch_time;
    bool m_dns_fetch_time_isSet;
    bool m_dns_fetch_time_isValid;

    QString m_dns_status;
    bool m_dns_status_isSet;
    bool m_dns_status_isValid;

    QList<QString> m_expected_ips;
    bool m_expected_ips_isSet;
    bool m_expected_ips_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDomainProvisioning)

#endif // OAIDomainProvisioning_H
