/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRewrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRewrite::OAIRewrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRewrite::OAIRewrite() {
    this->initializeModel();
}

OAIRewrite::~OAIRewrite() {}

void OAIRewrite::initializeModel() {

    m_dynamic_links_isSet = false;
    m_dynamic_links_isValid = false;

    m_function_isSet = false;
    m_function_isValid = false;

    m_function_region_isSet = false;
    m_function_region_isValid = false;

    m_glob_isSet = false;
    m_glob_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_run_isSet = false;
    m_run_isValid = false;
}

void OAIRewrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRewrite::fromJsonObject(QJsonObject json) {

    m_dynamic_links_isValid = ::OpenAPI::fromJsonValue(m_dynamic_links, json[QString("dynamicLinks")]);
    m_dynamic_links_isSet = !json[QString("dynamicLinks")].isNull() && m_dynamic_links_isValid;

    m_function_isValid = ::OpenAPI::fromJsonValue(m_function, json[QString("function")]);
    m_function_isSet = !json[QString("function")].isNull() && m_function_isValid;

    m_function_region_isValid = ::OpenAPI::fromJsonValue(m_function_region, json[QString("functionRegion")]);
    m_function_region_isSet = !json[QString("functionRegion")].isNull() && m_function_region_isValid;

    m_glob_isValid = ::OpenAPI::fromJsonValue(m_glob, json[QString("glob")]);
    m_glob_isSet = !json[QString("glob")].isNull() && m_glob_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_run_isValid = ::OpenAPI::fromJsonValue(m_run, json[QString("run")]);
    m_run_isSet = !json[QString("run")].isNull() && m_run_isValid;
}

QString OAIRewrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRewrite::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_links_isSet) {
        obj.insert(QString("dynamicLinks"), ::OpenAPI::toJsonValue(m_dynamic_links));
    }
    if (m_function_isSet) {
        obj.insert(QString("function"), ::OpenAPI::toJsonValue(m_function));
    }
    if (m_function_region_isSet) {
        obj.insert(QString("functionRegion"), ::OpenAPI::toJsonValue(m_function_region));
    }
    if (m_glob_isSet) {
        obj.insert(QString("glob"), ::OpenAPI::toJsonValue(m_glob));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_run.isSet()) {
        obj.insert(QString("run"), ::OpenAPI::toJsonValue(m_run));
    }
    return obj;
}

bool OAIRewrite::isDynamicLinks() const {
    return m_dynamic_links;
}
void OAIRewrite::setDynamicLinks(const bool &dynamic_links) {
    m_dynamic_links = dynamic_links;
    m_dynamic_links_isSet = true;
}

bool OAIRewrite::is_dynamic_links_Set() const{
    return m_dynamic_links_isSet;
}

bool OAIRewrite::is_dynamic_links_Valid() const{
    return m_dynamic_links_isValid;
}

QString OAIRewrite::getFunction() const {
    return m_function;
}
void OAIRewrite::setFunction(const QString &function) {
    m_function = function;
    m_function_isSet = true;
}

bool OAIRewrite::is_function_Set() const{
    return m_function_isSet;
}

bool OAIRewrite::is_function_Valid() const{
    return m_function_isValid;
}

QString OAIRewrite::getFunctionRegion() const {
    return m_function_region;
}
void OAIRewrite::setFunctionRegion(const QString &function_region) {
    m_function_region = function_region;
    m_function_region_isSet = true;
}

bool OAIRewrite::is_function_region_Set() const{
    return m_function_region_isSet;
}

bool OAIRewrite::is_function_region_Valid() const{
    return m_function_region_isValid;
}

QString OAIRewrite::getGlob() const {
    return m_glob;
}
void OAIRewrite::setGlob(const QString &glob) {
    m_glob = glob;
    m_glob_isSet = true;
}

bool OAIRewrite::is_glob_Set() const{
    return m_glob_isSet;
}

bool OAIRewrite::is_glob_Valid() const{
    return m_glob_isValid;
}

QString OAIRewrite::getPath() const {
    return m_path;
}
void OAIRewrite::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRewrite::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRewrite::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRewrite::getRegex() const {
    return m_regex;
}
void OAIRewrite::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIRewrite::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIRewrite::is_regex_Valid() const{
    return m_regex_isValid;
}

OAICloudRunRewrite OAIRewrite::getRun() const {
    return m_run;
}
void OAIRewrite::setRun(const OAICloudRunRewrite &run) {
    m_run = run;
    m_run_isSet = true;
}

bool OAIRewrite::is_run_Set() const{
    return m_run_isSet;
}

bool OAIRewrite::is_run_Valid() const{
    return m_run_isValid;
}

bool OAIRewrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_glob_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRewrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
