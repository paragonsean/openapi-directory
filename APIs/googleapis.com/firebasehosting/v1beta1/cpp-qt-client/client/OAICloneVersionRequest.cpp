/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloneVersionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloneVersionRequest::OAICloneVersionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloneVersionRequest::OAICloneVersionRequest() {
    this->initializeModel();
}

OAICloneVersionRequest::~OAICloneVersionRequest() {}

void OAICloneVersionRequest::initializeModel() {

    m_exclude_isSet = false;
    m_exclude_isValid = false;

    m_finalize_isSet = false;
    m_finalize_isValid = false;

    m_include_isSet = false;
    m_include_isValid = false;

    m_source_version_isSet = false;
    m_source_version_isValid = false;
}

void OAICloneVersionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloneVersionRequest::fromJsonObject(QJsonObject json) {

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("exclude")]);
    m_exclude_isSet = !json[QString("exclude")].isNull() && m_exclude_isValid;

    m_finalize_isValid = ::OpenAPI::fromJsonValue(m_finalize, json[QString("finalize")]);
    m_finalize_isSet = !json[QString("finalize")].isNull() && m_finalize_isValid;

    m_include_isValid = ::OpenAPI::fromJsonValue(m_include, json[QString("include")]);
    m_include_isSet = !json[QString("include")].isNull() && m_include_isValid;

    m_source_version_isValid = ::OpenAPI::fromJsonValue(m_source_version, json[QString("sourceVersion")]);
    m_source_version_isSet = !json[QString("sourceVersion")].isNull() && m_source_version_isValid;
}

QString OAICloneVersionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloneVersionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude.isSet()) {
        obj.insert(QString("exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    if (m_finalize_isSet) {
        obj.insert(QString("finalize"), ::OpenAPI::toJsonValue(m_finalize));
    }
    if (m_include.isSet()) {
        obj.insert(QString("include"), ::OpenAPI::toJsonValue(m_include));
    }
    if (m_source_version_isSet) {
        obj.insert(QString("sourceVersion"), ::OpenAPI::toJsonValue(m_source_version));
    }
    return obj;
}

OAIPathFilter OAICloneVersionRequest::getExclude() const {
    return m_exclude;
}
void OAICloneVersionRequest::setExclude(const OAIPathFilter &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAICloneVersionRequest::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAICloneVersionRequest::is_exclude_Valid() const{
    return m_exclude_isValid;
}

bool OAICloneVersionRequest::isFinalize() const {
    return m_finalize;
}
void OAICloneVersionRequest::setFinalize(const bool &finalize) {
    m_finalize = finalize;
    m_finalize_isSet = true;
}

bool OAICloneVersionRequest::is_finalize_Set() const{
    return m_finalize_isSet;
}

bool OAICloneVersionRequest::is_finalize_Valid() const{
    return m_finalize_isValid;
}

OAIPathFilter OAICloneVersionRequest::getInclude() const {
    return m_include;
}
void OAICloneVersionRequest::setInclude(const OAIPathFilter &include) {
    m_include = include;
    m_include_isSet = true;
}

bool OAICloneVersionRequest::is_include_Set() const{
    return m_include_isSet;
}

bool OAICloneVersionRequest::is_include_Valid() const{
    return m_include_isValid;
}

QString OAICloneVersionRequest::getSourceVersion() const {
    return m_source_version;
}
void OAICloneVersionRequest::setSourceVersion(const QString &source_version) {
    m_source_version = source_version;
    m_source_version_isSet = true;
}

bool OAICloneVersionRequest::is_source_version_Set() const{
    return m_source_version_isSet;
}

bool OAICloneVersionRequest::is_source_version_Valid() const{
    return m_source_version_isValid;
}

bool OAICloneVersionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_finalize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloneVersionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
