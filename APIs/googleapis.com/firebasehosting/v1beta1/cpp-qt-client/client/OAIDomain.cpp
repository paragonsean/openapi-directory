/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomain::OAIDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomain::OAIDomain() {
    this->initializeModel();
}

OAIDomain::~OAIDomain() {}

void OAIDomain::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_redirect_isSet = false;
    m_domain_redirect_isValid = false;

    m_provisioning_isSet = false;
    m_provisioning_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomain::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_domain_redirect_isValid = ::OpenAPI::fromJsonValue(m_domain_redirect, json[QString("domainRedirect")]);
    m_domain_redirect_isSet = !json[QString("domainRedirect")].isNull() && m_domain_redirect_isValid;

    m_provisioning_isValid = ::OpenAPI::fromJsonValue(m_provisioning, json[QString("provisioning")]);
    m_provisioning_isSet = !json[QString("provisioning")].isNull() && m_provisioning_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_redirect.isSet()) {
        obj.insert(QString("domainRedirect"), ::OpenAPI::toJsonValue(m_domain_redirect));
    }
    if (m_provisioning.isSet()) {
        obj.insert(QString("provisioning"), ::OpenAPI::toJsonValue(m_provisioning));
    }
    if (m_site_isSet) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIDomain::getDomainName() const {
    return m_domain_name;
}
void OAIDomain::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDomain::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDomain::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIDomainRedirect OAIDomain::getDomainRedirect() const {
    return m_domain_redirect;
}
void OAIDomain::setDomainRedirect(const OAIDomainRedirect &domain_redirect) {
    m_domain_redirect = domain_redirect;
    m_domain_redirect_isSet = true;
}

bool OAIDomain::is_domain_redirect_Set() const{
    return m_domain_redirect_isSet;
}

bool OAIDomain::is_domain_redirect_Valid() const{
    return m_domain_redirect_isValid;
}

OAIDomainProvisioning OAIDomain::getProvisioning() const {
    return m_provisioning;
}
void OAIDomain::setProvisioning(const OAIDomainProvisioning &provisioning) {
    m_provisioning = provisioning;
    m_provisioning_isSet = true;
}

bool OAIDomain::is_provisioning_Set() const{
    return m_provisioning_isSet;
}

bool OAIDomain::is_provisioning_Valid() const{
    return m_provisioning_isValid;
}

QString OAIDomain::getSite() const {
    return m_site;
}
void OAIDomain::setSite(const QString &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIDomain::is_site_Set() const{
    return m_site_isSet;
}

bool OAIDomain::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIDomain::getStatus() const {
    return m_status;
}
void OAIDomain::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDomain::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDomain::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDomain::getUpdateTime() const {
    return m_update_time;
}
void OAIDomain::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIDomain::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIDomain::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_redirect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
