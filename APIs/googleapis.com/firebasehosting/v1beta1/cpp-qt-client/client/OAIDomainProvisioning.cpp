/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainProvisioning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainProvisioning::OAIDomainProvisioning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainProvisioning::OAIDomainProvisioning() {
    this->initializeModel();
}

OAIDomainProvisioning::~OAIDomainProvisioning() {}

void OAIDomainProvisioning::initializeModel() {

    m_cert_challenge_discovered_txt_isSet = false;
    m_cert_challenge_discovered_txt_isValid = false;

    m_cert_challenge_dns_isSet = false;
    m_cert_challenge_dns_isValid = false;

    m_cert_challenge_http_isSet = false;
    m_cert_challenge_http_isValid = false;

    m_cert_status_isSet = false;
    m_cert_status_isValid = false;

    m_discovered_ips_isSet = false;
    m_discovered_ips_isValid = false;

    m_dns_fetch_time_isSet = false;
    m_dns_fetch_time_isValid = false;

    m_dns_status_isSet = false;
    m_dns_status_isValid = false;

    m_expected_ips_isSet = false;
    m_expected_ips_isValid = false;
}

void OAIDomainProvisioning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainProvisioning::fromJsonObject(QJsonObject json) {

    m_cert_challenge_discovered_txt_isValid = ::OpenAPI::fromJsonValue(m_cert_challenge_discovered_txt, json[QString("certChallengeDiscoveredTxt")]);
    m_cert_challenge_discovered_txt_isSet = !json[QString("certChallengeDiscoveredTxt")].isNull() && m_cert_challenge_discovered_txt_isValid;

    m_cert_challenge_dns_isValid = ::OpenAPI::fromJsonValue(m_cert_challenge_dns, json[QString("certChallengeDns")]);
    m_cert_challenge_dns_isSet = !json[QString("certChallengeDns")].isNull() && m_cert_challenge_dns_isValid;

    m_cert_challenge_http_isValid = ::OpenAPI::fromJsonValue(m_cert_challenge_http, json[QString("certChallengeHttp")]);
    m_cert_challenge_http_isSet = !json[QString("certChallengeHttp")].isNull() && m_cert_challenge_http_isValid;

    m_cert_status_isValid = ::OpenAPI::fromJsonValue(m_cert_status, json[QString("certStatus")]);
    m_cert_status_isSet = !json[QString("certStatus")].isNull() && m_cert_status_isValid;

    m_discovered_ips_isValid = ::OpenAPI::fromJsonValue(m_discovered_ips, json[QString("discoveredIps")]);
    m_discovered_ips_isSet = !json[QString("discoveredIps")].isNull() && m_discovered_ips_isValid;

    m_dns_fetch_time_isValid = ::OpenAPI::fromJsonValue(m_dns_fetch_time, json[QString("dnsFetchTime")]);
    m_dns_fetch_time_isSet = !json[QString("dnsFetchTime")].isNull() && m_dns_fetch_time_isValid;

    m_dns_status_isValid = ::OpenAPI::fromJsonValue(m_dns_status, json[QString("dnsStatus")]);
    m_dns_status_isSet = !json[QString("dnsStatus")].isNull() && m_dns_status_isValid;

    m_expected_ips_isValid = ::OpenAPI::fromJsonValue(m_expected_ips, json[QString("expectedIps")]);
    m_expected_ips_isSet = !json[QString("expectedIps")].isNull() && m_expected_ips_isValid;
}

QString OAIDomainProvisioning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainProvisioning::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_challenge_discovered_txt.size() > 0) {
        obj.insert(QString("certChallengeDiscoveredTxt"), ::OpenAPI::toJsonValue(m_cert_challenge_discovered_txt));
    }
    if (m_cert_challenge_dns.isSet()) {
        obj.insert(QString("certChallengeDns"), ::OpenAPI::toJsonValue(m_cert_challenge_dns));
    }
    if (m_cert_challenge_http.isSet()) {
        obj.insert(QString("certChallengeHttp"), ::OpenAPI::toJsonValue(m_cert_challenge_http));
    }
    if (m_cert_status_isSet) {
        obj.insert(QString("certStatus"), ::OpenAPI::toJsonValue(m_cert_status));
    }
    if (m_discovered_ips.size() > 0) {
        obj.insert(QString("discoveredIps"), ::OpenAPI::toJsonValue(m_discovered_ips));
    }
    if (m_dns_fetch_time_isSet) {
        obj.insert(QString("dnsFetchTime"), ::OpenAPI::toJsonValue(m_dns_fetch_time));
    }
    if (m_dns_status_isSet) {
        obj.insert(QString("dnsStatus"), ::OpenAPI::toJsonValue(m_dns_status));
    }
    if (m_expected_ips.size() > 0) {
        obj.insert(QString("expectedIps"), ::OpenAPI::toJsonValue(m_expected_ips));
    }
    return obj;
}

QList<QString> OAIDomainProvisioning::getCertChallengeDiscoveredTxt() const {
    return m_cert_challenge_discovered_txt;
}
void OAIDomainProvisioning::setCertChallengeDiscoveredTxt(const QList<QString> &cert_challenge_discovered_txt) {
    m_cert_challenge_discovered_txt = cert_challenge_discovered_txt;
    m_cert_challenge_discovered_txt_isSet = true;
}

bool OAIDomainProvisioning::is_cert_challenge_discovered_txt_Set() const{
    return m_cert_challenge_discovered_txt_isSet;
}

bool OAIDomainProvisioning::is_cert_challenge_discovered_txt_Valid() const{
    return m_cert_challenge_discovered_txt_isValid;
}

OAICertDnsChallenge OAIDomainProvisioning::getCertChallengeDns() const {
    return m_cert_challenge_dns;
}
void OAIDomainProvisioning::setCertChallengeDns(const OAICertDnsChallenge &cert_challenge_dns) {
    m_cert_challenge_dns = cert_challenge_dns;
    m_cert_challenge_dns_isSet = true;
}

bool OAIDomainProvisioning::is_cert_challenge_dns_Set() const{
    return m_cert_challenge_dns_isSet;
}

bool OAIDomainProvisioning::is_cert_challenge_dns_Valid() const{
    return m_cert_challenge_dns_isValid;
}

OAICertHttpChallenge OAIDomainProvisioning::getCertChallengeHttp() const {
    return m_cert_challenge_http;
}
void OAIDomainProvisioning::setCertChallengeHttp(const OAICertHttpChallenge &cert_challenge_http) {
    m_cert_challenge_http = cert_challenge_http;
    m_cert_challenge_http_isSet = true;
}

bool OAIDomainProvisioning::is_cert_challenge_http_Set() const{
    return m_cert_challenge_http_isSet;
}

bool OAIDomainProvisioning::is_cert_challenge_http_Valid() const{
    return m_cert_challenge_http_isValid;
}

QString OAIDomainProvisioning::getCertStatus() const {
    return m_cert_status;
}
void OAIDomainProvisioning::setCertStatus(const QString &cert_status) {
    m_cert_status = cert_status;
    m_cert_status_isSet = true;
}

bool OAIDomainProvisioning::is_cert_status_Set() const{
    return m_cert_status_isSet;
}

bool OAIDomainProvisioning::is_cert_status_Valid() const{
    return m_cert_status_isValid;
}

QList<QString> OAIDomainProvisioning::getDiscoveredIps() const {
    return m_discovered_ips;
}
void OAIDomainProvisioning::setDiscoveredIps(const QList<QString> &discovered_ips) {
    m_discovered_ips = discovered_ips;
    m_discovered_ips_isSet = true;
}

bool OAIDomainProvisioning::is_discovered_ips_Set() const{
    return m_discovered_ips_isSet;
}

bool OAIDomainProvisioning::is_discovered_ips_Valid() const{
    return m_discovered_ips_isValid;
}

QString OAIDomainProvisioning::getDnsFetchTime() const {
    return m_dns_fetch_time;
}
void OAIDomainProvisioning::setDnsFetchTime(const QString &dns_fetch_time) {
    m_dns_fetch_time = dns_fetch_time;
    m_dns_fetch_time_isSet = true;
}

bool OAIDomainProvisioning::is_dns_fetch_time_Set() const{
    return m_dns_fetch_time_isSet;
}

bool OAIDomainProvisioning::is_dns_fetch_time_Valid() const{
    return m_dns_fetch_time_isValid;
}

QString OAIDomainProvisioning::getDnsStatus() const {
    return m_dns_status;
}
void OAIDomainProvisioning::setDnsStatus(const QString &dns_status) {
    m_dns_status = dns_status;
    m_dns_status_isSet = true;
}

bool OAIDomainProvisioning::is_dns_status_Set() const{
    return m_dns_status_isSet;
}

bool OAIDomainProvisioning::is_dns_status_Valid() const{
    return m_dns_status_isValid;
}

QList<QString> OAIDomainProvisioning::getExpectedIps() const {
    return m_expected_ips;
}
void OAIDomainProvisioning::setExpectedIps(const QList<QString> &expected_ips) {
    m_expected_ips = expected_ips;
    m_expected_ips_isSet = true;
}

bool OAIDomainProvisioning::is_expected_ips_Set() const{
    return m_expected_ips_isSet;
}

bool OAIDomainProvisioning::is_expected_ips_Valid() const{
    return m_expected_ips_isValid;
}

bool OAIDomainProvisioning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_challenge_discovered_txt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_challenge_dns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_challenge_http.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_fetch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expected_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainProvisioning::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
