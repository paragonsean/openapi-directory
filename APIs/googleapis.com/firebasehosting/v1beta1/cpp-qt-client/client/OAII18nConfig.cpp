/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAII18nConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAII18nConfig::OAII18nConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAII18nConfig::OAII18nConfig() {
    this->initializeModel();
}

OAII18nConfig::~OAII18nConfig() {}

void OAII18nConfig::initializeModel() {

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAII18nConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAII18nConfig::fromJsonObject(QJsonObject json) {

    m_root_isValid = ::OpenAPI::fromJsonValue(m_root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAII18nConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAII18nConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(m_root));
    }
    return obj;
}

QString OAII18nConfig::getRoot() const {
    return m_root;
}
void OAII18nConfig::setRoot(const QString &root) {
    m_root = root;
    m_root_isSet = true;
}

bool OAII18nConfig::is_root_Set() const{
    return m_root_isSet;
}

bool OAII18nConfig::is_root_Valid() const{
    return m_root_isValid;
}

bool OAII18nConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAII18nConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
