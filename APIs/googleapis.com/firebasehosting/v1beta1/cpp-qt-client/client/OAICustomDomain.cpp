/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomDomain.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomDomain::OAICustomDomain(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomDomain::OAICustomDomain() {
    this->initializeModel();
}

OAICustomDomain::~OAICustomDomain() {}

void OAICustomDomain::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_cert_isSet = false;
    m_cert_isValid = false;

    m_cert_preference_isSet = false;
    m_cert_preference_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_host_state_isSet = false;
    m_host_state_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_ownership_state_isSet = false;
    m_ownership_state_isValid = false;

    m_reconciling_isSet = false;
    m_reconciling_isValid = false;

    m_redirect_target_isSet = false;
    m_redirect_target_isValid = false;

    m_required_dns_updates_isSet = false;
    m_required_dns_updates_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICustomDomain::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomDomain::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_cert_isValid = ::OpenAPI::fromJsonValue(m_cert, json[QString("cert")]);
    m_cert_isSet = !json[QString("cert")].isNull() && m_cert_isValid;

    m_cert_preference_isValid = ::OpenAPI::fromJsonValue(m_cert_preference, json[QString("certPreference")]);
    m_cert_preference_isSet = !json[QString("certPreference")].isNull() && m_cert_preference_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_host_state_isValid = ::OpenAPI::fromJsonValue(m_host_state, json[QString("hostState")]);
    m_host_state_isSet = !json[QString("hostState")].isNull() && m_host_state_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_ownership_state_isValid = ::OpenAPI::fromJsonValue(m_ownership_state, json[QString("ownershipState")]);
    m_ownership_state_isSet = !json[QString("ownershipState")].isNull() && m_ownership_state_isValid;

    m_reconciling_isValid = ::OpenAPI::fromJsonValue(m_reconciling, json[QString("reconciling")]);
    m_reconciling_isSet = !json[QString("reconciling")].isNull() && m_reconciling_isValid;

    m_redirect_target_isValid = ::OpenAPI::fromJsonValue(m_redirect_target, json[QString("redirectTarget")]);
    m_redirect_target_isSet = !json[QString("redirectTarget")].isNull() && m_redirect_target_isValid;

    m_required_dns_updates_isValid = ::OpenAPI::fromJsonValue(m_required_dns_updates, json[QString("requiredDnsUpdates")]);
    m_required_dns_updates_isSet = !json[QString("requiredDnsUpdates")].isNull() && m_required_dns_updates_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICustomDomain::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomDomain::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_cert.isSet()) {
        obj.insert(QString("cert"), ::OpenAPI::toJsonValue(m_cert));
    }
    if (m_cert_preference_isSet) {
        obj.insert(QString("certPreference"), ::OpenAPI::toJsonValue(m_cert_preference));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_host_state_isSet) {
        obj.insert(QString("hostState"), ::OpenAPI::toJsonValue(m_host_state));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_ownership_state_isSet) {
        obj.insert(QString("ownershipState"), ::OpenAPI::toJsonValue(m_ownership_state));
    }
    if (m_reconciling_isSet) {
        obj.insert(QString("reconciling"), ::OpenAPI::toJsonValue(m_reconciling));
    }
    if (m_redirect_target_isSet) {
        obj.insert(QString("redirectTarget"), ::OpenAPI::toJsonValue(m_redirect_target));
    }
    if (m_required_dns_updates.isSet()) {
        obj.insert(QString("requiredDnsUpdates"), ::OpenAPI::toJsonValue(m_required_dns_updates));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAICustomDomain::getAnnotations() const {
    return m_annotations;
}
void OAICustomDomain::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAICustomDomain::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAICustomDomain::is_annotations_Valid() const{
    return m_annotations_isValid;
}

OAICertificate OAICustomDomain::getCert() const {
    return m_cert;
}
void OAICustomDomain::setCert(const OAICertificate &cert) {
    m_cert = cert;
    m_cert_isSet = true;
}

bool OAICustomDomain::is_cert_Set() const{
    return m_cert_isSet;
}

bool OAICustomDomain::is_cert_Valid() const{
    return m_cert_isValid;
}

QString OAICustomDomain::getCertPreference() const {
    return m_cert_preference;
}
void OAICustomDomain::setCertPreference(const QString &cert_preference) {
    m_cert_preference = cert_preference;
    m_cert_preference_isSet = true;
}

bool OAICustomDomain::is_cert_preference_Set() const{
    return m_cert_preference_isSet;
}

bool OAICustomDomain::is_cert_preference_Valid() const{
    return m_cert_preference_isValid;
}

QString OAICustomDomain::getCreateTime() const {
    return m_create_time;
}
void OAICustomDomain::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAICustomDomain::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAICustomDomain::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAICustomDomain::getDeleteTime() const {
    return m_delete_time;
}
void OAICustomDomain::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAICustomDomain::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAICustomDomain::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAICustomDomain::getEtag() const {
    return m_etag;
}
void OAICustomDomain::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAICustomDomain::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAICustomDomain::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAICustomDomain::getExpireTime() const {
    return m_expire_time;
}
void OAICustomDomain::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAICustomDomain::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAICustomDomain::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAICustomDomain::getHostState() const {
    return m_host_state;
}
void OAICustomDomain::setHostState(const QString &host_state) {
    m_host_state = host_state;
    m_host_state_isSet = true;
}

bool OAICustomDomain::is_host_state_Set() const{
    return m_host_state_isSet;
}

bool OAICustomDomain::is_host_state_Valid() const{
    return m_host_state_isValid;
}

QList<OAIStatus> OAICustomDomain::getIssues() const {
    return m_issues;
}
void OAICustomDomain::setIssues(const QList<OAIStatus> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAICustomDomain::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAICustomDomain::is_issues_Valid() const{
    return m_issues_isValid;
}

QMap<QString, QString> OAICustomDomain::getLabels() const {
    return m_labels;
}
void OAICustomDomain::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAICustomDomain::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAICustomDomain::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAICustomDomain::getName() const {
    return m_name;
}
void OAICustomDomain::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomDomain::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomDomain::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICustomDomain::getOwnershipState() const {
    return m_ownership_state;
}
void OAICustomDomain::setOwnershipState(const QString &ownership_state) {
    m_ownership_state = ownership_state;
    m_ownership_state_isSet = true;
}

bool OAICustomDomain::is_ownership_state_Set() const{
    return m_ownership_state_isSet;
}

bool OAICustomDomain::is_ownership_state_Valid() const{
    return m_ownership_state_isValid;
}

bool OAICustomDomain::isReconciling() const {
    return m_reconciling;
}
void OAICustomDomain::setReconciling(const bool &reconciling) {
    m_reconciling = reconciling;
    m_reconciling_isSet = true;
}

bool OAICustomDomain::is_reconciling_Set() const{
    return m_reconciling_isSet;
}

bool OAICustomDomain::is_reconciling_Valid() const{
    return m_reconciling_isValid;
}

QString OAICustomDomain::getRedirectTarget() const {
    return m_redirect_target;
}
void OAICustomDomain::setRedirectTarget(const QString &redirect_target) {
    m_redirect_target = redirect_target;
    m_redirect_target_isSet = true;
}

bool OAICustomDomain::is_redirect_target_Set() const{
    return m_redirect_target_isSet;
}

bool OAICustomDomain::is_redirect_target_Valid() const{
    return m_redirect_target_isValid;
}

OAIDnsUpdates OAICustomDomain::getRequiredDnsUpdates() const {
    return m_required_dns_updates;
}
void OAICustomDomain::setRequiredDnsUpdates(const OAIDnsUpdates &required_dns_updates) {
    m_required_dns_updates = required_dns_updates;
    m_required_dns_updates_isSet = true;
}

bool OAICustomDomain::is_required_dns_updates_Set() const{
    return m_required_dns_updates_isSet;
}

bool OAICustomDomain::is_required_dns_updates_Valid() const{
    return m_required_dns_updates_isValid;
}

QString OAICustomDomain::getUpdateTime() const {
    return m_update_time;
}
void OAICustomDomain::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICustomDomain::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICustomDomain::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICustomDomain::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_preference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_dns_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomDomain::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
