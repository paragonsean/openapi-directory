/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionFile::OAIVersionFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionFile::OAIVersionFile() {
    this->initializeModel();
}

OAIVersionFile::~OAIVersionFile() {}

void OAIVersionFile::initializeModel() {

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIVersionFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionFile::fromJsonObject(QJsonObject json) {

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIVersionFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionFile::asJsonObject() const {
    QJsonObject obj;
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIVersionFile::getHash() const {
    return m_hash;
}
void OAIVersionFile::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIVersionFile::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIVersionFile::is_hash_Valid() const{
    return m_hash_isValid;
}

QString OAIVersionFile::getPath() const {
    return m_path;
}
void OAIVersionFile::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVersionFile::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVersionFile::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIVersionFile::getStatus() const {
    return m_status;
}
void OAIVersionFile::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVersionFile::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVersionFile::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIVersionFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
