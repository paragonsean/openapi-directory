/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteConfig::OAISiteConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteConfig::OAISiteConfig() {
    this->initializeModel();
}

OAISiteConfig::~OAISiteConfig() {}

void OAISiteConfig::initializeModel() {

    m_cloud_logging_enabled_isSet = false;
    m_cloud_logging_enabled_isValid = false;

    m_max_versions_isSet = false;
    m_max_versions_isValid = false;
}

void OAISiteConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteConfig::fromJsonObject(QJsonObject json) {

    m_cloud_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_cloud_logging_enabled, json[QString("cloudLoggingEnabled")]);
    m_cloud_logging_enabled_isSet = !json[QString("cloudLoggingEnabled")].isNull() && m_cloud_logging_enabled_isValid;

    m_max_versions_isValid = ::OpenAPI::fromJsonValue(m_max_versions, json[QString("maxVersions")]);
    m_max_versions_isSet = !json[QString("maxVersions")].isNull() && m_max_versions_isValid;
}

QString OAISiteConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_logging_enabled_isSet) {
        obj.insert(QString("cloudLoggingEnabled"), ::OpenAPI::toJsonValue(m_cloud_logging_enabled));
    }
    if (m_max_versions_isSet) {
        obj.insert(QString("maxVersions"), ::OpenAPI::toJsonValue(m_max_versions));
    }
    return obj;
}

bool OAISiteConfig::isCloudLoggingEnabled() const {
    return m_cloud_logging_enabled;
}
void OAISiteConfig::setCloudLoggingEnabled(const bool &cloud_logging_enabled) {
    m_cloud_logging_enabled = cloud_logging_enabled;
    m_cloud_logging_enabled_isSet = true;
}

bool OAISiteConfig::is_cloud_logging_enabled_Set() const{
    return m_cloud_logging_enabled_isSet;
}

bool OAISiteConfig::is_cloud_logging_enabled_Valid() const{
    return m_cloud_logging_enabled_isValid;
}

QString OAISiteConfig::getMaxVersions() const {
    return m_max_versions;
}
void OAISiteConfig::setMaxVersions(const QString &max_versions) {
    m_max_versions = max_versions;
    m_max_versions_isSet = true;
}

bool OAISiteConfig::is_max_versions_Set() const{
    return m_max_versions_isSet;
}

bool OAISiteConfig::is_max_versions_Valid() const{
    return m_max_versions_isValid;
}

bool OAISiteConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_versions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
