/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersion::OAIVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersion::OAIVersion() {
    this->initializeModel();
}

OAIVersion::~OAIVersion() {}

void OAIVersion::initializeModel() {

    m_config_isSet = false;
    m_config_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_create_user_isSet = false;
    m_create_user_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_delete_user_isSet = false;
    m_delete_user_isValid = false;

    m_file_count_isSet = false;
    m_file_count_isValid = false;

    m_finalize_time_isSet = false;
    m_finalize_time_isValid = false;

    m_finalize_user_isSet = false;
    m_finalize_user_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_bytes_isSet = false;
    m_version_bytes_isValid = false;
}

void OAIVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersion::fromJsonObject(QJsonObject json) {

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_create_user_isValid = ::OpenAPI::fromJsonValue(m_create_user, json[QString("createUser")]);
    m_create_user_isSet = !json[QString("createUser")].isNull() && m_create_user_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_delete_user_isValid = ::OpenAPI::fromJsonValue(m_delete_user, json[QString("deleteUser")]);
    m_delete_user_isSet = !json[QString("deleteUser")].isNull() && m_delete_user_isValid;

    m_file_count_isValid = ::OpenAPI::fromJsonValue(m_file_count, json[QString("fileCount")]);
    m_file_count_isSet = !json[QString("fileCount")].isNull() && m_file_count_isValid;

    m_finalize_time_isValid = ::OpenAPI::fromJsonValue(m_finalize_time, json[QString("finalizeTime")]);
    m_finalize_time_isSet = !json[QString("finalizeTime")].isNull() && m_finalize_time_isValid;

    m_finalize_user_isValid = ::OpenAPI::fromJsonValue(m_finalize_user, json[QString("finalizeUser")]);
    m_finalize_user_isSet = !json[QString("finalizeUser")].isNull() && m_finalize_user_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_bytes_isValid = ::OpenAPI::fromJsonValue(m_version_bytes, json[QString("versionBytes")]);
    m_version_bytes_isSet = !json[QString("versionBytes")].isNull() && m_version_bytes_isValid;
}

QString OAIVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_create_user.isSet()) {
        obj.insert(QString("createUser"), ::OpenAPI::toJsonValue(m_create_user));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_delete_user.isSet()) {
        obj.insert(QString("deleteUser"), ::OpenAPI::toJsonValue(m_delete_user));
    }
    if (m_file_count_isSet) {
        obj.insert(QString("fileCount"), ::OpenAPI::toJsonValue(m_file_count));
    }
    if (m_finalize_time_isSet) {
        obj.insert(QString("finalizeTime"), ::OpenAPI::toJsonValue(m_finalize_time));
    }
    if (m_finalize_user.isSet()) {
        obj.insert(QString("finalizeUser"), ::OpenAPI::toJsonValue(m_finalize_user));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_bytes_isSet) {
        obj.insert(QString("versionBytes"), ::OpenAPI::toJsonValue(m_version_bytes));
    }
    return obj;
}

OAIServingConfig OAIVersion::getConfig() const {
    return m_config;
}
void OAIVersion::setConfig(const OAIServingConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIVersion::is_config_Set() const{
    return m_config_isSet;
}

bool OAIVersion::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIVersion::getCreateTime() const {
    return m_create_time;
}
void OAIVersion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIVersion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIVersion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIActingUser OAIVersion::getCreateUser() const {
    return m_create_user;
}
void OAIVersion::setCreateUser(const OAIActingUser &create_user) {
    m_create_user = create_user;
    m_create_user_isSet = true;
}

bool OAIVersion::is_create_user_Set() const{
    return m_create_user_isSet;
}

bool OAIVersion::is_create_user_Valid() const{
    return m_create_user_isValid;
}

QString OAIVersion::getDeleteTime() const {
    return m_delete_time;
}
void OAIVersion::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIVersion::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIVersion::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

OAIActingUser OAIVersion::getDeleteUser() const {
    return m_delete_user;
}
void OAIVersion::setDeleteUser(const OAIActingUser &delete_user) {
    m_delete_user = delete_user;
    m_delete_user_isSet = true;
}

bool OAIVersion::is_delete_user_Set() const{
    return m_delete_user_isSet;
}

bool OAIVersion::is_delete_user_Valid() const{
    return m_delete_user_isValid;
}

QString OAIVersion::getFileCount() const {
    return m_file_count;
}
void OAIVersion::setFileCount(const QString &file_count) {
    m_file_count = file_count;
    m_file_count_isSet = true;
}

bool OAIVersion::is_file_count_Set() const{
    return m_file_count_isSet;
}

bool OAIVersion::is_file_count_Valid() const{
    return m_file_count_isValid;
}

QString OAIVersion::getFinalizeTime() const {
    return m_finalize_time;
}
void OAIVersion::setFinalizeTime(const QString &finalize_time) {
    m_finalize_time = finalize_time;
    m_finalize_time_isSet = true;
}

bool OAIVersion::is_finalize_time_Set() const{
    return m_finalize_time_isSet;
}

bool OAIVersion::is_finalize_time_Valid() const{
    return m_finalize_time_isValid;
}

OAIActingUser OAIVersion::getFinalizeUser() const {
    return m_finalize_user;
}
void OAIVersion::setFinalizeUser(const OAIActingUser &finalize_user) {
    m_finalize_user = finalize_user;
    m_finalize_user_isSet = true;
}

bool OAIVersion::is_finalize_user_Set() const{
    return m_finalize_user_isSet;
}

bool OAIVersion::is_finalize_user_Valid() const{
    return m_finalize_user_isValid;
}

QMap<QString, QString> OAIVersion::getLabels() const {
    return m_labels;
}
void OAIVersion::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIVersion::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIVersion::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIVersion::getName() const {
    return m_name;
}
void OAIVersion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVersion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVersion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIVersion::getStatus() const {
    return m_status;
}
void OAIVersion::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVersion::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVersion::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVersion::getVersionBytes() const {
    return m_version_bytes;
}
void OAIVersion::setVersionBytes(const QString &version_bytes) {
    m_version_bytes = version_bytes;
    m_version_bytes_isSet = true;
}

bool OAIVersion::is_version_bytes_Set() const{
    return m_version_bytes_isSet;
}

bool OAIVersion::is_version_bytes_Valid() const{
    return m_version_bytes_isValid;
}

bool OAIVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finalize_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finalize_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
