/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecord::OAIDnsRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecord::OAIDnsRecord() {
    this->initializeModel();
}

OAIDnsRecord::~OAIDnsRecord() {}

void OAIDnsRecord::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_rdata_isSet = false;
    m_rdata_isValid = false;

    m_required_action_isSet = false;
    m_required_action_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDnsRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecord::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_rdata_isValid = ::OpenAPI::fromJsonValue(m_rdata, json[QString("rdata")]);
    m_rdata_isSet = !json[QString("rdata")].isNull() && m_rdata_isValid;

    m_required_action_isValid = ::OpenAPI::fromJsonValue(m_required_action, json[QString("requiredAction")]);
    m_required_action_isSet = !json[QString("requiredAction")].isNull() && m_required_action_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDnsRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_rdata_isSet) {
        obj.insert(QString("rdata"), ::OpenAPI::toJsonValue(m_rdata));
    }
    if (m_required_action_isSet) {
        obj.insert(QString("requiredAction"), ::OpenAPI::toJsonValue(m_required_action));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDnsRecord::getDomainName() const {
    return m_domain_name;
}
void OAIDnsRecord::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDnsRecord::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDnsRecord::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIDnsRecord::getRdata() const {
    return m_rdata;
}
void OAIDnsRecord::setRdata(const QString &rdata) {
    m_rdata = rdata;
    m_rdata_isSet = true;
}

bool OAIDnsRecord::is_rdata_Set() const{
    return m_rdata_isSet;
}

bool OAIDnsRecord::is_rdata_Valid() const{
    return m_rdata_isValid;
}

QString OAIDnsRecord::getRequiredAction() const {
    return m_required_action;
}
void OAIDnsRecord::setRequiredAction(const QString &required_action) {
    m_required_action = required_action;
    m_required_action_isSet = true;
}

bool OAIDnsRecord::is_required_action_Set() const{
    return m_required_action_isSet;
}

bool OAIDnsRecord::is_required_action_Valid() const{
    return m_required_action_isValid;
}

QString OAIDnsRecord::getType() const {
    return m_type;
}
void OAIDnsRecord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsRecord::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDnsRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
