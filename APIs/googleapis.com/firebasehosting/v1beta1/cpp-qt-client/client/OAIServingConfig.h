/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServingConfig.h
 *
 * The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
 */

#ifndef OAIServingConfig_H
#define OAIServingConfig_H

#include <QJsonObject>

#include "OAIHeader.h"
#include "OAII18nConfig.h"
#include "OAIRedirect.h"
#include "OAIRewrite.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIHeader;
class OAII18nConfig;
class OAIRedirect;
class OAIRewrite;

class OAIServingConfig : public OAIObject {
public:
    OAIServingConfig();
    OAIServingConfig(QString json);
    ~OAIServingConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAppAssociation() const;
    void setAppAssociation(const QString &app_association);
    bool is_app_association_Set() const;
    bool is_app_association_Valid() const;

    bool isCleanUrls() const;
    void setCleanUrls(const bool &clean_urls);
    bool is_clean_urls_Set() const;
    bool is_clean_urls_Valid() const;

    QList<OAIHeader> getHeaders() const;
    void setHeaders(const QList<OAIHeader> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    OAII18nConfig getI18n() const;
    void setI18n(const OAII18nConfig &i18n);
    bool is_i18n_Set() const;
    bool is_i18n_Valid() const;

    QList<OAIRedirect> getRedirects() const;
    void setRedirects(const QList<OAIRedirect> &redirects);
    bool is_redirects_Set() const;
    bool is_redirects_Valid() const;

    QList<OAIRewrite> getRewrites() const;
    void setRewrites(const QList<OAIRewrite> &rewrites);
    bool is_rewrites_Set() const;
    bool is_rewrites_Valid() const;

    QString getTrailingSlashBehavior() const;
    void setTrailingSlashBehavior(const QString &trailing_slash_behavior);
    bool is_trailing_slash_behavior_Set() const;
    bool is_trailing_slash_behavior_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_app_association;
    bool m_app_association_isSet;
    bool m_app_association_isValid;

    bool m_clean_urls;
    bool m_clean_urls_isSet;
    bool m_clean_urls_isValid;

    QList<OAIHeader> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    OAII18nConfig m_i18n;
    bool m_i18n_isSet;
    bool m_i18n_isValid;

    QList<OAIRedirect> m_redirects;
    bool m_redirects_isSet;
    bool m_redirects_isValid;

    QList<OAIRewrite> m_rewrites;
    bool m_rewrites_isSet;
    bool m_rewrites_isValid;

    QString m_trailing_slash_behavior;
    bool m_trailing_slash_behavior_isSet;
    bool m_trailing_slash_behavior_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServingConfig)

#endif // OAIServingConfig_H
