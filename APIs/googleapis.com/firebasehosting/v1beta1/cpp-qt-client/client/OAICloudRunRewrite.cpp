/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloudRunRewrite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloudRunRewrite::OAICloudRunRewrite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloudRunRewrite::OAICloudRunRewrite() {
    this->initializeModel();
}

OAICloudRunRewrite::~OAICloudRunRewrite() {}

void OAICloudRunRewrite::initializeModel() {

    m_region_isSet = false;
    m_region_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAICloudRunRewrite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloudRunRewrite::fromJsonObject(QJsonObject json) {

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("serviceId")]);
    m_service_id_isSet = !json[QString("serviceId")].isNull() && m_service_id_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAICloudRunRewrite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloudRunRewrite::asJsonObject() const {
    QJsonObject obj;
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("serviceId"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAICloudRunRewrite::getRegion() const {
    return m_region;
}
void OAICloudRunRewrite::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAICloudRunRewrite::is_region_Set() const{
    return m_region_isSet;
}

bool OAICloudRunRewrite::is_region_Valid() const{
    return m_region_isValid;
}

QString OAICloudRunRewrite::getServiceId() const {
    return m_service_id;
}
void OAICloudRunRewrite::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAICloudRunRewrite::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAICloudRunRewrite::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAICloudRunRewrite::getTag() const {
    return m_tag;
}
void OAICloudRunRewrite::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAICloudRunRewrite::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAICloudRunRewrite::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAICloudRunRewrite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloudRunRewrite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
