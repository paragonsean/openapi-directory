/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVersion.h
 *
 * A &#x60;Version&#x60; is a configuration and a collection of static files which determine how a site is displayed.
 */

#ifndef OAIVersion_H
#define OAIVersion_H

#include <QJsonObject>

#include "OAIActingUser.h"
#include "OAIServingConfig.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServingConfig;
class OAIActingUser;

class OAIVersion : public OAIObject {
public:
    OAIVersion();
    OAIVersion(QString json);
    ~OAIVersion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIServingConfig getConfig() const;
    void setConfig(const OAIServingConfig &config);
    bool is_config_Set() const;
    bool is_config_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAIActingUser getCreateUser() const;
    void setCreateUser(const OAIActingUser &create_user);
    bool is_create_user_Set() const;
    bool is_create_user_Valid() const;

    QString getDeleteTime() const;
    void setDeleteTime(const QString &delete_time);
    bool is_delete_time_Set() const;
    bool is_delete_time_Valid() const;

    OAIActingUser getDeleteUser() const;
    void setDeleteUser(const OAIActingUser &delete_user);
    bool is_delete_user_Set() const;
    bool is_delete_user_Valid() const;

    QString getFileCount() const;
    void setFileCount(const QString &file_count);
    bool is_file_count_Set() const;
    bool is_file_count_Valid() const;

    QString getFinalizeTime() const;
    void setFinalizeTime(const QString &finalize_time);
    bool is_finalize_time_Set() const;
    bool is_finalize_time_Valid() const;

    OAIActingUser getFinalizeUser() const;
    void setFinalizeUser(const OAIActingUser &finalize_user);
    bool is_finalize_user_Set() const;
    bool is_finalize_user_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getVersionBytes() const;
    void setVersionBytes(const QString &version_bytes);
    bool is_version_bytes_Set() const;
    bool is_version_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIServingConfig m_config;
    bool m_config_isSet;
    bool m_config_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAIActingUser m_create_user;
    bool m_create_user_isSet;
    bool m_create_user_isValid;

    QString m_delete_time;
    bool m_delete_time_isSet;
    bool m_delete_time_isValid;

    OAIActingUser m_delete_user;
    bool m_delete_user_isSet;
    bool m_delete_user_isValid;

    QString m_file_count;
    bool m_file_count_isSet;
    bool m_file_count_isValid;

    QString m_finalize_time;
    bool m_finalize_time_isSet;
    bool m_finalize_time_isValid;

    OAIActingUser m_finalize_user;
    bool m_finalize_user_isSet;
    bool m_finalize_user_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_version_bytes;
    bool m_version_bytes_isSet;
    bool m_version_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVersion)

#endif // OAIVersion_H
