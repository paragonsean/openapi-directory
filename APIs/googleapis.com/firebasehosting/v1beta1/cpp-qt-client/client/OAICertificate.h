/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICertificate.h
 *
 * An SSL certificate used to provide end-to-end encryption for requests against your domain name. A &#x60;Certificate&#x60; can be an actual SSL certificate or, for newly-created custom domains, Hosting&#39;s intent to create one.
 */

#ifndef OAICertificate_H
#define OAICertificate_H

#include <QJsonObject>

#include "OAICertVerification.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;
class OAICertVerification;

class OAICertificate : public OAIObject {
public:
    OAICertificate();
    OAICertificate(QString json);
    ~OAICertificate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QList<OAIStatus> getIssues() const;
    void setIssues(const QList<OAIStatus> &issues);
    bool is_issues_Set() const;
    bool is_issues_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAICertVerification getVerification() const;
    void setVerification(const OAICertVerification &verification);
    bool is_verification_Set() const;
    bool is_verification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QList<OAIStatus> m_issues;
    bool m_issues_isSet;
    bool m_issues_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAICertVerification m_verification;
    bool m_verification_isSet;
    bool m_verification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICertificate)

#endif // OAICertificate_H
