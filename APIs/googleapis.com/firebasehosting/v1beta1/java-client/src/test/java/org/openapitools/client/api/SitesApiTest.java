/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.CloneVersionRequest;
import org.openapitools.client.model.Domain;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListDomainsResponse;
import org.openapitools.client.model.ListReleasesResponse;
import org.openapitools.client.model.ListVersionFilesResponse;
import org.openapitools.client.model.ListVersionsResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PopulateVersionFilesRequest;
import org.openapitools.client.model.PopulateVersionFilesResponse;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.Version;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SitesApi
 */
@Disabled
public class SitesApiTest {

    private final SitesApi api = new SitesApi();

    /**
     * Creates a new channel in the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesChannelsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String channelId = null;
        Channel channel = null;
        Channel response = api.firebasehostingSitesChannelsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, channelId, channel);
        // TODO: test validations
    }

    /**
     * Lists the channels for the specified site. All sites have a default &#x60;live&#x60; channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesChannelsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListChannelsResponse response = api.firebasehostingSitesChannelsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a domain mapping on the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesDomainsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Domain domain = null;
        Domain response = api.firebasehostingSitesDomainsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, domain);
        // TODO: test validations
    }

    /**
     * Lists the domains for the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesDomainsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDomainsResponse response = api.firebasehostingSitesDomainsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the specified domain mapping, creating the mapping as if it does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesDomainsUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Domain domain = null;
        Domain response = api.firebasehostingSitesDomainsUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, domain);
        // TODO: test validations
    }

    /**
     * Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesReleasesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String versionName = null;
        Release release = null;
        Release response = api.firebasehostingSitesReleasesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, versionName, release);
        // TODO: test validations
    }

    /**
     * Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default &#x60;live&#x60; channel and any active preview channels for the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesReleasesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReleasesResponse response = api.firebasehostingSitesReleasesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new version on the specified target site using the content of the specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsCloneTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CloneVersionRequest cloneVersionRequest = null;
        Operation response = api.firebasehostingSitesVersionsClone(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, cloneVersionRequest);
        // TODO: test validations
    }

    /**
     * Creates a new version for the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String sizeBytes = null;
        String versionId = null;
        Version version = null;
        Version response = api.firebasehostingSitesVersionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sizeBytes, versionId, version);
        // TODO: test validations
    }

    /**
     * Deletes the specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String etag = null;
        Boolean validateOnly = null;
        Object response = api.firebasehostingSitesVersionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, etag, validateOnly);
        // TODO: test validations
    }

    /**
     * Lists the remaining files to be uploaded for the specified version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsFilesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String status = null;
        ListVersionFilesResponse response = api.firebasehostingSitesVersionsFilesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, status);
        // TODO: test validations
    }

    /**
     * Get the specified version that has been created for the specified site. This can include versions that were created for the default &#x60;live&#x60; channel or for any active preview channels for the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Version response = api.firebasehostingSitesVersionsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the versions that have been created for the specified site. This list includes versions for both the default &#x60;live&#x60; channel and any active preview channels for the specified site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVersionsResponse response = api.firebasehostingSitesVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     *  Updates the specified metadata for the specified version. This method will fail with &#x60;FAILED_PRECONDITION&#x60; in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from &#x60;CREATED&#x60; to &#x60;FINALIZED&#x60;. Use [&#x60;DeleteVersion&#x60;](delete) to set the status of a version to &#x60;DELETED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Boolean validateOnly = null;
        Version version = null;
        Version response = api.firebasehostingSitesVersionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, validateOnly, version);
        // TODO: test validations
    }

    /**
     *  Adds content files to the specified version. Each file must be under 2 GB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firebasehostingSitesVersionsPopulateFilesTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PopulateVersionFilesRequest populateVersionFilesRequest = null;
        PopulateVersionFilesResponse response = api.firebasehostingSitesVersionsPopulateFiles(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, populateVersionFilesRequest);
        // TODO: test validations
    }

}
