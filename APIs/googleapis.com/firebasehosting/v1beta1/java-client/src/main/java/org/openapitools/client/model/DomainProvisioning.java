/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertDnsChallenge;
import org.openapitools.client.model.CertHttpChallenge;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The current certificate provisioning status information for a domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainProvisioning {
  public static final String SERIALIZED_NAME_CERT_CHALLENGE_DISCOVERED_TXT = "certChallengeDiscoveredTxt";
  @SerializedName(SERIALIZED_NAME_CERT_CHALLENGE_DISCOVERED_TXT)
  private List<String> certChallengeDiscoveredTxt = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERT_CHALLENGE_DNS = "certChallengeDns";
  @SerializedName(SERIALIZED_NAME_CERT_CHALLENGE_DNS)
  private CertDnsChallenge certChallengeDns;

  public static final String SERIALIZED_NAME_CERT_CHALLENGE_HTTP = "certChallengeHttp";
  @SerializedName(SERIALIZED_NAME_CERT_CHALLENGE_HTTP)
  private CertHttpChallenge certChallengeHttp;

  /**
   * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
   */
  @JsonAdapter(CertStatusEnum.Adapter.class)
  public enum CertStatusEnum {
    STATUS_UNSPECIFIED("CERT_STATUS_UNSPECIFIED"),
    
    PENDING("CERT_PENDING"),
    
    MISSING("CERT_MISSING"),
    
    PROCESSING("CERT_PROCESSING"),
    
    PROPAGATING("CERT_PROPAGATING"),
    
    ACTIVE("CERT_ACTIVE"),
    
    ERROR("CERT_ERROR");

    private String value;

    CertStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertStatusEnum fromValue(String value) {
      for (CertStatusEnum b : CertStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERT_STATUS = "certStatus";
  @SerializedName(SERIALIZED_NAME_CERT_STATUS)
  private CertStatusEnum certStatus;

  public static final String SERIALIZED_NAME_DISCOVERED_IPS = "discoveredIps";
  @SerializedName(SERIALIZED_NAME_DISCOVERED_IPS)
  private List<String> discoveredIps = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_FETCH_TIME = "dnsFetchTime";
  @SerializedName(SERIALIZED_NAME_DNS_FETCH_TIME)
  private String dnsFetchTime;

  /**
   * The DNS record match status as of the last DNS fetch.
   */
  @JsonAdapter(DnsStatusEnum.Adapter.class)
  public enum DnsStatusEnum {
    STATUS_UNSPECIFIED("DNS_STATUS_UNSPECIFIED"),
    
    PENDING("DNS_PENDING"),
    
    MISSING("DNS_MISSING"),
    
    PARTIAL_MATCH("DNS_PARTIAL_MATCH"),
    
    MATCH("DNS_MATCH"),
    
    EXTRANEOUS_MATCH("DNS_EXTRANEOUS_MATCH");

    private String value;

    DnsStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnsStatusEnum fromValue(String value) {
      for (DnsStatusEnum b : DnsStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DnsStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnsStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnsStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DnsStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DnsStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DNS_STATUS = "dnsStatus";
  @SerializedName(SERIALIZED_NAME_DNS_STATUS)
  private DnsStatusEnum dnsStatus;

  public static final String SERIALIZED_NAME_EXPECTED_IPS = "expectedIps";
  @SerializedName(SERIALIZED_NAME_EXPECTED_IPS)
  private List<String> expectedIps = new ArrayList<>();

  public DomainProvisioning() {
  }

  public DomainProvisioning certChallengeDiscoveredTxt(List<String> certChallengeDiscoveredTxt) {
    this.certChallengeDiscoveredTxt = certChallengeDiscoveredTxt;
    return this;
  }

  public DomainProvisioning addCertChallengeDiscoveredTxtItem(String certChallengeDiscoveredTxtItem) {
    if (this.certChallengeDiscoveredTxt == null) {
      this.certChallengeDiscoveredTxt = new ArrayList<>();
    }
    this.certChallengeDiscoveredTxt.add(certChallengeDiscoveredTxtItem);
    return this;
  }

  /**
   * The TXT records (for the certificate challenge) that were found at the last DNS fetch.
   * @return certChallengeDiscoveredTxt
   */
  @javax.annotation.Nullable
  public List<String> getCertChallengeDiscoveredTxt() {
    return certChallengeDiscoveredTxt;
  }

  public void setCertChallengeDiscoveredTxt(List<String> certChallengeDiscoveredTxt) {
    this.certChallengeDiscoveredTxt = certChallengeDiscoveredTxt;
  }


  public DomainProvisioning certChallengeDns(CertDnsChallenge certChallengeDns) {
    this.certChallengeDns = certChallengeDns;
    return this;
  }

  /**
   * Get certChallengeDns
   * @return certChallengeDns
   */
  @javax.annotation.Nullable
  public CertDnsChallenge getCertChallengeDns() {
    return certChallengeDns;
  }

  public void setCertChallengeDns(CertDnsChallenge certChallengeDns) {
    this.certChallengeDns = certChallengeDns;
  }


  public DomainProvisioning certChallengeHttp(CertHttpChallenge certChallengeHttp) {
    this.certChallengeHttp = certChallengeHttp;
    return this;
  }

  /**
   * Get certChallengeHttp
   * @return certChallengeHttp
   */
  @javax.annotation.Nullable
  public CertHttpChallenge getCertChallengeHttp() {
    return certChallengeHttp;
  }

  public void setCertChallengeHttp(CertHttpChallenge certChallengeHttp) {
    this.certChallengeHttp = certChallengeHttp;
  }


  public DomainProvisioning certStatus(CertStatusEnum certStatus) {
    this.certStatus = certStatus;
    return this;
  }

  /**
   * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
   * @return certStatus
   */
  @javax.annotation.Nullable
  public CertStatusEnum getCertStatus() {
    return certStatus;
  }

  public void setCertStatus(CertStatusEnum certStatus) {
    this.certStatus = certStatus;
  }


  public DomainProvisioning discoveredIps(List<String> discoveredIps) {
    this.discoveredIps = discoveredIps;
    return this;
  }

  public DomainProvisioning addDiscoveredIpsItem(String discoveredIpsItem) {
    if (this.discoveredIps == null) {
      this.discoveredIps = new ArrayList<>();
    }
    this.discoveredIps.add(discoveredIpsItem);
    return this;
  }

  /**
   * The IPs found at the last DNS fetch.
   * @return discoveredIps
   */
  @javax.annotation.Nullable
  public List<String> getDiscoveredIps() {
    return discoveredIps;
  }

  public void setDiscoveredIps(List<String> discoveredIps) {
    this.discoveredIps = discoveredIps;
  }


  public DomainProvisioning dnsFetchTime(String dnsFetchTime) {
    this.dnsFetchTime = dnsFetchTime;
    return this;
  }

  /**
   * The time at which the last DNS fetch occurred.
   * @return dnsFetchTime
   */
  @javax.annotation.Nullable
  public String getDnsFetchTime() {
    return dnsFetchTime;
  }

  public void setDnsFetchTime(String dnsFetchTime) {
    this.dnsFetchTime = dnsFetchTime;
  }


  public DomainProvisioning dnsStatus(DnsStatusEnum dnsStatus) {
    this.dnsStatus = dnsStatus;
    return this;
  }

  /**
   * The DNS record match status as of the last DNS fetch.
   * @return dnsStatus
   */
  @javax.annotation.Nullable
  public DnsStatusEnum getDnsStatus() {
    return dnsStatus;
  }

  public void setDnsStatus(DnsStatusEnum dnsStatus) {
    this.dnsStatus = dnsStatus;
  }


  public DomainProvisioning expectedIps(List<String> expectedIps) {
    this.expectedIps = expectedIps;
    return this;
  }

  public DomainProvisioning addExpectedIpsItem(String expectedIpsItem) {
    if (this.expectedIps == null) {
      this.expectedIps = new ArrayList<>();
    }
    this.expectedIps.add(expectedIpsItem);
    return this;
  }

  /**
   * The list of IPs to which the domain is expected to resolve.
   * @return expectedIps
   */
  @javax.annotation.Nullable
  public List<String> getExpectedIps() {
    return expectedIps;
  }

  public void setExpectedIps(List<String> expectedIps) {
    this.expectedIps = expectedIps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainProvisioning domainProvisioning = (DomainProvisioning) o;
    return Objects.equals(this.certChallengeDiscoveredTxt, domainProvisioning.certChallengeDiscoveredTxt) &&
        Objects.equals(this.certChallengeDns, domainProvisioning.certChallengeDns) &&
        Objects.equals(this.certChallengeHttp, domainProvisioning.certChallengeHttp) &&
        Objects.equals(this.certStatus, domainProvisioning.certStatus) &&
        Objects.equals(this.discoveredIps, domainProvisioning.discoveredIps) &&
        Objects.equals(this.dnsFetchTime, domainProvisioning.dnsFetchTime) &&
        Objects.equals(this.dnsStatus, domainProvisioning.dnsStatus) &&
        Objects.equals(this.expectedIps, domainProvisioning.expectedIps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certChallengeDiscoveredTxt, certChallengeDns, certChallengeHttp, certStatus, discoveredIps, dnsFetchTime, dnsStatus, expectedIps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainProvisioning {\n");
    sb.append("    certChallengeDiscoveredTxt: ").append(toIndentedString(certChallengeDiscoveredTxt)).append("\n");
    sb.append("    certChallengeDns: ").append(toIndentedString(certChallengeDns)).append("\n");
    sb.append("    certChallengeHttp: ").append(toIndentedString(certChallengeHttp)).append("\n");
    sb.append("    certStatus: ").append(toIndentedString(certStatus)).append("\n");
    sb.append("    discoveredIps: ").append(toIndentedString(discoveredIps)).append("\n");
    sb.append("    dnsFetchTime: ").append(toIndentedString(dnsFetchTime)).append("\n");
    sb.append("    dnsStatus: ").append(toIndentedString(dnsStatus)).append("\n");
    sb.append("    expectedIps: ").append(toIndentedString(expectedIps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certChallengeDiscoveredTxt");
    openapiFields.add("certChallengeDns");
    openapiFields.add("certChallengeHttp");
    openapiFields.add("certStatus");
    openapiFields.add("discoveredIps");
    openapiFields.add("dnsFetchTime");
    openapiFields.add("dnsStatus");
    openapiFields.add("expectedIps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainProvisioning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainProvisioning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainProvisioning is not found in the empty JSON string", DomainProvisioning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainProvisioning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainProvisioning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("certChallengeDiscoveredTxt") != null && !jsonObj.get("certChallengeDiscoveredTxt").isJsonNull() && !jsonObj.get("certChallengeDiscoveredTxt").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certChallengeDiscoveredTxt` to be an array in the JSON string but got `%s`", jsonObj.get("certChallengeDiscoveredTxt").toString()));
      }
      // validate the optional field `certChallengeDns`
      if (jsonObj.get("certChallengeDns") != null && !jsonObj.get("certChallengeDns").isJsonNull()) {
        CertDnsChallenge.validateJsonElement(jsonObj.get("certChallengeDns"));
      }
      // validate the optional field `certChallengeHttp`
      if (jsonObj.get("certChallengeHttp") != null && !jsonObj.get("certChallengeHttp").isJsonNull()) {
        CertHttpChallenge.validateJsonElement(jsonObj.get("certChallengeHttp"));
      }
      if ((jsonObj.get("certStatus") != null && !jsonObj.get("certStatus").isJsonNull()) && !jsonObj.get("certStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certStatus").toString()));
      }
      // validate the optional field `certStatus`
      if (jsonObj.get("certStatus") != null && !jsonObj.get("certStatus").isJsonNull()) {
        CertStatusEnum.validateJsonElement(jsonObj.get("certStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("discoveredIps") != null && !jsonObj.get("discoveredIps").isJsonNull() && !jsonObj.get("discoveredIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveredIps` to be an array in the JSON string but got `%s`", jsonObj.get("discoveredIps").toString()));
      }
      if ((jsonObj.get("dnsFetchTime") != null && !jsonObj.get("dnsFetchTime").isJsonNull()) && !jsonObj.get("dnsFetchTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsFetchTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsFetchTime").toString()));
      }
      if ((jsonObj.get("dnsStatus") != null && !jsonObj.get("dnsStatus").isJsonNull()) && !jsonObj.get("dnsStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsStatus").toString()));
      }
      // validate the optional field `dnsStatus`
      if (jsonObj.get("dnsStatus") != null && !jsonObj.get("dnsStatus").isJsonNull()) {
        DnsStatusEnum.validateJsonElement(jsonObj.get("dnsStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("expectedIps") != null && !jsonObj.get("expectedIps").isJsonNull() && !jsonObj.get("expectedIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedIps` to be an array in the JSON string but got `%s`", jsonObj.get("expectedIps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainProvisioning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainProvisioning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainProvisioning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainProvisioning.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainProvisioning>() {
           @Override
           public void write(JsonWriter out, DomainProvisioning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainProvisioning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainProvisioning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainProvisioning
   * @throws IOException if the JSON string is invalid with respect to DomainProvisioning
   */
  public static DomainProvisioning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainProvisioning.class);
  }

  /**
   * Convert an instance of DomainProvisioning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

