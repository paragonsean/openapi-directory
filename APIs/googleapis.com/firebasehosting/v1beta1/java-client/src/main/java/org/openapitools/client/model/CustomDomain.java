/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.DnsUpdates;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;CustomDomain&#x60; is an entity that links a domain name to a Firebase Hosting site. Add a &#x60;CustomDomain&#x60; to your site to allow Hosting to serve the site&#39;s content in response to requests against your domain name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomDomain {
  public static final String SERIALIZED_NAME_ANNOTATIONS = "annotations";
  @SerializedName(SERIALIZED_NAME_ANNOTATIONS)
  private Map<String, String> annotations = new HashMap<>();

  public static final String SERIALIZED_NAME_CERT = "cert";
  @SerializedName(SERIALIZED_NAME_CERT)
  private Certificate cert;

  /**
   * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the &#x60;GROUPED&#x60; cert type, while Blaze plan domains can select any option.
   */
  @JsonAdapter(CertPreferenceEnum.Adapter.class)
  public enum CertPreferenceEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    TEMPORARY("TEMPORARY"),
    
    GROUPED("GROUPED"),
    
    PROJECT_GROUPED("PROJECT_GROUPED"),
    
    DEDICATED("DEDICATED");

    private String value;

    CertPreferenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertPreferenceEnum fromValue(String value) {
      for (CertPreferenceEnum b : CertPreferenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertPreferenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertPreferenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertPreferenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertPreferenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertPreferenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERT_PREFERENCE = "certPreference";
  @SerializedName(SERIALIZED_NAME_CERT_PREFERENCE)
  private CertPreferenceEnum certPreference;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  /**
   * Output only. The &#x60;HostState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   */
  @JsonAdapter(HostStateEnum.Adapter.class)
  public enum HostStateEnum {
    STATE_UNSPECIFIED("HOST_STATE_UNSPECIFIED"),
    
    UNHOSTED("HOST_UNHOSTED"),
    
    UNREACHABLE("HOST_UNREACHABLE"),
    
    MISMATCH("HOST_MISMATCH"),
    
    CONFLICT("HOST_CONFLICT"),
    
    ACTIVE("HOST_ACTIVE");

    private String value;

    HostStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostStateEnum fromValue(String value) {
      for (HostStateEnum b : HostStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_STATE = "hostState";
  @SerializedName(SERIALIZED_NAME_HOST_STATE)
  private HostStateEnum hostState;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<Status> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The &#x60;OwnershipState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   */
  @JsonAdapter(OwnershipStateEnum.Adapter.class)
  public enum OwnershipStateEnum {
    STATE_UNSPECIFIED("OWNERSHIP_STATE_UNSPECIFIED"),
    
    MISSING("OWNERSHIP_MISSING"),
    
    UNREACHABLE("OWNERSHIP_UNREACHABLE"),
    
    MISMATCH("OWNERSHIP_MISMATCH"),
    
    CONFLICT("OWNERSHIP_CONFLICT"),
    
    PENDING("OWNERSHIP_PENDING"),
    
    ACTIVE("OWNERSHIP_ACTIVE");

    private String value;

    OwnershipStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipStateEnum fromValue(String value) {
      for (OwnershipStateEnum b : OwnershipStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_STATE = "ownershipState";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_STATE)
  private OwnershipStateEnum ownershipState;

  public static final String SERIALIZED_NAME_RECONCILING = "reconciling";
  @SerializedName(SERIALIZED_NAME_RECONCILING)
  private Boolean reconciling;

  public static final String SERIALIZED_NAME_REDIRECT_TARGET = "redirectTarget";
  @SerializedName(SERIALIZED_NAME_REDIRECT_TARGET)
  private String redirectTarget;

  public static final String SERIALIZED_NAME_REQUIRED_DNS_UPDATES = "requiredDnsUpdates";
  @SerializedName(SERIALIZED_NAME_REQUIRED_DNS_UPDATES)
  private DnsUpdates requiredDnsUpdates;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CustomDomain() {
  }

  public CustomDomain(
     String createTime, 
     String deleteTime, 
     String etag, 
     String expireTime, 
     HostStateEnum hostState, 
     List<Status> issues, 
     String name, 
     OwnershipStateEnum ownershipState, 
     Boolean reconciling, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.etag = etag;
    this.expireTime = expireTime;
    this.hostState = hostState;
    this.issues = issues;
    this.name = name;
    this.ownershipState = ownershipState;
    this.reconciling = reconciling;
    this.updateTime = updateTime;
  }

  public CustomDomain annotations(Map<String, String> annotations) {
    this.annotations = annotations;
    return this;
  }

  public CustomDomain putAnnotationsItem(String key, String annotationsItem) {
    if (this.annotations == null) {
      this.annotations = new HashMap<>();
    }
    this.annotations.put(key, annotationsItem);
    return this;
  }

  /**
   * Annotations you can add to leave both human- and machine-readable metadata about your &#x60;CustomDomain&#x60;.
   * @return annotations
   */
  @javax.annotation.Nullable
  public Map<String, String> getAnnotations() {
    return annotations;
  }

  public void setAnnotations(Map<String, String> annotations) {
    this.annotations = annotations;
  }


  public CustomDomain cert(Certificate cert) {
    this.cert = cert;
    return this;
  }

  /**
   * Get cert
   * @return cert
   */
  @javax.annotation.Nullable
  public Certificate getCert() {
    return cert;
  }

  public void setCert(Certificate cert) {
    this.cert = cert;
  }


  public CustomDomain certPreference(CertPreferenceEnum certPreference) {
    this.certPreference = certPreference;
    return this;
  }

  /**
   * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the &#x60;GROUPED&#x60; cert type, while Blaze plan domains can select any option.
   * @return certPreference
   */
  @javax.annotation.Nullable
  public CertPreferenceEnum getCertPreference() {
    return certPreference;
  }

  public void setCertPreference(CertPreferenceEnum certPreference) {
    this.certPreference = certPreference;
  }


  /**
   * Output only. The custom domain&#39;s create time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The time the &#x60;CustomDomain&#x60; was deleted; null for custom domains that haven&#39;t been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an &#x60;UndeleteCustomDomain&#x60; request.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  /**
   * Output only. A string that represents the current state of the &#x60;CustomDomain&#x60; and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making &#x60;UpdateCustomDomain&#x60;, &#x60;DeleteCustomDomain&#x60;, and &#x60;UndeleteCustomDomain&#x60; requests.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }



  /**
   * Output only. The minimum time before a soft-deleted &#x60;CustomDomain&#x60; is completely removed from Hosting; null for custom domains that haven&#39;t been deleted.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  /**
   * Output only. The &#x60;HostState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   * @return hostState
   */
  @javax.annotation.Nullable
  public HostStateEnum getHostState() {
    return hostState;
  }



  /**
   * Output only. A set of errors Hosting systems encountered when trying to establish Hosting&#39;s ability to serve secure content for your domain name. Resolve these issues to ensure your &#x60;CustomDomain&#x60; behaves properly.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<Status> getIssues() {
    return issues;
  }



  public CustomDomain labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public CustomDomain putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels used for extra metadata and/or filtering.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The fully-qualified name of the &#x60;CustomDomain&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. The &#x60;OwnershipState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   * @return ownershipState
   */
  @javax.annotation.Nullable
  public OwnershipStateEnum getOwnershipState() {
    return ownershipState;
  }



  /**
   * Output only. A field that, if true, indicates that Hosting&#39;s systems are attmepting to make the custom domain&#39;s state match your preferred state. This is most frequently &#x60;true&#x60; when initially provisioning a &#x60;CustomDomain&#x60; after a &#x60;CreateCustomDomain&#x60; request or when creating a new SSL certificate to match an updated &#x60;cert_preference&#x60; after an &#x60;UpdateCustomDomain&#x60; request.
   * @return reconciling
   */
  @javax.annotation.Nullable
  public Boolean getReconciling() {
    return reconciling;
  }



  public CustomDomain redirectTarget(String redirectTarget) {
    this.redirectTarget = redirectTarget;
    return this;
  }

  /**
   * A domain name that this &#x60;CustomDomain&#x60; should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified &#x60;redirect_target&#x60; instead.
   * @return redirectTarget
   */
  @javax.annotation.Nullable
  public String getRedirectTarget() {
    return redirectTarget;
  }

  public void setRedirectTarget(String redirectTarget) {
    this.redirectTarget = redirectTarget;
  }


  public CustomDomain requiredDnsUpdates(DnsUpdates requiredDnsUpdates) {
    this.requiredDnsUpdates = requiredDnsUpdates;
    return this;
  }

  /**
   * Get requiredDnsUpdates
   * @return requiredDnsUpdates
   */
  @javax.annotation.Nullable
  public DnsUpdates getRequiredDnsUpdates() {
    return requiredDnsUpdates;
  }

  public void setRequiredDnsUpdates(DnsUpdates requiredDnsUpdates) {
    this.requiredDnsUpdates = requiredDnsUpdates;
  }


  /**
   * Output only. The last time the &#x60;CustomDomain&#x60; was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDomain customDomain = (CustomDomain) o;
    return Objects.equals(this.annotations, customDomain.annotations) &&
        Objects.equals(this.cert, customDomain.cert) &&
        Objects.equals(this.certPreference, customDomain.certPreference) &&
        Objects.equals(this.createTime, customDomain.createTime) &&
        Objects.equals(this.deleteTime, customDomain.deleteTime) &&
        Objects.equals(this.etag, customDomain.etag) &&
        Objects.equals(this.expireTime, customDomain.expireTime) &&
        Objects.equals(this.hostState, customDomain.hostState) &&
        Objects.equals(this.issues, customDomain.issues) &&
        Objects.equals(this.labels, customDomain.labels) &&
        Objects.equals(this.name, customDomain.name) &&
        Objects.equals(this.ownershipState, customDomain.ownershipState) &&
        Objects.equals(this.reconciling, customDomain.reconciling) &&
        Objects.equals(this.redirectTarget, customDomain.redirectTarget) &&
        Objects.equals(this.requiredDnsUpdates, customDomain.requiredDnsUpdates) &&
        Objects.equals(this.updateTime, customDomain.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotations, cert, certPreference, createTime, deleteTime, etag, expireTime, hostState, issues, labels, name, ownershipState, reconciling, redirectTarget, requiredDnsUpdates, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDomain {\n");
    sb.append("    annotations: ").append(toIndentedString(annotations)).append("\n");
    sb.append("    cert: ").append(toIndentedString(cert)).append("\n");
    sb.append("    certPreference: ").append(toIndentedString(certPreference)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    hostState: ").append(toIndentedString(hostState)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownershipState: ").append(toIndentedString(ownershipState)).append("\n");
    sb.append("    reconciling: ").append(toIndentedString(reconciling)).append("\n");
    sb.append("    redirectTarget: ").append(toIndentedString(redirectTarget)).append("\n");
    sb.append("    requiredDnsUpdates: ").append(toIndentedString(requiredDnsUpdates)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotations");
    openapiFields.add("cert");
    openapiFields.add("certPreference");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("etag");
    openapiFields.add("expireTime");
    openapiFields.add("hostState");
    openapiFields.add("issues");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("ownershipState");
    openapiFields.add("reconciling");
    openapiFields.add("redirectTarget");
    openapiFields.add("requiredDnsUpdates");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDomain
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDomain.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDomain is not found in the empty JSON string", CustomDomain.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDomain.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDomain` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cert`
      if (jsonObj.get("cert") != null && !jsonObj.get("cert").isJsonNull()) {
        Certificate.validateJsonElement(jsonObj.get("cert"));
      }
      if ((jsonObj.get("certPreference") != null && !jsonObj.get("certPreference").isJsonNull()) && !jsonObj.get("certPreference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certPreference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certPreference").toString()));
      }
      // validate the optional field `certPreference`
      if (jsonObj.get("certPreference") != null && !jsonObj.get("certPreference").isJsonNull()) {
        CertPreferenceEnum.validateJsonElement(jsonObj.get("certPreference"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("hostState") != null && !jsonObj.get("hostState").isJsonNull()) && !jsonObj.get("hostState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostState").toString()));
      }
      // validate the optional field `hostState`
      if (jsonObj.get("hostState") != null && !jsonObj.get("hostState").isJsonNull()) {
        HostStateEnum.validateJsonElement(jsonObj.get("hostState"));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            Status.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownershipState") != null && !jsonObj.get("ownershipState").isJsonNull()) && !jsonObj.get("ownershipState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipState").toString()));
      }
      // validate the optional field `ownershipState`
      if (jsonObj.get("ownershipState") != null && !jsonObj.get("ownershipState").isJsonNull()) {
        OwnershipStateEnum.validateJsonElement(jsonObj.get("ownershipState"));
      }
      if ((jsonObj.get("redirectTarget") != null && !jsonObj.get("redirectTarget").isJsonNull()) && !jsonObj.get("redirectTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectTarget").toString()));
      }
      // validate the optional field `requiredDnsUpdates`
      if (jsonObj.get("requiredDnsUpdates") != null && !jsonObj.get("requiredDnsUpdates").isJsonNull()) {
        DnsUpdates.validateJsonElement(jsonObj.get("requiredDnsUpdates"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDomain.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDomain' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDomain> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDomain.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDomain>() {
           @Override
           public void write(JsonWriter out, CustomDomain value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDomain read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDomain given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDomain
   * @throws IOException if the JSON string is invalid with respect to CustomDomain
   */
  public static CustomDomain fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDomain.class);
  }

  /**
   * Convert an instance of CustomDomain to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

