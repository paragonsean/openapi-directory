/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Header;
import org.openapitools.client.model.I18nConfig;
import org.openapitools.client.model.Redirect;
import org.openapitools.client.model.Rewrite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServingConfig {
  /**
   * How to handle well known App Association files.
   */
  @JsonAdapter(AppAssociationEnum.Adapter.class)
  public enum AppAssociationEnum {
    AUTO("AUTO"),
    
    NONE("NONE");

    private String value;

    AppAssociationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppAssociationEnum fromValue(String value) {
      for (AppAssociationEnum b : AppAssociationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppAssociationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppAssociationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppAssociationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppAssociationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppAssociationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APP_ASSOCIATION = "appAssociation";
  @SerializedName(SERIALIZED_NAME_APP_ASSOCIATION)
  private AppAssociationEnum appAssociation;

  public static final String SERIALIZED_NAME_CLEAN_URLS = "cleanUrls";
  @SerializedName(SERIALIZED_NAME_CLEAN_URLS)
  private Boolean cleanUrls;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<Header> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_I18N = "i18n";
  @SerializedName(SERIALIZED_NAME_I18N)
  private I18nConfig i18n;

  public static final String SERIALIZED_NAME_REDIRECTS = "redirects";
  @SerializedName(SERIALIZED_NAME_REDIRECTS)
  private List<Redirect> redirects = new ArrayList<>();

  public static final String SERIALIZED_NAME_REWRITES = "rewrites";
  @SerializedName(SERIALIZED_NAME_REWRITES)
  private List<Rewrite> rewrites = new ArrayList<>();

  /**
   * Defines how to handle a trailing slash in the URL path.
   */
  @JsonAdapter(TrailingSlashBehaviorEnum.Adapter.class)
  public enum TrailingSlashBehaviorEnum {
    TRAILING_SLASH_BEHAVIOR_UNSPECIFIED("TRAILING_SLASH_BEHAVIOR_UNSPECIFIED"),
    
    ADD("ADD"),
    
    REMOVE("REMOVE");

    private String value;

    TrailingSlashBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TrailingSlashBehaviorEnum fromValue(String value) {
      for (TrailingSlashBehaviorEnum b : TrailingSlashBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TrailingSlashBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TrailingSlashBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TrailingSlashBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TrailingSlashBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TrailingSlashBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRAILING_SLASH_BEHAVIOR = "trailingSlashBehavior";
  @SerializedName(SERIALIZED_NAME_TRAILING_SLASH_BEHAVIOR)
  private TrailingSlashBehaviorEnum trailingSlashBehavior;

  public ServingConfig() {
  }

  public ServingConfig appAssociation(AppAssociationEnum appAssociation) {
    this.appAssociation = appAssociation;
    return this;
  }

  /**
   * How to handle well known App Association files.
   * @return appAssociation
   */
  @javax.annotation.Nullable
  public AppAssociationEnum getAppAssociation() {
    return appAssociation;
  }

  public void setAppAssociation(AppAssociationEnum appAssociation) {
    this.appAssociation = appAssociation;
  }


  public ServingConfig cleanUrls(Boolean cleanUrls) {
    this.cleanUrls = cleanUrls;
    return this;
  }

  /**
   * Defines whether to drop the file extension from uploaded files.
   * @return cleanUrls
   */
  @javax.annotation.Nullable
  public Boolean getCleanUrls() {
    return cleanUrls;
  }

  public void setCleanUrls(Boolean cleanUrls) {
    this.cleanUrls = cleanUrls;
  }


  public ServingConfig headers(List<Header> headers) {
    this.headers = headers;
    return this;
  }

  public ServingConfig addHeadersItem(Header headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
   * @return headers
   */
  @javax.annotation.Nullable
  public List<Header> getHeaders() {
    return headers;
  }

  public void setHeaders(List<Header> headers) {
    this.headers = headers;
  }


  public ServingConfig i18n(I18nConfig i18n) {
    this.i18n = i18n;
    return this;
  }

  /**
   * Get i18n
   * @return i18n
   */
  @javax.annotation.Nullable
  public I18nConfig getI18n() {
    return i18n;
  }

  public void setI18n(I18nConfig i18n) {
    this.i18n = i18n;
  }


  public ServingConfig redirects(List<Redirect> redirects) {
    this.redirects = redirects;
    return this;
  }

  public ServingConfig addRedirectsItem(Redirect redirectsItem) {
    if (this.redirects == null) {
      this.redirects = new ArrayList<>();
    }
    this.redirects.add(redirectsItem);
    return this;
  }

  /**
   * An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
   * @return redirects
   */
  @javax.annotation.Nullable
  public List<Redirect> getRedirects() {
    return redirects;
  }

  public void setRedirects(List<Redirect> redirects) {
    this.redirects = redirects;
  }


  public ServingConfig rewrites(List<Rewrite> rewrites) {
    this.rewrites = rewrites;
    return this;
  }

  public ServingConfig addRewritesItem(Rewrite rewritesItem) {
    if (this.rewrites == null) {
      this.rewrites = new ArrayList<>();
    }
    this.rewrites.add(rewritesItem);
    return this;
  }

  /**
   * An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
   * @return rewrites
   */
  @javax.annotation.Nullable
  public List<Rewrite> getRewrites() {
    return rewrites;
  }

  public void setRewrites(List<Rewrite> rewrites) {
    this.rewrites = rewrites;
  }


  public ServingConfig trailingSlashBehavior(TrailingSlashBehaviorEnum trailingSlashBehavior) {
    this.trailingSlashBehavior = trailingSlashBehavior;
    return this;
  }

  /**
   * Defines how to handle a trailing slash in the URL path.
   * @return trailingSlashBehavior
   */
  @javax.annotation.Nullable
  public TrailingSlashBehaviorEnum getTrailingSlashBehavior() {
    return trailingSlashBehavior;
  }

  public void setTrailingSlashBehavior(TrailingSlashBehaviorEnum trailingSlashBehavior) {
    this.trailingSlashBehavior = trailingSlashBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServingConfig servingConfig = (ServingConfig) o;
    return Objects.equals(this.appAssociation, servingConfig.appAssociation) &&
        Objects.equals(this.cleanUrls, servingConfig.cleanUrls) &&
        Objects.equals(this.headers, servingConfig.headers) &&
        Objects.equals(this.i18n, servingConfig.i18n) &&
        Objects.equals(this.redirects, servingConfig.redirects) &&
        Objects.equals(this.rewrites, servingConfig.rewrites) &&
        Objects.equals(this.trailingSlashBehavior, servingConfig.trailingSlashBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appAssociation, cleanUrls, headers, i18n, redirects, rewrites, trailingSlashBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServingConfig {\n");
    sb.append("    appAssociation: ").append(toIndentedString(appAssociation)).append("\n");
    sb.append("    cleanUrls: ").append(toIndentedString(cleanUrls)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    i18n: ").append(toIndentedString(i18n)).append("\n");
    sb.append("    redirects: ").append(toIndentedString(redirects)).append("\n");
    sb.append("    rewrites: ").append(toIndentedString(rewrites)).append("\n");
    sb.append("    trailingSlashBehavior: ").append(toIndentedString(trailingSlashBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appAssociation");
    openapiFields.add("cleanUrls");
    openapiFields.add("headers");
    openapiFields.add("i18n");
    openapiFields.add("redirects");
    openapiFields.add("rewrites");
    openapiFields.add("trailingSlashBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServingConfig is not found in the empty JSON string", ServingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appAssociation") != null && !jsonObj.get("appAssociation").isJsonNull()) && !jsonObj.get("appAssociation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appAssociation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appAssociation").toString()));
      }
      // validate the optional field `appAssociation`
      if (jsonObj.get("appAssociation") != null && !jsonObj.get("appAssociation").isJsonNull()) {
        AppAssociationEnum.validateJsonElement(jsonObj.get("appAssociation"));
      }
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull()) {
        JsonArray jsonArrayheaders = jsonObj.getAsJsonArray("headers");
        if (jsonArrayheaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
          }

          // validate the optional field `headers` (array)
          for (int i = 0; i < jsonArrayheaders.size(); i++) {
            Header.validateJsonElement(jsonArrayheaders.get(i));
          };
        }
      }
      // validate the optional field `i18n`
      if (jsonObj.get("i18n") != null && !jsonObj.get("i18n").isJsonNull()) {
        I18nConfig.validateJsonElement(jsonObj.get("i18n"));
      }
      if (jsonObj.get("redirects") != null && !jsonObj.get("redirects").isJsonNull()) {
        JsonArray jsonArrayredirects = jsonObj.getAsJsonArray("redirects");
        if (jsonArrayredirects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("redirects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `redirects` to be an array in the JSON string but got `%s`", jsonObj.get("redirects").toString()));
          }

          // validate the optional field `redirects` (array)
          for (int i = 0; i < jsonArrayredirects.size(); i++) {
            Redirect.validateJsonElement(jsonArrayredirects.get(i));
          };
        }
      }
      if (jsonObj.get("rewrites") != null && !jsonObj.get("rewrites").isJsonNull()) {
        JsonArray jsonArrayrewrites = jsonObj.getAsJsonArray("rewrites");
        if (jsonArrayrewrites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewrites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewrites` to be an array in the JSON string but got `%s`", jsonObj.get("rewrites").toString()));
          }

          // validate the optional field `rewrites` (array)
          for (int i = 0; i < jsonArrayrewrites.size(); i++) {
            Rewrite.validateJsonElement(jsonArrayrewrites.get(i));
          };
        }
      }
      if ((jsonObj.get("trailingSlashBehavior") != null && !jsonObj.get("trailingSlashBehavior").isJsonNull()) && !jsonObj.get("trailingSlashBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trailingSlashBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trailingSlashBehavior").toString()));
      }
      // validate the optional field `trailingSlashBehavior`
      if (jsonObj.get("trailingSlashBehavior") != null && !jsonObj.get("trailingSlashBehavior").isJsonNull()) {
        TrailingSlashBehaviorEnum.validateJsonElement(jsonObj.get("trailingSlashBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ServingConfig>() {
           @Override
           public void write(JsonWriter out, ServingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServingConfig
   * @throws IOException if the JSON string is invalid with respect to ServingConfig
   */
  public static ServingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServingConfig.class);
  }

  /**
   * Convert an instance of ServingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

