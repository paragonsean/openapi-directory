/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;SiteConfig&#x60; contains metadata associated with a specific site that controls Firebase Hosting serving behavior
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SiteConfig {
  public static final String SERIALIZED_NAME_CLOUD_LOGGING_ENABLED = "cloudLoggingEnabled";
  @SerializedName(SERIALIZED_NAME_CLOUD_LOGGING_ENABLED)
  private Boolean cloudLoggingEnabled;

  public static final String SERIALIZED_NAME_MAX_VERSIONS = "maxVersions";
  @SerializedName(SERIALIZED_NAME_MAX_VERSIONS)
  private String maxVersions;

  public SiteConfig() {
  }

  public SiteConfig cloudLoggingEnabled(Boolean cloudLoggingEnabled) {
    this.cloudLoggingEnabled = cloudLoggingEnabled;
    return this;
  }

  /**
   * Whether or not web requests made by site visitors are logged via Cloud Logging.
   * @return cloudLoggingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCloudLoggingEnabled() {
    return cloudLoggingEnabled;
  }

  public void setCloudLoggingEnabled(Boolean cloudLoggingEnabled) {
    this.cloudLoggingEnabled = cloudLoggingEnabled;
  }


  public SiteConfig maxVersions(String maxVersions) {
    this.maxVersions = maxVersions;
    return this;
  }

  /**
   * The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.
   * @return maxVersions
   */
  @javax.annotation.Nullable
  public String getMaxVersions() {
    return maxVersions;
  }

  public void setMaxVersions(String maxVersions) {
    this.maxVersions = maxVersions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteConfig siteConfig = (SiteConfig) o;
    return Objects.equals(this.cloudLoggingEnabled, siteConfig.cloudLoggingEnabled) &&
        Objects.equals(this.maxVersions, siteConfig.maxVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudLoggingEnabled, maxVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteConfig {\n");
    sb.append("    cloudLoggingEnabled: ").append(toIndentedString(cloudLoggingEnabled)).append("\n");
    sb.append("    maxVersions: ").append(toIndentedString(maxVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudLoggingEnabled");
    openapiFields.add("maxVersions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SiteConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SiteConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteConfig is not found in the empty JSON string", SiteConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SiteConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("maxVersions") != null && !jsonObj.get("maxVersions").isJsonNull()) && !jsonObj.get("maxVersions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxVersions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxVersions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteConfig>() {
           @Override
           public void write(JsonWriter out, SiteConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SiteConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SiteConfig
   * @throws IOException if the JSON string is invalid with respect to SiteConfig
   */
  public static SiteConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteConfig.class);
  }

  /**
   * Convert an instance of SiteConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

