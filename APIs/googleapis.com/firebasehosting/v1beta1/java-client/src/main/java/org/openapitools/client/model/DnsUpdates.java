/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsRecordSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name&#39;s DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DnsUpdates {
  public static final String SERIALIZED_NAME_CHECK_TIME = "checkTime";
  @SerializedName(SERIALIZED_NAME_CHECK_TIME)
  private String checkTime;

  public static final String SERIALIZED_NAME_DESIRED = "desired";
  @SerializedName(SERIALIZED_NAME_DESIRED)
  private List<DnsRecordSet> desired = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCOVERED = "discovered";
  @SerializedName(SERIALIZED_NAME_DISCOVERED)
  private List<DnsRecordSet> discovered = new ArrayList<>();

  public DnsUpdates() {
  }

  public DnsUpdates checkTime(String checkTime) {
    this.checkTime = checkTime;
    return this;
  }

  /**
   * The last time Hosting checked your custom domain&#39;s DNS records.
   * @return checkTime
   */
  @javax.annotation.Nullable
  public String getCheckTime() {
    return checkTime;
  }

  public void setCheckTime(String checkTime) {
    this.checkTime = checkTime;
  }


  public DnsUpdates desired(List<DnsRecordSet> desired) {
    this.desired = desired;
    return this;
  }

  public DnsUpdates addDesiredItem(DnsRecordSet desiredItem) {
    if (this.desired == null) {
      this.desired = new ArrayList<>();
    }
    this.desired.add(desiredItem);
    return this;
  }

  /**
   * The set of DNS records Hosting needs to serve secure content on the domain.
   * @return desired
   */
  @javax.annotation.Nullable
  public List<DnsRecordSet> getDesired() {
    return desired;
  }

  public void setDesired(List<DnsRecordSet> desired) {
    this.desired = desired;
  }


  public DnsUpdates discovered(List<DnsRecordSet> discovered) {
    this.discovered = discovered;
    return this;
  }

  public DnsUpdates addDiscoveredItem(DnsRecordSet discoveredItem) {
    if (this.discovered == null) {
      this.discovered = new ArrayList<>();
    }
    this.discovered.add(discoveredItem);
    return this;
  }

  /**
   * The set of DNS records Hosting discovered when inspecting a domain.
   * @return discovered
   */
  @javax.annotation.Nullable
  public List<DnsRecordSet> getDiscovered() {
    return discovered;
  }

  public void setDiscovered(List<DnsRecordSet> discovered) {
    this.discovered = discovered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsUpdates dnsUpdates = (DnsUpdates) o;
    return Objects.equals(this.checkTime, dnsUpdates.checkTime) &&
        Objects.equals(this.desired, dnsUpdates.desired) &&
        Objects.equals(this.discovered, dnsUpdates.discovered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkTime, desired, discovered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsUpdates {\n");
    sb.append("    checkTime: ").append(toIndentedString(checkTime)).append("\n");
    sb.append("    desired: ").append(toIndentedString(desired)).append("\n");
    sb.append("    discovered: ").append(toIndentedString(discovered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkTime");
    openapiFields.add("desired");
    openapiFields.add("discovered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DnsUpdates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnsUpdates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsUpdates is not found in the empty JSON string", DnsUpdates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnsUpdates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsUpdates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("checkTime") != null && !jsonObj.get("checkTime").isJsonNull()) && !jsonObj.get("checkTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("checkTime").toString()));
      }
      if (jsonObj.get("desired") != null && !jsonObj.get("desired").isJsonNull()) {
        JsonArray jsonArraydesired = jsonObj.getAsJsonArray("desired");
        if (jsonArraydesired != null) {
          // ensure the json data is an array
          if (!jsonObj.get("desired").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `desired` to be an array in the JSON string but got `%s`", jsonObj.get("desired").toString()));
          }

          // validate the optional field `desired` (array)
          for (int i = 0; i < jsonArraydesired.size(); i++) {
            DnsRecordSet.validateJsonElement(jsonArraydesired.get(i));
          };
        }
      }
      if (jsonObj.get("discovered") != null && !jsonObj.get("discovered").isJsonNull()) {
        JsonArray jsonArraydiscovered = jsonObj.getAsJsonArray("discovered");
        if (jsonArraydiscovered != null) {
          // ensure the json data is an array
          if (!jsonObj.get("discovered").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `discovered` to be an array in the JSON string but got `%s`", jsonObj.get("discovered").toString()));
          }

          // validate the optional field `discovered` (array)
          for (int i = 0; i < jsonArraydiscovered.size(); i++) {
            DnsRecordSet.validateJsonElement(jsonArraydiscovered.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsUpdates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsUpdates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsUpdates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsUpdates.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsUpdates>() {
           @Override
           public void write(JsonWriter out, DnsUpdates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsUpdates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DnsUpdates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DnsUpdates
   * @throws IOException if the JSON string is invalid with respect to DnsUpdates
   */
  public static DnsUpdates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsUpdates.class);
  }

  /**
   * Convert an instance of DnsUpdates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

