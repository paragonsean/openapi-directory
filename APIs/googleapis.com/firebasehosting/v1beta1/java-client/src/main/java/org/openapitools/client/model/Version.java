/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ActingUser;
import org.openapitools.client.model.ServingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;Version&#x60; is a configuration and a collection of static files which determine how a site is displayed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:54.567682-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Version {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private ServingConfig config;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATE_USER = "createUser";
  @SerializedName(SERIALIZED_NAME_CREATE_USER)
  private ActingUser createUser;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DELETE_USER = "deleteUser";
  @SerializedName(SERIALIZED_NAME_DELETE_USER)
  private ActingUser deleteUser;

  public static final String SERIALIZED_NAME_FILE_COUNT = "fileCount";
  @SerializedName(SERIALIZED_NAME_FILE_COUNT)
  private String fileCount;

  public static final String SERIALIZED_NAME_FINALIZE_TIME = "finalizeTime";
  @SerializedName(SERIALIZED_NAME_FINALIZE_TIME)
  private String finalizeTime;

  public static final String SERIALIZED_NAME_FINALIZE_USER = "finalizeUser";
  @SerializedName(SERIALIZED_NAME_FINALIZE_USER)
  private ActingUser finalizeUser;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The deploy status of the version. For a successful deploy, call [&#x60;CreateVersion&#x60;](sites.versions/create) to make a new version (&#x60;CREATED&#x60; status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the &#x60;FINALIZED&#x60; status. Note that if you leave the version in the &#x60;CREATED&#x60; state for more than 12 hours, the system will automatically mark the version as &#x60;ABANDONED&#x60;. You can also change the status of a version to &#x60;DELETED&#x60; by calling [&#x60;DeleteVersion&#x60;](sites.versions/delete).
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    VERSION_STATUS_UNSPECIFIED("VERSION_STATUS_UNSPECIFIED"),
    
    CREATED("CREATED"),
    
    FINALIZED("FINALIZED"),
    
    DELETED("DELETED"),
    
    ABANDONED("ABANDONED"),
    
    EXPIRED("EXPIRED"),
    
    CLONING("CLONING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VERSION_BYTES = "versionBytes";
  @SerializedName(SERIALIZED_NAME_VERSION_BYTES)
  private String versionBytes;

  public Version() {
  }

  public Version config(ServingConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public ServingConfig getConfig() {
    return config;
  }

  public void setConfig(ServingConfig config) {
    this.config = config;
  }


  public Version createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. The time at which the version was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Version createUser(ActingUser createUser) {
    this.createUser = createUser;
    return this;
  }

  /**
   * Get createUser
   * @return createUser
   */
  @javax.annotation.Nullable
  public ActingUser getCreateUser() {
    return createUser;
  }

  public void setCreateUser(ActingUser createUser) {
    this.createUser = createUser;
  }


  public Version deleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
    return this;
  }

  /**
   * Output only. The time at which the version was &#x60;DELETED&#x60;.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }

  public void setDeleteTime(String deleteTime) {
    this.deleteTime = deleteTime;
  }


  public Version deleteUser(ActingUser deleteUser) {
    this.deleteUser = deleteUser;
    return this;
  }

  /**
   * Get deleteUser
   * @return deleteUser
   */
  @javax.annotation.Nullable
  public ActingUser getDeleteUser() {
    return deleteUser;
  }

  public void setDeleteUser(ActingUser deleteUser) {
    this.deleteUser = deleteUser;
  }


  public Version fileCount(String fileCount) {
    this.fileCount = fileCount;
    return this;
  }

  /**
   * Output only. The total number of files associated with the version. This value is calculated after a version is &#x60;FINALIZED&#x60;.
   * @return fileCount
   */
  @javax.annotation.Nullable
  public String getFileCount() {
    return fileCount;
  }

  public void setFileCount(String fileCount) {
    this.fileCount = fileCount;
  }


  public Version finalizeTime(String finalizeTime) {
    this.finalizeTime = finalizeTime;
    return this;
  }

  /**
   * Output only. The time at which the version was &#x60;FINALIZED&#x60;.
   * @return finalizeTime
   */
  @javax.annotation.Nullable
  public String getFinalizeTime() {
    return finalizeTime;
  }

  public void setFinalizeTime(String finalizeTime) {
    this.finalizeTime = finalizeTime;
  }


  public Version finalizeUser(ActingUser finalizeUser) {
    this.finalizeUser = finalizeUser;
    return this;
  }

  /**
   * Get finalizeUser
   * @return finalizeUser
   */
  @javax.annotation.Nullable
  public ActingUser getFinalizeUser() {
    return finalizeUser;
  }

  public void setFinalizeUser(ActingUser finalizeUser) {
    this.finalizeUser = finalizeUser;
  }


  public Version labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Version putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels used for extra metadata and/or filtering.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Version name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [&#x60;CreateVersion&#x60;](sites.versions/create).
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Version status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The deploy status of the version. For a successful deploy, call [&#x60;CreateVersion&#x60;](sites.versions/create) to make a new version (&#x60;CREATED&#x60; status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the &#x60;FINALIZED&#x60; status. Note that if you leave the version in the &#x60;CREATED&#x60; state for more than 12 hours, the system will automatically mark the version as &#x60;ABANDONED&#x60;. You can also change the status of a version to &#x60;DELETED&#x60; by calling [&#x60;DeleteVersion&#x60;](sites.versions/delete).
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Version versionBytes(String versionBytes) {
    this.versionBytes = versionBytes;
    return this;
  }

  /**
   * Output only. The total stored bytesize of the version. This value is calculated after a version is &#x60;FINALIZED&#x60;.
   * @return versionBytes
   */
  @javax.annotation.Nullable
  public String getVersionBytes() {
    return versionBytes;
  }

  public void setVersionBytes(String versionBytes) {
    this.versionBytes = versionBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.config, version.config) &&
        Objects.equals(this.createTime, version.createTime) &&
        Objects.equals(this.createUser, version.createUser) &&
        Objects.equals(this.deleteTime, version.deleteTime) &&
        Objects.equals(this.deleteUser, version.deleteUser) &&
        Objects.equals(this.fileCount, version.fileCount) &&
        Objects.equals(this.finalizeTime, version.finalizeTime) &&
        Objects.equals(this.finalizeUser, version.finalizeUser) &&
        Objects.equals(this.labels, version.labels) &&
        Objects.equals(this.name, version.name) &&
        Objects.equals(this.status, version.status) &&
        Objects.equals(this.versionBytes, version.versionBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, createTime, createUser, deleteTime, deleteUser, fileCount, finalizeTime, finalizeUser, labels, name, status, versionBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createUser: ").append(toIndentedString(createUser)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    deleteUser: ").append(toIndentedString(deleteUser)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    finalizeTime: ").append(toIndentedString(finalizeTime)).append("\n");
    sb.append("    finalizeUser: ").append(toIndentedString(finalizeUser)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    versionBytes: ").append(toIndentedString(versionBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("createTime");
    openapiFields.add("createUser");
    openapiFields.add("deleteTime");
    openapiFields.add("deleteUser");
    openapiFields.add("fileCount");
    openapiFields.add("finalizeTime");
    openapiFields.add("finalizeUser");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("versionBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Version
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Version.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Version is not found in the empty JSON string", Version.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Version.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Version` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        ServingConfig.validateJsonElement(jsonObj.get("config"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `createUser`
      if (jsonObj.get("createUser") != null && !jsonObj.get("createUser").isJsonNull()) {
        ActingUser.validateJsonElement(jsonObj.get("createUser"));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      // validate the optional field `deleteUser`
      if (jsonObj.get("deleteUser") != null && !jsonObj.get("deleteUser").isJsonNull()) {
        ActingUser.validateJsonElement(jsonObj.get("deleteUser"));
      }
      if ((jsonObj.get("fileCount") != null && !jsonObj.get("fileCount").isJsonNull()) && !jsonObj.get("fileCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileCount").toString()));
      }
      if ((jsonObj.get("finalizeTime") != null && !jsonObj.get("finalizeTime").isJsonNull()) && !jsonObj.get("finalizeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finalizeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finalizeTime").toString()));
      }
      // validate the optional field `finalizeUser`
      if (jsonObj.get("finalizeUser") != null && !jsonObj.get("finalizeUser").isJsonNull()) {
        ActingUser.validateJsonElement(jsonObj.get("finalizeUser"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("versionBytes") != null && !jsonObj.get("versionBytes").isJsonNull()) && !jsonObj.get("versionBytes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionBytes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionBytes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Version.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Version' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Version> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Version.class));

       return (TypeAdapter<T>) new TypeAdapter<Version>() {
           @Override
           public void write(JsonWriter out, Version value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Version read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Version given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Version
   * @throws IOException if the JSON string is invalid with respect to Version
   */
  public static Version fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Version.class);
  }

  /**
   * Convert an instance of Version to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

