# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acting_user import ActingUser
from openapi_server.models.serving_config import ServingConfig
from openapi_server import util


class Version(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: ServingConfig=None, create_time: str=None, create_user: ActingUser=None, delete_time: str=None, delete_user: ActingUser=None, file_count: str=None, finalize_time: str=None, finalize_user: ActingUser=None, labels: Dict[str, str]=None, name: str=None, status: str=None, version_bytes: str=None):
        """Version - a model defined in OpenAPI

        :param config: The config of this Version.
        :param create_time: The create_time of this Version.
        :param create_user: The create_user of this Version.
        :param delete_time: The delete_time of this Version.
        :param delete_user: The delete_user of this Version.
        :param file_count: The file_count of this Version.
        :param finalize_time: The finalize_time of this Version.
        :param finalize_user: The finalize_user of this Version.
        :param labels: The labels of this Version.
        :param name: The name of this Version.
        :param status: The status of this Version.
        :param version_bytes: The version_bytes of this Version.
        """
        self.openapi_types = {
            'config': ServingConfig,
            'create_time': str,
            'create_user': ActingUser,
            'delete_time': str,
            'delete_user': ActingUser,
            'file_count': str,
            'finalize_time': str,
            'finalize_user': ActingUser,
            'labels': Dict[str, str],
            'name': str,
            'status': str,
            'version_bytes': str
        }

        self.attribute_map = {
            'config': 'config',
            'create_time': 'createTime',
            'create_user': 'createUser',
            'delete_time': 'deleteTime',
            'delete_user': 'deleteUser',
            'file_count': 'fileCount',
            'finalize_time': 'finalizeTime',
            'finalize_user': 'finalizeUser',
            'labels': 'labels',
            'name': 'name',
            'status': 'status',
            'version_bytes': 'versionBytes'
        }

        self._config = config
        self._create_time = create_time
        self._create_user = create_user
        self._delete_time = delete_time
        self._delete_user = delete_user
        self._file_count = file_count
        self._finalize_time = finalize_time
        self._finalize_user = finalize_user
        self._labels = labels
        self._name = name
        self._status = status
        self._version_bytes = version_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Version':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Version of this Version.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Version.


        :return: The config of this Version.
        :rtype: ServingConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Version.


        :param config: The config of this Version.
        :type config: ServingConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Version.

        Output only. The time at which the version was created.

        :return: The create_time of this Version.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Version.

        Output only. The time at which the version was created.

        :param create_time: The create_time of this Version.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def create_user(self):
        """Gets the create_user of this Version.


        :return: The create_user of this Version.
        :rtype: ActingUser
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this Version.


        :param create_user: The create_user of this Version.
        :type create_user: ActingUser
        """

        self._create_user = create_user

    @property
    def delete_time(self):
        """Gets the delete_time of this Version.

        Output only. The time at which the version was `DELETED`.

        :return: The delete_time of this Version.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Version.

        Output only. The time at which the version was `DELETED`.

        :param delete_time: The delete_time of this Version.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def delete_user(self):
        """Gets the delete_user of this Version.


        :return: The delete_user of this Version.
        :rtype: ActingUser
        """
        return self._delete_user

    @delete_user.setter
    def delete_user(self, delete_user):
        """Sets the delete_user of this Version.


        :param delete_user: The delete_user of this Version.
        :type delete_user: ActingUser
        """

        self._delete_user = delete_user

    @property
    def file_count(self):
        """Gets the file_count of this Version.

        Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.

        :return: The file_count of this Version.
        :rtype: str
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this Version.

        Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.

        :param file_count: The file_count of this Version.
        :type file_count: str
        """

        self._file_count = file_count

    @property
    def finalize_time(self):
        """Gets the finalize_time of this Version.

        Output only. The time at which the version was `FINALIZED`.

        :return: The finalize_time of this Version.
        :rtype: str
        """
        return self._finalize_time

    @finalize_time.setter
    def finalize_time(self, finalize_time):
        """Sets the finalize_time of this Version.

        Output only. The time at which the version was `FINALIZED`.

        :param finalize_time: The finalize_time of this Version.
        :type finalize_time: str
        """

        self._finalize_time = finalize_time

    @property
    def finalize_user(self):
        """Gets the finalize_user of this Version.


        :return: The finalize_user of this Version.
        :rtype: ActingUser
        """
        return self._finalize_user

    @finalize_user.setter
    def finalize_user(self, finalize_user):
        """Sets the finalize_user of this Version.


        :param finalize_user: The finalize_user of this Version.
        :type finalize_user: ActingUser
        """

        self._finalize_user = finalize_user

    @property
    def labels(self):
        """Gets the labels of this Version.

        The labels used for extra metadata and/or filtering.

        :return: The labels of this Version.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Version.

        The labels used for extra metadata and/or filtering.

        :param labels: The labels of this Version.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Version.

        The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).

        :return: The name of this Version.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Version.

        The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).

        :param name: The name of this Version.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Version.

        The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).

        :return: The status of this Version.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Version.

        The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).

        :param status: The status of this Version.
        :type status: str
        """
        allowed_values = ["VERSION_STATUS_UNSPECIFIED", "CREATED", "FINALIZED", "DELETED", "ABANDONED", "EXPIRED", "CLONING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version_bytes(self):
        """Gets the version_bytes of this Version.

        Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.

        :return: The version_bytes of this Version.
        :rtype: str
        """
        return self._version_bytes

    @version_bytes.setter
    def version_bytes(self, version_bytes):
        """Sets the version_bytes of this Version.

        Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.

        :param version_bytes: The version_bytes of this Version.
        :type version_bytes: str
        """

        self._version_bytes = version_bytes
