# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Redirect(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, glob: str=None, location: str=None, regex: str=None, status_code: int=None):
        """Redirect - a model defined in OpenAPI

        :param glob: The glob of this Redirect.
        :param location: The location of this Redirect.
        :param regex: The regex of this Redirect.
        :param status_code: The status_code of this Redirect.
        """
        self.openapi_types = {
            'glob': str,
            'location': str,
            'regex': str,
            'status_code': int
        }

        self.attribute_map = {
            'glob': 'glob',
            'location': 'location',
            'regex': 'regex',
            'status_code': 'statusCode'
        }

        self._glob = glob
        self._location = location
        self._regex = regex
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Redirect':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Redirect of this Redirect.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def glob(self):
        """Gets the glob of this Redirect.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :return: The glob of this Redirect.
        :rtype: str
        """
        return self._glob

    @glob.setter
    def glob(self, glob):
        """Sets the glob of this Redirect.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :param glob: The glob of this Redirect.
        :type glob: str
        """

        self._glob = glob

    @property
    def location(self):
        """Gets the location of this Redirect.

        Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: \"glob\": \"/:capture*\", \"statusCode\": 301, \"location\": \"https://example.com/foo/:capture\"

        :return: The location of this Redirect.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Redirect.

        Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: \"glob\": \"/:capture*\", \"statusCode\": 301, \"location\": \"https://example.com/foo/:capture\"

        :param location: The location of this Redirect.
        :type location: str
        """

        self._location = location

    @property
    def regex(self):
        """Gets the regex of this Redirect.

        The user-supplied RE2 regular expression to match against the request URL path.

        :return: The regex of this Redirect.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Redirect.

        The user-supplied RE2 regular expression to match against the request URL path.

        :param regex: The regex of this Redirect.
        :type regex: str
        """

        self._regex = regex

    @property
    def status_code(self):
        """Gets the status_code of this Redirect.

        Required. The status HTTP code to return in the response. It must be a valid 3xx status code.

        :return: The status_code of this Redirect.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this Redirect.

        Required. The status HTTP code to return in the response. It must be a valid 3xx status code.

        :param status_code: The status_code of this Redirect.
        :type status_code: int
        """

        self._status_code = status_code
