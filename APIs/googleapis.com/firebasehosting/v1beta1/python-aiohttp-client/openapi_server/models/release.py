# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acting_user import ActingUser
from openapi_server.models.version import Version
from openapi_server import util


class Release(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name: str=None, release_time: str=None, release_user: ActingUser=None, type: str=None, version: Version=None):
        """Release - a model defined in OpenAPI

        :param message: The message of this Release.
        :param name: The name of this Release.
        :param release_time: The release_time of this Release.
        :param release_user: The release_user of this Release.
        :param type: The type of this Release.
        :param version: The version of this Release.
        """
        self.openapi_types = {
            'message': str,
            'name': str,
            'release_time': str,
            'release_user': ActingUser,
            'type': str,
            'version': Version
        }

        self.attribute_map = {
            'message': 'message',
            'name': 'name',
            'release_time': 'releaseTime',
            'release_user': 'releaseUser',
            'type': 'type',
            'version': 'version'
        }

        self._message = message
        self._name = name
        self._release_time = release_time
        self._release_user = release_user
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Release':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Release of this Release.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this Release.

        The deploy description when the release was created. The value can be up to 512 characters.

        :return: The message of this Release.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Release.

        The deploy description when the release was created. The value can be up to 512 characters.

        :param message: The message of this Release.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Release.

        Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).

        :return: The name of this Release.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Release.

        Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).

        :param name: The name of this Release.
        :type name: str
        """

        self._name = name

    @property
    def release_time(self):
        """Gets the release_time of this Release.

        Output only. The time at which the version is set to be public.

        :return: The release_time of this Release.
        :rtype: str
        """
        return self._release_time

    @release_time.setter
    def release_time(self, release_time):
        """Sets the release_time of this Release.

        Output only. The time at which the version is set to be public.

        :param release_time: The release_time of this Release.
        :type release_time: str
        """

        self._release_time = release_time

    @property
    def release_user(self):
        """Gets the release_user of this Release.


        :return: The release_user of this Release.
        :rtype: ActingUser
        """
        return self._release_user

    @release_user.setter
    def release_user(self, release_user):
        """Sets the release_user of this Release.


        :param release_user: The release_user of this Release.
        :type release_user: ActingUser
        """

        self._release_user = release_user

    @property
    def type(self):
        """Gets the type of this Release.

        Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.

        :return: The type of this Release.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Release.

        Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.

        :param type: The type of this Release.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "DEPLOY", "ROLLBACK", "SITE_DISABLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def version(self):
        """Gets the version of this Release.


        :return: The version of this Release.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Release.


        :param version: The version of this Release.
        :type version: Version
        """

        self._version = version
