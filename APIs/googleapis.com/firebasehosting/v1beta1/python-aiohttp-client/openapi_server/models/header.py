# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Header(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, glob: str=None, headers: Dict[str, str]=None, regex: str=None):
        """Header - a model defined in OpenAPI

        :param glob: The glob of this Header.
        :param headers: The headers of this Header.
        :param regex: The regex of this Header.
        """
        self.openapi_types = {
            'glob': str,
            'headers': Dict[str, str],
            'regex': str
        }

        self.attribute_map = {
            'glob': 'glob',
            'headers': 'headers',
            'regex': 'regex'
        }

        self._glob = glob
        self._headers = headers
        self._regex = regex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Header':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Header of this Header.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def glob(self):
        """Gets the glob of this Header.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :return: The glob of this Header.
        :rtype: str
        """
        return self._glob

    @glob.setter
    def glob(self, glob):
        """Sets the glob of this Header.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :param glob: The glob of this Header.
        :type glob: str
        """

        self._glob = glob

    @property
    def headers(self):
        """Gets the headers of this Header.

        Required. The additional headers to add to the response.

        :return: The headers of this Header.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Header.

        Required. The additional headers to add to the response.

        :param headers: The headers of this Header.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def regex(self):
        """Gets the regex of this Header.

        The user-supplied RE2 regular expression to match against the request URL path.

        :return: The regex of this Header.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Header.

        The user-supplied RE2 regular expression to match against the request URL path.

        :param regex: The regex of this Header.
        :type regex: str
        """

        self._regex = regex
