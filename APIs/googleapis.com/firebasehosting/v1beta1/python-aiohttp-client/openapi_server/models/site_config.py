# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SiteConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_logging_enabled: bool=None, max_versions: str=None):
        """SiteConfig - a model defined in OpenAPI

        :param cloud_logging_enabled: The cloud_logging_enabled of this SiteConfig.
        :param max_versions: The max_versions of this SiteConfig.
        """
        self.openapi_types = {
            'cloud_logging_enabled': bool,
            'max_versions': str
        }

        self.attribute_map = {
            'cloud_logging_enabled': 'cloudLoggingEnabled',
            'max_versions': 'maxVersions'
        }

        self._cloud_logging_enabled = cloud_logging_enabled
        self._max_versions = max_versions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteConfig of this SiteConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_logging_enabled(self):
        """Gets the cloud_logging_enabled of this SiteConfig.

        Whether or not web requests made by site visitors are logged via Cloud Logging.

        :return: The cloud_logging_enabled of this SiteConfig.
        :rtype: bool
        """
        return self._cloud_logging_enabled

    @cloud_logging_enabled.setter
    def cloud_logging_enabled(self, cloud_logging_enabled):
        """Sets the cloud_logging_enabled of this SiteConfig.

        Whether or not web requests made by site visitors are logged via Cloud Logging.

        :param cloud_logging_enabled: The cloud_logging_enabled of this SiteConfig.
        :type cloud_logging_enabled: bool
        """

        self._cloud_logging_enabled = cloud_logging_enabled

    @property
    def max_versions(self):
        """Gets the max_versions of this SiteConfig.

        The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.

        :return: The max_versions of this SiteConfig.
        :rtype: str
        """
        return self._max_versions

    @max_versions.setter
    def max_versions(self, max_versions):
        """Sets the max_versions of this SiteConfig.

        The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.

        :param max_versions: The max_versions of this SiteConfig.
        :type max_versions: str
        """

        self._max_versions = max_versions
