# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UndeleteCustomDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, validate_only: bool=None):
        """UndeleteCustomDomainRequest - a model defined in OpenAPI

        :param etag: The etag of this UndeleteCustomDomainRequest.
        :param validate_only: The validate_only of this UndeleteCustomDomainRequest.
        """
        self.openapi_types = {
            'etag': str,
            'validate_only': bool
        }

        self.attribute_map = {
            'etag': 'etag',
            'validate_only': 'validateOnly'
        }

        self._etag = etag
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UndeleteCustomDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UndeleteCustomDomainRequest of this UndeleteCustomDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this UndeleteCustomDomainRequest.

        A tag that represents the state of the `CustomDomain` as you know it. If present, the supplied tag must match the current value on your `CustomDomain`, or the request fails.

        :return: The etag of this UndeleteCustomDomainRequest.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this UndeleteCustomDomainRequest.

        A tag that represents the state of the `CustomDomain` as you know it. If present, the supplied tag must match the current value on your `CustomDomain`, or the request fails.

        :param etag: The etag of this UndeleteCustomDomainRequest.
        :type etag: str
        """

        self._etag = etag

    @property
    def validate_only(self):
        """Gets the validate_only of this UndeleteCustomDomainRequest.

        If true, Hosting validates that it's possible to complete your request but doesn't actually delete the `CustomDomain`.

        :return: The validate_only of this UndeleteCustomDomainRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this UndeleteCustomDomainRequest.

        If true, Hosting validates that it's possible to complete your request but doesn't actually delete the `CustomDomain`.

        :param validate_only: The validate_only of this UndeleteCustomDomainRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
