# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.release import Release
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, expire_time: str=None, labels: Dict[str, str]=None, name: str=None, release: Release=None, retained_release_count: int=None, ttl: str=None, update_time: str=None, url: str=None):
        """Channel - a model defined in OpenAPI

        :param create_time: The create_time of this Channel.
        :param expire_time: The expire_time of this Channel.
        :param labels: The labels of this Channel.
        :param name: The name of this Channel.
        :param release: The release of this Channel.
        :param retained_release_count: The retained_release_count of this Channel.
        :param ttl: The ttl of this Channel.
        :param update_time: The update_time of this Channel.
        :param url: The url of this Channel.
        """
        self.openapi_types = {
            'create_time': str,
            'expire_time': str,
            'labels': Dict[str, str],
            'name': str,
            'release': Release,
            'retained_release_count': int,
            'ttl': str,
            'update_time': str,
            'url': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'expire_time': 'expireTime',
            'labels': 'labels',
            'name': 'name',
            'release': 'release',
            'retained_release_count': 'retainedReleaseCount',
            'ttl': 'ttl',
            'update_time': 'updateTime',
            'url': 'url'
        }

        self._create_time = create_time
        self._expire_time = expire_time
        self._labels = labels
        self._name = name
        self._release = release
        self._retained_release_count = retained_release_count
        self._ttl = ttl
        self._update_time = update_time
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Channel.

        Output only. The time at which the channel was created.

        :return: The create_time of this Channel.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Channel.

        Output only. The time at which the channel was created.

        :param create_time: The create_time of this Channel.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def expire_time(self):
        """Gets the expire_time of this Channel.

        The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.

        :return: The expire_time of this Channel.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Channel.

        The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.

        :param expire_time: The expire_time of this Channel.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def labels(self):
        """Gets the labels of this Channel.

        Text labels used for extra metadata and/or filtering.

        :return: The labels of this Channel.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Channel.

        Text labels used for extra metadata and/or filtering.

        :param labels: The labels of this Channel.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Channel.

        The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID

        :return: The name of this Channel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.

        The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID

        :param name: The name of this Channel.
        :type name: str
        """

        self._name = name

    @property
    def release(self):
        """Gets the release of this Channel.


        :return: The release of this Channel.
        :rtype: Release
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Channel.


        :param release: The release of this Channel.
        :type release: Release
        """

        self._release = release

    @property
    def retained_release_count(self):
        """Gets the retained_release_count of this Channel.

        The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.

        :return: The retained_release_count of this Channel.
        :rtype: int
        """
        return self._retained_release_count

    @retained_release_count.setter
    def retained_release_count(self, retained_release_count):
        """Sets the retained_release_count of this Channel.

        The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.

        :param retained_release_count: The retained_release_count of this Channel.
        :type retained_release_count: int
        """

        self._retained_release_count = retained_release_count

    @property
    def ttl(self):
        """Gets the ttl of this Channel.

        Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.

        :return: The ttl of this Channel.
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this Channel.

        Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.

        :param ttl: The ttl of this Channel.
        :type ttl: str
        """

        self._ttl = ttl

    @property
    def update_time(self):
        """Gets the update_time of this Channel.

        Output only. The time at which the channel was last updated.

        :return: The update_time of this Channel.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Channel.

        Output only. The time at which the channel was last updated.

        :param update_time: The update_time of this Channel.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def url(self):
        """Gets the url of this Channel.

        Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.

        :return: The url of this Channel.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Channel.

        Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.

        :param url: The url of this Channel.
        :type url: str
        """

        self._url = url
