# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.path_filter import PathFilter
from openapi_server import util


class CloneVersionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude: PathFilter=None, finalize: bool=None, include: PathFilter=None, source_version: str=None):
        """CloneVersionRequest - a model defined in OpenAPI

        :param exclude: The exclude of this CloneVersionRequest.
        :param finalize: The finalize of this CloneVersionRequest.
        :param include: The include of this CloneVersionRequest.
        :param source_version: The source_version of this CloneVersionRequest.
        """
        self.openapi_types = {
            'exclude': PathFilter,
            'finalize': bool,
            'include': PathFilter,
            'source_version': str
        }

        self.attribute_map = {
            'exclude': 'exclude',
            'finalize': 'finalize',
            'include': 'include',
            'source_version': 'sourceVersion'
        }

        self._exclude = exclude
        self._finalize = finalize
        self._include = include
        self._source_version = source_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneVersionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloneVersionRequest of this CloneVersionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude(self):
        """Gets the exclude of this CloneVersionRequest.


        :return: The exclude of this CloneVersionRequest.
        :rtype: PathFilter
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this CloneVersionRequest.


        :param exclude: The exclude of this CloneVersionRequest.
        :type exclude: PathFilter
        """

        self._exclude = exclude

    @property
    def finalize(self):
        """Gets the finalize of this CloneVersionRequest.

        If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.

        :return: The finalize of this CloneVersionRequest.
        :rtype: bool
        """
        return self._finalize

    @finalize.setter
    def finalize(self, finalize):
        """Sets the finalize of this CloneVersionRequest.

        If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.

        :param finalize: The finalize of this CloneVersionRequest.
        :type finalize: bool
        """

        self._finalize = finalize

    @property
    def include(self):
        """Gets the include of this CloneVersionRequest.


        :return: The include of this CloneVersionRequest.
        :rtype: PathFilter
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this CloneVersionRequest.


        :param include: The include of this CloneVersionRequest.
        :type include: PathFilter
        """

        self._include = include

    @property
    def source_version(self):
        """Gets the source_version of this CloneVersionRequest.

        Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID

        :return: The source_version of this CloneVersionRequest.
        :rtype: str
        """
        return self._source_version

    @source_version.setter
    def source_version(self, source_version):
        """Sets the source_version of this CloneVersionRequest.

        Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID

        :param source_version: The source_version of this CloneVersionRequest.
        :type source_version: str
        """

        self._source_version = source_version
