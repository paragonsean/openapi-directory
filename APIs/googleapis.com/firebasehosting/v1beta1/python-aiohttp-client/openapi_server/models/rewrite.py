# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_run_rewrite import CloudRunRewrite
from openapi_server import util


class Rewrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_links: bool=None, function: str=None, function_region: str=None, glob: str=None, path: str=None, regex: str=None, run: CloudRunRewrite=None):
        """Rewrite - a model defined in OpenAPI

        :param dynamic_links: The dynamic_links of this Rewrite.
        :param function: The function of this Rewrite.
        :param function_region: The function_region of this Rewrite.
        :param glob: The glob of this Rewrite.
        :param path: The path of this Rewrite.
        :param regex: The regex of this Rewrite.
        :param run: The run of this Rewrite.
        """
        self.openapi_types = {
            'dynamic_links': bool,
            'function': str,
            'function_region': str,
            'glob': str,
            'path': str,
            'regex': str,
            'run': CloudRunRewrite
        }

        self.attribute_map = {
            'dynamic_links': 'dynamicLinks',
            'function': 'function',
            'function_region': 'functionRegion',
            'glob': 'glob',
            'path': 'path',
            'regex': 'regex',
            'run': 'run'
        }

        self._dynamic_links = dynamic_links
        self._function = function
        self._function_region = function_region
        self._glob = glob
        self._path = path
        self._regex = regex
        self._run = run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rewrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rewrite of this Rewrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_links(self):
        """Gets the dynamic_links of this Rewrite.

        The request will be forwarded to Firebase Dynamic Links.

        :return: The dynamic_links of this Rewrite.
        :rtype: bool
        """
        return self._dynamic_links

    @dynamic_links.setter
    def dynamic_links(self, dynamic_links):
        """Sets the dynamic_links of this Rewrite.

        The request will be forwarded to Firebase Dynamic Links.

        :param dynamic_links: The dynamic_links of this Rewrite.
        :type dynamic_links: bool
        """

        self._dynamic_links = dynamic_links

    @property
    def function(self):
        """Gets the function of this Rewrite.

        The function to proxy requests to. Must match the exported function name exactly.

        :return: The function of this Rewrite.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function):
        """Sets the function of this Rewrite.

        The function to proxy requests to. Must match the exported function name exactly.

        :param function: The function of this Rewrite.
        :type function: str
        """

        self._function = function

    @property
    def function_region(self):
        """Gets the function_region of this Rewrite.

        Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.

        :return: The function_region of this Rewrite.
        :rtype: str
        """
        return self._function_region

    @function_region.setter
    def function_region(self, function_region):
        """Sets the function_region of this Rewrite.

        Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.

        :param function_region: The function_region of this Rewrite.
        :type function_region: str
        """

        self._function_region = function_region

    @property
    def glob(self):
        """Gets the glob of this Rewrite.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :return: The glob of this Rewrite.
        :rtype: str
        """
        return self._glob

    @glob.setter
    def glob(self, glob):
        """Sets the glob of this Rewrite.

        The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.

        :param glob: The glob of this Rewrite.
        :type glob: str
        """

        self._glob = glob

    @property
    def path(self):
        """Gets the path of this Rewrite.

        The URL path to rewrite the request to.

        :return: The path of this Rewrite.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Rewrite.

        The URL path to rewrite the request to.

        :param path: The path of this Rewrite.
        :type path: str
        """

        self._path = path

    @property
    def regex(self):
        """Gets the regex of this Rewrite.

        The user-supplied RE2 regular expression to match against the request URL path.

        :return: The regex of this Rewrite.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Rewrite.

        The user-supplied RE2 regular expression to match against the request URL path.

        :param regex: The regex of this Rewrite.
        :type regex: str
        """

        self._regex = regex

    @property
    def run(self):
        """Gets the run of this Rewrite.


        :return: The run of this Rewrite.
        :rtype: CloudRunRewrite
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this Rewrite.


        :param run: The run of this Rewrite.
        :type run: CloudRunRewrite
        """

        self._run = run
