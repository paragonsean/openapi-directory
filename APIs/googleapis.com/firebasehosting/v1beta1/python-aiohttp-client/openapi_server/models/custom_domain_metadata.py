# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_updates import DnsUpdates
from openapi_server.models.live_migration_step import LiveMigrationStep
from openapi_server.models.status import Status
from openapi_server import util


class CustomDomainMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_state: str=None, host_state: str=None, issues: List[Status]=None, live_migration_steps: List[LiveMigrationStep]=None, ownership_state: str=None, quick_setup_updates: DnsUpdates=None):
        """CustomDomainMetadata - a model defined in OpenAPI

        :param cert_state: The cert_state of this CustomDomainMetadata.
        :param host_state: The host_state of this CustomDomainMetadata.
        :param issues: The issues of this CustomDomainMetadata.
        :param live_migration_steps: The live_migration_steps of this CustomDomainMetadata.
        :param ownership_state: The ownership_state of this CustomDomainMetadata.
        :param quick_setup_updates: The quick_setup_updates of this CustomDomainMetadata.
        """
        self.openapi_types = {
            'cert_state': str,
            'host_state': str,
            'issues': List[Status],
            'live_migration_steps': List[LiveMigrationStep],
            'ownership_state': str,
            'quick_setup_updates': DnsUpdates
        }

        self.attribute_map = {
            'cert_state': 'certState',
            'host_state': 'hostState',
            'issues': 'issues',
            'live_migration_steps': 'liveMigrationSteps',
            'ownership_state': 'ownershipState',
            'quick_setup_updates': 'quickSetupUpdates'
        }

        self._cert_state = cert_state
        self._host_state = host_state
        self._issues = issues
        self._live_migration_steps = live_migration_steps
        self._ownership_state = ownership_state
        self._quick_setup_updates = quick_setup_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDomainMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDomainMetadata of this CustomDomainMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_state(self):
        """Gets the cert_state of this CustomDomainMetadata.

        The `CertState` of the domain name's SSL certificate.

        :return: The cert_state of this CustomDomainMetadata.
        :rtype: str
        """
        return self._cert_state

    @cert_state.setter
    def cert_state(self, cert_state):
        """Sets the cert_state of this CustomDomainMetadata.

        The `CertState` of the domain name's SSL certificate.

        :param cert_state: The cert_state of this CustomDomainMetadata.
        :type cert_state: str
        """
        allowed_values = ["CERT_STATE_UNSPECIFIED", "CERT_PREPARING", "CERT_VALIDATING", "CERT_PROPAGATING", "CERT_ACTIVE", "CERT_EXPIRING_SOON", "CERT_EXPIRED"]  # noqa: E501
        if cert_state not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_state` ({0}), must be one of {1}"
                .format(cert_state, allowed_values)
            )

        self._cert_state = cert_state

    @property
    def host_state(self):
        """Gets the host_state of this CustomDomainMetadata.

        The `HostState` of the domain name this `CustomDomain` refers to.

        :return: The host_state of this CustomDomainMetadata.
        :rtype: str
        """
        return self._host_state

    @host_state.setter
    def host_state(self, host_state):
        """Sets the host_state of this CustomDomainMetadata.

        The `HostState` of the domain name this `CustomDomain` refers to.

        :param host_state: The host_state of this CustomDomainMetadata.
        :type host_state: str
        """
        allowed_values = ["HOST_STATE_UNSPECIFIED", "HOST_UNHOSTED", "HOST_UNREACHABLE", "HOST_MISMATCH", "HOST_CONFLICT", "HOST_ACTIVE"]  # noqa: E501
        if host_state not in allowed_values:
            raise ValueError(
                "Invalid value for `host_state` ({0}), must be one of {1}"
                .format(host_state, allowed_values)
            )

        self._host_state = host_state

    @property
    def issues(self):
        """Gets the issues of this CustomDomainMetadata.

        A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.

        :return: The issues of this CustomDomainMetadata.
        :rtype: List[Status]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this CustomDomainMetadata.

        A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.

        :param issues: The issues of this CustomDomainMetadata.
        :type issues: List[Status]
        """

        self._issues = issues

    @property
    def live_migration_steps(self):
        """Gets the live_migration_steps of this CustomDomainMetadata.

        A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.

        :return: The live_migration_steps of this CustomDomainMetadata.
        :rtype: List[LiveMigrationStep]
        """
        return self._live_migration_steps

    @live_migration_steps.setter
    def live_migration_steps(self, live_migration_steps):
        """Sets the live_migration_steps of this CustomDomainMetadata.

        A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.

        :param live_migration_steps: The live_migration_steps of this CustomDomainMetadata.
        :type live_migration_steps: List[LiveMigrationStep]
        """

        self._live_migration_steps = live_migration_steps

    @property
    def ownership_state(self):
        """Gets the ownership_state of this CustomDomainMetadata.

        The `OwnershipState` of the domain name this `CustomDomain` refers to.

        :return: The ownership_state of this CustomDomainMetadata.
        :rtype: str
        """
        return self._ownership_state

    @ownership_state.setter
    def ownership_state(self, ownership_state):
        """Sets the ownership_state of this CustomDomainMetadata.

        The `OwnershipState` of the domain name this `CustomDomain` refers to.

        :param ownership_state: The ownership_state of this CustomDomainMetadata.
        :type ownership_state: str
        """
        allowed_values = ["OWNERSHIP_STATE_UNSPECIFIED", "OWNERSHIP_MISSING", "OWNERSHIP_UNREACHABLE", "OWNERSHIP_MISMATCH", "OWNERSHIP_CONFLICT", "OWNERSHIP_PENDING", "OWNERSHIP_ACTIVE"]  # noqa: E501
        if ownership_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_state` ({0}), must be one of {1}"
                .format(ownership_state, allowed_values)
            )

        self._ownership_state = ownership_state

    @property
    def quick_setup_updates(self):
        """Gets the quick_setup_updates of this CustomDomainMetadata.


        :return: The quick_setup_updates of this CustomDomainMetadata.
        :rtype: DnsUpdates
        """
        return self._quick_setup_updates

    @quick_setup_updates.setter
    def quick_setup_updates(self, quick_setup_updates):
        """Sets the quick_setup_updates of this CustomDomainMetadata.


        :param quick_setup_updates: The quick_setup_updates of this CustomDomainMetadata.
        :type quick_setup_updates: DnsUpdates
        """

        self._quick_setup_updates = quick_setup_updates
