# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.header import Header
from openapi_server.models.i18n_config import I18nConfig
from openapi_server.models.redirect import Redirect
from openapi_server.models.rewrite import Rewrite
from openapi_server import util


class ServingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_association: str=None, clean_urls: bool=None, headers: List[Header]=None, i18n: I18nConfig=None, redirects: List[Redirect]=None, rewrites: List[Rewrite]=None, trailing_slash_behavior: str=None):
        """ServingConfig - a model defined in OpenAPI

        :param app_association: The app_association of this ServingConfig.
        :param clean_urls: The clean_urls of this ServingConfig.
        :param headers: The headers of this ServingConfig.
        :param i18n: The i18n of this ServingConfig.
        :param redirects: The redirects of this ServingConfig.
        :param rewrites: The rewrites of this ServingConfig.
        :param trailing_slash_behavior: The trailing_slash_behavior of this ServingConfig.
        """
        self.openapi_types = {
            'app_association': str,
            'clean_urls': bool,
            'headers': List[Header],
            'i18n': I18nConfig,
            'redirects': List[Redirect],
            'rewrites': List[Rewrite],
            'trailing_slash_behavior': str
        }

        self.attribute_map = {
            'app_association': 'appAssociation',
            'clean_urls': 'cleanUrls',
            'headers': 'headers',
            'i18n': 'i18n',
            'redirects': 'redirects',
            'rewrites': 'rewrites',
            'trailing_slash_behavior': 'trailingSlashBehavior'
        }

        self._app_association = app_association
        self._clean_urls = clean_urls
        self._headers = headers
        self._i18n = i18n
        self._redirects = redirects
        self._rewrites = rewrites
        self._trailing_slash_behavior = trailing_slash_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServingConfig of this ServingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_association(self):
        """Gets the app_association of this ServingConfig.

        How to handle well known App Association files.

        :return: The app_association of this ServingConfig.
        :rtype: str
        """
        return self._app_association

    @app_association.setter
    def app_association(self, app_association):
        """Sets the app_association of this ServingConfig.

        How to handle well known App Association files.

        :param app_association: The app_association of this ServingConfig.
        :type app_association: str
        """
        allowed_values = ["AUTO", "NONE"]  # noqa: E501
        if app_association not in allowed_values:
            raise ValueError(
                "Invalid value for `app_association` ({0}), must be one of {1}"
                .format(app_association, allowed_values)
            )

        self._app_association = app_association

    @property
    def clean_urls(self):
        """Gets the clean_urls of this ServingConfig.

        Defines whether to drop the file extension from uploaded files.

        :return: The clean_urls of this ServingConfig.
        :rtype: bool
        """
        return self._clean_urls

    @clean_urls.setter
    def clean_urls(self, clean_urls):
        """Sets the clean_urls of this ServingConfig.

        Defines whether to drop the file extension from uploaded files.

        :param clean_urls: The clean_urls of this ServingConfig.
        :type clean_urls: bool
        """

        self._clean_urls = clean_urls

    @property
    def headers(self):
        """Gets the headers of this ServingConfig.

        An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.

        :return: The headers of this ServingConfig.
        :rtype: List[Header]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ServingConfig.

        An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.

        :param headers: The headers of this ServingConfig.
        :type headers: List[Header]
        """

        self._headers = headers

    @property
    def i18n(self):
        """Gets the i18n of this ServingConfig.


        :return: The i18n of this ServingConfig.
        :rtype: I18nConfig
        """
        return self._i18n

    @i18n.setter
    def i18n(self, i18n):
        """Sets the i18n of this ServingConfig.


        :param i18n: The i18n of this ServingConfig.
        :type i18n: I18nConfig
        """

        self._i18n = i18n

    @property
    def redirects(self):
        """Gets the redirects of this ServingConfig.

        An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.

        :return: The redirects of this ServingConfig.
        :rtype: List[Redirect]
        """
        return self._redirects

    @redirects.setter
    def redirects(self, redirects):
        """Sets the redirects of this ServingConfig.

        An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.

        :param redirects: The redirects of this ServingConfig.
        :type redirects: List[Redirect]
        """

        self._redirects = redirects

    @property
    def rewrites(self):
        """Gets the rewrites of this ServingConfig.

        An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.

        :return: The rewrites of this ServingConfig.
        :rtype: List[Rewrite]
        """
        return self._rewrites

    @rewrites.setter
    def rewrites(self, rewrites):
        """Sets the rewrites of this ServingConfig.

        An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.

        :param rewrites: The rewrites of this ServingConfig.
        :type rewrites: List[Rewrite]
        """

        self._rewrites = rewrites

    @property
    def trailing_slash_behavior(self):
        """Gets the trailing_slash_behavior of this ServingConfig.

        Defines how to handle a trailing slash in the URL path.

        :return: The trailing_slash_behavior of this ServingConfig.
        :rtype: str
        """
        return self._trailing_slash_behavior

    @trailing_slash_behavior.setter
    def trailing_slash_behavior(self, trailing_slash_behavior):
        """Sets the trailing_slash_behavior of this ServingConfig.

        Defines how to handle a trailing slash in the URL path.

        :param trailing_slash_behavior: The trailing_slash_behavior of this ServingConfig.
        :type trailing_slash_behavior: str
        """
        allowed_values = ["TRAILING_SLASH_BEHAVIOR_UNSPECIFIED", "ADD", "REMOVE"]  # noqa: E501
        if trailing_slash_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `trailing_slash_behavior` ({0}), must be one of {1}"
                .format(trailing_slash_behavior, allowed_values)
            )

        self._trailing_slash_behavior = trailing_slash_behavior
