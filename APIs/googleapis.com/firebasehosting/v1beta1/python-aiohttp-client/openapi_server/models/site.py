# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Site(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, default_url: str=None, labels: Dict[str, str]=None, name: str=None, type: str=None):
        """Site - a model defined in OpenAPI

        :param app_id: The app_id of this Site.
        :param default_url: The default_url of this Site.
        :param labels: The labels of this Site.
        :param name: The name of this Site.
        :param type: The type of this Site.
        """
        self.openapi_types = {
            'app_id': str,
            'default_url': str,
            'labels': Dict[str, str],
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'default_url': 'defaultUrl',
            'labels': 'labels',
            'name': 'name',
            'type': 'type'
        }

        self._app_id = app_id
        self._default_url = default_url
        self._labels = labels
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Site':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Site of this Site.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this Site.

        Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.

        :return: The app_id of this Site.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Site.

        Optional. The [ID of a Web App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id) associated with the Hosting site.

        :param app_id: The app_id of this Site.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def default_url(self):
        """Gets the default_url of this Site.

        Output only. The default URL for the Hosting site.

        :return: The default_url of this Site.
        :rtype: str
        """
        return self._default_url

    @default_url.setter
    def default_url(self, default_url):
        """Sets the default_url of this Site.

        Output only. The default URL for the Hosting site.

        :param default_url: The default_url of this Site.
        :type default_url: str
        """

        self._default_url = default_url

    @property
    def labels(self):
        """Gets the labels of this Site.

        Optional. User-specified labels for the Hosting site.

        :return: The labels of this Site.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Site.

        Optional. User-specified labels for the Hosting site.

        :param labels: The labels of this Site.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Site.

        Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).

        :return: The name of this Site.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.

        Output only. The fully-qualified resource name of the Hosting site, in the format: projects/PROJECT_IDENTIFIER/sites/SITE_ID PROJECT_IDENTIFIER: the Firebase project's [`ProjectNumber`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_number) ***(recommended)*** or its [`ProjectId`](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects#FirebaseProject.FIELDS.project_id). Learn more about using project identifiers in Google's [AIP 2510 standard](https://google.aip.dev/cloud/2510).

        :param name: The name of this Site.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Site.

        Output only. The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.

        :return: The type of this Site.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Site.

        Output only. The type of Hosting site. Every Firebase project has a `DEFAULT_SITE`, which is created when Hosting is provisioned for the project. All additional sites are `USER_SITE`.

        :param type: The type of this Site.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "DEFAULT_SITE", "USER_SITE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
