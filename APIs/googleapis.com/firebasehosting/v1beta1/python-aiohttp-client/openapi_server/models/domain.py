# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_provisioning import DomainProvisioning
from openapi_server.models.domain_redirect import DomainRedirect
from openapi_server import util


class Domain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, domain_redirect: DomainRedirect=None, provisioning: DomainProvisioning=None, site: str=None, status: str=None, update_time: str=None):
        """Domain - a model defined in OpenAPI

        :param domain_name: The domain_name of this Domain.
        :param domain_redirect: The domain_redirect of this Domain.
        :param provisioning: The provisioning of this Domain.
        :param site: The site of this Domain.
        :param status: The status of this Domain.
        :param update_time: The update_time of this Domain.
        """
        self.openapi_types = {
            'domain_name': str,
            'domain_redirect': DomainRedirect,
            'provisioning': DomainProvisioning,
            'site': str,
            'status': str,
            'update_time': str
        }

        self.attribute_map = {
            'domain_name': 'domainName',
            'domain_redirect': 'domainRedirect',
            'provisioning': 'provisioning',
            'site': 'site',
            'status': 'status',
            'update_time': 'updateTime'
        }

        self._domain_name = domain_name
        self._domain_redirect = domain_redirect
        self._provisioning = provisioning
        self._site = site
        self._status = status
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Domain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Domain of this Domain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this Domain.

        Required. The domain name of the association.

        :return: The domain_name of this Domain.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this Domain.

        Required. The domain name of the association.

        :param domain_name: The domain_name of this Domain.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def domain_redirect(self):
        """Gets the domain_redirect of this Domain.


        :return: The domain_redirect of this Domain.
        :rtype: DomainRedirect
        """
        return self._domain_redirect

    @domain_redirect.setter
    def domain_redirect(self, domain_redirect):
        """Sets the domain_redirect of this Domain.


        :param domain_redirect: The domain_redirect of this Domain.
        :type domain_redirect: DomainRedirect
        """

        self._domain_redirect = domain_redirect

    @property
    def provisioning(self):
        """Gets the provisioning of this Domain.


        :return: The provisioning of this Domain.
        :rtype: DomainProvisioning
        """
        return self._provisioning

    @provisioning.setter
    def provisioning(self, provisioning):
        """Sets the provisioning of this Domain.


        :param provisioning: The provisioning of this Domain.
        :type provisioning: DomainProvisioning
        """

        self._provisioning = provisioning

    @property
    def site(self):
        """Gets the site of this Domain.

        Required. The site name of the association.

        :return: The site of this Domain.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this Domain.

        Required. The site name of the association.

        :param site: The site of this Domain.
        :type site: str
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this Domain.

        Output only. Additional status of the domain association.

        :return: The status of this Domain.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Domain.

        Output only. Additional status of the domain association.

        :param status: The status of this Domain.
        :type status: str
        """
        allowed_values = ["DOMAIN_STATUS_UNSPECIFIED", "DOMAIN_CHANGE_PENDING", "DOMAIN_ACTIVE", "DOMAIN_VERIFICATION_REQUIRED", "DOMAIN_VERIFICATION_LOST"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def update_time(self):
        """Gets the update_time of this Domain.

        Output only. The time at which the domain was last updated.

        :return: The update_time of this Domain.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Domain.

        Output only. The time at which the domain was last updated.

        :param update_time: The update_time of this Domain.
        :type update_time: str
        """

        self._update_time = update_time
