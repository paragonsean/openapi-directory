# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cert_dns_challenge import CertDnsChallenge
from openapi_server.models.cert_http_challenge import CertHttpChallenge
from openapi_server import util


class DomainProvisioning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_challenge_discovered_txt: List[str]=None, cert_challenge_dns: CertDnsChallenge=None, cert_challenge_http: CertHttpChallenge=None, cert_status: str=None, discovered_ips: List[str]=None, dns_fetch_time: str=None, dns_status: str=None, expected_ips: List[str]=None):
        """DomainProvisioning - a model defined in OpenAPI

        :param cert_challenge_discovered_txt: The cert_challenge_discovered_txt of this DomainProvisioning.
        :param cert_challenge_dns: The cert_challenge_dns of this DomainProvisioning.
        :param cert_challenge_http: The cert_challenge_http of this DomainProvisioning.
        :param cert_status: The cert_status of this DomainProvisioning.
        :param discovered_ips: The discovered_ips of this DomainProvisioning.
        :param dns_fetch_time: The dns_fetch_time of this DomainProvisioning.
        :param dns_status: The dns_status of this DomainProvisioning.
        :param expected_ips: The expected_ips of this DomainProvisioning.
        """
        self.openapi_types = {
            'cert_challenge_discovered_txt': List[str],
            'cert_challenge_dns': CertDnsChallenge,
            'cert_challenge_http': CertHttpChallenge,
            'cert_status': str,
            'discovered_ips': List[str],
            'dns_fetch_time': str,
            'dns_status': str,
            'expected_ips': List[str]
        }

        self.attribute_map = {
            'cert_challenge_discovered_txt': 'certChallengeDiscoveredTxt',
            'cert_challenge_dns': 'certChallengeDns',
            'cert_challenge_http': 'certChallengeHttp',
            'cert_status': 'certStatus',
            'discovered_ips': 'discoveredIps',
            'dns_fetch_time': 'dnsFetchTime',
            'dns_status': 'dnsStatus',
            'expected_ips': 'expectedIps'
        }

        self._cert_challenge_discovered_txt = cert_challenge_discovered_txt
        self._cert_challenge_dns = cert_challenge_dns
        self._cert_challenge_http = cert_challenge_http
        self._cert_status = cert_status
        self._discovered_ips = discovered_ips
        self._dns_fetch_time = dns_fetch_time
        self._dns_status = dns_status
        self._expected_ips = expected_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainProvisioning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainProvisioning of this DomainProvisioning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_challenge_discovered_txt(self):
        """Gets the cert_challenge_discovered_txt of this DomainProvisioning.

        The TXT records (for the certificate challenge) that were found at the last DNS fetch.

        :return: The cert_challenge_discovered_txt of this DomainProvisioning.
        :rtype: List[str]
        """
        return self._cert_challenge_discovered_txt

    @cert_challenge_discovered_txt.setter
    def cert_challenge_discovered_txt(self, cert_challenge_discovered_txt):
        """Sets the cert_challenge_discovered_txt of this DomainProvisioning.

        The TXT records (for the certificate challenge) that were found at the last DNS fetch.

        :param cert_challenge_discovered_txt: The cert_challenge_discovered_txt of this DomainProvisioning.
        :type cert_challenge_discovered_txt: List[str]
        """

        self._cert_challenge_discovered_txt = cert_challenge_discovered_txt

    @property
    def cert_challenge_dns(self):
        """Gets the cert_challenge_dns of this DomainProvisioning.


        :return: The cert_challenge_dns of this DomainProvisioning.
        :rtype: CertDnsChallenge
        """
        return self._cert_challenge_dns

    @cert_challenge_dns.setter
    def cert_challenge_dns(self, cert_challenge_dns):
        """Sets the cert_challenge_dns of this DomainProvisioning.


        :param cert_challenge_dns: The cert_challenge_dns of this DomainProvisioning.
        :type cert_challenge_dns: CertDnsChallenge
        """

        self._cert_challenge_dns = cert_challenge_dns

    @property
    def cert_challenge_http(self):
        """Gets the cert_challenge_http of this DomainProvisioning.


        :return: The cert_challenge_http of this DomainProvisioning.
        :rtype: CertHttpChallenge
        """
        return self._cert_challenge_http

    @cert_challenge_http.setter
    def cert_challenge_http(self, cert_challenge_http):
        """Sets the cert_challenge_http of this DomainProvisioning.


        :param cert_challenge_http: The cert_challenge_http of this DomainProvisioning.
        :type cert_challenge_http: CertHttpChallenge
        """

        self._cert_challenge_http = cert_challenge_http

    @property
    def cert_status(self):
        """Gets the cert_status of this DomainProvisioning.

        The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.

        :return: The cert_status of this DomainProvisioning.
        :rtype: str
        """
        return self._cert_status

    @cert_status.setter
    def cert_status(self, cert_status):
        """Sets the cert_status of this DomainProvisioning.

        The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.

        :param cert_status: The cert_status of this DomainProvisioning.
        :type cert_status: str
        """
        allowed_values = ["CERT_STATUS_UNSPECIFIED", "CERT_PENDING", "CERT_MISSING", "CERT_PROCESSING", "CERT_PROPAGATING", "CERT_ACTIVE", "CERT_ERROR"]  # noqa: E501
        if cert_status not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_status` ({0}), must be one of {1}"
                .format(cert_status, allowed_values)
            )

        self._cert_status = cert_status

    @property
    def discovered_ips(self):
        """Gets the discovered_ips of this DomainProvisioning.

        The IPs found at the last DNS fetch.

        :return: The discovered_ips of this DomainProvisioning.
        :rtype: List[str]
        """
        return self._discovered_ips

    @discovered_ips.setter
    def discovered_ips(self, discovered_ips):
        """Sets the discovered_ips of this DomainProvisioning.

        The IPs found at the last DNS fetch.

        :param discovered_ips: The discovered_ips of this DomainProvisioning.
        :type discovered_ips: List[str]
        """

        self._discovered_ips = discovered_ips

    @property
    def dns_fetch_time(self):
        """Gets the dns_fetch_time of this DomainProvisioning.

        The time at which the last DNS fetch occurred.

        :return: The dns_fetch_time of this DomainProvisioning.
        :rtype: str
        """
        return self._dns_fetch_time

    @dns_fetch_time.setter
    def dns_fetch_time(self, dns_fetch_time):
        """Sets the dns_fetch_time of this DomainProvisioning.

        The time at which the last DNS fetch occurred.

        :param dns_fetch_time: The dns_fetch_time of this DomainProvisioning.
        :type dns_fetch_time: str
        """

        self._dns_fetch_time = dns_fetch_time

    @property
    def dns_status(self):
        """Gets the dns_status of this DomainProvisioning.

        The DNS record match status as of the last DNS fetch.

        :return: The dns_status of this DomainProvisioning.
        :rtype: str
        """
        return self._dns_status

    @dns_status.setter
    def dns_status(self, dns_status):
        """Sets the dns_status of this DomainProvisioning.

        The DNS record match status as of the last DNS fetch.

        :param dns_status: The dns_status of this DomainProvisioning.
        :type dns_status: str
        """
        allowed_values = ["DNS_STATUS_UNSPECIFIED", "DNS_PENDING", "DNS_MISSING", "DNS_PARTIAL_MATCH", "DNS_MATCH", "DNS_EXTRANEOUS_MATCH"]  # noqa: E501
        if dns_status not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_status` ({0}), must be one of {1}"
                .format(dns_status, allowed_values)
            )

        self._dns_status = dns_status

    @property
    def expected_ips(self):
        """Gets the expected_ips of this DomainProvisioning.

        The list of IPs to which the domain is expected to resolve.

        :return: The expected_ips of this DomainProvisioning.
        :rtype: List[str]
        """
        return self._expected_ips

    @expected_ips.setter
    def expected_ips(self, expected_ips):
        """Sets the expected_ips of this DomainProvisioning.

        The list of IPs to which the domain is expected to resolve.

        :param expected_ips: The expected_ips of this DomainProvisioning.
        :type expected_ips: List[str]
        """

        self._expected_ips = expected_ips
