# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.certificate import Certificate
from openapi_server.models.dns_updates import DnsUpdates
from openapi_server.models.status import Status
from openapi_server import util


class CustomDomain(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, cert: Certificate=None, cert_preference: str=None, create_time: str=None, delete_time: str=None, etag: str=None, expire_time: str=None, host_state: str=None, issues: List[Status]=None, labels: Dict[str, str]=None, name: str=None, ownership_state: str=None, reconciling: bool=None, redirect_target: str=None, required_dns_updates: DnsUpdates=None, update_time: str=None):
        """CustomDomain - a model defined in OpenAPI

        :param annotations: The annotations of this CustomDomain.
        :param cert: The cert of this CustomDomain.
        :param cert_preference: The cert_preference of this CustomDomain.
        :param create_time: The create_time of this CustomDomain.
        :param delete_time: The delete_time of this CustomDomain.
        :param etag: The etag of this CustomDomain.
        :param expire_time: The expire_time of this CustomDomain.
        :param host_state: The host_state of this CustomDomain.
        :param issues: The issues of this CustomDomain.
        :param labels: The labels of this CustomDomain.
        :param name: The name of this CustomDomain.
        :param ownership_state: The ownership_state of this CustomDomain.
        :param reconciling: The reconciling of this CustomDomain.
        :param redirect_target: The redirect_target of this CustomDomain.
        :param required_dns_updates: The required_dns_updates of this CustomDomain.
        :param update_time: The update_time of this CustomDomain.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'cert': Certificate,
            'cert_preference': str,
            'create_time': str,
            'delete_time': str,
            'etag': str,
            'expire_time': str,
            'host_state': str,
            'issues': List[Status],
            'labels': Dict[str, str],
            'name': str,
            'ownership_state': str,
            'reconciling': bool,
            'redirect_target': str,
            'required_dns_updates': DnsUpdates,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'cert': 'cert',
            'cert_preference': 'certPreference',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'host_state': 'hostState',
            'issues': 'issues',
            'labels': 'labels',
            'name': 'name',
            'ownership_state': 'ownershipState',
            'reconciling': 'reconciling',
            'redirect_target': 'redirectTarget',
            'required_dns_updates': 'requiredDnsUpdates',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._cert = cert
        self._cert_preference = cert_preference
        self._create_time = create_time
        self._delete_time = delete_time
        self._etag = etag
        self._expire_time = expire_time
        self._host_state = host_state
        self._issues = issues
        self._labels = labels
        self._name = name
        self._ownership_state = ownership_state
        self._reconciling = reconciling
        self._redirect_target = redirect_target
        self._required_dns_updates = required_dns_updates
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomDomain':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomDomain of this CustomDomain.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this CustomDomain.

        Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.

        :return: The annotations of this CustomDomain.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this CustomDomain.

        Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.

        :param annotations: The annotations of this CustomDomain.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def cert(self):
        """Gets the cert of this CustomDomain.


        :return: The cert of this CustomDomain.
        :rtype: Certificate
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this CustomDomain.


        :param cert: The cert of this CustomDomain.
        :type cert: Certificate
        """

        self._cert = cert

    @property
    def cert_preference(self):
        """Gets the cert_preference of this CustomDomain.

        A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.

        :return: The cert_preference of this CustomDomain.
        :rtype: str
        """
        return self._cert_preference

    @cert_preference.setter
    def cert_preference(self, cert_preference):
        """Sets the cert_preference of this CustomDomain.

        A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.

        :param cert_preference: The cert_preference of this CustomDomain.
        :type cert_preference: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TEMPORARY", "GROUPED", "PROJECT_GROUPED", "DEDICATED"]  # noqa: E501
        if cert_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_preference` ({0}), must be one of {1}"
                .format(cert_preference, allowed_values)
            )

        self._cert_preference = cert_preference

    @property
    def create_time(self):
        """Gets the create_time of this CustomDomain.

        Output only. The custom domain's create time.

        :return: The create_time of this CustomDomain.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this CustomDomain.

        Output only. The custom domain's create time.

        :param create_time: The create_time of this CustomDomain.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this CustomDomain.

        Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.

        :return: The delete_time of this CustomDomain.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this CustomDomain.

        Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.

        :param delete_time: The delete_time of this CustomDomain.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def etag(self):
        """Gets the etag of this CustomDomain.

        Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.

        :return: The etag of this CustomDomain.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this CustomDomain.

        Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.

        :param etag: The etag of this CustomDomain.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this CustomDomain.

        Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.

        :return: The expire_time of this CustomDomain.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this CustomDomain.

        Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.

        :param expire_time: The expire_time of this CustomDomain.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def host_state(self):
        """Gets the host_state of this CustomDomain.

        Output only. The `HostState` of the domain name this `CustomDomain` refers to.

        :return: The host_state of this CustomDomain.
        :rtype: str
        """
        return self._host_state

    @host_state.setter
    def host_state(self, host_state):
        """Sets the host_state of this CustomDomain.

        Output only. The `HostState` of the domain name this `CustomDomain` refers to.

        :param host_state: The host_state of this CustomDomain.
        :type host_state: str
        """
        allowed_values = ["HOST_STATE_UNSPECIFIED", "HOST_UNHOSTED", "HOST_UNREACHABLE", "HOST_MISMATCH", "HOST_CONFLICT", "HOST_ACTIVE"]  # noqa: E501
        if host_state not in allowed_values:
            raise ValueError(
                "Invalid value for `host_state` ({0}), must be one of {1}"
                .format(host_state, allowed_values)
            )

        self._host_state = host_state

    @property
    def issues(self):
        """Gets the issues of this CustomDomain.

        Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.

        :return: The issues of this CustomDomain.
        :rtype: List[Status]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this CustomDomain.

        Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.

        :param issues: The issues of this CustomDomain.
        :type issues: List[Status]
        """

        self._issues = issues

    @property
    def labels(self):
        """Gets the labels of this CustomDomain.

        Labels used for extra metadata and/or filtering.

        :return: The labels of this CustomDomain.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this CustomDomain.

        Labels used for extra metadata and/or filtering.

        :param labels: The labels of this CustomDomain.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this CustomDomain.

        Output only. The fully-qualified name of the `CustomDomain`.

        :return: The name of this CustomDomain.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomDomain.

        Output only. The fully-qualified name of the `CustomDomain`.

        :param name: The name of this CustomDomain.
        :type name: str
        """

        self._name = name

    @property
    def ownership_state(self):
        """Gets the ownership_state of this CustomDomain.

        Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.

        :return: The ownership_state of this CustomDomain.
        :rtype: str
        """
        return self._ownership_state

    @ownership_state.setter
    def ownership_state(self, ownership_state):
        """Sets the ownership_state of this CustomDomain.

        Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.

        :param ownership_state: The ownership_state of this CustomDomain.
        :type ownership_state: str
        """
        allowed_values = ["OWNERSHIP_STATE_UNSPECIFIED", "OWNERSHIP_MISSING", "OWNERSHIP_UNREACHABLE", "OWNERSHIP_MISMATCH", "OWNERSHIP_CONFLICT", "OWNERSHIP_PENDING", "OWNERSHIP_ACTIVE"]  # noqa: E501
        if ownership_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ownership_state` ({0}), must be one of {1}"
                .format(ownership_state, allowed_values)
            )

        self._ownership_state = ownership_state

    @property
    def reconciling(self):
        """Gets the reconciling of this CustomDomain.

        Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.

        :return: The reconciling of this CustomDomain.
        :rtype: bool
        """
        return self._reconciling

    @reconciling.setter
    def reconciling(self, reconciling):
        """Sets the reconciling of this CustomDomain.

        Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.

        :param reconciling: The reconciling of this CustomDomain.
        :type reconciling: bool
        """

        self._reconciling = reconciling

    @property
    def redirect_target(self):
        """Gets the redirect_target of this CustomDomain.

        A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.

        :return: The redirect_target of this CustomDomain.
        :rtype: str
        """
        return self._redirect_target

    @redirect_target.setter
    def redirect_target(self, redirect_target):
        """Sets the redirect_target of this CustomDomain.

        A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.

        :param redirect_target: The redirect_target of this CustomDomain.
        :type redirect_target: str
        """

        self._redirect_target = redirect_target

    @property
    def required_dns_updates(self):
        """Gets the required_dns_updates of this CustomDomain.


        :return: The required_dns_updates of this CustomDomain.
        :rtype: DnsUpdates
        """
        return self._required_dns_updates

    @required_dns_updates.setter
    def required_dns_updates(self, required_dns_updates):
        """Sets the required_dns_updates of this CustomDomain.


        :param required_dns_updates: The required_dns_updates of this CustomDomain.
        :type required_dns_updates: DnsUpdates
        """

        self._required_dns_updates = required_dns_updates

    @property
    def update_time(self):
        """Gets the update_time of this CustomDomain.

        Output only. The last time the `CustomDomain` was updated.

        :return: The update_time of this CustomDomain.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this CustomDomain.

        Output only. The last time the `CustomDomain` was updated.

        :param update_time: The update_time of this CustomDomain.
        :type update_time: str
        """

        self._update_time = update_time
