# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hash: str=None, path: str=None, status: str=None):
        """VersionFile - a model defined in OpenAPI

        :param hash: The hash of this VersionFile.
        :param path: The path of this VersionFile.
        :param status: The status of this VersionFile.
        """
        self.openapi_types = {
            'hash': str,
            'path': str,
            'status': str
        }

        self.attribute_map = {
            'hash': 'hash',
            'path': 'path',
            'status': 'status'
        }

        self._hash = hash
        self._path = path
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionFile of this VersionFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash(self):
        """Gets the hash of this VersionFile.

        The SHA256 content hash of the file.

        :return: The hash of this VersionFile.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this VersionFile.

        The SHA256 content hash of the file.

        :param hash: The hash of this VersionFile.
        :type hash: str
        """

        self._hash = hash

    @property
    def path(self):
        """Gets the path of this VersionFile.

        The URI at which the file's content should display.

        :return: The path of this VersionFile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VersionFile.

        The URI at which the file's content should display.

        :param path: The path of this VersionFile.
        :type path: str
        """

        self._path = path

    @property
    def status(self):
        """Gets the status of this VersionFile.

        Output only. The current status of a particular file in the specified version. The value will be either `pending upload` or `uploaded`.

        :return: The status of this VersionFile.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VersionFile.

        Output only. The current status of a particular file in the specified version. The value will be either `pending upload` or `uploaded`.

        :param status: The status of this VersionFile.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "EXPECTED", "ACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
