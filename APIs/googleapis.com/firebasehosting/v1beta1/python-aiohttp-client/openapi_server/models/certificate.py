# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cert_verification import CertVerification
from openapi_server.models.status import Status
from openapi_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, expire_time: str=None, issues: List[Status]=None, state: str=None, type: str=None, verification: CertVerification=None):
        """Certificate - a model defined in OpenAPI

        :param create_time: The create_time of this Certificate.
        :param expire_time: The expire_time of this Certificate.
        :param issues: The issues of this Certificate.
        :param state: The state of this Certificate.
        :param type: The type of this Certificate.
        :param verification: The verification of this Certificate.
        """
        self.openapi_types = {
            'create_time': str,
            'expire_time': str,
            'issues': List[Status],
            'state': str,
            'type': str,
            'verification': CertVerification
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'expire_time': 'expireTime',
            'issues': 'issues',
            'state': 'state',
            'type': 'type',
            'verification': 'verification'
        }

        self._create_time = create_time
        self._expire_time = expire_time
        self._issues = issues
        self._state = state
        self._type = type
        self._verification = verification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate of this Certificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Certificate.

        Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.

        :return: The create_time of this Certificate.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Certificate.

        Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.

        :param create_time: The create_time of this Certificate.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def expire_time(self):
        """Gets the expire_time of this Certificate.

        Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.

        :return: The expire_time of this Certificate.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Certificate.

        Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.

        :param expire_time: The expire_time of this Certificate.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def issues(self):
        """Gets the issues of this Certificate.

        Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.

        :return: The issues of this Certificate.
        :rtype: List[Status]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Certificate.

        Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.

        :param issues: The issues of this Certificate.
        :type issues: List[Status]
        """

        self._issues = issues

    @property
    def state(self):
        """Gets the state of this Certificate.

        Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.

        :return: The state of this Certificate.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Certificate.

        Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.

        :param state: The state of this Certificate.
        :type state: str
        """
        allowed_values = ["CERT_STATE_UNSPECIFIED", "CERT_PREPARING", "CERT_VALIDATING", "CERT_PROPAGATING", "CERT_ACTIVE", "CERT_EXPIRING_SOON", "CERT_EXPIRED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Certificate.

        Output only. The certificate's type.

        :return: The type of this Certificate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Certificate.

        Output only. The certificate's type.

        :param type: The type of this Certificate.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TEMPORARY", "GROUPED", "PROJECT_GROUPED", "DEDICATED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def verification(self):
        """Gets the verification of this Certificate.


        :return: The verification of this Certificate.
        :rtype: CertVerification
        """
        return self._verification

    @verification.setter
    def verification(self, verification):
        """Sets the verification of this Certificate.


        :param verification: The verification of this Certificate.
        :type verification: CertVerification
        """

        self._verification = verification
