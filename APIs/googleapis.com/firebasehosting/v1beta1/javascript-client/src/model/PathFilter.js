/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PathFilter model module.
 * @module model/PathFilter
 * @version v1beta1
 */
class PathFilter {
    /**
     * Constructs a new <code>PathFilter</code>.
     * A representation of filter path.
     * @alias module:model/PathFilter
     */
    constructor() { 
        
        PathFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PathFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PathFilter} obj Optional instance to populate.
     * @return {module:model/PathFilter} The populated <code>PathFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PathFilter();

            if (data.hasOwnProperty('regexes')) {
                obj['regexes'] = ApiClient.convertToType(data['regexes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PathFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PathFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['regexes'])) {
            throw new Error("Expected the field `regexes` to be an array in the JSON data but got " + data['regexes']);
        }

        return true;
    }


}



/**
 * An array of RegEx values by which to filter.
 * @member {Array.<String>} regexes
 */
PathFilter.prototype['regexes'] = undefined;






export default PathFilter;

