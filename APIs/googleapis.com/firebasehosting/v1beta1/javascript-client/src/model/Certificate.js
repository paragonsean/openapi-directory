/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertVerification from './CertVerification';
import Status from './Status';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version v1beta1
 */
class Certificate {
    /**
     * Constructs a new <code>Certificate</code>.
     * An SSL certificate used to provide end-to-end encryption for requests against your domain name. A &#x60;Certificate&#x60; can be an actual SSL certificate or, for newly-created custom domains, Hosting&#39;s intent to create one.
     * @alias module:model/Certificate
     */
    constructor() { 
        
        Certificate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Certificate} obj Optional instance to populate.
     * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Certificate();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [Status]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('verification')) {
                obj['verification'] = CertVerification.constructFromObject(data['verification']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Certificate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `verification`
        if (data['verification']) { // data not null
          CertVerification.validateJSON(data['verification']);
        }

        return true;
    }


}



/**
 * Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.
 * @member {String} createTime
 */
Certificate.prototype['createTime'] = undefined;

/**
 * Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.
 * @member {String} expireTime
 */
Certificate.prototype['expireTime'] = undefined;

/**
 * Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.
 * @member {Array.<module:model/Status>} issues
 */
Certificate.prototype['issues'] = undefined;

/**
 * Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.
 * @member {module:model/Certificate.StateEnum} state
 */
Certificate.prototype['state'] = undefined;

/**
 * Output only. The certificate's type.
 * @member {module:model/Certificate.TypeEnum} type
 */
Certificate.prototype['type'] = undefined;

/**
 * @member {module:model/CertVerification} verification
 */
Certificate.prototype['verification'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['StateEnum'] = {

    /**
     * value: "CERT_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "CERT_STATE_UNSPECIFIED",

    /**
     * value: "CERT_PREPARING"
     * @const
     */
    "PREPARING": "CERT_PREPARING",

    /**
     * value: "CERT_VALIDATING"
     * @const
     */
    "VALIDATING": "CERT_VALIDATING",

    /**
     * value: "CERT_PROPAGATING"
     * @const
     */
    "PROPAGATING": "CERT_PROPAGATING",

    /**
     * value: "CERT_ACTIVE"
     * @const
     */
    "ACTIVE": "CERT_ACTIVE",

    /**
     * value: "CERT_EXPIRING_SOON"
     * @const
     */
    "EXPIRING_SOON": "CERT_EXPIRING_SOON",

    /**
     * value: "CERT_EXPIRED"
     * @const
     */
    "EXPIRED": "CERT_EXPIRED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Certificate['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "TEMPORARY"
     * @const
     */
    "TEMPORARY": "TEMPORARY",

    /**
     * value: "GROUPED"
     * @const
     */
    "GROUPED": "GROUPED",

    /**
     * value: "PROJECT_GROUPED"
     * @const
     */
    "PROJECT_GROUPED": "PROJECT_GROUPED",

    /**
     * value: "DEDICATED"
     * @const
     */
    "DEDICATED": "DEDICATED"
};



export default Certificate;

