/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Certificate from './Certificate';
import DnsUpdates from './DnsUpdates';
import Status from './Status';

/**
 * The CustomDomain model module.
 * @module model/CustomDomain
 * @version v1beta1
 */
class CustomDomain {
    /**
     * Constructs a new <code>CustomDomain</code>.
     * A &#x60;CustomDomain&#x60; is an entity that links a domain name to a Firebase Hosting site. Add a &#x60;CustomDomain&#x60; to your site to allow Hosting to serve the site&#39;s content in response to requests against your domain name.
     * @alias module:model/CustomDomain
     */
    constructor() { 
        
        CustomDomain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomDomain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomain} obj Optional instance to populate.
     * @return {module:model/CustomDomain} The populated <code>CustomDomain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomain();

            if (data.hasOwnProperty('annotations')) {
                obj['annotations'] = ApiClient.convertToType(data['annotations'], {'String': 'String'});
            }
            if (data.hasOwnProperty('cert')) {
                obj['cert'] = Certificate.constructFromObject(data['cert']);
            }
            if (data.hasOwnProperty('certPreference')) {
                obj['certPreference'] = ApiClient.convertToType(data['certPreference'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('hostState')) {
                obj['hostState'] = ApiClient.convertToType(data['hostState'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [Status]);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownershipState')) {
                obj['ownershipState'] = ApiClient.convertToType(data['ownershipState'], 'String');
            }
            if (data.hasOwnProperty('reconciling')) {
                obj['reconciling'] = ApiClient.convertToType(data['reconciling'], 'Boolean');
            }
            if (data.hasOwnProperty('redirectTarget')) {
                obj['redirectTarget'] = ApiClient.convertToType(data['redirectTarget'], 'String');
            }
            if (data.hasOwnProperty('requiredDnsUpdates')) {
                obj['requiredDnsUpdates'] = DnsUpdates.constructFromObject(data['requiredDnsUpdates']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDomain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDomain</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cert`
        if (data['cert']) { // data not null
          Certificate.validateJSON(data['cert']);
        }
        // ensure the json data is a string
        if (data['certPreference'] && !(typeof data['certPreference'] === 'string' || data['certPreference'] instanceof String)) {
            throw new Error("Expected the field `certPreference` to be a primitive type in the JSON string but got " + data['certPreference']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['hostState'] && !(typeof data['hostState'] === 'string' || data['hostState'] instanceof String)) {
            throw new Error("Expected the field `hostState` to be a primitive type in the JSON string but got " + data['hostState']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownershipState'] && !(typeof data['ownershipState'] === 'string' || data['ownershipState'] instanceof String)) {
            throw new Error("Expected the field `ownershipState` to be a primitive type in the JSON string but got " + data['ownershipState']);
        }
        // ensure the json data is a string
        if (data['redirectTarget'] && !(typeof data['redirectTarget'] === 'string' || data['redirectTarget'] instanceof String)) {
            throw new Error("Expected the field `redirectTarget` to be a primitive type in the JSON string but got " + data['redirectTarget']);
        }
        // validate the optional field `requiredDnsUpdates`
        if (data['requiredDnsUpdates']) { // data not null
          DnsUpdates.validateJSON(data['requiredDnsUpdates']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.
 * @member {Object.<String, String>} annotations
 */
CustomDomain.prototype['annotations'] = undefined;

/**
 * @member {module:model/Certificate} cert
 */
CustomDomain.prototype['cert'] = undefined;

/**
 * A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.
 * @member {module:model/CustomDomain.CertPreferenceEnum} certPreference
 */
CustomDomain.prototype['certPreference'] = undefined;

/**
 * Output only. The custom domain's create time.
 * @member {String} createTime
 */
CustomDomain.prototype['createTime'] = undefined;

/**
 * Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.
 * @member {String} deleteTime
 */
CustomDomain.prototype['deleteTime'] = undefined;

/**
 * Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.
 * @member {String} etag
 */
CustomDomain.prototype['etag'] = undefined;

/**
 * Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.
 * @member {String} expireTime
 */
CustomDomain.prototype['expireTime'] = undefined;

/**
 * Output only. The `HostState` of the domain name this `CustomDomain` refers to.
 * @member {module:model/CustomDomain.HostStateEnum} hostState
 */
CustomDomain.prototype['hostState'] = undefined;

/**
 * Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.
 * @member {Array.<module:model/Status>} issues
 */
CustomDomain.prototype['issues'] = undefined;

/**
 * Labels used for extra metadata and/or filtering.
 * @member {Object.<String, String>} labels
 */
CustomDomain.prototype['labels'] = undefined;

/**
 * Output only. The fully-qualified name of the `CustomDomain`.
 * @member {String} name
 */
CustomDomain.prototype['name'] = undefined;

/**
 * Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.
 * @member {module:model/CustomDomain.OwnershipStateEnum} ownershipState
 */
CustomDomain.prototype['ownershipState'] = undefined;

/**
 * Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.
 * @member {Boolean} reconciling
 */
CustomDomain.prototype['reconciling'] = undefined;

/**
 * A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.
 * @member {String} redirectTarget
 */
CustomDomain.prototype['redirectTarget'] = undefined;

/**
 * @member {module:model/DnsUpdates} requiredDnsUpdates
 */
CustomDomain.prototype['requiredDnsUpdates'] = undefined;

/**
 * Output only. The last time the `CustomDomain` was updated.
 * @member {String} updateTime
 */
CustomDomain.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>certPreference</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomain['CertPreferenceEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "TEMPORARY"
     * @const
     */
    "TEMPORARY": "TEMPORARY",

    /**
     * value: "GROUPED"
     * @const
     */
    "GROUPED": "GROUPED",

    /**
     * value: "PROJECT_GROUPED"
     * @const
     */
    "PROJECT_GROUPED": "PROJECT_GROUPED",

    /**
     * value: "DEDICATED"
     * @const
     */
    "DEDICATED": "DEDICATED"
};


/**
 * Allowed values for the <code>hostState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomain['HostStateEnum'] = {

    /**
     * value: "HOST_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "HOST_STATE_UNSPECIFIED",

    /**
     * value: "HOST_UNHOSTED"
     * @const
     */
    "UNHOSTED": "HOST_UNHOSTED",

    /**
     * value: "HOST_UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "HOST_UNREACHABLE",

    /**
     * value: "HOST_MISMATCH"
     * @const
     */
    "MISMATCH": "HOST_MISMATCH",

    /**
     * value: "HOST_CONFLICT"
     * @const
     */
    "CONFLICT": "HOST_CONFLICT",

    /**
     * value: "HOST_ACTIVE"
     * @const
     */
    "ACTIVE": "HOST_ACTIVE"
};


/**
 * Allowed values for the <code>ownershipState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomain['OwnershipStateEnum'] = {

    /**
     * value: "OWNERSHIP_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "OWNERSHIP_STATE_UNSPECIFIED",

    /**
     * value: "OWNERSHIP_MISSING"
     * @const
     */
    "MISSING": "OWNERSHIP_MISSING",

    /**
     * value: "OWNERSHIP_UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "OWNERSHIP_UNREACHABLE",

    /**
     * value: "OWNERSHIP_MISMATCH"
     * @const
     */
    "MISMATCH": "OWNERSHIP_MISMATCH",

    /**
     * value: "OWNERSHIP_CONFLICT"
     * @const
     */
    "CONFLICT": "OWNERSHIP_CONFLICT",

    /**
     * value: "OWNERSHIP_PENDING"
     * @const
     */
    "PENDING": "OWNERSHIP_PENDING",

    /**
     * value: "OWNERSHIP_ACTIVE"
     * @const
     */
    "ACTIVE": "OWNERSHIP_ACTIVE"
};



export default CustomDomain;

