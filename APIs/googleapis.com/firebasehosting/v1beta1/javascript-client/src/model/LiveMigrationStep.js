/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertVerification from './CertVerification';
import DnsUpdates from './DnsUpdates';
import Status from './Status';

/**
 * The LiveMigrationStep model module.
 * @module model/LiveMigrationStep
 * @version v1beta1
 */
class LiveMigrationStep {
    /**
     * Constructs a new <code>LiveMigrationStep</code>.
     * A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL certificate and establish project ownership for your domain name before you direct traffic to Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other services. After you&#39;ve made the recommended updates, check your custom domain&#39;s &#x60;ownershipState&#x60; and &#x60;certState&#x60;. To avoid downtime, they should be &#x60;OWNERSHIP_ACTIVE&#x60; and &#x60;CERT_ACTIVE&#x60;, respectively, before you update your &#x60;A&#x60; and &#x60;AAAA&#x60; records.
     * @alias module:model/LiveMigrationStep
     */
    constructor() { 
        
        LiveMigrationStep.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LiveMigrationStep</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiveMigrationStep} obj Optional instance to populate.
     * @return {module:model/LiveMigrationStep} The populated <code>LiveMigrationStep</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiveMigrationStep();

            if (data.hasOwnProperty('certVerification')) {
                obj['certVerification'] = CertVerification.constructFromObject(data['certVerification']);
            }
            if (data.hasOwnProperty('dnsUpdates')) {
                obj['dnsUpdates'] = DnsUpdates.constructFromObject(data['dnsUpdates']);
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [Status]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LiveMigrationStep</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LiveMigrationStep</code>.
     */
    static validateJSON(data) {
        // validate the optional field `certVerification`
        if (data['certVerification']) { // data not null
          CertVerification.validateJSON(data['certVerification']);
        }
        // validate the optional field `dnsUpdates`
        if (data['dnsUpdates']) { // data not null
          DnsUpdates.validateJSON(data['dnsUpdates']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                Status.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/CertVerification} certVerification
 */
LiveMigrationStep.prototype['certVerification'] = undefined;

/**
 * @member {module:model/DnsUpdates} dnsUpdates
 */
LiveMigrationStep.prototype['dnsUpdates'] = undefined;

/**
 * Output only. Issues that prevent the current step from completing.
 * @member {Array.<module:model/Status>} issues
 */
LiveMigrationStep.prototype['issues'] = undefined;

/**
 * Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.
 * @member {module:model/LiveMigrationStep.StateEnum} state
 */
LiveMigrationStep.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
LiveMigrationStep['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PREPARING"
     * @const
     */
    "PREPARING": "PREPARING",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "INCOMPLETE"
     * @const
     */
    "INCOMPLETE": "INCOMPLETE",

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE"
};



export default LiveMigrationStep;

