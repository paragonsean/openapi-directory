/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudRunRewrite from './CloudRunRewrite';

/**
 * The Rewrite model module.
 * @module model/Rewrite
 * @version v1beta1
 */
class Rewrite {
    /**
     * Constructs a new <code>Rewrite</code>.
     * A [&#x60;Rewrite&#x60;](https://firebase.google.com/docs/hosting/full-config#rewrites) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
     * @alias module:model/Rewrite
     */
    constructor() { 
        
        Rewrite.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Rewrite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rewrite} obj Optional instance to populate.
     * @return {module:model/Rewrite} The populated <code>Rewrite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rewrite();

            if (data.hasOwnProperty('dynamicLinks')) {
                obj['dynamicLinks'] = ApiClient.convertToType(data['dynamicLinks'], 'Boolean');
            }
            if (data.hasOwnProperty('function')) {
                obj['function'] = ApiClient.convertToType(data['function'], 'String');
            }
            if (data.hasOwnProperty('functionRegion')) {
                obj['functionRegion'] = ApiClient.convertToType(data['functionRegion'], 'String');
            }
            if (data.hasOwnProperty('glob')) {
                obj['glob'] = ApiClient.convertToType(data['glob'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('run')) {
                obj['run'] = CloudRunRewrite.constructFromObject(data['run']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rewrite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rewrite</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['function'] && !(typeof data['function'] === 'string' || data['function'] instanceof String)) {
            throw new Error("Expected the field `function` to be a primitive type in the JSON string but got " + data['function']);
        }
        // ensure the json data is a string
        if (data['functionRegion'] && !(typeof data['functionRegion'] === 'string' || data['functionRegion'] instanceof String)) {
            throw new Error("Expected the field `functionRegion` to be a primitive type in the JSON string but got " + data['functionRegion']);
        }
        // ensure the json data is a string
        if (data['glob'] && !(typeof data['glob'] === 'string' || data['glob'] instanceof String)) {
            throw new Error("Expected the field `glob` to be a primitive type in the JSON string but got " + data['glob']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }
        // validate the optional field `run`
        if (data['run']) { // data not null
          CloudRunRewrite.validateJSON(data['run']);
        }

        return true;
    }


}



/**
 * The request will be forwarded to Firebase Dynamic Links.
 * @member {Boolean} dynamicLinks
 */
Rewrite.prototype['dynamicLinks'] = undefined;

/**
 * The function to proxy requests to. Must match the exported function name exactly.
 * @member {String} function
 */
Rewrite.prototype['function'] = undefined;

/**
 * Optional. Specify a Cloud region for rewritten Functions invocations. If not provided, defaults to us-central1.
 * @member {String} functionRegion
 */
Rewrite.prototype['functionRegion'] = undefined;

/**
 * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
 * @member {String} glob
 */
Rewrite.prototype['glob'] = undefined;

/**
 * The URL path to rewrite the request to.
 * @member {String} path
 */
Rewrite.prototype['path'] = undefined;

/**
 * The user-supplied RE2 regular expression to match against the request URL path.
 * @member {String} regex
 */
Rewrite.prototype['regex'] = undefined;

/**
 * @member {module:model/CloudRunRewrite} run
 */
Rewrite.prototype['run'] = undefined;






export default Rewrite;

