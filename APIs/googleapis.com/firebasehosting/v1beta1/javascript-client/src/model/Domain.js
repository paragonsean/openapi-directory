/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainProvisioning from './DomainProvisioning';
import DomainRedirect from './DomainRedirect';

/**
 * The Domain model module.
 * @module model/Domain
 * @version v1beta1
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * The intended behavior and status information of a domain.
     * @alias module:model/Domain
     */
    constructor() { 
        
        Domain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();

            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('domainRedirect')) {
                obj['domainRedirect'] = DomainRedirect.constructFromObject(data['domainRedirect']);
            }
            if (data.hasOwnProperty('provisioning')) {
                obj['provisioning'] = DomainProvisioning.constructFromObject(data['provisioning']);
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = ApiClient.convertToType(data['site'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Domain</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Domain</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // validate the optional field `domainRedirect`
        if (data['domainRedirect']) { // data not null
          DomainRedirect.validateJSON(data['domainRedirect']);
        }
        // validate the optional field `provisioning`
        if (data['provisioning']) { // data not null
          DomainProvisioning.validateJSON(data['provisioning']);
        }
        // ensure the json data is a string
        if (data['site'] && !(typeof data['site'] === 'string' || data['site'] instanceof String)) {
            throw new Error("Expected the field `site` to be a primitive type in the JSON string but got " + data['site']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Required. The domain name of the association.
 * @member {String} domainName
 */
Domain.prototype['domainName'] = undefined;

/**
 * @member {module:model/DomainRedirect} domainRedirect
 */
Domain.prototype['domainRedirect'] = undefined;

/**
 * @member {module:model/DomainProvisioning} provisioning
 */
Domain.prototype['provisioning'] = undefined;

/**
 * Required. The site name of the association.
 * @member {String} site
 */
Domain.prototype['site'] = undefined;

/**
 * Output only. Additional status of the domain association.
 * @member {module:model/Domain.StatusEnum} status
 */
Domain.prototype['status'] = undefined;

/**
 * Output only. The time at which the domain was last updated.
 * @member {String} updateTime
 */
Domain.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Domain['StatusEnum'] = {

    /**
     * value: "DOMAIN_STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "DOMAIN_STATUS_UNSPECIFIED",

    /**
     * value: "DOMAIN_CHANGE_PENDING"
     * @const
     */
    "CHANGE_PENDING": "DOMAIN_CHANGE_PENDING",

    /**
     * value: "DOMAIN_ACTIVE"
     * @const
     */
    "ACTIVE": "DOMAIN_ACTIVE",

    /**
     * value: "DOMAIN_VERIFICATION_REQUIRED"
     * @const
     */
    "VERIFICATION_REQUIRED": "DOMAIN_VERIFICATION_REQUIRED",

    /**
     * value: "DOMAIN_VERIFICATION_LOST"
     * @const
     */
    "VERIFICATION_LOST": "DOMAIN_VERIFICATION_LOST"
};



export default Domain;

