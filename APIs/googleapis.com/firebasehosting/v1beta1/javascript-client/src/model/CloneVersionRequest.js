/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathFilter from './PathFilter';

/**
 * The CloneVersionRequest model module.
 * @module model/CloneVersionRequest
 * @version v1beta1
 */
class CloneVersionRequest {
    /**
     * Constructs a new <code>CloneVersionRequest</code>.
     * @alias module:model/CloneVersionRequest
     */
    constructor() { 
        
        CloneVersionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloneVersionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloneVersionRequest} obj Optional instance to populate.
     * @return {module:model/CloneVersionRequest} The populated <code>CloneVersionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloneVersionRequest();

            if (data.hasOwnProperty('exclude')) {
                obj['exclude'] = PathFilter.constructFromObject(data['exclude']);
            }
            if (data.hasOwnProperty('finalize')) {
                obj['finalize'] = ApiClient.convertToType(data['finalize'], 'Boolean');
            }
            if (data.hasOwnProperty('include')) {
                obj['include'] = PathFilter.constructFromObject(data['include']);
            }
            if (data.hasOwnProperty('sourceVersion')) {
                obj['sourceVersion'] = ApiClient.convertToType(data['sourceVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloneVersionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloneVersionRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exclude`
        if (data['exclude']) { // data not null
          PathFilter.validateJSON(data['exclude']);
        }
        // validate the optional field `include`
        if (data['include']) { // data not null
          PathFilter.validateJSON(data['include']);
        }
        // ensure the json data is a string
        if (data['sourceVersion'] && !(typeof data['sourceVersion'] === 'string' || data['sourceVersion'] instanceof String)) {
            throw new Error("Expected the field `sourceVersion` to be a primitive type in the JSON string but got " + data['sourceVersion']);
        }

        return true;
    }


}



/**
 * @member {module:model/PathFilter} exclude
 */
CloneVersionRequest.prototype['exclude'] = undefined;

/**
 * If true, the call to `CloneVersion` immediately finalizes the version after cloning is complete. If false, the cloned version will have a status of `CREATED`. Use [`UpdateVersion`](patch) to set the status of the version to `FINALIZED`.
 * @member {Boolean} finalize
 */
CloneVersionRequest.prototype['finalize'] = undefined;

/**
 * @member {module:model/PathFilter} include
 */
CloneVersionRequest.prototype['include'] = undefined;

/**
 * Required. The unique identifier for the version to be cloned, in the format: sites/SITE_ID/versions/VERSION_ID
 * @member {String} sourceVersion
 */
CloneVersionRequest.prototype['sourceVersion'] = undefined;






export default CloneVersionRequest;

