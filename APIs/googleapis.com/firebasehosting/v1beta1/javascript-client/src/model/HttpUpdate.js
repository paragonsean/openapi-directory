/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Status from './Status';

/**
 * The HttpUpdate model module.
 * @module model/HttpUpdate
 * @version v1beta1
 */
class HttpUpdate {
    /**
     * Constructs a new <code>HttpUpdate</code>.
     * A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting&#39;s Certificate Authorities to create an SSL certificate for your domain.
     * @alias module:model/HttpUpdate
     */
    constructor() { 
        
        HttpUpdate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpUpdate} obj Optional instance to populate.
     * @return {module:model/HttpUpdate} The populated <code>HttpUpdate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpUpdate();

            if (data.hasOwnProperty('checkError')) {
                obj['checkError'] = Status.constructFromObject(data['checkError']);
            }
            if (data.hasOwnProperty('desired')) {
                obj['desired'] = ApiClient.convertToType(data['desired'], 'String');
            }
            if (data.hasOwnProperty('discovered')) {
                obj['discovered'] = ApiClient.convertToType(data['discovered'], 'String');
            }
            if (data.hasOwnProperty('lastCheckTime')) {
                obj['lastCheckTime'] = ApiClient.convertToType(data['lastCheckTime'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpUpdate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpUpdate</code>.
     */
    static validateJSON(data) {
        // validate the optional field `checkError`
        if (data['checkError']) { // data not null
          Status.validateJSON(data['checkError']);
        }
        // ensure the json data is a string
        if (data['desired'] && !(typeof data['desired'] === 'string' || data['desired'] instanceof String)) {
            throw new Error("Expected the field `desired` to be a primitive type in the JSON string but got " + data['desired']);
        }
        // ensure the json data is a string
        if (data['discovered'] && !(typeof data['discovered'] === 'string' || data['discovered'] instanceof String)) {
            throw new Error("Expected the field `discovered` to be a primitive type in the JSON string but got " + data['discovered']);
        }
        // ensure the json data is a string
        if (data['lastCheckTime'] && !(typeof data['lastCheckTime'] === 'string' || data['lastCheckTime'] instanceof String)) {
            throw new Error("Expected the field `lastCheckTime` to be a primitive type in the JSON string but got " + data['lastCheckTime']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * @member {module:model/Status} checkError
 */
HttpUpdate.prototype['checkError'] = undefined;

/**
 * Output only. A text string to serve at the path.
 * @member {String} desired
 */
HttpUpdate.prototype['desired'] = undefined;

/**
 * Output only. Whether Hosting was able to find the required file contents on the specified path during its last check.
 * @member {String} discovered
 */
HttpUpdate.prototype['discovered'] = undefined;

/**
 * Output only. The last time Hosting systems checked for the file contents.
 * @member {String} lastCheckTime
 */
HttpUpdate.prototype['lastCheckTime'] = undefined;

/**
 * Output only. The path to the file.
 * @member {String} path
 */
HttpUpdate.prototype['path'] = undefined;






export default HttpUpdate;

