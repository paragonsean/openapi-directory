/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsUpdates from './DnsUpdates';
import HttpUpdate from './HttpUpdate';

/**
 * The CertVerification model module.
 * @module model/CertVerification
 * @version v1beta1
 */
class CertVerification {
    /**
     * Constructs a new <code>CertVerification</code>.
     * A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it&#39;s not necessary to provide both.
     * @alias module:model/CertVerification
     */
    constructor() { 
        
        CertVerification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertVerification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertVerification} obj Optional instance to populate.
     * @return {module:model/CertVerification} The populated <code>CertVerification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertVerification();

            if (data.hasOwnProperty('dns')) {
                obj['dns'] = DnsUpdates.constructFromObject(data['dns']);
            }
            if (data.hasOwnProperty('http')) {
                obj['http'] = HttpUpdate.constructFromObject(data['http']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertVerification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertVerification</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dns`
        if (data['dns']) { // data not null
          DnsUpdates.validateJSON(data['dns']);
        }
        // validate the optional field `http`
        if (data['http']) { // data not null
          HttpUpdate.validateJSON(data['http']);
        }

        return true;
    }


}



/**
 * @member {module:model/DnsUpdates} dns
 */
CertVerification.prototype['dns'] = undefined;

/**
 * @member {module:model/HttpUpdate} http
 */
CertVerification.prototype['http'] = undefined;






export default CertVerification;

