/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Header from './Header';
import I18nConfig from './I18nConfig';
import Redirect from './Redirect';
import Rewrite from './Rewrite';

/**
 * The ServingConfig model module.
 * @module model/ServingConfig
 * @version v1beta1
 */
class ServingConfig {
    /**
     * Constructs a new <code>ServingConfig</code>.
     * The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).
     * @alias module:model/ServingConfig
     */
    constructor() { 
        
        ServingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServingConfig} obj Optional instance to populate.
     * @return {module:model/ServingConfig} The populated <code>ServingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServingConfig();

            if (data.hasOwnProperty('appAssociation')) {
                obj['appAssociation'] = ApiClient.convertToType(data['appAssociation'], 'String');
            }
            if (data.hasOwnProperty('cleanUrls')) {
                obj['cleanUrls'] = ApiClient.convertToType(data['cleanUrls'], 'Boolean');
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [Header]);
            }
            if (data.hasOwnProperty('i18n')) {
                obj['i18n'] = I18nConfig.constructFromObject(data['i18n']);
            }
            if (data.hasOwnProperty('redirects')) {
                obj['redirects'] = ApiClient.convertToType(data['redirects'], [Redirect]);
            }
            if (data.hasOwnProperty('rewrites')) {
                obj['rewrites'] = ApiClient.convertToType(data['rewrites'], [Rewrite]);
            }
            if (data.hasOwnProperty('trailingSlashBehavior')) {
                obj['trailingSlashBehavior'] = ApiClient.convertToType(data['trailingSlashBehavior'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appAssociation'] && !(typeof data['appAssociation'] === 'string' || data['appAssociation'] instanceof String)) {
            throw new Error("Expected the field `appAssociation` to be a primitive type in the JSON string but got " + data['appAssociation']);
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                Header.validateJSON(item);
            };
        }
        // validate the optional field `i18n`
        if (data['i18n']) { // data not null
          I18nConfig.validateJSON(data['i18n']);
        }
        if (data['redirects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['redirects'])) {
                throw new Error("Expected the field `redirects` to be an array in the JSON data but got " + data['redirects']);
            }
            // validate the optional field `redirects` (array)
            for (const item of data['redirects']) {
                Redirect.validateJSON(item);
            };
        }
        if (data['rewrites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rewrites'])) {
                throw new Error("Expected the field `rewrites` to be an array in the JSON data but got " + data['rewrites']);
            }
            // validate the optional field `rewrites` (array)
            for (const item of data['rewrites']) {
                Rewrite.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['trailingSlashBehavior'] && !(typeof data['trailingSlashBehavior'] === 'string' || data['trailingSlashBehavior'] instanceof String)) {
            throw new Error("Expected the field `trailingSlashBehavior` to be a primitive type in the JSON string but got " + data['trailingSlashBehavior']);
        }

        return true;
    }


}



/**
 * How to handle well known App Association files.
 * @member {module:model/ServingConfig.AppAssociationEnum} appAssociation
 */
ServingConfig.prototype['appAssociation'] = undefined;

/**
 * Defines whether to drop the file extension from uploaded files.
 * @member {Boolean} cleanUrls
 */
ServingConfig.prototype['cleanUrls'] = undefined;

/**
 * An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.
 * @member {Array.<module:model/Header>} headers
 */
ServingConfig.prototype['headers'] = undefined;

/**
 * @member {module:model/I18nConfig} i18n
 */
ServingConfig.prototype['i18n'] = undefined;

/**
 * An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
 * @member {Array.<module:model/Redirect>} redirects
 */
ServingConfig.prototype['redirects'] = undefined;

/**
 * An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.
 * @member {Array.<module:model/Rewrite>} rewrites
 */
ServingConfig.prototype['rewrites'] = undefined;

/**
 * Defines how to handle a trailing slash in the URL path.
 * @member {module:model/ServingConfig.TrailingSlashBehaviorEnum} trailingSlashBehavior
 */
ServingConfig.prototype['trailingSlashBehavior'] = undefined;





/**
 * Allowed values for the <code>appAssociation</code> property.
 * @enum {String}
 * @readonly
 */
ServingConfig['AppAssociationEnum'] = {

    /**
     * value: "AUTO"
     * @const
     */
    "AUTO": "AUTO",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE"
};


/**
 * Allowed values for the <code>trailingSlashBehavior</code> property.
 * @enum {String}
 * @readonly
 */
ServingConfig['TrailingSlashBehaviorEnum'] = {

    /**
     * value: "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED"
     * @const
     */
    "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED": "TRAILING_SLASH_BEHAVIOR_UNSPECIFIED",

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "REMOVE"
     * @const
     */
    "REMOVE": "REMOVE"
};



export default ServingConfig;

