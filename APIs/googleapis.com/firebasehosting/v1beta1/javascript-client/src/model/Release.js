/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActingUser from './ActingUser';
import Version from './Version';

/**
 * The Release model module.
 * @module model/Release
 * @version v1beta1
 */
class Release {
    /**
     * Constructs a new <code>Release</code>.
     *  A &#x60;Release&#x60; is a particular [collection of configurations and files](sites.versions) that is set to be public at a particular time.
     * @alias module:model/Release
     */
    constructor() { 
        
        Release.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Release</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Release} obj Optional instance to populate.
     * @return {module:model/Release} The populated <code>Release</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Release();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('releaseTime')) {
                obj['releaseTime'] = ApiClient.convertToType(data['releaseTime'], 'String');
            }
            if (data.hasOwnProperty('releaseUser')) {
                obj['releaseUser'] = ActingUser.constructFromObject(data['releaseUser']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = Version.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Release</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Release</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['releaseTime'] && !(typeof data['releaseTime'] === 'string' || data['releaseTime'] instanceof String)) {
            throw new Error("Expected the field `releaseTime` to be a primitive type in the JSON string but got " + data['releaseTime']);
        }
        // validate the optional field `releaseUser`
        if (data['releaseUser']) { // data not null
          ActingUser.validateJSON(data['releaseUser']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          Version.validateJSON(data['version']);
        }

        return true;
    }


}



/**
 * The deploy description when the release was created. The value can be up to 512 characters.
 * @member {String} message
 */
Release.prototype['message'] = undefined;

/**
 * Output only. The unique identifier for the release, in either of the following formats: - sites/SITE_ID/releases/RELEASE_ID - sites/SITE_ID/channels/CHANNEL_ID/releases/RELEASE_ID This name is provided in the response body when you call [`releases.create`](sites.releases/create) or [`channels.releases.create`](sites.channels.releases/create).
 * @member {String} name
 */
Release.prototype['name'] = undefined;

/**
 * Output only. The time at which the version is set to be public.
 * @member {String} releaseTime
 */
Release.prototype['releaseTime'] = undefined;

/**
 * @member {module:model/ActingUser} releaseUser
 */
Release.prototype['releaseUser'] = undefined;

/**
 * Explains the reason for the release. Specify a value for this field only when creating a `SITE_DISABLE` type release.
 * @member {module:model/Release.TypeEnum} type
 */
Release.prototype['type'] = undefined;

/**
 * @member {module:model/Version} version
 */
Release.prototype['version'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Release['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "DEPLOY"
     * @const
     */
    "DEPLOY": "DEPLOY",

    /**
     * value: "ROLLBACK"
     * @const
     */
    "ROLLBACK": "ROLLBACK",

    /**
     * value: "SITE_DISABLE"
     * @const
     */
    "SITE_DISABLE": "SITE_DISABLE"
};



export default Release;

