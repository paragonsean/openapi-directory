/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PopulateVersionFilesResponse model module.
 * @module model/PopulateVersionFilesResponse
 * @version v1beta1
 */
class PopulateVersionFilesResponse {
    /**
     * Constructs a new <code>PopulateVersionFilesResponse</code>.
     * @alias module:model/PopulateVersionFilesResponse
     */
    constructor() { 
        
        PopulateVersionFilesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PopulateVersionFilesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PopulateVersionFilesResponse} obj Optional instance to populate.
     * @return {module:model/PopulateVersionFilesResponse} The populated <code>PopulateVersionFilesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PopulateVersionFilesResponse();

            if (data.hasOwnProperty('uploadRequiredHashes')) {
                obj['uploadRequiredHashes'] = ApiClient.convertToType(data['uploadRequiredHashes'], ['String']);
            }
            if (data.hasOwnProperty('uploadUrl')) {
                obj['uploadUrl'] = ApiClient.convertToType(data['uploadUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PopulateVersionFilesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PopulateVersionFilesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['uploadRequiredHashes'])) {
            throw new Error("Expected the field `uploadRequiredHashes` to be an array in the JSON data but got " + data['uploadRequiredHashes']);
        }
        // ensure the json data is a string
        if (data['uploadUrl'] && !(typeof data['uploadUrl'] === 'string' || data['uploadUrl'] instanceof String)) {
            throw new Error("Expected the field `uploadUrl` to be a primitive type in the JSON string but got " + data['uploadUrl']);
        }

        return true;
    }


}



/**
 * The content hashes of the specified files that need to be uploaded to the specified URL.
 * @member {Array.<String>} uploadRequiredHashes
 */
PopulateVersionFilesResponse.prototype['uploadRequiredHashes'] = undefined;

/**
 * The URL to which the files should be uploaded, in the format: \"https://upload-firebasehosting.googleapis.com/upload/sites/SITE_ID /versions/VERSION_ID/files\" Perform a multipart `POST` of the Gzipped file contents to the URL using a forward slash and the hash of the file appended to the end.
 * @member {String} uploadUrl
 */
PopulateVersionFilesResponse.prototype['uploadUrl'] = undefined;






export default PopulateVersionFilesResponse;

