/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActingUser from './ActingUser';
import ServingConfig from './ServingConfig';

/**
 * The Version model module.
 * @module model/Version
 * @version v1beta1
 */
class Version {
    /**
     * Constructs a new <code>Version</code>.
     * A &#x60;Version&#x60; is a configuration and a collection of static files which determine how a site is displayed.
     * @alias module:model/Version
     */
    constructor() { 
        
        Version.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Version</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Version} obj Optional instance to populate.
     * @return {module:model/Version} The populated <code>Version</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Version();

            if (data.hasOwnProperty('config')) {
                obj['config'] = ServingConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('createUser')) {
                obj['createUser'] = ActingUser.constructFromObject(data['createUser']);
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('deleteUser')) {
                obj['deleteUser'] = ActingUser.constructFromObject(data['deleteUser']);
            }
            if (data.hasOwnProperty('fileCount')) {
                obj['fileCount'] = ApiClient.convertToType(data['fileCount'], 'String');
            }
            if (data.hasOwnProperty('finalizeTime')) {
                obj['finalizeTime'] = ApiClient.convertToType(data['finalizeTime'], 'String');
            }
            if (data.hasOwnProperty('finalizeUser')) {
                obj['finalizeUser'] = ActingUser.constructFromObject(data['finalizeUser']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('versionBytes')) {
                obj['versionBytes'] = ApiClient.convertToType(data['versionBytes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Version</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Version</code>.
     */
    static validateJSON(data) {
        // validate the optional field `config`
        if (data['config']) { // data not null
          ServingConfig.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `createUser`
        if (data['createUser']) { // data not null
          ActingUser.validateJSON(data['createUser']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // validate the optional field `deleteUser`
        if (data['deleteUser']) { // data not null
          ActingUser.validateJSON(data['deleteUser']);
        }
        // ensure the json data is a string
        if (data['fileCount'] && !(typeof data['fileCount'] === 'string' || data['fileCount'] instanceof String)) {
            throw new Error("Expected the field `fileCount` to be a primitive type in the JSON string but got " + data['fileCount']);
        }
        // ensure the json data is a string
        if (data['finalizeTime'] && !(typeof data['finalizeTime'] === 'string' || data['finalizeTime'] instanceof String)) {
            throw new Error("Expected the field `finalizeTime` to be a primitive type in the JSON string but got " + data['finalizeTime']);
        }
        // validate the optional field `finalizeUser`
        if (data['finalizeUser']) { // data not null
          ActingUser.validateJSON(data['finalizeUser']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['versionBytes'] && !(typeof data['versionBytes'] === 'string' || data['versionBytes'] instanceof String)) {
            throw new Error("Expected the field `versionBytes` to be a primitive type in the JSON string but got " + data['versionBytes']);
        }

        return true;
    }


}



/**
 * @member {module:model/ServingConfig} config
 */
Version.prototype['config'] = undefined;

/**
 * Output only. The time at which the version was created.
 * @member {String} createTime
 */
Version.prototype['createTime'] = undefined;

/**
 * @member {module:model/ActingUser} createUser
 */
Version.prototype['createUser'] = undefined;

/**
 * Output only. The time at which the version was `DELETED`.
 * @member {String} deleteTime
 */
Version.prototype['deleteTime'] = undefined;

/**
 * @member {module:model/ActingUser} deleteUser
 */
Version.prototype['deleteUser'] = undefined;

/**
 * Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.
 * @member {String} fileCount
 */
Version.prototype['fileCount'] = undefined;

/**
 * Output only. The time at which the version was `FINALIZED`.
 * @member {String} finalizeTime
 */
Version.prototype['finalizeTime'] = undefined;

/**
 * @member {module:model/ActingUser} finalizeUser
 */
Version.prototype['finalizeUser'] = undefined;

/**
 * The labels used for extra metadata and/or filtering.
 * @member {Object.<String, String>} labels
 */
Version.prototype['labels'] = undefined;

/**
 * The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).
 * @member {String} name
 */
Version.prototype['name'] = undefined;

/**
 * The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).
 * @member {module:model/Version.StatusEnum} status
 */
Version.prototype['status'] = undefined;

/**
 * Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`.
 * @member {String} versionBytes
 */
Version.prototype['versionBytes'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Version['StatusEnum'] = {

    /**
     * value: "VERSION_STATUS_UNSPECIFIED"
     * @const
     */
    "VERSION_STATUS_UNSPECIFIED": "VERSION_STATUS_UNSPECIFIED",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "FINALIZED"
     * @const
     */
    "FINALIZED": "FINALIZED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "ABANDONED"
     * @const
     */
    "ABANDONED": "ABANDONED",

    /**
     * value: "EXPIRED"
     * @const
     */
    "EXPIRED": "EXPIRED",

    /**
     * value: "CLONING"
     * @const
     */
    "CLONING": "CLONING"
};



export default Version;

