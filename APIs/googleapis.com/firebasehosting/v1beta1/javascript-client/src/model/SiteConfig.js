/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SiteConfig model module.
 * @module model/SiteConfig
 * @version v1beta1
 */
class SiteConfig {
    /**
     * Constructs a new <code>SiteConfig</code>.
     * A &#x60;SiteConfig&#x60; contains metadata associated with a specific site that controls Firebase Hosting serving behavior
     * @alias module:model/SiteConfig
     */
    constructor() { 
        
        SiteConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SiteConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteConfig} obj Optional instance to populate.
     * @return {module:model/SiteConfig} The populated <code>SiteConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteConfig();

            if (data.hasOwnProperty('cloudLoggingEnabled')) {
                obj['cloudLoggingEnabled'] = ApiClient.convertToType(data['cloudLoggingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('maxVersions')) {
                obj['maxVersions'] = ApiClient.convertToType(data['maxVersions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maxVersions'] && !(typeof data['maxVersions'] === 'string' || data['maxVersions'] instanceof String)) {
            throw new Error("Expected the field `maxVersions` to be a primitive type in the JSON string but got " + data['maxVersions']);
        }

        return true;
    }


}



/**
 * Whether or not web requests made by site visitors are logged via Cloud Logging.
 * @member {Boolean} cloudLoggingEnabled
 */
SiteConfig.prototype['cloudLoggingEnabled'] = undefined;

/**
 * The number of FINALIZED versions that will be held for a site before automatic deletion. When a new version is deployed, content for versions in storage in excess of this number will be deleted, and will no longer be billed for storage usage. Oldest versions will be deleted first; sites are created with an unlimited number of max_versions by default.
 * @member {String} maxVersions
 */
SiteConfig.prototype['maxVersions'] = undefined;






export default SiteConfig;

