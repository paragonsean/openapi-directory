/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Redirect model module.
 * @module model/Redirect
 * @version v1beta1
 */
class Redirect {
    /**
     * Constructs a new <code>Redirect</code>.
     * A [&#x60;Redirect&#x60;](https://firebase.google.com/docs/hosting/full-config#redirects) specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.
     * @alias module:model/Redirect
     */
    constructor() { 
        
        Redirect.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Redirect</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Redirect} obj Optional instance to populate.
     * @return {module:model/Redirect} The populated <code>Redirect</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Redirect();

            if (data.hasOwnProperty('glob')) {
                obj['glob'] = ApiClient.convertToType(data['glob'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Redirect</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Redirect</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['glob'] && !(typeof data['glob'] === 'string' || data['glob'] instanceof String)) {
            throw new Error("Expected the field `glob` to be a primitive type in the JSON string but got " + data['glob']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }

        return true;
    }


}



/**
 * The user-supplied [glob](https://firebase.google.com/docs/hosting/full-config#glob_pattern_matching) to match against the request URL path.
 * @member {String} glob
 */
Redirect.prototype['glob'] = undefined;

/**
 * Required. The value to put in the HTTP location header of the response. The location can contain capture group values from the pattern using a `:` prefix to identify the segment and an optional `*` to capture the rest of the URL. For example: \"glob\": \"/:capture*\", \"statusCode\": 301, \"location\": \"https://example.com/foo/:capture\"
 * @member {String} location
 */
Redirect.prototype['location'] = undefined;

/**
 * The user-supplied RE2 regular expression to match against the request URL path.
 * @member {String} regex
 */
Redirect.prototype['regex'] = undefined;

/**
 * Required. The status HTTP code to return in the response. It must be a valid 3xx status code.
 * @member {Number} statusCode
 */
Redirect.prototype['statusCode'] = undefined;






export default Redirect;

