/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsRecordSet from './DnsRecordSet';

/**
 * The DnsUpdates model module.
 * @module model/DnsUpdates
 * @version v1beta1
 */
class DnsUpdates {
    /**
     * Constructs a new <code>DnsUpdates</code>.
     * A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name&#39;s DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.
     * @alias module:model/DnsUpdates
     */
    constructor() { 
        
        DnsUpdates.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsUpdates</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsUpdates} obj Optional instance to populate.
     * @return {module:model/DnsUpdates} The populated <code>DnsUpdates</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsUpdates();

            if (data.hasOwnProperty('checkTime')) {
                obj['checkTime'] = ApiClient.convertToType(data['checkTime'], 'String');
            }
            if (data.hasOwnProperty('desired')) {
                obj['desired'] = ApiClient.convertToType(data['desired'], [DnsRecordSet]);
            }
            if (data.hasOwnProperty('discovered')) {
                obj['discovered'] = ApiClient.convertToType(data['discovered'], [DnsRecordSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsUpdates</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsUpdates</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkTime'] && !(typeof data['checkTime'] === 'string' || data['checkTime'] instanceof String)) {
            throw new Error("Expected the field `checkTime` to be a primitive type in the JSON string but got " + data['checkTime']);
        }
        if (data['desired']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['desired'])) {
                throw new Error("Expected the field `desired` to be an array in the JSON data but got " + data['desired']);
            }
            // validate the optional field `desired` (array)
            for (const item of data['desired']) {
                DnsRecordSet.validateJSON(item);
            };
        }
        if (data['discovered']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['discovered'])) {
                throw new Error("Expected the field `discovered` to be an array in the JSON data but got " + data['discovered']);
            }
            // validate the optional field `discovered` (array)
            for (const item of data['discovered']) {
                DnsRecordSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The last time Hosting checked your custom domain's DNS records.
 * @member {String} checkTime
 */
DnsUpdates.prototype['checkTime'] = undefined;

/**
 * The set of DNS records Hosting needs to serve secure content on the domain.
 * @member {Array.<module:model/DnsRecordSet>} desired
 */
DnsUpdates.prototype['desired'] = undefined;

/**
 * The set of DNS records Hosting discovered when inspecting a domain.
 * @member {Array.<module:model/DnsRecordSet>} discovered
 */
DnsUpdates.prototype['discovered'] = undefined;






export default DnsUpdates;

