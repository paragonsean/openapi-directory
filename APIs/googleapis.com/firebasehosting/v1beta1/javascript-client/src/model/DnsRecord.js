/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DnsRecord model module.
 * @module model/DnsRecord
 * @version v1beta1
 */
class DnsRecord {
    /**
     * Constructs a new <code>DnsRecord</code>.
     * DNS records are resource records that define how systems and services should behave when handling requests for a domain name. For example, when you add &#x60;A&#x60; records to your domain name&#39;s DNS records, you&#39;re informing other systems (such as your users&#39; web browsers) to contact those IPv4 addresses to retrieve resources relevant to your domain name (such as your Hosting site files).
     * @alias module:model/DnsRecord
     */
    constructor() { 
        
        DnsRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsRecord} obj Optional instance to populate.
     * @return {module:model/DnsRecord} The populated <code>DnsRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsRecord();

            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('rdata')) {
                obj['rdata'] = ApiClient.convertToType(data['rdata'], 'String');
            }
            if (data.hasOwnProperty('requiredAction')) {
                obj['requiredAction'] = ApiClient.convertToType(data['requiredAction'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        // ensure the json data is a string
        if (data['rdata'] && !(typeof data['rdata'] === 'string' || data['rdata'] instanceof String)) {
            throw new Error("Expected the field `rdata` to be a primitive type in the JSON string but got " + data['rdata']);
        }
        // ensure the json data is a string
        if (data['requiredAction'] && !(typeof data['requiredAction'] === 'string' || data['requiredAction'] instanceof String)) {
            throw new Error("Expected the field `requiredAction` to be a primitive type in the JSON string but got " + data['requiredAction']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.
 * @member {String} domainName
 */
DnsRecord.prototype['domainName'] = undefined;

/**
 * Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue \"pki.goog\"`.
 * @member {String} rdata
 */
DnsRecord.prototype['rdata'] = undefined;

/**
 * Output only. An enum that indicates the a required action for this record.
 * @member {module:model/DnsRecord.RequiredActionEnum} requiredAction
 */
DnsRecord.prototype['requiredAction'] = undefined;

/**
 * Output only. The record's type, which determines what data the record contains.
 * @member {module:model/DnsRecord.TypeEnum} type
 */
DnsRecord.prototype['type'] = undefined;





/**
 * Allowed values for the <code>requiredAction</code> property.
 * @enum {String}
 * @readonly
 */
DnsRecord['RequiredActionEnum'] = {

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "ADD"
     * @const
     */
    "ADD": "ADD",

    /**
     * value: "REMOVE"
     * @const
     */
    "REMOVE": "REMOVE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DnsRecord['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "A"
     * @const
     */
    "A": "A",

    /**
     * value: "CNAME"
     * @const
     */
    "CNAME": "CNAME",

    /**
     * value: "TXT"
     * @const
     */
    "TXT": "TXT",

    /**
     * value: "AAAA"
     * @const
     */
    "AAAA": "AAAA",

    /**
     * value: "CAA"
     * @const
     */
    "CAA": "CAA"
};



export default DnsRecord;

