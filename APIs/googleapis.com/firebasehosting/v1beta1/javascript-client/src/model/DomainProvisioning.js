/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertDnsChallenge from './CertDnsChallenge';
import CertHttpChallenge from './CertHttpChallenge';

/**
 * The DomainProvisioning model module.
 * @module model/DomainProvisioning
 * @version v1beta1
 */
class DomainProvisioning {
    /**
     * Constructs a new <code>DomainProvisioning</code>.
     * The current certificate provisioning status information for a domain.
     * @alias module:model/DomainProvisioning
     */
    constructor() { 
        
        DomainProvisioning.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DomainProvisioning</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainProvisioning} obj Optional instance to populate.
     * @return {module:model/DomainProvisioning} The populated <code>DomainProvisioning</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainProvisioning();

            if (data.hasOwnProperty('certChallengeDiscoveredTxt')) {
                obj['certChallengeDiscoveredTxt'] = ApiClient.convertToType(data['certChallengeDiscoveredTxt'], ['String']);
            }
            if (data.hasOwnProperty('certChallengeDns')) {
                obj['certChallengeDns'] = CertDnsChallenge.constructFromObject(data['certChallengeDns']);
            }
            if (data.hasOwnProperty('certChallengeHttp')) {
                obj['certChallengeHttp'] = CertHttpChallenge.constructFromObject(data['certChallengeHttp']);
            }
            if (data.hasOwnProperty('certStatus')) {
                obj['certStatus'] = ApiClient.convertToType(data['certStatus'], 'String');
            }
            if (data.hasOwnProperty('discoveredIps')) {
                obj['discoveredIps'] = ApiClient.convertToType(data['discoveredIps'], ['String']);
            }
            if (data.hasOwnProperty('dnsFetchTime')) {
                obj['dnsFetchTime'] = ApiClient.convertToType(data['dnsFetchTime'], 'String');
            }
            if (data.hasOwnProperty('dnsStatus')) {
                obj['dnsStatus'] = ApiClient.convertToType(data['dnsStatus'], 'String');
            }
            if (data.hasOwnProperty('expectedIps')) {
                obj['expectedIps'] = ApiClient.convertToType(data['expectedIps'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainProvisioning</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainProvisioning</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['certChallengeDiscoveredTxt'])) {
            throw new Error("Expected the field `certChallengeDiscoveredTxt` to be an array in the JSON data but got " + data['certChallengeDiscoveredTxt']);
        }
        // validate the optional field `certChallengeDns`
        if (data['certChallengeDns']) { // data not null
          CertDnsChallenge.validateJSON(data['certChallengeDns']);
        }
        // validate the optional field `certChallengeHttp`
        if (data['certChallengeHttp']) { // data not null
          CertHttpChallenge.validateJSON(data['certChallengeHttp']);
        }
        // ensure the json data is a string
        if (data['certStatus'] && !(typeof data['certStatus'] === 'string' || data['certStatus'] instanceof String)) {
            throw new Error("Expected the field `certStatus` to be a primitive type in the JSON string but got " + data['certStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['discoveredIps'])) {
            throw new Error("Expected the field `discoveredIps` to be an array in the JSON data but got " + data['discoveredIps']);
        }
        // ensure the json data is a string
        if (data['dnsFetchTime'] && !(typeof data['dnsFetchTime'] === 'string' || data['dnsFetchTime'] instanceof String)) {
            throw new Error("Expected the field `dnsFetchTime` to be a primitive type in the JSON string but got " + data['dnsFetchTime']);
        }
        // ensure the json data is a string
        if (data['dnsStatus'] && !(typeof data['dnsStatus'] === 'string' || data['dnsStatus'] instanceof String)) {
            throw new Error("Expected the field `dnsStatus` to be a primitive type in the JSON string but got " + data['dnsStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expectedIps'])) {
            throw new Error("Expected the field `expectedIps` to be an array in the JSON data but got " + data['expectedIps']);
        }

        return true;
    }


}



/**
 * The TXT records (for the certificate challenge) that were found at the last DNS fetch.
 * @member {Array.<String>} certChallengeDiscoveredTxt
 */
DomainProvisioning.prototype['certChallengeDiscoveredTxt'] = undefined;

/**
 * @member {module:model/CertDnsChallenge} certChallengeDns
 */
DomainProvisioning.prototype['certChallengeDns'] = undefined;

/**
 * @member {module:model/CertHttpChallenge} certChallengeHttp
 */
DomainProvisioning.prototype['certChallengeHttp'] = undefined;

/**
 * The certificate provisioning status; updated when Firebase Hosting provisions an SSL certificate for the domain.
 * @member {module:model/DomainProvisioning.CertStatusEnum} certStatus
 */
DomainProvisioning.prototype['certStatus'] = undefined;

/**
 * The IPs found at the last DNS fetch.
 * @member {Array.<String>} discoveredIps
 */
DomainProvisioning.prototype['discoveredIps'] = undefined;

/**
 * The time at which the last DNS fetch occurred.
 * @member {String} dnsFetchTime
 */
DomainProvisioning.prototype['dnsFetchTime'] = undefined;

/**
 * The DNS record match status as of the last DNS fetch.
 * @member {module:model/DomainProvisioning.DnsStatusEnum} dnsStatus
 */
DomainProvisioning.prototype['dnsStatus'] = undefined;

/**
 * The list of IPs to which the domain is expected to resolve.
 * @member {Array.<String>} expectedIps
 */
DomainProvisioning.prototype['expectedIps'] = undefined;





/**
 * Allowed values for the <code>certStatus</code> property.
 * @enum {String}
 * @readonly
 */
DomainProvisioning['CertStatusEnum'] = {

    /**
     * value: "CERT_STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "CERT_STATUS_UNSPECIFIED",

    /**
     * value: "CERT_PENDING"
     * @const
     */
    "PENDING": "CERT_PENDING",

    /**
     * value: "CERT_MISSING"
     * @const
     */
    "MISSING": "CERT_MISSING",

    /**
     * value: "CERT_PROCESSING"
     * @const
     */
    "PROCESSING": "CERT_PROCESSING",

    /**
     * value: "CERT_PROPAGATING"
     * @const
     */
    "PROPAGATING": "CERT_PROPAGATING",

    /**
     * value: "CERT_ACTIVE"
     * @const
     */
    "ACTIVE": "CERT_ACTIVE",

    /**
     * value: "CERT_ERROR"
     * @const
     */
    "ERROR": "CERT_ERROR"
};


/**
 * Allowed values for the <code>dnsStatus</code> property.
 * @enum {String}
 * @readonly
 */
DomainProvisioning['DnsStatusEnum'] = {

    /**
     * value: "DNS_STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "DNS_STATUS_UNSPECIFIED",

    /**
     * value: "DNS_PENDING"
     * @const
     */
    "PENDING": "DNS_PENDING",

    /**
     * value: "DNS_MISSING"
     * @const
     */
    "MISSING": "DNS_MISSING",

    /**
     * value: "DNS_PARTIAL_MATCH"
     * @const
     */
    "PARTIAL_MATCH": "DNS_PARTIAL_MATCH",

    /**
     * value: "DNS_MATCH"
     * @const
     */
    "MATCH": "DNS_MATCH",

    /**
     * value: "DNS_EXTRANEOUS_MATCH"
     * @const
     */
    "EXTRANEOUS_MATCH": "DNS_EXTRANEOUS_MATCH"
};



export default DomainProvisioning;

