/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Release from './Release';

/**
 * The Channel model module.
 * @module model/Channel
 * @version v1beta1
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * A &#x60;Channel&#x60; represents a stream of releases for a site. All sites have a default &#x60;live&#x60; channel that serves content to the Firebase-provided subdomains and any connected custom domains.
     * @alias module:model/Channel
     */
    constructor() { 
        
        Channel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('release')) {
                obj['release'] = Release.constructFromObject(data['release']);
            }
            if (data.hasOwnProperty('retainedReleaseCount')) {
                obj['retainedReleaseCount'] = ApiClient.convertToType(data['retainedReleaseCount'], 'Number');
            }
            if (data.hasOwnProperty('ttl')) {
                obj['ttl'] = ApiClient.convertToType(data['ttl'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `release`
        if (data['release']) { // data not null
          Release.validateJSON(data['release']);
        }
        // ensure the json data is a string
        if (data['ttl'] && !(typeof data['ttl'] === 'string' || data['ttl'] instanceof String)) {
            throw new Error("Expected the field `ttl` to be a primitive type in the JSON string but got " + data['ttl']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Output only. The time at which the channel was created.
 * @member {String} createTime
 */
Channel.prototype['createTime'] = undefined;

/**
 * The time at which the channel will be automatically deleted. If null, the channel will not be automatically deleted. This field is present in the output whether it's set directly or via the `ttl` field.
 * @member {String} expireTime
 */
Channel.prototype['expireTime'] = undefined;

/**
 * Text labels used for extra metadata and/or filtering.
 * @member {Object.<String, String>} labels
 */
Channel.prototype['labels'] = undefined;

/**
 * The fully-qualified resource name for the channel, in the format: sites/ SITE_ID/channels/CHANNEL_ID
 * @member {String} name
 */
Channel.prototype['name'] = undefined;

/**
 * @member {module:model/Release} release
 */
Channel.prototype['release'] = undefined;

/**
 * The number of previous releases to retain on the channel for rollback or other purposes. Must be a number between 1-100. Defaults to 10 for new channels.
 * @member {Number} retainedReleaseCount
 */
Channel.prototype['retainedReleaseCount'] = undefined;

/**
 * Input only. A time-to-live for this channel. Sets `expire_time` to the provided duration past the time of the request.
 * @member {String} ttl
 */
Channel.prototype['ttl'] = undefined;

/**
 * Output only. The time at which the channel was last updated.
 * @member {String} updateTime
 */
Channel.prototype['updateTime'] = undefined;

/**
 * Output only. The URL at which the content of this channel's current release can be viewed. This URL is a Firebase-provided subdomain of `web.app`. The content of this channel's current release can also be viewed at the Firebase-provided subdomain of `firebaseapp.com`. If this channel is the `live` channel for the Hosting site, then the content of this channel's current release can also be viewed at any connected custom domains.
 * @member {String} url
 */
Channel.prototype['url'] = undefined;






export default Channel;

