/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ActingUser from './model/ActingUser';
import CertDnsChallenge from './model/CertDnsChallenge';
import CertHttpChallenge from './model/CertHttpChallenge';
import CertVerification from './model/CertVerification';
import Certificate from './model/Certificate';
import Channel from './model/Channel';
import CloneVersionRequest from './model/CloneVersionRequest';
import CloudRunRewrite from './model/CloudRunRewrite';
import CustomDomain from './model/CustomDomain';
import CustomDomainMetadata from './model/CustomDomainMetadata';
import DnsRecord from './model/DnsRecord';
import DnsRecordSet from './model/DnsRecordSet';
import DnsUpdates from './model/DnsUpdates';
import Domain from './model/Domain';
import DomainProvisioning from './model/DomainProvisioning';
import DomainRedirect from './model/DomainRedirect';
import Header from './model/Header';
import HttpUpdate from './model/HttpUpdate';
import I18nConfig from './model/I18nConfig';
import ListChannelsResponse from './model/ListChannelsResponse';
import ListCustomDomainsResponse from './model/ListCustomDomainsResponse';
import ListDomainsResponse from './model/ListDomainsResponse';
import ListOperationsResponse from './model/ListOperationsResponse';
import ListReleasesResponse from './model/ListReleasesResponse';
import ListSitesResponse from './model/ListSitesResponse';
import ListVersionFilesResponse from './model/ListVersionFilesResponse';
import ListVersionsResponse from './model/ListVersionsResponse';
import LiveMigrationStep from './model/LiveMigrationStep';
import Operation from './model/Operation';
import PathFilter from './model/PathFilter';
import PopulateVersionFilesRequest from './model/PopulateVersionFilesRequest';
import PopulateVersionFilesResponse from './model/PopulateVersionFilesResponse';
import Redirect from './model/Redirect';
import Release from './model/Release';
import Rewrite from './model/Rewrite';
import ServingConfig from './model/ServingConfig';
import Site from './model/Site';
import SiteConfig from './model/SiteConfig';
import Status from './model/Status';
import UndeleteCustomDomainRequest from './model/UndeleteCustomDomainRequest';
import Version from './model/Version';
import VersionFile from './model/VersionFile';
import ProjectsApi from './api/ProjectsApi';
import SitesApi from './api/SitesApi';


/**
* The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FirebaseHostingApi = require('index'); // See note below*.
* var xxxSvc = new FirebaseHostingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FirebaseHostingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FirebaseHostingApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FirebaseHostingApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1beta1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ActingUser model constructor.
     * @property {module:model/ActingUser}
     */
    ActingUser,

    /**
     * The CertDnsChallenge model constructor.
     * @property {module:model/CertDnsChallenge}
     */
    CertDnsChallenge,

    /**
     * The CertHttpChallenge model constructor.
     * @property {module:model/CertHttpChallenge}
     */
    CertHttpChallenge,

    /**
     * The CertVerification model constructor.
     * @property {module:model/CertVerification}
     */
    CertVerification,

    /**
     * The Certificate model constructor.
     * @property {module:model/Certificate}
     */
    Certificate,

    /**
     * The Channel model constructor.
     * @property {module:model/Channel}
     */
    Channel,

    /**
     * The CloneVersionRequest model constructor.
     * @property {module:model/CloneVersionRequest}
     */
    CloneVersionRequest,

    /**
     * The CloudRunRewrite model constructor.
     * @property {module:model/CloudRunRewrite}
     */
    CloudRunRewrite,

    /**
     * The CustomDomain model constructor.
     * @property {module:model/CustomDomain}
     */
    CustomDomain,

    /**
     * The CustomDomainMetadata model constructor.
     * @property {module:model/CustomDomainMetadata}
     */
    CustomDomainMetadata,

    /**
     * The DnsRecord model constructor.
     * @property {module:model/DnsRecord}
     */
    DnsRecord,

    /**
     * The DnsRecordSet model constructor.
     * @property {module:model/DnsRecordSet}
     */
    DnsRecordSet,

    /**
     * The DnsUpdates model constructor.
     * @property {module:model/DnsUpdates}
     */
    DnsUpdates,

    /**
     * The Domain model constructor.
     * @property {module:model/Domain}
     */
    Domain,

    /**
     * The DomainProvisioning model constructor.
     * @property {module:model/DomainProvisioning}
     */
    DomainProvisioning,

    /**
     * The DomainRedirect model constructor.
     * @property {module:model/DomainRedirect}
     */
    DomainRedirect,

    /**
     * The Header model constructor.
     * @property {module:model/Header}
     */
    Header,

    /**
     * The HttpUpdate model constructor.
     * @property {module:model/HttpUpdate}
     */
    HttpUpdate,

    /**
     * The I18nConfig model constructor.
     * @property {module:model/I18nConfig}
     */
    I18nConfig,

    /**
     * The ListChannelsResponse model constructor.
     * @property {module:model/ListChannelsResponse}
     */
    ListChannelsResponse,

    /**
     * The ListCustomDomainsResponse model constructor.
     * @property {module:model/ListCustomDomainsResponse}
     */
    ListCustomDomainsResponse,

    /**
     * The ListDomainsResponse model constructor.
     * @property {module:model/ListDomainsResponse}
     */
    ListDomainsResponse,

    /**
     * The ListOperationsResponse model constructor.
     * @property {module:model/ListOperationsResponse}
     */
    ListOperationsResponse,

    /**
     * The ListReleasesResponse model constructor.
     * @property {module:model/ListReleasesResponse}
     */
    ListReleasesResponse,

    /**
     * The ListSitesResponse model constructor.
     * @property {module:model/ListSitesResponse}
     */
    ListSitesResponse,

    /**
     * The ListVersionFilesResponse model constructor.
     * @property {module:model/ListVersionFilesResponse}
     */
    ListVersionFilesResponse,

    /**
     * The ListVersionsResponse model constructor.
     * @property {module:model/ListVersionsResponse}
     */
    ListVersionsResponse,

    /**
     * The LiveMigrationStep model constructor.
     * @property {module:model/LiveMigrationStep}
     */
    LiveMigrationStep,

    /**
     * The Operation model constructor.
     * @property {module:model/Operation}
     */
    Operation,

    /**
     * The PathFilter model constructor.
     * @property {module:model/PathFilter}
     */
    PathFilter,

    /**
     * The PopulateVersionFilesRequest model constructor.
     * @property {module:model/PopulateVersionFilesRequest}
     */
    PopulateVersionFilesRequest,

    /**
     * The PopulateVersionFilesResponse model constructor.
     * @property {module:model/PopulateVersionFilesResponse}
     */
    PopulateVersionFilesResponse,

    /**
     * The Redirect model constructor.
     * @property {module:model/Redirect}
     */
    Redirect,

    /**
     * The Release model constructor.
     * @property {module:model/Release}
     */
    Release,

    /**
     * The Rewrite model constructor.
     * @property {module:model/Rewrite}
     */
    Rewrite,

    /**
     * The ServingConfig model constructor.
     * @property {module:model/ServingConfig}
     */
    ServingConfig,

    /**
     * The Site model constructor.
     * @property {module:model/Site}
     */
    Site,

    /**
     * The SiteConfig model constructor.
     * @property {module:model/SiteConfig}
     */
    SiteConfig,

    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status,

    /**
     * The UndeleteCustomDomainRequest model constructor.
     * @property {module:model/UndeleteCustomDomainRequest}
     */
    UndeleteCustomDomainRequest,

    /**
     * The Version model constructor.
     * @property {module:model/Version}
     */
    Version,

    /**
     * The VersionFile model constructor.
     * @property {module:model/VersionFile}
     */
    VersionFile,

    /**
    * The ProjectsApi service constructor.
    * @property {module:api/ProjectsApi}
    */
    ProjectsApi,

    /**
    * The SitesApi service constructor.
    * @property {module:api/SitesApi}
    */
    SitesApi
};
