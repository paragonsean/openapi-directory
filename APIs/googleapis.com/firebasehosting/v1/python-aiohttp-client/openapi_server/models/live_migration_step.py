# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cert_verification import CertVerification
from openapi_server.models.dns_updates import DnsUpdates
from openapi_server.models.status import Status
from openapi_server import util


class LiveMigrationStep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cert_verification: CertVerification=None, dns_updates: DnsUpdates=None, issues: List[Status]=None, state: str=None):
        """LiveMigrationStep - a model defined in OpenAPI

        :param cert_verification: The cert_verification of this LiveMigrationStep.
        :param dns_updates: The dns_updates of this LiveMigrationStep.
        :param issues: The issues of this LiveMigrationStep.
        :param state: The state of this LiveMigrationStep.
        """
        self.openapi_types = {
            'cert_verification': CertVerification,
            'dns_updates': DnsUpdates,
            'issues': List[Status],
            'state': str
        }

        self.attribute_map = {
            'cert_verification': 'certVerification',
            'dns_updates': 'dnsUpdates',
            'issues': 'issues',
            'state': 'state'
        }

        self._cert_verification = cert_verification
        self._dns_updates = dns_updates
        self._issues = issues
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LiveMigrationStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LiveMigrationStep of this LiveMigrationStep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_verification(self):
        """Gets the cert_verification of this LiveMigrationStep.


        :return: The cert_verification of this LiveMigrationStep.
        :rtype: CertVerification
        """
        return self._cert_verification

    @cert_verification.setter
    def cert_verification(self, cert_verification):
        """Sets the cert_verification of this LiveMigrationStep.


        :param cert_verification: The cert_verification of this LiveMigrationStep.
        :type cert_verification: CertVerification
        """

        self._cert_verification = cert_verification

    @property
    def dns_updates(self):
        """Gets the dns_updates of this LiveMigrationStep.


        :return: The dns_updates of this LiveMigrationStep.
        :rtype: DnsUpdates
        """
        return self._dns_updates

    @dns_updates.setter
    def dns_updates(self, dns_updates):
        """Sets the dns_updates of this LiveMigrationStep.


        :param dns_updates: The dns_updates of this LiveMigrationStep.
        :type dns_updates: DnsUpdates
        """

        self._dns_updates = dns_updates

    @property
    def issues(self):
        """Gets the issues of this LiveMigrationStep.

        Output only. Issues that prevent the current step from completing.

        :return: The issues of this LiveMigrationStep.
        :rtype: List[Status]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this LiveMigrationStep.

        Output only. Issues that prevent the current step from completing.

        :param issues: The issues of this LiveMigrationStep.
        :type issues: List[Status]
        """

        self._issues = issues

    @property
    def state(self):
        """Gets the state of this LiveMigrationStep.

        Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.

        :return: The state of this LiveMigrationStep.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LiveMigrationStep.

        Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.

        :param state: The state of this LiveMigrationStep.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PREPARING", "PENDING", "INCOMPLETE", "PROCESSING", "COMPLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
