# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, rdata: str=None, required_action: str=None, type: str=None):
        """DnsRecord - a model defined in OpenAPI

        :param domain_name: The domain_name of this DnsRecord.
        :param rdata: The rdata of this DnsRecord.
        :param required_action: The required_action of this DnsRecord.
        :param type: The type of this DnsRecord.
        """
        self.openapi_types = {
            'domain_name': str,
            'rdata': str,
            'required_action': str,
            'type': str
        }

        self.attribute_map = {
            'domain_name': 'domainName',
            'rdata': 'rdata',
            'required_action': 'requiredAction',
            'type': 'type'
        }

        self._domain_name = domain_name
        self._rdata = rdata
        self._required_action = required_action
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsRecord of this DnsRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this DnsRecord.

        Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.

        :return: The domain_name of this DnsRecord.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DnsRecord.

        Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.

        :param domain_name: The domain_name of this DnsRecord.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def rdata(self):
        """Gets the rdata of this DnsRecord.

        Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue \"pki.goog\"`.

        :return: The rdata of this DnsRecord.
        :rtype: str
        """
        return self._rdata

    @rdata.setter
    def rdata(self, rdata):
        """Sets the rdata of this DnsRecord.

        Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue \"pki.goog\"`.

        :param rdata: The rdata of this DnsRecord.
        :type rdata: str
        """

        self._rdata = rdata

    @property
    def required_action(self):
        """Gets the required_action of this DnsRecord.

        Output only. An enum that indicates the a required action for this record.

        :return: The required_action of this DnsRecord.
        :rtype: str
        """
        return self._required_action

    @required_action.setter
    def required_action(self, required_action):
        """Sets the required_action of this DnsRecord.

        Output only. An enum that indicates the a required action for this record.

        :param required_action: The required_action of this DnsRecord.
        :type required_action: str
        """
        allowed_values = ["NONE", "ADD", "REMOVE"]  # noqa: E501
        if required_action not in allowed_values:
            raise ValueError(
                "Invalid value for `required_action` ({0}), must be one of {1}"
                .format(required_action, allowed_values)
            )

        self._required_action = required_action

    @property
    def type(self):
        """Gets the type of this DnsRecord.

        Output only. The record's type, which determines what data the record contains.

        :return: The type of this DnsRecord.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsRecord.

        Output only. The record's type, which determines what data the record contains.

        :param type: The type of this DnsRecord.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "A", "CNAME", "TXT", "AAAA", "CAA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
