# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dns_record import DnsRecord
from openapi_server.models.status import Status
from openapi_server import util


class DnsRecordSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_error: Status=None, domain_name: str=None, records: List[DnsRecord]=None):
        """DnsRecordSet - a model defined in OpenAPI

        :param check_error: The check_error of this DnsRecordSet.
        :param domain_name: The domain_name of this DnsRecordSet.
        :param records: The records of this DnsRecordSet.
        """
        self.openapi_types = {
            'check_error': Status,
            'domain_name': str,
            'records': List[DnsRecord]
        }

        self.attribute_map = {
            'check_error': 'checkError',
            'domain_name': 'domainName',
            'records': 'records'
        }

        self._check_error = check_error
        self._domain_name = domain_name
        self._records = records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecordSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsRecordSet of this DnsRecordSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_error(self):
        """Gets the check_error of this DnsRecordSet.


        :return: The check_error of this DnsRecordSet.
        :rtype: Status
        """
        return self._check_error

    @check_error.setter
    def check_error(self, check_error):
        """Sets the check_error of this DnsRecordSet.


        :param check_error: The check_error of this DnsRecordSet.
        :type check_error: Status
        """

        self._check_error = check_error

    @property
    def domain_name(self):
        """Gets the domain_name of this DnsRecordSet.

        Output only. The domain name the record set pertains to.

        :return: The domain_name of this DnsRecordSet.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this DnsRecordSet.

        Output only. The domain name the record set pertains to.

        :param domain_name: The domain_name of this DnsRecordSet.
        :type domain_name: str
        """

        self._domain_name = domain_name

    @property
    def records(self):
        """Gets the records of this DnsRecordSet.

        Output only. Records on the domain.

        :return: The records of this DnsRecordSet.
        :rtype: List[DnsRecord]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this DnsRecordSet.

        Output only. Records on the domain.

        :param records: The records of this DnsRecordSet.
        :type records: List[DnsRecord]
        """

        self._records = records
