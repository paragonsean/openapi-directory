/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsRecord from './DnsRecord';
import Status from './Status';

/**
 * The DnsRecordSet model module.
 * @module model/DnsRecordSet
 * @version v1
 */
class DnsRecordSet {
    /**
     * Constructs a new <code>DnsRecordSet</code>.
     * A set of DNS records relevant to the setup and maintenance of a custom domain in Firebase Hosting.
     * @alias module:model/DnsRecordSet
     */
    constructor() { 
        
        DnsRecordSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DnsRecordSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsRecordSet} obj Optional instance to populate.
     * @return {module:model/DnsRecordSet} The populated <code>DnsRecordSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsRecordSet();

            if (data.hasOwnProperty('checkError')) {
                obj['checkError'] = Status.constructFromObject(data['checkError']);
            }
            if (data.hasOwnProperty('domainName')) {
                obj['domainName'] = ApiClient.convertToType(data['domainName'], 'String');
            }
            if (data.hasOwnProperty('records')) {
                obj['records'] = ApiClient.convertToType(data['records'], [DnsRecord]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsRecordSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsRecordSet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `checkError`
        if (data['checkError']) { // data not null
          Status.validateJSON(data['checkError']);
        }
        // ensure the json data is a string
        if (data['domainName'] && !(typeof data['domainName'] === 'string' || data['domainName'] instanceof String)) {
            throw new Error("Expected the field `domainName` to be a primitive type in the JSON string but got " + data['domainName']);
        }
        if (data['records']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['records'])) {
                throw new Error("Expected the field `records` to be an array in the JSON data but got " + data['records']);
            }
            // validate the optional field `records` (array)
            for (const item of data['records']) {
                DnsRecord.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Status} checkError
 */
DnsRecordSet.prototype['checkError'] = undefined;

/**
 * Output only. The domain name the record set pertains to.
 * @member {String} domainName
 */
DnsRecordSet.prototype['domainName'] = undefined;

/**
 * Output only. Records on the domain.
 * @member {Array.<module:model/DnsRecord>} records
 */
DnsRecordSet.prototype['records'] = undefined;






export default DnsRecordSet;

