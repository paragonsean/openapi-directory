/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DnsUpdates from './DnsUpdates';
import LiveMigrationStep from './LiveMigrationStep';
import Status from './Status';

/**
 * The CustomDomainMetadata model module.
 * @module model/CustomDomainMetadata
 * @version v1
 */
class CustomDomainMetadata {
    /**
     * Constructs a new <code>CustomDomainMetadata</code>.
     * Metadata associated with a&#x60;CustomDomain&#x60; operation.
     * @alias module:model/CustomDomainMetadata
     */
    constructor() { 
        
        CustomDomainMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomDomainMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomainMetadata} obj Optional instance to populate.
     * @return {module:model/CustomDomainMetadata} The populated <code>CustomDomainMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomainMetadata();

            if (data.hasOwnProperty('certState')) {
                obj['certState'] = ApiClient.convertToType(data['certState'], 'String');
            }
            if (data.hasOwnProperty('hostState')) {
                obj['hostState'] = ApiClient.convertToType(data['hostState'], 'String');
            }
            if (data.hasOwnProperty('issues')) {
                obj['issues'] = ApiClient.convertToType(data['issues'], [Status]);
            }
            if (data.hasOwnProperty('liveMigrationSteps')) {
                obj['liveMigrationSteps'] = ApiClient.convertToType(data['liveMigrationSteps'], [LiveMigrationStep]);
            }
            if (data.hasOwnProperty('ownershipState')) {
                obj['ownershipState'] = ApiClient.convertToType(data['ownershipState'], 'String');
            }
            if (data.hasOwnProperty('quickSetupUpdates')) {
                obj['quickSetupUpdates'] = DnsUpdates.constructFromObject(data['quickSetupUpdates']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDomainMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDomainMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certState'] && !(typeof data['certState'] === 'string' || data['certState'] instanceof String)) {
            throw new Error("Expected the field `certState` to be a primitive type in the JSON string but got " + data['certState']);
        }
        // ensure the json data is a string
        if (data['hostState'] && !(typeof data['hostState'] === 'string' || data['hostState'] instanceof String)) {
            throw new Error("Expected the field `hostState` to be a primitive type in the JSON string but got " + data['hostState']);
        }
        if (data['issues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['issues'])) {
                throw new Error("Expected the field `issues` to be an array in the JSON data but got " + data['issues']);
            }
            // validate the optional field `issues` (array)
            for (const item of data['issues']) {
                Status.validateJSON(item);
            };
        }
        if (data['liveMigrationSteps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['liveMigrationSteps'])) {
                throw new Error("Expected the field `liveMigrationSteps` to be an array in the JSON data but got " + data['liveMigrationSteps']);
            }
            // validate the optional field `liveMigrationSteps` (array)
            for (const item of data['liveMigrationSteps']) {
                LiveMigrationStep.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ownershipState'] && !(typeof data['ownershipState'] === 'string' || data['ownershipState'] instanceof String)) {
            throw new Error("Expected the field `ownershipState` to be a primitive type in the JSON string but got " + data['ownershipState']);
        }
        // validate the optional field `quickSetupUpdates`
        if (data['quickSetupUpdates']) { // data not null
          DnsUpdates.validateJSON(data['quickSetupUpdates']);
        }

        return true;
    }


}



/**
 * The `CertState` of the domain name's SSL certificate.
 * @member {module:model/CustomDomainMetadata.CertStateEnum} certState
 */
CustomDomainMetadata.prototype['certState'] = undefined;

/**
 * The `HostState` of the domain name this `CustomDomain` refers to.
 * @member {module:model/CustomDomainMetadata.HostStateEnum} hostState
 */
CustomDomainMetadata.prototype['hostState'] = undefined;

/**
 * A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name's records or attempting to mint an SSL certificate.
 * @member {Array.<module:model/Status>} issues
 */
CustomDomainMetadata.prototype['issues'] = undefined;

/**
 * A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the `ownershipState` to be `OWNERSHIP_ACTIVE` and the `certState` to be `CERT_ACTIVE` before sending traffic to Hosting.
 * @member {Array.<module:model/LiveMigrationStep>} liveMigrationSteps
 */
CustomDomainMetadata.prototype['liveMigrationSteps'] = undefined;

/**
 * The `OwnershipState` of the domain name this `CustomDomain` refers to.
 * @member {module:model/CustomDomainMetadata.OwnershipStateEnum} ownershipState
 */
CustomDomainMetadata.prototype['ownershipState'] = undefined;

/**
 * @member {module:model/DnsUpdates} quickSetupUpdates
 */
CustomDomainMetadata.prototype['quickSetupUpdates'] = undefined;





/**
 * Allowed values for the <code>certState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainMetadata['CertStateEnum'] = {

    /**
     * value: "CERT_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "CERT_STATE_UNSPECIFIED",

    /**
     * value: "CERT_PREPARING"
     * @const
     */
    "PREPARING": "CERT_PREPARING",

    /**
     * value: "CERT_VALIDATING"
     * @const
     */
    "VALIDATING": "CERT_VALIDATING",

    /**
     * value: "CERT_PROPAGATING"
     * @const
     */
    "PROPAGATING": "CERT_PROPAGATING",

    /**
     * value: "CERT_ACTIVE"
     * @const
     */
    "ACTIVE": "CERT_ACTIVE",

    /**
     * value: "CERT_EXPIRING_SOON"
     * @const
     */
    "EXPIRING_SOON": "CERT_EXPIRING_SOON",

    /**
     * value: "CERT_EXPIRED"
     * @const
     */
    "EXPIRED": "CERT_EXPIRED"
};


/**
 * Allowed values for the <code>hostState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainMetadata['HostStateEnum'] = {

    /**
     * value: "HOST_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "HOST_STATE_UNSPECIFIED",

    /**
     * value: "HOST_UNHOSTED"
     * @const
     */
    "UNHOSTED": "HOST_UNHOSTED",

    /**
     * value: "HOST_UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "HOST_UNREACHABLE",

    /**
     * value: "HOST_MISMATCH"
     * @const
     */
    "MISMATCH": "HOST_MISMATCH",

    /**
     * value: "HOST_CONFLICT"
     * @const
     */
    "CONFLICT": "HOST_CONFLICT",

    /**
     * value: "HOST_ACTIVE"
     * @const
     */
    "ACTIVE": "HOST_ACTIVE"
};


/**
 * Allowed values for the <code>ownershipState</code> property.
 * @enum {String}
 * @readonly
 */
CustomDomainMetadata['OwnershipStateEnum'] = {

    /**
     * value: "OWNERSHIP_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "OWNERSHIP_STATE_UNSPECIFIED",

    /**
     * value: "OWNERSHIP_MISSING"
     * @const
     */
    "MISSING": "OWNERSHIP_MISSING",

    /**
     * value: "OWNERSHIP_UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "OWNERSHIP_UNREACHABLE",

    /**
     * value: "OWNERSHIP_MISMATCH"
     * @const
     */
    "MISMATCH": "OWNERSHIP_MISMATCH",

    /**
     * value: "OWNERSHIP_CONFLICT"
     * @const
     */
    "CONFLICT": "OWNERSHIP_CONFLICT",

    /**
     * value: "OWNERSHIP_PENDING"
     * @const
     */
    "PENDING": "OWNERSHIP_PENDING",

    /**
     * value: "OWNERSHIP_ACTIVE"
     * @const
     */
    "ACTIVE": "OWNERSHIP_ACTIVE"
};



export default CustomDomainMetadata;

