/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpUpdate::OAIHttpUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpUpdate::OAIHttpUpdate() {
    this->initializeModel();
}

OAIHttpUpdate::~OAIHttpUpdate() {}

void OAIHttpUpdate::initializeModel() {

    m_check_error_isSet = false;
    m_check_error_isValid = false;

    m_desired_isSet = false;
    m_desired_isValid = false;

    m_discovered_isSet = false;
    m_discovered_isValid = false;

    m_last_check_time_isSet = false;
    m_last_check_time_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIHttpUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpUpdate::fromJsonObject(QJsonObject json) {

    m_check_error_isValid = ::OpenAPI::fromJsonValue(m_check_error, json[QString("checkError")]);
    m_check_error_isSet = !json[QString("checkError")].isNull() && m_check_error_isValid;

    m_desired_isValid = ::OpenAPI::fromJsonValue(m_desired, json[QString("desired")]);
    m_desired_isSet = !json[QString("desired")].isNull() && m_desired_isValid;

    m_discovered_isValid = ::OpenAPI::fromJsonValue(m_discovered, json[QString("discovered")]);
    m_discovered_isSet = !json[QString("discovered")].isNull() && m_discovered_isValid;

    m_last_check_time_isValid = ::OpenAPI::fromJsonValue(m_last_check_time, json[QString("lastCheckTime")]);
    m_last_check_time_isSet = !json[QString("lastCheckTime")].isNull() && m_last_check_time_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIHttpUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_check_error.isSet()) {
        obj.insert(QString("checkError"), ::OpenAPI::toJsonValue(m_check_error));
    }
    if (m_desired_isSet) {
        obj.insert(QString("desired"), ::OpenAPI::toJsonValue(m_desired));
    }
    if (m_discovered_isSet) {
        obj.insert(QString("discovered"), ::OpenAPI::toJsonValue(m_discovered));
    }
    if (m_last_check_time_isSet) {
        obj.insert(QString("lastCheckTime"), ::OpenAPI::toJsonValue(m_last_check_time));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

OAIStatus OAIHttpUpdate::getCheckError() const {
    return m_check_error;
}
void OAIHttpUpdate::setCheckError(const OAIStatus &check_error) {
    m_check_error = check_error;
    m_check_error_isSet = true;
}

bool OAIHttpUpdate::is_check_error_Set() const{
    return m_check_error_isSet;
}

bool OAIHttpUpdate::is_check_error_Valid() const{
    return m_check_error_isValid;
}

QString OAIHttpUpdate::getDesired() const {
    return m_desired;
}
void OAIHttpUpdate::setDesired(const QString &desired) {
    m_desired = desired;
    m_desired_isSet = true;
}

bool OAIHttpUpdate::is_desired_Set() const{
    return m_desired_isSet;
}

bool OAIHttpUpdate::is_desired_Valid() const{
    return m_desired_isValid;
}

QString OAIHttpUpdate::getDiscovered() const {
    return m_discovered;
}
void OAIHttpUpdate::setDiscovered(const QString &discovered) {
    m_discovered = discovered;
    m_discovered_isSet = true;
}

bool OAIHttpUpdate::is_discovered_Set() const{
    return m_discovered_isSet;
}

bool OAIHttpUpdate::is_discovered_Valid() const{
    return m_discovered_isValid;
}

QString OAIHttpUpdate::getLastCheckTime() const {
    return m_last_check_time;
}
void OAIHttpUpdate::setLastCheckTime(const QString &last_check_time) {
    m_last_check_time = last_check_time;
    m_last_check_time_isSet = true;
}

bool OAIHttpUpdate::is_last_check_time_Set() const{
    return m_last_check_time_isSet;
}

bool OAIHttpUpdate::is_last_check_time_Valid() const{
    return m_last_check_time_isValid;
}

QString OAIHttpUpdate::getPath() const {
    return m_path;
}
void OAIHttpUpdate::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIHttpUpdate::is_path_Set() const{
    return m_path_isSet;
}

bool OAIHttpUpdate::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIHttpUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_check_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
