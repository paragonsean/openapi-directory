/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecordSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecordSet::OAIDnsRecordSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecordSet::OAIDnsRecordSet() {
    this->initializeModel();
}

OAIDnsRecordSet::~OAIDnsRecordSet() {}

void OAIDnsRecordSet::initializeModel() {

    m_check_error_isSet = false;
    m_check_error_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;
}

void OAIDnsRecordSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecordSet::fromJsonObject(QJsonObject json) {

    m_check_error_isValid = ::OpenAPI::fromJsonValue(m_check_error, json[QString("checkError")]);
    m_check_error_isSet = !json[QString("checkError")].isNull() && m_check_error_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("domainName")]);
    m_domain_name_isSet = !json[QString("domainName")].isNull() && m_domain_name_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;
}

QString OAIDnsRecordSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecordSet::asJsonObject() const {
    QJsonObject obj;
    if (m_check_error.isSet()) {
        obj.insert(QString("checkError"), ::OpenAPI::toJsonValue(m_check_error));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("domainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    return obj;
}

OAIStatus OAIDnsRecordSet::getCheckError() const {
    return m_check_error;
}
void OAIDnsRecordSet::setCheckError(const OAIStatus &check_error) {
    m_check_error = check_error;
    m_check_error_isSet = true;
}

bool OAIDnsRecordSet::is_check_error_Set() const{
    return m_check_error_isSet;
}

bool OAIDnsRecordSet::is_check_error_Valid() const{
    return m_check_error_isValid;
}

QString OAIDnsRecordSet::getDomainName() const {
    return m_domain_name;
}
void OAIDnsRecordSet::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDnsRecordSet::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDnsRecordSet::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList<OAIDnsRecord> OAIDnsRecordSet::getRecords() const {
    return m_records;
}
void OAIDnsRecordSet::setRecords(const QList<OAIDnsRecord> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDnsRecordSet::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDnsRecordSet::is_records_Valid() const{
    return m_records_isValid;
}

bool OAIDnsRecordSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecordSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
