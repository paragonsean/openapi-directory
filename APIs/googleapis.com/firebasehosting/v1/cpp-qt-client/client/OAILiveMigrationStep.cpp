/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveMigrationStep.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILiveMigrationStep::OAILiveMigrationStep(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILiveMigrationStep::OAILiveMigrationStep() {
    this->initializeModel();
}

OAILiveMigrationStep::~OAILiveMigrationStep() {}

void OAILiveMigrationStep::initializeModel() {

    m_cert_verification_isSet = false;
    m_cert_verification_isValid = false;

    m_dns_updates_isSet = false;
    m_dns_updates_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAILiveMigrationStep::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILiveMigrationStep::fromJsonObject(QJsonObject json) {

    m_cert_verification_isValid = ::OpenAPI::fromJsonValue(m_cert_verification, json[QString("certVerification")]);
    m_cert_verification_isSet = !json[QString("certVerification")].isNull() && m_cert_verification_isValid;

    m_dns_updates_isValid = ::OpenAPI::fromJsonValue(m_dns_updates, json[QString("dnsUpdates")]);
    m_dns_updates_isSet = !json[QString("dnsUpdates")].isNull() && m_dns_updates_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAILiveMigrationStep::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILiveMigrationStep::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_verification.isSet()) {
        obj.insert(QString("certVerification"), ::OpenAPI::toJsonValue(m_cert_verification));
    }
    if (m_dns_updates.isSet()) {
        obj.insert(QString("dnsUpdates"), ::OpenAPI::toJsonValue(m_dns_updates));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAICertVerification OAILiveMigrationStep::getCertVerification() const {
    return m_cert_verification;
}
void OAILiveMigrationStep::setCertVerification(const OAICertVerification &cert_verification) {
    m_cert_verification = cert_verification;
    m_cert_verification_isSet = true;
}

bool OAILiveMigrationStep::is_cert_verification_Set() const{
    return m_cert_verification_isSet;
}

bool OAILiveMigrationStep::is_cert_verification_Valid() const{
    return m_cert_verification_isValid;
}

OAIDnsUpdates OAILiveMigrationStep::getDnsUpdates() const {
    return m_dns_updates;
}
void OAILiveMigrationStep::setDnsUpdates(const OAIDnsUpdates &dns_updates) {
    m_dns_updates = dns_updates;
    m_dns_updates_isSet = true;
}

bool OAILiveMigrationStep::is_dns_updates_Set() const{
    return m_dns_updates_isSet;
}

bool OAILiveMigrationStep::is_dns_updates_Valid() const{
    return m_dns_updates_isValid;
}

QList<OAIStatus> OAILiveMigrationStep::getIssues() const {
    return m_issues;
}
void OAILiveMigrationStep::setIssues(const QList<OAIStatus> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAILiveMigrationStep::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAILiveMigrationStep::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAILiveMigrationStep::getState() const {
    return m_state;
}
void OAILiveMigrationStep::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILiveMigrationStep::is_state_Set() const{
    return m_state_isSet;
}

bool OAILiveMigrationStep::is_state_Valid() const{
    return m_state_isValid;
}

bool OAILiveMigrationStep::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_updates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILiveMigrationStep::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
