/**
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsUpdates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsUpdates::OAIDnsUpdates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsUpdates::OAIDnsUpdates() {
    this->initializeModel();
}

OAIDnsUpdates::~OAIDnsUpdates() {}

void OAIDnsUpdates::initializeModel() {

    m_check_time_isSet = false;
    m_check_time_isValid = false;

    m_desired_isSet = false;
    m_desired_isValid = false;

    m_discovered_isSet = false;
    m_discovered_isValid = false;
}

void OAIDnsUpdates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsUpdates::fromJsonObject(QJsonObject json) {

    m_check_time_isValid = ::OpenAPI::fromJsonValue(m_check_time, json[QString("checkTime")]);
    m_check_time_isSet = !json[QString("checkTime")].isNull() && m_check_time_isValid;

    m_desired_isValid = ::OpenAPI::fromJsonValue(m_desired, json[QString("desired")]);
    m_desired_isSet = !json[QString("desired")].isNull() && m_desired_isValid;

    m_discovered_isValid = ::OpenAPI::fromJsonValue(m_discovered, json[QString("discovered")]);
    m_discovered_isSet = !json[QString("discovered")].isNull() && m_discovered_isValid;
}

QString OAIDnsUpdates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsUpdates::asJsonObject() const {
    QJsonObject obj;
    if (m_check_time_isSet) {
        obj.insert(QString("checkTime"), ::OpenAPI::toJsonValue(m_check_time));
    }
    if (m_desired.size() > 0) {
        obj.insert(QString("desired"), ::OpenAPI::toJsonValue(m_desired));
    }
    if (m_discovered.size() > 0) {
        obj.insert(QString("discovered"), ::OpenAPI::toJsonValue(m_discovered));
    }
    return obj;
}

QString OAIDnsUpdates::getCheckTime() const {
    return m_check_time;
}
void OAIDnsUpdates::setCheckTime(const QString &check_time) {
    m_check_time = check_time;
    m_check_time_isSet = true;
}

bool OAIDnsUpdates::is_check_time_Set() const{
    return m_check_time_isSet;
}

bool OAIDnsUpdates::is_check_time_Valid() const{
    return m_check_time_isValid;
}

QList<OAIDnsRecordSet> OAIDnsUpdates::getDesired() const {
    return m_desired;
}
void OAIDnsUpdates::setDesired(const QList<OAIDnsRecordSet> &desired) {
    m_desired = desired;
    m_desired_isSet = true;
}

bool OAIDnsUpdates::is_desired_Set() const{
    return m_desired_isSet;
}

bool OAIDnsUpdates::is_desired_Valid() const{
    return m_desired_isValid;
}

QList<OAIDnsRecordSet> OAIDnsUpdates::getDiscovered() const {
    return m_discovered;
}
void OAIDnsUpdates::setDiscovered(const QList<OAIDnsRecordSet> &discovered) {
    m_discovered = discovered;
    m_discovered_isSet = true;
}

bool OAIDnsUpdates::is_discovered_Set() const{
    return m_discovered_isSet;
}

bool OAIDnsUpdates::is_discovered_Valid() const{
    return m_discovered_isValid;
}

bool OAIDnsUpdates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_desired.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsUpdates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
