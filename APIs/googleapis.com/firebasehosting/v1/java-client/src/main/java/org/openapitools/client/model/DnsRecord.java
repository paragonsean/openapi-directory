/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DNS records are resource records that define how systems and services should behave when handling requests for a domain name. For example, when you add &#x60;A&#x60; records to your domain name&#39;s DNS records, you&#39;re informing other systems (such as your users&#39; web browsers) to contact those IPv4 addresses to retrieve resources relevant to your domain name (such as your Hosting site files).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:53.463861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DnsRecord {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_RDATA = "rdata";
  @SerializedName(SERIALIZED_NAME_RDATA)
  private String rdata;

  /**
   * Output only. An enum that indicates the a required action for this record.
   */
  @JsonAdapter(RequiredActionEnum.Adapter.class)
  public enum RequiredActionEnum {
    NONE("NONE"),
    
    ADD("ADD"),
    
    REMOVE("REMOVE");

    private String value;

    RequiredActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequiredActionEnum fromValue(String value) {
      for (RequiredActionEnum b : RequiredActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequiredActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequiredActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequiredActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequiredActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequiredActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUIRED_ACTION = "requiredAction";
  @SerializedName(SERIALIZED_NAME_REQUIRED_ACTION)
  private RequiredActionEnum requiredAction;

  /**
   * Output only. The record&#39;s type, which determines what data the record contains.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    A("A"),
    
    CNAME("CNAME"),
    
    TXT("TXT"),
    
    AAAA("AAAA"),
    
    CAA("CAA");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DnsRecord() {
  }

  public DnsRecord(
     String domainName, 
     String rdata, 
     RequiredActionEnum requiredAction, 
     TypeEnum type
  ) {
    this();
    this.domainName = domainName;
    this.rdata = rdata;
    this.requiredAction = requiredAction;
    this.type = type;
  }

  /**
   * Output only. The domain name the record pertains to, e.g. &#x60;foo.bar.com.&#x60;.
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }



  /**
   * Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name&#39;s behalf. - CAA: The record&#39;s flags, tag, and value, e.g. &#x60;0 issue \&quot;pki.goog\&quot;&#x60;.
   * @return rdata
   */
  @javax.annotation.Nullable
  public String getRdata() {
    return rdata;
  }



  /**
   * Output only. An enum that indicates the a required action for this record.
   * @return requiredAction
   */
  @javax.annotation.Nullable
  public RequiredActionEnum getRequiredAction() {
    return requiredAction;
  }



  /**
   * Output only. The record&#39;s type, which determines what data the record contains.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsRecord dnsRecord = (DnsRecord) o;
    return Objects.equals(this.domainName, dnsRecord.domainName) &&
        Objects.equals(this.rdata, dnsRecord.rdata) &&
        Objects.equals(this.requiredAction, dnsRecord.requiredAction) &&
        Objects.equals(this.type, dnsRecord.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, rdata, requiredAction, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsRecord {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    rdata: ").append(toIndentedString(rdata)).append("\n");
    sb.append("    requiredAction: ").append(toIndentedString(requiredAction)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainName");
    openapiFields.add("rdata");
    openapiFields.add("requiredAction");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DnsRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DnsRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsRecord is not found in the empty JSON string", DnsRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DnsRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) && !jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if ((jsonObj.get("rdata") != null && !jsonObj.get("rdata").isJsonNull()) && !jsonObj.get("rdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdata").toString()));
      }
      if ((jsonObj.get("requiredAction") != null && !jsonObj.get("requiredAction").isJsonNull()) && !jsonObj.get("requiredAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredAction").toString()));
      }
      // validate the optional field `requiredAction`
      if (jsonObj.get("requiredAction") != null && !jsonObj.get("requiredAction").isJsonNull()) {
        RequiredActionEnum.validateJsonElement(jsonObj.get("requiredAction"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsRecord>() {
           @Override
           public void write(JsonWriter out, DnsRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DnsRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DnsRecord
   * @throws IOException if the JSON string is invalid with respect to DnsRecord
   */
  public static DnsRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsRecord.class);
  }

  /**
   * Convert an instance of DnsRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

