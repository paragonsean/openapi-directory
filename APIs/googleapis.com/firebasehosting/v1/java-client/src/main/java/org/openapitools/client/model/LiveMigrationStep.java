/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CertVerification;
import org.openapitools.client.model.DnsUpdates;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of updates including ACME challenges and DNS records that allow Hosting to create an SSL certificate and establish project ownership for your domain name before you direct traffic to Hosting servers. Use these updates to facilitate zero downtime migrations to Hosting from other services. After you&#39;ve made the recommended updates, check your custom domain&#39;s &#x60;ownershipState&#x60; and &#x60;certState&#x60;. To avoid downtime, they should be &#x60;OWNERSHIP_ACTIVE&#x60; and &#x60;CERT_ACTIVE&#x60;, respectively, before you update your &#x60;A&#x60; and &#x60;AAAA&#x60; records.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:53.463861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveMigrationStep {
  public static final String SERIALIZED_NAME_CERT_VERIFICATION = "certVerification";
  @SerializedName(SERIALIZED_NAME_CERT_VERIFICATION)
  private CertVerification certVerification;

  public static final String SERIALIZED_NAME_DNS_UPDATES = "dnsUpdates";
  @SerializedName(SERIALIZED_NAME_DNS_UPDATES)
  private DnsUpdates dnsUpdates;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<Status> issues = new ArrayList<>();

  /**
   * Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PREPARING("PREPARING"),
    
    PENDING("PENDING"),
    
    INCOMPLETE("INCOMPLETE"),
    
    PROCESSING("PROCESSING"),
    
    COMPLETE("COMPLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public LiveMigrationStep() {
  }

  public LiveMigrationStep(
     List<Status> issues, 
     StateEnum state
  ) {
    this();
    this.issues = issues;
    this.state = state;
  }

  public LiveMigrationStep certVerification(CertVerification certVerification) {
    this.certVerification = certVerification;
    return this;
  }

  /**
   * Get certVerification
   * @return certVerification
   */
  @javax.annotation.Nullable
  public CertVerification getCertVerification() {
    return certVerification;
  }

  public void setCertVerification(CertVerification certVerification) {
    this.certVerification = certVerification;
  }


  public LiveMigrationStep dnsUpdates(DnsUpdates dnsUpdates) {
    this.dnsUpdates = dnsUpdates;
    return this;
  }

  /**
   * Get dnsUpdates
   * @return dnsUpdates
   */
  @javax.annotation.Nullable
  public DnsUpdates getDnsUpdates() {
    return dnsUpdates;
  }

  public void setDnsUpdates(DnsUpdates dnsUpdates) {
    this.dnsUpdates = dnsUpdates;
  }


  /**
   * Output only. Issues that prevent the current step from completing.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<Status> getIssues() {
    return issues;
  }



  /**
   * Output only. The state of the live migration step, indicates whether you should work to complete the step now, in the future, or have already completed it.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveMigrationStep liveMigrationStep = (LiveMigrationStep) o;
    return Objects.equals(this.certVerification, liveMigrationStep.certVerification) &&
        Objects.equals(this.dnsUpdates, liveMigrationStep.dnsUpdates) &&
        Objects.equals(this.issues, liveMigrationStep.issues) &&
        Objects.equals(this.state, liveMigrationStep.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certVerification, dnsUpdates, issues, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveMigrationStep {\n");
    sb.append("    certVerification: ").append(toIndentedString(certVerification)).append("\n");
    sb.append("    dnsUpdates: ").append(toIndentedString(dnsUpdates)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certVerification");
    openapiFields.add("dnsUpdates");
    openapiFields.add("issues");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveMigrationStep
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveMigrationStep.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveMigrationStep is not found in the empty JSON string", LiveMigrationStep.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveMigrationStep.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveMigrationStep` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `certVerification`
      if (jsonObj.get("certVerification") != null && !jsonObj.get("certVerification").isJsonNull()) {
        CertVerification.validateJsonElement(jsonObj.get("certVerification"));
      }
      // validate the optional field `dnsUpdates`
      if (jsonObj.get("dnsUpdates") != null && !jsonObj.get("dnsUpdates").isJsonNull()) {
        DnsUpdates.validateJsonElement(jsonObj.get("dnsUpdates"));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            Status.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveMigrationStep.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveMigrationStep' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveMigrationStep> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveMigrationStep.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveMigrationStep>() {
           @Override
           public void write(JsonWriter out, LiveMigrationStep value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveMigrationStep read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveMigrationStep given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveMigrationStep
   * @throws IOException if the JSON string is invalid with respect to LiveMigrationStep
   */
  public static LiveMigrationStep fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveMigrationStep.class);
  }

  /**
   * Convert an instance of LiveMigrationStep to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

