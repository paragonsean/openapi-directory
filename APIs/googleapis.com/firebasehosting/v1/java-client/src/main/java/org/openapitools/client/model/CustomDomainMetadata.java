/*
 * Firebase Hosting API
 * The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsUpdates;
import org.openapitools.client.model.LiveMigrationStep;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata associated with a&#x60;CustomDomain&#x60; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:53.463861-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomDomainMetadata {
  /**
   * The &#x60;CertState&#x60; of the domain name&#39;s SSL certificate.
   */
  @JsonAdapter(CertStateEnum.Adapter.class)
  public enum CertStateEnum {
    STATE_UNSPECIFIED("CERT_STATE_UNSPECIFIED"),
    
    PREPARING("CERT_PREPARING"),
    
    VALIDATING("CERT_VALIDATING"),
    
    PROPAGATING("CERT_PROPAGATING"),
    
    ACTIVE("CERT_ACTIVE"),
    
    EXPIRING_SOON("CERT_EXPIRING_SOON"),
    
    EXPIRED("CERT_EXPIRED");

    private String value;

    CertStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertStateEnum fromValue(String value) {
      for (CertStateEnum b : CertStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERT_STATE = "certState";
  @SerializedName(SERIALIZED_NAME_CERT_STATE)
  private CertStateEnum certState;

  /**
   * The &#x60;HostState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   */
  @JsonAdapter(HostStateEnum.Adapter.class)
  public enum HostStateEnum {
    STATE_UNSPECIFIED("HOST_STATE_UNSPECIFIED"),
    
    UNHOSTED("HOST_UNHOSTED"),
    
    UNREACHABLE("HOST_UNREACHABLE"),
    
    MISMATCH("HOST_MISMATCH"),
    
    CONFLICT("HOST_CONFLICT"),
    
    ACTIVE("HOST_ACTIVE");

    private String value;

    HostStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostStateEnum fromValue(String value) {
      for (HostStateEnum b : HostStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_STATE = "hostState";
  @SerializedName(SERIALIZED_NAME_HOST_STATE)
  private HostStateEnum hostState;

  public static final String SERIALIZED_NAME_ISSUES = "issues";
  @SerializedName(SERIALIZED_NAME_ISSUES)
  private List<Status> issues = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIVE_MIGRATION_STEPS = "liveMigrationSteps";
  @SerializedName(SERIALIZED_NAME_LIVE_MIGRATION_STEPS)
  private List<LiveMigrationStep> liveMigrationSteps = new ArrayList<>();

  /**
   * The &#x60;OwnershipState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   */
  @JsonAdapter(OwnershipStateEnum.Adapter.class)
  public enum OwnershipStateEnum {
    STATE_UNSPECIFIED("OWNERSHIP_STATE_UNSPECIFIED"),
    
    MISSING("OWNERSHIP_MISSING"),
    
    UNREACHABLE("OWNERSHIP_UNREACHABLE"),
    
    MISMATCH("OWNERSHIP_MISMATCH"),
    
    CONFLICT("OWNERSHIP_CONFLICT"),
    
    PENDING("OWNERSHIP_PENDING"),
    
    ACTIVE("OWNERSHIP_ACTIVE");

    private String value;

    OwnershipStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipStateEnum fromValue(String value) {
      for (OwnershipStateEnum b : OwnershipStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_STATE = "ownershipState";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_STATE)
  private OwnershipStateEnum ownershipState;

  public static final String SERIALIZED_NAME_QUICK_SETUP_UPDATES = "quickSetupUpdates";
  @SerializedName(SERIALIZED_NAME_QUICK_SETUP_UPDATES)
  private DnsUpdates quickSetupUpdates;

  public CustomDomainMetadata() {
  }

  public CustomDomainMetadata certState(CertStateEnum certState) {
    this.certState = certState;
    return this;
  }

  /**
   * The &#x60;CertState&#x60; of the domain name&#39;s SSL certificate.
   * @return certState
   */
  @javax.annotation.Nullable
  public CertStateEnum getCertState() {
    return certState;
  }

  public void setCertState(CertStateEnum certState) {
    this.certState = certState;
  }


  public CustomDomainMetadata hostState(HostStateEnum hostState) {
    this.hostState = hostState;
    return this;
  }

  /**
   * The &#x60;HostState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   * @return hostState
   */
  @javax.annotation.Nullable
  public HostStateEnum getHostState() {
    return hostState;
  }

  public void setHostState(HostStateEnum hostState) {
    this.hostState = hostState;
  }


  public CustomDomainMetadata issues(List<Status> issues) {
    this.issues = issues;
    return this;
  }

  public CustomDomainMetadata addIssuesItem(Status issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * A list of issues that are currently preventing Hosting from completing the operation. These are generally DNS-related issues that Hosting encounters when querying a domain name&#39;s records or attempting to mint an SSL certificate.
   * @return issues
   */
  @javax.annotation.Nullable
  public List<Status> getIssues() {
    return issues;
  }

  public void setIssues(List<Status> issues) {
    this.issues = issues;
  }


  public CustomDomainMetadata liveMigrationSteps(List<LiveMigrationStep> liveMigrationSteps) {
    this.liveMigrationSteps = liveMigrationSteps;
    return this;
  }

  public CustomDomainMetadata addLiveMigrationStepsItem(LiveMigrationStep liveMigrationStepsItem) {
    if (this.liveMigrationSteps == null) {
      this.liveMigrationSteps = new ArrayList<>();
    }
    this.liveMigrationSteps.add(liveMigrationStepsItem);
    return this;
  }

  /**
   * A set of DNS record updates and ACME challenges that allow you to transition domain names to Firebase Hosting with zero downtime. These updates allow Hosting to create an SSL certificate and establish ownership for your custom domain before Hosting begins serving traffic on it. If your domain name is already in active use with another provider, add one of the challenges and make the recommended DNS updates. After adding challenges and adjusting DNS records as necessary, wait for the &#x60;ownershipState&#x60; to be &#x60;OWNERSHIP_ACTIVE&#x60; and the &#x60;certState&#x60; to be &#x60;CERT_ACTIVE&#x60; before sending traffic to Hosting.
   * @return liveMigrationSteps
   */
  @javax.annotation.Nullable
  public List<LiveMigrationStep> getLiveMigrationSteps() {
    return liveMigrationSteps;
  }

  public void setLiveMigrationSteps(List<LiveMigrationStep> liveMigrationSteps) {
    this.liveMigrationSteps = liveMigrationSteps;
  }


  public CustomDomainMetadata ownershipState(OwnershipStateEnum ownershipState) {
    this.ownershipState = ownershipState;
    return this;
  }

  /**
   * The &#x60;OwnershipState&#x60; of the domain name this &#x60;CustomDomain&#x60; refers to.
   * @return ownershipState
   */
  @javax.annotation.Nullable
  public OwnershipStateEnum getOwnershipState() {
    return ownershipState;
  }

  public void setOwnershipState(OwnershipStateEnum ownershipState) {
    this.ownershipState = ownershipState;
  }


  public CustomDomainMetadata quickSetupUpdates(DnsUpdates quickSetupUpdates) {
    this.quickSetupUpdates = quickSetupUpdates;
    return this;
  }

  /**
   * Get quickSetupUpdates
   * @return quickSetupUpdates
   */
  @javax.annotation.Nullable
  public DnsUpdates getQuickSetupUpdates() {
    return quickSetupUpdates;
  }

  public void setQuickSetupUpdates(DnsUpdates quickSetupUpdates) {
    this.quickSetupUpdates = quickSetupUpdates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomDomainMetadata customDomainMetadata = (CustomDomainMetadata) o;
    return Objects.equals(this.certState, customDomainMetadata.certState) &&
        Objects.equals(this.hostState, customDomainMetadata.hostState) &&
        Objects.equals(this.issues, customDomainMetadata.issues) &&
        Objects.equals(this.liveMigrationSteps, customDomainMetadata.liveMigrationSteps) &&
        Objects.equals(this.ownershipState, customDomainMetadata.ownershipState) &&
        Objects.equals(this.quickSetupUpdates, customDomainMetadata.quickSetupUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certState, hostState, issues, liveMigrationSteps, ownershipState, quickSetupUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomDomainMetadata {\n");
    sb.append("    certState: ").append(toIndentedString(certState)).append("\n");
    sb.append("    hostState: ").append(toIndentedString(hostState)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    liveMigrationSteps: ").append(toIndentedString(liveMigrationSteps)).append("\n");
    sb.append("    ownershipState: ").append(toIndentedString(ownershipState)).append("\n");
    sb.append("    quickSetupUpdates: ").append(toIndentedString(quickSetupUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certState");
    openapiFields.add("hostState");
    openapiFields.add("issues");
    openapiFields.add("liveMigrationSteps");
    openapiFields.add("ownershipState");
    openapiFields.add("quickSetupUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomDomainMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomDomainMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomDomainMetadata is not found in the empty JSON string", CustomDomainMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomDomainMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomDomainMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certState") != null && !jsonObj.get("certState").isJsonNull()) && !jsonObj.get("certState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certState").toString()));
      }
      // validate the optional field `certState`
      if (jsonObj.get("certState") != null && !jsonObj.get("certState").isJsonNull()) {
        CertStateEnum.validateJsonElement(jsonObj.get("certState"));
      }
      if ((jsonObj.get("hostState") != null && !jsonObj.get("hostState").isJsonNull()) && !jsonObj.get("hostState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostState").toString()));
      }
      // validate the optional field `hostState`
      if (jsonObj.get("hostState") != null && !jsonObj.get("hostState").isJsonNull()) {
        HostStateEnum.validateJsonElement(jsonObj.get("hostState"));
      }
      if (jsonObj.get("issues") != null && !jsonObj.get("issues").isJsonNull()) {
        JsonArray jsonArrayissues = jsonObj.getAsJsonArray("issues");
        if (jsonArrayissues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("issues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `issues` to be an array in the JSON string but got `%s`", jsonObj.get("issues").toString()));
          }

          // validate the optional field `issues` (array)
          for (int i = 0; i < jsonArrayissues.size(); i++) {
            Status.validateJsonElement(jsonArrayissues.get(i));
          };
        }
      }
      if (jsonObj.get("liveMigrationSteps") != null && !jsonObj.get("liveMigrationSteps").isJsonNull()) {
        JsonArray jsonArrayliveMigrationSteps = jsonObj.getAsJsonArray("liveMigrationSteps");
        if (jsonArrayliveMigrationSteps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("liveMigrationSteps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `liveMigrationSteps` to be an array in the JSON string but got `%s`", jsonObj.get("liveMigrationSteps").toString()));
          }

          // validate the optional field `liveMigrationSteps` (array)
          for (int i = 0; i < jsonArrayliveMigrationSteps.size(); i++) {
            LiveMigrationStep.validateJsonElement(jsonArrayliveMigrationSteps.get(i));
          };
        }
      }
      if ((jsonObj.get("ownershipState") != null && !jsonObj.get("ownershipState").isJsonNull()) && !jsonObj.get("ownershipState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownershipState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownershipState").toString()));
      }
      // validate the optional field `ownershipState`
      if (jsonObj.get("ownershipState") != null && !jsonObj.get("ownershipState").isJsonNull()) {
        OwnershipStateEnum.validateJsonElement(jsonObj.get("ownershipState"));
      }
      // validate the optional field `quickSetupUpdates`
      if (jsonObj.get("quickSetupUpdates") != null && !jsonObj.get("quickSetupUpdates").isJsonNull()) {
        DnsUpdates.validateJsonElement(jsonObj.get("quickSetupUpdates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomDomainMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomDomainMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomDomainMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomDomainMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomDomainMetadata>() {
           @Override
           public void write(JsonWriter out, CustomDomainMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomDomainMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomDomainMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomDomainMetadata
   * @throws IOException if the JSON string is invalid with respect to CustomDomainMetadata
   */
  public static CustomDomainMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomDomainMetadata.class);
  }

  /**
   * Convert an instance of CustomDomainMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

