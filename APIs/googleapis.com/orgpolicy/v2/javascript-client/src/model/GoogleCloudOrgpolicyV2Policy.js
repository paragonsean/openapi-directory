/**
 * Organization Policy API
 * The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudOrgpolicyV2AlternatePolicySpec from './GoogleCloudOrgpolicyV2AlternatePolicySpec';
import GoogleCloudOrgpolicyV2PolicySpec from './GoogleCloudOrgpolicyV2PolicySpec';

/**
 * The GoogleCloudOrgpolicyV2Policy model module.
 * @module model/GoogleCloudOrgpolicyV2Policy
 * @version v2
 */
class GoogleCloudOrgpolicyV2Policy {
    /**
     * Constructs a new <code>GoogleCloudOrgpolicyV2Policy</code>.
     * Defines an organization policy which is used to specify constraints for configurations of Google Cloud resources.
     * @alias module:model/GoogleCloudOrgpolicyV2Policy
     */
    constructor() { 
        
        GoogleCloudOrgpolicyV2Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudOrgpolicyV2Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudOrgpolicyV2Policy} obj Optional instance to populate.
     * @return {module:model/GoogleCloudOrgpolicyV2Policy} The populated <code>GoogleCloudOrgpolicyV2Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudOrgpolicyV2Policy();

            if (data.hasOwnProperty('alternate')) {
                obj['alternate'] = GoogleCloudOrgpolicyV2AlternatePolicySpec.constructFromObject(data['alternate']);
            }
            if (data.hasOwnProperty('dryRunSpec')) {
                obj['dryRunSpec'] = GoogleCloudOrgpolicyV2PolicySpec.constructFromObject(data['dryRunSpec']);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = GoogleCloudOrgpolicyV2PolicySpec.constructFromObject(data['spec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudOrgpolicyV2Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudOrgpolicyV2Policy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alternate`
        if (data['alternate']) { // data not null
          GoogleCloudOrgpolicyV2AlternatePolicySpec.validateJSON(data['alternate']);
        }
        // validate the optional field `dryRunSpec`
        if (data['dryRunSpec']) { // data not null
          GoogleCloudOrgpolicyV2PolicySpec.validateJSON(data['dryRunSpec']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          GoogleCloudOrgpolicyV2PolicySpec.validateJSON(data['spec']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudOrgpolicyV2AlternatePolicySpec} alternate
 */
GoogleCloudOrgpolicyV2Policy.prototype['alternate'] = undefined;

/**
 * @member {module:model/GoogleCloudOrgpolicyV2PolicySpec} dryRunSpec
 */
GoogleCloudOrgpolicyV2Policy.prototype['dryRunSpec'] = undefined;

/**
 * Optional. An opaque tag indicating the current state of the policy, used for concurrency control. This 'etag' is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
GoogleCloudOrgpolicyV2Policy.prototype['etag'] = undefined;

/**
 * Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.
 * @member {String} name
 */
GoogleCloudOrgpolicyV2Policy.prototype['name'] = undefined;

/**
 * @member {module:model/GoogleCloudOrgpolicyV2PolicySpec} spec
 */
GoogleCloudOrgpolicyV2Policy.prototype['spec'] = undefined;






export default GoogleCloudOrgpolicyV2Policy;

