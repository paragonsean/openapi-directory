/*
 * Organization Policy API
 * The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues;
import org.openapitools.client.model.GoogleTypeExpr;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule used to express this policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:08.722801-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudOrgpolicyV2PolicySpecPolicyRule {
  public static final String SERIALIZED_NAME_ALLOW_ALL = "allowAll";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALL)
  private Boolean allowAll;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private GoogleTypeExpr condition;

  public static final String SERIALIZED_NAME_DENY_ALL = "denyAll";
  @SerializedName(SERIALIZED_NAME_DENY_ALL)
  private Boolean denyAll;

  public static final String SERIALIZED_NAME_ENFORCE = "enforce";
  @SerializedName(SERIALIZED_NAME_ENFORCE)
  private Boolean enforce;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues values;

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule() {
  }

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule allowAll(Boolean allowAll) {
    this.allowAll = allowAll;
    return this;
  }

  /**
   * Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.
   * @return allowAll
   */
  @javax.annotation.Nullable
  public Boolean getAllowAll() {
    return allowAll;
  }

  public void setAllowAll(Boolean allowAll) {
    this.allowAll = allowAll;
  }


  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule condition(GoogleTypeExpr condition) {
    this.condition = condition;
    return this;
  }

  /**
   * Get condition
   * @return condition
   */
  @javax.annotation.Nullable
  public GoogleTypeExpr getCondition() {
    return condition;
  }

  public void setCondition(GoogleTypeExpr condition) {
    this.condition = condition;
  }


  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule denyAll(Boolean denyAll) {
    this.denyAll = denyAll;
    return this;
  }

  /**
   * Setting this to true means that all values are denied. This field can be set only in policies for list constraints.
   * @return denyAll
   */
  @javax.annotation.Nullable
  public Boolean getDenyAll() {
    return denyAll;
  }

  public void setDenyAll(Boolean denyAll) {
    this.denyAll = denyAll;
  }


  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule enforce(Boolean enforce) {
    this.enforce = enforce;
    return this;
  }

  /**
   * If &#x60;true&#x60;, then the policy is enforced. If &#x60;false&#x60;, then any configuration is acceptable. This field can be set only in policies for boolean constraints.
   * @return enforce
   */
  @javax.annotation.Nullable
  public Boolean getEnforce() {
    return enforce;
  }

  public void setEnforce(Boolean enforce) {
    this.enforce = enforce;
  }


  public GoogleCloudOrgpolicyV2PolicySpecPolicyRule values(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues values) {
    this.values = values;
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues getValues() {
    return values;
  }

  public void setValues(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudOrgpolicyV2PolicySpecPolicyRule googleCloudOrgpolicyV2PolicySpecPolicyRule = (GoogleCloudOrgpolicyV2PolicySpecPolicyRule) o;
    return Objects.equals(this.allowAll, googleCloudOrgpolicyV2PolicySpecPolicyRule.allowAll) &&
        Objects.equals(this.condition, googleCloudOrgpolicyV2PolicySpecPolicyRule.condition) &&
        Objects.equals(this.denyAll, googleCloudOrgpolicyV2PolicySpecPolicyRule.denyAll) &&
        Objects.equals(this.enforce, googleCloudOrgpolicyV2PolicySpecPolicyRule.enforce) &&
        Objects.equals(this.values, googleCloudOrgpolicyV2PolicySpecPolicyRule.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAll, condition, denyAll, enforce, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudOrgpolicyV2PolicySpecPolicyRule {\n");
    sb.append("    allowAll: ").append(toIndentedString(allowAll)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    denyAll: ").append(toIndentedString(denyAll)).append("\n");
    sb.append("    enforce: ").append(toIndentedString(enforce)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowAll");
    openapiFields.add("condition");
    openapiFields.add("denyAll");
    openapiFields.add("enforce");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudOrgpolicyV2PolicySpecPolicyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudOrgpolicyV2PolicySpecPolicyRule is not found in the empty JSON string", GoogleCloudOrgpolicyV2PolicySpecPolicyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudOrgpolicyV2PolicySpecPolicyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `condition`
      if (jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) {
        GoogleTypeExpr.validateJsonElement(jsonObj.get("condition"));
      }
      // validate the optional field `values`
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.validateJsonElement(jsonObj.get("values"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudOrgpolicyV2PolicySpecPolicyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudOrgpolicyV2PolicySpecPolicyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudOrgpolicyV2PolicySpecPolicyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudOrgpolicyV2PolicySpecPolicyRule>() {
           @Override
           public void write(JsonWriter out, GoogleCloudOrgpolicyV2PolicySpecPolicyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudOrgpolicyV2PolicySpecPolicyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRule
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudOrgpolicyV2PolicySpecPolicyRule
   */
  public static GoogleCloudOrgpolicyV2PolicySpecPolicyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudOrgpolicyV2PolicySpecPolicyRule.class);
  }

  /**
   * Convert an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

