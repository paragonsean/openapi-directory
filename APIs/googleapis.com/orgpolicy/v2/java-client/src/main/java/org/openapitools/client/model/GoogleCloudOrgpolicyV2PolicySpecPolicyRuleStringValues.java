/*
 * Organization Policy API
 * The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A message that holds specific allowed and denied values. This message can define specific values and subtrees of the Resource Manager resource hierarchy (&#x60;Organizations&#x60;, &#x60;Folders&#x60;, &#x60;Projects&#x60;) that are allowed or denied. This is achieved by using the &#x60;under:&#x60; and optional &#x60;is:&#x60; prefixes. The &#x60;under:&#x60; prefix is used to denote resource subtree values. The &#x60;is:&#x60; prefix is used to denote specific values, and is required only if the value contains a \&quot;:\&quot;. Values prefixed with \&quot;is:\&quot; are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - &#x60;projects/&#x60; (for example, &#x60;projects/tokyo-rain-123&#x60;) - &#x60;folders/&#x60; (for example, &#x60;folders/1234&#x60;) - &#x60;organizations/&#x60; (for example, &#x60;organizations/1234&#x60;) The &#x60;supports_under&#x60; field of the associated &#x60;Constraint&#x60; defines whether ancestry prefixes can be used.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:38:08.722801-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues {
  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<String> allowedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_DENIED_VALUES = "deniedValues";
  @SerializedName(SERIALIZED_NAME_DENIED_VALUES)
  private List<String> deniedValues = new ArrayList<>();

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues() {
  }

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues allowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues addAllowedValuesItem(String allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * List of values allowed at this resource.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<String> allowedValues) {
    this.allowedValues = allowedValues;
  }


  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues deniedValues(List<String> deniedValues) {
    this.deniedValues = deniedValues;
    return this;
  }

  public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues addDeniedValuesItem(String deniedValuesItem) {
    if (this.deniedValues == null) {
      this.deniedValues = new ArrayList<>();
    }
    this.deniedValues.add(deniedValuesItem);
    return this;
  }

  /**
   * List of values denied at this resource.
   * @return deniedValues
   */
  @javax.annotation.Nullable
  public List<String> getDeniedValues() {
    return deniedValues;
  }

  public void setDeniedValues(List<String> deniedValues) {
    this.deniedValues = deniedValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues = (GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues) o;
    return Objects.equals(this.allowedValues, googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.allowedValues) &&
        Objects.equals(this.deniedValues, googleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.deniedValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, deniedValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues {\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    deniedValues: ").append(toIndentedString(deniedValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedValues");
    openapiFields.add("deniedValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues is not found in the empty JSON string", GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedValues") != null && !jsonObj.get("allowedValues").isJsonNull() && !jsonObj.get("allowedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("deniedValues") != null && !jsonObj.get("deniedValues").isJsonNull() && !jsonObj.get("deniedValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deniedValues` to be an array in the JSON string but got `%s`", jsonObj.get("deniedValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues>() {
           @Override
           public void write(JsonWriter out, GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
   */
  public static GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.class);
  }

  /**
   * Convert an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

