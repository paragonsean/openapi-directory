/*
 * Organization Policy API
 * The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GoogleCloudOrgpolicyV2ListConstraintsResponse;
import org.openapitools.client.model.GoogleCloudOrgpolicyV2ListPoliciesResponse;
import org.openapitools.client.model.GoogleCloudOrgpolicyV2Policy;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Lists constraints that could be applied on the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsConstraintsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudOrgpolicyV2ListConstraintsResponse response = api.orgpolicyProjectsConstraintsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a policy. Returns a &#x60;google.rpc.Status&#x60; with &#x60;google.rpc.Code.NOT_FOUND&#x60; if the constraint does not exist. Returns a &#x60;google.rpc.Status&#x60; with &#x60;google.rpc.Code.ALREADY_EXISTS&#x60; if the policy already exists on the given Google Cloud resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudOrgpolicyV2Policy googleCloudOrgpolicyV2Policy = null;
        GoogleCloudOrgpolicyV2Policy response = api.orgpolicyProjectsPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, googleCloudOrgpolicyV2Policy);
        // TODO: test validations
    }

    /**
     * Deletes a policy. Returns a &#x60;google.rpc.Status&#x60; with &#x60;google.rpc.Code.NOT_FOUND&#x60; if the constraint or organization policy does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String etag = null;
        Object response = api.orgpolicyProjectsPoliciesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, etag);
        // TODO: test validations
    }

    /**
     * Gets a policy on a resource. If no policy is set on the resource, &#x60;NOT_FOUND&#x60; is returned. The &#x60;etag&#x60; value can be used with &#x60;UpdatePolicy()&#x60; to update a policy during read-modify-write.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudOrgpolicyV2Policy response = api.orgpolicyProjectsPoliciesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the effective policy on a resource. This is the result of merging policies in the resource hierarchy and evaluating conditions. The returned policy will not have an &#x60;etag&#x60; or &#x60;condition&#x60; set because it is an evaluated policy across multiple resources. Subtrees of Resource Manager resource hierarchy with &#39;under:&#39; prefix will not be expanded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesGetEffectivePolicyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GoogleCloudOrgpolicyV2Policy response = api.orgpolicyProjectsPoliciesGetEffectivePolicy(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves all of the policies that exist on a particular resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleCloudOrgpolicyV2ListPoliciesResponse response = api.orgpolicyProjectsPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a policy. Returns a &#x60;google.rpc.Status&#x60; with &#x60;google.rpc.Code.NOT_FOUND&#x60; if the constraint or the policy do not exist. Returns a &#x60;google.rpc.Status&#x60; with &#x60;google.rpc.Code.ABORTED&#x60; if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void orgpolicyProjectsPoliciesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        GoogleCloudOrgpolicyV2Policy googleCloudOrgpolicyV2Policy = null;
        GoogleCloudOrgpolicyV2Policy response = api.orgpolicyProjectsPoliciesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, googleCloudOrgpolicyV2Policy);
        // TODO: test validations
    }

}
