/**
 * Travel Impact Model API
 * Travel Impact Model API lets you query travel carbon emission estimates.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelVersion model module.
 * @module model/ModelVersion
 * @version v1
 */
class ModelVersion {
    /**
     * Constructs a new <code>ModelVersion</code>.
     * Travel Impact Model version. For more information about the model versioning see https://github.com/google/travel-impact-model/#versioning.
     * @alias module:model/ModelVersion
     */
    constructor() { 
        
        ModelVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelVersion} obj Optional instance to populate.
     * @return {module:model/ModelVersion} The populated <code>ModelVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelVersion();

            if (data.hasOwnProperty('dated')) {
                obj['dated'] = ApiClient.convertToType(data['dated'], 'String');
            }
            if (data.hasOwnProperty('major')) {
                obj['major'] = ApiClient.convertToType(data['major'], 'Number');
            }
            if (data.hasOwnProperty('minor')) {
                obj['minor'] = ApiClient.convertToType(data['minor'], 'Number');
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ApiClient.convertToType(data['patch'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dated'] && !(typeof data['dated'] === 'string' || data['dated'] instanceof String)) {
            throw new Error("Expected the field `dated` to be a primitive type in the JSON string but got " + data['dated']);
        }

        return true;
    }


}



/**
 * Dated versions: Model datasets are recreated with refreshed input data but no change to the algorithms regularly.
 * @member {String} dated
 */
ModelVersion.prototype['dated'] = undefined;

/**
 * Major versions: Major changes to methodology (e.g. adding new data sources to the model that lead to major output changes). Such changes will be infrequent and announced well in advance. Might involve API version changes, which will respect guidelines in https://cloud.google.com/endpoints/docs/openapi/versioning-an-api#backwards-incompatible
 * @member {Number} major
 */
ModelVersion.prototype['major'] = undefined;

/**
 * Minor versions: Changes to the model that, while being consistent across schema versions, change the model parameters or implementation.
 * @member {Number} minor
 */
ModelVersion.prototype['minor'] = undefined;

/**
 * Patch versions: Implementation changes meant to address bugs or inaccuracies in the model implementation.
 * @member {Number} patch
 */
ModelVersion.prototype['patch'] = undefined;






export default ModelVersion;

