/**
 * Travel Impact Model API
 * Travel Impact Model API lets you query travel carbon emission estimates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputeFlightEmissionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputeFlightEmissionsResponse::OAIComputeFlightEmissionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputeFlightEmissionsResponse::OAIComputeFlightEmissionsResponse() {
    this->initializeModel();
}

OAIComputeFlightEmissionsResponse::~OAIComputeFlightEmissionsResponse() {}

void OAIComputeFlightEmissionsResponse::initializeModel() {

    m_flight_emissions_isSet = false;
    m_flight_emissions_isValid = false;

    m_model_version_isSet = false;
    m_model_version_isValid = false;
}

void OAIComputeFlightEmissionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputeFlightEmissionsResponse::fromJsonObject(QJsonObject json) {

    m_flight_emissions_isValid = ::OpenAPI::fromJsonValue(m_flight_emissions, json[QString("flightEmissions")]);
    m_flight_emissions_isSet = !json[QString("flightEmissions")].isNull() && m_flight_emissions_isValid;

    m_model_version_isValid = ::OpenAPI::fromJsonValue(m_model_version, json[QString("modelVersion")]);
    m_model_version_isSet = !json[QString("modelVersion")].isNull() && m_model_version_isValid;
}

QString OAIComputeFlightEmissionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputeFlightEmissionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_flight_emissions.size() > 0) {
        obj.insert(QString("flightEmissions"), ::OpenAPI::toJsonValue(m_flight_emissions));
    }
    if (m_model_version.isSet()) {
        obj.insert(QString("modelVersion"), ::OpenAPI::toJsonValue(m_model_version));
    }
    return obj;
}

QList<OAIFlightWithEmissions> OAIComputeFlightEmissionsResponse::getFlightEmissions() const {
    return m_flight_emissions;
}
void OAIComputeFlightEmissionsResponse::setFlightEmissions(const QList<OAIFlightWithEmissions> &flight_emissions) {
    m_flight_emissions = flight_emissions;
    m_flight_emissions_isSet = true;
}

bool OAIComputeFlightEmissionsResponse::is_flight_emissions_Set() const{
    return m_flight_emissions_isSet;
}

bool OAIComputeFlightEmissionsResponse::is_flight_emissions_Valid() const{
    return m_flight_emissions_isValid;
}

OAIModelVersion OAIComputeFlightEmissionsResponse::getModelVersion() const {
    return m_model_version;
}
void OAIComputeFlightEmissionsResponse::setModelVersion(const OAIModelVersion &model_version) {
    m_model_version = model_version;
    m_model_version_isSet = true;
}

bool OAIComputeFlightEmissionsResponse::is_model_version_Set() const{
    return m_model_version_isSet;
}

bool OAIComputeFlightEmissionsResponse::is_model_version_Valid() const{
    return m_model_version_isValid;
}

bool OAIComputeFlightEmissionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flight_emissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputeFlightEmissionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
