/**
 * Travel Impact Model API
 * Travel Impact Model API lets you query travel carbon emission estimates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlight::OAIFlight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlight::OAIFlight() {
    this->initializeModel();
}

OAIFlight::~OAIFlight() {}

void OAIFlight::initializeModel() {

    m_departure_date_isSet = false;
    m_departure_date_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_flight_number_isSet = false;
    m_flight_number_isValid = false;

    m_operating_carrier_code_isSet = false;
    m_operating_carrier_code_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;
}

void OAIFlight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlight::fromJsonObject(QJsonObject json) {

    m_departure_date_isValid = ::OpenAPI::fromJsonValue(m_departure_date, json[QString("departureDate")]);
    m_departure_date_isSet = !json[QString("departureDate")].isNull() && m_departure_date_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_flight_number_isValid = ::OpenAPI::fromJsonValue(m_flight_number, json[QString("flightNumber")]);
    m_flight_number_isSet = !json[QString("flightNumber")].isNull() && m_flight_number_isValid;

    m_operating_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_operating_carrier_code, json[QString("operatingCarrierCode")]);
    m_operating_carrier_code_isSet = !json[QString("operatingCarrierCode")].isNull() && m_operating_carrier_code_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;
}

QString OAIFlight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlight::asJsonObject() const {
    QJsonObject obj;
    if (m_departure_date.isSet()) {
        obj.insert(QString("departureDate"), ::OpenAPI::toJsonValue(m_departure_date));
    }
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_flight_number_isSet) {
        obj.insert(QString("flightNumber"), ::OpenAPI::toJsonValue(m_flight_number));
    }
    if (m_operating_carrier_code_isSet) {
        obj.insert(QString("operatingCarrierCode"), ::OpenAPI::toJsonValue(m_operating_carrier_code));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    return obj;
}

OAIDate OAIFlight::getDepartureDate() const {
    return m_departure_date;
}
void OAIFlight::setDepartureDate(const OAIDate &departure_date) {
    m_departure_date = departure_date;
    m_departure_date_isSet = true;
}

bool OAIFlight::is_departure_date_Set() const{
    return m_departure_date_isSet;
}

bool OAIFlight::is_departure_date_Valid() const{
    return m_departure_date_isValid;
}

QString OAIFlight::getDestination() const {
    return m_destination;
}
void OAIFlight::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIFlight::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIFlight::is_destination_Valid() const{
    return m_destination_isValid;
}

qint32 OAIFlight::getFlightNumber() const {
    return m_flight_number;
}
void OAIFlight::setFlightNumber(const qint32 &flight_number) {
    m_flight_number = flight_number;
    m_flight_number_isSet = true;
}

bool OAIFlight::is_flight_number_Set() const{
    return m_flight_number_isSet;
}

bool OAIFlight::is_flight_number_Valid() const{
    return m_flight_number_isValid;
}

QString OAIFlight::getOperatingCarrierCode() const {
    return m_operating_carrier_code;
}
void OAIFlight::setOperatingCarrierCode(const QString &operating_carrier_code) {
    m_operating_carrier_code = operating_carrier_code;
    m_operating_carrier_code_isSet = true;
}

bool OAIFlight::is_operating_carrier_code_Set() const{
    return m_operating_carrier_code_isSet;
}

bool OAIFlight::is_operating_carrier_code_Valid() const{
    return m_operating_carrier_code_isValid;
}

QString OAIFlight::getOrigin() const {
    return m_origin;
}
void OAIFlight::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIFlight::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIFlight::is_origin_Valid() const{
    return m_origin_isValid;
}

bool OAIFlight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_departure_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
