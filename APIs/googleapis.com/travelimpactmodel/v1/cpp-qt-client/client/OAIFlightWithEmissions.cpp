/**
 * Travel Impact Model API
 * Travel Impact Model API lets you query travel carbon emission estimates.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlightWithEmissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlightWithEmissions::OAIFlightWithEmissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlightWithEmissions::OAIFlightWithEmissions() {
    this->initializeModel();
}

OAIFlightWithEmissions::~OAIFlightWithEmissions() {}

void OAIFlightWithEmissions::initializeModel() {

    m_emissions_grams_per_pax_isSet = false;
    m_emissions_grams_per_pax_isValid = false;

    m_flight_isSet = false;
    m_flight_isValid = false;
}

void OAIFlightWithEmissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlightWithEmissions::fromJsonObject(QJsonObject json) {

    m_emissions_grams_per_pax_isValid = ::OpenAPI::fromJsonValue(m_emissions_grams_per_pax, json[QString("emissionsGramsPerPax")]);
    m_emissions_grams_per_pax_isSet = !json[QString("emissionsGramsPerPax")].isNull() && m_emissions_grams_per_pax_isValid;

    m_flight_isValid = ::OpenAPI::fromJsonValue(m_flight, json[QString("flight")]);
    m_flight_isSet = !json[QString("flight")].isNull() && m_flight_isValid;
}

QString OAIFlightWithEmissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlightWithEmissions::asJsonObject() const {
    QJsonObject obj;
    if (m_emissions_grams_per_pax.isSet()) {
        obj.insert(QString("emissionsGramsPerPax"), ::OpenAPI::toJsonValue(m_emissions_grams_per_pax));
    }
    if (m_flight.isSet()) {
        obj.insert(QString("flight"), ::OpenAPI::toJsonValue(m_flight));
    }
    return obj;
}

OAIEmissionsGramsPerPax OAIFlightWithEmissions::getEmissionsGramsPerPax() const {
    return m_emissions_grams_per_pax;
}
void OAIFlightWithEmissions::setEmissionsGramsPerPax(const OAIEmissionsGramsPerPax &emissions_grams_per_pax) {
    m_emissions_grams_per_pax = emissions_grams_per_pax;
    m_emissions_grams_per_pax_isSet = true;
}

bool OAIFlightWithEmissions::is_emissions_grams_per_pax_Set() const{
    return m_emissions_grams_per_pax_isSet;
}

bool OAIFlightWithEmissions::is_emissions_grams_per_pax_Valid() const{
    return m_emissions_grams_per_pax_isValid;
}

OAIFlight OAIFlightWithEmissions::getFlight() const {
    return m_flight;
}
void OAIFlightWithEmissions::setFlight(const OAIFlight &flight) {
    m_flight = flight;
    m_flight_isSet = true;
}

bool OAIFlightWithEmissions::is_flight_Set() const{
    return m_flight_isSet;
}

bool OAIFlightWithEmissions::is_flight_Valid() const{
    return m_flight_isValid;
}

bool OAIFlightWithEmissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_emissions_grams_per_pax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flight.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlightWithEmissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
