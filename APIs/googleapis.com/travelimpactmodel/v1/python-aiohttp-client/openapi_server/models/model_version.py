# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dated: str=None, major: int=None, minor: int=None, patch: int=None):
        """ModelVersion - a model defined in OpenAPI

        :param dated: The dated of this ModelVersion.
        :param major: The major of this ModelVersion.
        :param minor: The minor of this ModelVersion.
        :param patch: The patch of this ModelVersion.
        """
        self.openapi_types = {
            'dated': str,
            'major': int,
            'minor': int,
            'patch': int
        }

        self.attribute_map = {
            'dated': 'dated',
            'major': 'major',
            'minor': 'minor',
            'patch': 'patch'
        }

        self._dated = dated
        self._major = major
        self._minor = minor
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelVersion of this ModelVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dated(self):
        """Gets the dated of this ModelVersion.

        Dated versions: Model datasets are recreated with refreshed input data but no change to the algorithms regularly.

        :return: The dated of this ModelVersion.
        :rtype: str
        """
        return self._dated

    @dated.setter
    def dated(self, dated):
        """Sets the dated of this ModelVersion.

        Dated versions: Model datasets are recreated with refreshed input data but no change to the algorithms regularly.

        :param dated: The dated of this ModelVersion.
        :type dated: str
        """

        self._dated = dated

    @property
    def major(self):
        """Gets the major of this ModelVersion.

        Major versions: Major changes to methodology (e.g. adding new data sources to the model that lead to major output changes). Such changes will be infrequent and announced well in advance. Might involve API version changes, which will respect guidelines in https://cloud.google.com/endpoints/docs/openapi/versioning-an-api#backwards-incompatible

        :return: The major of this ModelVersion.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major):
        """Sets the major of this ModelVersion.

        Major versions: Major changes to methodology (e.g. adding new data sources to the model that lead to major output changes). Such changes will be infrequent and announced well in advance. Might involve API version changes, which will respect guidelines in https://cloud.google.com/endpoints/docs/openapi/versioning-an-api#backwards-incompatible

        :param major: The major of this ModelVersion.
        :type major: int
        """

        self._major = major

    @property
    def minor(self):
        """Gets the minor of this ModelVersion.

        Minor versions: Changes to the model that, while being consistent across schema versions, change the model parameters or implementation.

        :return: The minor of this ModelVersion.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor):
        """Sets the minor of this ModelVersion.

        Minor versions: Changes to the model that, while being consistent across schema versions, change the model parameters or implementation.

        :param minor: The minor of this ModelVersion.
        :type minor: int
        """

        self._minor = minor

    @property
    def patch(self):
        """Gets the patch of this ModelVersion.

        Patch versions: Implementation changes meant to address bugs or inaccuracies in the model implementation.

        :return: The patch of this ModelVersion.
        :rtype: int
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this ModelVersion.

        Patch versions: Implementation changes meant to address bugs or inaccuracies in the model implementation.

        :param patch: The patch of this ModelVersion.
        :type patch: int
        """

        self._patch = patch
