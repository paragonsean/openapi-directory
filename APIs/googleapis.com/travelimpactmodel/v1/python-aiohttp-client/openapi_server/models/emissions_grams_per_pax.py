# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmissionsGramsPerPax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business: int=None, economy: int=None, first: int=None, premium_economy: int=None):
        """EmissionsGramsPerPax - a model defined in OpenAPI

        :param business: The business of this EmissionsGramsPerPax.
        :param economy: The economy of this EmissionsGramsPerPax.
        :param first: The first of this EmissionsGramsPerPax.
        :param premium_economy: The premium_economy of this EmissionsGramsPerPax.
        """
        self.openapi_types = {
            'business': int,
            'economy': int,
            'first': int,
            'premium_economy': int
        }

        self.attribute_map = {
            'business': 'business',
            'economy': 'economy',
            'first': 'first',
            'premium_economy': 'premiumEconomy'
        }

        self._business = business
        self._economy = economy
        self._first = first
        self._premium_economy = premium_economy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmissionsGramsPerPax':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmissionsGramsPerPax of this EmissionsGramsPerPax.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business(self):
        """Gets the business of this EmissionsGramsPerPax.

        Emissions for one passenger in business class in grams. This field is always computed and populated, regardless of whether the aircraft has business class seats or not.

        :return: The business of this EmissionsGramsPerPax.
        :rtype: int
        """
        return self._business

    @business.setter
    def business(self, business):
        """Sets the business of this EmissionsGramsPerPax.

        Emissions for one passenger in business class in grams. This field is always computed and populated, regardless of whether the aircraft has business class seats or not.

        :param business: The business of this EmissionsGramsPerPax.
        :type business: int
        """

        self._business = business

    @property
    def economy(self):
        """Gets the economy of this EmissionsGramsPerPax.

        Emissions for one passenger in economy class in grams. This field is always computed and populated, regardless of whether the aircraft has economy class seats or not.

        :return: The economy of this EmissionsGramsPerPax.
        :rtype: int
        """
        return self._economy

    @economy.setter
    def economy(self, economy):
        """Sets the economy of this EmissionsGramsPerPax.

        Emissions for one passenger in economy class in grams. This field is always computed and populated, regardless of whether the aircraft has economy class seats or not.

        :param economy: The economy of this EmissionsGramsPerPax.
        :type economy: int
        """

        self._economy = economy

    @property
    def first(self):
        """Gets the first of this EmissionsGramsPerPax.

        Emissions for one passenger in first class in grams. This field is always computed and populated, regardless of whether the aircraft has first class seats or not.

        :return: The first of this EmissionsGramsPerPax.
        :rtype: int
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this EmissionsGramsPerPax.

        Emissions for one passenger in first class in grams. This field is always computed and populated, regardless of whether the aircraft has first class seats or not.

        :param first: The first of this EmissionsGramsPerPax.
        :type first: int
        """

        self._first = first

    @property
    def premium_economy(self):
        """Gets the premium_economy of this EmissionsGramsPerPax.

        Emissions for one passenger in premium economy class in grams. This field is always computed and populated, regardless of whether the aircraft has premium economy class seats or not.

        :return: The premium_economy of this EmissionsGramsPerPax.
        :rtype: int
        """
        return self._premium_economy

    @premium_economy.setter
    def premium_economy(self, premium_economy):
        """Sets the premium_economy of this EmissionsGramsPerPax.

        Emissions for one passenger in premium economy class in grams. This field is always computed and populated, regardless of whether the aircraft has premium economy class seats or not.

        :param premium_economy: The premium_economy of this EmissionsGramsPerPax.
        :type premium_economy: int
        """

        self._premium_economy = premium_economy
