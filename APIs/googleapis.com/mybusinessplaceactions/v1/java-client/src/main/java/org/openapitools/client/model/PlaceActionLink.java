/*
 * My Business Place Actions API
 * The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a place action link and its attributes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:27.368561-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlaceActionLink {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_IS_EDITABLE = "isEditable";
  @SerializedName(SERIALIZED_NAME_IS_EDITABLE)
  private Boolean isEditable;

  public static final String SERIALIZED_NAME_IS_PREFERRED = "isPreferred";
  @SerializedName(SERIALIZED_NAME_IS_PREFERRED)
  private Boolean isPreferred;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Required. The type of place action that can be performed using this link.
   */
  @JsonAdapter(PlaceActionTypeEnum.Adapter.class)
  public enum PlaceActionTypeEnum {
    PLACE_ACTION_TYPE_UNSPECIFIED("PLACE_ACTION_TYPE_UNSPECIFIED"),
    
    APPOINTMENT("APPOINTMENT"),
    
    ONLINE_APPOINTMENT("ONLINE_APPOINTMENT"),
    
    DINING_RESERVATION("DINING_RESERVATION"),
    
    FOOD_ORDERING("FOOD_ORDERING"),
    
    FOOD_DELIVERY("FOOD_DELIVERY"),
    
    FOOD_TAKEOUT("FOOD_TAKEOUT"),
    
    SHOP_ONLINE("SHOP_ONLINE");

    private String value;

    PlaceActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaceActionTypeEnum fromValue(String value) {
      for (PlaceActionTypeEnum b : PlaceActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaceActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaceActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaceActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaceActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlaceActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLACE_ACTION_TYPE = "placeActionType";
  @SerializedName(SERIALIZED_NAME_PLACE_ACTION_TYPE)
  private PlaceActionTypeEnum placeActionType;

  /**
   * Output only. Specifies the provider type.
   */
  @JsonAdapter(ProviderTypeEnum.Adapter.class)
  public enum ProviderTypeEnum {
    PROVIDER_TYPE_UNSPECIFIED("PROVIDER_TYPE_UNSPECIFIED"),
    
    MERCHANT("MERCHANT"),
    
    AGGREGATOR_3_P("AGGREGATOR_3P");

    private String value;

    ProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderTypeEnum fromValue(String value) {
      for (ProviderTypeEnum b : ProviderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProviderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProviderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  private ProviderTypeEnum providerType;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public PlaceActionLink() {
  }

  public PlaceActionLink(
     String createTime, 
     Boolean isEditable, 
     ProviderTypeEnum providerType, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.isEditable = isEditable;
    this.providerType = providerType;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time when the place action link was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Indicates whether this link can be edited by the client.
   * @return isEditable
   */
  @javax.annotation.Nullable
  public Boolean getIsEditable() {
    return isEditable;
  }



  public PlaceActionLink isPreferred(Boolean isPreferred) {
    this.isPreferred = isPreferred;
    return this;
  }

  /**
   * Optional. Whether this link is preferred by the merchant. Only one link can be marked as preferred per place action type at a location. If a future request marks a different link as preferred for the same place action type, then the current preferred link (if any exists) will lose its preference.
   * @return isPreferred
   */
  @javax.annotation.Nullable
  public Boolean getIsPreferred() {
    return isPreferred;
  }

  public void setIsPreferred(Boolean isPreferred) {
    this.isPreferred = isPreferred;
  }


  public PlaceActionLink name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Optional. The resource name, in the format &#x60;locations/{location_id}/placeActionLinks/{place_action_link_id}&#x60;. The name field will only be considered in UpdatePlaceActionLink and DeletePlaceActionLink requests for updating and deleting links respectively. However, it will be ignored in CreatePlaceActionLink request, where &#x60;place_action_link_id&#x60; will be assigned by the server on successful creation of a new link and returned as part of the response.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PlaceActionLink placeActionType(PlaceActionTypeEnum placeActionType) {
    this.placeActionType = placeActionType;
    return this;
  }

  /**
   * Required. The type of place action that can be performed using this link.
   * @return placeActionType
   */
  @javax.annotation.Nullable
  public PlaceActionTypeEnum getPlaceActionType() {
    return placeActionType;
  }

  public void setPlaceActionType(PlaceActionTypeEnum placeActionType) {
    this.placeActionType = placeActionType;
  }


  /**
   * Output only. Specifies the provider type.
   * @return providerType
   */
  @javax.annotation.Nullable
  public ProviderTypeEnum getProviderType() {
    return providerType;
  }



  /**
   * Output only. The time when the place action link was last modified.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public PlaceActionLink uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. The link uri. The same uri can be reused for different action types across different locations. However, only one place action link is allowed for each unique combination of (uri, place action type, location).
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlaceActionLink placeActionLink = (PlaceActionLink) o;
    return Objects.equals(this.createTime, placeActionLink.createTime) &&
        Objects.equals(this.isEditable, placeActionLink.isEditable) &&
        Objects.equals(this.isPreferred, placeActionLink.isPreferred) &&
        Objects.equals(this.name, placeActionLink.name) &&
        Objects.equals(this.placeActionType, placeActionLink.placeActionType) &&
        Objects.equals(this.providerType, placeActionLink.providerType) &&
        Objects.equals(this.updateTime, placeActionLink.updateTime) &&
        Objects.equals(this.uri, placeActionLink.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, isEditable, isPreferred, name, placeActionType, providerType, updateTime, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlaceActionLink {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    isEditable: ").append(toIndentedString(isEditable)).append("\n");
    sb.append("    isPreferred: ").append(toIndentedString(isPreferred)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    placeActionType: ").append(toIndentedString(placeActionType)).append("\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("isEditable");
    openapiFields.add("isPreferred");
    openapiFields.add("name");
    openapiFields.add("placeActionType");
    openapiFields.add("providerType");
    openapiFields.add("updateTime");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlaceActionLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlaceActionLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlaceActionLink is not found in the empty JSON string", PlaceActionLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlaceActionLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlaceActionLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("placeActionType") != null && !jsonObj.get("placeActionType").isJsonNull()) && !jsonObj.get("placeActionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placeActionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placeActionType").toString()));
      }
      // validate the optional field `placeActionType`
      if (jsonObj.get("placeActionType") != null && !jsonObj.get("placeActionType").isJsonNull()) {
        PlaceActionTypeEnum.validateJsonElement(jsonObj.get("placeActionType"));
      }
      if ((jsonObj.get("providerType") != null && !jsonObj.get("providerType").isJsonNull()) && !jsonObj.get("providerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerType").toString()));
      }
      // validate the optional field `providerType`
      if (jsonObj.get("providerType") != null && !jsonObj.get("providerType").isJsonNull()) {
        ProviderTypeEnum.validateJsonElement(jsonObj.get("providerType"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlaceActionLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlaceActionLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlaceActionLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlaceActionLink.class));

       return (TypeAdapter<T>) new TypeAdapter<PlaceActionLink>() {
           @Override
           public void write(JsonWriter out, PlaceActionLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlaceActionLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlaceActionLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlaceActionLink
   * @throws IOException if the JSON string is invalid with respect to PlaceActionLink
   */
  public static PlaceActionLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlaceActionLink.class);
  }

  /**
   * Convert an instance of PlaceActionLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

