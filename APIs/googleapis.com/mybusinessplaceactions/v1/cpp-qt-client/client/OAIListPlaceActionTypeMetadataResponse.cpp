/**
 * My Business Place Actions API
 * The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPlaceActionTypeMetadataResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPlaceActionTypeMetadataResponse::OAIListPlaceActionTypeMetadataResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPlaceActionTypeMetadataResponse::OAIListPlaceActionTypeMetadataResponse() {
    this->initializeModel();
}

OAIListPlaceActionTypeMetadataResponse::~OAIListPlaceActionTypeMetadataResponse() {}

void OAIListPlaceActionTypeMetadataResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_place_action_type_metadata_isSet = false;
    m_place_action_type_metadata_isValid = false;
}

void OAIListPlaceActionTypeMetadataResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPlaceActionTypeMetadataResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_place_action_type_metadata_isValid = ::OpenAPI::fromJsonValue(m_place_action_type_metadata, json[QString("placeActionTypeMetadata")]);
    m_place_action_type_metadata_isSet = !json[QString("placeActionTypeMetadata")].isNull() && m_place_action_type_metadata_isValid;
}

QString OAIListPlaceActionTypeMetadataResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPlaceActionTypeMetadataResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_place_action_type_metadata.size() > 0) {
        obj.insert(QString("placeActionTypeMetadata"), ::OpenAPI::toJsonValue(m_place_action_type_metadata));
    }
    return obj;
}

QString OAIListPlaceActionTypeMetadataResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListPlaceActionTypeMetadataResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListPlaceActionTypeMetadataResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListPlaceActionTypeMetadataResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIPlaceActionTypeMetadata> OAIListPlaceActionTypeMetadataResponse::getPlaceActionTypeMetadata() const {
    return m_place_action_type_metadata;
}
void OAIListPlaceActionTypeMetadataResponse::setPlaceActionTypeMetadata(const QList<OAIPlaceActionTypeMetadata> &place_action_type_metadata) {
    m_place_action_type_metadata = place_action_type_metadata;
    m_place_action_type_metadata_isSet = true;
}

bool OAIListPlaceActionTypeMetadataResponse::is_place_action_type_metadata_Set() const{
    return m_place_action_type_metadata_isSet;
}

bool OAIListPlaceActionTypeMetadataResponse::is_place_action_type_metadata_Valid() const{
    return m_place_action_type_metadata_isValid;
}

bool OAIListPlaceActionTypeMetadataResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_action_type_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPlaceActionTypeMetadataResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
