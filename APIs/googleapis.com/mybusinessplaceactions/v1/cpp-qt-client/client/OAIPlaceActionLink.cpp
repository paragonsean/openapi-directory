/**
 * My Business Place Actions API
 * The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceActionLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceActionLink::OAIPlaceActionLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceActionLink::OAIPlaceActionLink() {
    this->initializeModel();
}

OAIPlaceActionLink::~OAIPlaceActionLink() {}

void OAIPlaceActionLink::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_is_editable_isSet = false;
    m_is_editable_isValid = false;

    m_is_preferred_isSet = false;
    m_is_preferred_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_place_action_type_isSet = false;
    m_place_action_type_isValid = false;

    m_provider_type_isSet = false;
    m_provider_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIPlaceActionLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceActionLink::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_is_editable_isValid = ::OpenAPI::fromJsonValue(m_is_editable, json[QString("isEditable")]);
    m_is_editable_isSet = !json[QString("isEditable")].isNull() && m_is_editable_isValid;

    m_is_preferred_isValid = ::OpenAPI::fromJsonValue(m_is_preferred, json[QString("isPreferred")]);
    m_is_preferred_isSet = !json[QString("isPreferred")].isNull() && m_is_preferred_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_place_action_type_isValid = ::OpenAPI::fromJsonValue(m_place_action_type, json[QString("placeActionType")]);
    m_place_action_type_isSet = !json[QString("placeActionType")].isNull() && m_place_action_type_isValid;

    m_provider_type_isValid = ::OpenAPI::fromJsonValue(m_provider_type, json[QString("providerType")]);
    m_provider_type_isSet = !json[QString("providerType")].isNull() && m_provider_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIPlaceActionLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceActionLink::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_is_editable_isSet) {
        obj.insert(QString("isEditable"), ::OpenAPI::toJsonValue(m_is_editable));
    }
    if (m_is_preferred_isSet) {
        obj.insert(QString("isPreferred"), ::OpenAPI::toJsonValue(m_is_preferred));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_place_action_type_isSet) {
        obj.insert(QString("placeActionType"), ::OpenAPI::toJsonValue(m_place_action_type));
    }
    if (m_provider_type_isSet) {
        obj.insert(QString("providerType"), ::OpenAPI::toJsonValue(m_provider_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIPlaceActionLink::getCreateTime() const {
    return m_create_time;
}
void OAIPlaceActionLink::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPlaceActionLink::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPlaceActionLink::is_create_time_Valid() const{
    return m_create_time_isValid;
}

bool OAIPlaceActionLink::isIsEditable() const {
    return m_is_editable;
}
void OAIPlaceActionLink::setIsEditable(const bool &is_editable) {
    m_is_editable = is_editable;
    m_is_editable_isSet = true;
}

bool OAIPlaceActionLink::is_is_editable_Set() const{
    return m_is_editable_isSet;
}

bool OAIPlaceActionLink::is_is_editable_Valid() const{
    return m_is_editable_isValid;
}

bool OAIPlaceActionLink::isIsPreferred() const {
    return m_is_preferred;
}
void OAIPlaceActionLink::setIsPreferred(const bool &is_preferred) {
    m_is_preferred = is_preferred;
    m_is_preferred_isSet = true;
}

bool OAIPlaceActionLink::is_is_preferred_Set() const{
    return m_is_preferred_isSet;
}

bool OAIPlaceActionLink::is_is_preferred_Valid() const{
    return m_is_preferred_isValid;
}

QString OAIPlaceActionLink::getName() const {
    return m_name;
}
void OAIPlaceActionLink::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPlaceActionLink::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPlaceActionLink::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPlaceActionLink::getPlaceActionType() const {
    return m_place_action_type;
}
void OAIPlaceActionLink::setPlaceActionType(const QString &place_action_type) {
    m_place_action_type = place_action_type;
    m_place_action_type_isSet = true;
}

bool OAIPlaceActionLink::is_place_action_type_Set() const{
    return m_place_action_type_isSet;
}

bool OAIPlaceActionLink::is_place_action_type_Valid() const{
    return m_place_action_type_isValid;
}

QString OAIPlaceActionLink::getProviderType() const {
    return m_provider_type;
}
void OAIPlaceActionLink::setProviderType(const QString &provider_type) {
    m_provider_type = provider_type;
    m_provider_type_isSet = true;
}

bool OAIPlaceActionLink::is_provider_type_Set() const{
    return m_provider_type_isSet;
}

bool OAIPlaceActionLink::is_provider_type_Valid() const{
    return m_provider_type_isValid;
}

QString OAIPlaceActionLink::getUpdateTime() const {
    return m_update_time;
}
void OAIPlaceActionLink::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPlaceActionLink::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPlaceActionLink::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIPlaceActionLink::getUri() const {
    return m_uri;
}
void OAIPlaceActionLink::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIPlaceActionLink::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIPlaceActionLink::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIPlaceActionLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_editable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceActionLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
