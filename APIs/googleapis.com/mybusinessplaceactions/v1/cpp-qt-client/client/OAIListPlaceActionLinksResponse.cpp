/**
 * My Business Place Actions API
 * The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPlaceActionLinksResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPlaceActionLinksResponse::OAIListPlaceActionLinksResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPlaceActionLinksResponse::OAIListPlaceActionLinksResponse() {
    this->initializeModel();
}

OAIListPlaceActionLinksResponse::~OAIListPlaceActionLinksResponse() {}

void OAIListPlaceActionLinksResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_place_action_links_isSet = false;
    m_place_action_links_isValid = false;
}

void OAIListPlaceActionLinksResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPlaceActionLinksResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_place_action_links_isValid = ::OpenAPI::fromJsonValue(m_place_action_links, json[QString("placeActionLinks")]);
    m_place_action_links_isSet = !json[QString("placeActionLinks")].isNull() && m_place_action_links_isValid;
}

QString OAIListPlaceActionLinksResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPlaceActionLinksResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_place_action_links.size() > 0) {
        obj.insert(QString("placeActionLinks"), ::OpenAPI::toJsonValue(m_place_action_links));
    }
    return obj;
}

QString OAIListPlaceActionLinksResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListPlaceActionLinksResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListPlaceActionLinksResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListPlaceActionLinksResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIPlaceActionLink> OAIListPlaceActionLinksResponse::getPlaceActionLinks() const {
    return m_place_action_links;
}
void OAIListPlaceActionLinksResponse::setPlaceActionLinks(const QList<OAIPlaceActionLink> &place_action_links) {
    m_place_action_links = place_action_links;
    m_place_action_links_isSet = true;
}

bool OAIListPlaceActionLinksResponse::is_place_action_links_Set() const{
    return m_place_action_links_isSet;
}

bool OAIListPlaceActionLinksResponse::is_place_action_links_Valid() const{
    return m_place_action_links_isValid;
}

bool OAIListPlaceActionLinksResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_action_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPlaceActionLinksResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
