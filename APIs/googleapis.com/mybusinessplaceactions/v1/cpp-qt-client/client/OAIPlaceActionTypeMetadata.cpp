/**
 * My Business Place Actions API
 * The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlaceActionTypeMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlaceActionTypeMetadata::OAIPlaceActionTypeMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlaceActionTypeMetadata::OAIPlaceActionTypeMetadata() {
    this->initializeModel();
}

OAIPlaceActionTypeMetadata::~OAIPlaceActionTypeMetadata() {}

void OAIPlaceActionTypeMetadata::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_place_action_type_isSet = false;
    m_place_action_type_isValid = false;
}

void OAIPlaceActionTypeMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlaceActionTypeMetadata::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_place_action_type_isValid = ::OpenAPI::fromJsonValue(m_place_action_type, json[QString("placeActionType")]);
    m_place_action_type_isSet = !json[QString("placeActionType")].isNull() && m_place_action_type_isValid;
}

QString OAIPlaceActionTypeMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlaceActionTypeMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_place_action_type_isSet) {
        obj.insert(QString("placeActionType"), ::OpenAPI::toJsonValue(m_place_action_type));
    }
    return obj;
}

QString OAIPlaceActionTypeMetadata::getDisplayName() const {
    return m_display_name;
}
void OAIPlaceActionTypeMetadata::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPlaceActionTypeMetadata::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPlaceActionTypeMetadata::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPlaceActionTypeMetadata::getPlaceActionType() const {
    return m_place_action_type;
}
void OAIPlaceActionTypeMetadata::setPlaceActionType(const QString &place_action_type) {
    m_place_action_type = place_action_type;
    m_place_action_type_isSet = true;
}

bool OAIPlaceActionTypeMetadata::is_place_action_type_Set() const{
    return m_place_action_type_isSet;
}

bool OAIPlaceActionTypeMetadata::is_place_action_type_Valid() const{
    return m_place_action_type_isValid;
}

bool OAIPlaceActionTypeMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlaceActionTypeMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
