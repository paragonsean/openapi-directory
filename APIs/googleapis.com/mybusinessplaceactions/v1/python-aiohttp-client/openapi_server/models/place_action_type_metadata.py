# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceActionTypeMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, place_action_type: str=None):
        """PlaceActionTypeMetadata - a model defined in OpenAPI

        :param display_name: The display_name of this PlaceActionTypeMetadata.
        :param place_action_type: The place_action_type of this PlaceActionTypeMetadata.
        """
        self.openapi_types = {
            'display_name': str,
            'place_action_type': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'place_action_type': 'placeActionType'
        }

        self._display_name = display_name
        self._place_action_type = place_action_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceActionTypeMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceActionTypeMetadata of this PlaceActionTypeMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this PlaceActionTypeMetadata.

        The localized display name for the attribute, if available; otherwise, the English display name.

        :return: The display_name of this PlaceActionTypeMetadata.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PlaceActionTypeMetadata.

        The localized display name for the attribute, if available; otherwise, the English display name.

        :param display_name: The display_name of this PlaceActionTypeMetadata.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def place_action_type(self):
        """Gets the place_action_type of this PlaceActionTypeMetadata.

        The place action type.

        :return: The place_action_type of this PlaceActionTypeMetadata.
        :rtype: str
        """
        return self._place_action_type

    @place_action_type.setter
    def place_action_type(self, place_action_type):
        """Sets the place_action_type of this PlaceActionTypeMetadata.

        The place action type.

        :param place_action_type: The place_action_type of this PlaceActionTypeMetadata.
        :type place_action_type: str
        """
        allowed_values = ["PLACE_ACTION_TYPE_UNSPECIFIED", "APPOINTMENT", "ONLINE_APPOINTMENT", "DINING_RESERVATION", "FOOD_ORDERING", "FOOD_DELIVERY", "FOOD_TAKEOUT", "SHOP_ONLINE"]  # noqa: E501
        if place_action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `place_action_type` ({0}), must be one of {1}"
                .format(place_action_type, allowed_values)
            )

        self._place_action_type = place_action_type
