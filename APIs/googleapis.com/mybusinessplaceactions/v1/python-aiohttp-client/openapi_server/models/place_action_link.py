# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlaceActionLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, is_editable: bool=None, is_preferred: bool=None, name: str=None, place_action_type: str=None, provider_type: str=None, update_time: str=None, uri: str=None):
        """PlaceActionLink - a model defined in OpenAPI

        :param create_time: The create_time of this PlaceActionLink.
        :param is_editable: The is_editable of this PlaceActionLink.
        :param is_preferred: The is_preferred of this PlaceActionLink.
        :param name: The name of this PlaceActionLink.
        :param place_action_type: The place_action_type of this PlaceActionLink.
        :param provider_type: The provider_type of this PlaceActionLink.
        :param update_time: The update_time of this PlaceActionLink.
        :param uri: The uri of this PlaceActionLink.
        """
        self.openapi_types = {
            'create_time': str,
            'is_editable': bool,
            'is_preferred': bool,
            'name': str,
            'place_action_type': str,
            'provider_type': str,
            'update_time': str,
            'uri': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'is_editable': 'isEditable',
            'is_preferred': 'isPreferred',
            'name': 'name',
            'place_action_type': 'placeActionType',
            'provider_type': 'providerType',
            'update_time': 'updateTime',
            'uri': 'uri'
        }

        self._create_time = create_time
        self._is_editable = is_editable
        self._is_preferred = is_preferred
        self._name = name
        self._place_action_type = place_action_type
        self._provider_type = provider_type
        self._update_time = update_time
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlaceActionLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlaceActionLink of this PlaceActionLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PlaceActionLink.

        Output only. The time when the place action link was created.

        :return: The create_time of this PlaceActionLink.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PlaceActionLink.

        Output only. The time when the place action link was created.

        :param create_time: The create_time of this PlaceActionLink.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def is_editable(self):
        """Gets the is_editable of this PlaceActionLink.

        Output only. Indicates whether this link can be edited by the client.

        :return: The is_editable of this PlaceActionLink.
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable):
        """Sets the is_editable of this PlaceActionLink.

        Output only. Indicates whether this link can be edited by the client.

        :param is_editable: The is_editable of this PlaceActionLink.
        :type is_editable: bool
        """

        self._is_editable = is_editable

    @property
    def is_preferred(self):
        """Gets the is_preferred of this PlaceActionLink.

        Optional. Whether this link is preferred by the merchant. Only one link can be marked as preferred per place action type at a location. If a future request marks a different link as preferred for the same place action type, then the current preferred link (if any exists) will lose its preference.

        :return: The is_preferred of this PlaceActionLink.
        :rtype: bool
        """
        return self._is_preferred

    @is_preferred.setter
    def is_preferred(self, is_preferred):
        """Sets the is_preferred of this PlaceActionLink.

        Optional. Whether this link is preferred by the merchant. Only one link can be marked as preferred per place action type at a location. If a future request marks a different link as preferred for the same place action type, then the current preferred link (if any exists) will lose its preference.

        :param is_preferred: The is_preferred of this PlaceActionLink.
        :type is_preferred: bool
        """

        self._is_preferred = is_preferred

    @property
    def name(self):
        """Gets the name of this PlaceActionLink.

        Optional. The resource name, in the format `locations/{location_id}/placeActionLinks/{place_action_link_id}`. The name field will only be considered in UpdatePlaceActionLink and DeletePlaceActionLink requests for updating and deleting links respectively. However, it will be ignored in CreatePlaceActionLink request, where `place_action_link_id` will be assigned by the server on successful creation of a new link and returned as part of the response.

        :return: The name of this PlaceActionLink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PlaceActionLink.

        Optional. The resource name, in the format `locations/{location_id}/placeActionLinks/{place_action_link_id}`. The name field will only be considered in UpdatePlaceActionLink and DeletePlaceActionLink requests for updating and deleting links respectively. However, it will be ignored in CreatePlaceActionLink request, where `place_action_link_id` will be assigned by the server on successful creation of a new link and returned as part of the response.

        :param name: The name of this PlaceActionLink.
        :type name: str
        """

        self._name = name

    @property
    def place_action_type(self):
        """Gets the place_action_type of this PlaceActionLink.

        Required. The type of place action that can be performed using this link.

        :return: The place_action_type of this PlaceActionLink.
        :rtype: str
        """
        return self._place_action_type

    @place_action_type.setter
    def place_action_type(self, place_action_type):
        """Sets the place_action_type of this PlaceActionLink.

        Required. The type of place action that can be performed using this link.

        :param place_action_type: The place_action_type of this PlaceActionLink.
        :type place_action_type: str
        """
        allowed_values = ["PLACE_ACTION_TYPE_UNSPECIFIED", "APPOINTMENT", "ONLINE_APPOINTMENT", "DINING_RESERVATION", "FOOD_ORDERING", "FOOD_DELIVERY", "FOOD_TAKEOUT", "SHOP_ONLINE"]  # noqa: E501
        if place_action_type not in allowed_values:
            raise ValueError(
                "Invalid value for `place_action_type` ({0}), must be one of {1}"
                .format(place_action_type, allowed_values)
            )

        self._place_action_type = place_action_type

    @property
    def provider_type(self):
        """Gets the provider_type of this PlaceActionLink.

        Output only. Specifies the provider type.

        :return: The provider_type of this PlaceActionLink.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """Sets the provider_type of this PlaceActionLink.

        Output only. Specifies the provider type.

        :param provider_type: The provider_type of this PlaceActionLink.
        :type provider_type: str
        """
        allowed_values = ["PROVIDER_TYPE_UNSPECIFIED", "MERCHANT", "AGGREGATOR_3P"]  # noqa: E501
        if provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provider_type` ({0}), must be one of {1}"
                .format(provider_type, allowed_values)
            )

        self._provider_type = provider_type

    @property
    def update_time(self):
        """Gets the update_time of this PlaceActionLink.

        Output only. The time when the place action link was last modified.

        :return: The update_time of this PlaceActionLink.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PlaceActionLink.

        Output only. The time when the place action link was last modified.

        :param update_time: The update_time of this PlaceActionLink.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def uri(self):
        """Gets the uri of this PlaceActionLink.

        Required. The link uri. The same uri can be reused for different action types across different locations. However, only one place action link is allowed for each unique combination of (uri, place action type, location).

        :return: The uri of this PlaceActionLink.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this PlaceActionLink.

        Required. The link uri. The same uri can be reused for different action types across different locations. However, only one place action link is allowed for each unique combination of (uri, place action type, location).

        :param uri: The uri of this PlaceActionLink.
        :type uri: str
        """

        self._uri = uri
