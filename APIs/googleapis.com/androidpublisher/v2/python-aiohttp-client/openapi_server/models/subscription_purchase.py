# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_cancel_survey_result import SubscriptionCancelSurveyResult
from openapi_server.models.subscription_price_change import SubscriptionPriceChange
from openapi_server import util


class SubscriptionPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renewing: bool=None, cancel_reason: int=None, cancel_survey_result: SubscriptionCancelSurveyResult=None, country_code: str=None, developer_payload: str=None, email_address: str=None, expiry_time_millis: str=None, family_name: str=None, given_name: str=None, kind: str='androidpublisher#subscriptionPurchase', linked_purchase_token: str=None, order_id: str=None, payment_state: int=None, price_amount_micros: str=None, price_change: SubscriptionPriceChange=None, price_currency_code: str=None, profile_id: str=None, profile_name: str=None, purchase_type: int=None, start_time_millis: str=None, user_cancellation_time_millis: str=None):
        """SubscriptionPurchase - a model defined in OpenAPI

        :param auto_renewing: The auto_renewing of this SubscriptionPurchase.
        :param cancel_reason: The cancel_reason of this SubscriptionPurchase.
        :param cancel_survey_result: The cancel_survey_result of this SubscriptionPurchase.
        :param country_code: The country_code of this SubscriptionPurchase.
        :param developer_payload: The developer_payload of this SubscriptionPurchase.
        :param email_address: The email_address of this SubscriptionPurchase.
        :param expiry_time_millis: The expiry_time_millis of this SubscriptionPurchase.
        :param family_name: The family_name of this SubscriptionPurchase.
        :param given_name: The given_name of this SubscriptionPurchase.
        :param kind: The kind of this SubscriptionPurchase.
        :param linked_purchase_token: The linked_purchase_token of this SubscriptionPurchase.
        :param order_id: The order_id of this SubscriptionPurchase.
        :param payment_state: The payment_state of this SubscriptionPurchase.
        :param price_amount_micros: The price_amount_micros of this SubscriptionPurchase.
        :param price_change: The price_change of this SubscriptionPurchase.
        :param price_currency_code: The price_currency_code of this SubscriptionPurchase.
        :param profile_id: The profile_id of this SubscriptionPurchase.
        :param profile_name: The profile_name of this SubscriptionPurchase.
        :param purchase_type: The purchase_type of this SubscriptionPurchase.
        :param start_time_millis: The start_time_millis of this SubscriptionPurchase.
        :param user_cancellation_time_millis: The user_cancellation_time_millis of this SubscriptionPurchase.
        """
        self.openapi_types = {
            'auto_renewing': bool,
            'cancel_reason': int,
            'cancel_survey_result': SubscriptionCancelSurveyResult,
            'country_code': str,
            'developer_payload': str,
            'email_address': str,
            'expiry_time_millis': str,
            'family_name': str,
            'given_name': str,
            'kind': str,
            'linked_purchase_token': str,
            'order_id': str,
            'payment_state': int,
            'price_amount_micros': str,
            'price_change': SubscriptionPriceChange,
            'price_currency_code': str,
            'profile_id': str,
            'profile_name': str,
            'purchase_type': int,
            'start_time_millis': str,
            'user_cancellation_time_millis': str
        }

        self.attribute_map = {
            'auto_renewing': 'autoRenewing',
            'cancel_reason': 'cancelReason',
            'cancel_survey_result': 'cancelSurveyResult',
            'country_code': 'countryCode',
            'developer_payload': 'developerPayload',
            'email_address': 'emailAddress',
            'expiry_time_millis': 'expiryTimeMillis',
            'family_name': 'familyName',
            'given_name': 'givenName',
            'kind': 'kind',
            'linked_purchase_token': 'linkedPurchaseToken',
            'order_id': 'orderId',
            'payment_state': 'paymentState',
            'price_amount_micros': 'priceAmountMicros',
            'price_change': 'priceChange',
            'price_currency_code': 'priceCurrencyCode',
            'profile_id': 'profileId',
            'profile_name': 'profileName',
            'purchase_type': 'purchaseType',
            'start_time_millis': 'startTimeMillis',
            'user_cancellation_time_millis': 'userCancellationTimeMillis'
        }

        self._auto_renewing = auto_renewing
        self._cancel_reason = cancel_reason
        self._cancel_survey_result = cancel_survey_result
        self._country_code = country_code
        self._developer_payload = developer_payload
        self._email_address = email_address
        self._expiry_time_millis = expiry_time_millis
        self._family_name = family_name
        self._given_name = given_name
        self._kind = kind
        self._linked_purchase_token = linked_purchase_token
        self._order_id = order_id
        self._payment_state = payment_state
        self._price_amount_micros = price_amount_micros
        self._price_change = price_change
        self._price_currency_code = price_currency_code
        self._profile_id = profile_id
        self._profile_name = profile_name
        self._purchase_type = purchase_type
        self._start_time_millis = start_time_millis
        self._user_cancellation_time_millis = user_cancellation_time_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPurchase of this SubscriptionPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renewing(self):
        """Gets the auto_renewing of this SubscriptionPurchase.

        Whether the subscription will automatically be renewed when it reaches its current expiry time.

        :return: The auto_renewing of this SubscriptionPurchase.
        :rtype: bool
        """
        return self._auto_renewing

    @auto_renewing.setter
    def auto_renewing(self, auto_renewing):
        """Sets the auto_renewing of this SubscriptionPurchase.

        Whether the subscription will automatically be renewed when it reaches its current expiry time.

        :param auto_renewing: The auto_renewing of this SubscriptionPurchase.
        :type auto_renewing: bool
        """

        self._auto_renewing = auto_renewing

    @property
    def cancel_reason(self):
        """Gets the cancel_reason of this SubscriptionPurchase.

        The reason why a subscription was canceled or is not auto-renewing. Possible values are:   - User canceled the subscription  - Subscription was canceled by the system, for example because of a billing problem  - Subscription was replaced with a new subscription  - Subscription was canceled by the developer

        :return: The cancel_reason of this SubscriptionPurchase.
        :rtype: int
        """
        return self._cancel_reason

    @cancel_reason.setter
    def cancel_reason(self, cancel_reason):
        """Sets the cancel_reason of this SubscriptionPurchase.

        The reason why a subscription was canceled or is not auto-renewing. Possible values are:   - User canceled the subscription  - Subscription was canceled by the system, for example because of a billing problem  - Subscription was replaced with a new subscription  - Subscription was canceled by the developer

        :param cancel_reason: The cancel_reason of this SubscriptionPurchase.
        :type cancel_reason: int
        """

        self._cancel_reason = cancel_reason

    @property
    def cancel_survey_result(self):
        """Gets the cancel_survey_result of this SubscriptionPurchase.


        :return: The cancel_survey_result of this SubscriptionPurchase.
        :rtype: SubscriptionCancelSurveyResult
        """
        return self._cancel_survey_result

    @cancel_survey_result.setter
    def cancel_survey_result(self, cancel_survey_result):
        """Sets the cancel_survey_result of this SubscriptionPurchase.


        :param cancel_survey_result: The cancel_survey_result of this SubscriptionPurchase.
        :type cancel_survey_result: SubscriptionCancelSurveyResult
        """

        self._cancel_survey_result = cancel_survey_result

    @property
    def country_code(self):
        """Gets the country_code of this SubscriptionPurchase.

        ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.

        :return: The country_code of this SubscriptionPurchase.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this SubscriptionPurchase.

        ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.

        :param country_code: The country_code of this SubscriptionPurchase.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def developer_payload(self):
        """Gets the developer_payload of this SubscriptionPurchase.

        A developer-specified string that contains supplemental information about an order.

        :return: The developer_payload of this SubscriptionPurchase.
        :rtype: str
        """
        return self._developer_payload

    @developer_payload.setter
    def developer_payload(self, developer_payload):
        """Sets the developer_payload of this SubscriptionPurchase.

        A developer-specified string that contains supplemental information about an order.

        :param developer_payload: The developer_payload of this SubscriptionPurchase.
        :type developer_payload: str
        """

        self._developer_payload = developer_payload

    @property
    def email_address(self):
        """Gets the email_address of this SubscriptionPurchase.

        The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :return: The email_address of this SubscriptionPurchase.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this SubscriptionPurchase.

        The email address of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :param email_address: The email_address of this SubscriptionPurchase.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def expiry_time_millis(self):
        """Gets the expiry_time_millis of this SubscriptionPurchase.

        Time at which the subscription will expire, in milliseconds since the Epoch.

        :return: The expiry_time_millis of this SubscriptionPurchase.
        :rtype: str
        """
        return self._expiry_time_millis

    @expiry_time_millis.setter
    def expiry_time_millis(self, expiry_time_millis):
        """Sets the expiry_time_millis of this SubscriptionPurchase.

        Time at which the subscription will expire, in milliseconds since the Epoch.

        :param expiry_time_millis: The expiry_time_millis of this SubscriptionPurchase.
        :type expiry_time_millis: str
        """

        self._expiry_time_millis = expiry_time_millis

    @property
    def family_name(self):
        """Gets the family_name of this SubscriptionPurchase.

        The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :return: The family_name of this SubscriptionPurchase.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this SubscriptionPurchase.

        The family name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :param family_name: The family_name of this SubscriptionPurchase.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def given_name(self):
        """Gets the given_name of this SubscriptionPurchase.

        The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :return: The given_name of this SubscriptionPurchase.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this SubscriptionPurchase.

        The given name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :param given_name: The given_name of this SubscriptionPurchase.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def kind(self):
        """Gets the kind of this SubscriptionPurchase.

        This kind represents a subscriptionPurchase object in the androidpublisher service.

        :return: The kind of this SubscriptionPurchase.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SubscriptionPurchase.

        This kind represents a subscriptionPurchase object in the androidpublisher service.

        :param kind: The kind of this SubscriptionPurchase.
        :type kind: str
        """

        self._kind = kind

    @property
    def linked_purchase_token(self):
        """Gets the linked_purchase_token of this SubscriptionPurchase.

        The purchase token of the originating purchase if this subscription is one of the following:   - Re-signup of a canceled but non-lapsed subscription  - Upgrade/downgrade from a previous subscription  For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.

        :return: The linked_purchase_token of this SubscriptionPurchase.
        :rtype: str
        """
        return self._linked_purchase_token

    @linked_purchase_token.setter
    def linked_purchase_token(self, linked_purchase_token):
        """Sets the linked_purchase_token of this SubscriptionPurchase.

        The purchase token of the originating purchase if this subscription is one of the following:   - Re-signup of a canceled but non-lapsed subscription  - Upgrade/downgrade from a previous subscription  For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.

        :param linked_purchase_token: The linked_purchase_token of this SubscriptionPurchase.
        :type linked_purchase_token: str
        """

        self._linked_purchase_token = linked_purchase_token

    @property
    def order_id(self):
        """Gets the order_id of this SubscriptionPurchase.

        The order id of the latest recurring order associated with the purchase of the subscription.

        :return: The order_id of this SubscriptionPurchase.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this SubscriptionPurchase.

        The order id of the latest recurring order associated with the purchase of the subscription.

        :param order_id: The order_id of this SubscriptionPurchase.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payment_state(self):
        """Gets the payment_state of this SubscriptionPurchase.

        The payment state of the subscription. Possible values are:   - Payment pending  - Payment received  - Free trial  - Pending deferred upgrade/downgrade

        :return: The payment_state of this SubscriptionPurchase.
        :rtype: int
        """
        return self._payment_state

    @payment_state.setter
    def payment_state(self, payment_state):
        """Sets the payment_state of this SubscriptionPurchase.

        The payment state of the subscription. Possible values are:   - Payment pending  - Payment received  - Free trial  - Pending deferred upgrade/downgrade

        :param payment_state: The payment_state of this SubscriptionPurchase.
        :type payment_state: int
        """

        self._payment_state = payment_state

    @property
    def price_amount_micros(self):
        """Gets the price_amount_micros of this SubscriptionPurchase.

        Price of the subscription, not including tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.

        :return: The price_amount_micros of this SubscriptionPurchase.
        :rtype: str
        """
        return self._price_amount_micros

    @price_amount_micros.setter
    def price_amount_micros(self, price_amount_micros):
        """Sets the price_amount_micros of this SubscriptionPurchase.

        Price of the subscription, not including tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.

        :param price_amount_micros: The price_amount_micros of this SubscriptionPurchase.
        :type price_amount_micros: str
        """

        self._price_amount_micros = price_amount_micros

    @property
    def price_change(self):
        """Gets the price_change of this SubscriptionPurchase.


        :return: The price_change of this SubscriptionPurchase.
        :rtype: SubscriptionPriceChange
        """
        return self._price_change

    @price_change.setter
    def price_change(self, price_change):
        """Sets the price_change of this SubscriptionPurchase.


        :param price_change: The price_change of this SubscriptionPurchase.
        :type price_change: SubscriptionPriceChange
        """

        self._price_change = price_change

    @property
    def price_currency_code(self):
        """Gets the price_currency_code of this SubscriptionPurchase.

        ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".

        :return: The price_currency_code of this SubscriptionPurchase.
        :rtype: str
        """
        return self._price_currency_code

    @price_currency_code.setter
    def price_currency_code(self, price_currency_code):
        """Sets the price_currency_code of this SubscriptionPurchase.

        ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".

        :param price_currency_code: The price_currency_code of this SubscriptionPurchase.
        :type price_currency_code: str
        """

        self._price_currency_code = price_currency_code

    @property
    def profile_id(self):
        """Gets the profile_id of this SubscriptionPurchase.

        The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :return: The profile_id of this SubscriptionPurchase.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this SubscriptionPurchase.

        The Google profile id of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :param profile_id: The profile_id of this SubscriptionPurchase.
        :type profile_id: str
        """

        self._profile_id = profile_id

    @property
    def profile_name(self):
        """Gets the profile_name of this SubscriptionPurchase.

        The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :return: The profile_name of this SubscriptionPurchase.
        :rtype: str
        """
        return self._profile_name

    @profile_name.setter
    def profile_name(self, profile_name):
        """Sets the profile_name of this SubscriptionPurchase.

        The profile name of the user when the subscription was purchased. Only present for purchases made with 'Subscribe with Google'.

        :param profile_name: The profile_name of this SubscriptionPurchase.
        :type profile_name: str
        """

        self._profile_name = profile_name

    @property
    def purchase_type(self):
        """Gets the purchase_type of this SubscriptionPurchase.

        The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:   - Test (i.e. purchased from a license testing account)  - Promo (i.e. purchased using a promo code)

        :return: The purchase_type of this SubscriptionPurchase.
        :rtype: int
        """
        return self._purchase_type

    @purchase_type.setter
    def purchase_type(self, purchase_type):
        """Sets the purchase_type of this SubscriptionPurchase.

        The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:   - Test (i.e. purchased from a license testing account)  - Promo (i.e. purchased using a promo code)

        :param purchase_type: The purchase_type of this SubscriptionPurchase.
        :type purchase_type: int
        """

        self._purchase_type = purchase_type

    @property
    def start_time_millis(self):
        """Gets the start_time_millis of this SubscriptionPurchase.

        Time at which the subscription was granted, in milliseconds since the Epoch.

        :return: The start_time_millis of this SubscriptionPurchase.
        :rtype: str
        """
        return self._start_time_millis

    @start_time_millis.setter
    def start_time_millis(self, start_time_millis):
        """Sets the start_time_millis of this SubscriptionPurchase.

        Time at which the subscription was granted, in milliseconds since the Epoch.

        :param start_time_millis: The start_time_millis of this SubscriptionPurchase.
        :type start_time_millis: str
        """

        self._start_time_millis = start_time_millis

    @property
    def user_cancellation_time_millis(self):
        """Gets the user_cancellation_time_millis of this SubscriptionPurchase.

        The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.

        :return: The user_cancellation_time_millis of this SubscriptionPurchase.
        :rtype: str
        """
        return self._user_cancellation_time_millis

    @user_cancellation_time_millis.setter
    def user_cancellation_time_millis(self, user_cancellation_time_millis):
        """Sets the user_cancellation_time_millis of this SubscriptionPurchase.

        The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.

        :param user_cancellation_time_millis: The user_cancellation_time_millis of this SubscriptionPurchase.
        :type user_cancellation_time_millis: str
        """

        self._user_cancellation_time_millis = user_cancellation_time_millis
