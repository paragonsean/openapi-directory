# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.externally_hosted_apk_uses_permission import ExternallyHostedApkUsesPermission
from openapi_server import util


class ExternallyHostedApk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_label: str=None, certificate_base64s: List[str]=None, externally_hosted_url: str=None, file_sha1_base64: str=None, file_sha256_base64: str=None, file_size: str=None, icon_base64: str=None, maximum_sdk: int=None, minimum_sdk: int=None, native_codes: List[str]=None, package_name: str=None, uses_features: List[str]=None, uses_permissions: List[ExternallyHostedApkUsesPermission]=None, version_code: int=None, version_name: str=None):
        """ExternallyHostedApk - a model defined in OpenAPI

        :param application_label: The application_label of this ExternallyHostedApk.
        :param certificate_base64s: The certificate_base64s of this ExternallyHostedApk.
        :param externally_hosted_url: The externally_hosted_url of this ExternallyHostedApk.
        :param file_sha1_base64: The file_sha1_base64 of this ExternallyHostedApk.
        :param file_sha256_base64: The file_sha256_base64 of this ExternallyHostedApk.
        :param file_size: The file_size of this ExternallyHostedApk.
        :param icon_base64: The icon_base64 of this ExternallyHostedApk.
        :param maximum_sdk: The maximum_sdk of this ExternallyHostedApk.
        :param minimum_sdk: The minimum_sdk of this ExternallyHostedApk.
        :param native_codes: The native_codes of this ExternallyHostedApk.
        :param package_name: The package_name of this ExternallyHostedApk.
        :param uses_features: The uses_features of this ExternallyHostedApk.
        :param uses_permissions: The uses_permissions of this ExternallyHostedApk.
        :param version_code: The version_code of this ExternallyHostedApk.
        :param version_name: The version_name of this ExternallyHostedApk.
        """
        self.openapi_types = {
            'application_label': str,
            'certificate_base64s': List[str],
            'externally_hosted_url': str,
            'file_sha1_base64': str,
            'file_sha256_base64': str,
            'file_size': str,
            'icon_base64': str,
            'maximum_sdk': int,
            'minimum_sdk': int,
            'native_codes': List[str],
            'package_name': str,
            'uses_features': List[str],
            'uses_permissions': List[ExternallyHostedApkUsesPermission],
            'version_code': int,
            'version_name': str
        }

        self.attribute_map = {
            'application_label': 'applicationLabel',
            'certificate_base64s': 'certificateBase64s',
            'externally_hosted_url': 'externallyHostedUrl',
            'file_sha1_base64': 'fileSha1Base64',
            'file_sha256_base64': 'fileSha256Base64',
            'file_size': 'fileSize',
            'icon_base64': 'iconBase64',
            'maximum_sdk': 'maximumSdk',
            'minimum_sdk': 'minimumSdk',
            'native_codes': 'nativeCodes',
            'package_name': 'packageName',
            'uses_features': 'usesFeatures',
            'uses_permissions': 'usesPermissions',
            'version_code': 'versionCode',
            'version_name': 'versionName'
        }

        self._application_label = application_label
        self._certificate_base64s = certificate_base64s
        self._externally_hosted_url = externally_hosted_url
        self._file_sha1_base64 = file_sha1_base64
        self._file_sha256_base64 = file_sha256_base64
        self._file_size = file_size
        self._icon_base64 = icon_base64
        self._maximum_sdk = maximum_sdk
        self._minimum_sdk = minimum_sdk
        self._native_codes = native_codes
        self._package_name = package_name
        self._uses_features = uses_features
        self._uses_permissions = uses_permissions
        self._version_code = version_code
        self._version_name = version_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternallyHostedApk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternallyHostedApk of this ExternallyHostedApk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_label(self):
        """Gets the application_label of this ExternallyHostedApk.

        The application label.

        :return: The application_label of this ExternallyHostedApk.
        :rtype: str
        """
        return self._application_label

    @application_label.setter
    def application_label(self, application_label):
        """Sets the application_label of this ExternallyHostedApk.

        The application label.

        :param application_label: The application_label of this ExternallyHostedApk.
        :type application_label: str
        """

        self._application_label = application_label

    @property
    def certificate_base64s(self):
        """Gets the certificate_base64s of this ExternallyHostedApk.

        A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.

        :return: The certificate_base64s of this ExternallyHostedApk.
        :rtype: List[str]
        """
        return self._certificate_base64s

    @certificate_base64s.setter
    def certificate_base64s(self, certificate_base64s):
        """Sets the certificate_base64s of this ExternallyHostedApk.

        A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.

        :param certificate_base64s: The certificate_base64s of this ExternallyHostedApk.
        :type certificate_base64s: List[str]
        """

        self._certificate_base64s = certificate_base64s

    @property
    def externally_hosted_url(self):
        """Gets the externally_hosted_url of this ExternallyHostedApk.

        The URL at which the APK is hosted. This must be an https URL.

        :return: The externally_hosted_url of this ExternallyHostedApk.
        :rtype: str
        """
        return self._externally_hosted_url

    @externally_hosted_url.setter
    def externally_hosted_url(self, externally_hosted_url):
        """Sets the externally_hosted_url of this ExternallyHostedApk.

        The URL at which the APK is hosted. This must be an https URL.

        :param externally_hosted_url: The externally_hosted_url of this ExternallyHostedApk.
        :type externally_hosted_url: str
        """

        self._externally_hosted_url = externally_hosted_url

    @property
    def file_sha1_base64(self):
        """Gets the file_sha1_base64 of this ExternallyHostedApk.

        The SHA1 checksum of this APK, represented as a base64 encoded byte array.

        :return: The file_sha1_base64 of this ExternallyHostedApk.
        :rtype: str
        """
        return self._file_sha1_base64

    @file_sha1_base64.setter
    def file_sha1_base64(self, file_sha1_base64):
        """Sets the file_sha1_base64 of this ExternallyHostedApk.

        The SHA1 checksum of this APK, represented as a base64 encoded byte array.

        :param file_sha1_base64: The file_sha1_base64 of this ExternallyHostedApk.
        :type file_sha1_base64: str
        """

        self._file_sha1_base64 = file_sha1_base64

    @property
    def file_sha256_base64(self):
        """Gets the file_sha256_base64 of this ExternallyHostedApk.

        The SHA256 checksum of this APK, represented as a base64 encoded byte array.

        :return: The file_sha256_base64 of this ExternallyHostedApk.
        :rtype: str
        """
        return self._file_sha256_base64

    @file_sha256_base64.setter
    def file_sha256_base64(self, file_sha256_base64):
        """Sets the file_sha256_base64 of this ExternallyHostedApk.

        The SHA256 checksum of this APK, represented as a base64 encoded byte array.

        :param file_sha256_base64: The file_sha256_base64 of this ExternallyHostedApk.
        :type file_sha256_base64: str
        """

        self._file_sha256_base64 = file_sha256_base64

    @property
    def file_size(self):
        """Gets the file_size of this ExternallyHostedApk.

        The file size in bytes of this APK.

        :return: The file_size of this ExternallyHostedApk.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this ExternallyHostedApk.

        The file size in bytes of this APK.

        :param file_size: The file_size of this ExternallyHostedApk.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def icon_base64(self):
        """Gets the icon_base64 of this ExternallyHostedApk.

        The icon image from the APK, as a base64 encoded byte array.

        :return: The icon_base64 of this ExternallyHostedApk.
        :rtype: str
        """
        return self._icon_base64

    @icon_base64.setter
    def icon_base64(self, icon_base64):
        """Sets the icon_base64 of this ExternallyHostedApk.

        The icon image from the APK, as a base64 encoded byte array.

        :param icon_base64: The icon_base64 of this ExternallyHostedApk.
        :type icon_base64: str
        """

        self._icon_base64 = icon_base64

    @property
    def maximum_sdk(self):
        """Gets the maximum_sdk of this ExternallyHostedApk.

        The maximum SDK supported by this APK (optional).

        :return: The maximum_sdk of this ExternallyHostedApk.
        :rtype: int
        """
        return self._maximum_sdk

    @maximum_sdk.setter
    def maximum_sdk(self, maximum_sdk):
        """Sets the maximum_sdk of this ExternallyHostedApk.

        The maximum SDK supported by this APK (optional).

        :param maximum_sdk: The maximum_sdk of this ExternallyHostedApk.
        :type maximum_sdk: int
        """

        self._maximum_sdk = maximum_sdk

    @property
    def minimum_sdk(self):
        """Gets the minimum_sdk of this ExternallyHostedApk.

        The minimum SDK targeted by this APK.

        :return: The minimum_sdk of this ExternallyHostedApk.
        :rtype: int
        """
        return self._minimum_sdk

    @minimum_sdk.setter
    def minimum_sdk(self, minimum_sdk):
        """Sets the minimum_sdk of this ExternallyHostedApk.

        The minimum SDK targeted by this APK.

        :param minimum_sdk: The minimum_sdk of this ExternallyHostedApk.
        :type minimum_sdk: int
        """

        self._minimum_sdk = minimum_sdk

    @property
    def native_codes(self):
        """Gets the native_codes of this ExternallyHostedApk.

        The native code environments supported by this APK (optional).

        :return: The native_codes of this ExternallyHostedApk.
        :rtype: List[str]
        """
        return self._native_codes

    @native_codes.setter
    def native_codes(self, native_codes):
        """Sets the native_codes of this ExternallyHostedApk.

        The native code environments supported by this APK (optional).

        :param native_codes: The native_codes of this ExternallyHostedApk.
        :type native_codes: List[str]
        """

        self._native_codes = native_codes

    @property
    def package_name(self):
        """Gets the package_name of this ExternallyHostedApk.

        The package name.

        :return: The package_name of this ExternallyHostedApk.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this ExternallyHostedApk.

        The package name.

        :param package_name: The package_name of this ExternallyHostedApk.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def uses_features(self):
        """Gets the uses_features of this ExternallyHostedApk.

        The features required by this APK (optional).

        :return: The uses_features of this ExternallyHostedApk.
        :rtype: List[str]
        """
        return self._uses_features

    @uses_features.setter
    def uses_features(self, uses_features):
        """Sets the uses_features of this ExternallyHostedApk.

        The features required by this APK (optional).

        :param uses_features: The uses_features of this ExternallyHostedApk.
        :type uses_features: List[str]
        """

        self._uses_features = uses_features

    @property
    def uses_permissions(self):
        """Gets the uses_permissions of this ExternallyHostedApk.

        The permissions requested by this APK.

        :return: The uses_permissions of this ExternallyHostedApk.
        :rtype: List[ExternallyHostedApkUsesPermission]
        """
        return self._uses_permissions

    @uses_permissions.setter
    def uses_permissions(self, uses_permissions):
        """Sets the uses_permissions of this ExternallyHostedApk.

        The permissions requested by this APK.

        :param uses_permissions: The uses_permissions of this ExternallyHostedApk.
        :type uses_permissions: List[ExternallyHostedApkUsesPermission]
        """

        self._uses_permissions = uses_permissions

    @property
    def version_code(self):
        """Gets the version_code of this ExternallyHostedApk.

        The version code of this APK.

        :return: The version_code of this ExternallyHostedApk.
        :rtype: int
        """
        return self._version_code

    @version_code.setter
    def version_code(self, version_code):
        """Sets the version_code of this ExternallyHostedApk.

        The version code of this APK.

        :param version_code: The version_code of this ExternallyHostedApk.
        :type version_code: int
        """

        self._version_code = version_code

    @property
    def version_name(self):
        """Gets the version_name of this ExternallyHostedApk.

        The version name of this APK.

        :return: The version_name of this ExternallyHostedApk.
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this ExternallyHostedApk.

        The version name of this APK.

        :param version_name: The version_name of this ExternallyHostedApk.
        :type version_name: str
        """

        self._version_name = version_name
