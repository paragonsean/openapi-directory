# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class Review(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author_name: str=None, comments: List[Comment]=None, review_id: str=None):
        """Review - a model defined in OpenAPI

        :param author_name: The author_name of this Review.
        :param comments: The comments of this Review.
        :param review_id: The review_id of this Review.
        """
        self.openapi_types = {
            'author_name': str,
            'comments': List[Comment],
            'review_id': str
        }

        self.attribute_map = {
            'author_name': 'authorName',
            'comments': 'comments',
            'review_id': 'reviewId'
        }

        self._author_name = author_name
        self._comments = comments
        self._review_id = review_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Review':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Review of this Review.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author_name(self):
        """Gets the author_name of this Review.

        The name of the user who wrote the review.

        :return: The author_name of this Review.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Review.

        The name of the user who wrote the review.

        :param author_name: The author_name of this Review.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def comments(self):
        """Gets the comments of this Review.

        A repeated field containing comments for the review.

        :return: The comments of this Review.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Review.

        A repeated field containing comments for the review.

        :param comments: The comments of this Review.
        :type comments: List[Comment]
        """

        self._comments = comments

    @property
    def review_id(self):
        """Gets the review_id of this Review.

        Unique identifier for this review.

        :return: The review_id of this Review.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this Review.

        Unique identifier for this review.

        :param review_id: The review_id of this Review.
        :type review_id: str
        """

        self._review_id = review_id
