# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.developer_comment import DeveloperComment
from openapi_server.models.user_comment import UserComment
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, developer_comment: DeveloperComment=None, user_comment: UserComment=None):
        """Comment - a model defined in OpenAPI

        :param developer_comment: The developer_comment of this Comment.
        :param user_comment: The user_comment of this Comment.
        """
        self.openapi_types = {
            'developer_comment': DeveloperComment,
            'user_comment': UserComment
        }

        self.attribute_map = {
            'developer_comment': 'developerComment',
            'user_comment': 'userComment'
        }

        self._developer_comment = developer_comment
        self._user_comment = user_comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def developer_comment(self):
        """Gets the developer_comment of this Comment.


        :return: The developer_comment of this Comment.
        :rtype: DeveloperComment
        """
        return self._developer_comment

    @developer_comment.setter
    def developer_comment(self, developer_comment):
        """Sets the developer_comment of this Comment.


        :param developer_comment: The developer_comment of this Comment.
        :type developer_comment: DeveloperComment
        """

        self._developer_comment = developer_comment

    @property
    def user_comment(self):
        """Gets the user_comment of this Comment.


        :return: The user_comment of this Comment.
        :rtype: UserComment
        """
        return self._user_comment

    @user_comment.setter
    def user_comment(self, user_comment):
        """Sets the user_comment of this Comment.


        :param user_comment: The user_comment of this Comment.
        :type user_comment: UserComment
        """

        self._user_comment = user_comment
