# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Track(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, track: str=None, user_fraction: float=None, version_codes: List[int]=None):
        """Track - a model defined in OpenAPI

        :param track: The track of this Track.
        :param user_fraction: The user_fraction of this Track.
        :param version_codes: The version_codes of this Track.
        """
        self.openapi_types = {
            'track': str,
            'user_fraction': float,
            'version_codes': List[int]
        }

        self.attribute_map = {
            'track': 'track',
            'user_fraction': 'userFraction',
            'version_codes': 'versionCodes'
        }

        self._track = track
        self._user_fraction = user_fraction
        self._version_codes = version_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Track':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Track of this Track.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def track(self):
        """Gets the track of this Track.

        Identifier for this track.

        :return: The track of this Track.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this Track.

        Identifier for this track.

        :param track: The track of this Track.
        :type track: str
        """

        self._track = track

    @property
    def user_fraction(self):
        """Gets the user_fraction of this Track.


        :return: The user_fraction of this Track.
        :rtype: float
        """
        return self._user_fraction

    @user_fraction.setter
    def user_fraction(self, user_fraction):
        """Sets the user_fraction of this Track.


        :param user_fraction: The user_fraction of this Track.
        :type user_fraction: float
        """

        self._user_fraction = user_fraction

    @property
    def version_codes(self):
        """Gets the version_codes of this Track.

        Version codes to make active on this track. Note that this list should contain all versions you wish to be active, including those you wish to retain from previous releases.

        :return: The version_codes of this Track.
        :rtype: List[int]
        """
        return self._version_codes

    @version_codes.setter
    def version_codes(self, version_codes):
        """Sets the version_codes of this Track.

        Version codes to make active on this track. Note that this list should contain all versions you wish to be active, including those you wish to retain from previous releases.

        :param version_codes: The version_codes of this Track.
        :type version_codes: List[int]
        """

        self._version_codes = version_codes
