/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListing::OAIListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListing::OAIListing() {
    this->initializeModel();
}

OAIListing::~OAIListing() {}

void OAIListing::initializeModel() {

    m_full_description_isSet = false;
    m_full_description_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListing::fromJsonObject(QJsonObject json) {

    m_full_description_isValid = ::OpenAPI::fromJsonValue(m_full_description, json[QString("fullDescription")]);
    m_full_description_isSet = !json[QString("fullDescription")].isNull() && m_full_description_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListing::asJsonObject() const {
    QJsonObject obj;
    if (m_full_description_isSet) {
        obj.insert(QString("fullDescription"), ::OpenAPI::toJsonValue(m_full_description));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_video_isSet) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

QString OAIListing::getFullDescription() const {
    return m_full_description;
}
void OAIListing::setFullDescription(const QString &full_description) {
    m_full_description = full_description;
    m_full_description_isSet = true;
}

bool OAIListing::is_full_description_Set() const{
    return m_full_description_isSet;
}

bool OAIListing::is_full_description_Valid() const{
    return m_full_description_isValid;
}

QString OAIListing::getLanguage() const {
    return m_language;
}
void OAIListing::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIListing::is_language_Set() const{
    return m_language_isSet;
}

bool OAIListing::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIListing::getShortDescription() const {
    return m_short_description;
}
void OAIListing::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIListing::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIListing::is_short_description_Valid() const{
    return m_short_description_isValid;
}

QString OAIListing::getTitle() const {
    return m_title;
}
void OAIListing::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIListing::is_title_Set() const{
    return m_title_isSet;
}

bool OAIListing::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIListing::getVideo() const {
    return m_video;
}
void OAIListing::setVideo(const QString &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIListing::is_video_Set() const{
    return m_video_isSet;
}

bool OAIListing::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
