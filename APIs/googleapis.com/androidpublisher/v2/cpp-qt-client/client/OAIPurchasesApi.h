/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPurchasesApi_H
#define OAI_OAIPurchasesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductPurchase.h"
#include "OAISubscriptionPurchase.h"
#include "OAISubscriptionPurchasesDeferRequest.h"
#include "OAISubscriptionPurchasesDeferResponse.h"
#include "OAIVoidedPurchasesListResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPurchasesApi : public QObject {
    Q_OBJECT

public:
    OAIPurchasesApi(const int timeOut = 0);
    ~OAIPurchasesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_purchases_products_get(const QString &package_name, const QString &product_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_purchases_subscriptions_cancel(const QString &package_name, const QString &subscription_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_subscription_purchases_defer_request OAISubscriptionPurchasesDeferRequest [optional]
    */
    virtual void androidpublisher_purchases_subscriptions_defer(const QString &package_name, const QString &subscription_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscriptionPurchasesDeferRequest> &oai_subscription_purchases_defer_request = ::OpenAPI::OptionalParam<OAISubscriptionPurchasesDeferRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_purchases_subscriptions_get(const QString &package_name, const QString &subscription_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_purchases_subscriptions_refund(const QString &package_name, const QString &subscription_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  token QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_purchases_subscriptions_revoke(const QString &package_name, const QString &subscription_id, const QString &token, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  start_time QString [optional]
    * @param[in]  token QString [optional]
    */
    virtual void androidpublisher_purchases_voidedpurchases_list(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void androidpublisher_purchases_products_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_cancelCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_deferCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_refundCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_revokeCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_voidedpurchases_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void androidpublisher_purchases_products_getSignal(OAIProductPurchase summary);
    void androidpublisher_purchases_subscriptions_cancelSignal();
    void androidpublisher_purchases_subscriptions_deferSignal(OAISubscriptionPurchasesDeferResponse summary);
    void androidpublisher_purchases_subscriptions_getSignal(OAISubscriptionPurchase summary);
    void androidpublisher_purchases_subscriptions_refundSignal();
    void androidpublisher_purchases_subscriptions_revokeSignal();
    void androidpublisher_purchases_voidedpurchases_listSignal(OAIVoidedPurchasesListResponse summary);


    void androidpublisher_purchases_products_getSignalFull(OAIHttpRequestWorker *worker, OAIProductPurchase summary);
    void androidpublisher_purchases_subscriptions_cancelSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_deferSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionPurchasesDeferResponse summary);
    void androidpublisher_purchases_subscriptions_getSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionPurchase summary);
    void androidpublisher_purchases_subscriptions_refundSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_subscriptions_revokeSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_purchases_voidedpurchases_listSignalFull(OAIHttpRequestWorker *worker, OAIVoidedPurchasesListResponse summary);

    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_products_getSignalError() instead")
    void androidpublisher_purchases_products_getSignalE(OAIProductPurchase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_products_getSignalError(OAIProductPurchase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_cancelSignalError() instead")
    void androidpublisher_purchases_subscriptions_cancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_cancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_deferSignalError() instead")
    void androidpublisher_purchases_subscriptions_deferSignalE(OAISubscriptionPurchasesDeferResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_deferSignalError(OAISubscriptionPurchasesDeferResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_getSignalError() instead")
    void androidpublisher_purchases_subscriptions_getSignalE(OAISubscriptionPurchase summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_getSignalError(OAISubscriptionPurchase summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_refundSignalError() instead")
    void androidpublisher_purchases_subscriptions_refundSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_refundSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_revokeSignalError() instead")
    void androidpublisher_purchases_subscriptions_revokeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_revokeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_voidedpurchases_listSignalError() instead")
    void androidpublisher_purchases_voidedpurchases_listSignalE(OAIVoidedPurchasesListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_voidedpurchases_listSignalError(OAIVoidedPurchasesListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_products_getSignalErrorFull() instead")
    void androidpublisher_purchases_products_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_products_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_cancelSignalErrorFull() instead")
    void androidpublisher_purchases_subscriptions_cancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_cancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_deferSignalErrorFull() instead")
    void androidpublisher_purchases_subscriptions_deferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_deferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_getSignalErrorFull() instead")
    void androidpublisher_purchases_subscriptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_refundSignalErrorFull() instead")
    void androidpublisher_purchases_subscriptions_refundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_refundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_subscriptions_revokeSignalErrorFull() instead")
    void androidpublisher_purchases_subscriptions_revokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_subscriptions_revokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_purchases_voidedpurchases_listSignalErrorFull() instead")
    void androidpublisher_purchases_voidedpurchases_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_purchases_voidedpurchases_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
