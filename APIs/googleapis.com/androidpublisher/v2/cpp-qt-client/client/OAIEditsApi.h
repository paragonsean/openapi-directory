/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEditsApi_H
#define OAI_OAIEditsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApk.h"
#include "OAIApkListing.h"
#include "OAIApkListingsListResponse.h"
#include "OAIApksAddExternallyHostedRequest.h"
#include "OAIApksAddExternallyHostedResponse.h"
#include "OAIApksListResponse.h"
#include "OAIAppDetails.h"
#include "OAIAppEdit.h"
#include "OAIBundle.h"
#include "OAIBundlesListResponse.h"
#include "OAIDeobfuscationFilesUploadResponse.h"
#include "OAIExpansionFile.h"
#include "OAIExpansionFilesUploadResponse.h"
#include "OAIImagesDeleteAllResponse.h"
#include "OAIImagesListResponse.h"
#include "OAIImagesUploadResponse.h"
#include "OAIListing.h"
#include "OAIListingsListResponse.h"
#include "OAITesters.h"
#include "OAITrack.h"
#include "OAITracksListResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEditsApi : public QObject {
    Q_OBJECT

public:
    OAIEditsApi(const int timeOut = 0);
    ~OAIEditsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apklistings_delete(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apklistings_deleteall(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apklistings_get(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apklistings_list(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_apk_listing OAIApkListing [optional]
    */
    virtual void androidpublisher_edits_apklistings_patch(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApkListing> &oai_apk_listing = ::OpenAPI::OptionalParam<OAIApkListing>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_apk_listing OAIApkListing [optional]
    */
    virtual void androidpublisher_edits_apklistings_update(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApkListing> &oai_apk_listing = ::OpenAPI::OptionalParam<OAIApkListing>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_apks_add_externally_hosted_request OAIApksAddExternallyHostedRequest [optional]
    */
    virtual void androidpublisher_edits_apks_addexternallyhosted(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIApksAddExternallyHostedRequest> &oai_apks_add_externally_hosted_request = ::OpenAPI::OptionalParam<OAIApksAddExternallyHostedRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apks_list(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_apks_upload(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_bundles_list(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  ack_bundle_installation_warning bool [optional]
    */
    virtual void androidpublisher_edits_bundles_upload(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ack_bundle_installation_warning = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_commit(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_delete(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  deobfuscation_file_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_deobfuscationfiles_upload(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &deobfuscation_file_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_details_get(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_app_details OAIAppDetails [optional]
    */
    virtual void androidpublisher_edits_details_patch(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAppDetails> &oai_app_details = ::OpenAPI::OptionalParam<OAIAppDetails>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_app_details OAIAppDetails [optional]
    */
    virtual void androidpublisher_edits_details_update(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAppDetails> &oai_app_details = ::OpenAPI::OptionalParam<OAIAppDetails>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  expansion_file_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_expansionfiles_get(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &expansion_file_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  expansion_file_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_expansion_file OAIExpansionFile [optional]
    */
    virtual void androidpublisher_edits_expansionfiles_patch(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &expansion_file_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExpansionFile> &oai_expansion_file = ::OpenAPI::OptionalParam<OAIExpansionFile>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  expansion_file_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_expansion_file OAIExpansionFile [optional]
    */
    virtual void androidpublisher_edits_expansionfiles_update(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &expansion_file_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIExpansionFile> &oai_expansion_file = ::OpenAPI::OptionalParam<OAIExpansionFile>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  apk_version_code qint32 [required]
    * @param[in]  expansion_file_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_expansionfiles_upload(const QString &package_name, const QString &edit_id, const qint32 &apk_version_code, const QString &expansion_file_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_get(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  image_type QString [required]
    * @param[in]  image_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_images_delete(const QString &package_name, const QString &edit_id, const QString &language, const QString &image_type, const QString &image_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  image_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_images_deleteall(const QString &package_name, const QString &edit_id, const QString &language, const QString &image_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  image_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_images_list(const QString &package_name, const QString &edit_id, const QString &language, const QString &image_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  image_type QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_images_upload(const QString &package_name, const QString &edit_id, const QString &language, const QString &image_type, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_app_edit OAIAppEdit [optional]
    */
    virtual void androidpublisher_edits_insert(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAppEdit> &oai_app_edit = ::OpenAPI::OptionalParam<OAIAppEdit>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_listings_delete(const QString &package_name, const QString &edit_id, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_listings_deleteall(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_listings_get(const QString &package_name, const QString &edit_id, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_listings_list(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_listing OAIListing [optional]
    */
    virtual void androidpublisher_edits_listings_patch(const QString &package_name, const QString &edit_id, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListing> &oai_listing = ::OpenAPI::OptionalParam<OAIListing>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  language QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_listing OAIListing [optional]
    */
    virtual void androidpublisher_edits_listings_update(const QString &package_name, const QString &edit_id, const QString &language, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListing> &oai_listing = ::OpenAPI::OptionalParam<OAIListing>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_testers_get(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_testers OAITesters [optional]
    */
    virtual void androidpublisher_edits_testers_patch(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITesters> &oai_testers = ::OpenAPI::OptionalParam<OAITesters>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_testers OAITesters [optional]
    */
    virtual void androidpublisher_edits_testers_update(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITesters> &oai_testers = ::OpenAPI::OptionalParam<OAITesters>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_tracks_get(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_tracks_list(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_track OAITrack [optional]
    */
    virtual void androidpublisher_edits_tracks_patch(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITrack> &oai_track = ::OpenAPI::OptionalParam<OAITrack>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  track QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    * @param[in]  oai_track OAITrack [optional]
    */
    virtual void androidpublisher_edits_tracks_update(const QString &package_name, const QString &edit_id, const QString &track, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITrack> &oai_track = ::OpenAPI::OptionalParam<OAITrack>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  edit_id QString [required]
    * @param[in]  alt QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  user_ip QString [optional]
    */
    virtual void androidpublisher_edits_validate(const QString &package_name, const QString &edit_id, const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_ip = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void androidpublisher_edits_apklistings_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_deleteallCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apks_addexternallyhostedCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apks_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apks_uploadCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_bundles_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_bundles_uploadCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_commitCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_deobfuscationfiles_uploadCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_details_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_details_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_details_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_expansionfiles_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_expansionfiles_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_expansionfiles_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_expansionfiles_uploadCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_images_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_images_deleteallCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_images_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_images_uploadCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_insertCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_deleteallCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_testers_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_testers_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_testers_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_tracks_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_tracks_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_tracks_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_tracks_updateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_validateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void androidpublisher_edits_apklistings_deleteSignal();
    void androidpublisher_edits_apklistings_deleteallSignal();
    void androidpublisher_edits_apklistings_getSignal(OAIApkListing summary);
    void androidpublisher_edits_apklistings_listSignal(OAIApkListingsListResponse summary);
    void androidpublisher_edits_apklistings_patchSignal(OAIApkListing summary);
    void androidpublisher_edits_apklistings_updateSignal(OAIApkListing summary);
    void androidpublisher_edits_apks_addexternallyhostedSignal(OAIApksAddExternallyHostedResponse summary);
    void androidpublisher_edits_apks_listSignal(OAIApksListResponse summary);
    void androidpublisher_edits_apks_uploadSignal(OAIApk summary);
    void androidpublisher_edits_bundles_listSignal(OAIBundlesListResponse summary);
    void androidpublisher_edits_bundles_uploadSignal(OAIBundle summary);
    void androidpublisher_edits_commitSignal(OAIAppEdit summary);
    void androidpublisher_edits_deleteSignal();
    void androidpublisher_edits_deobfuscationfiles_uploadSignal(OAIDeobfuscationFilesUploadResponse summary);
    void androidpublisher_edits_details_getSignal(OAIAppDetails summary);
    void androidpublisher_edits_details_patchSignal(OAIAppDetails summary);
    void androidpublisher_edits_details_updateSignal(OAIAppDetails summary);
    void androidpublisher_edits_expansionfiles_getSignal(OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_patchSignal(OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_updateSignal(OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_uploadSignal(OAIExpansionFilesUploadResponse summary);
    void androidpublisher_edits_getSignal(OAIAppEdit summary);
    void androidpublisher_edits_images_deleteSignal();
    void androidpublisher_edits_images_deleteallSignal(OAIImagesDeleteAllResponse summary);
    void androidpublisher_edits_images_listSignal(OAIImagesListResponse summary);
    void androidpublisher_edits_images_uploadSignal(OAIImagesUploadResponse summary);
    void androidpublisher_edits_insertSignal(OAIAppEdit summary);
    void androidpublisher_edits_listings_deleteSignal();
    void androidpublisher_edits_listings_deleteallSignal();
    void androidpublisher_edits_listings_getSignal(OAIListing summary);
    void androidpublisher_edits_listings_listSignal(OAIListingsListResponse summary);
    void androidpublisher_edits_listings_patchSignal(OAIListing summary);
    void androidpublisher_edits_listings_updateSignal(OAIListing summary);
    void androidpublisher_edits_testers_getSignal(OAITesters summary);
    void androidpublisher_edits_testers_patchSignal(OAITesters summary);
    void androidpublisher_edits_testers_updateSignal(OAITesters summary);
    void androidpublisher_edits_tracks_getSignal(OAITrack summary);
    void androidpublisher_edits_tracks_listSignal(OAITracksListResponse summary);
    void androidpublisher_edits_tracks_patchSignal(OAITrack summary);
    void androidpublisher_edits_tracks_updateSignal(OAITrack summary);
    void androidpublisher_edits_validateSignal(OAIAppEdit summary);


    void androidpublisher_edits_apklistings_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_deleteallSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_apklistings_getSignalFull(OAIHttpRequestWorker *worker, OAIApkListing summary);
    void androidpublisher_edits_apklistings_listSignalFull(OAIHttpRequestWorker *worker, OAIApkListingsListResponse summary);
    void androidpublisher_edits_apklistings_patchSignalFull(OAIHttpRequestWorker *worker, OAIApkListing summary);
    void androidpublisher_edits_apklistings_updateSignalFull(OAIHttpRequestWorker *worker, OAIApkListing summary);
    void androidpublisher_edits_apks_addexternallyhostedSignalFull(OAIHttpRequestWorker *worker, OAIApksAddExternallyHostedResponse summary);
    void androidpublisher_edits_apks_listSignalFull(OAIHttpRequestWorker *worker, OAIApksListResponse summary);
    void androidpublisher_edits_apks_uploadSignalFull(OAIHttpRequestWorker *worker, OAIApk summary);
    void androidpublisher_edits_bundles_listSignalFull(OAIHttpRequestWorker *worker, OAIBundlesListResponse summary);
    void androidpublisher_edits_bundles_uploadSignalFull(OAIHttpRequestWorker *worker, OAIBundle summary);
    void androidpublisher_edits_commitSignalFull(OAIHttpRequestWorker *worker, OAIAppEdit summary);
    void androidpublisher_edits_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_deobfuscationfiles_uploadSignalFull(OAIHttpRequestWorker *worker, OAIDeobfuscationFilesUploadResponse summary);
    void androidpublisher_edits_details_getSignalFull(OAIHttpRequestWorker *worker, OAIAppDetails summary);
    void androidpublisher_edits_details_patchSignalFull(OAIHttpRequestWorker *worker, OAIAppDetails summary);
    void androidpublisher_edits_details_updateSignalFull(OAIHttpRequestWorker *worker, OAIAppDetails summary);
    void androidpublisher_edits_expansionfiles_getSignalFull(OAIHttpRequestWorker *worker, OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_patchSignalFull(OAIHttpRequestWorker *worker, OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_updateSignalFull(OAIHttpRequestWorker *worker, OAIExpansionFile summary);
    void androidpublisher_edits_expansionfiles_uploadSignalFull(OAIHttpRequestWorker *worker, OAIExpansionFilesUploadResponse summary);
    void androidpublisher_edits_getSignalFull(OAIHttpRequestWorker *worker, OAIAppEdit summary);
    void androidpublisher_edits_images_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_images_deleteallSignalFull(OAIHttpRequestWorker *worker, OAIImagesDeleteAllResponse summary);
    void androidpublisher_edits_images_listSignalFull(OAIHttpRequestWorker *worker, OAIImagesListResponse summary);
    void androidpublisher_edits_images_uploadSignalFull(OAIHttpRequestWorker *worker, OAIImagesUploadResponse summary);
    void androidpublisher_edits_insertSignalFull(OAIHttpRequestWorker *worker, OAIAppEdit summary);
    void androidpublisher_edits_listings_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_deleteallSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_edits_listings_getSignalFull(OAIHttpRequestWorker *worker, OAIListing summary);
    void androidpublisher_edits_listings_listSignalFull(OAIHttpRequestWorker *worker, OAIListingsListResponse summary);
    void androidpublisher_edits_listings_patchSignalFull(OAIHttpRequestWorker *worker, OAIListing summary);
    void androidpublisher_edits_listings_updateSignalFull(OAIHttpRequestWorker *worker, OAIListing summary);
    void androidpublisher_edits_testers_getSignalFull(OAIHttpRequestWorker *worker, OAITesters summary);
    void androidpublisher_edits_testers_patchSignalFull(OAIHttpRequestWorker *worker, OAITesters summary);
    void androidpublisher_edits_testers_updateSignalFull(OAIHttpRequestWorker *worker, OAITesters summary);
    void androidpublisher_edits_tracks_getSignalFull(OAIHttpRequestWorker *worker, OAITrack summary);
    void androidpublisher_edits_tracks_listSignalFull(OAIHttpRequestWorker *worker, OAITracksListResponse summary);
    void androidpublisher_edits_tracks_patchSignalFull(OAIHttpRequestWorker *worker, OAITrack summary);
    void androidpublisher_edits_tracks_updateSignalFull(OAIHttpRequestWorker *worker, OAITrack summary);
    void androidpublisher_edits_validateSignalFull(OAIHttpRequestWorker *worker, OAIAppEdit summary);

    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_deleteSignalError() instead")
    void androidpublisher_edits_apklistings_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_deleteallSignalError() instead")
    void androidpublisher_edits_apklistings_deleteallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_deleteallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_getSignalError() instead")
    void androidpublisher_edits_apklistings_getSignalE(OAIApkListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_getSignalError(OAIApkListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_listSignalError() instead")
    void androidpublisher_edits_apklistings_listSignalE(OAIApkListingsListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_listSignalError(OAIApkListingsListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_patchSignalError() instead")
    void androidpublisher_edits_apklistings_patchSignalE(OAIApkListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_patchSignalError(OAIApkListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_updateSignalError() instead")
    void androidpublisher_edits_apklistings_updateSignalE(OAIApkListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_updateSignalError(OAIApkListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_addexternallyhostedSignalError() instead")
    void androidpublisher_edits_apks_addexternallyhostedSignalE(OAIApksAddExternallyHostedResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_addexternallyhostedSignalError(OAIApksAddExternallyHostedResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_listSignalError() instead")
    void androidpublisher_edits_apks_listSignalE(OAIApksListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_listSignalError(OAIApksListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_uploadSignalError() instead")
    void androidpublisher_edits_apks_uploadSignalE(OAIApk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_uploadSignalError(OAIApk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_bundles_listSignalError() instead")
    void androidpublisher_edits_bundles_listSignalE(OAIBundlesListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_bundles_listSignalError(OAIBundlesListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_bundles_uploadSignalError() instead")
    void androidpublisher_edits_bundles_uploadSignalE(OAIBundle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_bundles_uploadSignalError(OAIBundle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_commitSignalError() instead")
    void androidpublisher_edits_commitSignalE(OAIAppEdit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_commitSignalError(OAIAppEdit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_deleteSignalError() instead")
    void androidpublisher_edits_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_deobfuscationfiles_uploadSignalError() instead")
    void androidpublisher_edits_deobfuscationfiles_uploadSignalE(OAIDeobfuscationFilesUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_deobfuscationfiles_uploadSignalError(OAIDeobfuscationFilesUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_getSignalError() instead")
    void androidpublisher_edits_details_getSignalE(OAIAppDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_getSignalError(OAIAppDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_patchSignalError() instead")
    void androidpublisher_edits_details_patchSignalE(OAIAppDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_patchSignalError(OAIAppDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_updateSignalError() instead")
    void androidpublisher_edits_details_updateSignalE(OAIAppDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_updateSignalError(OAIAppDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_getSignalError() instead")
    void androidpublisher_edits_expansionfiles_getSignalE(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_getSignalError(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_patchSignalError() instead")
    void androidpublisher_edits_expansionfiles_patchSignalE(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_patchSignalError(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_updateSignalError() instead")
    void androidpublisher_edits_expansionfiles_updateSignalE(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_updateSignalError(OAIExpansionFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_uploadSignalError() instead")
    void androidpublisher_edits_expansionfiles_uploadSignalE(OAIExpansionFilesUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_uploadSignalError(OAIExpansionFilesUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_getSignalError() instead")
    void androidpublisher_edits_getSignalE(OAIAppEdit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_getSignalError(OAIAppEdit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_deleteSignalError() instead")
    void androidpublisher_edits_images_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_deleteallSignalError() instead")
    void androidpublisher_edits_images_deleteallSignalE(OAIImagesDeleteAllResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_deleteallSignalError(OAIImagesDeleteAllResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_listSignalError() instead")
    void androidpublisher_edits_images_listSignalE(OAIImagesListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_listSignalError(OAIImagesListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_uploadSignalError() instead")
    void androidpublisher_edits_images_uploadSignalE(OAIImagesUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_uploadSignalError(OAIImagesUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_insertSignalError() instead")
    void androidpublisher_edits_insertSignalE(OAIAppEdit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_insertSignalError(OAIAppEdit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_deleteSignalError() instead")
    void androidpublisher_edits_listings_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_deleteallSignalError() instead")
    void androidpublisher_edits_listings_deleteallSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_deleteallSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_getSignalError() instead")
    void androidpublisher_edits_listings_getSignalE(OAIListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_getSignalError(OAIListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_listSignalError() instead")
    void androidpublisher_edits_listings_listSignalE(OAIListingsListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_listSignalError(OAIListingsListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_patchSignalError() instead")
    void androidpublisher_edits_listings_patchSignalE(OAIListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_patchSignalError(OAIListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_updateSignalError() instead")
    void androidpublisher_edits_listings_updateSignalE(OAIListing summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_updateSignalError(OAIListing summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_getSignalError() instead")
    void androidpublisher_edits_testers_getSignalE(OAITesters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_getSignalError(OAITesters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_patchSignalError() instead")
    void androidpublisher_edits_testers_patchSignalE(OAITesters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_patchSignalError(OAITesters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_updateSignalError() instead")
    void androidpublisher_edits_testers_updateSignalE(OAITesters summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_updateSignalError(OAITesters summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_getSignalError() instead")
    void androidpublisher_edits_tracks_getSignalE(OAITrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_getSignalError(OAITrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_listSignalError() instead")
    void androidpublisher_edits_tracks_listSignalE(OAITracksListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_listSignalError(OAITracksListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_patchSignalError() instead")
    void androidpublisher_edits_tracks_patchSignalE(OAITrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_patchSignalError(OAITrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_updateSignalError() instead")
    void androidpublisher_edits_tracks_updateSignalE(OAITrack summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_updateSignalError(OAITrack summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_validateSignalError() instead")
    void androidpublisher_edits_validateSignalE(OAIAppEdit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_validateSignalError(OAIAppEdit summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_deleteSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_deleteallSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_deleteallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_deleteallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_getSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_listSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_patchSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apklistings_updateSignalErrorFull() instead")
    void androidpublisher_edits_apklistings_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apklistings_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_addexternallyhostedSignalErrorFull() instead")
    void androidpublisher_edits_apks_addexternallyhostedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_addexternallyhostedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_listSignalErrorFull() instead")
    void androidpublisher_edits_apks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_apks_uploadSignalErrorFull() instead")
    void androidpublisher_edits_apks_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_apks_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_bundles_listSignalErrorFull() instead")
    void androidpublisher_edits_bundles_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_bundles_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_bundles_uploadSignalErrorFull() instead")
    void androidpublisher_edits_bundles_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_bundles_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_commitSignalErrorFull() instead")
    void androidpublisher_edits_commitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_commitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_deleteSignalErrorFull() instead")
    void androidpublisher_edits_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_deobfuscationfiles_uploadSignalErrorFull() instead")
    void androidpublisher_edits_deobfuscationfiles_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_deobfuscationfiles_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_getSignalErrorFull() instead")
    void androidpublisher_edits_details_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_patchSignalErrorFull() instead")
    void androidpublisher_edits_details_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_details_updateSignalErrorFull() instead")
    void androidpublisher_edits_details_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_details_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_getSignalErrorFull() instead")
    void androidpublisher_edits_expansionfiles_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_patchSignalErrorFull() instead")
    void androidpublisher_edits_expansionfiles_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_updateSignalErrorFull() instead")
    void androidpublisher_edits_expansionfiles_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_expansionfiles_uploadSignalErrorFull() instead")
    void androidpublisher_edits_expansionfiles_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_expansionfiles_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_getSignalErrorFull() instead")
    void androidpublisher_edits_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_deleteSignalErrorFull() instead")
    void androidpublisher_edits_images_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_deleteallSignalErrorFull() instead")
    void androidpublisher_edits_images_deleteallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_deleteallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_listSignalErrorFull() instead")
    void androidpublisher_edits_images_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_images_uploadSignalErrorFull() instead")
    void androidpublisher_edits_images_uploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_images_uploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_insertSignalErrorFull() instead")
    void androidpublisher_edits_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_deleteSignalErrorFull() instead")
    void androidpublisher_edits_listings_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_deleteallSignalErrorFull() instead")
    void androidpublisher_edits_listings_deleteallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_deleteallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_getSignalErrorFull() instead")
    void androidpublisher_edits_listings_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_listSignalErrorFull() instead")
    void androidpublisher_edits_listings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_patchSignalErrorFull() instead")
    void androidpublisher_edits_listings_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_listings_updateSignalErrorFull() instead")
    void androidpublisher_edits_listings_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_listings_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_getSignalErrorFull() instead")
    void androidpublisher_edits_testers_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_patchSignalErrorFull() instead")
    void androidpublisher_edits_testers_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_testers_updateSignalErrorFull() instead")
    void androidpublisher_edits_testers_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_testers_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_getSignalErrorFull() instead")
    void androidpublisher_edits_tracks_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_listSignalErrorFull() instead")
    void androidpublisher_edits_tracks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_patchSignalErrorFull() instead")
    void androidpublisher_edits_tracks_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_tracks_updateSignalErrorFull() instead")
    void androidpublisher_edits_tracks_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_tracks_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_edits_validateSignalErrorFull() instead")
    void androidpublisher_edits_validateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_edits_validateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
