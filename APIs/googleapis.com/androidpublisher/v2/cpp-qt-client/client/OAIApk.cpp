/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApk::OAIApk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApk::OAIApk() {
    this->initializeModel();
}

OAIApk::~OAIApk() {}

void OAIApk::initializeModel() {

    m_binary_isSet = false;
    m_binary_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;
}

void OAIApk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApk::fromJsonObject(QJsonObject json) {

    m_binary_isValid = ::OpenAPI::fromJsonValue(m_binary, json[QString("binary")]);
    m_binary_isSet = !json[QString("binary")].isNull() && m_binary_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;
}

QString OAIApk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApk::asJsonObject() const {
    QJsonObject obj;
    if (m_binary.isSet()) {
        obj.insert(QString("binary"), ::OpenAPI::toJsonValue(m_binary));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    return obj;
}

OAIApkBinary OAIApk::getBinary() const {
    return m_binary;
}
void OAIApk::setBinary(const OAIApkBinary &binary) {
    m_binary = binary;
    m_binary_isSet = true;
}

bool OAIApk::is_binary_Set() const{
    return m_binary_isSet;
}

bool OAIApk::is_binary_Valid() const{
    return m_binary_isValid;
}

qint32 OAIApk::getVersionCode() const {
    return m_version_code;
}
void OAIApk::setVersionCode(const qint32 &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIApk::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIApk::is_version_code_Valid() const{
    return m_version_code_isValid;
}

bool OAIApk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
