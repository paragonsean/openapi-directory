/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrack::OAITrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrack::OAITrack() {
    this->initializeModel();
}

OAITrack::~OAITrack() {}

void OAITrack::initializeModel() {

    m_track_isSet = false;
    m_track_isValid = false;

    m_user_fraction_isSet = false;
    m_user_fraction_isValid = false;

    m_version_codes_isSet = false;
    m_version_codes_isValid = false;
}

void OAITrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrack::fromJsonObject(QJsonObject json) {

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;

    m_user_fraction_isValid = ::OpenAPI::fromJsonValue(m_user_fraction, json[QString("userFraction")]);
    m_user_fraction_isSet = !json[QString("userFraction")].isNull() && m_user_fraction_isValid;

    m_version_codes_isValid = ::OpenAPI::fromJsonValue(m_version_codes, json[QString("versionCodes")]);
    m_version_codes_isSet = !json[QString("versionCodes")].isNull() && m_version_codes_isValid;
}

QString OAITrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrack::asJsonObject() const {
    QJsonObject obj;
    if (m_track_isSet) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    if (m_user_fraction_isSet) {
        obj.insert(QString("userFraction"), ::OpenAPI::toJsonValue(m_user_fraction));
    }
    if (m_version_codes.size() > 0) {
        obj.insert(QString("versionCodes"), ::OpenAPI::toJsonValue(m_version_codes));
    }
    return obj;
}

QString OAITrack::getTrack() const {
    return m_track;
}
void OAITrack::setTrack(const QString &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAITrack::is_track_Set() const{
    return m_track_isSet;
}

bool OAITrack::is_track_Valid() const{
    return m_track_isValid;
}

double OAITrack::getUserFraction() const {
    return m_user_fraction;
}
void OAITrack::setUserFraction(const double &user_fraction) {
    m_user_fraction = user_fraction;
    m_user_fraction_isSet = true;
}

bool OAITrack::is_user_fraction_Set() const{
    return m_user_fraction_isSet;
}

bool OAITrack::is_user_fraction_Valid() const{
    return m_user_fraction_isValid;
}

QList<qint32> OAITrack::getVersionCodes() const {
    return m_version_codes;
}
void OAITrack::setVersionCodes(const QList<qint32> &version_codes) {
    m_version_codes = version_codes;
    m_version_codes_isSet = true;
}

bool OAITrack::is_version_codes_Set() const{
    return m_version_codes_isSet;
}

bool OAITrack::is_version_codes_Valid() const{
    return m_version_codes_isValid;
}

bool OAITrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
