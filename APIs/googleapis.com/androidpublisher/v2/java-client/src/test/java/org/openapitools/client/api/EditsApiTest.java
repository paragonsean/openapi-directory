/*
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Apk;
import org.openapitools.client.model.ApkListing;
import org.openapitools.client.model.ApkListingsListResponse;
import org.openapitools.client.model.ApksAddExternallyHostedRequest;
import org.openapitools.client.model.ApksAddExternallyHostedResponse;
import org.openapitools.client.model.ApksListResponse;
import org.openapitools.client.model.AppDetails;
import org.openapitools.client.model.AppEdit;
import org.openapitools.client.model.Bundle;
import org.openapitools.client.model.BundlesListResponse;
import org.openapitools.client.model.DeobfuscationFilesUploadResponse;
import org.openapitools.client.model.ExpansionFile;
import org.openapitools.client.model.ExpansionFilesUploadResponse;
import org.openapitools.client.model.ImagesDeleteAllResponse;
import org.openapitools.client.model.ImagesListResponse;
import org.openapitools.client.model.ImagesUploadResponse;
import org.openapitools.client.model.Listing;
import org.openapitools.client.model.ListingsListResponse;
import org.openapitools.client.model.Testers;
import org.openapitools.client.model.Track;
import org.openapitools.client.model.TracksListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EditsApi
 */
@Disabled
public class EditsApiTest {

    private final EditsApi api = new EditsApi();

    /**
     * Deletes the APK-specific localized listing for a specified APK and language code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsApklistingsDelete(packageName, editId, apkVersionCode, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes all the APK-specific localized listings for a specified APK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsDeleteallTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsApklistingsDeleteall(packageName, editId, apkVersionCode, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Fetches the APK-specific localized listing for a specified APK and language code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApkListing response = api.androidpublisherEditsApklistingsGet(packageName, editId, apkVersionCode, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Lists all the APK-specific localized listings for a specified APK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApkListingsListResponse response = api.androidpublisherEditsApklistingsList(packageName, editId, apkVersionCode, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Updates or creates the APK-specific localized listing for a specified APK and language code. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApkListing apkListing = null;
        ApkListing response = api.androidpublisherEditsApklistingsPatch(packageName, editId, apkVersionCode, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, apkListing);
        // TODO: test validations
    }

    /**
     * Updates or creates the APK-specific localized listing for a specified APK and language code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApklistingsUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApkListing apkListing = null;
        ApkListing response = api.androidpublisherEditsApklistingsUpdate(packageName, editId, apkVersionCode, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, apkListing);
        // TODO: test validations
    }

    /**
     * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksAddexternallyhostedTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApksAddExternallyHostedRequest apksAddExternallyHostedRequest = null;
        ApksAddExternallyHostedResponse response = api.androidpublisherEditsApksAddexternallyhosted(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, apksAddExternallyHostedRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ApksListResponse response = api.androidpublisherEditsApksList(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Apk response = api.androidpublisherEditsApksUpload(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsBundlesListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        BundlesListResponse response = api.androidpublisherEditsBundlesList(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors for an example in java.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsBundlesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Boolean ackBundleInstallationWarning = null;
        Bundle response = api.androidpublisherEditsBundlesUpload(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, ackBundleInstallationWarning);
        // TODO: test validations
    }

    /**
     * Commits/applies the changes made in this edit back to the app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsCommitTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppEdit response = api.androidpublisherEditsCommit(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes an edit for an app. Creating a new edit will automatically delete any of your previous edits so this method need only be called if you want to preemptively abandon an edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsDelete(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Uploads the deobfuscation file of the specified APK. If a deobfuscation or symbolication file already exists, it will be replaced. See https://developer.android.com/studio/build/shrink-code to learn more about deobfuscation files.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDeobfuscationfilesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String deobfuscationFileType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        DeobfuscationFilesUploadResponse response = api.androidpublisherEditsDeobfuscationfilesUpload(packageName, editId, apkVersionCode, deobfuscationFileType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Fetches app details for this edit. This includes the default language and developer support contact information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppDetails response = api.androidpublisherEditsDetailsGet(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Updates app details for this edit. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppDetails appDetails = null;
        AppDetails response = api.androidpublisherEditsDetailsPatch(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, appDetails);
        // TODO: test validations
    }

    /**
     * Updates app details for this edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppDetails appDetails = null;
        AppDetails response = api.androidpublisherEditsDetailsUpdate(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, appDetails);
        // TODO: test validations
    }

    /**
     * Fetches the Expansion File configuration for the APK specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesGet(packageName, editId, apkVersionCode, expansionFileType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Updates the APK&#39;s Expansion File configuration to reference another APK&#39;s Expansion Files. To add a new Expansion File use the Upload method. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ExpansionFile expansionFile = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesPatch(packageName, editId, apkVersionCode, expansionFileType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, expansionFile);
        // TODO: test validations
    }

    /**
     * Updates the APK&#39;s Expansion File configuration to reference another APK&#39;s Expansion Files. To add a new Expansion File use the Upload method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ExpansionFile expansionFile = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesUpdate(packageName, editId, apkVersionCode, expansionFileType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, expansionFile);
        // TODO: test validations
    }

    /**
     * Uploads and attaches a new Expansion File to the APK specified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ExpansionFilesUploadResponse response = api.androidpublisherEditsExpansionfilesUpload(packageName, editId, apkVersionCode, expansionFileType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns information about the edit specified. Calls will fail if the edit is no long active (e.g. has been deleted, superseded or expired).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppEdit response = api.androidpublisherEditsGet(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes the image (specified by id) from the edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String imageId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsImagesDelete(packageName, editId, language, imageType, imageId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes all images for the specified language and image type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesDeleteallTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ImagesDeleteAllResponse response = api.androidpublisherEditsImagesDeleteall(packageName, editId, language, imageType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Lists all images for the specified language and image type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ImagesListResponse response = api.androidpublisherEditsImagesList(packageName, editId, language, imageType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Uploads a new image and adds it to the list of images for the specified language and image type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ImagesUploadResponse response = api.androidpublisherEditsImagesUpload(packageName, editId, language, imageType, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Creates a new edit for an app, populated with the app&#39;s current state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsInsertTest() throws ApiException {
        String packageName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppEdit appEdit = null;
        AppEdit response = api.androidpublisherEditsInsert(packageName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, appEdit);
        // TODO: test validations
    }

    /**
     * Deletes the specified localized store listing from an edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsListingsDelete(packageName, editId, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Deletes all localized listings from an edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsDeleteallTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherEditsListingsDeleteall(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Fetches information about a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Listing response = api.androidpublisherEditsListingsGet(packageName, editId, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Returns all of the localized store listings attached to this edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ListingsListResponse response = api.androidpublisherEditsListingsList(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Creates or updates a localized store listing. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Listing listing = null;
        Listing response = api.androidpublisherEditsListingsPatch(packageName, editId, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, listing);
        // TODO: test validations
    }

    /**
     * Creates or updates a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Listing listing = null;
        Listing response = api.androidpublisherEditsListingsUpdate(packageName, editId, language, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, listing);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Testers response = api.androidpublisherEditsTestersGet(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Testers testers = null;
        Testers response = api.androidpublisherEditsTestersPatch(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, testers);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Testers testers = null;
        Testers response = api.androidpublisherEditsTestersUpdate(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, testers);
        // TODO: test validations
    }

    /**
     * Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Track response = api.androidpublisherEditsTracksGet(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Lists all the track configurations for this edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        TracksListResponse response = api.androidpublisherEditsTracksList(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Updates the track configuration for the specified track type. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Track track2 = null;
        Track response = api.androidpublisherEditsTracksPatch(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, track2);
        // TODO: test validations
    }

    /**
     * Updates the track configuration for the specified track type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        Track track2 = null;
        Track response = api.androidpublisherEditsTracksUpdate(packageName, editId, track, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, track2);
        // TODO: test validations
    }

    /**
     * Checks that the edit can be successfully committed. The edit&#39;s changes are not applied to the live app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsValidateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        AppEdit response = api.androidpublisherEditsValidate(packageName, editId, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

}
