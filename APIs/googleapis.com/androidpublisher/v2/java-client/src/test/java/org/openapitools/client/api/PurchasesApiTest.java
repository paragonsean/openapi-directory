/*
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductPurchase;
import org.openapitools.client.model.SubscriptionPurchase;
import org.openapitools.client.model.SubscriptionPurchasesDeferRequest;
import org.openapitools.client.model.SubscriptionPurchasesDeferResponse;
import org.openapitools.client.model.VoidedPurchasesListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PurchasesApi
 */
@Disabled
public class PurchasesApiTest {

    private final PurchasesApi api = new PurchasesApi();

    /**
     * Checks the purchase and consumption status of an inapp item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesProductsGetTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        ProductPurchase response = api.androidpublisherPurchasesProductsGet(packageName, productId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Cancels a user&#39;s subscription purchase. The subscription remains valid until its expiration time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesSubscriptionsCancelTest() throws ApiException {
        String packageName = null;
        String subscriptionId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherPurchasesSubscriptionsCancel(packageName, subscriptionId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Defers a user&#39;s subscription purchase until a specified future expiration time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesSubscriptionsDeferTest() throws ApiException {
        String packageName = null;
        String subscriptionId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        SubscriptionPurchasesDeferRequest subscriptionPurchasesDeferRequest = null;
        SubscriptionPurchasesDeferResponse response = api.androidpublisherPurchasesSubscriptionsDefer(packageName, subscriptionId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, subscriptionPurchasesDeferRequest);
        // TODO: test validations
    }

    /**
     * Checks whether a user&#39;s subscription purchase is valid and returns its expiry time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesSubscriptionsGetTest() throws ApiException {
        String packageName = null;
        String subscriptionId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        SubscriptionPurchase response = api.androidpublisherPurchasesSubscriptionsGet(packageName, subscriptionId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Refunds a user&#39;s subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesSubscriptionsRefundTest() throws ApiException {
        String packageName = null;
        String subscriptionId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherPurchasesSubscriptionsRefund(packageName, subscriptionId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Refunds and immediately revokes a user&#39;s subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesSubscriptionsRevokeTest() throws ApiException {
        String packageName = null;
        String subscriptionId = null;
        String token = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        api.androidpublisherPurchasesSubscriptionsRevoke(packageName, subscriptionId, token, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp);
        // TODO: test validations
    }

    /**
     * Lists the purchases that were canceled, refunded or charged-back.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherPurchasesVoidedpurchasesListTest() throws ApiException {
        String packageName = null;
        String alt = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String userIp = null;
        String endTime = null;
        Integer maxResults = null;
        Integer startIndex = null;
        String startTime = null;
        String token = null;
        VoidedPurchasesListResponse response = api.androidpublisherPurchasesVoidedpurchasesList(packageName, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, endTime, maxResults, startIndex, startTime, token);
        // TODO: test validations
    }

}
