/*
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.Arrays;
import org.openapitools.client.model.DeviceMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UserComment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:26.985705-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserComment {
  public static final String SERIALIZED_NAME_ANDROID_OS_VERSION = "androidOsVersion";
  @SerializedName(SERIALIZED_NAME_ANDROID_OS_VERSION)
  private Integer androidOsVersion;

  public static final String SERIALIZED_NAME_APP_VERSION_CODE = "appVersionCode";
  @SerializedName(SERIALIZED_NAME_APP_VERSION_CODE)
  private Integer appVersionCode;

  public static final String SERIALIZED_NAME_APP_VERSION_NAME = "appVersionName";
  @SerializedName(SERIALIZED_NAME_APP_VERSION_NAME)
  private String appVersionName;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_DEVICE_METADATA = "deviceMetadata";
  @SerializedName(SERIALIZED_NAME_DEVICE_METADATA)
  private DeviceMetadata deviceMetadata;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private Timestamp lastModified;

  public static final String SERIALIZED_NAME_ORIGINAL_TEXT = "originalText";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TEXT)
  private String originalText;

  public static final String SERIALIZED_NAME_REVIEWER_LANGUAGE = "reviewerLanguage";
  @SerializedName(SERIALIZED_NAME_REVIEWER_LANGUAGE)
  private String reviewerLanguage;

  public static final String SERIALIZED_NAME_STAR_RATING = "starRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Integer starRating;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMBS_DOWN_COUNT = "thumbsDownCount";
  @SerializedName(SERIALIZED_NAME_THUMBS_DOWN_COUNT)
  private Integer thumbsDownCount;

  public static final String SERIALIZED_NAME_THUMBS_UP_COUNT = "thumbsUpCount";
  @SerializedName(SERIALIZED_NAME_THUMBS_UP_COUNT)
  private Integer thumbsUpCount;

  public UserComment() {
  }

  public UserComment androidOsVersion(Integer androidOsVersion) {
    this.androidOsVersion = androidOsVersion;
    return this;
  }

  /**
   * Integer Android SDK version of the user&#39;s device at the time the review was written, e.g. 23 is Marshmallow. May be absent.
   * @return androidOsVersion
   */
  @javax.annotation.Nullable
  public Integer getAndroidOsVersion() {
    return androidOsVersion;
  }

  public void setAndroidOsVersion(Integer androidOsVersion) {
    this.androidOsVersion = androidOsVersion;
  }


  public UserComment appVersionCode(Integer appVersionCode) {
    this.appVersionCode = appVersionCode;
    return this;
  }

  /**
   * Integer version code of the app as installed at the time the review was written. May be absent.
   * @return appVersionCode
   */
  @javax.annotation.Nullable
  public Integer getAppVersionCode() {
    return appVersionCode;
  }

  public void setAppVersionCode(Integer appVersionCode) {
    this.appVersionCode = appVersionCode;
  }


  public UserComment appVersionName(String appVersionName) {
    this.appVersionName = appVersionName;
    return this;
  }

  /**
   * String version name of the app as installed at the time the review was written. May be absent.
   * @return appVersionName
   */
  @javax.annotation.Nullable
  public String getAppVersionName() {
    return appVersionName;
  }

  public void setAppVersionName(String appVersionName) {
    this.appVersionName = appVersionName;
  }


  public UserComment device(String device) {
    this.device = device;
    return this;
  }

  /**
   * Codename for the reviewer&#39;s device, e.g. klte, flounder. May be absent.
   * @return device
   */
  @javax.annotation.Nullable
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public UserComment deviceMetadata(DeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
    return this;
  }

  /**
   * Get deviceMetadata
   * @return deviceMetadata
   */
  @javax.annotation.Nullable
  public DeviceMetadata getDeviceMetadata() {
    return deviceMetadata;
  }

  public void setDeviceMetadata(DeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
  }


  public UserComment lastModified(Timestamp lastModified) {
    this.lastModified = lastModified;
    return this;
  }

  /**
   * Get lastModified
   * @return lastModified
   */
  @javax.annotation.Nullable
  public Timestamp getLastModified() {
    return lastModified;
  }

  public void setLastModified(Timestamp lastModified) {
    this.lastModified = lastModified;
  }


  public UserComment originalText(String originalText) {
    this.originalText = originalText;
    return this;
  }

  /**
   * Untranslated text of the review, in the case where the review has been translated. If the review has not been translated this is left blank.
   * @return originalText
   */
  @javax.annotation.Nullable
  public String getOriginalText() {
    return originalText;
  }

  public void setOriginalText(String originalText) {
    this.originalText = originalText;
  }


  public UserComment reviewerLanguage(String reviewerLanguage) {
    this.reviewerLanguage = reviewerLanguage;
    return this;
  }

  /**
   * Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.
   * @return reviewerLanguage
   */
  @javax.annotation.Nullable
  public String getReviewerLanguage() {
    return reviewerLanguage;
  }

  public void setReviewerLanguage(String reviewerLanguage) {
    this.reviewerLanguage = reviewerLanguage;
  }


  public UserComment starRating(Integer starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * The star rating associated with the review, from 1 to 5.
   * @return starRating
   */
  @javax.annotation.Nullable
  public Integer getStarRating() {
    return starRating;
  }

  public void setStarRating(Integer starRating) {
    this.starRating = starRating;
  }


  public UserComment text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public UserComment thumbsDownCount(Integer thumbsDownCount) {
    this.thumbsDownCount = thumbsDownCount;
    return this;
  }

  /**
   * Number of users who have given this review a thumbs down
   * @return thumbsDownCount
   */
  @javax.annotation.Nullable
  public Integer getThumbsDownCount() {
    return thumbsDownCount;
  }

  public void setThumbsDownCount(Integer thumbsDownCount) {
    this.thumbsDownCount = thumbsDownCount;
  }


  public UserComment thumbsUpCount(Integer thumbsUpCount) {
    this.thumbsUpCount = thumbsUpCount;
    return this;
  }

  /**
   * Number of users who have given this review a thumbs up
   * @return thumbsUpCount
   */
  @javax.annotation.Nullable
  public Integer getThumbsUpCount() {
    return thumbsUpCount;
  }

  public void setThumbsUpCount(Integer thumbsUpCount) {
    this.thumbsUpCount = thumbsUpCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserComment userComment = (UserComment) o;
    return Objects.equals(this.androidOsVersion, userComment.androidOsVersion) &&
        Objects.equals(this.appVersionCode, userComment.appVersionCode) &&
        Objects.equals(this.appVersionName, userComment.appVersionName) &&
        Objects.equals(this.device, userComment.device) &&
        Objects.equals(this.deviceMetadata, userComment.deviceMetadata) &&
        Objects.equals(this.lastModified, userComment.lastModified) &&
        Objects.equals(this.originalText, userComment.originalText) &&
        Objects.equals(this.reviewerLanguage, userComment.reviewerLanguage) &&
        Objects.equals(this.starRating, userComment.starRating) &&
        Objects.equals(this.text, userComment.text) &&
        Objects.equals(this.thumbsDownCount, userComment.thumbsDownCount) &&
        Objects.equals(this.thumbsUpCount, userComment.thumbsUpCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidOsVersion, appVersionCode, appVersionName, device, deviceMetadata, lastModified, originalText, reviewerLanguage, starRating, text, thumbsDownCount, thumbsUpCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserComment {\n");
    sb.append("    androidOsVersion: ").append(toIndentedString(androidOsVersion)).append("\n");
    sb.append("    appVersionCode: ").append(toIndentedString(appVersionCode)).append("\n");
    sb.append("    appVersionName: ").append(toIndentedString(appVersionName)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    deviceMetadata: ").append(toIndentedString(deviceMetadata)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    originalText: ").append(toIndentedString(originalText)).append("\n");
    sb.append("    reviewerLanguage: ").append(toIndentedString(reviewerLanguage)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbsDownCount: ").append(toIndentedString(thumbsDownCount)).append("\n");
    sb.append("    thumbsUpCount: ").append(toIndentedString(thumbsUpCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidOsVersion");
    openapiFields.add("appVersionCode");
    openapiFields.add("appVersionName");
    openapiFields.add("device");
    openapiFields.add("deviceMetadata");
    openapiFields.add("lastModified");
    openapiFields.add("originalText");
    openapiFields.add("reviewerLanguage");
    openapiFields.add("starRating");
    openapiFields.add("text");
    openapiFields.add("thumbsDownCount");
    openapiFields.add("thumbsUpCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserComment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserComment is not found in the empty JSON string", UserComment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserComment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserComment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appVersionName") != null && !jsonObj.get("appVersionName").isJsonNull()) && !jsonObj.get("appVersionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appVersionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appVersionName").toString()));
      }
      if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) && !jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      // validate the optional field `deviceMetadata`
      if (jsonObj.get("deviceMetadata") != null && !jsonObj.get("deviceMetadata").isJsonNull()) {
        DeviceMetadata.validateJsonElement(jsonObj.get("deviceMetadata"));
      }
      // validate the optional field `lastModified`
      if (jsonObj.get("lastModified") != null && !jsonObj.get("lastModified").isJsonNull()) {
        Timestamp.validateJsonElement(jsonObj.get("lastModified"));
      }
      if ((jsonObj.get("originalText") != null && !jsonObj.get("originalText").isJsonNull()) && !jsonObj.get("originalText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalText").toString()));
      }
      if ((jsonObj.get("reviewerLanguage") != null && !jsonObj.get("reviewerLanguage").isJsonNull()) && !jsonObj.get("reviewerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewerLanguage").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserComment.class));

       return (TypeAdapter<T>) new TypeAdapter<UserComment>() {
           @Override
           public void write(JsonWriter out, UserComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserComment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserComment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserComment
   * @throws IOException if the JSON string is invalid with respect to UserComment
   */
  public static UserComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserComment.class);
  }

  /**
   * Convert an instance of UserComment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

