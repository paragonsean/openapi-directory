/*
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ProductPurchase resource indicates the status of a user&#39;s inapp product purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:26.985705-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductPurchase {
  public static final String SERIALIZED_NAME_CONSUMPTION_STATE = "consumptionState";
  @SerializedName(SERIALIZED_NAME_CONSUMPTION_STATE)
  private Integer consumptionState;

  public static final String SERIALIZED_NAME_DEVELOPER_PAYLOAD = "developerPayload";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_PAYLOAD)
  private String developerPayload;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "androidpublisher#productPurchase";

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PURCHASE_STATE = "purchaseState";
  @SerializedName(SERIALIZED_NAME_PURCHASE_STATE)
  private Integer purchaseState;

  public static final String SERIALIZED_NAME_PURCHASE_TIME_MILLIS = "purchaseTimeMillis";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TIME_MILLIS)
  private String purchaseTimeMillis;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "purchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private Integer purchaseType;

  public ProductPurchase() {
  }

  public ProductPurchase consumptionState(Integer consumptionState) {
    this.consumptionState = consumptionState;
    return this;
  }

  /**
   * The consumption state of the inapp product. Possible values are:   - Yet to be consumed  - Consumed
   * @return consumptionState
   */
  @javax.annotation.Nullable
  public Integer getConsumptionState() {
    return consumptionState;
  }

  public void setConsumptionState(Integer consumptionState) {
    this.consumptionState = consumptionState;
  }


  public ProductPurchase developerPayload(String developerPayload) {
    this.developerPayload = developerPayload;
    return this;
  }

  /**
   * A developer-specified string that contains supplemental information about an order.
   * @return developerPayload
   */
  @javax.annotation.Nullable
  public String getDeveloperPayload() {
    return developerPayload;
  }

  public void setDeveloperPayload(String developerPayload) {
    this.developerPayload = developerPayload;
  }


  public ProductPurchase kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This kind represents an inappPurchase object in the androidpublisher service.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ProductPurchase orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The order id associated with the purchase of the inapp product.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public ProductPurchase purchaseState(Integer purchaseState) {
    this.purchaseState = purchaseState;
    return this;
  }

  /**
   * The purchase state of the order. Possible values are:   - Purchased  - Canceled  - Pending
   * @return purchaseState
   */
  @javax.annotation.Nullable
  public Integer getPurchaseState() {
    return purchaseState;
  }

  public void setPurchaseState(Integer purchaseState) {
    this.purchaseState = purchaseState;
  }


  public ProductPurchase purchaseTimeMillis(String purchaseTimeMillis) {
    this.purchaseTimeMillis = purchaseTimeMillis;
    return this;
  }

  /**
   * The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).
   * @return purchaseTimeMillis
   */
  @javax.annotation.Nullable
  public String getPurchaseTimeMillis() {
    return purchaseTimeMillis;
  }

  public void setPurchaseTimeMillis(String purchaseTimeMillis) {
    this.purchaseTimeMillis = purchaseTimeMillis;
  }


  public ProductPurchase purchaseType(Integer purchaseType) {
    this.purchaseType = purchaseType;
    return this;
  }

  /**
   * The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:   - Test (i.e. purchased from a license testing account)  - Promo (i.e. purchased using a promo code)  - Rewarded (i.e. from watching a video ad instead of paying)
   * @return purchaseType
   */
  @javax.annotation.Nullable
  public Integer getPurchaseType() {
    return purchaseType;
  }

  public void setPurchaseType(Integer purchaseType) {
    this.purchaseType = purchaseType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductPurchase productPurchase = (ProductPurchase) o;
    return Objects.equals(this.consumptionState, productPurchase.consumptionState) &&
        Objects.equals(this.developerPayload, productPurchase.developerPayload) &&
        Objects.equals(this.kind, productPurchase.kind) &&
        Objects.equals(this.orderId, productPurchase.orderId) &&
        Objects.equals(this.purchaseState, productPurchase.purchaseState) &&
        Objects.equals(this.purchaseTimeMillis, productPurchase.purchaseTimeMillis) &&
        Objects.equals(this.purchaseType, productPurchase.purchaseType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumptionState, developerPayload, kind, orderId, purchaseState, purchaseTimeMillis, purchaseType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductPurchase {\n");
    sb.append("    consumptionState: ").append(toIndentedString(consumptionState)).append("\n");
    sb.append("    developerPayload: ").append(toIndentedString(developerPayload)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    purchaseState: ").append(toIndentedString(purchaseState)).append("\n");
    sb.append("    purchaseTimeMillis: ").append(toIndentedString(purchaseTimeMillis)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumptionState");
    openapiFields.add("developerPayload");
    openapiFields.add("kind");
    openapiFields.add("orderId");
    openapiFields.add("purchaseState");
    openapiFields.add("purchaseTimeMillis");
    openapiFields.add("purchaseType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductPurchase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductPurchase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductPurchase is not found in the empty JSON string", ProductPurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductPurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductPurchase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("developerPayload") != null && !jsonObj.get("developerPayload").isJsonNull()) && !jsonObj.get("developerPayload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerPayload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerPayload").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("purchaseTimeMillis") != null && !jsonObj.get("purchaseTimeMillis").isJsonNull()) && !jsonObj.get("purchaseTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseTimeMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductPurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductPurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductPurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductPurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductPurchase>() {
           @Override
           public void write(JsonWriter out, ProductPurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductPurchase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductPurchase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductPurchase
   * @throws IOException if the JSON string is invalid with respect to ProductPurchase
   */
  public static ProductPurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductPurchase.class);
  }

  /**
   * Convert an instance of ProductPurchase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

