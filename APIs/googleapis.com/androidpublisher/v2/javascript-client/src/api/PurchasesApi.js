/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductPurchase from '../model/ProductPurchase';
import SubscriptionPurchase from '../model/SubscriptionPurchase';
import SubscriptionPurchasesDeferRequest from '../model/SubscriptionPurchasesDeferRequest';
import SubscriptionPurchasesDeferResponse from '../model/SubscriptionPurchasesDeferResponse';
import VoidedPurchasesListResponse from '../model/VoidedPurchasesListResponse';

/**
* Purchases service.
* @module api/PurchasesApi
* @version v2
*/
export default class PurchasesApi {

    /**
    * Constructs a new PurchasesApi. 
    * @alias module:api/PurchasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherPurchasesProductsGet operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesProductsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the purchase and consumption status of an inapp item.
     * @param {String} packageName The package name of the application the inapp product was sold in (for example, 'com.some.thing').
     * @param {String} productId The inapp product SKU (for example, 'com.some.thing.inapp1').
     * @param {String} token The token provided to the user's device when the inapp product was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PurchasesApi~androidpublisherPurchasesProductsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductPurchase}
     */
    androidpublisherPurchasesProductsGet(packageName, productId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesProductsGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherPurchasesProductsGet");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesProductsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ProductPurchase;
      return this.apiClient.callApi(
        '/{packageName}/purchases/products/{productId}/tokens/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesSubscriptionsCancel operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a user's subscription purchase. The subscription remains valid until its expiration time.
     * @param {String} packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').
     * @param {String} subscriptionId The purchased subscription ID (for example, 'monthly001').
     * @param {String} token The token provided to the user's device when the subscription was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherPurchasesSubscriptionsCancel(packageName, subscriptionId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesSubscriptionsCancel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling androidpublisherPurchasesSubscriptionsCancel");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesSubscriptionsCancel");
      }

      let pathParams = {
        'packageName': packageName,
        'subscriptionId': subscriptionId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesSubscriptionsDefer operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsDeferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPurchasesDeferResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Defers a user's subscription purchase until a specified future expiration time.
     * @param {String} packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').
     * @param {String} subscriptionId The purchased subscription ID (for example, 'monthly001').
     * @param {String} token The token provided to the user's device when the subscription was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/SubscriptionPurchasesDeferRequest} [subscriptionPurchasesDeferRequest] 
     * @param {module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsDeferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPurchasesDeferResponse}
     */
    androidpublisherPurchasesSubscriptionsDefer(packageName, subscriptionId, token, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionPurchasesDeferRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesSubscriptionsDefer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling androidpublisherPurchasesSubscriptionsDefer");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesSubscriptionsDefer");
      }

      let pathParams = {
        'packageName': packageName,
        'subscriptionId': subscriptionId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = SubscriptionPurchasesDeferResponse;
      return this.apiClient.callApi(
        '/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesSubscriptionsGet operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionPurchase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks whether a user's subscription purchase is valid and returns its expiry time.
     * @param {String} packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').
     * @param {String} subscriptionId The purchased subscription ID (for example, 'monthly001').
     * @param {String} token The token provided to the user's device when the subscription was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionPurchase}
     */
    androidpublisherPurchasesSubscriptionsGet(packageName, subscriptionId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesSubscriptionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling androidpublisherPurchasesSubscriptionsGet");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesSubscriptionsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'subscriptionId': subscriptionId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SubscriptionPurchase;
      return this.apiClient.callApi(
        '/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesSubscriptionsRefund operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsRefundCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.
     * @param {String} packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').
     * @param {String} subscriptionId The purchased subscription ID (for example, 'monthly001').
     * @param {String} token The token provided to the user's device when the subscription was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsRefundCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherPurchasesSubscriptionsRefund(packageName, subscriptionId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesSubscriptionsRefund");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling androidpublisherPurchasesSubscriptionsRefund");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesSubscriptionsRefund");
      }

      let pathParams = {
        'packageName': packageName,
        'subscriptionId': subscriptionId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesSubscriptionsRevoke operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsRevokeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.
     * @param {String} packageName The package name of the application for which this subscription was purchased (for example, 'com.some.thing').
     * @param {String} subscriptionId The purchased subscription ID (for example, 'monthly001').
     * @param {String} token The token provided to the user's device when the subscription was purchased.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/PurchasesApi~androidpublisherPurchasesSubscriptionsRevokeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherPurchasesSubscriptionsRevoke(packageName, subscriptionId, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesSubscriptionsRevoke");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling androidpublisherPurchasesSubscriptionsRevoke");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling androidpublisherPurchasesSubscriptionsRevoke");
      }

      let pathParams = {
        'packageName': packageName,
        'subscriptionId': subscriptionId,
        'token': token
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherPurchasesVoidedpurchasesList operation.
     * @callback module:api/PurchasesApi~androidpublisherPurchasesVoidedpurchasesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoidedPurchasesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the purchases that were canceled, refunded or charged-back.
     * @param {String} packageName The package name of the application for which voided purchases need to be returned (for example, 'com.some.thing').
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {String} [endTime] The time, in milliseconds since the Epoch, of the newest voided purchase that you want to see in the response. The value of this parameter cannot be greater than the current time and is ignored if a pagination token is set. Default value is current time. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.
     * @param {Number} [maxResults] 
     * @param {Number} [startIndex] 
     * @param {String} [startTime] The time, in milliseconds since the Epoch, of the oldest voided purchase that you want to see in the response. The value of this parameter cannot be older than 30 days and is ignored if a pagination token is set. Default value is current time minus 30 days. Note: This filter is applied on the time at which the record is seen as voided by our systems and not the actual voided time returned in the response.
     * @param {String} [token] 
     * @param {module:api/PurchasesApi~androidpublisherPurchasesVoidedpurchasesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoidedPurchasesListResponse}
     */
    androidpublisherPurchasesVoidedpurchasesList(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherPurchasesVoidedpurchasesList");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'endTime': opts['endTime'],
        'maxResults': opts['maxResults'],
        'startIndex': opts['startIndex'],
        'startTime': opts['startTime'],
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = VoidedPurchasesListResponse;
      return this.apiClient.callApi(
        '/{packageName}/purchases/voidedpurchases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
