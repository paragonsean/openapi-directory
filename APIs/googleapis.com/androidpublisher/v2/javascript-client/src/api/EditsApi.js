/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Apk from '../model/Apk';
import ApkListing from '../model/ApkListing';
import ApkListingsListResponse from '../model/ApkListingsListResponse';
import ApksAddExternallyHostedRequest from '../model/ApksAddExternallyHostedRequest';
import ApksAddExternallyHostedResponse from '../model/ApksAddExternallyHostedResponse';
import ApksListResponse from '../model/ApksListResponse';
import AppDetails from '../model/AppDetails';
import AppEdit from '../model/AppEdit';
import Bundle from '../model/Bundle';
import BundlesListResponse from '../model/BundlesListResponse';
import DeobfuscationFilesUploadResponse from '../model/DeobfuscationFilesUploadResponse';
import ExpansionFile from '../model/ExpansionFile';
import ExpansionFilesUploadResponse from '../model/ExpansionFilesUploadResponse';
import ImagesDeleteAllResponse from '../model/ImagesDeleteAllResponse';
import ImagesListResponse from '../model/ImagesListResponse';
import ImagesUploadResponse from '../model/ImagesUploadResponse';
import Listing from '../model/Listing';
import ListingsListResponse from '../model/ListingsListResponse';
import Testers from '../model/Testers';
import Track from '../model/Track';
import TracksListResponse from '../model/TracksListResponse';

/**
* Edits service.
* @module api/EditsApi
* @version v2
*/
export default class EditsApi {

    /**
    * Constructs a new EditsApi. 
    * @alias module:api/EditsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the APK-specific localized listing for a specified APK and language code.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {String} language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsApklistingsDelete(packageName, editId, apkVersionCode, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsDelete");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsDelete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsApklistingsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsDeleteall operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsDeleteallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all the APK-specific localized listings for a specified APK.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsDeleteallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsApklistingsDeleteall(packageName, editId, apkVersionCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsDeleteall");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsDeleteall");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsDeleteall");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApkListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the APK-specific localized listing for a specified APK and language code.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {String} language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApkListing}
     */
    androidpublisherEditsApklistingsGet(packageName, editId, apkVersionCode, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsGet");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsGet");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsApklistingsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApkListing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsList operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApkListingsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the APK-specific localized listings for a specified APK.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApkListingsListResponse}
     */
    androidpublisherEditsApklistingsList(packageName, editId, apkVersionCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsList");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApkListingsListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApkListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates the APK-specific localized listing for a specified APK and language code. This method supports patch semantics.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {String} language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ApkListing} [apkListing] 
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApkListing}
     */
    androidpublisherEditsApklistingsPatch(packageName, editId, apkVersionCode, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['apkListing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsPatch");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsPatch");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsApklistingsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApkListing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApklistingsUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsApklistingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApkListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates or creates the APK-specific localized listing for a specified APK and language code.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The APK version code whose APK-specific listings should be read or modified.
     * @param {String} language The language code (a BCP-47 language tag) of the APK-specific localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ApkListing} [apkListing] 
     * @param {module:api/EditsApi~androidpublisherEditsApklistingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApkListing}
     */
    androidpublisherEditsApklistingsUpdate(packageName, editId, apkVersionCode, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['apkListing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApklistingsUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApklistingsUpdate");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsApklistingsUpdate");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsApklistingsUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApkListing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApksAddexternallyhosted operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksAddexternallyhostedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApksAddExternallyHostedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to enterprises using Google Play for Work whose application is configured to restrict distribution to the enterprise domain.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ApksAddExternallyHostedRequest} [apksAddExternallyHostedRequest] 
     * @param {module:api/EditsApi~androidpublisherEditsApksAddexternallyhostedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApksAddExternallyHostedResponse}
     */
    androidpublisherEditsApksAddexternallyhosted(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apksAddExternallyHostedRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksAddexternallyhosted");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksAddexternallyhosted");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApksAddExternallyHostedResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/externallyHosted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApksList operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApksListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApksListResponse}
     */
    androidpublisherEditsApksList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApksListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApksUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Apk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsApksUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Apk}
     */
    androidpublisherEditsApksUpload(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Apk;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsBundlesList operation.
     * @callback module:api/EditsApi~androidpublisherEditsBundlesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundlesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsBundlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundlesListResponse}
     */
    androidpublisherEditsBundlesList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsBundlesList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsBundlesList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BundlesListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsBundlesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsBundlesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See: https://developers.google.com/api-client-library/java/google-api-java-client/errors for an example in java.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {Boolean} [ackBundleInstallationWarning] Must be set to true if the bundle installation may trigger a warning on user devices (for example, if installation size may be over a threshold, typically 100 MB).
     * @param {module:api/EditsApi~androidpublisherEditsBundlesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bundle}
     */
    androidpublisherEditsBundlesUpload(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsBundlesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsBundlesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp'],
        'ackBundleInstallationWarning': opts['ackBundleInstallationWarning']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Bundle;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/bundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsCommit operation.
     * @callback module:api/EditsApi~androidpublisherEditsCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits/applies the changes made in this edit back to the app.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsCommit(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsCommit");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsCommit");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}:commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an edit for an app. Creating a new edit will automatically delete any of your previous edits so this method need only be called if you want to preemptively abandon an edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsDelete(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDeobfuscationfilesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsDeobfuscationfilesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeobfuscationFilesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads the deobfuscation file of the specified APK. If a deobfuscation or symbolication file already exists, it will be replaced. See https://developer.android.com/studio/build/shrink-code to learn more about deobfuscation files.
     * @param {String} packageName Unique identifier of the Android app for which the deobfuscation files are being uploaded; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose deobfuscation file is being uploaded.
     * @param {module:model/String} deobfuscationFileType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsDeobfuscationfilesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeobfuscationFilesUploadResponse}
     */
    androidpublisherEditsDeobfuscationfilesUpload(packageName, editId, apkVersionCode, deobfuscationFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'deobfuscationFileType' is set
      if (deobfuscationFileType === undefined || deobfuscationFileType === null) {
        throw new Error("Missing the required parameter 'deobfuscationFileType' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'deobfuscationFileType': deobfuscationFileType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = DeobfuscationFilesUploadResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches app details for this edit. This includes the default language and developer support contact information.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsGet(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates app details for this edit. This method supports patch semantics.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AppDetails} [appDetails] 
     * @param {module:api/EditsApi~androidpublisherEditsDetailsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsPatch(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appDetails'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/details', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates app details for this edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AppDetails} [appDetails] 
     * @param {module:api/EditsApi~androidpublisherEditsDetailsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsUpdate(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appDetails'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the Expansion File configuration for the APK specified.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.
     * @param {module:model/String} expansionFileType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesGet(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method. This method supports patch semantics.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.
     * @param {module:model/String} expansionFileType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ExpansionFile} [expansionFile] 
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesPatch(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = opts['expansionFile'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the APK's Expansion File configuration to reference another APK's Expansion Files. To add a new Expansion File use the Upload method.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.
     * @param {module:model/String} expansionFileType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/ExpansionFile} [expansionFile] 
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesUpdate(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = opts['expansionFile'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFilesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads and attaches a new Expansion File to the APK specified.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose Expansion File configuration is being read or modified.
     * @param {module:model/String} expansionFileType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFilesUploadResponse}
     */
    androidpublisherEditsExpansionfilesUpload(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ExpansionFilesUploadResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the edit specified. Calls will fail if the edit is no long active (e.g. has been deleted, superseded or expired).
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsGet(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the image (specified by id) from the edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".
     * @param {module:model/String} imageType 
     * @param {String} imageId Unique identifier an image within the set of images attached to this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsImagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsImagesDelete(packageName, editId, language, imageType, imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling androidpublisherEditsImagesDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType,
        'imageId': imageId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesDeleteall operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesDeleteallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesDeleteAllResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all images for the specified language and image type.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".
     * @param {module:model/String} imageType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsImagesDeleteallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesDeleteAllResponse}
     */
    androidpublisherEditsImagesDeleteall(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesDeleteall");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ImagesDeleteAllResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesList operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all images for the specified language and image type.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".
     * @param {module:model/String} imageType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsImagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesListResponse}
     */
    androidpublisherEditsImagesList(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ImagesListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new image and adds it to the list of images for the specified language and image type.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing whose images are to read or modified. For example, to select Austrian German, pass \"de-AT\".
     * @param {module:model/String} imageType 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsImagesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesUploadResponse}
     */
    androidpublisherEditsImagesUpload(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ImagesUploadResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsInsert operation.
     * @callback module:api/EditsApi~androidpublisherEditsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new edit for an app, populated with the app's current state.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/AppEdit} [appEdit] 
     * @param {module:api/EditsApi~androidpublisherEditsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsInsert(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['appEdit'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsInsert");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/{packageName}/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified localized store listing from an edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsListingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsListingsDelete(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsDelete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsDeleteall operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsDeleteallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all localized listings from an edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsListingsDeleteallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsListingsDeleteall(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsDeleteall");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsDeleteall");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches information about a localized store listing.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsGet(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsGet");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsList operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all of the localized store listings attached to this edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsListingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingsListResponse}
     */
    androidpublisherEditsListingsList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ListingsListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a localized store listing. This method supports patch semantics.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Listing} [listing] 
     * @param {module:api/EditsApi~androidpublisherEditsListingsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsPatch(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['listing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsPatch");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a localized store listing.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} language The language code (a BCP-47 language tag) of the localized listing to read or modify. For example, to select Austrian German, pass \"de-AT\".
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Listing} [listing] 
     * @param {module:api/EditsApi~androidpublisherEditsListingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsUpdate(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['listing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsUpdate");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/listings/{language}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsTestersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersGet(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersGet");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/testers/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Testers} [testers] 
     * @param {module:api/EditsApi~androidpublisherEditsTestersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersPatch(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['testers'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersPatch");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/testers/{track}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Testers} [testers] 
     * @param {module:api/EditsApi~androidpublisherEditsTestersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersUpdate(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['testers'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersUpdate");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/testers/{track}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the track configuration for the specified track type. Includes the APK version codes that are in this track.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsTracksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksGet(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksGet");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/tracks/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksList operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TracksListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the track configurations for this edit.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsTracksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TracksListResponse}
     */
    androidpublisherEditsTracksList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TracksListResponse;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the track configuration for the specified track type. This method supports patch semantics.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Track} [track2] 
     * @param {module:api/EditsApi~androidpublisherEditsTracksPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksPatch(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['track2'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksPatch");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/tracks/{track}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the track configuration for the specified track type.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {String} track The track to read or modify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:model/Track} [track2] 
     * @param {module:api/EditsApi~androidpublisherEditsTracksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksUpdate(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['track2'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksUpdate");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}/tracks/{track}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsValidate operation.
     * @callback module:api/EditsApi~androidpublisherEditsValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that the edit can be successfully committed. The edit's changes are not applied to the live app.
     * @param {String} packageName Unique identifier for the Android app that is being updated; for example, \"com.spiffygame\".
     * @param {String} editId Unique identifier for this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [alt = 'json')] Data format for the response.
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     * @param {String} [userIp] Deprecated. Please use quotaUser instead.
     * @param {module:api/EditsApi~androidpublisherEditsValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsValidate(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsValidate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsValidate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        'alt': opts['alt'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'userIp': opts['userIp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/{packageName}/edits/{editId}:validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
