/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternallyHostedApkUsesPermission from './ExternallyHostedApkUsesPermission';

/**
 * The ExternallyHostedApk model module.
 * @module model/ExternallyHostedApk
 * @version v2
 */
class ExternallyHostedApk {
    /**
     * Constructs a new <code>ExternallyHostedApk</code>.
     * Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to enterprises who are using Google Play for Work, and whos application is restricted to the enterprise private channel
     * @alias module:model/ExternallyHostedApk
     */
    constructor() { 
        
        ExternallyHostedApk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternallyHostedApk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternallyHostedApk} obj Optional instance to populate.
     * @return {module:model/ExternallyHostedApk} The populated <code>ExternallyHostedApk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternallyHostedApk();

            if (data.hasOwnProperty('applicationLabel')) {
                obj['applicationLabel'] = ApiClient.convertToType(data['applicationLabel'], 'String');
            }
            if (data.hasOwnProperty('certificateBase64s')) {
                obj['certificateBase64s'] = ApiClient.convertToType(data['certificateBase64s'], ['String']);
            }
            if (data.hasOwnProperty('externallyHostedUrl')) {
                obj['externallyHostedUrl'] = ApiClient.convertToType(data['externallyHostedUrl'], 'String');
            }
            if (data.hasOwnProperty('fileSha1Base64')) {
                obj['fileSha1Base64'] = ApiClient.convertToType(data['fileSha1Base64'], 'String');
            }
            if (data.hasOwnProperty('fileSha256Base64')) {
                obj['fileSha256Base64'] = ApiClient.convertToType(data['fileSha256Base64'], 'String');
            }
            if (data.hasOwnProperty('fileSize')) {
                obj['fileSize'] = ApiClient.convertToType(data['fileSize'], 'String');
            }
            if (data.hasOwnProperty('iconBase64')) {
                obj['iconBase64'] = ApiClient.convertToType(data['iconBase64'], 'String');
            }
            if (data.hasOwnProperty('maximumSdk')) {
                obj['maximumSdk'] = ApiClient.convertToType(data['maximumSdk'], 'Number');
            }
            if (data.hasOwnProperty('minimumSdk')) {
                obj['minimumSdk'] = ApiClient.convertToType(data['minimumSdk'], 'Number');
            }
            if (data.hasOwnProperty('nativeCodes')) {
                obj['nativeCodes'] = ApiClient.convertToType(data['nativeCodes'], ['String']);
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('usesFeatures')) {
                obj['usesFeatures'] = ApiClient.convertToType(data['usesFeatures'], ['String']);
            }
            if (data.hasOwnProperty('usesPermissions')) {
                obj['usesPermissions'] = ApiClient.convertToType(data['usesPermissions'], [ExternallyHostedApkUsesPermission]);
            }
            if (data.hasOwnProperty('versionCode')) {
                obj['versionCode'] = ApiClient.convertToType(data['versionCode'], 'Number');
            }
            if (data.hasOwnProperty('versionName')) {
                obj['versionName'] = ApiClient.convertToType(data['versionName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternallyHostedApk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternallyHostedApk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationLabel'] && !(typeof data['applicationLabel'] === 'string' || data['applicationLabel'] instanceof String)) {
            throw new Error("Expected the field `applicationLabel` to be a primitive type in the JSON string but got " + data['applicationLabel']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['certificateBase64s'])) {
            throw new Error("Expected the field `certificateBase64s` to be an array in the JSON data but got " + data['certificateBase64s']);
        }
        // ensure the json data is a string
        if (data['externallyHostedUrl'] && !(typeof data['externallyHostedUrl'] === 'string' || data['externallyHostedUrl'] instanceof String)) {
            throw new Error("Expected the field `externallyHostedUrl` to be a primitive type in the JSON string but got " + data['externallyHostedUrl']);
        }
        // ensure the json data is a string
        if (data['fileSha1Base64'] && !(typeof data['fileSha1Base64'] === 'string' || data['fileSha1Base64'] instanceof String)) {
            throw new Error("Expected the field `fileSha1Base64` to be a primitive type in the JSON string but got " + data['fileSha1Base64']);
        }
        // ensure the json data is a string
        if (data['fileSha256Base64'] && !(typeof data['fileSha256Base64'] === 'string' || data['fileSha256Base64'] instanceof String)) {
            throw new Error("Expected the field `fileSha256Base64` to be a primitive type in the JSON string but got " + data['fileSha256Base64']);
        }
        // ensure the json data is a string
        if (data['fileSize'] && !(typeof data['fileSize'] === 'string' || data['fileSize'] instanceof String)) {
            throw new Error("Expected the field `fileSize` to be a primitive type in the JSON string but got " + data['fileSize']);
        }
        // ensure the json data is a string
        if (data['iconBase64'] && !(typeof data['iconBase64'] === 'string' || data['iconBase64'] instanceof String)) {
            throw new Error("Expected the field `iconBase64` to be a primitive type in the JSON string but got " + data['iconBase64']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nativeCodes'])) {
            throw new Error("Expected the field `nativeCodes` to be an array in the JSON data but got " + data['nativeCodes']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usesFeatures'])) {
            throw new Error("Expected the field `usesFeatures` to be an array in the JSON data but got " + data['usesFeatures']);
        }
        if (data['usesPermissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usesPermissions'])) {
                throw new Error("Expected the field `usesPermissions` to be an array in the JSON data but got " + data['usesPermissions']);
            }
            // validate the optional field `usesPermissions` (array)
            for (const item of data['usesPermissions']) {
                ExternallyHostedApkUsesPermission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['versionName'] && !(typeof data['versionName'] === 'string' || data['versionName'] instanceof String)) {
            throw new Error("Expected the field `versionName` to be a primitive type in the JSON string but got " + data['versionName']);
        }

        return true;
    }


}



/**
 * The application label.
 * @member {String} applicationLabel
 */
ExternallyHostedApk.prototype['applicationLabel'] = undefined;

/**
 * A certificate (or array of certificates if a certificate-chain is used) used to signed this APK, represented as a base64 encoded byte array.
 * @member {Array.<String>} certificateBase64s
 */
ExternallyHostedApk.prototype['certificateBase64s'] = undefined;

/**
 * The URL at which the APK is hosted. This must be an https URL.
 * @member {String} externallyHostedUrl
 */
ExternallyHostedApk.prototype['externallyHostedUrl'] = undefined;

/**
 * The SHA1 checksum of this APK, represented as a base64 encoded byte array.
 * @member {String} fileSha1Base64
 */
ExternallyHostedApk.prototype['fileSha1Base64'] = undefined;

/**
 * The SHA256 checksum of this APK, represented as a base64 encoded byte array.
 * @member {String} fileSha256Base64
 */
ExternallyHostedApk.prototype['fileSha256Base64'] = undefined;

/**
 * The file size in bytes of this APK.
 * @member {String} fileSize
 */
ExternallyHostedApk.prototype['fileSize'] = undefined;

/**
 * The icon image from the APK, as a base64 encoded byte array.
 * @member {String} iconBase64
 */
ExternallyHostedApk.prototype['iconBase64'] = undefined;

/**
 * The maximum SDK supported by this APK (optional).
 * @member {Number} maximumSdk
 */
ExternallyHostedApk.prototype['maximumSdk'] = undefined;

/**
 * The minimum SDK targeted by this APK.
 * @member {Number} minimumSdk
 */
ExternallyHostedApk.prototype['minimumSdk'] = undefined;

/**
 * The native code environments supported by this APK (optional).
 * @member {Array.<String>} nativeCodes
 */
ExternallyHostedApk.prototype['nativeCodes'] = undefined;

/**
 * The package name.
 * @member {String} packageName
 */
ExternallyHostedApk.prototype['packageName'] = undefined;

/**
 * The features required by this APK (optional).
 * @member {Array.<String>} usesFeatures
 */
ExternallyHostedApk.prototype['usesFeatures'] = undefined;

/**
 * The permissions requested by this APK.
 * @member {Array.<module:model/ExternallyHostedApkUsesPermission>} usesPermissions
 */
ExternallyHostedApk.prototype['usesPermissions'] = undefined;

/**
 * The version code of this APK.
 * @member {Number} versionCode
 */
ExternallyHostedApk.prototype['versionCode'] = undefined;

/**
 * The version name of this APK.
 * @member {String} versionName
 */
ExternallyHostedApk.prototype['versionName'] = undefined;






export default ExternallyHostedApk;

