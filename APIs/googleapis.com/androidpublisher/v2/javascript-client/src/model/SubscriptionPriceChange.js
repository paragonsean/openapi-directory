/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The SubscriptionPriceChange model module.
 * @module model/SubscriptionPriceChange
 * @version v2
 */
class SubscriptionPriceChange {
    /**
     * Constructs a new <code>SubscriptionPriceChange</code>.
     * Contains the price change information for a subscription that can be used to control the user journey for the price change in the app. This can be in the form of seeking confirmation from the user or tailoring the experience for a successful conversion.
     * @alias module:model/SubscriptionPriceChange
     */
    constructor() { 
        
        SubscriptionPriceChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionPriceChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionPriceChange} obj Optional instance to populate.
     * @return {module:model/SubscriptionPriceChange} The populated <code>SubscriptionPriceChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionPriceChange();

            if (data.hasOwnProperty('newPrice')) {
                obj['newPrice'] = Price.constructFromObject(data['newPrice']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionPriceChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionPriceChange</code>.
     */
    static validateJSON(data) {
        // validate the optional field `newPrice`
        if (data['newPrice']) { // data not null
          Price.validateJSON(data['newPrice']);
        }

        return true;
    }


}



/**
 * @member {module:model/Price} newPrice
 */
SubscriptionPriceChange.prototype['newPrice'] = undefined;

/**
 * The current state of the price change. Possible values are:   - Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek confirmation from the user using the In-App API.  - Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.
 * @member {Number} state
 */
SubscriptionPriceChange.prototype['state'] = undefined;






export default SubscriptionPriceChange;

