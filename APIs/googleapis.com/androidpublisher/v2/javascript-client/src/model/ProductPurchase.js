/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductPurchase model module.
 * @module model/ProductPurchase
 * @version v2
 */
class ProductPurchase {
    /**
     * Constructs a new <code>ProductPurchase</code>.
     * A ProductPurchase resource indicates the status of a user&#39;s inapp product purchase.
     * @alias module:model/ProductPurchase
     */
    constructor() { 
        
        ProductPurchase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'androidpublisher#productPurchase';
    }

    /**
     * Constructs a <code>ProductPurchase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductPurchase} obj Optional instance to populate.
     * @return {module:model/ProductPurchase} The populated <code>ProductPurchase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductPurchase();

            if (data.hasOwnProperty('consumptionState')) {
                obj['consumptionState'] = ApiClient.convertToType(data['consumptionState'], 'Number');
            }
            if (data.hasOwnProperty('developerPayload')) {
                obj['developerPayload'] = ApiClient.convertToType(data['developerPayload'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('purchaseState')) {
                obj['purchaseState'] = ApiClient.convertToType(data['purchaseState'], 'Number');
            }
            if (data.hasOwnProperty('purchaseTimeMillis')) {
                obj['purchaseTimeMillis'] = ApiClient.convertToType(data['purchaseTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('purchaseType')) {
                obj['purchaseType'] = ApiClient.convertToType(data['purchaseType'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductPurchase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductPurchase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['developerPayload'] && !(typeof data['developerPayload'] === 'string' || data['developerPayload'] instanceof String)) {
            throw new Error("Expected the field `developerPayload` to be a primitive type in the JSON string but got " + data['developerPayload']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['purchaseTimeMillis'] && !(typeof data['purchaseTimeMillis'] === 'string' || data['purchaseTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `purchaseTimeMillis` to be a primitive type in the JSON string but got " + data['purchaseTimeMillis']);
        }

        return true;
    }


}



/**
 * The consumption state of the inapp product. Possible values are:   - Yet to be consumed  - Consumed
 * @member {Number} consumptionState
 */
ProductPurchase.prototype['consumptionState'] = undefined;

/**
 * A developer-specified string that contains supplemental information about an order.
 * @member {String} developerPayload
 */
ProductPurchase.prototype['developerPayload'] = undefined;

/**
 * This kind represents an inappPurchase object in the androidpublisher service.
 * @member {String} kind
 * @default 'androidpublisher#productPurchase'
 */
ProductPurchase.prototype['kind'] = 'androidpublisher#productPurchase';

/**
 * The order id associated with the purchase of the inapp product.
 * @member {String} orderId
 */
ProductPurchase.prototype['orderId'] = undefined;

/**
 * The purchase state of the order. Possible values are:   - Purchased  - Canceled  - Pending
 * @member {Number} purchaseState
 */
ProductPurchase.prototype['purchaseState'] = undefined;

/**
 * The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).
 * @member {String} purchaseTimeMillis
 */
ProductPurchase.prototype['purchaseTimeMillis'] = undefined;

/**
 * The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are:   - Test (i.e. purchased from a license testing account)  - Promo (i.e. purchased using a promo code)  - Rewarded (i.e. from watching a video ad instead of paying)
 * @member {Number} purchaseType
 */
ProductPurchase.prototype['purchaseType'] = undefined;






export default ProductPurchase;

