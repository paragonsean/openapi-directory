/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPurchase::OAISubscriptionPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPurchase::OAISubscriptionPurchase() {
    this->initializeModel();
}

OAISubscriptionPurchase::~OAISubscriptionPurchase() {}

void OAISubscriptionPurchase::initializeModel() {

    m_auto_renewing_isSet = false;
    m_auto_renewing_isValid = false;

    m_initiation_timestamp_msec_isSet = false;
    m_initiation_timestamp_msec_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_valid_until_timestamp_msec_isSet = false;
    m_valid_until_timestamp_msec_isValid = false;
}

void OAISubscriptionPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPurchase::fromJsonObject(QJsonObject json) {

    m_auto_renewing_isValid = ::OpenAPI::fromJsonValue(m_auto_renewing, json[QString("autoRenewing")]);
    m_auto_renewing_isSet = !json[QString("autoRenewing")].isNull() && m_auto_renewing_isValid;

    m_initiation_timestamp_msec_isValid = ::OpenAPI::fromJsonValue(m_initiation_timestamp_msec, json[QString("initiationTimestampMsec")]);
    m_initiation_timestamp_msec_isSet = !json[QString("initiationTimestampMsec")].isNull() && m_initiation_timestamp_msec_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_valid_until_timestamp_msec_isValid = ::OpenAPI::fromJsonValue(m_valid_until_timestamp_msec, json[QString("validUntilTimestampMsec")]);
    m_valid_until_timestamp_msec_isSet = !json[QString("validUntilTimestampMsec")].isNull() && m_valid_until_timestamp_msec_isValid;
}

QString OAISubscriptionPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renewing_isSet) {
        obj.insert(QString("autoRenewing"), ::OpenAPI::toJsonValue(m_auto_renewing));
    }
    if (m_initiation_timestamp_msec_isSet) {
        obj.insert(QString("initiationTimestampMsec"), ::OpenAPI::toJsonValue(m_initiation_timestamp_msec));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_valid_until_timestamp_msec_isSet) {
        obj.insert(QString("validUntilTimestampMsec"), ::OpenAPI::toJsonValue(m_valid_until_timestamp_msec));
    }
    return obj;
}

bool OAISubscriptionPurchase::isAutoRenewing() const {
    return m_auto_renewing;
}
void OAISubscriptionPurchase::setAutoRenewing(const bool &auto_renewing) {
    m_auto_renewing = auto_renewing;
    m_auto_renewing_isSet = true;
}

bool OAISubscriptionPurchase::is_auto_renewing_Set() const{
    return m_auto_renewing_isSet;
}

bool OAISubscriptionPurchase::is_auto_renewing_Valid() const{
    return m_auto_renewing_isValid;
}

QString OAISubscriptionPurchase::getInitiationTimestampMsec() const {
    return m_initiation_timestamp_msec;
}
void OAISubscriptionPurchase::setInitiationTimestampMsec(const QString &initiation_timestamp_msec) {
    m_initiation_timestamp_msec = initiation_timestamp_msec;
    m_initiation_timestamp_msec_isSet = true;
}

bool OAISubscriptionPurchase::is_initiation_timestamp_msec_Set() const{
    return m_initiation_timestamp_msec_isSet;
}

bool OAISubscriptionPurchase::is_initiation_timestamp_msec_Valid() const{
    return m_initiation_timestamp_msec_isValid;
}

QString OAISubscriptionPurchase::getKind() const {
    return m_kind;
}
void OAISubscriptionPurchase::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISubscriptionPurchase::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISubscriptionPurchase::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISubscriptionPurchase::getValidUntilTimestampMsec() const {
    return m_valid_until_timestamp_msec;
}
void OAISubscriptionPurchase::setValidUntilTimestampMsec(const QString &valid_until_timestamp_msec) {
    m_valid_until_timestamp_msec = valid_until_timestamp_msec;
    m_valid_until_timestamp_msec_isSet = true;
}

bool OAISubscriptionPurchase::is_valid_until_timestamp_msec_Set() const{
    return m_valid_until_timestamp_msec_isSet;
}

bool OAISubscriptionPurchase::is_valid_until_timestamp_msec_Valid() const{
    return m_valid_until_timestamp_msec_isValid;
}

bool OAISubscriptionPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renewing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiation_timestamp_msec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_until_timestamp_msec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
