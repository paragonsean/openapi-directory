# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renewing: bool=None, initiation_timestamp_msec: str=None, kind: str='androidpublisher#subscriptionPurchase', valid_until_timestamp_msec: str=None):
        """SubscriptionPurchase - a model defined in OpenAPI

        :param auto_renewing: The auto_renewing of this SubscriptionPurchase.
        :param initiation_timestamp_msec: The initiation_timestamp_msec of this SubscriptionPurchase.
        :param kind: The kind of this SubscriptionPurchase.
        :param valid_until_timestamp_msec: The valid_until_timestamp_msec of this SubscriptionPurchase.
        """
        self.openapi_types = {
            'auto_renewing': bool,
            'initiation_timestamp_msec': str,
            'kind': str,
            'valid_until_timestamp_msec': str
        }

        self.attribute_map = {
            'auto_renewing': 'autoRenewing',
            'initiation_timestamp_msec': 'initiationTimestampMsec',
            'kind': 'kind',
            'valid_until_timestamp_msec': 'validUntilTimestampMsec'
        }

        self._auto_renewing = auto_renewing
        self._initiation_timestamp_msec = initiation_timestamp_msec
        self._kind = kind
        self._valid_until_timestamp_msec = valid_until_timestamp_msec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPurchase of this SubscriptionPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renewing(self):
        """Gets the auto_renewing of this SubscriptionPurchase.

        Whether the subscription will automatically be renewed when it reaches its current expiry time.

        :return: The auto_renewing of this SubscriptionPurchase.
        :rtype: bool
        """
        return self._auto_renewing

    @auto_renewing.setter
    def auto_renewing(self, auto_renewing):
        """Sets the auto_renewing of this SubscriptionPurchase.

        Whether the subscription will automatically be renewed when it reaches its current expiry time.

        :param auto_renewing: The auto_renewing of this SubscriptionPurchase.
        :type auto_renewing: bool
        """

        self._auto_renewing = auto_renewing

    @property
    def initiation_timestamp_msec(self):
        """Gets the initiation_timestamp_msec of this SubscriptionPurchase.

        Time at which the subscription was granted, in milliseconds since the Epoch.

        :return: The initiation_timestamp_msec of this SubscriptionPurchase.
        :rtype: str
        """
        return self._initiation_timestamp_msec

    @initiation_timestamp_msec.setter
    def initiation_timestamp_msec(self, initiation_timestamp_msec):
        """Sets the initiation_timestamp_msec of this SubscriptionPurchase.

        Time at which the subscription was granted, in milliseconds since the Epoch.

        :param initiation_timestamp_msec: The initiation_timestamp_msec of this SubscriptionPurchase.
        :type initiation_timestamp_msec: str
        """

        self._initiation_timestamp_msec = initiation_timestamp_msec

    @property
    def kind(self):
        """Gets the kind of this SubscriptionPurchase.

        This kind represents a subscriptionPurchase object in the androidpublisher service.

        :return: The kind of this SubscriptionPurchase.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SubscriptionPurchase.

        This kind represents a subscriptionPurchase object in the androidpublisher service.

        :param kind: The kind of this SubscriptionPurchase.
        :type kind: str
        """

        self._kind = kind

    @property
    def valid_until_timestamp_msec(self):
        """Gets the valid_until_timestamp_msec of this SubscriptionPurchase.

        Time at which the subscription will expire, in milliseconds since the Epoch.

        :return: The valid_until_timestamp_msec of this SubscriptionPurchase.
        :rtype: str
        """
        return self._valid_until_timestamp_msec

    @valid_until_timestamp_msec.setter
    def valid_until_timestamp_msec(self, valid_until_timestamp_msec):
        """Sets the valid_until_timestamp_msec of this SubscriptionPurchase.

        Time at which the subscription will expire, in milliseconds since the Epoch.

        :param valid_until_timestamp_msec: The valid_until_timestamp_msec of this SubscriptionPurchase.
        :type valid_until_timestamp_msec: str
        """

        self._valid_until_timestamp_msec = valid_until_timestamp_msec
