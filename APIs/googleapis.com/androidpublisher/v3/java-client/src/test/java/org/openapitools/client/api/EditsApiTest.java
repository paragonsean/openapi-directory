/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Apk;
import org.openapitools.client.model.ApksAddExternallyHostedRequest;
import org.openapitools.client.model.ApksAddExternallyHostedResponse;
import org.openapitools.client.model.ApksListResponse;
import org.openapitools.client.model.AppDetails;
import org.openapitools.client.model.AppEdit;
import org.openapitools.client.model.Bundle;
import org.openapitools.client.model.BundlesListResponse;
import org.openapitools.client.model.DeobfuscationFilesUploadResponse;
import org.openapitools.client.model.ExpansionFile;
import org.openapitools.client.model.ExpansionFilesUploadResponse;
import org.openapitools.client.model.ImagesDeleteAllResponse;
import org.openapitools.client.model.ImagesListResponse;
import org.openapitools.client.model.ImagesUploadResponse;
import org.openapitools.client.model.Listing;
import org.openapitools.client.model.ListingsListResponse;
import org.openapitools.client.model.Testers;
import org.openapitools.client.model.Track;
import org.openapitools.client.model.TrackConfig;
import org.openapitools.client.model.TrackCountryAvailability;
import org.openapitools.client.model.TracksListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EditsApi
 */
@Disabled
public class EditsApiTest {

    private final EditsApi api = new EditsApi();

    /**
     * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksAddexternallyhostedTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApksAddExternallyHostedRequest apksAddExternallyHostedRequest = null;
        ApksAddExternallyHostedResponse response = api.androidpublisherEditsApksAddexternallyhosted(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, apksAddExternallyHostedRequest);
        // TODO: test validations
    }

    /**
     * Lists all current APKs of the app and edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ApksListResponse response = api.androidpublisherEditsApksList(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Uploads an APK and adds to the current edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsApksUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Apk response = api.androidpublisherEditsApksUpload(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all current Android App Bundles of the app and edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsBundlesListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BundlesListResponse response = api.androidpublisherEditsBundlesList(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsBundlesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean ackBundleInstallationWarning = null;
        String deviceTierConfigId = null;
        Bundle response = api.androidpublisherEditsBundlesUpload(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, ackBundleInstallationWarning, deviceTierConfigId);
        // TODO: test validations
    }

    /**
     * Commits an app edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsCommitTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean changesNotSentForReview = null;
        AppEdit response = api.androidpublisherEditsCommit(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, changesNotSentForReview);
        // TODO: test validations
    }

    /**
     * Gets country availability.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsCountryavailabilityGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TrackCountryAvailability response = api.androidpublisherEditsCountryavailabilityGet(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes an app edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherEditsDelete(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Uploads a new deobfuscation file and attaches to the specified APK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDeobfuscationfilesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String deobfuscationFileType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeobfuscationFilesUploadResponse response = api.androidpublisherEditsDeobfuscationfilesUpload(packageName, editId, apkVersionCode, deobfuscationFileType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets details of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppDetails response = api.androidpublisherEditsDetailsGet(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patches details of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppDetails appDetails = null;
        AppDetails response = api.androidpublisherEditsDetailsPatch(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appDetails);
        // TODO: test validations
    }

    /**
     * Updates details of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsDetailsUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppDetails appDetails = null;
        AppDetails response = api.androidpublisherEditsDetailsUpdate(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appDetails);
        // TODO: test validations
    }

    /**
     * Fetches the expansion file configuration for the specified APK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesGet(packageName, editId, apkVersionCode, expansionFileType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patches the APK&#39;s expansion file configuration to reference another APK&#39;s expansion file. To add a new expansion file use the Upload method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExpansionFile expansionFile = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesPatch(packageName, editId, apkVersionCode, expansionFileType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, expansionFile);
        // TODO: test validations
    }

    /**
     * Updates the APK&#39;s expansion file configuration to reference another APK&#39;s expansion file. To add a new expansion file use the Upload method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExpansionFile expansionFile = null;
        ExpansionFile response = api.androidpublisherEditsExpansionfilesUpdate(packageName, editId, apkVersionCode, expansionFileType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, expansionFile);
        // TODO: test validations
    }

    /**
     * Uploads a new expansion file and attaches to the specified APK.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsExpansionfilesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        Integer apkVersionCode = null;
        String expansionFileType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExpansionFilesUploadResponse response = api.androidpublisherEditsExpansionfilesUpload(packageName, editId, apkVersionCode, expansionFileType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets an app edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppEdit response = api.androidpublisherEditsGet(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes the image (specified by id) from the edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String imageId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherEditsImagesDelete(packageName, editId, language, imageType, imageId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes all images for the specified language and image type. Returns an empty response if no images are found.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesDeleteallTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImagesDeleteAllResponse response = api.androidpublisherEditsImagesDeleteall(packageName, editId, language, imageType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all images. The response may be empty.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImagesListResponse response = api.androidpublisherEditsImagesList(packageName, editId, language, imageType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Uploads an image of the specified language and image type, and adds to the edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsImagesUploadTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String imageType = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImagesUploadResponse response = api.androidpublisherEditsImagesUpload(packageName, editId, language, imageType, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new edit for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsInsertTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppEdit appEdit = null;
        AppEdit response = api.androidpublisherEditsInsert(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, appEdit);
        // TODO: test validations
    }

    /**
     * Deletes a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsDeleteTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherEditsListingsDelete(packageName, editId, language, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes all store listings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsDeleteallTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherEditsListingsDeleteall(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Listing response = api.androidpublisherEditsListingsGet(packageName, editId, language, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all localized store listings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListingsListResponse response = api.androidpublisherEditsListingsList(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patches a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Listing listing = null;
        Listing response = api.androidpublisherEditsListingsPatch(packageName, editId, language, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listing);
        // TODO: test validations
    }

    /**
     * Creates or updates a localized store listing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsListingsUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String language = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Listing listing = null;
        Listing response = api.androidpublisherEditsListingsUpdate(packageName, editId, language, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, listing);
        // TODO: test validations
    }

    /**
     * Gets testers. Note: Testers resource does not support email lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Testers response = api.androidpublisherEditsTestersGet(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patches testers. Note: Testers resource does not support email lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Testers testers = null;
        Testers response = api.androidpublisherEditsTestersPatch(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testers);
        // TODO: test validations
    }

    /**
     * Updates testers. Note: Testers resource does not support email lists.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTestersUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Testers testers = null;
        Testers response = api.androidpublisherEditsTestersUpdate(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testers);
        // TODO: test validations
    }

    /**
     * Creates a new track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksCreateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TrackConfig trackConfig = null;
        Track response = api.androidpublisherEditsTracksCreate(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, trackConfig);
        // TODO: test validations
    }

    /**
     * Gets a track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksGetTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Track response = api.androidpublisherEditsTracksGet(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all tracks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksListTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TracksListResponse response = api.androidpublisherEditsTracksList(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Patches a track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksPatchTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Track track2 = null;
        Track response = api.androidpublisherEditsTracksPatch(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, track2);
        // TODO: test validations
    }

    /**
     * Updates a track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsTracksUpdateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String track = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Track track2 = null;
        Track response = api.androidpublisherEditsTracksUpdate(packageName, editId, track, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, track2);
        // TODO: test validations
    }

    /**
     * Validates an app edit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherEditsValidateTest() throws ApiException {
        String packageName = null;
        String editId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AppEdit response = api.androidpublisherEditsValidate(packageName, editId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
