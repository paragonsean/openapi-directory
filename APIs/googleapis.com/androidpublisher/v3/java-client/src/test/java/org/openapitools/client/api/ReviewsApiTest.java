/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.ReviewsListResponse;
import org.openapitools.client.model.ReviewsReplyRequest;
import org.openapitools.client.model.ReviewsReplyResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReviewsApi
 */
@Disabled
public class ReviewsApiTest {

    private final ReviewsApi api = new ReviewsApi();

    /**
     * Gets a single review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherReviewsGetTest() throws ApiException {
        String packageName = null;
        String reviewId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String translationLanguage = null;
        Review response = api.androidpublisherReviewsGet(packageName, reviewId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, translationLanguage);
        // TODO: test validations
    }

    /**
     * Lists all reviews.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherReviewsListTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        Integer startIndex = null;
        String token = null;
        String translationLanguage = null;
        ReviewsListResponse response = api.androidpublisherReviewsList(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, startIndex, token, translationLanguage);
        // TODO: test validations
    }

    /**
     * Replies to a single review, or updates an existing reply.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherReviewsReplyTest() throws ApiException {
        String packageName = null;
        String reviewId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ReviewsReplyRequest reviewsReplyRequest = null;
        ReviewsReplyResponse response = api.androidpublisherReviewsReply(packageName, reviewId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, reviewsReplyRequest);
        // TODO: test validations
    }

}
