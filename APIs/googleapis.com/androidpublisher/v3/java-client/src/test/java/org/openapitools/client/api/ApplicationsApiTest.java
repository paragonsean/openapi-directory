/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeviceTierConfig;
import org.openapitools.client.model.ListDeviceTierConfigsResponse;
import org.openapitools.client.model.SafetyLabelsUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationsApi
 */
@Disabled
public class ApplicationsApiTest {

    private final ApplicationsApi api = new ApplicationsApi();

    /**
     * Writes the Safety Labels declaration of an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApplicationsDataSafetyTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SafetyLabelsUpdateRequest safetyLabelsUpdateRequest = null;
        Object response = api.androidpublisherApplicationsDataSafety(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, safetyLabelsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Creates a new device tier config for an app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApplicationsDeviceTierConfigsCreateTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowUnknownDevices = null;
        DeviceTierConfig deviceTierConfig = null;
        DeviceTierConfig response = api.androidpublisherApplicationsDeviceTierConfigsCreate(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowUnknownDevices, deviceTierConfig);
        // TODO: test validations
    }

    /**
     * Returns a particular device tier config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApplicationsDeviceTierConfigsGetTest() throws ApiException {
        String packageName = null;
        String deviceTierConfigId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeviceTierConfig response = api.androidpublisherApplicationsDeviceTierConfigsGet(packageName, deviceTierConfigId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns created device tier configs, ordered by descending creation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApplicationsDeviceTierConfigsListTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListDeviceTierConfigsResponse response = api.androidpublisherApplicationsDeviceTierConfigsList(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

}
