/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActivateBasePlanRequest;
import org.openapitools.client.model.ActivateSubscriptionOfferRequest;
import org.openapitools.client.model.BatchGetSubscriptionOffersRequest;
import org.openapitools.client.model.BatchGetSubscriptionOffersResponse;
import org.openapitools.client.model.BatchGetSubscriptionsResponse;
import org.openapitools.client.model.BatchMigrateBasePlanPricesRequest;
import org.openapitools.client.model.BatchMigrateBasePlanPricesResponse;
import org.openapitools.client.model.BatchUpdateBasePlanStatesRequest;
import org.openapitools.client.model.BatchUpdateBasePlanStatesResponse;
import org.openapitools.client.model.BatchUpdateSubscriptionOfferStatesRequest;
import org.openapitools.client.model.BatchUpdateSubscriptionOfferStatesResponse;
import org.openapitools.client.model.BatchUpdateSubscriptionOffersRequest;
import org.openapitools.client.model.BatchUpdateSubscriptionOffersResponse;
import org.openapitools.client.model.BatchUpdateSubscriptionsRequest;
import org.openapitools.client.model.BatchUpdateSubscriptionsResponse;
import org.openapitools.client.model.ConvertRegionPricesRequest;
import org.openapitools.client.model.ConvertRegionPricesResponse;
import org.openapitools.client.model.DeactivateBasePlanRequest;
import org.openapitools.client.model.DeactivateSubscriptionOfferRequest;
import org.openapitools.client.model.ListSubscriptionOffersResponse;
import org.openapitools.client.model.ListSubscriptionsResponse;
import org.openapitools.client.model.MigrateBasePlanPricesRequest;
import org.openapitools.client.model.Subscription;
import org.openapitools.client.model.SubscriptionOffer;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonetizationApi
 */
@Disabled
public class MonetizationApiTest {

    private final MonetizationApi api = new MonetizationApi();

    /**
     * Calculates the region prices, using today&#39;s exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationConvertRegionPricesTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ConvertRegionPricesRequest convertRegionPricesRequest = null;
        ConvertRegionPricesResponse response = api.androidpublisherMonetizationConvertRegionPrices(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, convertRegionPricesRequest);
        // TODO: test validations
    }

    /**
     * Deprecated: subscription archiving is not supported.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsArchiveTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsArchive(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Activates a base plan. Once activated, base plans will be available to new subscribers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansActivateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ActivateBasePlanRequest activateBasePlanRequest = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsBasePlansActivate(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, activateBasePlanRequest);
        // TODO: test validations
    }

    /**
     * Batch variant of the MigrateBasePlanPrices endpoint. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePricesTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchMigrateBasePlanPricesRequest batchMigrateBasePlanPricesRequest = null;
        BatchMigrateBasePlanPricesResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePrices(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchMigrateBasePlanPricesRequest);
        // TODO: test validations
    }

    /**
     * Activates or deactivates base plans across one or multiple subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStatesTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateBasePlanStatesRequest batchUpdateBasePlanStatesRequest = null;
        BatchUpdateBasePlanStatesResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStates(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateBasePlanStatesRequest);
        // TODO: test validations
    }

    /**
     * Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansDeactivateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeactivateBasePlanRequest deactivateBasePlanRequest = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsBasePlansDeactivate(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deactivateBasePlanRequest);
        // TODO: test validations
    }

    /**
     * Deletes a base plan. Can only be done for draft base plans. This action is irreversible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansDeleteTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherMonetizationSubscriptionsBasePlansDelete(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansMigratePricesTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        MigrateBasePlanPricesRequest migrateBasePlanPricesRequest = null;
        Object response = api.androidpublisherMonetizationSubscriptionsBasePlansMigratePrices(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, migrateBasePlanPricesRequest);
        // TODO: test validations
    }

    /**
     * Activates a subscription offer. Once activated, subscription offers will be available to new subscribers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersActivateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String offerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ActivateSubscriptionOfferRequest activateSubscriptionOfferRequest = null;
        SubscriptionOffer response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersActivate(packageName, productId, basePlanId, offerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, activateSubscriptionOfferRequest);
        // TODO: test validations
    }

    /**
     * Reads one or more subscription offers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGetTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchGetSubscriptionOffersRequest batchGetSubscriptionOffersRequest = null;
        BatchGetSubscriptionOffersResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchGetSubscriptionOffersRequest);
        // TODO: test validations
    }

    /**
     * Updates a batch of subscription offers. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateSubscriptionOffersRequest batchUpdateSubscriptionOffersRequest = null;
        BatchUpdateSubscriptionOffersResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateSubscriptionOffersRequest);
        // TODO: test validations
    }

    /**
     * Updates a batch of subscription offer states. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStatesTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateSubscriptionOfferStatesRequest batchUpdateSubscriptionOfferStatesRequest = null;
        BatchUpdateSubscriptionOfferStatesResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateSubscriptionOfferStatesRequest);
        // TODO: test validations
    }

    /**
     * Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersCreateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String offerId = null;
        String regionsVersionVersion = null;
        SubscriptionOffer subscriptionOffer = null;
        SubscriptionOffer response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersCreate(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, offerId, regionsVersionVersion, subscriptionOffer);
        // TODO: test validations
    }

    /**
     * Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String offerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DeactivateSubscriptionOfferRequest deactivateSubscriptionOfferRequest = null;
        SubscriptionOffer response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate(packageName, productId, basePlanId, offerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, deactivateSubscriptionOfferRequest);
        // TODO: test validations
    }

    /**
     * Deletes a subscription offer. Can only be done for draft offers. This action is irreversible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersDeleteTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String offerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherMonetizationSubscriptionsBasePlansOffersDelete(packageName, productId, basePlanId, offerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Reads a single offer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersGetTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String offerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubscriptionOffer response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersGet(packageName, productId, basePlanId, offerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all offers under a given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersListTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSubscriptionOffersResponse response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersList(packageName, productId, basePlanId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates an existing subscription offer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBasePlansOffersPatchTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String basePlanId = null;
        String offerId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String latencyTolerance = null;
        String regionsVersionVersion = null;
        String updateMask = null;
        SubscriptionOffer subscriptionOffer = null;
        SubscriptionOffer response = api.androidpublisherMonetizationSubscriptionsBasePlansOffersPatch(packageName, productId, basePlanId, offerId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, latencyTolerance, regionsVersionVersion, updateMask, subscriptionOffer);
        // TODO: test validations
    }

    /**
     * Reads one or more subscriptions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBatchGetTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        List<String> productIds = null;
        BatchGetSubscriptionsResponse response = api.androidpublisherMonetizationSubscriptionsBatchGet(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, productIds);
        // TODO: test validations
    }

    /**
     * Updates a batch of subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsBatchUpdateTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateSubscriptionsRequest batchUpdateSubscriptionsRequest = null;
        BatchUpdateSubscriptionsResponse response = api.androidpublisherMonetizationSubscriptionsBatchUpdate(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateSubscriptionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new subscription. Newly added base plans will remain in draft state until activated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsCreateTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String productId = null;
        String regionsVersionVersion = null;
        Subscription subscription = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsCreate(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, productId, regionsVersionVersion, subscription);
        // TODO: test validations
    }

    /**
     * Deletes a subscription. A subscription can only be deleted if it has never had a base plan published.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsDeleteTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.androidpublisherMonetizationSubscriptionsDelete(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Reads a single subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsGetTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsGet(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all subscriptions under a given app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsListTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        Boolean showArchived = null;
        ListSubscriptionsResponse response = api.androidpublisherMonetizationSubscriptionsList(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, showArchived);
        // TODO: test validations
    }

    /**
     * Updates an existing subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherMonetizationSubscriptionsPatchTest() throws ApiException {
        String packageName = null;
        String productId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean allowMissing = null;
        String latencyTolerance = null;
        String regionsVersionVersion = null;
        String updateMask = null;
        Subscription subscription = null;
        Subscription response = api.androidpublisherMonetizationSubscriptionsPatch(packageName, productId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, allowMissing, latencyTolerance, regionsVersionVersion, updateMask, subscription);
        // TODO: test validations
    }

}
