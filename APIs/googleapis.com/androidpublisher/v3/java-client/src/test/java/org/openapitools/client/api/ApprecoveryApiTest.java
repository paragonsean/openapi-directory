/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTargetingRequest;
import org.openapitools.client.model.AppRecoveryAction;
import org.openapitools.client.model.CreateDraftAppRecoveryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApprecoveryApi
 */
@Disabled
public class ApprecoveryApiTest {

    private final ApprecoveryApi api = new ApprecoveryApi();

    /**
     * Incrementally update targeting for a recovery action. Note that only the criteria selected during the creation of recovery action can be expanded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApprecoveryAddTargetingTest() throws ApiException {
        String packageName = null;
        String appRecoveryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddTargetingRequest addTargetingRequest = null;
        Object response = api.androidpublisherApprecoveryAddTargeting(packageName, appRecoveryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addTargetingRequest);
        // TODO: test validations
    }

    /**
     * Cancel an already executing app recovery action. Note that this action changes status of the recovery action to CANCELED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApprecoveryCancelTest() throws ApiException {
        String packageName = null;
        String appRecoveryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.androidpublisherApprecoveryCancel(packageName, appRecoveryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Create an app recovery action with recovery status as DRAFT. Note that this action does not execute the recovery action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApprecoveryCreateTest() throws ApiException {
        String packageName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateDraftAppRecoveryRequest createDraftAppRecoveryRequest = null;
        AppRecoveryAction response = api.androidpublisherApprecoveryCreate(packageName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createDraftAppRecoveryRequest);
        // TODO: test validations
    }

    /**
     * Deploy an already created app recovery action with recovery status DRAFT. Note that this action activates the recovery action for all targeted users and changes its status to ACTIVE.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void androidpublisherApprecoveryDeployTest() throws ApiException {
        String packageName = null;
        String appRecoveryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.androidpublisherApprecoveryDeploy(packageName, appRecoveryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
