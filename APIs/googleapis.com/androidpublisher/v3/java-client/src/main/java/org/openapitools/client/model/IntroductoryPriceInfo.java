/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the introductory price information for a subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntroductoryPriceInfo {
  public static final String SERIALIZED_NAME_INTRODUCTORY_PRICE_AMOUNT_MICROS = "introductoryPriceAmountMicros";
  @SerializedName(SERIALIZED_NAME_INTRODUCTORY_PRICE_AMOUNT_MICROS)
  private String introductoryPriceAmountMicros;

  public static final String SERIALIZED_NAME_INTRODUCTORY_PRICE_CURRENCY_CODE = "introductoryPriceCurrencyCode";
  @SerializedName(SERIALIZED_NAME_INTRODUCTORY_PRICE_CURRENCY_CODE)
  private String introductoryPriceCurrencyCode;

  public static final String SERIALIZED_NAME_INTRODUCTORY_PRICE_CYCLES = "introductoryPriceCycles";
  @SerializedName(SERIALIZED_NAME_INTRODUCTORY_PRICE_CYCLES)
  private Integer introductoryPriceCycles;

  public static final String SERIALIZED_NAME_INTRODUCTORY_PRICE_PERIOD = "introductoryPricePeriod";
  @SerializedName(SERIALIZED_NAME_INTRODUCTORY_PRICE_PERIOD)
  private String introductoryPricePeriod;

  public IntroductoryPriceInfo() {
  }

  public IntroductoryPriceInfo introductoryPriceAmountMicros(String introductoryPriceAmountMicros) {
    this.introductoryPriceAmountMicros = introductoryPriceAmountMicros;
    return this;
  }

  /**
   * Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is â‚¬1.99, price_amount_micros is 1990000.
   * @return introductoryPriceAmountMicros
   */
  @javax.annotation.Nullable
  public String getIntroductoryPriceAmountMicros() {
    return introductoryPriceAmountMicros;
  }

  public void setIntroductoryPriceAmountMicros(String introductoryPriceAmountMicros) {
    this.introductoryPriceAmountMicros = introductoryPriceAmountMicros;
  }


  public IntroductoryPriceInfo introductoryPriceCurrencyCode(String introductoryPriceCurrencyCode) {
    this.introductoryPriceCurrencyCode = introductoryPriceCurrencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \&quot;GBP\&quot;.
   * @return introductoryPriceCurrencyCode
   */
  @javax.annotation.Nullable
  public String getIntroductoryPriceCurrencyCode() {
    return introductoryPriceCurrencyCode;
  }

  public void setIntroductoryPriceCurrencyCode(String introductoryPriceCurrencyCode) {
    this.introductoryPriceCurrencyCode = introductoryPriceCurrencyCode;
  }


  public IntroductoryPriceInfo introductoryPriceCycles(Integer introductoryPriceCycles) {
    this.introductoryPriceCycles = introductoryPriceCycles;
    return this;
  }

  /**
   * The number of billing period to offer introductory pricing.
   * @return introductoryPriceCycles
   */
  @javax.annotation.Nullable
  public Integer getIntroductoryPriceCycles() {
    return introductoryPriceCycles;
  }

  public void setIntroductoryPriceCycles(Integer introductoryPriceCycles) {
    this.introductoryPriceCycles = introductoryPriceCycles;
  }


  public IntroductoryPriceInfo introductoryPricePeriod(String introductoryPricePeriod) {
    this.introductoryPricePeriod = introductoryPricePeriod;
    return this;
  }

  /**
   * Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) \&quot;P1W\&quot; (one week), \&quot;P1M\&quot; (one month), \&quot;P3M\&quot; (three months), \&quot;P6M\&quot; (six months), and \&quot;P1Y\&quot; (one year).
   * @return introductoryPricePeriod
   */
  @javax.annotation.Nullable
  public String getIntroductoryPricePeriod() {
    return introductoryPricePeriod;
  }

  public void setIntroductoryPricePeriod(String introductoryPricePeriod) {
    this.introductoryPricePeriod = introductoryPricePeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntroductoryPriceInfo introductoryPriceInfo = (IntroductoryPriceInfo) o;
    return Objects.equals(this.introductoryPriceAmountMicros, introductoryPriceInfo.introductoryPriceAmountMicros) &&
        Objects.equals(this.introductoryPriceCurrencyCode, introductoryPriceInfo.introductoryPriceCurrencyCode) &&
        Objects.equals(this.introductoryPriceCycles, introductoryPriceInfo.introductoryPriceCycles) &&
        Objects.equals(this.introductoryPricePeriod, introductoryPriceInfo.introductoryPricePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(introductoryPriceAmountMicros, introductoryPriceCurrencyCode, introductoryPriceCycles, introductoryPricePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntroductoryPriceInfo {\n");
    sb.append("    introductoryPriceAmountMicros: ").append(toIndentedString(introductoryPriceAmountMicros)).append("\n");
    sb.append("    introductoryPriceCurrencyCode: ").append(toIndentedString(introductoryPriceCurrencyCode)).append("\n");
    sb.append("    introductoryPriceCycles: ").append(toIndentedString(introductoryPriceCycles)).append("\n");
    sb.append("    introductoryPricePeriod: ").append(toIndentedString(introductoryPricePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("introductoryPriceAmountMicros");
    openapiFields.add("introductoryPriceCurrencyCode");
    openapiFields.add("introductoryPriceCycles");
    openapiFields.add("introductoryPricePeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntroductoryPriceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntroductoryPriceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntroductoryPriceInfo is not found in the empty JSON string", IntroductoryPriceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntroductoryPriceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntroductoryPriceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("introductoryPriceAmountMicros") != null && !jsonObj.get("introductoryPriceAmountMicros").isJsonNull()) && !jsonObj.get("introductoryPriceAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `introductoryPriceAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("introductoryPriceAmountMicros").toString()));
      }
      if ((jsonObj.get("introductoryPriceCurrencyCode") != null && !jsonObj.get("introductoryPriceCurrencyCode").isJsonNull()) && !jsonObj.get("introductoryPriceCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `introductoryPriceCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("introductoryPriceCurrencyCode").toString()));
      }
      if ((jsonObj.get("introductoryPricePeriod") != null && !jsonObj.get("introductoryPricePeriod").isJsonNull()) && !jsonObj.get("introductoryPricePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `introductoryPricePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("introductoryPricePeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntroductoryPriceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntroductoryPriceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntroductoryPriceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntroductoryPriceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<IntroductoryPriceInfo>() {
           @Override
           public void write(JsonWriter out, IntroductoryPriceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntroductoryPriceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntroductoryPriceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntroductoryPriceInfo
   * @throws IOException if the JSON string is invalid with respect to IntroductoryPriceInfo
   */
  public static IntroductoryPriceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntroductoryPriceInfo.class);
  }

  /**
   * Convert an instance of IntroductoryPriceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

