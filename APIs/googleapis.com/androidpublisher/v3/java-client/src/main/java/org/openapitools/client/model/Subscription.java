/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BasePlan;
import org.openapitools.client.model.SubscriptionListing;
import org.openapitools.client.model.SubscriptionTaxAndComplianceSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single subscription for an app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_BASE_PLANS = "basePlans";
  @SerializedName(SERIALIZED_NAME_BASE_PLANS)
  private List<BasePlan> basePlans = new ArrayList<>();

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private List<SubscriptionListing> listings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_TAX_AND_COMPLIANCE_SETTINGS = "taxAndComplianceSettings";
  @SerializedName(SERIALIZED_NAME_TAX_AND_COMPLIANCE_SETTINGS)
  private SubscriptionTaxAndComplianceSettings taxAndComplianceSettings;

  public Subscription() {
  }

  public Subscription(
     Boolean archived
  ) {
    this();
    this.archived = archived;
  }

  /**
   * Output only. Deprecated: subscription archiving is not supported.
   * @return archived
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }



  public Subscription basePlans(List<BasePlan> basePlans) {
    this.basePlans = basePlans;
    return this;
  }

  public Subscription addBasePlansItem(BasePlan basePlansItem) {
    if (this.basePlans == null) {
      this.basePlans = new ArrayList<>();
    }
    this.basePlans.add(basePlansItem);
    return this;
  }

  /**
   * The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.
   * @return basePlans
   */
  @javax.annotation.Nullable
  public List<BasePlan> getBasePlans() {
    return basePlans;
  }

  public void setBasePlans(List<BasePlan> basePlans) {
    this.basePlans = basePlans;
  }


  public Subscription listings(List<SubscriptionListing> listings) {
    this.listings = listings;
    return this;
  }

  public Subscription addListingsItem(SubscriptionListing listingsItem) {
    if (this.listings == null) {
      this.listings = new ArrayList<>();
    }
    this.listings.add(listingsItem);
    return this;
  }

  /**
   * Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.
   * @return listings
   */
  @javax.annotation.Nullable
  public List<SubscriptionListing> getListings() {
    return listings;
  }

  public void setListings(List<SubscriptionListing> listings) {
    this.listings = listings;
  }


  public Subscription packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Immutable. Package name of the parent app.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public Subscription productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public Subscription taxAndComplianceSettings(SubscriptionTaxAndComplianceSettings taxAndComplianceSettings) {
    this.taxAndComplianceSettings = taxAndComplianceSettings;
    return this;
  }

  /**
   * Get taxAndComplianceSettings
   * @return taxAndComplianceSettings
   */
  @javax.annotation.Nullable
  public SubscriptionTaxAndComplianceSettings getTaxAndComplianceSettings() {
    return taxAndComplianceSettings;
  }

  public void setTaxAndComplianceSettings(SubscriptionTaxAndComplianceSettings taxAndComplianceSettings) {
    this.taxAndComplianceSettings = taxAndComplianceSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.archived, subscription.archived) &&
        Objects.equals(this.basePlans, subscription.basePlans) &&
        Objects.equals(this.listings, subscription.listings) &&
        Objects.equals(this.packageName, subscription.packageName) &&
        Objects.equals(this.productId, subscription.productId) &&
        Objects.equals(this.taxAndComplianceSettings, subscription.taxAndComplianceSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, basePlans, listings, packageName, productId, taxAndComplianceSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    basePlans: ").append(toIndentedString(basePlans)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    taxAndComplianceSettings: ").append(toIndentedString(taxAndComplianceSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("basePlans");
    openapiFields.add("listings");
    openapiFields.add("packageName");
    openapiFields.add("productId");
    openapiFields.add("taxAndComplianceSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("basePlans") != null && !jsonObj.get("basePlans").isJsonNull()) {
        JsonArray jsonArraybasePlans = jsonObj.getAsJsonArray("basePlans");
        if (jsonArraybasePlans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("basePlans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `basePlans` to be an array in the JSON string but got `%s`", jsonObj.get("basePlans").toString()));
          }

          // validate the optional field `basePlans` (array)
          for (int i = 0; i < jsonArraybasePlans.size(); i++) {
            BasePlan.validateJsonElement(jsonArraybasePlans.get(i));
          };
        }
      }
      if (jsonObj.get("listings") != null && !jsonObj.get("listings").isJsonNull()) {
        JsonArray jsonArraylistings = jsonObj.getAsJsonArray("listings");
        if (jsonArraylistings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listings` to be an array in the JSON string but got `%s`", jsonObj.get("listings").toString()));
          }

          // validate the optional field `listings` (array)
          for (int i = 0; i < jsonArraylistings.size(); i++) {
            SubscriptionListing.validateJsonElement(jsonArraylistings.get(i));
          };
        }
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      // validate the optional field `taxAndComplianceSettings`
      if (jsonObj.get("taxAndComplianceSettings") != null && !jsonObj.get("taxAndComplianceSettings").isJsonNull()) {
        SubscriptionTaxAndComplianceSettings.validateJsonElement(jsonObj.get("taxAndComplianceSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

