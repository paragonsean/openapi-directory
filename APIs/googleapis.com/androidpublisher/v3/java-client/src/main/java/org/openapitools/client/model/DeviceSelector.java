/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceId;
import org.openapitools.client.model.DeviceRam;
import org.openapitools.client.model.SystemFeature;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Selector for a device group. A selector consists of a set of conditions on the device that should all match (logical AND) to determine a device group eligibility. For instance, if a selector specifies RAM conditions, device model inclusion and device model exclusion, a device is considered to match if: device matches RAM conditions AND device matches one of the included device models AND device doesn&#39;t match excluded device models
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceSelector {
  public static final String SERIALIZED_NAME_DEVICE_RAM = "deviceRam";
  @SerializedName(SERIALIZED_NAME_DEVICE_RAM)
  private DeviceRam deviceRam;

  public static final String SERIALIZED_NAME_EXCLUDED_DEVICE_IDS = "excludedDeviceIds";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_DEVICE_IDS)
  private List<DeviceId> excludedDeviceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORBIDDEN_SYSTEM_FEATURES = "forbiddenSystemFeatures";
  @SerializedName(SERIALIZED_NAME_FORBIDDEN_SYSTEM_FEATURES)
  private List<SystemFeature> forbiddenSystemFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_DEVICE_IDS = "includedDeviceIds";
  @SerializedName(SERIALIZED_NAME_INCLUDED_DEVICE_IDS)
  private List<DeviceId> includedDeviceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_SYSTEM_FEATURES = "requiredSystemFeatures";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SYSTEM_FEATURES)
  private List<SystemFeature> requiredSystemFeatures = new ArrayList<>();

  public DeviceSelector() {
  }

  public DeviceSelector deviceRam(DeviceRam deviceRam) {
    this.deviceRam = deviceRam;
    return this;
  }

  /**
   * Get deviceRam
   * @return deviceRam
   */
  @javax.annotation.Nullable
  public DeviceRam getDeviceRam() {
    return deviceRam;
  }

  public void setDeviceRam(DeviceRam deviceRam) {
    this.deviceRam = deviceRam;
  }


  public DeviceSelector excludedDeviceIds(List<DeviceId> excludedDeviceIds) {
    this.excludedDeviceIds = excludedDeviceIds;
    return this;
  }

  public DeviceSelector addExcludedDeviceIdsItem(DeviceId excludedDeviceIdsItem) {
    if (this.excludedDeviceIds == null) {
      this.excludedDeviceIds = new ArrayList<>();
    }
    this.excludedDeviceIds.add(excludedDeviceIdsItem);
    return this;
  }

  /**
   * Device models excluded by this selector, even if they match all other conditions.
   * @return excludedDeviceIds
   */
  @javax.annotation.Nullable
  public List<DeviceId> getExcludedDeviceIds() {
    return excludedDeviceIds;
  }

  public void setExcludedDeviceIds(List<DeviceId> excludedDeviceIds) {
    this.excludedDeviceIds = excludedDeviceIds;
  }


  public DeviceSelector forbiddenSystemFeatures(List<SystemFeature> forbiddenSystemFeatures) {
    this.forbiddenSystemFeatures = forbiddenSystemFeatures;
    return this;
  }

  public DeviceSelector addForbiddenSystemFeaturesItem(SystemFeature forbiddenSystemFeaturesItem) {
    if (this.forbiddenSystemFeatures == null) {
      this.forbiddenSystemFeatures = new ArrayList<>();
    }
    this.forbiddenSystemFeatures.add(forbiddenSystemFeaturesItem);
    return this;
  }

  /**
   * A device that has any of these system features is excluded by this selector, even if it matches all other conditions.
   * @return forbiddenSystemFeatures
   */
  @javax.annotation.Nullable
  public List<SystemFeature> getForbiddenSystemFeatures() {
    return forbiddenSystemFeatures;
  }

  public void setForbiddenSystemFeatures(List<SystemFeature> forbiddenSystemFeatures) {
    this.forbiddenSystemFeatures = forbiddenSystemFeatures;
  }


  public DeviceSelector includedDeviceIds(List<DeviceId> includedDeviceIds) {
    this.includedDeviceIds = includedDeviceIds;
    return this;
  }

  public DeviceSelector addIncludedDeviceIdsItem(DeviceId includedDeviceIdsItem) {
    if (this.includedDeviceIds == null) {
      this.includedDeviceIds = new ArrayList<>();
    }
    this.includedDeviceIds.add(includedDeviceIdsItem);
    return this;
  }

  /**
   * Device models included by this selector.
   * @return includedDeviceIds
   */
  @javax.annotation.Nullable
  public List<DeviceId> getIncludedDeviceIds() {
    return includedDeviceIds;
  }

  public void setIncludedDeviceIds(List<DeviceId> includedDeviceIds) {
    this.includedDeviceIds = includedDeviceIds;
  }


  public DeviceSelector requiredSystemFeatures(List<SystemFeature> requiredSystemFeatures) {
    this.requiredSystemFeatures = requiredSystemFeatures;
    return this;
  }

  public DeviceSelector addRequiredSystemFeaturesItem(SystemFeature requiredSystemFeaturesItem) {
    if (this.requiredSystemFeatures == null) {
      this.requiredSystemFeatures = new ArrayList<>();
    }
    this.requiredSystemFeatures.add(requiredSystemFeaturesItem);
    return this;
  }

  /**
   * A device needs to have all these system features to be included by the selector.
   * @return requiredSystemFeatures
   */
  @javax.annotation.Nullable
  public List<SystemFeature> getRequiredSystemFeatures() {
    return requiredSystemFeatures;
  }

  public void setRequiredSystemFeatures(List<SystemFeature> requiredSystemFeatures) {
    this.requiredSystemFeatures = requiredSystemFeatures;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceSelector deviceSelector = (DeviceSelector) o;
    return Objects.equals(this.deviceRam, deviceSelector.deviceRam) &&
        Objects.equals(this.excludedDeviceIds, deviceSelector.excludedDeviceIds) &&
        Objects.equals(this.forbiddenSystemFeatures, deviceSelector.forbiddenSystemFeatures) &&
        Objects.equals(this.includedDeviceIds, deviceSelector.includedDeviceIds) &&
        Objects.equals(this.requiredSystemFeatures, deviceSelector.requiredSystemFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceRam, excludedDeviceIds, forbiddenSystemFeatures, includedDeviceIds, requiredSystemFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceSelector {\n");
    sb.append("    deviceRam: ").append(toIndentedString(deviceRam)).append("\n");
    sb.append("    excludedDeviceIds: ").append(toIndentedString(excludedDeviceIds)).append("\n");
    sb.append("    forbiddenSystemFeatures: ").append(toIndentedString(forbiddenSystemFeatures)).append("\n");
    sb.append("    includedDeviceIds: ").append(toIndentedString(includedDeviceIds)).append("\n");
    sb.append("    requiredSystemFeatures: ").append(toIndentedString(requiredSystemFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceRam");
    openapiFields.add("excludedDeviceIds");
    openapiFields.add("forbiddenSystemFeatures");
    openapiFields.add("includedDeviceIds");
    openapiFields.add("requiredSystemFeatures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceSelector is not found in the empty JSON string", DeviceSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceRam`
      if (jsonObj.get("deviceRam") != null && !jsonObj.get("deviceRam").isJsonNull()) {
        DeviceRam.validateJsonElement(jsonObj.get("deviceRam"));
      }
      if (jsonObj.get("excludedDeviceIds") != null && !jsonObj.get("excludedDeviceIds").isJsonNull()) {
        JsonArray jsonArrayexcludedDeviceIds = jsonObj.getAsJsonArray("excludedDeviceIds");
        if (jsonArrayexcludedDeviceIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("excludedDeviceIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `excludedDeviceIds` to be an array in the JSON string but got `%s`", jsonObj.get("excludedDeviceIds").toString()));
          }

          // validate the optional field `excludedDeviceIds` (array)
          for (int i = 0; i < jsonArrayexcludedDeviceIds.size(); i++) {
            DeviceId.validateJsonElement(jsonArrayexcludedDeviceIds.get(i));
          };
        }
      }
      if (jsonObj.get("forbiddenSystemFeatures") != null && !jsonObj.get("forbiddenSystemFeatures").isJsonNull()) {
        JsonArray jsonArrayforbiddenSystemFeatures = jsonObj.getAsJsonArray("forbiddenSystemFeatures");
        if (jsonArrayforbiddenSystemFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("forbiddenSystemFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `forbiddenSystemFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("forbiddenSystemFeatures").toString()));
          }

          // validate the optional field `forbiddenSystemFeatures` (array)
          for (int i = 0; i < jsonArrayforbiddenSystemFeatures.size(); i++) {
            SystemFeature.validateJsonElement(jsonArrayforbiddenSystemFeatures.get(i));
          };
        }
      }
      if (jsonObj.get("includedDeviceIds") != null && !jsonObj.get("includedDeviceIds").isJsonNull()) {
        JsonArray jsonArrayincludedDeviceIds = jsonObj.getAsJsonArray("includedDeviceIds");
        if (jsonArrayincludedDeviceIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedDeviceIds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedDeviceIds` to be an array in the JSON string but got `%s`", jsonObj.get("includedDeviceIds").toString()));
          }

          // validate the optional field `includedDeviceIds` (array)
          for (int i = 0; i < jsonArrayincludedDeviceIds.size(); i++) {
            DeviceId.validateJsonElement(jsonArrayincludedDeviceIds.get(i));
          };
        }
      }
      if (jsonObj.get("requiredSystemFeatures") != null && !jsonObj.get("requiredSystemFeatures").isJsonNull()) {
        JsonArray jsonArrayrequiredSystemFeatures = jsonObj.getAsJsonArray("requiredSystemFeatures");
        if (jsonArrayrequiredSystemFeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requiredSystemFeatures").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requiredSystemFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("requiredSystemFeatures").toString()));
          }

          // validate the optional field `requiredSystemFeatures` (array)
          for (int i = 0; i < jsonArrayrequiredSystemFeatures.size(); i++) {
            SystemFeature.validateJsonElement(jsonArrayrequiredSystemFeatures.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceSelector>() {
           @Override
           public void write(JsonWriter out, DeviceSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceSelector
   * @throws IOException if the JSON string is invalid with respect to DeviceSelector
   */
  public static DeviceSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceSelector.class);
  }

  /**
   * Convert an instance of DeviceSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

