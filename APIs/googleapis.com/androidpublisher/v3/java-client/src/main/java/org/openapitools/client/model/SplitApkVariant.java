/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApkSet;
import org.openapitools.client.model.VariantTargeting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Variant is a group of APKs that covers a part of the device configuration space. APKs from multiple variants are never combined on one device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SplitApkVariant {
  public static final String SERIALIZED_NAME_APK_SET = "apkSet";
  @SerializedName(SERIALIZED_NAME_APK_SET)
  private List<ApkSet> apkSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private VariantTargeting targeting;

  public static final String SERIALIZED_NAME_VARIANT_NUMBER = "variantNumber";
  @SerializedName(SERIALIZED_NAME_VARIANT_NUMBER)
  private Integer variantNumber;

  public SplitApkVariant() {
  }

  public SplitApkVariant apkSet(List<ApkSet> apkSet) {
    this.apkSet = apkSet;
    return this;
  }

  public SplitApkVariant addApkSetItem(ApkSet apkSetItem) {
    if (this.apkSet == null) {
      this.apkSet = new ArrayList<>();
    }
    this.apkSet.add(apkSetItem);
    return this;
  }

  /**
   * Set of APKs, one set per module.
   * @return apkSet
   */
  @javax.annotation.Nullable
  public List<ApkSet> getApkSet() {
    return apkSet;
  }

  public void setApkSet(List<ApkSet> apkSet) {
    this.apkSet = apkSet;
  }


  public SplitApkVariant targeting(VariantTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public VariantTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(VariantTargeting targeting) {
    this.targeting = targeting;
  }


  public SplitApkVariant variantNumber(Integer variantNumber) {
    this.variantNumber = variantNumber;
    return this;
  }

  /**
   * Number of the variant, starting at 0 (unless overridden). A device will receive APKs from the first variant that matches the device configuration, with higher variant numbers having priority over lower variant numbers.
   * @return variantNumber
   */
  @javax.annotation.Nullable
  public Integer getVariantNumber() {
    return variantNumber;
  }

  public void setVariantNumber(Integer variantNumber) {
    this.variantNumber = variantNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitApkVariant splitApkVariant = (SplitApkVariant) o;
    return Objects.equals(this.apkSet, splitApkVariant.apkSet) &&
        Objects.equals(this.targeting, splitApkVariant.targeting) &&
        Objects.equals(this.variantNumber, splitApkVariant.variantNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apkSet, targeting, variantNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitApkVariant {\n");
    sb.append("    apkSet: ").append(toIndentedString(apkSet)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("    variantNumber: ").append(toIndentedString(variantNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apkSet");
    openapiFields.add("targeting");
    openapiFields.add("variantNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SplitApkVariant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SplitApkVariant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SplitApkVariant is not found in the empty JSON string", SplitApkVariant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SplitApkVariant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SplitApkVariant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("apkSet") != null && !jsonObj.get("apkSet").isJsonNull()) {
        JsonArray jsonArrayapkSet = jsonObj.getAsJsonArray("apkSet");
        if (jsonArrayapkSet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apkSet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apkSet` to be an array in the JSON string but got `%s`", jsonObj.get("apkSet").toString()));
          }

          // validate the optional field `apkSet` (array)
          for (int i = 0; i < jsonArrayapkSet.size(); i++) {
            ApkSet.validateJsonElement(jsonArrayapkSet.get(i));
          };
        }
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        VariantTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SplitApkVariant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SplitApkVariant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SplitApkVariant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SplitApkVariant.class));

       return (TypeAdapter<T>) new TypeAdapter<SplitApkVariant>() {
           @Override
           public void write(JsonWriter out, SplitApkVariant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SplitApkVariant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SplitApkVariant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SplitApkVariant
   * @throws IOException if the JSON string is invalid with respect to SplitApkVariant
   */
  public static SplitApkVariant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SplitApkVariant.class);
  }

  /**
   * Convert an instance of SplitApkVariant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

