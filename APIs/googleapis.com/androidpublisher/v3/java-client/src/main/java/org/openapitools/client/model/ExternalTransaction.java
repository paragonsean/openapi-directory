/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExternalTransactionAddress;
import org.openapitools.client.model.OneTimeExternalTransaction;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.RecurringExternalTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details of an external transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalTransaction {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CURRENT_PRE_TAX_AMOUNT = "currentPreTaxAmount";
  @SerializedName(SERIALIZED_NAME_CURRENT_PRE_TAX_AMOUNT)
  private Price currentPreTaxAmount;

  public static final String SERIALIZED_NAME_CURRENT_TAX_AMOUNT = "currentTaxAmount";
  @SerializedName(SERIALIZED_NAME_CURRENT_TAX_AMOUNT)
  private Price currentTaxAmount;

  public static final String SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID = "externalTransactionId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRANSACTION_ID)
  private String externalTransactionId;

  public static final String SERIALIZED_NAME_ONE_TIME_TRANSACTION = "oneTimeTransaction";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_TRANSACTION)
  private OneTimeExternalTransaction oneTimeTransaction;

  public static final String SERIALIZED_NAME_ORIGINAL_PRE_TAX_AMOUNT = "originalPreTaxAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PRE_TAX_AMOUNT)
  private Price originalPreTaxAmount;

  public static final String SERIALIZED_NAME_ORIGINAL_TAX_AMOUNT = "originalTaxAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TAX_AMOUNT)
  private Price originalTaxAmount;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_RECURRING_TRANSACTION = "recurringTransaction";
  @SerializedName(SERIALIZED_NAME_RECURRING_TRANSACTION)
  private RecurringExternalTransaction recurringTransaction;

  public static final String SERIALIZED_NAME_TEST_PURCHASE = "testPurchase";
  @SerializedName(SERIALIZED_NAME_TEST_PURCHASE)
  private Object testPurchase;

  /**
   * Output only. The current state of the transaction.
   */
  @JsonAdapter(TransactionStateEnum.Adapter.class)
  public enum TransactionStateEnum {
    STATE_UNSPECIFIED("TRANSACTION_STATE_UNSPECIFIED"),
    
    REPORTED("TRANSACTION_REPORTED"),
    
    CANCELED("TRANSACTION_CANCELED");

    private String value;

    TransactionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStateEnum fromValue(String value) {
      for (TransactionStateEnum b : TransactionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATE = "transactionState";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATE)
  private TransactionStateEnum transactionState;

  public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
  private String transactionTime;

  public static final String SERIALIZED_NAME_USER_TAX_ADDRESS = "userTaxAddress";
  @SerializedName(SERIALIZED_NAME_USER_TAX_ADDRESS)
  private ExternalTransactionAddress userTaxAddress;

  public ExternalTransaction() {
  }

  public ExternalTransaction(
     String createTime, 
     String externalTransactionId, 
     String packageName, 
     TransactionStateEnum transactionState
  ) {
    this();
    this.createTime = createTime;
    this.externalTransactionId = externalTransactionId;
    this.packageName = packageName;
    this.transactionState = transactionState;
  }

  /**
   * Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ExternalTransaction currentPreTaxAmount(Price currentPreTaxAmount) {
    this.currentPreTaxAmount = currentPreTaxAmount;
    return this;
  }

  /**
   * Get currentPreTaxAmount
   * @return currentPreTaxAmount
   */
  @javax.annotation.Nullable
  public Price getCurrentPreTaxAmount() {
    return currentPreTaxAmount;
  }

  public void setCurrentPreTaxAmount(Price currentPreTaxAmount) {
    this.currentPreTaxAmount = currentPreTaxAmount;
  }


  public ExternalTransaction currentTaxAmount(Price currentTaxAmount) {
    this.currentTaxAmount = currentTaxAmount;
    return this;
  }

  /**
   * Get currentTaxAmount
   * @return currentTaxAmount
   */
  @javax.annotation.Nullable
  public Price getCurrentTaxAmount() {
    return currentTaxAmount;
  }

  public void setCurrentTaxAmount(Price currentTaxAmount) {
    this.currentTaxAmount = currentTaxAmount;
  }


  /**
   * Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.
   * @return externalTransactionId
   */
  @javax.annotation.Nullable
  public String getExternalTransactionId() {
    return externalTransactionId;
  }



  public ExternalTransaction oneTimeTransaction(OneTimeExternalTransaction oneTimeTransaction) {
    this.oneTimeTransaction = oneTimeTransaction;
    return this;
  }

  /**
   * Get oneTimeTransaction
   * @return oneTimeTransaction
   */
  @javax.annotation.Nullable
  public OneTimeExternalTransaction getOneTimeTransaction() {
    return oneTimeTransaction;
  }

  public void setOneTimeTransaction(OneTimeExternalTransaction oneTimeTransaction) {
    this.oneTimeTransaction = oneTimeTransaction;
  }


  public ExternalTransaction originalPreTaxAmount(Price originalPreTaxAmount) {
    this.originalPreTaxAmount = originalPreTaxAmount;
    return this;
  }

  /**
   * Get originalPreTaxAmount
   * @return originalPreTaxAmount
   */
  @javax.annotation.Nullable
  public Price getOriginalPreTaxAmount() {
    return originalPreTaxAmount;
  }

  public void setOriginalPreTaxAmount(Price originalPreTaxAmount) {
    this.originalPreTaxAmount = originalPreTaxAmount;
  }


  public ExternalTransaction originalTaxAmount(Price originalTaxAmount) {
    this.originalTaxAmount = originalTaxAmount;
    return this;
  }

  /**
   * Get originalTaxAmount
   * @return originalTaxAmount
   */
  @javax.annotation.Nullable
  public Price getOriginalTaxAmount() {
    return originalTaxAmount;
  }

  public void setOriginalTaxAmount(Price originalTaxAmount) {
    this.originalTaxAmount = originalTaxAmount;
  }


  /**
   * Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, &#39;com.some.app&#39;).
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }



  public ExternalTransaction recurringTransaction(RecurringExternalTransaction recurringTransaction) {
    this.recurringTransaction = recurringTransaction;
    return this;
  }

  /**
   * Get recurringTransaction
   * @return recurringTransaction
   */
  @javax.annotation.Nullable
  public RecurringExternalTransaction getRecurringTransaction() {
    return recurringTransaction;
  }

  public void setRecurringTransaction(RecurringExternalTransaction recurringTransaction) {
    this.recurringTransaction = recurringTransaction;
  }


  public ExternalTransaction testPurchase(Object testPurchase) {
    this.testPurchase = testPurchase;
    return this;
  }

  /**
   * Represents a transaction performed using a test account. These transactions will not be charged by Google.
   * @return testPurchase
   */
  @javax.annotation.Nullable
  public Object getTestPurchase() {
    return testPurchase;
  }

  public void setTestPurchase(Object testPurchase) {
    this.testPurchase = testPurchase;
  }


  /**
   * Output only. The current state of the transaction.
   * @return transactionState
   */
  @javax.annotation.Nullable
  public TransactionStateEnum getTransactionState() {
    return transactionState;
  }



  public ExternalTransaction transactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
    return this;
  }

  /**
   * Required. The time when the transaction was completed.
   * @return transactionTime
   */
  @javax.annotation.Nullable
  public String getTransactionTime() {
    return transactionTime;
  }

  public void setTransactionTime(String transactionTime) {
    this.transactionTime = transactionTime;
  }


  public ExternalTransaction userTaxAddress(ExternalTransactionAddress userTaxAddress) {
    this.userTaxAddress = userTaxAddress;
    return this;
  }

  /**
   * Get userTaxAddress
   * @return userTaxAddress
   */
  @javax.annotation.Nullable
  public ExternalTransactionAddress getUserTaxAddress() {
    return userTaxAddress;
  }

  public void setUserTaxAddress(ExternalTransactionAddress userTaxAddress) {
    this.userTaxAddress = userTaxAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTransaction externalTransaction = (ExternalTransaction) o;
    return Objects.equals(this.createTime, externalTransaction.createTime) &&
        Objects.equals(this.currentPreTaxAmount, externalTransaction.currentPreTaxAmount) &&
        Objects.equals(this.currentTaxAmount, externalTransaction.currentTaxAmount) &&
        Objects.equals(this.externalTransactionId, externalTransaction.externalTransactionId) &&
        Objects.equals(this.oneTimeTransaction, externalTransaction.oneTimeTransaction) &&
        Objects.equals(this.originalPreTaxAmount, externalTransaction.originalPreTaxAmount) &&
        Objects.equals(this.originalTaxAmount, externalTransaction.originalTaxAmount) &&
        Objects.equals(this.packageName, externalTransaction.packageName) &&
        Objects.equals(this.recurringTransaction, externalTransaction.recurringTransaction) &&
        Objects.equals(this.testPurchase, externalTransaction.testPurchase) &&
        Objects.equals(this.transactionState, externalTransaction.transactionState) &&
        Objects.equals(this.transactionTime, externalTransaction.transactionTime) &&
        Objects.equals(this.userTaxAddress, externalTransaction.userTaxAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, currentPreTaxAmount, currentTaxAmount, externalTransactionId, oneTimeTransaction, originalPreTaxAmount, originalTaxAmount, packageName, recurringTransaction, testPurchase, transactionState, transactionTime, userTaxAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalTransaction {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    currentPreTaxAmount: ").append(toIndentedString(currentPreTaxAmount)).append("\n");
    sb.append("    currentTaxAmount: ").append(toIndentedString(currentTaxAmount)).append("\n");
    sb.append("    externalTransactionId: ").append(toIndentedString(externalTransactionId)).append("\n");
    sb.append("    oneTimeTransaction: ").append(toIndentedString(oneTimeTransaction)).append("\n");
    sb.append("    originalPreTaxAmount: ").append(toIndentedString(originalPreTaxAmount)).append("\n");
    sb.append("    originalTaxAmount: ").append(toIndentedString(originalTaxAmount)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    recurringTransaction: ").append(toIndentedString(recurringTransaction)).append("\n");
    sb.append("    testPurchase: ").append(toIndentedString(testPurchase)).append("\n");
    sb.append("    transactionState: ").append(toIndentedString(transactionState)).append("\n");
    sb.append("    transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
    sb.append("    userTaxAddress: ").append(toIndentedString(userTaxAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("currentPreTaxAmount");
    openapiFields.add("currentTaxAmount");
    openapiFields.add("externalTransactionId");
    openapiFields.add("oneTimeTransaction");
    openapiFields.add("originalPreTaxAmount");
    openapiFields.add("originalTaxAmount");
    openapiFields.add("packageName");
    openapiFields.add("recurringTransaction");
    openapiFields.add("testPurchase");
    openapiFields.add("transactionState");
    openapiFields.add("transactionTime");
    openapiFields.add("userTaxAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalTransaction is not found in the empty JSON string", ExternalTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      // validate the optional field `currentPreTaxAmount`
      if (jsonObj.get("currentPreTaxAmount") != null && !jsonObj.get("currentPreTaxAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("currentPreTaxAmount"));
      }
      // validate the optional field `currentTaxAmount`
      if (jsonObj.get("currentTaxAmount") != null && !jsonObj.get("currentTaxAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("currentTaxAmount"));
      }
      if ((jsonObj.get("externalTransactionId") != null && !jsonObj.get("externalTransactionId").isJsonNull()) && !jsonObj.get("externalTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalTransactionId").toString()));
      }
      // validate the optional field `oneTimeTransaction`
      if (jsonObj.get("oneTimeTransaction") != null && !jsonObj.get("oneTimeTransaction").isJsonNull()) {
        OneTimeExternalTransaction.validateJsonElement(jsonObj.get("oneTimeTransaction"));
      }
      // validate the optional field `originalPreTaxAmount`
      if (jsonObj.get("originalPreTaxAmount") != null && !jsonObj.get("originalPreTaxAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("originalPreTaxAmount"));
      }
      // validate the optional field `originalTaxAmount`
      if (jsonObj.get("originalTaxAmount") != null && !jsonObj.get("originalTaxAmount").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("originalTaxAmount"));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      // validate the optional field `recurringTransaction`
      if (jsonObj.get("recurringTransaction") != null && !jsonObj.get("recurringTransaction").isJsonNull()) {
        RecurringExternalTransaction.validateJsonElement(jsonObj.get("recurringTransaction"));
      }
      if ((jsonObj.get("transactionState") != null && !jsonObj.get("transactionState").isJsonNull()) && !jsonObj.get("transactionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionState").toString()));
      }
      // validate the optional field `transactionState`
      if (jsonObj.get("transactionState") != null && !jsonObj.get("transactionState").isJsonNull()) {
        TransactionStateEnum.validateJsonElement(jsonObj.get("transactionState"));
      }
      if ((jsonObj.get("transactionTime") != null && !jsonObj.get("transactionTime").isJsonNull()) && !jsonObj.get("transactionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionTime").toString()));
      }
      // validate the optional field `userTaxAddress`
      if (jsonObj.get("userTaxAddress") != null && !jsonObj.get("userTaxAddress").isJsonNull()) {
        ExternalTransactionAddress.validateJsonElement(jsonObj.get("userTaxAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalTransaction>() {
           @Override
           public void write(JsonWriter out, ExternalTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalTransaction
   * @throws IOException if the JSON string is invalid with respect to ExternalTransaction
   */
  public static ExternalTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalTransaction.class);
  }

  /**
   * Convert an instance of ExternalTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

