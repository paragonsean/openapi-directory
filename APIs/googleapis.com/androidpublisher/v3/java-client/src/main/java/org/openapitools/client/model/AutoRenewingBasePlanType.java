/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a base plan that automatically renews at the end of its subscription period.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutoRenewingBasePlanType {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLD_DURATION = "accountHoldDuration";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLD_DURATION)
  private String accountHoldDuration;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_DURATION = "billingPeriodDuration";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_DURATION)
  private String billingPeriodDuration;

  public static final String SERIALIZED_NAME_GRACE_PERIOD_DURATION = "gracePeriodDuration";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD_DURATION)
  private String gracePeriodDuration;

  public static final String SERIALIZED_NAME_LEGACY_COMPATIBLE = "legacyCompatible";
  @SerializedName(SERIALIZED_NAME_LEGACY_COMPATIBLE)
  private Boolean legacyCompatible;

  public static final String SERIALIZED_NAME_LEGACY_COMPATIBLE_SUBSCRIPTION_OFFER_ID = "legacyCompatibleSubscriptionOfferId";
  @SerializedName(SERIALIZED_NAME_LEGACY_COMPATIBLE_SUBSCRIPTION_OFFER_ID)
  private String legacyCompatibleSubscriptionOfferId;

  /**
   * The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.
   */
  @JsonAdapter(ProrationModeEnum.Adapter.class)
  public enum ProrationModeEnum {
    UNSPECIFIED("SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED"),
    
    CHARGE_ON_NEXT_BILLING_DATE("SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE"),
    
    CHARGE_FULL_PRICE_IMMEDIATELY("SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY");

    private String value;

    ProrationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProrationModeEnum fromValue(String value) {
      for (ProrationModeEnum b : ProrationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProrationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProrationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProrationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProrationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProrationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRORATION_MODE = "prorationMode";
  @SerializedName(SERIALIZED_NAME_PRORATION_MODE)
  private ProrationModeEnum prorationMode;

  /**
   * Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.
   */
  @JsonAdapter(ResubscribeStateEnum.Adapter.class)
  public enum ResubscribeStateEnum {
    UNSPECIFIED("RESUBSCRIBE_STATE_UNSPECIFIED"),
    
    ACTIVE("RESUBSCRIBE_STATE_ACTIVE"),
    
    INACTIVE("RESUBSCRIBE_STATE_INACTIVE");

    private String value;

    ResubscribeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResubscribeStateEnum fromValue(String value) {
      for (ResubscribeStateEnum b : ResubscribeStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResubscribeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResubscribeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResubscribeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResubscribeStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResubscribeStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESUBSCRIBE_STATE = "resubscribeState";
  @SerializedName(SERIALIZED_NAME_RESUBSCRIBE_STATE)
  private ResubscribeStateEnum resubscribeState;

  public AutoRenewingBasePlanType() {
  }

  public AutoRenewingBasePlanType accountHoldDuration(String accountHoldDuration) {
    this.accountHoldDuration = accountHoldDuration;
    return this;
  }

  /**
   * Optional. Account hold period of the subscription, specified in ISO 8601 format. Acceptable values must be in DAYS and in the range P0D (zero days) to P30D (30 days). If not specified, the default value is P30D (30 days).
   * @return accountHoldDuration
   */
  @javax.annotation.Nullable
  public String getAccountHoldDuration() {
    return accountHoldDuration;
  }

  public void setAccountHoldDuration(String accountHoldDuration) {
    this.accountHoldDuration = accountHoldDuration;
  }


  public AutoRenewingBasePlanType billingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
    return this;
  }

  /**
   * Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.
   * @return billingPeriodDuration
   */
  @javax.annotation.Nullable
  public String getBillingPeriodDuration() {
    return billingPeriodDuration;
  }

  public void setBillingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
  }


  public AutoRenewingBasePlanType gracePeriodDuration(String gracePeriodDuration) {
    this.gracePeriodDuration = gracePeriodDuration;
    return this;
  }

  /**
   * Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.
   * @return gracePeriodDuration
   */
  @javax.annotation.Nullable
  public String getGracePeriodDuration() {
    return gracePeriodDuration;
  }

  public void setGracePeriodDuration(String gracePeriodDuration) {
    this.gracePeriodDuration = gracePeriodDuration;
  }


  public AutoRenewingBasePlanType legacyCompatible(Boolean legacyCompatible) {
    this.legacyCompatible = legacyCompatible;
    return this;
  }

  /**
   * Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.
   * @return legacyCompatible
   */
  @javax.annotation.Nullable
  public Boolean getLegacyCompatible() {
    return legacyCompatible;
  }

  public void setLegacyCompatible(Boolean legacyCompatible) {
    this.legacyCompatible = legacyCompatible;
  }


  public AutoRenewingBasePlanType legacyCompatibleSubscriptionOfferId(String legacyCompatibleSubscriptionOfferId) {
    this.legacyCompatibleSubscriptionOfferId = legacyCompatibleSubscriptionOfferId;
    return this;
  }

  /**
   * Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.
   * @return legacyCompatibleSubscriptionOfferId
   */
  @javax.annotation.Nullable
  public String getLegacyCompatibleSubscriptionOfferId() {
    return legacyCompatibleSubscriptionOfferId;
  }

  public void setLegacyCompatibleSubscriptionOfferId(String legacyCompatibleSubscriptionOfferId) {
    this.legacyCompatibleSubscriptionOfferId = legacyCompatibleSubscriptionOfferId;
  }


  public AutoRenewingBasePlanType prorationMode(ProrationModeEnum prorationMode) {
    this.prorationMode = prorationMode;
    return this;
  }

  /**
   * The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.
   * @return prorationMode
   */
  @javax.annotation.Nullable
  public ProrationModeEnum getProrationMode() {
    return prorationMode;
  }

  public void setProrationMode(ProrationModeEnum prorationMode) {
    this.prorationMode = prorationMode;
  }


  public AutoRenewingBasePlanType resubscribeState(ResubscribeStateEnum resubscribeState) {
    this.resubscribeState = resubscribeState;
    return this;
  }

  /**
   * Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.
   * @return resubscribeState
   */
  @javax.annotation.Nullable
  public ResubscribeStateEnum getResubscribeState() {
    return resubscribeState;
  }

  public void setResubscribeState(ResubscribeStateEnum resubscribeState) {
    this.resubscribeState = resubscribeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoRenewingBasePlanType autoRenewingBasePlanType = (AutoRenewingBasePlanType) o;
    return Objects.equals(this.accountHoldDuration, autoRenewingBasePlanType.accountHoldDuration) &&
        Objects.equals(this.billingPeriodDuration, autoRenewingBasePlanType.billingPeriodDuration) &&
        Objects.equals(this.gracePeriodDuration, autoRenewingBasePlanType.gracePeriodDuration) &&
        Objects.equals(this.legacyCompatible, autoRenewingBasePlanType.legacyCompatible) &&
        Objects.equals(this.legacyCompatibleSubscriptionOfferId, autoRenewingBasePlanType.legacyCompatibleSubscriptionOfferId) &&
        Objects.equals(this.prorationMode, autoRenewingBasePlanType.prorationMode) &&
        Objects.equals(this.resubscribeState, autoRenewingBasePlanType.resubscribeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHoldDuration, billingPeriodDuration, gracePeriodDuration, legacyCompatible, legacyCompatibleSubscriptionOfferId, prorationMode, resubscribeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoRenewingBasePlanType {\n");
    sb.append("    accountHoldDuration: ").append(toIndentedString(accountHoldDuration)).append("\n");
    sb.append("    billingPeriodDuration: ").append(toIndentedString(billingPeriodDuration)).append("\n");
    sb.append("    gracePeriodDuration: ").append(toIndentedString(gracePeriodDuration)).append("\n");
    sb.append("    legacyCompatible: ").append(toIndentedString(legacyCompatible)).append("\n");
    sb.append("    legacyCompatibleSubscriptionOfferId: ").append(toIndentedString(legacyCompatibleSubscriptionOfferId)).append("\n");
    sb.append("    prorationMode: ").append(toIndentedString(prorationMode)).append("\n");
    sb.append("    resubscribeState: ").append(toIndentedString(resubscribeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHoldDuration");
    openapiFields.add("billingPeriodDuration");
    openapiFields.add("gracePeriodDuration");
    openapiFields.add("legacyCompatible");
    openapiFields.add("legacyCompatibleSubscriptionOfferId");
    openapiFields.add("prorationMode");
    openapiFields.add("resubscribeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutoRenewingBasePlanType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutoRenewingBasePlanType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutoRenewingBasePlanType is not found in the empty JSON string", AutoRenewingBasePlanType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutoRenewingBasePlanType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutoRenewingBasePlanType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHoldDuration") != null && !jsonObj.get("accountHoldDuration").isJsonNull()) && !jsonObj.get("accountHoldDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHoldDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHoldDuration").toString()));
      }
      if ((jsonObj.get("billingPeriodDuration") != null && !jsonObj.get("billingPeriodDuration").isJsonNull()) && !jsonObj.get("billingPeriodDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodDuration").toString()));
      }
      if ((jsonObj.get("gracePeriodDuration") != null && !jsonObj.get("gracePeriodDuration").isJsonNull()) && !jsonObj.get("gracePeriodDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gracePeriodDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gracePeriodDuration").toString()));
      }
      if ((jsonObj.get("legacyCompatibleSubscriptionOfferId") != null && !jsonObj.get("legacyCompatibleSubscriptionOfferId").isJsonNull()) && !jsonObj.get("legacyCompatibleSubscriptionOfferId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legacyCompatibleSubscriptionOfferId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legacyCompatibleSubscriptionOfferId").toString()));
      }
      if ((jsonObj.get("prorationMode") != null && !jsonObj.get("prorationMode").isJsonNull()) && !jsonObj.get("prorationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prorationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prorationMode").toString()));
      }
      // validate the optional field `prorationMode`
      if (jsonObj.get("prorationMode") != null && !jsonObj.get("prorationMode").isJsonNull()) {
        ProrationModeEnum.validateJsonElement(jsonObj.get("prorationMode"));
      }
      if ((jsonObj.get("resubscribeState") != null && !jsonObj.get("resubscribeState").isJsonNull()) && !jsonObj.get("resubscribeState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resubscribeState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resubscribeState").toString()));
      }
      // validate the optional field `resubscribeState`
      if (jsonObj.get("resubscribeState") != null && !jsonObj.get("resubscribeState").isJsonNull()) {
        ResubscribeStateEnum.validateJsonElement(jsonObj.get("resubscribeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutoRenewingBasePlanType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutoRenewingBasePlanType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutoRenewingBasePlanType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutoRenewingBasePlanType.class));

       return (TypeAdapter<T>) new TypeAdapter<AutoRenewingBasePlanType>() {
           @Override
           public void write(JsonWriter out, AutoRenewingBasePlanType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutoRenewingBasePlanType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutoRenewingBasePlanType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutoRenewingBasePlanType
   * @throws IOException if the JSON string is invalid with respect to AutoRenewingBasePlanType
   */
  public static AutoRenewingBasePlanType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutoRenewingBasePlanType.class);
  }

  /**
   * Convert an instance of AutoRenewingBasePlanType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

