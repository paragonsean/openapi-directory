/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Characteristics of the user&#39;s device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceMetadata {
  public static final String SERIALIZED_NAME_CPU_MAKE = "cpuMake";
  @SerializedName(SERIALIZED_NAME_CPU_MAKE)
  private String cpuMake;

  public static final String SERIALIZED_NAME_CPU_MODEL = "cpuModel";
  @SerializedName(SERIALIZED_NAME_CPU_MODEL)
  private String cpuModel;

  public static final String SERIALIZED_NAME_DEVICE_CLASS = "deviceClass";
  @SerializedName(SERIALIZED_NAME_DEVICE_CLASS)
  private String deviceClass;

  public static final String SERIALIZED_NAME_GL_ES_VERSION = "glEsVersion";
  @SerializedName(SERIALIZED_NAME_GL_ES_VERSION)
  private Integer glEsVersion;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_NATIVE_PLATFORM = "nativePlatform";
  @SerializedName(SERIALIZED_NAME_NATIVE_PLATFORM)
  private String nativePlatform;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "productName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_RAM_MB = "ramMb";
  @SerializedName(SERIALIZED_NAME_RAM_MB)
  private Integer ramMb;

  public static final String SERIALIZED_NAME_SCREEN_DENSITY_DPI = "screenDensityDpi";
  @SerializedName(SERIALIZED_NAME_SCREEN_DENSITY_DPI)
  private Integer screenDensityDpi;

  public static final String SERIALIZED_NAME_SCREEN_HEIGHT_PX = "screenHeightPx";
  @SerializedName(SERIALIZED_NAME_SCREEN_HEIGHT_PX)
  private Integer screenHeightPx;

  public static final String SERIALIZED_NAME_SCREEN_WIDTH_PX = "screenWidthPx";
  @SerializedName(SERIALIZED_NAME_SCREEN_WIDTH_PX)
  private Integer screenWidthPx;

  public DeviceMetadata() {
  }

  public DeviceMetadata cpuMake(String cpuMake) {
    this.cpuMake = cpuMake;
    return this;
  }

  /**
   * Device CPU make, e.g. \&quot;Qualcomm\&quot;
   * @return cpuMake
   */
  @javax.annotation.Nullable
  public String getCpuMake() {
    return cpuMake;
  }

  public void setCpuMake(String cpuMake) {
    this.cpuMake = cpuMake;
  }


  public DeviceMetadata cpuModel(String cpuModel) {
    this.cpuModel = cpuModel;
    return this;
  }

  /**
   * Device CPU model, e.g. \&quot;MSM8974\&quot;
   * @return cpuModel
   */
  @javax.annotation.Nullable
  public String getCpuModel() {
    return cpuModel;
  }

  public void setCpuModel(String cpuModel) {
    this.cpuModel = cpuModel;
  }


  public DeviceMetadata deviceClass(String deviceClass) {
    this.deviceClass = deviceClass;
    return this;
  }

  /**
   * Device class (e.g. tablet)
   * @return deviceClass
   */
  @javax.annotation.Nullable
  public String getDeviceClass() {
    return deviceClass;
  }

  public void setDeviceClass(String deviceClass) {
    this.deviceClass = deviceClass;
  }


  public DeviceMetadata glEsVersion(Integer glEsVersion) {
    this.glEsVersion = glEsVersion;
    return this;
  }

  /**
   * OpenGL version
   * @return glEsVersion
   */
  @javax.annotation.Nullable
  public Integer getGlEsVersion() {
    return glEsVersion;
  }

  public void setGlEsVersion(Integer glEsVersion) {
    this.glEsVersion = glEsVersion;
  }


  public DeviceMetadata manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Device manufacturer (e.g. Motorola)
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public DeviceMetadata nativePlatform(String nativePlatform) {
    this.nativePlatform = nativePlatform;
    return this;
  }

  /**
   * Comma separated list of native platforms (e.g. \&quot;arm\&quot;, \&quot;arm7\&quot;)
   * @return nativePlatform
   */
  @javax.annotation.Nullable
  public String getNativePlatform() {
    return nativePlatform;
  }

  public void setNativePlatform(String nativePlatform) {
    this.nativePlatform = nativePlatform;
  }


  public DeviceMetadata productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Device model name (e.g. Droid)
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public DeviceMetadata ramMb(Integer ramMb) {
    this.ramMb = ramMb;
    return this;
  }

  /**
   * Device RAM in Megabytes, e.g. \&quot;2048\&quot;
   * @return ramMb
   */
  @javax.annotation.Nullable
  public Integer getRamMb() {
    return ramMb;
  }

  public void setRamMb(Integer ramMb) {
    this.ramMb = ramMb;
  }


  public DeviceMetadata screenDensityDpi(Integer screenDensityDpi) {
    this.screenDensityDpi = screenDensityDpi;
    return this;
  }

  /**
   * Screen density in DPI
   * @return screenDensityDpi
   */
  @javax.annotation.Nullable
  public Integer getScreenDensityDpi() {
    return screenDensityDpi;
  }

  public void setScreenDensityDpi(Integer screenDensityDpi) {
    this.screenDensityDpi = screenDensityDpi;
  }


  public DeviceMetadata screenHeightPx(Integer screenHeightPx) {
    this.screenHeightPx = screenHeightPx;
    return this;
  }

  /**
   * Screen height in pixels
   * @return screenHeightPx
   */
  @javax.annotation.Nullable
  public Integer getScreenHeightPx() {
    return screenHeightPx;
  }

  public void setScreenHeightPx(Integer screenHeightPx) {
    this.screenHeightPx = screenHeightPx;
  }


  public DeviceMetadata screenWidthPx(Integer screenWidthPx) {
    this.screenWidthPx = screenWidthPx;
    return this;
  }

  /**
   * Screen width in pixels
   * @return screenWidthPx
   */
  @javax.annotation.Nullable
  public Integer getScreenWidthPx() {
    return screenWidthPx;
  }

  public void setScreenWidthPx(Integer screenWidthPx) {
    this.screenWidthPx = screenWidthPx;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceMetadata deviceMetadata = (DeviceMetadata) o;
    return Objects.equals(this.cpuMake, deviceMetadata.cpuMake) &&
        Objects.equals(this.cpuModel, deviceMetadata.cpuModel) &&
        Objects.equals(this.deviceClass, deviceMetadata.deviceClass) &&
        Objects.equals(this.glEsVersion, deviceMetadata.glEsVersion) &&
        Objects.equals(this.manufacturer, deviceMetadata.manufacturer) &&
        Objects.equals(this.nativePlatform, deviceMetadata.nativePlatform) &&
        Objects.equals(this.productName, deviceMetadata.productName) &&
        Objects.equals(this.ramMb, deviceMetadata.ramMb) &&
        Objects.equals(this.screenDensityDpi, deviceMetadata.screenDensityDpi) &&
        Objects.equals(this.screenHeightPx, deviceMetadata.screenHeightPx) &&
        Objects.equals(this.screenWidthPx, deviceMetadata.screenWidthPx);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuMake, cpuModel, deviceClass, glEsVersion, manufacturer, nativePlatform, productName, ramMb, screenDensityDpi, screenHeightPx, screenWidthPx);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceMetadata {\n");
    sb.append("    cpuMake: ").append(toIndentedString(cpuMake)).append("\n");
    sb.append("    cpuModel: ").append(toIndentedString(cpuModel)).append("\n");
    sb.append("    deviceClass: ").append(toIndentedString(deviceClass)).append("\n");
    sb.append("    glEsVersion: ").append(toIndentedString(glEsVersion)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    nativePlatform: ").append(toIndentedString(nativePlatform)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    ramMb: ").append(toIndentedString(ramMb)).append("\n");
    sb.append("    screenDensityDpi: ").append(toIndentedString(screenDensityDpi)).append("\n");
    sb.append("    screenHeightPx: ").append(toIndentedString(screenHeightPx)).append("\n");
    sb.append("    screenWidthPx: ").append(toIndentedString(screenWidthPx)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuMake");
    openapiFields.add("cpuModel");
    openapiFields.add("deviceClass");
    openapiFields.add("glEsVersion");
    openapiFields.add("manufacturer");
    openapiFields.add("nativePlatform");
    openapiFields.add("productName");
    openapiFields.add("ramMb");
    openapiFields.add("screenDensityDpi");
    openapiFields.add("screenHeightPx");
    openapiFields.add("screenWidthPx");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceMetadata is not found in the empty JSON string", DeviceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cpuMake") != null && !jsonObj.get("cpuMake").isJsonNull()) && !jsonObj.get("cpuMake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuMake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuMake").toString()));
      }
      if ((jsonObj.get("cpuModel") != null && !jsonObj.get("cpuModel").isJsonNull()) && !jsonObj.get("cpuModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpuModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpuModel").toString()));
      }
      if ((jsonObj.get("deviceClass") != null && !jsonObj.get("deviceClass").isJsonNull()) && !jsonObj.get("deviceClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceClass").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("nativePlatform") != null && !jsonObj.get("nativePlatform").isJsonNull()) && !jsonObj.get("nativePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nativePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nativePlatform").toString()));
      }
      if ((jsonObj.get("productName") != null && !jsonObj.get("productName").isJsonNull()) && !jsonObj.get("productName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceMetadata>() {
           @Override
           public void write(JsonWriter out, DeviceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceMetadata
   * @throws IOException if the JSON string is invalid with respect to DeviceMetadata
   */
  public static DeviceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceMetadata.class);
  }

  /**
   * Convert an instance of DeviceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

