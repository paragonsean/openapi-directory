/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RemoteInAppUpdateData;
import org.openapitools.client.model.Targeting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an app recovery action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppRecoveryAction {
  public static final String SERIALIZED_NAME_APP_RECOVERY_ID = "appRecoveryId";
  @SerializedName(SERIALIZED_NAME_APP_RECOVERY_ID)
  private String appRecoveryId;

  public static final String SERIALIZED_NAME_CANCEL_TIME = "cancelTime";
  @SerializedName(SERIALIZED_NAME_CANCEL_TIME)
  private String cancelTime;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DEPLOY_TIME = "deployTime";
  @SerializedName(SERIALIZED_NAME_DEPLOY_TIME)
  private String deployTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private String lastUpdateTime;

  public static final String SERIALIZED_NAME_REMOTE_IN_APP_UPDATE_DATA = "remoteInAppUpdateData";
  @SerializedName(SERIALIZED_NAME_REMOTE_IN_APP_UPDATE_DATA)
  private RemoteInAppUpdateData remoteInAppUpdateData;

  /**
   * The status of the recovery action.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNSPECIFIED("RECOVERY_STATUS_UNSPECIFIED"),
    
    ACTIVE("RECOVERY_STATUS_ACTIVE"),
    
    CANCELED("RECOVERY_STATUS_CANCELED"),
    
    DRAFT("RECOVERY_STATUS_DRAFT"),
    
    GENERATION_IN_PROGRESS("RECOVERY_STATUS_GENERATION_IN_PROGRESS"),
    
    GENERATION_FAILED("RECOVERY_STATUS_GENERATION_FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private Targeting targeting;

  public AppRecoveryAction() {
  }

  public AppRecoveryAction appRecoveryId(String appRecoveryId) {
    this.appRecoveryId = appRecoveryId;
    return this;
  }

  /**
   * ID corresponding to the app recovery action.
   * @return appRecoveryId
   */
  @javax.annotation.Nullable
  public String getAppRecoveryId() {
    return appRecoveryId;
  }

  public void setAppRecoveryId(String appRecoveryId) {
    this.appRecoveryId = appRecoveryId;
  }


  public AppRecoveryAction cancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
    return this;
  }

  /**
   * Timestamp of when the app recovery action is canceled by the developer. Only set if the recovery action has been canceled.
   * @return cancelTime
   */
  @javax.annotation.Nullable
  public String getCancelTime() {
    return cancelTime;
  }

  public void setCancelTime(String cancelTime) {
    this.cancelTime = cancelTime;
  }


  public AppRecoveryAction createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Timestamp of when the app recovery action is created by the developer. It is always set after creation of the recovery action.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public AppRecoveryAction deployTime(String deployTime) {
    this.deployTime = deployTime;
    return this;
  }

  /**
   * Timestamp of when the app recovery action is deployed to the users. Only set if the recovery action has been deployed.
   * @return deployTime
   */
  @javax.annotation.Nullable
  public String getDeployTime() {
    return deployTime;
  }

  public void setDeployTime(String deployTime) {
    this.deployTime = deployTime;
  }


  public AppRecoveryAction lastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Timestamp of when the developer last updated recovery action. In case the action is cancelled, it corresponds to cancellation time. It is always set after creation of the recovery action.
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(String lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }


  public AppRecoveryAction remoteInAppUpdateData(RemoteInAppUpdateData remoteInAppUpdateData) {
    this.remoteInAppUpdateData = remoteInAppUpdateData;
    return this;
  }

  /**
   * Get remoteInAppUpdateData
   * @return remoteInAppUpdateData
   */
  @javax.annotation.Nullable
  public RemoteInAppUpdateData getRemoteInAppUpdateData() {
    return remoteInAppUpdateData;
  }

  public void setRemoteInAppUpdateData(RemoteInAppUpdateData remoteInAppUpdateData) {
    this.remoteInAppUpdateData = remoteInAppUpdateData;
  }


  public AppRecoveryAction status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the recovery action.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AppRecoveryAction targeting(Targeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public Targeting getTargeting() {
    return targeting;
  }

  public void setTargeting(Targeting targeting) {
    this.targeting = targeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRecoveryAction appRecoveryAction = (AppRecoveryAction) o;
    return Objects.equals(this.appRecoveryId, appRecoveryAction.appRecoveryId) &&
        Objects.equals(this.cancelTime, appRecoveryAction.cancelTime) &&
        Objects.equals(this.createTime, appRecoveryAction.createTime) &&
        Objects.equals(this.deployTime, appRecoveryAction.deployTime) &&
        Objects.equals(this.lastUpdateTime, appRecoveryAction.lastUpdateTime) &&
        Objects.equals(this.remoteInAppUpdateData, appRecoveryAction.remoteInAppUpdateData) &&
        Objects.equals(this.status, appRecoveryAction.status) &&
        Objects.equals(this.targeting, appRecoveryAction.targeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appRecoveryId, cancelTime, createTime, deployTime, lastUpdateTime, remoteInAppUpdateData, status, targeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRecoveryAction {\n");
    sb.append("    appRecoveryId: ").append(toIndentedString(appRecoveryId)).append("\n");
    sb.append("    cancelTime: ").append(toIndentedString(cancelTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deployTime: ").append(toIndentedString(deployTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("    remoteInAppUpdateData: ").append(toIndentedString(remoteInAppUpdateData)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appRecoveryId");
    openapiFields.add("cancelTime");
    openapiFields.add("createTime");
    openapiFields.add("deployTime");
    openapiFields.add("lastUpdateTime");
    openapiFields.add("remoteInAppUpdateData");
    openapiFields.add("status");
    openapiFields.add("targeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppRecoveryAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRecoveryAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRecoveryAction is not found in the empty JSON string", AppRecoveryAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRecoveryAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRecoveryAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("appRecoveryId") != null && !jsonObj.get("appRecoveryId").isJsonNull()) && !jsonObj.get("appRecoveryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appRecoveryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appRecoveryId").toString()));
      }
      if ((jsonObj.get("cancelTime") != null && !jsonObj.get("cancelTime").isJsonNull()) && !jsonObj.get("cancelTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelTime").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deployTime") != null && !jsonObj.get("deployTime").isJsonNull()) && !jsonObj.get("deployTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployTime").toString()));
      }
      if ((jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) && !jsonObj.get("lastUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdateTime").toString()));
      }
      // validate the optional field `remoteInAppUpdateData`
      if (jsonObj.get("remoteInAppUpdateData") != null && !jsonObj.get("remoteInAppUpdateData").isJsonNull()) {
        RemoteInAppUpdateData.validateJsonElement(jsonObj.get("remoteInAppUpdateData"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        Targeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRecoveryAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRecoveryAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRecoveryAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRecoveryAction.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRecoveryAction>() {
           @Override
           public void write(JsonWriter out, AppRecoveryAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRecoveryAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppRecoveryAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppRecoveryAction
   * @throws IOException if the JSON string is invalid with respect to AppRecoveryAction
   */
  public static AppRecoveryAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRecoveryAction.class);
  }

  /**
   * Convert an instance of AppRecoveryAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

