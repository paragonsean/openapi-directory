/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserInitiatedCancellation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information specific to a subscription in canceled state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CanceledStateContext {
  public static final String SERIALIZED_NAME_DEVELOPER_INITIATED_CANCELLATION = "developerInitiatedCancellation";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_INITIATED_CANCELLATION)
  private Object developerInitiatedCancellation;

  public static final String SERIALIZED_NAME_REPLACEMENT_CANCELLATION = "replacementCancellation";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_CANCELLATION)
  private Object replacementCancellation;

  public static final String SERIALIZED_NAME_SYSTEM_INITIATED_CANCELLATION = "systemInitiatedCancellation";
  @SerializedName(SERIALIZED_NAME_SYSTEM_INITIATED_CANCELLATION)
  private Object systemInitiatedCancellation;

  public static final String SERIALIZED_NAME_USER_INITIATED_CANCELLATION = "userInitiatedCancellation";
  @SerializedName(SERIALIZED_NAME_USER_INITIATED_CANCELLATION)
  private UserInitiatedCancellation userInitiatedCancellation;

  public CanceledStateContext() {
  }

  public CanceledStateContext developerInitiatedCancellation(Object developerInitiatedCancellation) {
    this.developerInitiatedCancellation = developerInitiatedCancellation;
    return this;
  }

  /**
   * Information specific to cancellations initiated by developers.
   * @return developerInitiatedCancellation
   */
  @javax.annotation.Nullable
  public Object getDeveloperInitiatedCancellation() {
    return developerInitiatedCancellation;
  }

  public void setDeveloperInitiatedCancellation(Object developerInitiatedCancellation) {
    this.developerInitiatedCancellation = developerInitiatedCancellation;
  }


  public CanceledStateContext replacementCancellation(Object replacementCancellation) {
    this.replacementCancellation = replacementCancellation;
    return this;
  }

  /**
   * Information specific to cancellations caused by subscription replacement.
   * @return replacementCancellation
   */
  @javax.annotation.Nullable
  public Object getReplacementCancellation() {
    return replacementCancellation;
  }

  public void setReplacementCancellation(Object replacementCancellation) {
    this.replacementCancellation = replacementCancellation;
  }


  public CanceledStateContext systemInitiatedCancellation(Object systemInitiatedCancellation) {
    this.systemInitiatedCancellation = systemInitiatedCancellation;
    return this;
  }

  /**
   * Information specific to cancellations initiated by Google system.
   * @return systemInitiatedCancellation
   */
  @javax.annotation.Nullable
  public Object getSystemInitiatedCancellation() {
    return systemInitiatedCancellation;
  }

  public void setSystemInitiatedCancellation(Object systemInitiatedCancellation) {
    this.systemInitiatedCancellation = systemInitiatedCancellation;
  }


  public CanceledStateContext userInitiatedCancellation(UserInitiatedCancellation userInitiatedCancellation) {
    this.userInitiatedCancellation = userInitiatedCancellation;
    return this;
  }

  /**
   * Get userInitiatedCancellation
   * @return userInitiatedCancellation
   */
  @javax.annotation.Nullable
  public UserInitiatedCancellation getUserInitiatedCancellation() {
    return userInitiatedCancellation;
  }

  public void setUserInitiatedCancellation(UserInitiatedCancellation userInitiatedCancellation) {
    this.userInitiatedCancellation = userInitiatedCancellation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CanceledStateContext canceledStateContext = (CanceledStateContext) o;
    return Objects.equals(this.developerInitiatedCancellation, canceledStateContext.developerInitiatedCancellation) &&
        Objects.equals(this.replacementCancellation, canceledStateContext.replacementCancellation) &&
        Objects.equals(this.systemInitiatedCancellation, canceledStateContext.systemInitiatedCancellation) &&
        Objects.equals(this.userInitiatedCancellation, canceledStateContext.userInitiatedCancellation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(developerInitiatedCancellation, replacementCancellation, systemInitiatedCancellation, userInitiatedCancellation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CanceledStateContext {\n");
    sb.append("    developerInitiatedCancellation: ").append(toIndentedString(developerInitiatedCancellation)).append("\n");
    sb.append("    replacementCancellation: ").append(toIndentedString(replacementCancellation)).append("\n");
    sb.append("    systemInitiatedCancellation: ").append(toIndentedString(systemInitiatedCancellation)).append("\n");
    sb.append("    userInitiatedCancellation: ").append(toIndentedString(userInitiatedCancellation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("developerInitiatedCancellation");
    openapiFields.add("replacementCancellation");
    openapiFields.add("systemInitiatedCancellation");
    openapiFields.add("userInitiatedCancellation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CanceledStateContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CanceledStateContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CanceledStateContext is not found in the empty JSON string", CanceledStateContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CanceledStateContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CanceledStateContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `userInitiatedCancellation`
      if (jsonObj.get("userInitiatedCancellation") != null && !jsonObj.get("userInitiatedCancellation").isJsonNull()) {
        UserInitiatedCancellation.validateJsonElement(jsonObj.get("userInitiatedCancellation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CanceledStateContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CanceledStateContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CanceledStateContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CanceledStateContext.class));

       return (TypeAdapter<T>) new TypeAdapter<CanceledStateContext>() {
           @Override
           public void write(JsonWriter out, CanceledStateContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CanceledStateContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CanceledStateContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CanceledStateContext
   * @throws IOException if the JSON string is invalid with respect to CanceledStateContext
   */
  public static CanceledStateContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CanceledStateContext.class);
  }

  /**
   * Convert an instance of CanceledStateContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

