/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrackTargetedCountry;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Resource for per-track country availability information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackCountryAvailability {
  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<TrackTargetedCountry> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_REST_OF_WORLD = "restOfWorld";
  @SerializedName(SERIALIZED_NAME_REST_OF_WORLD)
  private Boolean restOfWorld;

  public static final String SERIALIZED_NAME_SYNC_WITH_PRODUCTION = "syncWithProduction";
  @SerializedName(SERIALIZED_NAME_SYNC_WITH_PRODUCTION)
  private Boolean syncWithProduction;

  public TrackCountryAvailability() {
  }

  public TrackCountryAvailability countries(List<TrackTargetedCountry> countries) {
    this.countries = countries;
    return this;
  }

  public TrackCountryAvailability addCountriesItem(TrackTargetedCountry countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * A list of one or more countries where artifacts in this track are available. This list includes all countries that are targeted by the track, even if only specific carriers are targeted in that country.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<TrackTargetedCountry> getCountries() {
    return countries;
  }

  public void setCountries(List<TrackTargetedCountry> countries) {
    this.countries = countries;
  }


  public TrackCountryAvailability restOfWorld(Boolean restOfWorld) {
    this.restOfWorld = restOfWorld;
    return this;
  }

  /**
   * Whether artifacts in this track are available to \&quot;rest of the world\&quot; countries.
   * @return restOfWorld
   */
  @javax.annotation.Nullable
  public Boolean getRestOfWorld() {
    return restOfWorld;
  }

  public void setRestOfWorld(Boolean restOfWorld) {
    this.restOfWorld = restOfWorld;
  }


  public TrackCountryAvailability syncWithProduction(Boolean syncWithProduction) {
    this.syncWithProduction = syncWithProduction;
    return this;
  }

  /**
   * Whether this track&#39;s availability is synced with the default production track. See https://support.google.com/googleplay/android-developer/answer/7550024 for more information on syncing country availability with production. Note that if this is true, the returned \&quot;countries\&quot; and \&quot;rest_of_world\&quot; fields will reflect the values for the default production track.
   * @return syncWithProduction
   */
  @javax.annotation.Nullable
  public Boolean getSyncWithProduction() {
    return syncWithProduction;
  }

  public void setSyncWithProduction(Boolean syncWithProduction) {
    this.syncWithProduction = syncWithProduction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackCountryAvailability trackCountryAvailability = (TrackCountryAvailability) o;
    return Objects.equals(this.countries, trackCountryAvailability.countries) &&
        Objects.equals(this.restOfWorld, trackCountryAvailability.restOfWorld) &&
        Objects.equals(this.syncWithProduction, trackCountryAvailability.syncWithProduction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countries, restOfWorld, syncWithProduction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackCountryAvailability {\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    restOfWorld: ").append(toIndentedString(restOfWorld)).append("\n");
    sb.append("    syncWithProduction: ").append(toIndentedString(syncWithProduction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countries");
    openapiFields.add("restOfWorld");
    openapiFields.add("syncWithProduction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackCountryAvailability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackCountryAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackCountryAvailability is not found in the empty JSON string", TrackCountryAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackCountryAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackCountryAvailability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
        if (jsonArraycountries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("countries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
          }

          // validate the optional field `countries` (array)
          for (int i = 0; i < jsonArraycountries.size(); i++) {
            TrackTargetedCountry.validateJsonElement(jsonArraycountries.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackCountryAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackCountryAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackCountryAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackCountryAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackCountryAvailability>() {
           @Override
           public void write(JsonWriter out, TrackCountryAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackCountryAvailability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackCountryAvailability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackCountryAvailability
   * @throws IOException if the JSON string is invalid with respect to TrackCountryAvailability
   */
  public static TrackCountryAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackCountryAvailability.class);
  }

  /**
   * Convert an instance of TrackCountryAvailability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

