/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OtherRegionsSubscriptionOfferPhaseConfig;
import org.openapitools.client.model.RegionalSubscriptionOfferPhaseConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single phase of a subscription offer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionOfferPhase {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_OTHER_REGIONS_CONFIG = "otherRegionsConfig";
  @SerializedName(SERIALIZED_NAME_OTHER_REGIONS_CONFIG)
  private OtherRegionsSubscriptionOfferPhaseConfig otherRegionsConfig;

  public static final String SERIALIZED_NAME_RECURRENCE_COUNT = "recurrenceCount";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_COUNT)
  private Integer recurrenceCount;

  public static final String SERIALIZED_NAME_REGIONAL_CONFIGS = "regionalConfigs";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CONFIGS)
  private List<RegionalSubscriptionOfferPhaseConfig> regionalConfigs = new ArrayList<>();

  public SubscriptionOfferPhase() {
  }

  public SubscriptionOfferPhase duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Required. The duration of a single recurrence of this phase. Specified in ISO 8601 format.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public SubscriptionOfferPhase otherRegionsConfig(OtherRegionsSubscriptionOfferPhaseConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
    return this;
  }

  /**
   * Get otherRegionsConfig
   * @return otherRegionsConfig
   */
  @javax.annotation.Nullable
  public OtherRegionsSubscriptionOfferPhaseConfig getOtherRegionsConfig() {
    return otherRegionsConfig;
  }

  public void setOtherRegionsConfig(OtherRegionsSubscriptionOfferPhaseConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
  }


  public SubscriptionOfferPhase recurrenceCount(Integer recurrenceCount) {
    this.recurrenceCount = recurrenceCount;
    return this;
  }

  /**
   * Required. The number of times this phase repeats. If this offer phase is not free, each recurrence charges the user the price of this offer phase.
   * @return recurrenceCount
   */
  @javax.annotation.Nullable
  public Integer getRecurrenceCount() {
    return recurrenceCount;
  }

  public void setRecurrenceCount(Integer recurrenceCount) {
    this.recurrenceCount = recurrenceCount;
  }


  public SubscriptionOfferPhase regionalConfigs(List<RegionalSubscriptionOfferPhaseConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
    return this;
  }

  public SubscriptionOfferPhase addRegionalConfigsItem(RegionalSubscriptionOfferPhaseConfig regionalConfigsItem) {
    if (this.regionalConfigs == null) {
      this.regionalConfigs = new ArrayList<>();
    }
    this.regionalConfigs.add(regionalConfigsItem);
    return this;
  }

  /**
   * Required. The region-specific configuration of this offer phase. This list must contain exactly one entry for each region for which the subscription offer has a regional config.
   * @return regionalConfigs
   */
  @javax.annotation.Nullable
  public List<RegionalSubscriptionOfferPhaseConfig> getRegionalConfigs() {
    return regionalConfigs;
  }

  public void setRegionalConfigs(List<RegionalSubscriptionOfferPhaseConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionOfferPhase subscriptionOfferPhase = (SubscriptionOfferPhase) o;
    return Objects.equals(this.duration, subscriptionOfferPhase.duration) &&
        Objects.equals(this.otherRegionsConfig, subscriptionOfferPhase.otherRegionsConfig) &&
        Objects.equals(this.recurrenceCount, subscriptionOfferPhase.recurrenceCount) &&
        Objects.equals(this.regionalConfigs, subscriptionOfferPhase.regionalConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, otherRegionsConfig, recurrenceCount, regionalConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionOfferPhase {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    otherRegionsConfig: ").append(toIndentedString(otherRegionsConfig)).append("\n");
    sb.append("    recurrenceCount: ").append(toIndentedString(recurrenceCount)).append("\n");
    sb.append("    regionalConfigs: ").append(toIndentedString(regionalConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("otherRegionsConfig");
    openapiFields.add("recurrenceCount");
    openapiFields.add("regionalConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionOfferPhase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionOfferPhase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionOfferPhase is not found in the empty JSON string", SubscriptionOfferPhase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionOfferPhase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionOfferPhase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // validate the optional field `otherRegionsConfig`
      if (jsonObj.get("otherRegionsConfig") != null && !jsonObj.get("otherRegionsConfig").isJsonNull()) {
        OtherRegionsSubscriptionOfferPhaseConfig.validateJsonElement(jsonObj.get("otherRegionsConfig"));
      }
      if (jsonObj.get("regionalConfigs") != null && !jsonObj.get("regionalConfigs").isJsonNull()) {
        JsonArray jsonArrayregionalConfigs = jsonObj.getAsJsonArray("regionalConfigs");
        if (jsonArrayregionalConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regionalConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regionalConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("regionalConfigs").toString()));
          }

          // validate the optional field `regionalConfigs` (array)
          for (int i = 0; i < jsonArrayregionalConfigs.size(); i++) {
            RegionalSubscriptionOfferPhaseConfig.validateJsonElement(jsonArrayregionalConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionOfferPhase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionOfferPhase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionOfferPhase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionOfferPhase.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionOfferPhase>() {
           @Override
           public void write(JsonWriter out, SubscriptionOfferPhase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionOfferPhase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionOfferPhase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionOfferPhase
   * @throws IOException if the JSON string is invalid with respect to SubscriptionOfferPhase
   */
  public static SubscriptionOfferPhase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionOfferPhase.class);
  }

  /**
   * Convert an instance of SubscriptionOfferPhase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

