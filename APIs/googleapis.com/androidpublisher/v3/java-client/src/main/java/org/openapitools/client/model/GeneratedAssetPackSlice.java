/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Download metadata for an asset pack slice.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeneratedAssetPackSlice {
  public static final String SERIALIZED_NAME_DOWNLOAD_ID = "downloadId";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_ID)
  private String downloadId;

  public static final String SERIALIZED_NAME_MODULE_NAME = "moduleName";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_SLICE_ID = "sliceId";
  @SerializedName(SERIALIZED_NAME_SLICE_ID)
  private String sliceId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public GeneratedAssetPackSlice() {
  }

  public GeneratedAssetPackSlice downloadId(String downloadId) {
    this.downloadId = downloadId;
    return this;
  }

  /**
   * Download ID, which uniquely identifies the APK to download. Should be supplied to &#x60;generatedapks.download&#x60; method.
   * @return downloadId
   */
  @javax.annotation.Nullable
  public String getDownloadId() {
    return downloadId;
  }

  public void setDownloadId(String downloadId) {
    this.downloadId = downloadId;
  }


  public GeneratedAssetPackSlice moduleName(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }

  /**
   * Name of the module that this asset slice belongs to.
   * @return moduleName
   */
  @javax.annotation.Nullable
  public String getModuleName() {
    return moduleName;
  }

  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public GeneratedAssetPackSlice sliceId(String sliceId) {
    this.sliceId = sliceId;
    return this;
  }

  /**
   * Asset slice ID.
   * @return sliceId
   */
  @javax.annotation.Nullable
  public String getSliceId() {
    return sliceId;
  }

  public void setSliceId(String sliceId) {
    this.sliceId = sliceId;
  }


  public GeneratedAssetPackSlice version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Asset module version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneratedAssetPackSlice generatedAssetPackSlice = (GeneratedAssetPackSlice) o;
    return Objects.equals(this.downloadId, generatedAssetPackSlice.downloadId) &&
        Objects.equals(this.moduleName, generatedAssetPackSlice.moduleName) &&
        Objects.equals(this.sliceId, generatedAssetPackSlice.sliceId) &&
        Objects.equals(this.version, generatedAssetPackSlice.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadId, moduleName, sliceId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneratedAssetPackSlice {\n");
    sb.append("    downloadId: ").append(toIndentedString(downloadId)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    sliceId: ").append(toIndentedString(sliceId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadId");
    openapiFields.add("moduleName");
    openapiFields.add("sliceId");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeneratedAssetPackSlice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeneratedAssetPackSlice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneratedAssetPackSlice is not found in the empty JSON string", GeneratedAssetPackSlice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeneratedAssetPackSlice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeneratedAssetPackSlice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("downloadId") != null && !jsonObj.get("downloadId").isJsonNull()) && !jsonObj.get("downloadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadId").toString()));
      }
      if ((jsonObj.get("moduleName") != null && !jsonObj.get("moduleName").isJsonNull()) && !jsonObj.get("moduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleName").toString()));
      }
      if ((jsonObj.get("sliceId") != null && !jsonObj.get("sliceId").isJsonNull()) && !jsonObj.get("sliceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sliceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sliceId").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneratedAssetPackSlice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneratedAssetPackSlice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneratedAssetPackSlice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneratedAssetPackSlice.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneratedAssetPackSlice>() {
           @Override
           public void write(JsonWriter out, GeneratedAssetPackSlice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneratedAssetPackSlice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeneratedAssetPackSlice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeneratedAssetPackSlice
   * @throws IOException if the JSON string is invalid with respect to GeneratedAssetPackSlice
   */
  public static GeneratedAssetPackSlice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneratedAssetPackSlice.class);
  }

  /**
   * Convert an instance of GeneratedAssetPackSlice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

