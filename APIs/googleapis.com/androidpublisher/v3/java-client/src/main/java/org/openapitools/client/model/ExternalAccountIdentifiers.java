/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User account identifier in the third-party service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalAccountIdentifiers {
  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "externalAccountId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_OBFUSCATED_EXTERNAL_ACCOUNT_ID = "obfuscatedExternalAccountId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EXTERNAL_ACCOUNT_ID)
  private String obfuscatedExternalAccountId;

  public static final String SERIALIZED_NAME_OBFUSCATED_EXTERNAL_PROFILE_ID = "obfuscatedExternalProfileId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EXTERNAL_PROFILE_ID)
  private String obfuscatedExternalProfileId;

  public ExternalAccountIdentifiers() {
  }

  public ExternalAccountIdentifiers externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public ExternalAccountIdentifiers obfuscatedExternalAccountId(String obfuscatedExternalAccountId) {
    this.obfuscatedExternalAccountId = obfuscatedExternalAccountId;
    return this;
  }

  /**
   * An obfuscated version of the id that is uniquely associated with the user&#39;s account in your app. Present for the following purchases: * If account linking happened as part of the subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
   * @return obfuscatedExternalAccountId
   */
  @javax.annotation.Nullable
  public String getObfuscatedExternalAccountId() {
    return obfuscatedExternalAccountId;
  }

  public void setObfuscatedExternalAccountId(String obfuscatedExternalAccountId) {
    this.obfuscatedExternalAccountId = obfuscatedExternalAccountId;
  }


  public ExternalAccountIdentifiers obfuscatedExternalProfileId(String obfuscatedExternalProfileId) {
    this.obfuscatedExternalProfileId = obfuscatedExternalProfileId;
    return this;
  }

  /**
   * An obfuscated version of the id that is uniquely associated with the user&#39;s profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
   * @return obfuscatedExternalProfileId
   */
  @javax.annotation.Nullable
  public String getObfuscatedExternalProfileId() {
    return obfuscatedExternalProfileId;
  }

  public void setObfuscatedExternalProfileId(String obfuscatedExternalProfileId) {
    this.obfuscatedExternalProfileId = obfuscatedExternalProfileId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalAccountIdentifiers externalAccountIdentifiers = (ExternalAccountIdentifiers) o;
    return Objects.equals(this.externalAccountId, externalAccountIdentifiers.externalAccountId) &&
        Objects.equals(this.obfuscatedExternalAccountId, externalAccountIdentifiers.obfuscatedExternalAccountId) &&
        Objects.equals(this.obfuscatedExternalProfileId, externalAccountIdentifiers.obfuscatedExternalProfileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalAccountId, obfuscatedExternalAccountId, obfuscatedExternalProfileId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalAccountIdentifiers {\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    obfuscatedExternalAccountId: ").append(toIndentedString(obfuscatedExternalAccountId)).append("\n");
    sb.append("    obfuscatedExternalProfileId: ").append(toIndentedString(obfuscatedExternalProfileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalAccountId");
    openapiFields.add("obfuscatedExternalAccountId");
    openapiFields.add("obfuscatedExternalProfileId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalAccountIdentifiers
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalAccountIdentifiers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalAccountIdentifiers is not found in the empty JSON string", ExternalAccountIdentifiers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalAccountIdentifiers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalAccountIdentifiers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("externalAccountId") != null && !jsonObj.get("externalAccountId").isJsonNull()) && !jsonObj.get("externalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccountId").toString()));
      }
      if ((jsonObj.get("obfuscatedExternalAccountId") != null && !jsonObj.get("obfuscatedExternalAccountId").isJsonNull()) && !jsonObj.get("obfuscatedExternalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedExternalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedExternalAccountId").toString()));
      }
      if ((jsonObj.get("obfuscatedExternalProfileId") != null && !jsonObj.get("obfuscatedExternalProfileId").isJsonNull()) && !jsonObj.get("obfuscatedExternalProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedExternalProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedExternalProfileId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalAccountIdentifiers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalAccountIdentifiers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalAccountIdentifiers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalAccountIdentifiers.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalAccountIdentifiers>() {
           @Override
           public void write(JsonWriter out, ExternalAccountIdentifiers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalAccountIdentifiers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalAccountIdentifiers given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalAccountIdentifiers
   * @throws IOException if the JSON string is invalid with respect to ExternalAccountIdentifiers
   */
  public static ExternalAccountIdentifiers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalAccountIdentifiers.class);
  }

  /**
   * Convert an instance of ExternalAccountIdentifiers to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

