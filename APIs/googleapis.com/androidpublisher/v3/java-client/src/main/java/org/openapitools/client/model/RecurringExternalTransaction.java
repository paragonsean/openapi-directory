/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExternalSubscription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecurringExternalTransaction {
  public static final String SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION = "externalSubscription";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_SUBSCRIPTION)
  private ExternalSubscription externalSubscription;

  public static final String SERIALIZED_NAME_EXTERNAL_TRANSACTION_TOKEN = "externalTransactionToken";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TRANSACTION_TOKEN)
  private String externalTransactionToken;

  public static final String SERIALIZED_NAME_INITIAL_EXTERNAL_TRANSACTION_ID = "initialExternalTransactionId";
  @SerializedName(SERIALIZED_NAME_INITIAL_EXTERNAL_TRANSACTION_ID)
  private String initialExternalTransactionId;

  /**
   * Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.
   */
  @JsonAdapter(MigratedTransactionProgramEnum.Adapter.class)
  public enum MigratedTransactionProgramEnum {
    EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED("EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED"),
    
    USER_CHOICE_BILLING("USER_CHOICE_BILLING"),
    
    ALTERTNATIVE_BILLING_ONLY("ALTERTNATIVE_BILLING_ONLY");

    private String value;

    MigratedTransactionProgramEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigratedTransactionProgramEnum fromValue(String value) {
      for (MigratedTransactionProgramEnum b : MigratedTransactionProgramEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigratedTransactionProgramEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigratedTransactionProgramEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigratedTransactionProgramEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigratedTransactionProgramEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigratedTransactionProgramEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATED_TRANSACTION_PROGRAM = "migratedTransactionProgram";
  @SerializedName(SERIALIZED_NAME_MIGRATED_TRANSACTION_PROGRAM)
  private MigratedTransactionProgramEnum migratedTransactionProgram;

  public RecurringExternalTransaction() {
  }

  public RecurringExternalTransaction externalSubscription(ExternalSubscription externalSubscription) {
    this.externalSubscription = externalSubscription;
    return this;
  }

  /**
   * Get externalSubscription
   * @return externalSubscription
   */
  @javax.annotation.Nullable
  public ExternalSubscription getExternalSubscription() {
    return externalSubscription;
  }

  public void setExternalSubscription(ExternalSubscription externalSubscription) {
    this.externalSubscription = externalSubscription;
  }


  public RecurringExternalTransaction externalTransactionToken(String externalTransactionToken) {
    this.externalTransactionToken = externalTransactionToken;
    return this;
  }

  /**
   * Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.
   * @return externalTransactionToken
   */
  @javax.annotation.Nullable
  public String getExternalTransactionToken() {
    return externalTransactionToken;
  }

  public void setExternalTransactionToken(String externalTransactionToken) {
    this.externalTransactionToken = externalTransactionToken;
  }


  public RecurringExternalTransaction initialExternalTransactionId(String initialExternalTransactionId) {
    this.initialExternalTransactionId = initialExternalTransactionId;
    return this;
  }

  /**
   * The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.
   * @return initialExternalTransactionId
   */
  @javax.annotation.Nullable
  public String getInitialExternalTransactionId() {
    return initialExternalTransactionId;
  }

  public void setInitialExternalTransactionId(String initialExternalTransactionId) {
    this.initialExternalTransactionId = initialExternalTransactionId;
  }


  public RecurringExternalTransaction migratedTransactionProgram(MigratedTransactionProgramEnum migratedTransactionProgram) {
    this.migratedTransactionProgram = migratedTransactionProgram;
    return this;
  }

  /**
   * Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.
   * @return migratedTransactionProgram
   */
  @javax.annotation.Nullable
  public MigratedTransactionProgramEnum getMigratedTransactionProgram() {
    return migratedTransactionProgram;
  }

  public void setMigratedTransactionProgram(MigratedTransactionProgramEnum migratedTransactionProgram) {
    this.migratedTransactionProgram = migratedTransactionProgram;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurringExternalTransaction recurringExternalTransaction = (RecurringExternalTransaction) o;
    return Objects.equals(this.externalSubscription, recurringExternalTransaction.externalSubscription) &&
        Objects.equals(this.externalTransactionToken, recurringExternalTransaction.externalTransactionToken) &&
        Objects.equals(this.initialExternalTransactionId, recurringExternalTransaction.initialExternalTransactionId) &&
        Objects.equals(this.migratedTransactionProgram, recurringExternalTransaction.migratedTransactionProgram);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalSubscription, externalTransactionToken, initialExternalTransactionId, migratedTransactionProgram);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurringExternalTransaction {\n");
    sb.append("    externalSubscription: ").append(toIndentedString(externalSubscription)).append("\n");
    sb.append("    externalTransactionToken: ").append(toIndentedString(externalTransactionToken)).append("\n");
    sb.append("    initialExternalTransactionId: ").append(toIndentedString(initialExternalTransactionId)).append("\n");
    sb.append("    migratedTransactionProgram: ").append(toIndentedString(migratedTransactionProgram)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("externalSubscription");
    openapiFields.add("externalTransactionToken");
    openapiFields.add("initialExternalTransactionId");
    openapiFields.add("migratedTransactionProgram");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurringExternalTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurringExternalTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurringExternalTransaction is not found in the empty JSON string", RecurringExternalTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurringExternalTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurringExternalTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `externalSubscription`
      if (jsonObj.get("externalSubscription") != null && !jsonObj.get("externalSubscription").isJsonNull()) {
        ExternalSubscription.validateJsonElement(jsonObj.get("externalSubscription"));
      }
      if ((jsonObj.get("externalTransactionToken") != null && !jsonObj.get("externalTransactionToken").isJsonNull()) && !jsonObj.get("externalTransactionToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalTransactionToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalTransactionToken").toString()));
      }
      if ((jsonObj.get("initialExternalTransactionId") != null && !jsonObj.get("initialExternalTransactionId").isJsonNull()) && !jsonObj.get("initialExternalTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialExternalTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialExternalTransactionId").toString()));
      }
      if ((jsonObj.get("migratedTransactionProgram") != null && !jsonObj.get("migratedTransactionProgram").isJsonNull()) && !jsonObj.get("migratedTransactionProgram").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migratedTransactionProgram` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migratedTransactionProgram").toString()));
      }
      // validate the optional field `migratedTransactionProgram`
      if (jsonObj.get("migratedTransactionProgram") != null && !jsonObj.get("migratedTransactionProgram").isJsonNull()) {
        MigratedTransactionProgramEnum.validateJsonElement(jsonObj.get("migratedTransactionProgram"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurringExternalTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurringExternalTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurringExternalTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurringExternalTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurringExternalTransaction>() {
           @Override
           public void write(JsonWriter out, RecurringExternalTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurringExternalTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurringExternalTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurringExternalTransaction
   * @throws IOException if the JSON string is invalid with respect to RecurringExternalTransaction
   */
  public static RecurringExternalTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurringExternalTransaction.class);
  }

  /**
   * Convert an instance of RecurringExternalTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

