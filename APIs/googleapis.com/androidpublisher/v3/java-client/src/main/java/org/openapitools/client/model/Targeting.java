/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllUsers;
import org.openapitools.client.model.AndroidSdks;
import org.openapitools.client.model.AppVersionList;
import org.openapitools.client.model.AppVersionRange;
import org.openapitools.client.model.Regions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Targeting details for a recovery action such as regions, android sdk levels, app versions etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Targeting {
  public static final String SERIALIZED_NAME_ALL_USERS = "allUsers";
  @SerializedName(SERIALIZED_NAME_ALL_USERS)
  private AllUsers allUsers;

  public static final String SERIALIZED_NAME_ANDROID_SDKS = "androidSdks";
  @SerializedName(SERIALIZED_NAME_ANDROID_SDKS)
  private AndroidSdks androidSdks;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private Regions regions;

  public static final String SERIALIZED_NAME_VERSION_LIST = "versionList";
  @SerializedName(SERIALIZED_NAME_VERSION_LIST)
  private AppVersionList versionList;

  public static final String SERIALIZED_NAME_VERSION_RANGE = "versionRange";
  @SerializedName(SERIALIZED_NAME_VERSION_RANGE)
  private AppVersionRange versionRange;

  public Targeting() {
  }

  public Targeting allUsers(AllUsers allUsers) {
    this.allUsers = allUsers;
    return this;
  }

  /**
   * Get allUsers
   * @return allUsers
   */
  @javax.annotation.Nullable
  public AllUsers getAllUsers() {
    return allUsers;
  }

  public void setAllUsers(AllUsers allUsers) {
    this.allUsers = allUsers;
  }


  public Targeting androidSdks(AndroidSdks androidSdks) {
    this.androidSdks = androidSdks;
    return this;
  }

  /**
   * Get androidSdks
   * @return androidSdks
   */
  @javax.annotation.Nullable
  public AndroidSdks getAndroidSdks() {
    return androidSdks;
  }

  public void setAndroidSdks(AndroidSdks androidSdks) {
    this.androidSdks = androidSdks;
  }


  public Targeting regions(Regions regions) {
    this.regions = regions;
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public Regions getRegions() {
    return regions;
  }

  public void setRegions(Regions regions) {
    this.regions = regions;
  }


  public Targeting versionList(AppVersionList versionList) {
    this.versionList = versionList;
    return this;
  }

  /**
   * Get versionList
   * @return versionList
   */
  @javax.annotation.Nullable
  public AppVersionList getVersionList() {
    return versionList;
  }

  public void setVersionList(AppVersionList versionList) {
    this.versionList = versionList;
  }


  public Targeting versionRange(AppVersionRange versionRange) {
    this.versionRange = versionRange;
    return this;
  }

  /**
   * Get versionRange
   * @return versionRange
   */
  @javax.annotation.Nullable
  public AppVersionRange getVersionRange() {
    return versionRange;
  }

  public void setVersionRange(AppVersionRange versionRange) {
    this.versionRange = versionRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Targeting targeting = (Targeting) o;
    return Objects.equals(this.allUsers, targeting.allUsers) &&
        Objects.equals(this.androidSdks, targeting.androidSdks) &&
        Objects.equals(this.regions, targeting.regions) &&
        Objects.equals(this.versionList, targeting.versionList) &&
        Objects.equals(this.versionRange, targeting.versionRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allUsers, androidSdks, regions, versionList, versionRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Targeting {\n");
    sb.append("    allUsers: ").append(toIndentedString(allUsers)).append("\n");
    sb.append("    androidSdks: ").append(toIndentedString(androidSdks)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    versionList: ").append(toIndentedString(versionList)).append("\n");
    sb.append("    versionRange: ").append(toIndentedString(versionRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allUsers");
    openapiFields.add("androidSdks");
    openapiFields.add("regions");
    openapiFields.add("versionList");
    openapiFields.add("versionRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Targeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Targeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Targeting is not found in the empty JSON string", Targeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Targeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Targeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `allUsers`
      if (jsonObj.get("allUsers") != null && !jsonObj.get("allUsers").isJsonNull()) {
        AllUsers.validateJsonElement(jsonObj.get("allUsers"));
      }
      // validate the optional field `androidSdks`
      if (jsonObj.get("androidSdks") != null && !jsonObj.get("androidSdks").isJsonNull()) {
        AndroidSdks.validateJsonElement(jsonObj.get("androidSdks"));
      }
      // validate the optional field `regions`
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull()) {
        Regions.validateJsonElement(jsonObj.get("regions"));
      }
      // validate the optional field `versionList`
      if (jsonObj.get("versionList") != null && !jsonObj.get("versionList").isJsonNull()) {
        AppVersionList.validateJsonElement(jsonObj.get("versionList"));
      }
      // validate the optional field `versionRange`
      if (jsonObj.get("versionRange") != null && !jsonObj.get("versionRange").isJsonNull()) {
        AppVersionRange.validateJsonElement(jsonObj.get("versionRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Targeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Targeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Targeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Targeting.class));

       return (TypeAdapter<T>) new TypeAdapter<Targeting>() {
           @Override
           public void write(JsonWriter out, Targeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Targeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Targeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Targeting
   * @throws IOException if the JSON string is invalid with respect to Targeting
   */
  public static Targeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Targeting.class);
  }

  /**
   * Convert an instance of Targeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

