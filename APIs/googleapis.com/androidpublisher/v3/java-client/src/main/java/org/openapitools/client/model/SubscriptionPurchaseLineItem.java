/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoRenewingPlan;
import org.openapitools.client.model.DeferredItemReplacement;
import org.openapitools.client.model.OfferDetails;
import org.openapitools.client.model.PrepaidPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Item-level info for a subscription purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPurchaseLineItem {
  public static final String SERIALIZED_NAME_AUTO_RENEWING_PLAN = "autoRenewingPlan";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEWING_PLAN)
  private AutoRenewingPlan autoRenewingPlan;

  public static final String SERIALIZED_NAME_DEFERRED_ITEM_REPLACEMENT = "deferredItemReplacement";
  @SerializedName(SERIALIZED_NAME_DEFERRED_ITEM_REPLACEMENT)
  private DeferredItemReplacement deferredItemReplacement;

  public static final String SERIALIZED_NAME_EXPIRY_TIME = "expiryTime";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME)
  private String expiryTime;

  public static final String SERIALIZED_NAME_OFFER_DETAILS = "offerDetails";
  @SerializedName(SERIALIZED_NAME_OFFER_DETAILS)
  private OfferDetails offerDetails;

  public static final String SERIALIZED_NAME_PREPAID_PLAN = "prepaidPlan";
  @SerializedName(SERIALIZED_NAME_PREPAID_PLAN)
  private PrepaidPlan prepaidPlan;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public SubscriptionPurchaseLineItem() {
  }

  public SubscriptionPurchaseLineItem autoRenewingPlan(AutoRenewingPlan autoRenewingPlan) {
    this.autoRenewingPlan = autoRenewingPlan;
    return this;
  }

  /**
   * Get autoRenewingPlan
   * @return autoRenewingPlan
   */
  @javax.annotation.Nullable
  public AutoRenewingPlan getAutoRenewingPlan() {
    return autoRenewingPlan;
  }

  public void setAutoRenewingPlan(AutoRenewingPlan autoRenewingPlan) {
    this.autoRenewingPlan = autoRenewingPlan;
  }


  public SubscriptionPurchaseLineItem deferredItemReplacement(DeferredItemReplacement deferredItemReplacement) {
    this.deferredItemReplacement = deferredItemReplacement;
    return this;
  }

  /**
   * Get deferredItemReplacement
   * @return deferredItemReplacement
   */
  @javax.annotation.Nullable
  public DeferredItemReplacement getDeferredItemReplacement() {
    return deferredItemReplacement;
  }

  public void setDeferredItemReplacement(DeferredItemReplacement deferredItemReplacement) {
    this.deferredItemReplacement = deferredItemReplacement;
  }


  public SubscriptionPurchaseLineItem expiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
    return this;
  }

  /**
   * Time at which the subscription expired or will expire unless the access is extended (ex. renews).
   * @return expiryTime
   */
  @javax.annotation.Nullable
  public String getExpiryTime() {
    return expiryTime;
  }

  public void setExpiryTime(String expiryTime) {
    this.expiryTime = expiryTime;
  }


  public SubscriptionPurchaseLineItem offerDetails(OfferDetails offerDetails) {
    this.offerDetails = offerDetails;
    return this;
  }

  /**
   * Get offerDetails
   * @return offerDetails
   */
  @javax.annotation.Nullable
  public OfferDetails getOfferDetails() {
    return offerDetails;
  }

  public void setOfferDetails(OfferDetails offerDetails) {
    this.offerDetails = offerDetails;
  }


  public SubscriptionPurchaseLineItem prepaidPlan(PrepaidPlan prepaidPlan) {
    this.prepaidPlan = prepaidPlan;
    return this;
  }

  /**
   * Get prepaidPlan
   * @return prepaidPlan
   */
  @javax.annotation.Nullable
  public PrepaidPlan getPrepaidPlan() {
    return prepaidPlan;
  }

  public void setPrepaidPlan(PrepaidPlan prepaidPlan) {
    this.prepaidPlan = prepaidPlan;
  }


  public SubscriptionPurchaseLineItem productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * The purchased product ID (for example, &#39;monthly001&#39;).
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPurchaseLineItem subscriptionPurchaseLineItem = (SubscriptionPurchaseLineItem) o;
    return Objects.equals(this.autoRenewingPlan, subscriptionPurchaseLineItem.autoRenewingPlan) &&
        Objects.equals(this.deferredItemReplacement, subscriptionPurchaseLineItem.deferredItemReplacement) &&
        Objects.equals(this.expiryTime, subscriptionPurchaseLineItem.expiryTime) &&
        Objects.equals(this.offerDetails, subscriptionPurchaseLineItem.offerDetails) &&
        Objects.equals(this.prepaidPlan, subscriptionPurchaseLineItem.prepaidPlan) &&
        Objects.equals(this.productId, subscriptionPurchaseLineItem.productId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRenewingPlan, deferredItemReplacement, expiryTime, offerDetails, prepaidPlan, productId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPurchaseLineItem {\n");
    sb.append("    autoRenewingPlan: ").append(toIndentedString(autoRenewingPlan)).append("\n");
    sb.append("    deferredItemReplacement: ").append(toIndentedString(deferredItemReplacement)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    offerDetails: ").append(toIndentedString(offerDetails)).append("\n");
    sb.append("    prepaidPlan: ").append(toIndentedString(prepaidPlan)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRenewingPlan");
    openapiFields.add("deferredItemReplacement");
    openapiFields.add("expiryTime");
    openapiFields.add("offerDetails");
    openapiFields.add("prepaidPlan");
    openapiFields.add("productId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPurchaseLineItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPurchaseLineItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPurchaseLineItem is not found in the empty JSON string", SubscriptionPurchaseLineItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPurchaseLineItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPurchaseLineItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoRenewingPlan`
      if (jsonObj.get("autoRenewingPlan") != null && !jsonObj.get("autoRenewingPlan").isJsonNull()) {
        AutoRenewingPlan.validateJsonElement(jsonObj.get("autoRenewingPlan"));
      }
      // validate the optional field `deferredItemReplacement`
      if (jsonObj.get("deferredItemReplacement") != null && !jsonObj.get("deferredItemReplacement").isJsonNull()) {
        DeferredItemReplacement.validateJsonElement(jsonObj.get("deferredItemReplacement"));
      }
      if ((jsonObj.get("expiryTime") != null && !jsonObj.get("expiryTime").isJsonNull()) && !jsonObj.get("expiryTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryTime").toString()));
      }
      // validate the optional field `offerDetails`
      if (jsonObj.get("offerDetails") != null && !jsonObj.get("offerDetails").isJsonNull()) {
        OfferDetails.validateJsonElement(jsonObj.get("offerDetails"));
      }
      // validate the optional field `prepaidPlan`
      if (jsonObj.get("prepaidPlan") != null && !jsonObj.get("prepaidPlan").isJsonNull()) {
        PrepaidPlan.validateJsonElement(jsonObj.get("prepaidPlan"));
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPurchaseLineItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPurchaseLineItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPurchaseLineItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPurchaseLineItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPurchaseLineItem>() {
           @Override
           public void write(JsonWriter out, SubscriptionPurchaseLineItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPurchaseLineItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPurchaseLineItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPurchaseLineItem
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPurchaseLineItem
   */
  public static SubscriptionPurchaseLineItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPurchaseLineItem.class);
  }

  /**
   * Convert an instance of SubscriptionPurchaseLineItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

