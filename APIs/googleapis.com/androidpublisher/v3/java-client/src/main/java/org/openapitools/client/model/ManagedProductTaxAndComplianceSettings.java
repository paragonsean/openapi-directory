/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RegionalTaxRateInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about taxation and legal compliance for managed products.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ManagedProductTaxAndComplianceSettings {
  /**
   * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
   */
  @JsonAdapter(EeaWithdrawalRightTypeEnum.Adapter.class)
  public enum EeaWithdrawalRightTypeEnum {
    TYPE_UNSPECIFIED("WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED"),
    
    DIGITAL_CONTENT("WITHDRAWAL_RIGHT_DIGITAL_CONTENT"),
    
    SERVICE("WITHDRAWAL_RIGHT_SERVICE");

    private String value;

    EeaWithdrawalRightTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EeaWithdrawalRightTypeEnum fromValue(String value) {
      for (EeaWithdrawalRightTypeEnum b : EeaWithdrawalRightTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EeaWithdrawalRightTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EeaWithdrawalRightTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EeaWithdrawalRightTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EeaWithdrawalRightTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EeaWithdrawalRightTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EEA_WITHDRAWAL_RIGHT_TYPE = "eeaWithdrawalRightType";
  @SerializedName(SERIALIZED_NAME_EEA_WITHDRAWAL_RIGHT_TYPE)
  private EeaWithdrawalRightTypeEnum eeaWithdrawalRightType;

  public static final String SERIALIZED_NAME_IS_TOKENIZED_DIGITAL_ASSET = "isTokenizedDigitalAsset";
  @SerializedName(SERIALIZED_NAME_IS_TOKENIZED_DIGITAL_ASSET)
  private Boolean isTokenizedDigitalAsset;

  public static final String SERIALIZED_NAME_TAX_RATE_INFO_BY_REGION_CODE = "taxRateInfoByRegionCode";
  @SerializedName(SERIALIZED_NAME_TAX_RATE_INFO_BY_REGION_CODE)
  private Map<String, RegionalTaxRateInfo> taxRateInfoByRegionCode = new HashMap<>();

  public ManagedProductTaxAndComplianceSettings() {
  }

  public ManagedProductTaxAndComplianceSettings eeaWithdrawalRightType(EeaWithdrawalRightTypeEnum eeaWithdrawalRightType) {
    this.eeaWithdrawalRightType = eeaWithdrawalRightType;
    return this;
  }

  /**
   * Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.
   * @return eeaWithdrawalRightType
   */
  @javax.annotation.Nullable
  public EeaWithdrawalRightTypeEnum getEeaWithdrawalRightType() {
    return eeaWithdrawalRightType;
  }

  public void setEeaWithdrawalRightType(EeaWithdrawalRightTypeEnum eeaWithdrawalRightType) {
    this.eeaWithdrawalRightType = eeaWithdrawalRightType;
  }


  public ManagedProductTaxAndComplianceSettings isTokenizedDigitalAsset(Boolean isTokenizedDigitalAsset) {
    this.isTokenizedDigitalAsset = isTokenizedDigitalAsset;
    return this;
  }

  /**
   * Whether this in-app product is declared as a product representing a tokenized digital asset.
   * @return isTokenizedDigitalAsset
   */
  @javax.annotation.Nullable
  public Boolean getIsTokenizedDigitalAsset() {
    return isTokenizedDigitalAsset;
  }

  public void setIsTokenizedDigitalAsset(Boolean isTokenizedDigitalAsset) {
    this.isTokenizedDigitalAsset = isTokenizedDigitalAsset;
  }


  public ManagedProductTaxAndComplianceSettings taxRateInfoByRegionCode(Map<String, RegionalTaxRateInfo> taxRateInfoByRegionCode) {
    this.taxRateInfoByRegionCode = taxRateInfoByRegionCode;
    return this;
  }

  public ManagedProductTaxAndComplianceSettings putTaxRateInfoByRegionCodeItem(String key, RegionalTaxRateInfo taxRateInfoByRegionCodeItem) {
    if (this.taxRateInfoByRegionCode == null) {
      this.taxRateInfoByRegionCode = new HashMap<>();
    }
    this.taxRateInfoByRegionCode.put(key, taxRateInfoByRegionCodeItem);
    return this;
  }

  /**
   * A mapping from region code to tax rate details. The keys are region codes as defined by Unicode&#39;s \&quot;CLDR\&quot;.
   * @return taxRateInfoByRegionCode
   */
  @javax.annotation.Nullable
  public Map<String, RegionalTaxRateInfo> getTaxRateInfoByRegionCode() {
    return taxRateInfoByRegionCode;
  }

  public void setTaxRateInfoByRegionCode(Map<String, RegionalTaxRateInfo> taxRateInfoByRegionCode) {
    this.taxRateInfoByRegionCode = taxRateInfoByRegionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManagedProductTaxAndComplianceSettings managedProductTaxAndComplianceSettings = (ManagedProductTaxAndComplianceSettings) o;
    return Objects.equals(this.eeaWithdrawalRightType, managedProductTaxAndComplianceSettings.eeaWithdrawalRightType) &&
        Objects.equals(this.isTokenizedDigitalAsset, managedProductTaxAndComplianceSettings.isTokenizedDigitalAsset) &&
        Objects.equals(this.taxRateInfoByRegionCode, managedProductTaxAndComplianceSettings.taxRateInfoByRegionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eeaWithdrawalRightType, isTokenizedDigitalAsset, taxRateInfoByRegionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManagedProductTaxAndComplianceSettings {\n");
    sb.append("    eeaWithdrawalRightType: ").append(toIndentedString(eeaWithdrawalRightType)).append("\n");
    sb.append("    isTokenizedDigitalAsset: ").append(toIndentedString(isTokenizedDigitalAsset)).append("\n");
    sb.append("    taxRateInfoByRegionCode: ").append(toIndentedString(taxRateInfoByRegionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eeaWithdrawalRightType");
    openapiFields.add("isTokenizedDigitalAsset");
    openapiFields.add("taxRateInfoByRegionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ManagedProductTaxAndComplianceSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ManagedProductTaxAndComplianceSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManagedProductTaxAndComplianceSettings is not found in the empty JSON string", ManagedProductTaxAndComplianceSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ManagedProductTaxAndComplianceSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ManagedProductTaxAndComplianceSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eeaWithdrawalRightType") != null && !jsonObj.get("eeaWithdrawalRightType").isJsonNull()) && !jsonObj.get("eeaWithdrawalRightType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eeaWithdrawalRightType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eeaWithdrawalRightType").toString()));
      }
      // validate the optional field `eeaWithdrawalRightType`
      if (jsonObj.get("eeaWithdrawalRightType") != null && !jsonObj.get("eeaWithdrawalRightType").isJsonNull()) {
        EeaWithdrawalRightTypeEnum.validateJsonElement(jsonObj.get("eeaWithdrawalRightType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManagedProductTaxAndComplianceSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManagedProductTaxAndComplianceSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManagedProductTaxAndComplianceSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManagedProductTaxAndComplianceSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ManagedProductTaxAndComplianceSettings>() {
           @Override
           public void write(JsonWriter out, ManagedProductTaxAndComplianceSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ManagedProductTaxAndComplianceSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ManagedProductTaxAndComplianceSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ManagedProductTaxAndComplianceSettings
   * @throws IOException if the JSON string is invalid with respect to ManagedProductTaxAndComplianceSettings
   */
  public static ManagedProductTaxAndComplianceSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManagedProductTaxAndComplianceSettings.class);
  }

  /**
   * Convert an instance of ManagedProductTaxAndComplianceSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

