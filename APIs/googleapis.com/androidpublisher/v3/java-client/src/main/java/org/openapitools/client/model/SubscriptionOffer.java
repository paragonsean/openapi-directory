/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OfferTag;
import org.openapitools.client.model.OtherRegionsSubscriptionOfferConfig;
import org.openapitools.client.model.RegionalSubscriptionOfferConfig;
import org.openapitools.client.model.SubscriptionOfferPhase;
import org.openapitools.client.model.SubscriptionOfferTargeting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single, temporary offer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionOffer {
  public static final String SERIALIZED_NAME_BASE_PLAN_ID = "basePlanId";
  @SerializedName(SERIALIZED_NAME_BASE_PLAN_ID)
  private String basePlanId;

  public static final String SERIALIZED_NAME_OFFER_ID = "offerId";
  @SerializedName(SERIALIZED_NAME_OFFER_ID)
  private String offerId;

  public static final String SERIALIZED_NAME_OFFER_TAGS = "offerTags";
  @SerializedName(SERIALIZED_NAME_OFFER_TAGS)
  private List<OfferTag> offerTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_REGIONS_CONFIG = "otherRegionsConfig";
  @SerializedName(SERIALIZED_NAME_OTHER_REGIONS_CONFIG)
  private OtherRegionsSubscriptionOfferConfig otherRegionsConfig;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PHASES = "phases";
  @SerializedName(SERIALIZED_NAME_PHASES)
  private List<SubscriptionOfferPhase> phases = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_REGIONAL_CONFIGS = "regionalConfigs";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CONFIGS)
  private List<RegionalSubscriptionOfferConfig> regionalConfigs = new ArrayList<>();

  /**
   * Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private SubscriptionOfferTargeting targeting;

  public SubscriptionOffer() {
  }

  public SubscriptionOffer(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public SubscriptionOffer basePlanId(String basePlanId) {
    this.basePlanId = basePlanId;
    return this;
  }

  /**
   * Required. Immutable. The ID of the base plan to which this offer is an extension.
   * @return basePlanId
   */
  @javax.annotation.Nullable
  public String getBasePlanId() {
    return basePlanId;
  }

  public void setBasePlanId(String basePlanId) {
    this.basePlanId = basePlanId;
  }


  public SubscriptionOffer offerId(String offerId) {
    this.offerId = offerId;
    return this;
  }

  /**
   * Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.
   * @return offerId
   */
  @javax.annotation.Nullable
  public String getOfferId() {
    return offerId;
  }

  public void setOfferId(String offerId) {
    this.offerId = offerId;
  }


  public SubscriptionOffer offerTags(List<OfferTag> offerTags) {
    this.offerTags = offerTags;
    return this;
  }

  public SubscriptionOffer addOfferTagsItem(OfferTag offerTagsItem) {
    if (this.offerTags == null) {
      this.offerTags = new ArrayList<>();
    }
    this.offerTags.add(offerTagsItem);
    return this;
  }

  /**
   * List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.
   * @return offerTags
   */
  @javax.annotation.Nullable
  public List<OfferTag> getOfferTags() {
    return offerTags;
  }

  public void setOfferTags(List<OfferTag> offerTags) {
    this.offerTags = offerTags;
  }


  public SubscriptionOffer otherRegionsConfig(OtherRegionsSubscriptionOfferConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
    return this;
  }

  /**
   * Get otherRegionsConfig
   * @return otherRegionsConfig
   */
  @javax.annotation.Nullable
  public OtherRegionsSubscriptionOfferConfig getOtherRegionsConfig() {
    return otherRegionsConfig;
  }

  public void setOtherRegionsConfig(OtherRegionsSubscriptionOfferConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
  }


  public SubscriptionOffer packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Required. Immutable. The package name of the app the parent subscription belongs to.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public SubscriptionOffer phases(List<SubscriptionOfferPhase> phases) {
    this.phases = phases;
    return this;
  }

  public SubscriptionOffer addPhasesItem(SubscriptionOfferPhase phasesItem) {
    if (this.phases == null) {
      this.phases = new ArrayList<>();
    }
    this.phases.add(phasesItem);
    return this;
  }

  /**
   * Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.
   * @return phases
   */
  @javax.annotation.Nullable
  public List<SubscriptionOfferPhase> getPhases() {
    return phases;
  }

  public void setPhases(List<SubscriptionOfferPhase> phases) {
    this.phases = phases;
  }


  public SubscriptionOffer productId(String productId) {
    this.productId = productId;
    return this;
  }

  /**
   * Required. Immutable. The ID of the parent subscription this offer belongs to.
   * @return productId
   */
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public SubscriptionOffer regionalConfigs(List<RegionalSubscriptionOfferConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
    return this;
  }

  public SubscriptionOffer addRegionalConfigsItem(RegionalSubscriptionOfferConfig regionalConfigsItem) {
    if (this.regionalConfigs == null) {
      this.regionalConfigs = new ArrayList<>();
    }
    this.regionalConfigs.add(regionalConfigsItem);
    return this;
  }

  /**
   * Required. The region-specific configuration of this offer. Must contain at least one entry.
   * @return regionalConfigs
   */
  @javax.annotation.Nullable
  public List<RegionalSubscriptionOfferConfig> getRegionalConfigs() {
    return regionalConfigs;
  }

  public void setRegionalConfigs(List<RegionalSubscriptionOfferConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
  }


  /**
   * Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public SubscriptionOffer targeting(SubscriptionOfferTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public SubscriptionOfferTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(SubscriptionOfferTargeting targeting) {
    this.targeting = targeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionOffer subscriptionOffer = (SubscriptionOffer) o;
    return Objects.equals(this.basePlanId, subscriptionOffer.basePlanId) &&
        Objects.equals(this.offerId, subscriptionOffer.offerId) &&
        Objects.equals(this.offerTags, subscriptionOffer.offerTags) &&
        Objects.equals(this.otherRegionsConfig, subscriptionOffer.otherRegionsConfig) &&
        Objects.equals(this.packageName, subscriptionOffer.packageName) &&
        Objects.equals(this.phases, subscriptionOffer.phases) &&
        Objects.equals(this.productId, subscriptionOffer.productId) &&
        Objects.equals(this.regionalConfigs, subscriptionOffer.regionalConfigs) &&
        Objects.equals(this.state, subscriptionOffer.state) &&
        Objects.equals(this.targeting, subscriptionOffer.targeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePlanId, offerId, offerTags, otherRegionsConfig, packageName, phases, productId, regionalConfigs, state, targeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionOffer {\n");
    sb.append("    basePlanId: ").append(toIndentedString(basePlanId)).append("\n");
    sb.append("    offerId: ").append(toIndentedString(offerId)).append("\n");
    sb.append("    offerTags: ").append(toIndentedString(offerTags)).append("\n");
    sb.append("    otherRegionsConfig: ").append(toIndentedString(otherRegionsConfig)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    phases: ").append(toIndentedString(phases)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    regionalConfigs: ").append(toIndentedString(regionalConfigs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePlanId");
    openapiFields.add("offerId");
    openapiFields.add("offerTags");
    openapiFields.add("otherRegionsConfig");
    openapiFields.add("packageName");
    openapiFields.add("phases");
    openapiFields.add("productId");
    openapiFields.add("regionalConfigs");
    openapiFields.add("state");
    openapiFields.add("targeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionOffer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionOffer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionOffer is not found in the empty JSON string", SubscriptionOffer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionOffer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionOffer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basePlanId") != null && !jsonObj.get("basePlanId").isJsonNull()) && !jsonObj.get("basePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePlanId").toString()));
      }
      if ((jsonObj.get("offerId") != null && !jsonObj.get("offerId").isJsonNull()) && !jsonObj.get("offerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offerId").toString()));
      }
      if (jsonObj.get("offerTags") != null && !jsonObj.get("offerTags").isJsonNull()) {
        JsonArray jsonArrayofferTags = jsonObj.getAsJsonArray("offerTags");
        if (jsonArrayofferTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerTags` to be an array in the JSON string but got `%s`", jsonObj.get("offerTags").toString()));
          }

          // validate the optional field `offerTags` (array)
          for (int i = 0; i < jsonArrayofferTags.size(); i++) {
            OfferTag.validateJsonElement(jsonArrayofferTags.get(i));
          };
        }
      }
      // validate the optional field `otherRegionsConfig`
      if (jsonObj.get("otherRegionsConfig") != null && !jsonObj.get("otherRegionsConfig").isJsonNull()) {
        OtherRegionsSubscriptionOfferConfig.validateJsonElement(jsonObj.get("otherRegionsConfig"));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if (jsonObj.get("phases") != null && !jsonObj.get("phases").isJsonNull()) {
        JsonArray jsonArrayphases = jsonObj.getAsJsonArray("phases");
        if (jsonArrayphases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("phases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `phases` to be an array in the JSON string but got `%s`", jsonObj.get("phases").toString()));
          }

          // validate the optional field `phases` (array)
          for (int i = 0; i < jsonArrayphases.size(); i++) {
            SubscriptionOfferPhase.validateJsonElement(jsonArrayphases.get(i));
          };
        }
      }
      if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull()) && !jsonObj.get("productId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productId").toString()));
      }
      if (jsonObj.get("regionalConfigs") != null && !jsonObj.get("regionalConfigs").isJsonNull()) {
        JsonArray jsonArrayregionalConfigs = jsonObj.getAsJsonArray("regionalConfigs");
        if (jsonArrayregionalConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regionalConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regionalConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("regionalConfigs").toString()));
          }

          // validate the optional field `regionalConfigs` (array)
          for (int i = 0; i < jsonArrayregionalConfigs.size(); i++) {
            RegionalSubscriptionOfferConfig.validateJsonElement(jsonArrayregionalConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        SubscriptionOfferTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionOffer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionOffer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionOffer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionOffer.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionOffer>() {
           @Override
           public void write(JsonWriter out, SubscriptionOffer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionOffer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionOffer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionOffer
   * @throws IOException if the JSON string is invalid with respect to SubscriptionOffer
   */
  public static SubscriptionOffer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionOffer.class);
  }

  /**
   * Convert an instance of SubscriptionOffer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

