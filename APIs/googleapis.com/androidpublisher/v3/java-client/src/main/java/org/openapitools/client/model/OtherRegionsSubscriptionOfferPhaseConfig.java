/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OtherRegionsSubscriptionOfferPhasePrices;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for any new locations Play may launch in for a single offer phase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OtherRegionsSubscriptionOfferPhaseConfig {
  public static final String SERIALIZED_NAME_ABSOLUTE_DISCOUNTS = "absoluteDiscounts";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_DISCOUNTS)
  private OtherRegionsSubscriptionOfferPhasePrices absoluteDiscounts;

  public static final String SERIALIZED_NAME_OTHER_REGIONS_PRICES = "otherRegionsPrices";
  @SerializedName(SERIALIZED_NAME_OTHER_REGIONS_PRICES)
  private OtherRegionsSubscriptionOfferPhasePrices otherRegionsPrices;

  public static final String SERIALIZED_NAME_RELATIVE_DISCOUNT = "relativeDiscount";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DISCOUNT)
  private Double relativeDiscount;

  public OtherRegionsSubscriptionOfferPhaseConfig() {
  }

  public OtherRegionsSubscriptionOfferPhaseConfig absoluteDiscounts(OtherRegionsSubscriptionOfferPhasePrices absoluteDiscounts) {
    this.absoluteDiscounts = absoluteDiscounts;
    return this;
  }

  /**
   * Get absoluteDiscounts
   * @return absoluteDiscounts
   */
  @javax.annotation.Nullable
  public OtherRegionsSubscriptionOfferPhasePrices getAbsoluteDiscounts() {
    return absoluteDiscounts;
  }

  public void setAbsoluteDiscounts(OtherRegionsSubscriptionOfferPhasePrices absoluteDiscounts) {
    this.absoluteDiscounts = absoluteDiscounts;
  }


  public OtherRegionsSubscriptionOfferPhaseConfig otherRegionsPrices(OtherRegionsSubscriptionOfferPhasePrices otherRegionsPrices) {
    this.otherRegionsPrices = otherRegionsPrices;
    return this;
  }

  /**
   * Get otherRegionsPrices
   * @return otherRegionsPrices
   */
  @javax.annotation.Nullable
  public OtherRegionsSubscriptionOfferPhasePrices getOtherRegionsPrices() {
    return otherRegionsPrices;
  }

  public void setOtherRegionsPrices(OtherRegionsSubscriptionOfferPhasePrices otherRegionsPrices) {
    this.otherRegionsPrices = otherRegionsPrices;
  }


  public OtherRegionsSubscriptionOfferPhaseConfig relativeDiscount(Double relativeDiscount) {
    this.relativeDiscount = relativeDiscount;
    return this;
  }

  /**
   * The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in any new locations Play may launch in.
   * @return relativeDiscount
   */
  @javax.annotation.Nullable
  public Double getRelativeDiscount() {
    return relativeDiscount;
  }

  public void setRelativeDiscount(Double relativeDiscount) {
    this.relativeDiscount = relativeDiscount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtherRegionsSubscriptionOfferPhaseConfig otherRegionsSubscriptionOfferPhaseConfig = (OtherRegionsSubscriptionOfferPhaseConfig) o;
    return Objects.equals(this.absoluteDiscounts, otherRegionsSubscriptionOfferPhaseConfig.absoluteDiscounts) &&
        Objects.equals(this.otherRegionsPrices, otherRegionsSubscriptionOfferPhaseConfig.otherRegionsPrices) &&
        Objects.equals(this.relativeDiscount, otherRegionsSubscriptionOfferPhaseConfig.relativeDiscount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteDiscounts, otherRegionsPrices, relativeDiscount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtherRegionsSubscriptionOfferPhaseConfig {\n");
    sb.append("    absoluteDiscounts: ").append(toIndentedString(absoluteDiscounts)).append("\n");
    sb.append("    otherRegionsPrices: ").append(toIndentedString(otherRegionsPrices)).append("\n");
    sb.append("    relativeDiscount: ").append(toIndentedString(relativeDiscount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteDiscounts");
    openapiFields.add("otherRegionsPrices");
    openapiFields.add("relativeDiscount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtherRegionsSubscriptionOfferPhaseConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtherRegionsSubscriptionOfferPhaseConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtherRegionsSubscriptionOfferPhaseConfig is not found in the empty JSON string", OtherRegionsSubscriptionOfferPhaseConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtherRegionsSubscriptionOfferPhaseConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtherRegionsSubscriptionOfferPhaseConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `absoluteDiscounts`
      if (jsonObj.get("absoluteDiscounts") != null && !jsonObj.get("absoluteDiscounts").isJsonNull()) {
        OtherRegionsSubscriptionOfferPhasePrices.validateJsonElement(jsonObj.get("absoluteDiscounts"));
      }
      // validate the optional field `otherRegionsPrices`
      if (jsonObj.get("otherRegionsPrices") != null && !jsonObj.get("otherRegionsPrices").isJsonNull()) {
        OtherRegionsSubscriptionOfferPhasePrices.validateJsonElement(jsonObj.get("otherRegionsPrices"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtherRegionsSubscriptionOfferPhaseConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtherRegionsSubscriptionOfferPhaseConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtherRegionsSubscriptionOfferPhaseConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtherRegionsSubscriptionOfferPhaseConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OtherRegionsSubscriptionOfferPhaseConfig>() {
           @Override
           public void write(JsonWriter out, OtherRegionsSubscriptionOfferPhaseConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtherRegionsSubscriptionOfferPhaseConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtherRegionsSubscriptionOfferPhaseConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtherRegionsSubscriptionOfferPhaseConfig
   * @throws IOException if the JSON string is invalid with respect to OtherRegionsSubscriptionOfferPhaseConfig
   */
  public static OtherRegionsSubscriptionOfferPhaseConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtherRegionsSubscriptionOfferPhaseConfig.class);
  }

  /**
   * Convert an instance of OtherRegionsSubscriptionOfferPhaseConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

