/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specified details about taxation in a given geographical region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionalTaxRateInfo {
  public static final String SERIALIZED_NAME_ELIGIBLE_FOR_STREAMING_SERVICE_TAX_RATE = "eligibleForStreamingServiceTaxRate";
  @SerializedName(SERIALIZED_NAME_ELIGIBLE_FOR_STREAMING_SERVICE_TAX_RATE)
  private Boolean eligibleForStreamingServiceTaxRate;

  /**
   * To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).
   */
  @JsonAdapter(StreamingTaxTypeEnum.Adapter.class)
  public enum StreamingTaxTypeEnum {
    UNSPECIFIED("STREAMING_TAX_TYPE_UNSPECIFIED"),
    
    TELCO_VIDEO_RENTAL("STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL"),
    
    TELCO_VIDEO_SALES("STREAMING_TAX_TYPE_TELCO_VIDEO_SALES"),
    
    TELCO_VIDEO_MULTI_CHANNEL("STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL"),
    
    TELCO_AUDIO_RENTAL("STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL"),
    
    TELCO_AUDIO_SALES("STREAMING_TAX_TYPE_TELCO_AUDIO_SALES"),
    
    TELCO_AUDIO_MULTI_CHANNEL("STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL");

    private String value;

    StreamingTaxTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreamingTaxTypeEnum fromValue(String value) {
      for (StreamingTaxTypeEnum b : StreamingTaxTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreamingTaxTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreamingTaxTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreamingTaxTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreamingTaxTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreamingTaxTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREAMING_TAX_TYPE = "streamingTaxType";
  @SerializedName(SERIALIZED_NAME_STREAMING_TAX_TYPE)
  private StreamingTaxTypeEnum streamingTaxType;

  /**
   * Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).
   */
  @JsonAdapter(TaxTierEnum.Adapter.class)
  public enum TaxTierEnum {
    UNSPECIFIED("TAX_TIER_UNSPECIFIED"),
    
    BOOKS_1("TAX_TIER_BOOKS_1"),
    
    NEWS_1("TAX_TIER_NEWS_1"),
    
    NEWS_2("TAX_TIER_NEWS_2"),
    
    MUSIC_OR_AUDIO_1("TAX_TIER_MUSIC_OR_AUDIO_1"),
    
    LIVE_OR_BROADCAST_1("TAX_TIER_LIVE_OR_BROADCAST_1");

    private String value;

    TaxTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxTierEnum fromValue(String value) {
      for (TaxTierEnum b : TaxTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_TIER = "taxTier";
  @SerializedName(SERIALIZED_NAME_TAX_TIER)
  private TaxTierEnum taxTier;

  public RegionalTaxRateInfo() {
  }

  public RegionalTaxRateInfo eligibleForStreamingServiceTaxRate(Boolean eligibleForStreamingServiceTaxRate) {
    this.eligibleForStreamingServiceTaxRate = eligibleForStreamingServiceTaxRate;
    return this;
  }

  /**
   * You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in the United States.
   * @return eligibleForStreamingServiceTaxRate
   */
  @javax.annotation.Nullable
  public Boolean getEligibleForStreamingServiceTaxRate() {
    return eligibleForStreamingServiceTaxRate;
  }

  public void setEligibleForStreamingServiceTaxRate(Boolean eligibleForStreamingServiceTaxRate) {
    this.eligibleForStreamingServiceTaxRate = eligibleForStreamingServiceTaxRate;
  }


  public RegionalTaxRateInfo streamingTaxType(StreamingTaxTypeEnum streamingTaxType) {
    this.streamingTaxType = streamingTaxType;
    return this;
  }

  /**
   * To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).
   * @return streamingTaxType
   */
  @javax.annotation.Nullable
  public StreamingTaxTypeEnum getStreamingTaxType() {
    return streamingTaxType;
  }

  public void setStreamingTaxType(StreamingTaxTypeEnum streamingTaxType) {
    this.streamingTaxType = streamingTaxType;
  }


  public RegionalTaxRateInfo taxTier(TaxTierEnum taxTier) {
    this.taxTier = taxTier;
    return this;
  }

  /**
   * Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).
   * @return taxTier
   */
  @javax.annotation.Nullable
  public TaxTierEnum getTaxTier() {
    return taxTier;
  }

  public void setTaxTier(TaxTierEnum taxTier) {
    this.taxTier = taxTier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionalTaxRateInfo regionalTaxRateInfo = (RegionalTaxRateInfo) o;
    return Objects.equals(this.eligibleForStreamingServiceTaxRate, regionalTaxRateInfo.eligibleForStreamingServiceTaxRate) &&
        Objects.equals(this.streamingTaxType, regionalTaxRateInfo.streamingTaxType) &&
        Objects.equals(this.taxTier, regionalTaxRateInfo.taxTier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eligibleForStreamingServiceTaxRate, streamingTaxType, taxTier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionalTaxRateInfo {\n");
    sb.append("    eligibleForStreamingServiceTaxRate: ").append(toIndentedString(eligibleForStreamingServiceTaxRate)).append("\n");
    sb.append("    streamingTaxType: ").append(toIndentedString(streamingTaxType)).append("\n");
    sb.append("    taxTier: ").append(toIndentedString(taxTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eligibleForStreamingServiceTaxRate");
    openapiFields.add("streamingTaxType");
    openapiFields.add("taxTier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionalTaxRateInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionalTaxRateInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionalTaxRateInfo is not found in the empty JSON string", RegionalTaxRateInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionalTaxRateInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionalTaxRateInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("streamingTaxType") != null && !jsonObj.get("streamingTaxType").isJsonNull()) && !jsonObj.get("streamingTaxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streamingTaxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streamingTaxType").toString()));
      }
      // validate the optional field `streamingTaxType`
      if (jsonObj.get("streamingTaxType") != null && !jsonObj.get("streamingTaxType").isJsonNull()) {
        StreamingTaxTypeEnum.validateJsonElement(jsonObj.get("streamingTaxType"));
      }
      if ((jsonObj.get("taxTier") != null && !jsonObj.get("taxTier").isJsonNull()) && !jsonObj.get("taxTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxTier").toString()));
      }
      // validate the optional field `taxTier`
      if (jsonObj.get("taxTier") != null && !jsonObj.get("taxTier").isJsonNull()) {
        TaxTierEnum.validateJsonElement(jsonObj.get("taxTier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionalTaxRateInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionalTaxRateInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionalTaxRateInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionalTaxRateInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionalTaxRateInfo>() {
           @Override
           public void write(JsonWriter out, RegionalTaxRateInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionalTaxRateInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionalTaxRateInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionalTaxRateInfo
   * @throws IOException if the JSON string is invalid with respect to RegionalTaxRateInfo
   */
  public static RegionalTaxRateInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionalTaxRateInfo.class);
  }

  /**
   * Convert an instance of RegionalTaxRateInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

