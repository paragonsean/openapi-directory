/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CanceledStateContext;
import org.openapitools.client.model.ExternalAccountIdentifiers;
import org.openapitools.client.model.PausedStateContext;
import org.openapitools.client.model.SubscribeWithGoogleInfo;
import org.openapitools.client.model.SubscriptionPurchaseLineItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates the status of a user&#39;s subscription purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPurchaseV2 {
  /**
   * The acknowledgement state of the subscription.
   */
  @JsonAdapter(AcknowledgementStateEnum.Adapter.class)
  public enum AcknowledgementStateEnum {
    UNSPECIFIED("ACKNOWLEDGEMENT_STATE_UNSPECIFIED"),
    
    PENDING("ACKNOWLEDGEMENT_STATE_PENDING"),
    
    ACKNOWLEDGED("ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED");

    private String value;

    AcknowledgementStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AcknowledgementStateEnum fromValue(String value) {
      for (AcknowledgementStateEnum b : AcknowledgementStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AcknowledgementStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AcknowledgementStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AcknowledgementStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AcknowledgementStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AcknowledgementStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_STATE = "acknowledgementState";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_STATE)
  private AcknowledgementStateEnum acknowledgementState;

  public static final String SERIALIZED_NAME_CANCELED_STATE_CONTEXT = "canceledStateContext";
  @SerializedName(SERIALIZED_NAME_CANCELED_STATE_CONTEXT)
  private CanceledStateContext canceledStateContext;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_IDENTIFIERS = "externalAccountIdentifiers";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_IDENTIFIERS)
  private ExternalAccountIdentifiers externalAccountIdentifiers;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LATEST_ORDER_ID = "latestOrderId";
  @SerializedName(SERIALIZED_NAME_LATEST_ORDER_ID)
  private String latestOrderId;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<SubscriptionPurchaseLineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_PURCHASE_TOKEN = "linkedPurchaseToken";
  @SerializedName(SERIALIZED_NAME_LINKED_PURCHASE_TOKEN)
  private String linkedPurchaseToken;

  public static final String SERIALIZED_NAME_PAUSED_STATE_CONTEXT = "pausedStateContext";
  @SerializedName(SERIALIZED_NAME_PAUSED_STATE_CONTEXT)
  private PausedStateContext pausedStateContext;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_SUBSCRIBE_WITH_GOOGLE_INFO = "subscribeWithGoogleInfo";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBE_WITH_GOOGLE_INFO)
  private SubscribeWithGoogleInfo subscribeWithGoogleInfo;

  /**
   * The current state of the subscription.
   */
  @JsonAdapter(SubscriptionStateEnum.Adapter.class)
  public enum SubscriptionStateEnum {
    UNSPECIFIED("SUBSCRIPTION_STATE_UNSPECIFIED"),
    
    PENDING("SUBSCRIPTION_STATE_PENDING"),
    
    ACTIVE("SUBSCRIPTION_STATE_ACTIVE"),
    
    PAUSED("SUBSCRIPTION_STATE_PAUSED"),
    
    IN_GRACE_PERIOD("SUBSCRIPTION_STATE_IN_GRACE_PERIOD"),
    
    ON_HOLD("SUBSCRIPTION_STATE_ON_HOLD"),
    
    CANCELED("SUBSCRIPTION_STATE_CANCELED"),
    
    EXPIRED("SUBSCRIPTION_STATE_EXPIRED");

    private String value;

    SubscriptionStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionStateEnum fromValue(String value) {
      for (SubscriptionStateEnum b : SubscriptionStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubscriptionStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubscriptionStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubscriptionStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBSCRIPTION_STATE = "subscriptionState";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_STATE)
  private SubscriptionStateEnum subscriptionState;

  public static final String SERIALIZED_NAME_TEST_PURCHASE = "testPurchase";
  @SerializedName(SERIALIZED_NAME_TEST_PURCHASE)
  private Object testPurchase;

  public SubscriptionPurchaseV2() {
  }

  public SubscriptionPurchaseV2 acknowledgementState(AcknowledgementStateEnum acknowledgementState) {
    this.acknowledgementState = acknowledgementState;
    return this;
  }

  /**
   * The acknowledgement state of the subscription.
   * @return acknowledgementState
   */
  @javax.annotation.Nullable
  public AcknowledgementStateEnum getAcknowledgementState() {
    return acknowledgementState;
  }

  public void setAcknowledgementState(AcknowledgementStateEnum acknowledgementState) {
    this.acknowledgementState = acknowledgementState;
  }


  public SubscriptionPurchaseV2 canceledStateContext(CanceledStateContext canceledStateContext) {
    this.canceledStateContext = canceledStateContext;
    return this;
  }

  /**
   * Get canceledStateContext
   * @return canceledStateContext
   */
  @javax.annotation.Nullable
  public CanceledStateContext getCanceledStateContext() {
    return canceledStateContext;
  }

  public void setCanceledStateContext(CanceledStateContext canceledStateContext) {
    this.canceledStateContext = canceledStateContext;
  }


  public SubscriptionPurchaseV2 externalAccountIdentifiers(ExternalAccountIdentifiers externalAccountIdentifiers) {
    this.externalAccountIdentifiers = externalAccountIdentifiers;
    return this;
  }

  /**
   * Get externalAccountIdentifiers
   * @return externalAccountIdentifiers
   */
  @javax.annotation.Nullable
  public ExternalAccountIdentifiers getExternalAccountIdentifiers() {
    return externalAccountIdentifiers;
  }

  public void setExternalAccountIdentifiers(ExternalAccountIdentifiers externalAccountIdentifiers) {
    this.externalAccountIdentifiers = externalAccountIdentifiers;
  }


  public SubscriptionPurchaseV2 kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public SubscriptionPurchaseV2 latestOrderId(String latestOrderId) {
    this.latestOrderId = latestOrderId;
    return this;
  }

  /**
   * The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.
   * @return latestOrderId
   */
  @javax.annotation.Nullable
  public String getLatestOrderId() {
    return latestOrderId;
  }

  public void setLatestOrderId(String latestOrderId) {
    this.latestOrderId = latestOrderId;
  }


  public SubscriptionPurchaseV2 lineItems(List<SubscriptionPurchaseLineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public SubscriptionPurchaseV2 addLineItemsItem(SubscriptionPurchaseLineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<SubscriptionPurchaseLineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<SubscriptionPurchaseLineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public SubscriptionPurchaseV2 linkedPurchaseToken(String linkedPurchaseToken) {
    this.linkedPurchaseToken = linkedPurchaseToken;
    return this;
  }

  /**
   * The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.
   * @return linkedPurchaseToken
   */
  @javax.annotation.Nullable
  public String getLinkedPurchaseToken() {
    return linkedPurchaseToken;
  }

  public void setLinkedPurchaseToken(String linkedPurchaseToken) {
    this.linkedPurchaseToken = linkedPurchaseToken;
  }


  public SubscriptionPurchaseV2 pausedStateContext(PausedStateContext pausedStateContext) {
    this.pausedStateContext = pausedStateContext;
    return this;
  }

  /**
   * Get pausedStateContext
   * @return pausedStateContext
   */
  @javax.annotation.Nullable
  public PausedStateContext getPausedStateContext() {
    return pausedStateContext;
  }

  public void setPausedStateContext(PausedStateContext pausedStateContext) {
    this.pausedStateContext = pausedStateContext;
  }


  public SubscriptionPurchaseV2 regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public SubscriptionPurchaseV2 startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public SubscriptionPurchaseV2 subscribeWithGoogleInfo(SubscribeWithGoogleInfo subscribeWithGoogleInfo) {
    this.subscribeWithGoogleInfo = subscribeWithGoogleInfo;
    return this;
  }

  /**
   * Get subscribeWithGoogleInfo
   * @return subscribeWithGoogleInfo
   */
  @javax.annotation.Nullable
  public SubscribeWithGoogleInfo getSubscribeWithGoogleInfo() {
    return subscribeWithGoogleInfo;
  }

  public void setSubscribeWithGoogleInfo(SubscribeWithGoogleInfo subscribeWithGoogleInfo) {
    this.subscribeWithGoogleInfo = subscribeWithGoogleInfo;
  }


  public SubscriptionPurchaseV2 subscriptionState(SubscriptionStateEnum subscriptionState) {
    this.subscriptionState = subscriptionState;
    return this;
  }

  /**
   * The current state of the subscription.
   * @return subscriptionState
   */
  @javax.annotation.Nullable
  public SubscriptionStateEnum getSubscriptionState() {
    return subscriptionState;
  }

  public void setSubscriptionState(SubscriptionStateEnum subscriptionState) {
    this.subscriptionState = subscriptionState;
  }


  public SubscriptionPurchaseV2 testPurchase(Object testPurchase) {
    this.testPurchase = testPurchase;
    return this;
  }

  /**
   * Whether this subscription purchase is a test purchase.
   * @return testPurchase
   */
  @javax.annotation.Nullable
  public Object getTestPurchase() {
    return testPurchase;
  }

  public void setTestPurchase(Object testPurchase) {
    this.testPurchase = testPurchase;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPurchaseV2 subscriptionPurchaseV2 = (SubscriptionPurchaseV2) o;
    return Objects.equals(this.acknowledgementState, subscriptionPurchaseV2.acknowledgementState) &&
        Objects.equals(this.canceledStateContext, subscriptionPurchaseV2.canceledStateContext) &&
        Objects.equals(this.externalAccountIdentifiers, subscriptionPurchaseV2.externalAccountIdentifiers) &&
        Objects.equals(this.kind, subscriptionPurchaseV2.kind) &&
        Objects.equals(this.latestOrderId, subscriptionPurchaseV2.latestOrderId) &&
        Objects.equals(this.lineItems, subscriptionPurchaseV2.lineItems) &&
        Objects.equals(this.linkedPurchaseToken, subscriptionPurchaseV2.linkedPurchaseToken) &&
        Objects.equals(this.pausedStateContext, subscriptionPurchaseV2.pausedStateContext) &&
        Objects.equals(this.regionCode, subscriptionPurchaseV2.regionCode) &&
        Objects.equals(this.startTime, subscriptionPurchaseV2.startTime) &&
        Objects.equals(this.subscribeWithGoogleInfo, subscriptionPurchaseV2.subscribeWithGoogleInfo) &&
        Objects.equals(this.subscriptionState, subscriptionPurchaseV2.subscriptionState) &&
        Objects.equals(this.testPurchase, subscriptionPurchaseV2.testPurchase);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgementState, canceledStateContext, externalAccountIdentifiers, kind, latestOrderId, lineItems, linkedPurchaseToken, pausedStateContext, regionCode, startTime, subscribeWithGoogleInfo, subscriptionState, testPurchase);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPurchaseV2 {\n");
    sb.append("    acknowledgementState: ").append(toIndentedString(acknowledgementState)).append("\n");
    sb.append("    canceledStateContext: ").append(toIndentedString(canceledStateContext)).append("\n");
    sb.append("    externalAccountIdentifiers: ").append(toIndentedString(externalAccountIdentifiers)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    latestOrderId: ").append(toIndentedString(latestOrderId)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    linkedPurchaseToken: ").append(toIndentedString(linkedPurchaseToken)).append("\n");
    sb.append("    pausedStateContext: ").append(toIndentedString(pausedStateContext)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subscribeWithGoogleInfo: ").append(toIndentedString(subscribeWithGoogleInfo)).append("\n");
    sb.append("    subscriptionState: ").append(toIndentedString(subscriptionState)).append("\n");
    sb.append("    testPurchase: ").append(toIndentedString(testPurchase)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgementState");
    openapiFields.add("canceledStateContext");
    openapiFields.add("externalAccountIdentifiers");
    openapiFields.add("kind");
    openapiFields.add("latestOrderId");
    openapiFields.add("lineItems");
    openapiFields.add("linkedPurchaseToken");
    openapiFields.add("pausedStateContext");
    openapiFields.add("regionCode");
    openapiFields.add("startTime");
    openapiFields.add("subscribeWithGoogleInfo");
    openapiFields.add("subscriptionState");
    openapiFields.add("testPurchase");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPurchaseV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPurchaseV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPurchaseV2 is not found in the empty JSON string", SubscriptionPurchaseV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPurchaseV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPurchaseV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acknowledgementState") != null && !jsonObj.get("acknowledgementState").isJsonNull()) && !jsonObj.get("acknowledgementState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgementState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acknowledgementState").toString()));
      }
      // validate the optional field `acknowledgementState`
      if (jsonObj.get("acknowledgementState") != null && !jsonObj.get("acknowledgementState").isJsonNull()) {
        AcknowledgementStateEnum.validateJsonElement(jsonObj.get("acknowledgementState"));
      }
      // validate the optional field `canceledStateContext`
      if (jsonObj.get("canceledStateContext") != null && !jsonObj.get("canceledStateContext").isJsonNull()) {
        CanceledStateContext.validateJsonElement(jsonObj.get("canceledStateContext"));
      }
      // validate the optional field `externalAccountIdentifiers`
      if (jsonObj.get("externalAccountIdentifiers") != null && !jsonObj.get("externalAccountIdentifiers").isJsonNull()) {
        ExternalAccountIdentifiers.validateJsonElement(jsonObj.get("externalAccountIdentifiers"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("latestOrderId") != null && !jsonObj.get("latestOrderId").isJsonNull()) && !jsonObj.get("latestOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestOrderId").toString()));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            SubscriptionPurchaseLineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      if ((jsonObj.get("linkedPurchaseToken") != null && !jsonObj.get("linkedPurchaseToken").isJsonNull()) && !jsonObj.get("linkedPurchaseToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedPurchaseToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedPurchaseToken").toString()));
      }
      // validate the optional field `pausedStateContext`
      if (jsonObj.get("pausedStateContext") != null && !jsonObj.get("pausedStateContext").isJsonNull()) {
        PausedStateContext.validateJsonElement(jsonObj.get("pausedStateContext"));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `subscribeWithGoogleInfo`
      if (jsonObj.get("subscribeWithGoogleInfo") != null && !jsonObj.get("subscribeWithGoogleInfo").isJsonNull()) {
        SubscribeWithGoogleInfo.validateJsonElement(jsonObj.get("subscribeWithGoogleInfo"));
      }
      if ((jsonObj.get("subscriptionState") != null && !jsonObj.get("subscriptionState").isJsonNull()) && !jsonObj.get("subscriptionState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionState").toString()));
      }
      // validate the optional field `subscriptionState`
      if (jsonObj.get("subscriptionState") != null && !jsonObj.get("subscriptionState").isJsonNull()) {
        SubscriptionStateEnum.validateJsonElement(jsonObj.get("subscriptionState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPurchaseV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPurchaseV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPurchaseV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPurchaseV2.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPurchaseV2>() {
           @Override
           public void write(JsonWriter out, SubscriptionPurchaseV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPurchaseV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPurchaseV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPurchaseV2
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPurchaseV2
   */
  public static SubscriptionPurchaseV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPurchaseV2.class);
  }

  /**
   * Convert an instance of SubscriptionPurchaseV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

