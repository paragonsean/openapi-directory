/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for a single phase of a subscription offer in a single region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionalSubscriptionOfferPhaseConfig {
  public static final String SERIALIZED_NAME_ABSOLUTE_DISCOUNT = "absoluteDiscount";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_DISCOUNT)
  private Money absoluteDiscount;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Money price;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public static final String SERIALIZED_NAME_RELATIVE_DISCOUNT = "relativeDiscount";
  @SerializedName(SERIALIZED_NAME_RELATIVE_DISCOUNT)
  private Double relativeDiscount;

  public RegionalSubscriptionOfferPhaseConfig() {
  }

  public RegionalSubscriptionOfferPhaseConfig absoluteDiscount(Money absoluteDiscount) {
    this.absoluteDiscount = absoluteDiscount;
    return this;
  }

  /**
   * Get absoluteDiscount
   * @return absoluteDiscount
   */
  @javax.annotation.Nullable
  public Money getAbsoluteDiscount() {
    return absoluteDiscount;
  }

  public void setAbsoluteDiscount(Money absoluteDiscount) {
    this.absoluteDiscount = absoluteDiscount;
  }


  public RegionalSubscriptionOfferPhaseConfig price(Money price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public Money getPrice() {
    return price;
  }

  public void setPrice(Money price) {
    this.price = price;
  }


  public RegionalSubscriptionOfferPhaseConfig regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Required. Immutable. The region to which this config applies.
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }


  public RegionalSubscriptionOfferPhaseConfig relativeDiscount(Double relativeDiscount) {
    this.relativeDiscount = relativeDiscount;
    return this;
  }

  /**
   * The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in this region.
   * @return relativeDiscount
   */
  @javax.annotation.Nullable
  public Double getRelativeDiscount() {
    return relativeDiscount;
  }

  public void setRelativeDiscount(Double relativeDiscount) {
    this.relativeDiscount = relativeDiscount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionalSubscriptionOfferPhaseConfig regionalSubscriptionOfferPhaseConfig = (RegionalSubscriptionOfferPhaseConfig) o;
    return Objects.equals(this.absoluteDiscount, regionalSubscriptionOfferPhaseConfig.absoluteDiscount) &&
        Objects.equals(this.price, regionalSubscriptionOfferPhaseConfig.price) &&
        Objects.equals(this.regionCode, regionalSubscriptionOfferPhaseConfig.regionCode) &&
        Objects.equals(this.relativeDiscount, regionalSubscriptionOfferPhaseConfig.relativeDiscount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteDiscount, price, regionCode, relativeDiscount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionalSubscriptionOfferPhaseConfig {\n");
    sb.append("    absoluteDiscount: ").append(toIndentedString(absoluteDiscount)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("    relativeDiscount: ").append(toIndentedString(relativeDiscount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("absoluteDiscount");
    openapiFields.add("price");
    openapiFields.add("regionCode");
    openapiFields.add("relativeDiscount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionalSubscriptionOfferPhaseConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionalSubscriptionOfferPhaseConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionalSubscriptionOfferPhaseConfig is not found in the empty JSON string", RegionalSubscriptionOfferPhaseConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionalSubscriptionOfferPhaseConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionalSubscriptionOfferPhaseConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `absoluteDiscount`
      if (jsonObj.get("absoluteDiscount") != null && !jsonObj.get("absoluteDiscount").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("absoluteDiscount"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("price"));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionalSubscriptionOfferPhaseConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionalSubscriptionOfferPhaseConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionalSubscriptionOfferPhaseConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionalSubscriptionOfferPhaseConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionalSubscriptionOfferPhaseConfig>() {
           @Override
           public void write(JsonWriter out, RegionalSubscriptionOfferPhaseConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionalSubscriptionOfferPhaseConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionalSubscriptionOfferPhaseConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionalSubscriptionOfferPhaseConfig
   * @throws IOException if the JSON string is invalid with respect to RegionalSubscriptionOfferPhaseConfig
   */
  public static RegionalSubscriptionOfferPhaseConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionalSubscriptionOfferPhaseConfig.class);
  }

  /**
   * Convert an instance of RegionalSubscriptionOfferPhaseConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

