/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.IntroductoryPriceInfo;
import org.openapitools.client.model.SubscriptionCancelSurveyResult;
import org.openapitools.client.model.SubscriptionPriceChange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A SubscriptionPurchase resource indicates the status of a user&#39;s subscription purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPurchase {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_STATE = "acknowledgementState";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_STATE)
  private Integer acknowledgementState;

  public static final String SERIALIZED_NAME_AUTO_RENEWING = "autoRenewing";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEWING)
  private Boolean autoRenewing;

  public static final String SERIALIZED_NAME_AUTO_RESUME_TIME_MILLIS = "autoResumeTimeMillis";
  @SerializedName(SERIALIZED_NAME_AUTO_RESUME_TIME_MILLIS)
  private String autoResumeTimeMillis;

  public static final String SERIALIZED_NAME_CANCEL_REASON = "cancelReason";
  @SerializedName(SERIALIZED_NAME_CANCEL_REASON)
  private Integer cancelReason;

  public static final String SERIALIZED_NAME_CANCEL_SURVEY_RESULT = "cancelSurveyResult";
  @SerializedName(SERIALIZED_NAME_CANCEL_SURVEY_RESULT)
  private SubscriptionCancelSurveyResult cancelSurveyResult;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DEVELOPER_PAYLOAD = "developerPayload";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_PAYLOAD)
  private String developerPayload;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_EXPIRY_TIME_MILLIS = "expiryTimeMillis";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TIME_MILLIS)
  private String expiryTimeMillis;

  public static final String SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID = "externalAccountId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ACCOUNT_ID)
  private String externalAccountId;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "familyName";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_INTRODUCTORY_PRICE_INFO = "introductoryPriceInfo";
  @SerializedName(SERIALIZED_NAME_INTRODUCTORY_PRICE_INFO)
  private IntroductoryPriceInfo introductoryPriceInfo;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LINKED_PURCHASE_TOKEN = "linkedPurchaseToken";
  @SerializedName(SERIALIZED_NAME_LINKED_PURCHASE_TOKEN)
  private String linkedPurchaseToken;

  public static final String SERIALIZED_NAME_OBFUSCATED_EXTERNAL_ACCOUNT_ID = "obfuscatedExternalAccountId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EXTERNAL_ACCOUNT_ID)
  private String obfuscatedExternalAccountId;

  public static final String SERIALIZED_NAME_OBFUSCATED_EXTERNAL_PROFILE_ID = "obfuscatedExternalProfileId";
  @SerializedName(SERIALIZED_NAME_OBFUSCATED_EXTERNAL_PROFILE_ID)
  private String obfuscatedExternalProfileId;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private String orderId;

  public static final String SERIALIZED_NAME_PAYMENT_STATE = "paymentState";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATE)
  private Integer paymentState;

  public static final String SERIALIZED_NAME_PRICE_AMOUNT_MICROS = "priceAmountMicros";
  @SerializedName(SERIALIZED_NAME_PRICE_AMOUNT_MICROS)
  private String priceAmountMicros;

  public static final String SERIALIZED_NAME_PRICE_CHANGE = "priceChange";
  @SerializedName(SERIALIZED_NAME_PRICE_CHANGE)
  private SubscriptionPriceChange priceChange;

  public static final String SERIALIZED_NAME_PRICE_CURRENCY_CODE = "priceCurrencyCode";
  @SerializedName(SERIALIZED_NAME_PRICE_CURRENCY_CODE)
  private String priceCurrencyCode;

  public static final String SERIALIZED_NAME_PROFILE_ID = "profileId";
  @SerializedName(SERIALIZED_NAME_PROFILE_ID)
  private String profileId;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "profileName";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_PROMOTION_CODE = "promotionCode";
  @SerializedName(SERIALIZED_NAME_PROMOTION_CODE)
  private String promotionCode;

  public static final String SERIALIZED_NAME_PROMOTION_TYPE = "promotionType";
  @SerializedName(SERIALIZED_NAME_PROMOTION_TYPE)
  private Integer promotionType;

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "purchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private Integer purchaseType;

  public static final String SERIALIZED_NAME_START_TIME_MILLIS = "startTimeMillis";
  @SerializedName(SERIALIZED_NAME_START_TIME_MILLIS)
  private String startTimeMillis;

  public static final String SERIALIZED_NAME_USER_CANCELLATION_TIME_MILLIS = "userCancellationTimeMillis";
  @SerializedName(SERIALIZED_NAME_USER_CANCELLATION_TIME_MILLIS)
  private String userCancellationTimeMillis;

  public SubscriptionPurchase() {
  }

  public SubscriptionPurchase acknowledgementState(Integer acknowledgementState) {
    this.acknowledgementState = acknowledgementState;
    return this;
  }

  /**
   * The acknowledgement state of the subscription product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged
   * @return acknowledgementState
   */
  @javax.annotation.Nullable
  public Integer getAcknowledgementState() {
    return acknowledgementState;
  }

  public void setAcknowledgementState(Integer acknowledgementState) {
    this.acknowledgementState = acknowledgementState;
  }


  public SubscriptionPurchase autoRenewing(Boolean autoRenewing) {
    this.autoRenewing = autoRenewing;
    return this;
  }

  /**
   * Whether the subscription will automatically be renewed when it reaches its current expiry time.
   * @return autoRenewing
   */
  @javax.annotation.Nullable
  public Boolean getAutoRenewing() {
    return autoRenewing;
  }

  public void setAutoRenewing(Boolean autoRenewing) {
    this.autoRenewing = autoRenewing;
  }


  public SubscriptionPurchase autoResumeTimeMillis(String autoResumeTimeMillis) {
    this.autoResumeTimeMillis = autoResumeTimeMillis;
    return this;
  }

  /**
   * Time at which the subscription will be automatically resumed, in milliseconds since the Epoch. Only present if the user has requested to pause the subscription.
   * @return autoResumeTimeMillis
   */
  @javax.annotation.Nullable
  public String getAutoResumeTimeMillis() {
    return autoResumeTimeMillis;
  }

  public void setAutoResumeTimeMillis(String autoResumeTimeMillis) {
    this.autoResumeTimeMillis = autoResumeTimeMillis;
  }


  public SubscriptionPurchase cancelReason(Integer cancelReason) {
    this.cancelReason = cancelReason;
    return this;
  }

  /**
   * The reason why a subscription was canceled or is not auto-renewing. Possible values are: 0. User canceled the subscription 1. Subscription was canceled by the system, for example because of a billing problem 2. Subscription was replaced with a new subscription 3. Subscription was canceled by the developer
   * @return cancelReason
   */
  @javax.annotation.Nullable
  public Integer getCancelReason() {
    return cancelReason;
  }

  public void setCancelReason(Integer cancelReason) {
    this.cancelReason = cancelReason;
  }


  public SubscriptionPurchase cancelSurveyResult(SubscriptionCancelSurveyResult cancelSurveyResult) {
    this.cancelSurveyResult = cancelSurveyResult;
    return this;
  }

  /**
   * Get cancelSurveyResult
   * @return cancelSurveyResult
   */
  @javax.annotation.Nullable
  public SubscriptionCancelSurveyResult getCancelSurveyResult() {
    return cancelSurveyResult;
  }

  public void setCancelSurveyResult(SubscriptionCancelSurveyResult cancelSurveyResult) {
    this.cancelSurveyResult = cancelSurveyResult;
  }


  public SubscriptionPurchase countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public SubscriptionPurchase developerPayload(String developerPayload) {
    this.developerPayload = developerPayload;
    return this;
  }

  /**
   * A developer-specified string that contains supplemental information about an order.
   * @return developerPayload
   */
  @javax.annotation.Nullable
  public String getDeveloperPayload() {
    return developerPayload;
  }

  public void setDeveloperPayload(String developerPayload) {
    this.developerPayload = developerPayload;
  }


  public SubscriptionPurchase emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * The email address of the user when the subscription was purchased. Only present for purchases made with &#39;Subscribe with Google&#39;.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public SubscriptionPurchase expiryTimeMillis(String expiryTimeMillis) {
    this.expiryTimeMillis = expiryTimeMillis;
    return this;
  }

  /**
   * Time at which the subscription will expire, in milliseconds since the Epoch.
   * @return expiryTimeMillis
   */
  @javax.annotation.Nullable
  public String getExpiryTimeMillis() {
    return expiryTimeMillis;
  }

  public void setExpiryTimeMillis(String expiryTimeMillis) {
    this.expiryTimeMillis = expiryTimeMillis;
  }


  public SubscriptionPurchase externalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
    return this;
  }

  /**
   * User account identifier in the third-party service. Only present if account linking happened as part of the subscription purchase flow.
   * @return externalAccountId
   */
  @javax.annotation.Nullable
  public String getExternalAccountId() {
    return externalAccountId;
  }

  public void setExternalAccountId(String externalAccountId) {
    this.externalAccountId = externalAccountId;
  }


  public SubscriptionPurchase familyName(String familyName) {
    this.familyName = familyName;
    return this;
  }

  /**
   * The family name of the user when the subscription was purchased. Only present for purchases made with &#39;Subscribe with Google&#39;.
   * @return familyName
   */
  @javax.annotation.Nullable
  public String getFamilyName() {
    return familyName;
  }

  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public SubscriptionPurchase givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The given name of the user when the subscription was purchased. Only present for purchases made with &#39;Subscribe with Google&#39;.
   * @return givenName
   */
  @javax.annotation.Nullable
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public SubscriptionPurchase introductoryPriceInfo(IntroductoryPriceInfo introductoryPriceInfo) {
    this.introductoryPriceInfo = introductoryPriceInfo;
    return this;
  }

  /**
   * Get introductoryPriceInfo
   * @return introductoryPriceInfo
   */
  @javax.annotation.Nullable
  public IntroductoryPriceInfo getIntroductoryPriceInfo() {
    return introductoryPriceInfo;
  }

  public void setIntroductoryPriceInfo(IntroductoryPriceInfo introductoryPriceInfo) {
    this.introductoryPriceInfo = introductoryPriceInfo;
  }


  public SubscriptionPurchase kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This kind represents a subscriptionPurchase object in the androidpublisher service.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public SubscriptionPurchase linkedPurchaseToken(String linkedPurchaseToken) {
    this.linkedPurchaseToken = linkedPurchaseToken;
    return this;
  }

  /**
   * The purchase token of the originating purchase if this subscription is one of the following: 0. Re-signup of a canceled but non-lapsed subscription 1. Upgrade/downgrade from a previous subscription For example, suppose a user originally signs up and you receive purchase token X, then the user cancels and goes through the resignup flow (before their subscription lapses) and you receive purchase token Y, and finally the user upgrades their subscription and you receive purchase token Z. If you call this API with purchase token Z, this field will be set to Y. If you call this API with purchase token Y, this field will be set to X. If you call this API with purchase token X, this field will not be set.
   * @return linkedPurchaseToken
   */
  @javax.annotation.Nullable
  public String getLinkedPurchaseToken() {
    return linkedPurchaseToken;
  }

  public void setLinkedPurchaseToken(String linkedPurchaseToken) {
    this.linkedPurchaseToken = linkedPurchaseToken;
  }


  public SubscriptionPurchase obfuscatedExternalAccountId(String obfuscatedExternalAccountId) {
    this.obfuscatedExternalAccountId = obfuscatedExternalAccountId;
    return this;
  }

  /**
   * An obfuscated version of the id that is uniquely associated with the user&#39;s account in your app. Present for the following purchases: * If account linking happened as part of the subscription purchase flow. * It was specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.
   * @return obfuscatedExternalAccountId
   */
  @javax.annotation.Nullable
  public String getObfuscatedExternalAccountId() {
    return obfuscatedExternalAccountId;
  }

  public void setObfuscatedExternalAccountId(String obfuscatedExternalAccountId) {
    this.obfuscatedExternalAccountId = obfuscatedExternalAccountId;
  }


  public SubscriptionPurchase obfuscatedExternalProfileId(String obfuscatedExternalProfileId) {
    this.obfuscatedExternalProfileId = obfuscatedExternalProfileId;
    return this;
  }

  /**
   * An obfuscated version of the id that is uniquely associated with the user&#39;s profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.
   * @return obfuscatedExternalProfileId
   */
  @javax.annotation.Nullable
  public String getObfuscatedExternalProfileId() {
    return obfuscatedExternalProfileId;
  }

  public void setObfuscatedExternalProfileId(String obfuscatedExternalProfileId) {
    this.obfuscatedExternalProfileId = obfuscatedExternalProfileId;
  }


  public SubscriptionPurchase orderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  /**
   * The order id of the latest recurring order associated with the purchase of the subscription. If the subscription was canceled because payment was declined, this will be the order id from the payment declined order.
   * @return orderId
   */
  @javax.annotation.Nullable
  public String getOrderId() {
    return orderId;
  }

  public void setOrderId(String orderId) {
    this.orderId = orderId;
  }


  public SubscriptionPurchase paymentState(Integer paymentState) {
    this.paymentState = paymentState;
    return this;
  }

  /**
   * The payment state of the subscription. Possible values are: 0. Payment pending 1. Payment received 2. Free trial 3. Pending deferred upgrade/downgrade Not present for canceled, expired subscriptions.
   * @return paymentState
   */
  @javax.annotation.Nullable
  public Integer getPaymentState() {
    return paymentState;
  }

  public void setPaymentState(Integer paymentState) {
    this.paymentState = paymentState;
  }


  public SubscriptionPurchase priceAmountMicros(String priceAmountMicros) {
    this.priceAmountMicros = priceAmountMicros;
    return this;
  }

  /**
   * Price of the subscription, For tax exclusive countries, the price doesn&#39;t include tax. For tax inclusive countries, the price includes tax. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.
   * @return priceAmountMicros
   */
  @javax.annotation.Nullable
  public String getPriceAmountMicros() {
    return priceAmountMicros;
  }

  public void setPriceAmountMicros(String priceAmountMicros) {
    this.priceAmountMicros = priceAmountMicros;
  }


  public SubscriptionPurchase priceChange(SubscriptionPriceChange priceChange) {
    this.priceChange = priceChange;
    return this;
  }

  /**
   * Get priceChange
   * @return priceChange
   */
  @javax.annotation.Nullable
  public SubscriptionPriceChange getPriceChange() {
    return priceChange;
  }

  public void setPriceChange(SubscriptionPriceChange priceChange) {
    this.priceChange = priceChange;
  }


  public SubscriptionPurchase priceCurrencyCode(String priceCurrencyCode) {
    this.priceCurrencyCode = priceCurrencyCode;
    return this;
  }

  /**
   * ISO 4217 currency code for the subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \&quot;GBP\&quot;.
   * @return priceCurrencyCode
   */
  @javax.annotation.Nullable
  public String getPriceCurrencyCode() {
    return priceCurrencyCode;
  }

  public void setPriceCurrencyCode(String priceCurrencyCode) {
    this.priceCurrencyCode = priceCurrencyCode;
  }


  public SubscriptionPurchase profileId(String profileId) {
    this.profileId = profileId;
    return this;
  }

  /**
   * The Google profile id of the user when the subscription was purchased. Only present for purchases made with &#39;Subscribe with Google&#39;.
   * @return profileId
   */
  @javax.annotation.Nullable
  public String getProfileId() {
    return profileId;
  }

  public void setProfileId(String profileId) {
    this.profileId = profileId;
  }


  public SubscriptionPurchase profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

  /**
   * The profile name of the user when the subscription was purchased. Only present for purchases made with &#39;Subscribe with Google&#39;.
   * @return profileName
   */
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public SubscriptionPurchase promotionCode(String promotionCode) {
    this.promotionCode = promotionCode;
    return this;
  }

  /**
   * The promotion code applied on this purchase. This field is only set if a vanity code promotion is applied when the subscription was purchased.
   * @return promotionCode
   */
  @javax.annotation.Nullable
  public String getPromotionCode() {
    return promotionCode;
  }

  public void setPromotionCode(String promotionCode) {
    this.promotionCode = promotionCode;
  }


  public SubscriptionPurchase promotionType(Integer promotionType) {
    this.promotionType = promotionType;
    return this;
  }

  /**
   * The type of promotion applied on this purchase. This field is only set if a promotion is applied when the subscription was purchased. Possible values are: 0. One time code 1. Vanity code
   * @return promotionType
   */
  @javax.annotation.Nullable
  public Integer getPromotionType() {
    return promotionType;
  }

  public void setPromotionType(Integer promotionType) {
    this.promotionType = promotionType;
  }


  public SubscriptionPurchase purchaseType(Integer purchaseType) {
    this.purchaseType = purchaseType;
    return this;
  }

  /**
   * The type of purchase of the subscription. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased from a license testing account) 1. Promo (i.e. purchased using a promo code)
   * @return purchaseType
   */
  @javax.annotation.Nullable
  public Integer getPurchaseType() {
    return purchaseType;
  }

  public void setPurchaseType(Integer purchaseType) {
    this.purchaseType = purchaseType;
  }


  public SubscriptionPurchase startTimeMillis(String startTimeMillis) {
    this.startTimeMillis = startTimeMillis;
    return this;
  }

  /**
   * Time at which the subscription was granted, in milliseconds since the Epoch.
   * @return startTimeMillis
   */
  @javax.annotation.Nullable
  public String getStartTimeMillis() {
    return startTimeMillis;
  }

  public void setStartTimeMillis(String startTimeMillis) {
    this.startTimeMillis = startTimeMillis;
  }


  public SubscriptionPurchase userCancellationTimeMillis(String userCancellationTimeMillis) {
    this.userCancellationTimeMillis = userCancellationTimeMillis;
    return this;
  }

  /**
   * The time at which the subscription was canceled by the user, in milliseconds since the epoch. Only present if cancelReason is 0.
   * @return userCancellationTimeMillis
   */
  @javax.annotation.Nullable
  public String getUserCancellationTimeMillis() {
    return userCancellationTimeMillis;
  }

  public void setUserCancellationTimeMillis(String userCancellationTimeMillis) {
    this.userCancellationTimeMillis = userCancellationTimeMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPurchase subscriptionPurchase = (SubscriptionPurchase) o;
    return Objects.equals(this.acknowledgementState, subscriptionPurchase.acknowledgementState) &&
        Objects.equals(this.autoRenewing, subscriptionPurchase.autoRenewing) &&
        Objects.equals(this.autoResumeTimeMillis, subscriptionPurchase.autoResumeTimeMillis) &&
        Objects.equals(this.cancelReason, subscriptionPurchase.cancelReason) &&
        Objects.equals(this.cancelSurveyResult, subscriptionPurchase.cancelSurveyResult) &&
        Objects.equals(this.countryCode, subscriptionPurchase.countryCode) &&
        Objects.equals(this.developerPayload, subscriptionPurchase.developerPayload) &&
        Objects.equals(this.emailAddress, subscriptionPurchase.emailAddress) &&
        Objects.equals(this.expiryTimeMillis, subscriptionPurchase.expiryTimeMillis) &&
        Objects.equals(this.externalAccountId, subscriptionPurchase.externalAccountId) &&
        Objects.equals(this.familyName, subscriptionPurchase.familyName) &&
        Objects.equals(this.givenName, subscriptionPurchase.givenName) &&
        Objects.equals(this.introductoryPriceInfo, subscriptionPurchase.introductoryPriceInfo) &&
        Objects.equals(this.kind, subscriptionPurchase.kind) &&
        Objects.equals(this.linkedPurchaseToken, subscriptionPurchase.linkedPurchaseToken) &&
        Objects.equals(this.obfuscatedExternalAccountId, subscriptionPurchase.obfuscatedExternalAccountId) &&
        Objects.equals(this.obfuscatedExternalProfileId, subscriptionPurchase.obfuscatedExternalProfileId) &&
        Objects.equals(this.orderId, subscriptionPurchase.orderId) &&
        Objects.equals(this.paymentState, subscriptionPurchase.paymentState) &&
        Objects.equals(this.priceAmountMicros, subscriptionPurchase.priceAmountMicros) &&
        Objects.equals(this.priceChange, subscriptionPurchase.priceChange) &&
        Objects.equals(this.priceCurrencyCode, subscriptionPurchase.priceCurrencyCode) &&
        Objects.equals(this.profileId, subscriptionPurchase.profileId) &&
        Objects.equals(this.profileName, subscriptionPurchase.profileName) &&
        Objects.equals(this.promotionCode, subscriptionPurchase.promotionCode) &&
        Objects.equals(this.promotionType, subscriptionPurchase.promotionType) &&
        Objects.equals(this.purchaseType, subscriptionPurchase.purchaseType) &&
        Objects.equals(this.startTimeMillis, subscriptionPurchase.startTimeMillis) &&
        Objects.equals(this.userCancellationTimeMillis, subscriptionPurchase.userCancellationTimeMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgementState, autoRenewing, autoResumeTimeMillis, cancelReason, cancelSurveyResult, countryCode, developerPayload, emailAddress, expiryTimeMillis, externalAccountId, familyName, givenName, introductoryPriceInfo, kind, linkedPurchaseToken, obfuscatedExternalAccountId, obfuscatedExternalProfileId, orderId, paymentState, priceAmountMicros, priceChange, priceCurrencyCode, profileId, profileName, promotionCode, promotionType, purchaseType, startTimeMillis, userCancellationTimeMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPurchase {\n");
    sb.append("    acknowledgementState: ").append(toIndentedString(acknowledgementState)).append("\n");
    sb.append("    autoRenewing: ").append(toIndentedString(autoRenewing)).append("\n");
    sb.append("    autoResumeTimeMillis: ").append(toIndentedString(autoResumeTimeMillis)).append("\n");
    sb.append("    cancelReason: ").append(toIndentedString(cancelReason)).append("\n");
    sb.append("    cancelSurveyResult: ").append(toIndentedString(cancelSurveyResult)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    developerPayload: ").append(toIndentedString(developerPayload)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    expiryTimeMillis: ").append(toIndentedString(expiryTimeMillis)).append("\n");
    sb.append("    externalAccountId: ").append(toIndentedString(externalAccountId)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    introductoryPriceInfo: ").append(toIndentedString(introductoryPriceInfo)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    linkedPurchaseToken: ").append(toIndentedString(linkedPurchaseToken)).append("\n");
    sb.append("    obfuscatedExternalAccountId: ").append(toIndentedString(obfuscatedExternalAccountId)).append("\n");
    sb.append("    obfuscatedExternalProfileId: ").append(toIndentedString(obfuscatedExternalProfileId)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    paymentState: ").append(toIndentedString(paymentState)).append("\n");
    sb.append("    priceAmountMicros: ").append(toIndentedString(priceAmountMicros)).append("\n");
    sb.append("    priceChange: ").append(toIndentedString(priceChange)).append("\n");
    sb.append("    priceCurrencyCode: ").append(toIndentedString(priceCurrencyCode)).append("\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    promotionCode: ").append(toIndentedString(promotionCode)).append("\n");
    sb.append("    promotionType: ").append(toIndentedString(promotionType)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    startTimeMillis: ").append(toIndentedString(startTimeMillis)).append("\n");
    sb.append("    userCancellationTimeMillis: ").append(toIndentedString(userCancellationTimeMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgementState");
    openapiFields.add("autoRenewing");
    openapiFields.add("autoResumeTimeMillis");
    openapiFields.add("cancelReason");
    openapiFields.add("cancelSurveyResult");
    openapiFields.add("countryCode");
    openapiFields.add("developerPayload");
    openapiFields.add("emailAddress");
    openapiFields.add("expiryTimeMillis");
    openapiFields.add("externalAccountId");
    openapiFields.add("familyName");
    openapiFields.add("givenName");
    openapiFields.add("introductoryPriceInfo");
    openapiFields.add("kind");
    openapiFields.add("linkedPurchaseToken");
    openapiFields.add("obfuscatedExternalAccountId");
    openapiFields.add("obfuscatedExternalProfileId");
    openapiFields.add("orderId");
    openapiFields.add("paymentState");
    openapiFields.add("priceAmountMicros");
    openapiFields.add("priceChange");
    openapiFields.add("priceCurrencyCode");
    openapiFields.add("profileId");
    openapiFields.add("profileName");
    openapiFields.add("promotionCode");
    openapiFields.add("promotionType");
    openapiFields.add("purchaseType");
    openapiFields.add("startTimeMillis");
    openapiFields.add("userCancellationTimeMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPurchase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPurchase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPurchase is not found in the empty JSON string", SubscriptionPurchase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPurchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPurchase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoResumeTimeMillis") != null && !jsonObj.get("autoResumeTimeMillis").isJsonNull()) && !jsonObj.get("autoResumeTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoResumeTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoResumeTimeMillis").toString()));
      }
      // validate the optional field `cancelSurveyResult`
      if (jsonObj.get("cancelSurveyResult") != null && !jsonObj.get("cancelSurveyResult").isJsonNull()) {
        SubscriptionCancelSurveyResult.validateJsonElement(jsonObj.get("cancelSurveyResult"));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("developerPayload") != null && !jsonObj.get("developerPayload").isJsonNull()) && !jsonObj.get("developerPayload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerPayload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developerPayload").toString()));
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("expiryTimeMillis") != null && !jsonObj.get("expiryTimeMillis").isJsonNull()) && !jsonObj.get("expiryTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryTimeMillis").toString()));
      }
      if ((jsonObj.get("externalAccountId") != null && !jsonObj.get("externalAccountId").isJsonNull()) && !jsonObj.get("externalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalAccountId").toString()));
      }
      if ((jsonObj.get("familyName") != null && !jsonObj.get("familyName").isJsonNull()) && !jsonObj.get("familyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `familyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("familyName").toString()));
      }
      if ((jsonObj.get("givenName") != null && !jsonObj.get("givenName").isJsonNull()) && !jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      // validate the optional field `introductoryPriceInfo`
      if (jsonObj.get("introductoryPriceInfo") != null && !jsonObj.get("introductoryPriceInfo").isJsonNull()) {
        IntroductoryPriceInfo.validateJsonElement(jsonObj.get("introductoryPriceInfo"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("linkedPurchaseToken") != null && !jsonObj.get("linkedPurchaseToken").isJsonNull()) && !jsonObj.get("linkedPurchaseToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedPurchaseToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedPurchaseToken").toString()));
      }
      if ((jsonObj.get("obfuscatedExternalAccountId") != null && !jsonObj.get("obfuscatedExternalAccountId").isJsonNull()) && !jsonObj.get("obfuscatedExternalAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedExternalAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedExternalAccountId").toString()));
      }
      if ((jsonObj.get("obfuscatedExternalProfileId") != null && !jsonObj.get("obfuscatedExternalProfileId").isJsonNull()) && !jsonObj.get("obfuscatedExternalProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `obfuscatedExternalProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("obfuscatedExternalProfileId").toString()));
      }
      if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull()) && !jsonObj.get("orderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderId").toString()));
      }
      if ((jsonObj.get("priceAmountMicros") != null && !jsonObj.get("priceAmountMicros").isJsonNull()) && !jsonObj.get("priceAmountMicros").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceAmountMicros` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceAmountMicros").toString()));
      }
      // validate the optional field `priceChange`
      if (jsonObj.get("priceChange") != null && !jsonObj.get("priceChange").isJsonNull()) {
        SubscriptionPriceChange.validateJsonElement(jsonObj.get("priceChange"));
      }
      if ((jsonObj.get("priceCurrencyCode") != null && !jsonObj.get("priceCurrencyCode").isJsonNull()) && !jsonObj.get("priceCurrencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceCurrencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceCurrencyCode").toString()));
      }
      if ((jsonObj.get("profileId") != null && !jsonObj.get("profileId").isJsonNull()) && !jsonObj.get("profileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileId").toString()));
      }
      if ((jsonObj.get("profileName") != null && !jsonObj.get("profileName").isJsonNull()) && !jsonObj.get("profileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profileName").toString()));
      }
      if ((jsonObj.get("promotionCode") != null && !jsonObj.get("promotionCode").isJsonNull()) && !jsonObj.get("promotionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `promotionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("promotionCode").toString()));
      }
      if ((jsonObj.get("startTimeMillis") != null && !jsonObj.get("startTimeMillis").isJsonNull()) && !jsonObj.get("startTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeMillis").toString()));
      }
      if ((jsonObj.get("userCancellationTimeMillis") != null && !jsonObj.get("userCancellationTimeMillis").isJsonNull()) && !jsonObj.get("userCancellationTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userCancellationTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userCancellationTimeMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPurchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPurchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPurchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPurchase.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPurchase>() {
           @Override
           public void write(JsonWriter out, SubscriptionPurchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPurchase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPurchase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPurchase
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPurchase
   */
  public static SubscriptionPurchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPurchase.class);
  }

  /**
   * Convert an instance of SubscriptionPurchase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

