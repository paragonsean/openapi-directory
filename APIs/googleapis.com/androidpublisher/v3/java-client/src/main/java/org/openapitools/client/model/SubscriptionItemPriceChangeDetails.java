/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Price change related information of a subscription item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionItemPriceChangeDetails {
  public static final String SERIALIZED_NAME_EXPECTED_NEW_PRICE_CHARGE_TIME = "expectedNewPriceChargeTime";
  @SerializedName(SERIALIZED_NAME_EXPECTED_NEW_PRICE_CHARGE_TIME)
  private String expectedNewPriceChargeTime;

  public static final String SERIALIZED_NAME_NEW_PRICE = "newPrice";
  @SerializedName(SERIALIZED_NAME_NEW_PRICE)
  private Money newPrice;

  /**
   * Price change mode specifies how the subscription item price is changing.
   */
  @JsonAdapter(PriceChangeModeEnum.Adapter.class)
  public enum PriceChangeModeEnum {
    PRICE_CHANGE_MODE_UNSPECIFIED("PRICE_CHANGE_MODE_UNSPECIFIED"),
    
    PRICE_DECREASE("PRICE_DECREASE"),
    
    PRICE_INCREASE("PRICE_INCREASE"),
    
    OPT_OUT_PRICE_INCREASE("OPT_OUT_PRICE_INCREASE");

    private String value;

    PriceChangeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceChangeModeEnum fromValue(String value) {
      for (PriceChangeModeEnum b : PriceChangeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriceChangeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceChangeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceChangeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriceChangeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriceChangeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICE_CHANGE_MODE = "priceChangeMode";
  @SerializedName(SERIALIZED_NAME_PRICE_CHANGE_MODE)
  private PriceChangeModeEnum priceChangeMode;

  /**
   * State the price change is currently in.
   */
  @JsonAdapter(PriceChangeStateEnum.Adapter.class)
  public enum PriceChangeStateEnum {
    PRICE_CHANGE_STATE_UNSPECIFIED("PRICE_CHANGE_STATE_UNSPECIFIED"),
    
    OUTSTANDING("OUTSTANDING"),
    
    CONFIRMED("CONFIRMED"),
    
    APPLIED("APPLIED");

    private String value;

    PriceChangeStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceChangeStateEnum fromValue(String value) {
      for (PriceChangeStateEnum b : PriceChangeStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriceChangeStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceChangeStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceChangeStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriceChangeStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriceChangeStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICE_CHANGE_STATE = "priceChangeState";
  @SerializedName(SERIALIZED_NAME_PRICE_CHANGE_STATE)
  private PriceChangeStateEnum priceChangeState;

  public SubscriptionItemPriceChangeDetails() {
  }

  public SubscriptionItemPriceChangeDetails expectedNewPriceChargeTime(String expectedNewPriceChargeTime) {
    this.expectedNewPriceChargeTime = expectedNewPriceChargeTime;
    return this;
  }

  /**
   * The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. This field is only populated if the price change has not taken effect.
   * @return expectedNewPriceChargeTime
   */
  @javax.annotation.Nullable
  public String getExpectedNewPriceChargeTime() {
    return expectedNewPriceChargeTime;
  }

  public void setExpectedNewPriceChargeTime(String expectedNewPriceChargeTime) {
    this.expectedNewPriceChargeTime = expectedNewPriceChargeTime;
  }


  public SubscriptionItemPriceChangeDetails newPrice(Money newPrice) {
    this.newPrice = newPrice;
    return this;
  }

  /**
   * Get newPrice
   * @return newPrice
   */
  @javax.annotation.Nullable
  public Money getNewPrice() {
    return newPrice;
  }

  public void setNewPrice(Money newPrice) {
    this.newPrice = newPrice;
  }


  public SubscriptionItemPriceChangeDetails priceChangeMode(PriceChangeModeEnum priceChangeMode) {
    this.priceChangeMode = priceChangeMode;
    return this;
  }

  /**
   * Price change mode specifies how the subscription item price is changing.
   * @return priceChangeMode
   */
  @javax.annotation.Nullable
  public PriceChangeModeEnum getPriceChangeMode() {
    return priceChangeMode;
  }

  public void setPriceChangeMode(PriceChangeModeEnum priceChangeMode) {
    this.priceChangeMode = priceChangeMode;
  }


  public SubscriptionItemPriceChangeDetails priceChangeState(PriceChangeStateEnum priceChangeState) {
    this.priceChangeState = priceChangeState;
    return this;
  }

  /**
   * State the price change is currently in.
   * @return priceChangeState
   */
  @javax.annotation.Nullable
  public PriceChangeStateEnum getPriceChangeState() {
    return priceChangeState;
  }

  public void setPriceChangeState(PriceChangeStateEnum priceChangeState) {
    this.priceChangeState = priceChangeState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionItemPriceChangeDetails subscriptionItemPriceChangeDetails = (SubscriptionItemPriceChangeDetails) o;
    return Objects.equals(this.expectedNewPriceChargeTime, subscriptionItemPriceChangeDetails.expectedNewPriceChargeTime) &&
        Objects.equals(this.newPrice, subscriptionItemPriceChangeDetails.newPrice) &&
        Objects.equals(this.priceChangeMode, subscriptionItemPriceChangeDetails.priceChangeMode) &&
        Objects.equals(this.priceChangeState, subscriptionItemPriceChangeDetails.priceChangeState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expectedNewPriceChargeTime, newPrice, priceChangeMode, priceChangeState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionItemPriceChangeDetails {\n");
    sb.append("    expectedNewPriceChargeTime: ").append(toIndentedString(expectedNewPriceChargeTime)).append("\n");
    sb.append("    newPrice: ").append(toIndentedString(newPrice)).append("\n");
    sb.append("    priceChangeMode: ").append(toIndentedString(priceChangeMode)).append("\n");
    sb.append("    priceChangeState: ").append(toIndentedString(priceChangeState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expectedNewPriceChargeTime");
    openapiFields.add("newPrice");
    openapiFields.add("priceChangeMode");
    openapiFields.add("priceChangeState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionItemPriceChangeDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionItemPriceChangeDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionItemPriceChangeDetails is not found in the empty JSON string", SubscriptionItemPriceChangeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionItemPriceChangeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionItemPriceChangeDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expectedNewPriceChargeTime") != null && !jsonObj.get("expectedNewPriceChargeTime").isJsonNull()) && !jsonObj.get("expectedNewPriceChargeTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expectedNewPriceChargeTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expectedNewPriceChargeTime").toString()));
      }
      // validate the optional field `newPrice`
      if (jsonObj.get("newPrice") != null && !jsonObj.get("newPrice").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("newPrice"));
      }
      if ((jsonObj.get("priceChangeMode") != null && !jsonObj.get("priceChangeMode").isJsonNull()) && !jsonObj.get("priceChangeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceChangeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceChangeMode").toString()));
      }
      // validate the optional field `priceChangeMode`
      if (jsonObj.get("priceChangeMode") != null && !jsonObj.get("priceChangeMode").isJsonNull()) {
        PriceChangeModeEnum.validateJsonElement(jsonObj.get("priceChangeMode"));
      }
      if ((jsonObj.get("priceChangeState") != null && !jsonObj.get("priceChangeState").isJsonNull()) && !jsonObj.get("priceChangeState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceChangeState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceChangeState").toString()));
      }
      // validate the optional field `priceChangeState`
      if (jsonObj.get("priceChangeState") != null && !jsonObj.get("priceChangeState").isJsonNull()) {
        PriceChangeStateEnum.validateJsonElement(jsonObj.get("priceChangeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionItemPriceChangeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionItemPriceChangeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionItemPriceChangeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionItemPriceChangeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionItemPriceChangeDetails>() {
           @Override
           public void write(JsonWriter out, SubscriptionItemPriceChangeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionItemPriceChangeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionItemPriceChangeDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionItemPriceChangeDetails
   * @throws IOException if the JSON string is invalid with respect to SubscriptionItemPriceChangeDetails
   */
  public static SubscriptionItemPriceChangeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionItemPriceChangeDetails.class);
  }

  /**
   * Convert an instance of SubscriptionItemPriceChangeDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

