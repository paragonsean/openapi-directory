/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CountryTargeting;
import org.openapitools.client.model.LocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A release within a track.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackRelease {
  public static final String SERIALIZED_NAME_COUNTRY_TARGETING = "countryTargeting";
  @SerializedName(SERIALIZED_NAME_COUNTRY_TARGETING)
  private CountryTargeting countryTargeting;

  public static final String SERIALIZED_NAME_IN_APP_UPDATE_PRIORITY = "inAppUpdatePriority";
  @SerializedName(SERIALIZED_NAME_IN_APP_UPDATE_PRIORITY)
  private Integer inAppUpdatePriority;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "releaseNotes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  private List<LocalizedText> releaseNotes = new ArrayList<>();

  /**
   * The status of the release.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("statusUnspecified"),
    
    DRAFT("draft"),
    
    IN_PROGRESS("inProgress"),
    
    HALTED("halted"),
    
    COMPLETED("completed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_USER_FRACTION = "userFraction";
  @SerializedName(SERIALIZED_NAME_USER_FRACTION)
  private Double userFraction;

  public static final String SERIALIZED_NAME_VERSION_CODES = "versionCodes";
  @SerializedName(SERIALIZED_NAME_VERSION_CODES)
  private List<String> versionCodes = new ArrayList<>();

  public TrackRelease() {
  }

  public TrackRelease countryTargeting(CountryTargeting countryTargeting) {
    this.countryTargeting = countryTargeting;
    return this;
  }

  /**
   * Get countryTargeting
   * @return countryTargeting
   */
  @javax.annotation.Nullable
  public CountryTargeting getCountryTargeting() {
    return countryTargeting;
  }

  public void setCountryTargeting(CountryTargeting countryTargeting) {
    this.countryTargeting = countryTargeting;
  }


  public TrackRelease inAppUpdatePriority(Integer inAppUpdatePriority) {
    this.inAppUpdatePriority = inAppUpdatePriority;
    return this;
  }

  /**
   * In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority. Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.
   * @return inAppUpdatePriority
   */
  @javax.annotation.Nullable
  public Integer getInAppUpdatePriority() {
    return inAppUpdatePriority;
  }

  public void setInAppUpdatePriority(Integer inAppUpdatePriority) {
    this.inAppUpdatePriority = inAppUpdatePriority;
  }


  public TrackRelease name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The release name. Not required to be unique. If not set, the name is generated from the APK&#39;s version_name. If the release contains multiple APKs, the name is generated from the date.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TrackRelease releaseNotes(List<LocalizedText> releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  public TrackRelease addReleaseNotesItem(LocalizedText releaseNotesItem) {
    if (this.releaseNotes == null) {
      this.releaseNotes = new ArrayList<>();
    }
    this.releaseNotes.add(releaseNotesItem);
    return this;
  }

  /**
   * A description of what is new in this release.
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public List<LocalizedText> getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(List<LocalizedText> releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public TrackRelease status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the release.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TrackRelease userFraction(Double userFraction) {
    this.userFraction = userFraction;
    return this;
  }

  /**
   * Fraction of users who are eligible for a staged release. 0 &lt; fraction &lt; 1. Can only be set when status is \&quot;inProgress\&quot; or \&quot;halted\&quot;.
   * @return userFraction
   */
  @javax.annotation.Nullable
  public Double getUserFraction() {
    return userFraction;
  }

  public void setUserFraction(Double userFraction) {
    this.userFraction = userFraction;
  }


  public TrackRelease versionCodes(List<String> versionCodes) {
    this.versionCodes = versionCodes;
    return this;
  }

  public TrackRelease addVersionCodesItem(String versionCodesItem) {
    if (this.versionCodes == null) {
      this.versionCodes = new ArrayList<>();
    }
    this.versionCodes.add(versionCodesItem);
    return this;
  }

  /**
   * Version codes of all APKs in the release. Must include version codes to retain from previous releases.
   * @return versionCodes
   */
  @javax.annotation.Nullable
  public List<String> getVersionCodes() {
    return versionCodes;
  }

  public void setVersionCodes(List<String> versionCodes) {
    this.versionCodes = versionCodes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackRelease trackRelease = (TrackRelease) o;
    return Objects.equals(this.countryTargeting, trackRelease.countryTargeting) &&
        Objects.equals(this.inAppUpdatePriority, trackRelease.inAppUpdatePriority) &&
        Objects.equals(this.name, trackRelease.name) &&
        Objects.equals(this.releaseNotes, trackRelease.releaseNotes) &&
        Objects.equals(this.status, trackRelease.status) &&
        Objects.equals(this.userFraction, trackRelease.userFraction) &&
        Objects.equals(this.versionCodes, trackRelease.versionCodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryTargeting, inAppUpdatePriority, name, releaseNotes, status, userFraction, versionCodes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackRelease {\n");
    sb.append("    countryTargeting: ").append(toIndentedString(countryTargeting)).append("\n");
    sb.append("    inAppUpdatePriority: ").append(toIndentedString(inAppUpdatePriority)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    userFraction: ").append(toIndentedString(userFraction)).append("\n");
    sb.append("    versionCodes: ").append(toIndentedString(versionCodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryTargeting");
    openapiFields.add("inAppUpdatePriority");
    openapiFields.add("name");
    openapiFields.add("releaseNotes");
    openapiFields.add("status");
    openapiFields.add("userFraction");
    openapiFields.add("versionCodes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackRelease
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackRelease.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackRelease is not found in the empty JSON string", TrackRelease.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackRelease.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackRelease` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `countryTargeting`
      if (jsonObj.get("countryTargeting") != null && !jsonObj.get("countryTargeting").isJsonNull()) {
        CountryTargeting.validateJsonElement(jsonObj.get("countryTargeting"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("releaseNotes") != null && !jsonObj.get("releaseNotes").isJsonNull()) {
        JsonArray jsonArrayreleaseNotes = jsonObj.getAsJsonArray("releaseNotes");
        if (jsonArrayreleaseNotes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("releaseNotes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `releaseNotes` to be an array in the JSON string but got `%s`", jsonObj.get("releaseNotes").toString()));
          }

          // validate the optional field `releaseNotes` (array)
          for (int i = 0; i < jsonArrayreleaseNotes.size(); i++) {
            LocalizedText.validateJsonElement(jsonArrayreleaseNotes.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("versionCodes") != null && !jsonObj.get("versionCodes").isJsonNull() && !jsonObj.get("versionCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionCodes` to be an array in the JSON string but got `%s`", jsonObj.get("versionCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackRelease.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackRelease' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackRelease> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackRelease.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackRelease>() {
           @Override
           public void write(JsonWriter out, TrackRelease value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackRelease read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackRelease given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackRelease
   * @throws IOException if the JSON string is invalid with respect to TrackRelease
   */
  public static TrackRelease fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackRelease.class);
  }

  /**
   * Convert an instance of TrackRelease to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

