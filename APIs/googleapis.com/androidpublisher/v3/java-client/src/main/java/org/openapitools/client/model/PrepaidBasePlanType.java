/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a base plan that does not automatically renew at the end of the base plan, and must be manually renewed by the user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrepaidBasePlanType {
  public static final String SERIALIZED_NAME_BILLING_PERIOD_DURATION = "billingPeriodDuration";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_DURATION)
  private String billingPeriodDuration;

  /**
   * Whether users should be able to extend this prepaid base plan in Google Play surfaces. Defaults to TIME_EXTENSION_ACTIVE if not specified.
   */
  @JsonAdapter(TimeExtensionEnum.Adapter.class)
  public enum TimeExtensionEnum {
    UNSPECIFIED("TIME_EXTENSION_UNSPECIFIED"),
    
    ACTIVE("TIME_EXTENSION_ACTIVE"),
    
    INACTIVE("TIME_EXTENSION_INACTIVE");

    private String value;

    TimeExtensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeExtensionEnum fromValue(String value) {
      for (TimeExtensionEnum b : TimeExtensionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeExtensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeExtensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeExtensionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeExtensionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeExtensionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_EXTENSION = "timeExtension";
  @SerializedName(SERIALIZED_NAME_TIME_EXTENSION)
  private TimeExtensionEnum timeExtension;

  public PrepaidBasePlanType() {
  }

  public PrepaidBasePlanType billingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
    return this;
  }

  /**
   * Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.
   * @return billingPeriodDuration
   */
  @javax.annotation.Nullable
  public String getBillingPeriodDuration() {
    return billingPeriodDuration;
  }

  public void setBillingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
  }


  public PrepaidBasePlanType timeExtension(TimeExtensionEnum timeExtension) {
    this.timeExtension = timeExtension;
    return this;
  }

  /**
   * Whether users should be able to extend this prepaid base plan in Google Play surfaces. Defaults to TIME_EXTENSION_ACTIVE if not specified.
   * @return timeExtension
   */
  @javax.annotation.Nullable
  public TimeExtensionEnum getTimeExtension() {
    return timeExtension;
  }

  public void setTimeExtension(TimeExtensionEnum timeExtension) {
    this.timeExtension = timeExtension;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrepaidBasePlanType prepaidBasePlanType = (PrepaidBasePlanType) o;
    return Objects.equals(this.billingPeriodDuration, prepaidBasePlanType.billingPeriodDuration) &&
        Objects.equals(this.timeExtension, prepaidBasePlanType.timeExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPeriodDuration, timeExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrepaidBasePlanType {\n");
    sb.append("    billingPeriodDuration: ").append(toIndentedString(billingPeriodDuration)).append("\n");
    sb.append("    timeExtension: ").append(toIndentedString(timeExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPeriodDuration");
    openapiFields.add("timeExtension");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrepaidBasePlanType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrepaidBasePlanType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrepaidBasePlanType is not found in the empty JSON string", PrepaidBasePlanType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrepaidBasePlanType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrepaidBasePlanType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingPeriodDuration") != null && !jsonObj.get("billingPeriodDuration").isJsonNull()) && !jsonObj.get("billingPeriodDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodDuration").toString()));
      }
      if ((jsonObj.get("timeExtension") != null && !jsonObj.get("timeExtension").isJsonNull()) && !jsonObj.get("timeExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeExtension").toString()));
      }
      // validate the optional field `timeExtension`
      if (jsonObj.get("timeExtension") != null && !jsonObj.get("timeExtension").isJsonNull()) {
        TimeExtensionEnum.validateJsonElement(jsonObj.get("timeExtension"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrepaidBasePlanType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrepaidBasePlanType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrepaidBasePlanType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrepaidBasePlanType.class));

       return (TypeAdapter<T>) new TypeAdapter<PrepaidBasePlanType>() {
           @Override
           public void write(JsonWriter out, PrepaidBasePlanType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrepaidBasePlanType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrepaidBasePlanType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrepaidBasePlanType
   * @throws IOException if the JSON string is invalid with respect to PrepaidBasePlanType
   */
  public static PrepaidBasePlanType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrepaidBasePlanType.class);
  }

  /**
   * Convert an instance of PrepaidBasePlanType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

