/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ConvertedOtherRegionsPrice;
import org.openapitools.client.model.ConvertedRegionPrice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for ConvertRegionPrices.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConvertRegionPricesResponse {
  public static final String SERIALIZED_NAME_CONVERTED_OTHER_REGIONS_PRICE = "convertedOtherRegionsPrice";
  @SerializedName(SERIALIZED_NAME_CONVERTED_OTHER_REGIONS_PRICE)
  private ConvertedOtherRegionsPrice convertedOtherRegionsPrice;

  public static final String SERIALIZED_NAME_CONVERTED_REGION_PRICES = "convertedRegionPrices";
  @SerializedName(SERIALIZED_NAME_CONVERTED_REGION_PRICES)
  private Map<String, ConvertedRegionPrice> convertedRegionPrices = new HashMap<>();

  public ConvertRegionPricesResponse() {
  }

  public ConvertRegionPricesResponse convertedOtherRegionsPrice(ConvertedOtherRegionsPrice convertedOtherRegionsPrice) {
    this.convertedOtherRegionsPrice = convertedOtherRegionsPrice;
    return this;
  }

  /**
   * Get convertedOtherRegionsPrice
   * @return convertedOtherRegionsPrice
   */
  @javax.annotation.Nullable
  public ConvertedOtherRegionsPrice getConvertedOtherRegionsPrice() {
    return convertedOtherRegionsPrice;
  }

  public void setConvertedOtherRegionsPrice(ConvertedOtherRegionsPrice convertedOtherRegionsPrice) {
    this.convertedOtherRegionsPrice = convertedOtherRegionsPrice;
  }


  public ConvertRegionPricesResponse convertedRegionPrices(Map<String, ConvertedRegionPrice> convertedRegionPrices) {
    this.convertedRegionPrices = convertedRegionPrices;
    return this;
  }

  public ConvertRegionPricesResponse putConvertedRegionPricesItem(String key, ConvertedRegionPrice convertedRegionPricesItem) {
    if (this.convertedRegionPrices == null) {
      this.convertedRegionPrices = new HashMap<>();
    }
    this.convertedRegionPrices.put(key, convertedRegionPricesItem);
    return this;
  }

  /**
   * Map from region code to converted region price.
   * @return convertedRegionPrices
   */
  @javax.annotation.Nullable
  public Map<String, ConvertedRegionPrice> getConvertedRegionPrices() {
    return convertedRegionPrices;
  }

  public void setConvertedRegionPrices(Map<String, ConvertedRegionPrice> convertedRegionPrices) {
    this.convertedRegionPrices = convertedRegionPrices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConvertRegionPricesResponse convertRegionPricesResponse = (ConvertRegionPricesResponse) o;
    return Objects.equals(this.convertedOtherRegionsPrice, convertRegionPricesResponse.convertedOtherRegionsPrice) &&
        Objects.equals(this.convertedRegionPrices, convertRegionPricesResponse.convertedRegionPrices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(convertedOtherRegionsPrice, convertedRegionPrices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConvertRegionPricesResponse {\n");
    sb.append("    convertedOtherRegionsPrice: ").append(toIndentedString(convertedOtherRegionsPrice)).append("\n");
    sb.append("    convertedRegionPrices: ").append(toIndentedString(convertedRegionPrices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("convertedOtherRegionsPrice");
    openapiFields.add("convertedRegionPrices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConvertRegionPricesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConvertRegionPricesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConvertRegionPricesResponse is not found in the empty JSON string", ConvertRegionPricesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConvertRegionPricesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConvertRegionPricesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `convertedOtherRegionsPrice`
      if (jsonObj.get("convertedOtherRegionsPrice") != null && !jsonObj.get("convertedOtherRegionsPrice").isJsonNull()) {
        ConvertedOtherRegionsPrice.validateJsonElement(jsonObj.get("convertedOtherRegionsPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConvertRegionPricesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConvertRegionPricesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConvertRegionPricesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConvertRegionPricesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ConvertRegionPricesResponse>() {
           @Override
           public void write(JsonWriter out, ConvertRegionPricesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConvertRegionPricesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConvertRegionPricesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConvertRegionPricesResponse
   * @throws IOException if the JSON string is invalid with respect to ConvertRegionPricesResponse
   */
  public static ConvertRegionPricesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConvertRegionPricesResponse.class);
  }

  /**
   * Convert an instance of ConvertRegionPricesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

