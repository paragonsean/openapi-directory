/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.InAppProductListing;
import org.openapitools.client.model.ManagedProductTaxAndComplianceSettings;
import org.openapitools.client.model.Price;
import org.openapitools.client.model.SubscriptionTaxAndComplianceSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An in-app product. The resource for InappproductsService.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InAppProduct {
  public static final String SERIALIZED_NAME_DEFAULT_LANGUAGE = "defaultLanguage";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LANGUAGE)
  private String defaultLanguage;

  public static final String SERIALIZED_NAME_DEFAULT_PRICE = "defaultPrice";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PRICE)
  private Price defaultPrice;

  public static final String SERIALIZED_NAME_GRACE_PERIOD = "gracePeriod";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD)
  private String gracePeriod;

  public static final String SERIALIZED_NAME_LISTINGS = "listings";
  @SerializedName(SERIALIZED_NAME_LISTINGS)
  private Map<String, InAppProductListing> listings = new HashMap<>();

  public static final String SERIALIZED_NAME_MANAGED_PRODUCT_TAXES_AND_COMPLIANCE_SETTINGS = "managedProductTaxesAndComplianceSettings";
  @SerializedName(SERIALIZED_NAME_MANAGED_PRODUCT_TAXES_AND_COMPLIANCE_SETTINGS)
  private ManagedProductTaxAndComplianceSettings managedProductTaxesAndComplianceSettings;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "packageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PRICES = "prices";
  @SerializedName(SERIALIZED_NAME_PRICES)
  private Map<String, Price> prices = new HashMap<>();

  /**
   * The type of the product, e.g. a recurring subscription.
   */
  @JsonAdapter(PurchaseTypeEnum.Adapter.class)
  public enum PurchaseTypeEnum {
    PURCHASE_TYPE_UNSPECIFIED("purchaseTypeUnspecified"),
    
    MANAGED_USER("managedUser"),
    
    SUBSCRIPTION("subscription");

    private String value;

    PurchaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PurchaseTypeEnum fromValue(String value) {
      for (PurchaseTypeEnum b : PurchaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PurchaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PurchaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PurchaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PurchaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PurchaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PURCHASE_TYPE = "purchaseType";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TYPE)
  private PurchaseTypeEnum purchaseType;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  /**
   * The status of the product, e.g. whether it&#39;s active.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("statusUnspecified"),
    
    ACTIVE("active"),
    
    INACTIVE("inactive");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_PERIOD = "subscriptionPeriod";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_PERIOD)
  private String subscriptionPeriod;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_TAXES_AND_COMPLIANCE_SETTINGS = "subscriptionTaxesAndComplianceSettings";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_TAXES_AND_COMPLIANCE_SETTINGS)
  private SubscriptionTaxAndComplianceSettings subscriptionTaxesAndComplianceSettings;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD = "trialPeriod";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD)
  private String trialPeriod;

  public InAppProduct() {
  }

  public InAppProduct defaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
    return this;
  }

  /**
   * Default language of the localized data, as defined by BCP-47. e.g. \&quot;en-US\&quot;.
   * @return defaultLanguage
   */
  @javax.annotation.Nullable
  public String getDefaultLanguage() {
    return defaultLanguage;
  }

  public void setDefaultLanguage(String defaultLanguage) {
    this.defaultLanguage = defaultLanguage;
  }


  public InAppProduct defaultPrice(Price defaultPrice) {
    this.defaultPrice = defaultPrice;
    return this;
  }

  /**
   * Get defaultPrice
   * @return defaultPrice
   */
  @javax.annotation.Nullable
  public Price getDefaultPrice() {
    return defaultPrice;
  }

  public void setDefaultPrice(Price defaultPrice) {
    this.defaultPrice = defaultPrice;
  }


  public InAppProduct gracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
    return this;
  }

  /**
   * Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).
   * @return gracePeriod
   */
  @javax.annotation.Nullable
  public String getGracePeriod() {
    return gracePeriod;
  }

  public void setGracePeriod(String gracePeriod) {
    this.gracePeriod = gracePeriod;
  }


  public InAppProduct listings(Map<String, InAppProductListing> listings) {
    this.listings = listings;
    return this;
  }

  public InAppProduct putListingsItem(String key, InAppProductListing listingsItem) {
    if (this.listings == null) {
      this.listings = new HashMap<>();
    }
    this.listings.put(key, listingsItem);
    return this;
  }

  /**
   * List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. \&quot;en-US\&quot;.
   * @return listings
   */
  @javax.annotation.Nullable
  public Map<String, InAppProductListing> getListings() {
    return listings;
  }

  public void setListings(Map<String, InAppProductListing> listings) {
    this.listings = listings;
  }


  public InAppProduct managedProductTaxesAndComplianceSettings(ManagedProductTaxAndComplianceSettings managedProductTaxesAndComplianceSettings) {
    this.managedProductTaxesAndComplianceSettings = managedProductTaxesAndComplianceSettings;
    return this;
  }

  /**
   * Get managedProductTaxesAndComplianceSettings
   * @return managedProductTaxesAndComplianceSettings
   */
  @javax.annotation.Nullable
  public ManagedProductTaxAndComplianceSettings getManagedProductTaxesAndComplianceSettings() {
    return managedProductTaxesAndComplianceSettings;
  }

  public void setManagedProductTaxesAndComplianceSettings(ManagedProductTaxAndComplianceSettings managedProductTaxesAndComplianceSettings) {
    this.managedProductTaxesAndComplianceSettings = managedProductTaxesAndComplianceSettings;
  }


  public InAppProduct packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Package name of the parent app.
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public InAppProduct prices(Map<String, Price> prices) {
    this.prices = prices;
    return this;
  }

  public InAppProduct putPricesItem(String key, Price pricesItem) {
    if (this.prices == null) {
      this.prices = new HashMap<>();
    }
    this.prices.put(key, pricesItem);
    return this;
  }

  /**
   * Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2.
   * @return prices
   */
  @javax.annotation.Nullable
  public Map<String, Price> getPrices() {
    return prices;
  }

  public void setPrices(Map<String, Price> prices) {
    this.prices = prices;
  }


  public InAppProduct purchaseType(PurchaseTypeEnum purchaseType) {
    this.purchaseType = purchaseType;
    return this;
  }

  /**
   * The type of the product, e.g. a recurring subscription.
   * @return purchaseType
   */
  @javax.annotation.Nullable
  public PurchaseTypeEnum getPurchaseType() {
    return purchaseType;
  }

  public void setPurchaseType(PurchaseTypeEnum purchaseType) {
    this.purchaseType = purchaseType;
  }


  public InAppProduct sku(String sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Stock-keeping-unit (SKU) of the product, unique within an app.
   * @return sku
   */
  @javax.annotation.Nullable
  public String getSku() {
    return sku;
  }

  public void setSku(String sku) {
    this.sku = sku;
  }


  public InAppProduct status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the product, e.g. whether it&#39;s active.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public InAppProduct subscriptionPeriod(String subscriptionPeriod) {
    this.subscriptionPeriod = subscriptionPeriod;
    return this;
  }

  /**
   * Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year).
   * @return subscriptionPeriod
   */
  @javax.annotation.Nullable
  public String getSubscriptionPeriod() {
    return subscriptionPeriod;
  }

  public void setSubscriptionPeriod(String subscriptionPeriod) {
    this.subscriptionPeriod = subscriptionPeriod;
  }


  public InAppProduct subscriptionTaxesAndComplianceSettings(SubscriptionTaxAndComplianceSettings subscriptionTaxesAndComplianceSettings) {
    this.subscriptionTaxesAndComplianceSettings = subscriptionTaxesAndComplianceSettings;
    return this;
  }

  /**
   * Get subscriptionTaxesAndComplianceSettings
   * @return subscriptionTaxesAndComplianceSettings
   */
  @javax.annotation.Nullable
  public SubscriptionTaxAndComplianceSettings getSubscriptionTaxesAndComplianceSettings() {
    return subscriptionTaxesAndComplianceSettings;
  }

  public void setSubscriptionTaxesAndComplianceSettings(SubscriptionTaxAndComplianceSettings subscriptionTaxesAndComplianceSettings) {
    this.subscriptionTaxesAndComplianceSettings = subscriptionTaxesAndComplianceSettings;
  }


  public InAppProduct trialPeriod(String trialPeriod) {
    this.trialPeriod = trialPeriod;
    return this;
  }

  /**
   * Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days).
   * @return trialPeriod
   */
  @javax.annotation.Nullable
  public String getTrialPeriod() {
    return trialPeriod;
  }

  public void setTrialPeriod(String trialPeriod) {
    this.trialPeriod = trialPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InAppProduct inAppProduct = (InAppProduct) o;
    return Objects.equals(this.defaultLanguage, inAppProduct.defaultLanguage) &&
        Objects.equals(this.defaultPrice, inAppProduct.defaultPrice) &&
        Objects.equals(this.gracePeriod, inAppProduct.gracePeriod) &&
        Objects.equals(this.listings, inAppProduct.listings) &&
        Objects.equals(this.managedProductTaxesAndComplianceSettings, inAppProduct.managedProductTaxesAndComplianceSettings) &&
        Objects.equals(this.packageName, inAppProduct.packageName) &&
        Objects.equals(this.prices, inAppProduct.prices) &&
        Objects.equals(this.purchaseType, inAppProduct.purchaseType) &&
        Objects.equals(this.sku, inAppProduct.sku) &&
        Objects.equals(this.status, inAppProduct.status) &&
        Objects.equals(this.subscriptionPeriod, inAppProduct.subscriptionPeriod) &&
        Objects.equals(this.subscriptionTaxesAndComplianceSettings, inAppProduct.subscriptionTaxesAndComplianceSettings) &&
        Objects.equals(this.trialPeriod, inAppProduct.trialPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultLanguage, defaultPrice, gracePeriod, listings, managedProductTaxesAndComplianceSettings, packageName, prices, purchaseType, sku, status, subscriptionPeriod, subscriptionTaxesAndComplianceSettings, trialPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InAppProduct {\n");
    sb.append("    defaultLanguage: ").append(toIndentedString(defaultLanguage)).append("\n");
    sb.append("    defaultPrice: ").append(toIndentedString(defaultPrice)).append("\n");
    sb.append("    gracePeriod: ").append(toIndentedString(gracePeriod)).append("\n");
    sb.append("    listings: ").append(toIndentedString(listings)).append("\n");
    sb.append("    managedProductTaxesAndComplianceSettings: ").append(toIndentedString(managedProductTaxesAndComplianceSettings)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    prices: ").append(toIndentedString(prices)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionPeriod: ").append(toIndentedString(subscriptionPeriod)).append("\n");
    sb.append("    subscriptionTaxesAndComplianceSettings: ").append(toIndentedString(subscriptionTaxesAndComplianceSettings)).append("\n");
    sb.append("    trialPeriod: ").append(toIndentedString(trialPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultLanguage");
    openapiFields.add("defaultPrice");
    openapiFields.add("gracePeriod");
    openapiFields.add("listings");
    openapiFields.add("managedProductTaxesAndComplianceSettings");
    openapiFields.add("packageName");
    openapiFields.add("prices");
    openapiFields.add("purchaseType");
    openapiFields.add("sku");
    openapiFields.add("status");
    openapiFields.add("subscriptionPeriod");
    openapiFields.add("subscriptionTaxesAndComplianceSettings");
    openapiFields.add("trialPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InAppProduct
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InAppProduct.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InAppProduct is not found in the empty JSON string", InAppProduct.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InAppProduct.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InAppProduct` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultLanguage") != null && !jsonObj.get("defaultLanguage").isJsonNull()) && !jsonObj.get("defaultLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLanguage").toString()));
      }
      // validate the optional field `defaultPrice`
      if (jsonObj.get("defaultPrice") != null && !jsonObj.get("defaultPrice").isJsonNull()) {
        Price.validateJsonElement(jsonObj.get("defaultPrice"));
      }
      if ((jsonObj.get("gracePeriod") != null && !jsonObj.get("gracePeriod").isJsonNull()) && !jsonObj.get("gracePeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gracePeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gracePeriod").toString()));
      }
      // validate the optional field `managedProductTaxesAndComplianceSettings`
      if (jsonObj.get("managedProductTaxesAndComplianceSettings") != null && !jsonObj.get("managedProductTaxesAndComplianceSettings").isJsonNull()) {
        ManagedProductTaxAndComplianceSettings.validateJsonElement(jsonObj.get("managedProductTaxesAndComplianceSettings"));
      }
      if ((jsonObj.get("packageName") != null && !jsonObj.get("packageName").isJsonNull()) && !jsonObj.get("packageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageName").toString()));
      }
      if ((jsonObj.get("purchaseType") != null && !jsonObj.get("purchaseType").isJsonNull()) && !jsonObj.get("purchaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseType").toString()));
      }
      // validate the optional field `purchaseType`
      if (jsonObj.get("purchaseType") != null && !jsonObj.get("purchaseType").isJsonNull()) {
        PurchaseTypeEnum.validateJsonElement(jsonObj.get("purchaseType"));
      }
      if ((jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subscriptionPeriod") != null && !jsonObj.get("subscriptionPeriod").isJsonNull()) && !jsonObj.get("subscriptionPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionPeriod").toString()));
      }
      // validate the optional field `subscriptionTaxesAndComplianceSettings`
      if (jsonObj.get("subscriptionTaxesAndComplianceSettings") != null && !jsonObj.get("subscriptionTaxesAndComplianceSettings").isJsonNull()) {
        SubscriptionTaxAndComplianceSettings.validateJsonElement(jsonObj.get("subscriptionTaxesAndComplianceSettings"));
      }
      if ((jsonObj.get("trialPeriod") != null && !jsonObj.get("trialPeriod").isJsonNull()) && !jsonObj.get("trialPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trialPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trialPeriod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InAppProduct.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InAppProduct' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InAppProduct> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InAppProduct.class));

       return (TypeAdapter<T>) new TypeAdapter<InAppProduct>() {
           @Override
           public void write(JsonWriter out, InAppProduct value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InAppProduct read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InAppProduct given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InAppProduct
   * @throws IOException if the JSON string is invalid with respect to InAppProduct
   */
  public static InAppProduct fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InAppProduct.class);
  }

  /**
   * Convert an instance of InAppProduct to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

