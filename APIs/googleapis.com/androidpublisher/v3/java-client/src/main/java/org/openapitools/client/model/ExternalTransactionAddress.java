/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User&#39;s address for the external transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExternalTransactionAddress {
  public static final String SERIALIZED_NAME_ADMINISTRATIVE_AREA = "administrativeArea";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_AREA)
  private String administrativeArea;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public ExternalTransactionAddress() {
  }

  public ExternalTransactionAddress administrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
    return this;
  }

  /**
   * Optional. Top-level administrative subdivision of the country/region. Only required for transactions in India. Valid values are \&quot;ANDAMAN AND NICOBAR ISLANDS\&quot;, \&quot;ANDHRA PRADESH\&quot;, \&quot;ARUNACHAL PRADESH\&quot;, \&quot;ASSAM\&quot;, \&quot;BIHAR\&quot;, \&quot;CHANDIGARH\&quot;, \&quot;CHHATTISGARH\&quot;, \&quot;DADRA AND NAGAR HAVELI\&quot;, \&quot;DADRA AND NAGAR HAVELI AND DAMAN AND DIU\&quot;, \&quot;DAMAN AND DIU\&quot;, \&quot;DELHI\&quot;, \&quot;GOA\&quot;, \&quot;GUJARAT\&quot;, \&quot;HARYANA\&quot;, \&quot;HIMACHAL PRADESH\&quot;, \&quot;JAMMU AND KASHMIR\&quot;, \&quot;JHARKHAND\&quot;, \&quot;KARNATAKA\&quot;, \&quot;KERALA\&quot;, \&quot;LADAKH\&quot;, \&quot;LAKSHADWEEP\&quot;, \&quot;MADHYA PRADESH\&quot;, \&quot;MAHARASHTRA\&quot;, \&quot;MANIPUR\&quot;, \&quot;MEGHALAYA\&quot;, \&quot;MIZORAM\&quot;, \&quot;NAGALAND\&quot;, \&quot;ODISHA\&quot;, \&quot;PUDUCHERRY\&quot;, \&quot;PUNJAB\&quot;, \&quot;RAJASTHAN\&quot;, \&quot;SIKKIM\&quot;, \&quot;TAMIL NADU\&quot;, \&quot;TELANGANA\&quot;, \&quot;TRIPURA\&quot;, \&quot;UTTAR PRADESH\&quot;, \&quot;UTTARAKHAND\&quot;, and \&quot;WEST BENGAL\&quot;.
   * @return administrativeArea
   */
  @javax.annotation.Nullable
  public String getAdministrativeArea() {
    return administrativeArea;
  }

  public void setAdministrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
  }


  public ExternalTransactionAddress regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Required. Two letter region code based on ISO-3166-1 Alpha-2 (UN region codes).
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalTransactionAddress externalTransactionAddress = (ExternalTransactionAddress) o;
    return Objects.equals(this.administrativeArea, externalTransactionAddress.administrativeArea) &&
        Objects.equals(this.regionCode, externalTransactionAddress.regionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(administrativeArea, regionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalTransactionAddress {\n");
    sb.append("    administrativeArea: ").append(toIndentedString(administrativeArea)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("administrativeArea");
    openapiFields.add("regionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExternalTransactionAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalTransactionAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalTransactionAddress is not found in the empty JSON string", ExternalTransactionAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExternalTransactionAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExternalTransactionAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("administrativeArea") != null && !jsonObj.get("administrativeArea").isJsonNull()) && !jsonObj.get("administrativeArea").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `administrativeArea` to be a primitive type in the JSON string but got `%s`", jsonObj.get("administrativeArea").toString()));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalTransactionAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalTransactionAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalTransactionAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalTransactionAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalTransactionAddress>() {
           @Override
           public void write(JsonWriter out, ExternalTransactionAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalTransactionAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExternalTransactionAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExternalTransactionAddress
   * @throws IOException if the JSON string is invalid with respect to ExternalTransactionAddress
   */
  public static ExternalTransactionAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalTransactionAddress.class);
  }

  /**
   * Convert an instance of ExternalTransactionAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

