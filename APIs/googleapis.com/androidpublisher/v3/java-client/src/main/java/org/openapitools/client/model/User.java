/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Grant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A user resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  /**
   * Output only. The state of the user&#39;s access to the Play Console.
   */
  @JsonAdapter(AccessStateEnum.Adapter.class)
  public enum AccessStateEnum {
    ACCESS_STATE_UNSPECIFIED("ACCESS_STATE_UNSPECIFIED"),
    
    INVITED("INVITED"),
    
    INVITATION_EXPIRED("INVITATION_EXPIRED"),
    
    ACCESS_GRANTED("ACCESS_GRANTED"),
    
    ACCESS_EXPIRED("ACCESS_EXPIRED");

    private String value;

    AccessStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessStateEnum fromValue(String value) {
      for (AccessStateEnum b : AccessStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_STATE = "accessState";
  @SerializedName(SERIALIZED_NAME_ACCESS_STATE)
  private AccessStateEnum accessState;

  /**
   * Gets or Sets developerAccountPermissions
   */
  @JsonAdapter(DeveloperAccountPermissionsEnum.Adapter.class)
  public enum DeveloperAccountPermissionsEnum {
    DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED("DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED"),
    
    CAN_SEE_ALL_APPS("CAN_SEE_ALL_APPS"),
    
    CAN_VIEW_FINANCIAL_DATA_GLOBAL("CAN_VIEW_FINANCIAL_DATA_GLOBAL"),
    
    CAN_MANAGE_PERMISSIONS_GLOBAL("CAN_MANAGE_PERMISSIONS_GLOBAL"),
    
    CAN_EDIT_GAMES_GLOBAL("CAN_EDIT_GAMES_GLOBAL"),
    
    CAN_PUBLISH_GAMES_GLOBAL("CAN_PUBLISH_GAMES_GLOBAL"),
    
    CAN_REPLY_TO_REVIEWS_GLOBAL("CAN_REPLY_TO_REVIEWS_GLOBAL"),
    
    CAN_MANAGE_PUBLIC_APKS_GLOBAL("CAN_MANAGE_PUBLIC_APKS_GLOBAL"),
    
    CAN_MANAGE_TRACK_APKS_GLOBAL("CAN_MANAGE_TRACK_APKS_GLOBAL"),
    
    CAN_MANAGE_TRACK_USERS_GLOBAL("CAN_MANAGE_TRACK_USERS_GLOBAL"),
    
    CAN_MANAGE_PUBLIC_LISTING_GLOBAL("CAN_MANAGE_PUBLIC_LISTING_GLOBAL"),
    
    CAN_MANAGE_DRAFT_APPS_GLOBAL("CAN_MANAGE_DRAFT_APPS_GLOBAL"),
    
    CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL("CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL"),
    
    CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL("CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL"),
    
    CAN_MANAGE_ORDERS_GLOBAL("CAN_MANAGE_ORDERS_GLOBAL"),
    
    CAN_MANAGE_APP_CONTENT_GLOBAL("CAN_MANAGE_APP_CONTENT_GLOBAL"),
    
    CAN_VIEW_NON_FINANCIAL_DATA_GLOBAL("CAN_VIEW_NON_FINANCIAL_DATA_GLOBAL"),
    
    CAN_VIEW_APP_QUALITY_GLOBAL("CAN_VIEW_APP_QUALITY_GLOBAL");

    private String value;

    DeveloperAccountPermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeveloperAccountPermissionsEnum fromValue(String value) {
      for (DeveloperAccountPermissionsEnum b : DeveloperAccountPermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeveloperAccountPermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeveloperAccountPermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeveloperAccountPermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeveloperAccountPermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeveloperAccountPermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVELOPER_ACCOUNT_PERMISSIONS = "developerAccountPermissions";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_ACCOUNT_PERMISSIONS)
  private List<DeveloperAccountPermissionsEnum> developerAccountPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
  private String expirationTime;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private List<Grant> grants = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARTIAL = "partial";
  @SerializedName(SERIALIZED_NAME_PARTIAL)
  private Boolean partial;

  public User() {
  }

  public User(
     AccessStateEnum accessState, 
     List<Grant> grants, 
     Boolean partial
  ) {
    this();
    this.accessState = accessState;
    this.grants = grants;
    this.partial = partial;
  }

  /**
   * Output only. The state of the user&#39;s access to the Play Console.
   * @return accessState
   */
  @javax.annotation.Nullable
  public AccessStateEnum getAccessState() {
    return accessState;
  }



  public User developerAccountPermissions(List<DeveloperAccountPermissionsEnum> developerAccountPermissions) {
    this.developerAccountPermissions = developerAccountPermissions;
    return this;
  }

  public User addDeveloperAccountPermissionsItem(DeveloperAccountPermissionsEnum developerAccountPermissionsItem) {
    if (this.developerAccountPermissions == null) {
      this.developerAccountPermissions = new ArrayList<>();
    }
    this.developerAccountPermissions.add(developerAccountPermissionsItem);
    return this;
  }

  /**
   * Permissions for the user which apply across the developer account.
   * @return developerAccountPermissions
   */
  @javax.annotation.Nullable
  public List<DeveloperAccountPermissionsEnum> getDeveloperAccountPermissions() {
    return developerAccountPermissions;
  }

  public void setDeveloperAccountPermissions(List<DeveloperAccountPermissionsEnum> developerAccountPermissions) {
    this.developerAccountPermissions = developerAccountPermissions;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Immutable. The user&#39;s email address.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User expirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
    return this;
  }

  /**
   * The time at which the user&#39;s access expires, if set. When setting this value, it must always be in the future.
   * @return expirationTime
   */
  @javax.annotation.Nullable
  public String getExpirationTime() {
    return expirationTime;
  }

  public void setExpirationTime(String expirationTime) {
    this.expirationTime = expirationTime;
  }


  /**
   * Output only. Per-app permissions for the user.
   * @return grants
   */
  @javax.annotation.Nullable
  public List<Grant> getGrants() {
    return grants;
  }



  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Resource name for this user, following the pattern \&quot;developers/{developer}/users/{email}\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also &#x60;true&#x60; if this user is the account owner. If this field is &#x60;true&#x60;, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn&#39;t know about them or because the user is the account owner.
   * @return partial
   */
  @javax.annotation.Nullable
  public Boolean getPartial() {
    return partial;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.accessState, user.accessState) &&
        Objects.equals(this.developerAccountPermissions, user.developerAccountPermissions) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.expirationTime, user.expirationTime) &&
        Objects.equals(this.grants, user.grants) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.partial, user.partial);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessState, developerAccountPermissions, email, expirationTime, grants, name, partial);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    accessState: ").append(toIndentedString(accessState)).append("\n");
    sb.append("    developerAccountPermissions: ").append(toIndentedString(developerAccountPermissions)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    partial: ").append(toIndentedString(partial)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessState");
    openapiFields.add("developerAccountPermissions");
    openapiFields.add("email");
    openapiFields.add("expirationTime");
    openapiFields.add("grants");
    openapiFields.add("name");
    openapiFields.add("partial");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessState") != null && !jsonObj.get("accessState").isJsonNull()) && !jsonObj.get("accessState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessState").toString()));
      }
      // validate the optional field `accessState`
      if (jsonObj.get("accessState") != null && !jsonObj.get("accessState").isJsonNull()) {
        AccessStateEnum.validateJsonElement(jsonObj.get("accessState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("developerAccountPermissions") != null && !jsonObj.get("developerAccountPermissions").isJsonNull() && !jsonObj.get("developerAccountPermissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `developerAccountPermissions` to be an array in the JSON string but got `%s`", jsonObj.get("developerAccountPermissions").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("expirationTime") != null && !jsonObj.get("expirationTime").isJsonNull()) && !jsonObj.get("expirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTime").toString()));
      }
      if (jsonObj.get("grants") != null && !jsonObj.get("grants").isJsonNull()) {
        JsonArray jsonArraygrants = jsonObj.getAsJsonArray("grants");
        if (jsonArraygrants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grants` to be an array in the JSON string but got `%s`", jsonObj.get("grants").toString()));
          }

          // validate the optional field `grants` (array)
          for (int i = 0; i < jsonArraygrants.size(); i++) {
            Grant.validateJsonElement(jsonArraygrants.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

