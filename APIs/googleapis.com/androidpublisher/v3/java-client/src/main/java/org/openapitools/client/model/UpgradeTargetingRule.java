/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TargetingRuleScope;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a targeting rule of the form: User currently has {scope} [with billing period {billing_period}].
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeTargetingRule {
  public static final String SERIALIZED_NAME_BILLING_PERIOD_DURATION = "billingPeriodDuration";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_DURATION)
  private String billingPeriodDuration;

  public static final String SERIALIZED_NAME_ONCE_PER_USER = "oncePerUser";
  @SerializedName(SERIALIZED_NAME_ONCE_PER_USER)
  private Boolean oncePerUser;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private TargetingRuleScope scope;

  public UpgradeTargetingRule() {
  }

  public UpgradeTargetingRule billingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
    return this;
  }

  /**
   * The specific billing period duration, specified in ISO 8601 format, that a user must be currently subscribed to to be eligible for this rule. If not specified, users subscribed to any billing period are matched.
   * @return billingPeriodDuration
   */
  @javax.annotation.Nullable
  public String getBillingPeriodDuration() {
    return billingPeriodDuration;
  }

  public void setBillingPeriodDuration(String billingPeriodDuration) {
    this.billingPeriodDuration = billingPeriodDuration;
  }


  public UpgradeTargetingRule oncePerUser(Boolean oncePerUser) {
    this.oncePerUser = oncePerUser;
    return this;
  }

  /**
   * Limit this offer to only once per user. If set to true, a user can never be eligible for this offer again if they ever subscribed to this offer.
   * @return oncePerUser
   */
  @javax.annotation.Nullable
  public Boolean getOncePerUser() {
    return oncePerUser;
  }

  public void setOncePerUser(Boolean oncePerUser) {
    this.oncePerUser = oncePerUser;
  }


  public UpgradeTargetingRule scope(TargetingRuleScope scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Get scope
   * @return scope
   */
  @javax.annotation.Nullable
  public TargetingRuleScope getScope() {
    return scope;
  }

  public void setScope(TargetingRuleScope scope) {
    this.scope = scope;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeTargetingRule upgradeTargetingRule = (UpgradeTargetingRule) o;
    return Objects.equals(this.billingPeriodDuration, upgradeTargetingRule.billingPeriodDuration) &&
        Objects.equals(this.oncePerUser, upgradeTargetingRule.oncePerUser) &&
        Objects.equals(this.scope, upgradeTargetingRule.scope);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingPeriodDuration, oncePerUser, scope);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeTargetingRule {\n");
    sb.append("    billingPeriodDuration: ").append(toIndentedString(billingPeriodDuration)).append("\n");
    sb.append("    oncePerUser: ").append(toIndentedString(oncePerUser)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingPeriodDuration");
    openapiFields.add("oncePerUser");
    openapiFields.add("scope");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeTargetingRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeTargetingRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeTargetingRule is not found in the empty JSON string", UpgradeTargetingRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeTargetingRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeTargetingRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingPeriodDuration") != null && !jsonObj.get("billingPeriodDuration").isJsonNull()) && !jsonObj.get("billingPeriodDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodDuration").toString()));
      }
      // validate the optional field `scope`
      if (jsonObj.get("scope") != null && !jsonObj.get("scope").isJsonNull()) {
        TargetingRuleScope.validateJsonElement(jsonObj.get("scope"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeTargetingRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeTargetingRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeTargetingRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeTargetingRule.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeTargetingRule>() {
           @Override
           public void write(JsonWriter out, UpgradeTargetingRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeTargetingRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeTargetingRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeTargetingRule
   * @throws IOException if the JSON string is invalid with respect to UpgradeTargetingRule
   */
  public static UpgradeTargetingRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeTargetingRule.class);
  }

  /**
   * Convert an instance of UpgradeTargetingRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

