/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pricing information for any new locations Play may launch in.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OtherRegionsBasePlanConfig {
  public static final String SERIALIZED_NAME_EUR_PRICE = "eurPrice";
  @SerializedName(SERIALIZED_NAME_EUR_PRICE)
  private Money eurPrice;

  public static final String SERIALIZED_NAME_NEW_SUBSCRIBER_AVAILABILITY = "newSubscriberAvailability";
  @SerializedName(SERIALIZED_NAME_NEW_SUBSCRIBER_AVAILABILITY)
  private Boolean newSubscriberAvailability;

  public static final String SERIALIZED_NAME_USD_PRICE = "usdPrice";
  @SerializedName(SERIALIZED_NAME_USD_PRICE)
  private Money usdPrice;

  public OtherRegionsBasePlanConfig() {
  }

  public OtherRegionsBasePlanConfig eurPrice(Money eurPrice) {
    this.eurPrice = eurPrice;
    return this;
  }

  /**
   * Get eurPrice
   * @return eurPrice
   */
  @javax.annotation.Nullable
  public Money getEurPrice() {
    return eurPrice;
  }

  public void setEurPrice(Money eurPrice) {
    this.eurPrice = eurPrice;
  }


  public OtherRegionsBasePlanConfig newSubscriberAvailability(Boolean newSubscriberAvailability) {
    this.newSubscriberAvailability = newSubscriberAvailability;
    return this;
  }

  /**
   * Whether the base plan is available for new subscribers in any new locations Play may launch in. If not specified, this will default to false.
   * @return newSubscriberAvailability
   */
  @javax.annotation.Nullable
  public Boolean getNewSubscriberAvailability() {
    return newSubscriberAvailability;
  }

  public void setNewSubscriberAvailability(Boolean newSubscriberAvailability) {
    this.newSubscriberAvailability = newSubscriberAvailability;
  }


  public OtherRegionsBasePlanConfig usdPrice(Money usdPrice) {
    this.usdPrice = usdPrice;
    return this;
  }

  /**
   * Get usdPrice
   * @return usdPrice
   */
  @javax.annotation.Nullable
  public Money getUsdPrice() {
    return usdPrice;
  }

  public void setUsdPrice(Money usdPrice) {
    this.usdPrice = usdPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OtherRegionsBasePlanConfig otherRegionsBasePlanConfig = (OtherRegionsBasePlanConfig) o;
    return Objects.equals(this.eurPrice, otherRegionsBasePlanConfig.eurPrice) &&
        Objects.equals(this.newSubscriberAvailability, otherRegionsBasePlanConfig.newSubscriberAvailability) &&
        Objects.equals(this.usdPrice, otherRegionsBasePlanConfig.usdPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eurPrice, newSubscriberAvailability, usdPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OtherRegionsBasePlanConfig {\n");
    sb.append("    eurPrice: ").append(toIndentedString(eurPrice)).append("\n");
    sb.append("    newSubscriberAvailability: ").append(toIndentedString(newSubscriberAvailability)).append("\n");
    sb.append("    usdPrice: ").append(toIndentedString(usdPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eurPrice");
    openapiFields.add("newSubscriberAvailability");
    openapiFields.add("usdPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OtherRegionsBasePlanConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OtherRegionsBasePlanConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OtherRegionsBasePlanConfig is not found in the empty JSON string", OtherRegionsBasePlanConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OtherRegionsBasePlanConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OtherRegionsBasePlanConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eurPrice`
      if (jsonObj.get("eurPrice") != null && !jsonObj.get("eurPrice").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("eurPrice"));
      }
      // validate the optional field `usdPrice`
      if (jsonObj.get("usdPrice") != null && !jsonObj.get("usdPrice").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("usdPrice"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OtherRegionsBasePlanConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OtherRegionsBasePlanConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OtherRegionsBasePlanConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OtherRegionsBasePlanConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<OtherRegionsBasePlanConfig>() {
           @Override
           public void write(JsonWriter out, OtherRegionsBasePlanConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OtherRegionsBasePlanConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OtherRegionsBasePlanConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OtherRegionsBasePlanConfig
   * @throws IOException if the JSON string is invalid with respect to OtherRegionsBasePlanConfig
   */
  public static OtherRegionsBasePlanConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OtherRegionsBasePlanConfig.class);
  }

  /**
   * Convert an instance of OtherRegionsBasePlanConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

