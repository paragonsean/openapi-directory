/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeviceGroup;
import org.openapitools.client.model.DeviceTierSet;
import org.openapitools.client.model.UserCountrySet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration describing device targeting criteria for the content of an app.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceTierConfig {
  public static final String SERIALIZED_NAME_DEVICE_GROUPS = "deviceGroups";
  @SerializedName(SERIALIZED_NAME_DEVICE_GROUPS)
  private List<DeviceGroup> deviceGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_TIER_CONFIG_ID = "deviceTierConfigId";
  @SerializedName(SERIALIZED_NAME_DEVICE_TIER_CONFIG_ID)
  private String deviceTierConfigId;

  public static final String SERIALIZED_NAME_DEVICE_TIER_SET = "deviceTierSet";
  @SerializedName(SERIALIZED_NAME_DEVICE_TIER_SET)
  private DeviceTierSet deviceTierSet;

  public static final String SERIALIZED_NAME_USER_COUNTRY_SETS = "userCountrySets";
  @SerializedName(SERIALIZED_NAME_USER_COUNTRY_SETS)
  private List<UserCountrySet> userCountrySets = new ArrayList<>();

  public DeviceTierConfig() {
  }

  public DeviceTierConfig(
     String deviceTierConfigId
  ) {
    this();
    this.deviceTierConfigId = deviceTierConfigId;
  }

  public DeviceTierConfig deviceGroups(List<DeviceGroup> deviceGroups) {
    this.deviceGroups = deviceGroups;
    return this;
  }

  public DeviceTierConfig addDeviceGroupsItem(DeviceGroup deviceGroupsItem) {
    if (this.deviceGroups == null) {
      this.deviceGroups = new ArrayList<>();
    }
    this.deviceGroups.add(deviceGroupsItem);
    return this;
  }

  /**
   * Definition of device groups for the app.
   * @return deviceGroups
   */
  @javax.annotation.Nullable
  public List<DeviceGroup> getDeviceGroups() {
    return deviceGroups;
  }

  public void setDeviceGroups(List<DeviceGroup> deviceGroups) {
    this.deviceGroups = deviceGroups;
  }


  /**
   * Output only. The device tier config ID.
   * @return deviceTierConfigId
   */
  @javax.annotation.Nullable
  public String getDeviceTierConfigId() {
    return deviceTierConfigId;
  }



  public DeviceTierConfig deviceTierSet(DeviceTierSet deviceTierSet) {
    this.deviceTierSet = deviceTierSet;
    return this;
  }

  /**
   * Get deviceTierSet
   * @return deviceTierSet
   */
  @javax.annotation.Nullable
  public DeviceTierSet getDeviceTierSet() {
    return deviceTierSet;
  }

  public void setDeviceTierSet(DeviceTierSet deviceTierSet) {
    this.deviceTierSet = deviceTierSet;
  }


  public DeviceTierConfig userCountrySets(List<UserCountrySet> userCountrySets) {
    this.userCountrySets = userCountrySets;
    return this;
  }

  public DeviceTierConfig addUserCountrySetsItem(UserCountrySet userCountrySetsItem) {
    if (this.userCountrySets == null) {
      this.userCountrySets = new ArrayList<>();
    }
    this.userCountrySets.add(userCountrySetsItem);
    return this;
  }

  /**
   * Definition of user country sets for the app.
   * @return userCountrySets
   */
  @javax.annotation.Nullable
  public List<UserCountrySet> getUserCountrySets() {
    return userCountrySets;
  }

  public void setUserCountrySets(List<UserCountrySet> userCountrySets) {
    this.userCountrySets = userCountrySets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTierConfig deviceTierConfig = (DeviceTierConfig) o;
    return Objects.equals(this.deviceGroups, deviceTierConfig.deviceGroups) &&
        Objects.equals(this.deviceTierConfigId, deviceTierConfig.deviceTierConfigId) &&
        Objects.equals(this.deviceTierSet, deviceTierConfig.deviceTierSet) &&
        Objects.equals(this.userCountrySets, deviceTierConfig.userCountrySets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceGroups, deviceTierConfigId, deviceTierSet, userCountrySets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTierConfig {\n");
    sb.append("    deviceGroups: ").append(toIndentedString(deviceGroups)).append("\n");
    sb.append("    deviceTierConfigId: ").append(toIndentedString(deviceTierConfigId)).append("\n");
    sb.append("    deviceTierSet: ").append(toIndentedString(deviceTierSet)).append("\n");
    sb.append("    userCountrySets: ").append(toIndentedString(userCountrySets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceGroups");
    openapiFields.add("deviceTierConfigId");
    openapiFields.add("deviceTierSet");
    openapiFields.add("userCountrySets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceTierConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceTierConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceTierConfig is not found in the empty JSON string", DeviceTierConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceTierConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceTierConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("deviceGroups") != null && !jsonObj.get("deviceGroups").isJsonNull()) {
        JsonArray jsonArraydeviceGroups = jsonObj.getAsJsonArray("deviceGroups");
        if (jsonArraydeviceGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deviceGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deviceGroups` to be an array in the JSON string but got `%s`", jsonObj.get("deviceGroups").toString()));
          }

          // validate the optional field `deviceGroups` (array)
          for (int i = 0; i < jsonArraydeviceGroups.size(); i++) {
            DeviceGroup.validateJsonElement(jsonArraydeviceGroups.get(i));
          };
        }
      }
      if ((jsonObj.get("deviceTierConfigId") != null && !jsonObj.get("deviceTierConfigId").isJsonNull()) && !jsonObj.get("deviceTierConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceTierConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceTierConfigId").toString()));
      }
      // validate the optional field `deviceTierSet`
      if (jsonObj.get("deviceTierSet") != null && !jsonObj.get("deviceTierSet").isJsonNull()) {
        DeviceTierSet.validateJsonElement(jsonObj.get("deviceTierSet"));
      }
      if (jsonObj.get("userCountrySets") != null && !jsonObj.get("userCountrySets").isJsonNull()) {
        JsonArray jsonArrayuserCountrySets = jsonObj.getAsJsonArray("userCountrySets");
        if (jsonArrayuserCountrySets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userCountrySets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userCountrySets` to be an array in the JSON string but got `%s`", jsonObj.get("userCountrySets").toString()));
          }

          // validate the optional field `userCountrySets` (array)
          for (int i = 0; i < jsonArrayuserCountrySets.size(); i++) {
            UserCountrySet.validateJsonElement(jsonArrayuserCountrySets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceTierConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceTierConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceTierConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceTierConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceTierConfig>() {
           @Override
           public void write(JsonWriter out, DeviceTierConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceTierConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceTierConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceTierConfig
   * @throws IOException if the JSON string is invalid with respect to DeviceTierConfig
   */
  public static DeviceTierConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceTierConfig.class);
  }

  /**
   * Convert an instance of DeviceTierConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

