/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for a subscription offer in a single region.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionalSubscriptionOfferConfig {
  public static final String SERIALIZED_NAME_NEW_SUBSCRIBER_AVAILABILITY = "newSubscriberAvailability";
  @SerializedName(SERIALIZED_NAME_NEW_SUBSCRIBER_AVAILABILITY)
  private Boolean newSubscriberAvailability;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public RegionalSubscriptionOfferConfig() {
  }

  public RegionalSubscriptionOfferConfig newSubscriberAvailability(Boolean newSubscriberAvailability) {
    this.newSubscriberAvailability = newSubscriberAvailability;
    return this;
  }

  /**
   * Whether the subscription offer in the specified region is available for new subscribers. Existing subscribers will not have their subscription cancelled if this value is set to false. If not specified, this will default to false.
   * @return newSubscriberAvailability
   */
  @javax.annotation.Nullable
  public Boolean getNewSubscriberAvailability() {
    return newSubscriberAvailability;
  }

  public void setNewSubscriberAvailability(Boolean newSubscriberAvailability) {
    this.newSubscriberAvailability = newSubscriberAvailability;
  }


  public RegionalSubscriptionOfferConfig regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Required. Immutable. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \&quot;US\&quot;.
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionalSubscriptionOfferConfig regionalSubscriptionOfferConfig = (RegionalSubscriptionOfferConfig) o;
    return Objects.equals(this.newSubscriberAvailability, regionalSubscriptionOfferConfig.newSubscriberAvailability) &&
        Objects.equals(this.regionCode, regionalSubscriptionOfferConfig.regionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newSubscriberAvailability, regionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionalSubscriptionOfferConfig {\n");
    sb.append("    newSubscriberAvailability: ").append(toIndentedString(newSubscriberAvailability)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("newSubscriberAvailability");
    openapiFields.add("regionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionalSubscriptionOfferConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionalSubscriptionOfferConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionalSubscriptionOfferConfig is not found in the empty JSON string", RegionalSubscriptionOfferConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionalSubscriptionOfferConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionalSubscriptionOfferConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionalSubscriptionOfferConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionalSubscriptionOfferConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionalSubscriptionOfferConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionalSubscriptionOfferConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionalSubscriptionOfferConfig>() {
           @Override
           public void write(JsonWriter out, RegionalSubscriptionOfferConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionalSubscriptionOfferConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionalSubscriptionOfferConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionalSubscriptionOfferConfig
   * @throws IOException if the JSON string is invalid with respect to RegionalSubscriptionOfferConfig
   */
  public static RegionalSubscriptionOfferConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionalSubscriptionOfferConfig.class);
  }

  /**
   * Convert an instance of RegionalSubscriptionOfferConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

