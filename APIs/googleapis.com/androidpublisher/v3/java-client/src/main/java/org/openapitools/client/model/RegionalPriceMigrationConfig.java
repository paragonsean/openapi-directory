/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for a price migration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegionalPriceMigrationConfig {
  public static final String SERIALIZED_NAME_OLDEST_ALLOWED_PRICE_VERSION_TIME = "oldestAllowedPriceVersionTime";
  @SerializedName(SERIALIZED_NAME_OLDEST_ALLOWED_PRICE_VERSION_TIME)
  private String oldestAllowedPriceVersionTime;

  /**
   * Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.
   */
  @JsonAdapter(PriceIncreaseTypeEnum.Adapter.class)
  public enum PriceIncreaseTypeEnum {
    UNSPECIFIED("PRICE_INCREASE_TYPE_UNSPECIFIED"),
    
    OPT_IN("PRICE_INCREASE_TYPE_OPT_IN"),
    
    OPT_OUT("PRICE_INCREASE_TYPE_OPT_OUT");

    private String value;

    PriceIncreaseTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PriceIncreaseTypeEnum fromValue(String value) {
      for (PriceIncreaseTypeEnum b : PriceIncreaseTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PriceIncreaseTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PriceIncreaseTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PriceIncreaseTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PriceIncreaseTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PriceIncreaseTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRICE_INCREASE_TYPE = "priceIncreaseType";
  @SerializedName(SERIALIZED_NAME_PRICE_INCREASE_TYPE)
  private PriceIncreaseTypeEnum priceIncreaseType;

  public static final String SERIALIZED_NAME_REGION_CODE = "regionCode";
  @SerializedName(SERIALIZED_NAME_REGION_CODE)
  private String regionCode;

  public RegionalPriceMigrationConfig() {
  }

  public RegionalPriceMigrationConfig oldestAllowedPriceVersionTime(String oldestAllowedPriceVersionTime) {
    this.oldestAllowedPriceVersionTime = oldestAllowedPriceVersionTime;
    return this;
  }

  /**
   * Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
   * @return oldestAllowedPriceVersionTime
   */
  @javax.annotation.Nullable
  public String getOldestAllowedPriceVersionTime() {
    return oldestAllowedPriceVersionTime;
  }

  public void setOldestAllowedPriceVersionTime(String oldestAllowedPriceVersionTime) {
    this.oldestAllowedPriceVersionTime = oldestAllowedPriceVersionTime;
  }


  public RegionalPriceMigrationConfig priceIncreaseType(PriceIncreaseTypeEnum priceIncreaseType) {
    this.priceIncreaseType = priceIncreaseType;
    return this;
  }

  /**
   * Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.
   * @return priceIncreaseType
   */
  @javax.annotation.Nullable
  public PriceIncreaseTypeEnum getPriceIncreaseType() {
    return priceIncreaseType;
  }

  public void setPriceIncreaseType(PriceIncreaseTypeEnum priceIncreaseType) {
    this.priceIncreaseType = priceIncreaseType;
  }


  public RegionalPriceMigrationConfig regionCode(String regionCode) {
    this.regionCode = regionCode;
    return this;
  }

  /**
   * Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \&quot;US\&quot;.
   * @return regionCode
   */
  @javax.annotation.Nullable
  public String getRegionCode() {
    return regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegionalPriceMigrationConfig regionalPriceMigrationConfig = (RegionalPriceMigrationConfig) o;
    return Objects.equals(this.oldestAllowedPriceVersionTime, regionalPriceMigrationConfig.oldestAllowedPriceVersionTime) &&
        Objects.equals(this.priceIncreaseType, regionalPriceMigrationConfig.priceIncreaseType) &&
        Objects.equals(this.regionCode, regionalPriceMigrationConfig.regionCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oldestAllowedPriceVersionTime, priceIncreaseType, regionCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegionalPriceMigrationConfig {\n");
    sb.append("    oldestAllowedPriceVersionTime: ").append(toIndentedString(oldestAllowedPriceVersionTime)).append("\n");
    sb.append("    priceIncreaseType: ").append(toIndentedString(priceIncreaseType)).append("\n");
    sb.append("    regionCode: ").append(toIndentedString(regionCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oldestAllowedPriceVersionTime");
    openapiFields.add("priceIncreaseType");
    openapiFields.add("regionCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegionalPriceMigrationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegionalPriceMigrationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegionalPriceMigrationConfig is not found in the empty JSON string", RegionalPriceMigrationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegionalPriceMigrationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegionalPriceMigrationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("oldestAllowedPriceVersionTime") != null && !jsonObj.get("oldestAllowedPriceVersionTime").isJsonNull()) && !jsonObj.get("oldestAllowedPriceVersionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldestAllowedPriceVersionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldestAllowedPriceVersionTime").toString()));
      }
      if ((jsonObj.get("priceIncreaseType") != null && !jsonObj.get("priceIncreaseType").isJsonNull()) && !jsonObj.get("priceIncreaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceIncreaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceIncreaseType").toString()));
      }
      // validate the optional field `priceIncreaseType`
      if (jsonObj.get("priceIncreaseType") != null && !jsonObj.get("priceIncreaseType").isJsonNull()) {
        PriceIncreaseTypeEnum.validateJsonElement(jsonObj.get("priceIncreaseType"));
      }
      if ((jsonObj.get("regionCode") != null && !jsonObj.get("regionCode").isJsonNull()) && !jsonObj.get("regionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regionCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegionalPriceMigrationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegionalPriceMigrationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegionalPriceMigrationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegionalPriceMigrationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<RegionalPriceMigrationConfig>() {
           @Override
           public void write(JsonWriter out, RegionalPriceMigrationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegionalPriceMigrationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegionalPriceMigrationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegionalPriceMigrationConfig
   * @throws IOException if the JSON string is invalid with respect to RegionalPriceMigrationConfig
   */
  public static RegionalPriceMigrationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegionalPriceMigrationConfig.class);
  }

  /**
   * Convert an instance of RegionalPriceMigrationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

