/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutoRenewingBasePlanType;
import org.openapitools.client.model.OfferTag;
import org.openapitools.client.model.OtherRegionsBasePlanConfig;
import org.openapitools.client.model.PrepaidBasePlanType;
import org.openapitools.client.model.RegionalBasePlanConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single base plan for a subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasePlan {
  public static final String SERIALIZED_NAME_AUTO_RENEWING_BASE_PLAN_TYPE = "autoRenewingBasePlanType";
  @SerializedName(SERIALIZED_NAME_AUTO_RENEWING_BASE_PLAN_TYPE)
  private AutoRenewingBasePlanType autoRenewingBasePlanType;

  public static final String SERIALIZED_NAME_BASE_PLAN_ID = "basePlanId";
  @SerializedName(SERIALIZED_NAME_BASE_PLAN_ID)
  private String basePlanId;

  public static final String SERIALIZED_NAME_OFFER_TAGS = "offerTags";
  @SerializedName(SERIALIZED_NAME_OFFER_TAGS)
  private List<OfferTag> offerTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_OTHER_REGIONS_CONFIG = "otherRegionsConfig";
  @SerializedName(SERIALIZED_NAME_OTHER_REGIONS_CONFIG)
  private OtherRegionsBasePlanConfig otherRegionsConfig;

  public static final String SERIALIZED_NAME_PREPAID_BASE_PLAN_TYPE = "prepaidBasePlanType";
  @SerializedName(SERIALIZED_NAME_PREPAID_BASE_PLAN_TYPE)
  private PrepaidBasePlanType prepaidBasePlanType;

  public static final String SERIALIZED_NAME_REGIONAL_CONFIGS = "regionalConfigs";
  @SerializedName(SERIALIZED_NAME_REGIONAL_CONFIGS)
  private List<RegionalBasePlanConfig> regionalConfigs = new ArrayList<>();

  /**
   * Output only. The state of the base plan, i.e. whether it&#39;s active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    INACTIVE("INACTIVE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public BasePlan() {
  }

  public BasePlan(
     StateEnum state
  ) {
    this();
    this.state = state;
  }

  public BasePlan autoRenewingBasePlanType(AutoRenewingBasePlanType autoRenewingBasePlanType) {
    this.autoRenewingBasePlanType = autoRenewingBasePlanType;
    return this;
  }

  /**
   * Get autoRenewingBasePlanType
   * @return autoRenewingBasePlanType
   */
  @javax.annotation.Nullable
  public AutoRenewingBasePlanType getAutoRenewingBasePlanType() {
    return autoRenewingBasePlanType;
  }

  public void setAutoRenewingBasePlanType(AutoRenewingBasePlanType autoRenewingBasePlanType) {
    this.autoRenewingBasePlanType = autoRenewingBasePlanType;
  }


  public BasePlan basePlanId(String basePlanId) {
    this.basePlanId = basePlanId;
    return this;
  }

  /**
   * Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.
   * @return basePlanId
   */
  @javax.annotation.Nullable
  public String getBasePlanId() {
    return basePlanId;
  }

  public void setBasePlanId(String basePlanId) {
    this.basePlanId = basePlanId;
  }


  public BasePlan offerTags(List<OfferTag> offerTags) {
    this.offerTags = offerTags;
    return this;
  }

  public BasePlan addOfferTagsItem(OfferTag offerTagsItem) {
    if (this.offerTags == null) {
      this.offerTags = new ArrayList<>();
    }
    this.offerTags.add(offerTagsItem);
    return this;
  }

  /**
   * List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.
   * @return offerTags
   */
  @javax.annotation.Nullable
  public List<OfferTag> getOfferTags() {
    return offerTags;
  }

  public void setOfferTags(List<OfferTag> offerTags) {
    this.offerTags = offerTags;
  }


  public BasePlan otherRegionsConfig(OtherRegionsBasePlanConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
    return this;
  }

  /**
   * Get otherRegionsConfig
   * @return otherRegionsConfig
   */
  @javax.annotation.Nullable
  public OtherRegionsBasePlanConfig getOtherRegionsConfig() {
    return otherRegionsConfig;
  }

  public void setOtherRegionsConfig(OtherRegionsBasePlanConfig otherRegionsConfig) {
    this.otherRegionsConfig = otherRegionsConfig;
  }


  public BasePlan prepaidBasePlanType(PrepaidBasePlanType prepaidBasePlanType) {
    this.prepaidBasePlanType = prepaidBasePlanType;
    return this;
  }

  /**
   * Get prepaidBasePlanType
   * @return prepaidBasePlanType
   */
  @javax.annotation.Nullable
  public PrepaidBasePlanType getPrepaidBasePlanType() {
    return prepaidBasePlanType;
  }

  public void setPrepaidBasePlanType(PrepaidBasePlanType prepaidBasePlanType) {
    this.prepaidBasePlanType = prepaidBasePlanType;
  }


  public BasePlan regionalConfigs(List<RegionalBasePlanConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
    return this;
  }

  public BasePlan addRegionalConfigsItem(RegionalBasePlanConfig regionalConfigsItem) {
    if (this.regionalConfigs == null) {
      this.regionalConfigs = new ArrayList<>();
    }
    this.regionalConfigs.add(regionalConfigsItem);
    return this;
  }

  /**
   * Region-specific information for this base plan.
   * @return regionalConfigs
   */
  @javax.annotation.Nullable
  public List<RegionalBasePlanConfig> getRegionalConfigs() {
    return regionalConfigs;
  }

  public void setRegionalConfigs(List<RegionalBasePlanConfig> regionalConfigs) {
    this.regionalConfigs = regionalConfigs;
  }


  /**
   * Output only. The state of the base plan, i.e. whether it&#39;s active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasePlan basePlan = (BasePlan) o;
    return Objects.equals(this.autoRenewingBasePlanType, basePlan.autoRenewingBasePlanType) &&
        Objects.equals(this.basePlanId, basePlan.basePlanId) &&
        Objects.equals(this.offerTags, basePlan.offerTags) &&
        Objects.equals(this.otherRegionsConfig, basePlan.otherRegionsConfig) &&
        Objects.equals(this.prepaidBasePlanType, basePlan.prepaidBasePlanType) &&
        Objects.equals(this.regionalConfigs, basePlan.regionalConfigs) &&
        Objects.equals(this.state, basePlan.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoRenewingBasePlanType, basePlanId, offerTags, otherRegionsConfig, prepaidBasePlanType, regionalConfigs, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasePlan {\n");
    sb.append("    autoRenewingBasePlanType: ").append(toIndentedString(autoRenewingBasePlanType)).append("\n");
    sb.append("    basePlanId: ").append(toIndentedString(basePlanId)).append("\n");
    sb.append("    offerTags: ").append(toIndentedString(offerTags)).append("\n");
    sb.append("    otherRegionsConfig: ").append(toIndentedString(otherRegionsConfig)).append("\n");
    sb.append("    prepaidBasePlanType: ").append(toIndentedString(prepaidBasePlanType)).append("\n");
    sb.append("    regionalConfigs: ").append(toIndentedString(regionalConfigs)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoRenewingBasePlanType");
    openapiFields.add("basePlanId");
    openapiFields.add("offerTags");
    openapiFields.add("otherRegionsConfig");
    openapiFields.add("prepaidBasePlanType");
    openapiFields.add("regionalConfigs");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasePlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasePlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasePlan is not found in the empty JSON string", BasePlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasePlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasePlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `autoRenewingBasePlanType`
      if (jsonObj.get("autoRenewingBasePlanType") != null && !jsonObj.get("autoRenewingBasePlanType").isJsonNull()) {
        AutoRenewingBasePlanType.validateJsonElement(jsonObj.get("autoRenewingBasePlanType"));
      }
      if ((jsonObj.get("basePlanId") != null && !jsonObj.get("basePlanId").isJsonNull()) && !jsonObj.get("basePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePlanId").toString()));
      }
      if (jsonObj.get("offerTags") != null && !jsonObj.get("offerTags").isJsonNull()) {
        JsonArray jsonArrayofferTags = jsonObj.getAsJsonArray("offerTags");
        if (jsonArrayofferTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offerTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offerTags` to be an array in the JSON string but got `%s`", jsonObj.get("offerTags").toString()));
          }

          // validate the optional field `offerTags` (array)
          for (int i = 0; i < jsonArrayofferTags.size(); i++) {
            OfferTag.validateJsonElement(jsonArrayofferTags.get(i));
          };
        }
      }
      // validate the optional field `otherRegionsConfig`
      if (jsonObj.get("otherRegionsConfig") != null && !jsonObj.get("otherRegionsConfig").isJsonNull()) {
        OtherRegionsBasePlanConfig.validateJsonElement(jsonObj.get("otherRegionsConfig"));
      }
      // validate the optional field `prepaidBasePlanType`
      if (jsonObj.get("prepaidBasePlanType") != null && !jsonObj.get("prepaidBasePlanType").isJsonNull()) {
        PrepaidBasePlanType.validateJsonElement(jsonObj.get("prepaidBasePlanType"));
      }
      if (jsonObj.get("regionalConfigs") != null && !jsonObj.get("regionalConfigs").isJsonNull()) {
        JsonArray jsonArrayregionalConfigs = jsonObj.getAsJsonArray("regionalConfigs");
        if (jsonArrayregionalConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regionalConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regionalConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("regionalConfigs").toString()));
          }

          // validate the optional field `regionalConfigs` (array)
          for (int i = 0; i < jsonArrayregionalConfigs.size(); i++) {
            RegionalBasePlanConfig.validateJsonElement(jsonArrayregionalConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasePlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasePlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasePlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasePlan.class));

       return (TypeAdapter<T>) new TypeAdapter<BasePlan>() {
           @Override
           public void write(JsonWriter out, BasePlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasePlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasePlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasePlan
   * @throws IOException if the JSON string is invalid with respect to BasePlan
   */
  public static BasePlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasePlan.class);
  }

  /**
   * Convert an instance of BasePlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

