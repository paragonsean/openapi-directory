/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RemoteInAppUpdate;
import org.openapitools.client.model.Targeting;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for CreateDraftAppRecovery.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDraftAppRecoveryRequest {
  public static final String SERIALIZED_NAME_REMOTE_IN_APP_UPDATE = "remoteInAppUpdate";
  @SerializedName(SERIALIZED_NAME_REMOTE_IN_APP_UPDATE)
  private RemoteInAppUpdate remoteInAppUpdate;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private Targeting targeting;

  public CreateDraftAppRecoveryRequest() {
  }

  public CreateDraftAppRecoveryRequest remoteInAppUpdate(RemoteInAppUpdate remoteInAppUpdate) {
    this.remoteInAppUpdate = remoteInAppUpdate;
    return this;
  }

  /**
   * Get remoteInAppUpdate
   * @return remoteInAppUpdate
   */
  @javax.annotation.Nullable
  public RemoteInAppUpdate getRemoteInAppUpdate() {
    return remoteInAppUpdate;
  }

  public void setRemoteInAppUpdate(RemoteInAppUpdate remoteInAppUpdate) {
    this.remoteInAppUpdate = remoteInAppUpdate;
  }


  public CreateDraftAppRecoveryRequest targeting(Targeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public Targeting getTargeting() {
    return targeting;
  }

  public void setTargeting(Targeting targeting) {
    this.targeting = targeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDraftAppRecoveryRequest createDraftAppRecoveryRequest = (CreateDraftAppRecoveryRequest) o;
    return Objects.equals(this.remoteInAppUpdate, createDraftAppRecoveryRequest.remoteInAppUpdate) &&
        Objects.equals(this.targeting, createDraftAppRecoveryRequest.targeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteInAppUpdate, targeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDraftAppRecoveryRequest {\n");
    sb.append("    remoteInAppUpdate: ").append(toIndentedString(remoteInAppUpdate)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remoteInAppUpdate");
    openapiFields.add("targeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDraftAppRecoveryRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDraftAppRecoveryRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDraftAppRecoveryRequest is not found in the empty JSON string", CreateDraftAppRecoveryRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDraftAppRecoveryRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDraftAppRecoveryRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `remoteInAppUpdate`
      if (jsonObj.get("remoteInAppUpdate") != null && !jsonObj.get("remoteInAppUpdate").isJsonNull()) {
        RemoteInAppUpdate.validateJsonElement(jsonObj.get("remoteInAppUpdate"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        Targeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDraftAppRecoveryRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDraftAppRecoveryRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDraftAppRecoveryRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDraftAppRecoveryRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDraftAppRecoveryRequest>() {
           @Override
           public void write(JsonWriter out, CreateDraftAppRecoveryRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDraftAppRecoveryRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDraftAppRecoveryRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDraftAppRecoveryRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDraftAppRecoveryRequest
   */
  public static CreateDraftAppRecoveryRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDraftAppRecoveryRequest.class);
  }

  /**
   * Convert an instance of CreateDraftAppRecoveryRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

