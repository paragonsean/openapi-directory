/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single device tier. Devices matching any of the device groups in device_group_names are considered to match the tier.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceTier {
  public static final String SERIALIZED_NAME_DEVICE_GROUP_NAMES = "deviceGroupNames";
  @SerializedName(SERIALIZED_NAME_DEVICE_GROUP_NAMES)
  private List<String> deviceGroupNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public DeviceTier() {
  }

  public DeviceTier deviceGroupNames(List<String> deviceGroupNames) {
    this.deviceGroupNames = deviceGroupNames;
    return this;
  }

  public DeviceTier addDeviceGroupNamesItem(String deviceGroupNamesItem) {
    if (this.deviceGroupNames == null) {
      this.deviceGroupNames = new ArrayList<>();
    }
    this.deviceGroupNames.add(deviceGroupNamesItem);
    return this;
  }

  /**
   * Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.
   * @return deviceGroupNames
   */
  @javax.annotation.Nullable
  public List<String> getDeviceGroupNames() {
    return deviceGroupNames;
  }

  public void setDeviceGroupNames(List<String> deviceGroupNames) {
    this.deviceGroupNames = deviceGroupNames;
  }


  public DeviceTier level(Integer level) {
    this.level = level;
    return this;
  }

  /**
   * The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don&#39;t match any of the tiers explicitly defined here. You mustn&#39;t define level 0 explicitly in this configuration.
   * @return level
   */
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceTier deviceTier = (DeviceTier) o;
    return Objects.equals(this.deviceGroupNames, deviceTier.deviceGroupNames) &&
        Objects.equals(this.level, deviceTier.level);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceGroupNames, level);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceTier {\n");
    sb.append("    deviceGroupNames: ").append(toIndentedString(deviceGroupNames)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceGroupNames");
    openapiFields.add("level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceTier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceTier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceTier is not found in the empty JSON string", DeviceTier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceTier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceTier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("deviceGroupNames") != null && !jsonObj.get("deviceGroupNames").isJsonNull() && !jsonObj.get("deviceGroupNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceGroupNames` to be an array in the JSON string but got `%s`", jsonObj.get("deviceGroupNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceTier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceTier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceTier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceTier.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceTier>() {
           @Override
           public void write(JsonWriter out, DeviceTier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceTier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceTier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceTier
   * @throws IOException if the JSON string is invalid with respect to DeviceTier
   */
  public static DeviceTier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceTier.class);
  }

  /**
   * Convert an instance of DeviceTier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

