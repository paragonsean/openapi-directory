/*
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApkTargeting;
import org.openapitools.client.model.SplitApkMetadata;
import org.openapitools.client.model.StandaloneApkMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of the created apks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:32.125268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApkDescription {
  public static final String SERIALIZED_NAME_ASSET_SLICE_METADATA = "assetSliceMetadata";
  @SerializedName(SERIALIZED_NAME_ASSET_SLICE_METADATA)
  private SplitApkMetadata assetSliceMetadata;

  public static final String SERIALIZED_NAME_INSTANT_APK_METADATA = "instantApkMetadata";
  @SerializedName(SERIALIZED_NAME_INSTANT_APK_METADATA)
  private SplitApkMetadata instantApkMetadata;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_SPLIT_APK_METADATA = "splitApkMetadata";
  @SerializedName(SERIALIZED_NAME_SPLIT_APK_METADATA)
  private SplitApkMetadata splitApkMetadata;

  public static final String SERIALIZED_NAME_STANDALONE_APK_METADATA = "standaloneApkMetadata";
  @SerializedName(SERIALIZED_NAME_STANDALONE_APK_METADATA)
  private StandaloneApkMetadata standaloneApkMetadata;

  public static final String SERIALIZED_NAME_TARGETING = "targeting";
  @SerializedName(SERIALIZED_NAME_TARGETING)
  private ApkTargeting targeting;

  public ApkDescription() {
  }

  public ApkDescription assetSliceMetadata(SplitApkMetadata assetSliceMetadata) {
    this.assetSliceMetadata = assetSliceMetadata;
    return this;
  }

  /**
   * Get assetSliceMetadata
   * @return assetSliceMetadata
   */
  @javax.annotation.Nullable
  public SplitApkMetadata getAssetSliceMetadata() {
    return assetSliceMetadata;
  }

  public void setAssetSliceMetadata(SplitApkMetadata assetSliceMetadata) {
    this.assetSliceMetadata = assetSliceMetadata;
  }


  public ApkDescription instantApkMetadata(SplitApkMetadata instantApkMetadata) {
    this.instantApkMetadata = instantApkMetadata;
    return this;
  }

  /**
   * Get instantApkMetadata
   * @return instantApkMetadata
   */
  @javax.annotation.Nullable
  public SplitApkMetadata getInstantApkMetadata() {
    return instantApkMetadata;
  }

  public void setInstantApkMetadata(SplitApkMetadata instantApkMetadata) {
    this.instantApkMetadata = instantApkMetadata;
  }


  public ApkDescription path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Path of the Apk, will be in the following format: .apk where DownloadId is the ID used to download the apk using GeneratedApks.Download API.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ApkDescription splitApkMetadata(SplitApkMetadata splitApkMetadata) {
    this.splitApkMetadata = splitApkMetadata;
    return this;
  }

  /**
   * Get splitApkMetadata
   * @return splitApkMetadata
   */
  @javax.annotation.Nullable
  public SplitApkMetadata getSplitApkMetadata() {
    return splitApkMetadata;
  }

  public void setSplitApkMetadata(SplitApkMetadata splitApkMetadata) {
    this.splitApkMetadata = splitApkMetadata;
  }


  public ApkDescription standaloneApkMetadata(StandaloneApkMetadata standaloneApkMetadata) {
    this.standaloneApkMetadata = standaloneApkMetadata;
    return this;
  }

  /**
   * Get standaloneApkMetadata
   * @return standaloneApkMetadata
   */
  @javax.annotation.Nullable
  public StandaloneApkMetadata getStandaloneApkMetadata() {
    return standaloneApkMetadata;
  }

  public void setStandaloneApkMetadata(StandaloneApkMetadata standaloneApkMetadata) {
    this.standaloneApkMetadata = standaloneApkMetadata;
  }


  public ApkDescription targeting(ApkTargeting targeting) {
    this.targeting = targeting;
    return this;
  }

  /**
   * Get targeting
   * @return targeting
   */
  @javax.annotation.Nullable
  public ApkTargeting getTargeting() {
    return targeting;
  }

  public void setTargeting(ApkTargeting targeting) {
    this.targeting = targeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApkDescription apkDescription = (ApkDescription) o;
    return Objects.equals(this.assetSliceMetadata, apkDescription.assetSliceMetadata) &&
        Objects.equals(this.instantApkMetadata, apkDescription.instantApkMetadata) &&
        Objects.equals(this.path, apkDescription.path) &&
        Objects.equals(this.splitApkMetadata, apkDescription.splitApkMetadata) &&
        Objects.equals(this.standaloneApkMetadata, apkDescription.standaloneApkMetadata) &&
        Objects.equals(this.targeting, apkDescription.targeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetSliceMetadata, instantApkMetadata, path, splitApkMetadata, standaloneApkMetadata, targeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApkDescription {\n");
    sb.append("    assetSliceMetadata: ").append(toIndentedString(assetSliceMetadata)).append("\n");
    sb.append("    instantApkMetadata: ").append(toIndentedString(instantApkMetadata)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    splitApkMetadata: ").append(toIndentedString(splitApkMetadata)).append("\n");
    sb.append("    standaloneApkMetadata: ").append(toIndentedString(standaloneApkMetadata)).append("\n");
    sb.append("    targeting: ").append(toIndentedString(targeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetSliceMetadata");
    openapiFields.add("instantApkMetadata");
    openapiFields.add("path");
    openapiFields.add("splitApkMetadata");
    openapiFields.add("standaloneApkMetadata");
    openapiFields.add("targeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApkDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApkDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApkDescription is not found in the empty JSON string", ApkDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApkDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApkDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assetSliceMetadata`
      if (jsonObj.get("assetSliceMetadata") != null && !jsonObj.get("assetSliceMetadata").isJsonNull()) {
        SplitApkMetadata.validateJsonElement(jsonObj.get("assetSliceMetadata"));
      }
      // validate the optional field `instantApkMetadata`
      if (jsonObj.get("instantApkMetadata") != null && !jsonObj.get("instantApkMetadata").isJsonNull()) {
        SplitApkMetadata.validateJsonElement(jsonObj.get("instantApkMetadata"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `splitApkMetadata`
      if (jsonObj.get("splitApkMetadata") != null && !jsonObj.get("splitApkMetadata").isJsonNull()) {
        SplitApkMetadata.validateJsonElement(jsonObj.get("splitApkMetadata"));
      }
      // validate the optional field `standaloneApkMetadata`
      if (jsonObj.get("standaloneApkMetadata") != null && !jsonObj.get("standaloneApkMetadata").isJsonNull()) {
        StandaloneApkMetadata.validateJsonElement(jsonObj.get("standaloneApkMetadata"));
      }
      // validate the optional field `targeting`
      if (jsonObj.get("targeting") != null && !jsonObj.get("targeting").isJsonNull()) {
        ApkTargeting.validateJsonElement(jsonObj.get("targeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApkDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApkDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApkDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApkDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApkDescription>() {
           @Override
           public void write(JsonWriter out, ApkDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApkDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApkDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApkDescription
   * @throws IOException if the JSON string is invalid with respect to ApkDescription
   */
  public static ApkDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApkDescription.class);
  }

  /**
   * Convert an instance of ApkDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

