/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargeting::OAITargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargeting::OAITargeting() {
    this->initializeModel();
}

OAITargeting::~OAITargeting() {}

void OAITargeting::initializeModel() {

    m_all_users_isSet = false;
    m_all_users_isValid = false;

    m_android_sdks_isSet = false;
    m_android_sdks_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_version_list_isSet = false;
    m_version_list_isValid = false;

    m_version_range_isSet = false;
    m_version_range_isValid = false;
}

void OAITargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargeting::fromJsonObject(QJsonObject json) {

    m_all_users_isValid = ::OpenAPI::fromJsonValue(m_all_users, json[QString("allUsers")]);
    m_all_users_isSet = !json[QString("allUsers")].isNull() && m_all_users_isValid;

    m_android_sdks_isValid = ::OpenAPI::fromJsonValue(m_android_sdks, json[QString("androidSdks")]);
    m_android_sdks_isSet = !json[QString("androidSdks")].isNull() && m_android_sdks_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_version_list_isValid = ::OpenAPI::fromJsonValue(m_version_list, json[QString("versionList")]);
    m_version_list_isSet = !json[QString("versionList")].isNull() && m_version_list_isValid;

    m_version_range_isValid = ::OpenAPI::fromJsonValue(m_version_range, json[QString("versionRange")]);
    m_version_range_isSet = !json[QString("versionRange")].isNull() && m_version_range_isValid;
}

QString OAITargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_all_users.isSet()) {
        obj.insert(QString("allUsers"), ::OpenAPI::toJsonValue(m_all_users));
    }
    if (m_android_sdks.isSet()) {
        obj.insert(QString("androidSdks"), ::OpenAPI::toJsonValue(m_android_sdks));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_version_list.isSet()) {
        obj.insert(QString("versionList"), ::OpenAPI::toJsonValue(m_version_list));
    }
    if (m_version_range.isSet()) {
        obj.insert(QString("versionRange"), ::OpenAPI::toJsonValue(m_version_range));
    }
    return obj;
}

OAIAllUsers OAITargeting::getAllUsers() const {
    return m_all_users;
}
void OAITargeting::setAllUsers(const OAIAllUsers &all_users) {
    m_all_users = all_users;
    m_all_users_isSet = true;
}

bool OAITargeting::is_all_users_Set() const{
    return m_all_users_isSet;
}

bool OAITargeting::is_all_users_Valid() const{
    return m_all_users_isValid;
}

OAIAndroidSdks OAITargeting::getAndroidSdks() const {
    return m_android_sdks;
}
void OAITargeting::setAndroidSdks(const OAIAndroidSdks &android_sdks) {
    m_android_sdks = android_sdks;
    m_android_sdks_isSet = true;
}

bool OAITargeting::is_android_sdks_Set() const{
    return m_android_sdks_isSet;
}

bool OAITargeting::is_android_sdks_Valid() const{
    return m_android_sdks_isValid;
}

OAIRegions OAITargeting::getRegions() const {
    return m_regions;
}
void OAITargeting::setRegions(const OAIRegions &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAITargeting::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAITargeting::is_regions_Valid() const{
    return m_regions_isValid;
}

OAIAppVersionList OAITargeting::getVersionList() const {
    return m_version_list;
}
void OAITargeting::setVersionList(const OAIAppVersionList &version_list) {
    m_version_list = version_list;
    m_version_list_isSet = true;
}

bool OAITargeting::is_version_list_Set() const{
    return m_version_list_isSet;
}

bool OAITargeting::is_version_list_Valid() const{
    return m_version_list_isValid;
}

OAIAppVersionRange OAITargeting::getVersionRange() const {
    return m_version_range;
}
void OAITargeting::setVersionRange(const OAIAppVersionRange &version_range) {
    m_version_range = version_range;
    m_version_range_isSet = true;
}

bool OAITargeting::is_version_range_Set() const{
    return m_version_range_isSet;
}

bool OAITargeting::is_version_range_Valid() const{
    return m_version_range_isValid;
}

bool OAITargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_sdks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
