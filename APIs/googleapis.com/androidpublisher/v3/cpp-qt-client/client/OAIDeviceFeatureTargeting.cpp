/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceFeatureTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceFeatureTargeting::OAIDeviceFeatureTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceFeatureTargeting::OAIDeviceFeatureTargeting() {
    this->initializeModel();
}

OAIDeviceFeatureTargeting::~OAIDeviceFeatureTargeting() {}

void OAIDeviceFeatureTargeting::initializeModel() {

    m_required_feature_isSet = false;
    m_required_feature_isValid = false;
}

void OAIDeviceFeatureTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceFeatureTargeting::fromJsonObject(QJsonObject json) {

    m_required_feature_isValid = ::OpenAPI::fromJsonValue(m_required_feature, json[QString("requiredFeature")]);
    m_required_feature_isSet = !json[QString("requiredFeature")].isNull() && m_required_feature_isValid;
}

QString OAIDeviceFeatureTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceFeatureTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_required_feature.isSet()) {
        obj.insert(QString("requiredFeature"), ::OpenAPI::toJsonValue(m_required_feature));
    }
    return obj;
}

OAIDeviceFeature OAIDeviceFeatureTargeting::getRequiredFeature() const {
    return m_required_feature;
}
void OAIDeviceFeatureTargeting::setRequiredFeature(const OAIDeviceFeature &required_feature) {
    m_required_feature = required_feature;
    m_required_feature_isSet = true;
}

bool OAIDeviceFeatureTargeting::is_required_feature_Set() const{
    return m_required_feature_isSet;
}

bool OAIDeviceFeatureTargeting::is_required_feature_Valid() const{
    return m_required_feature_isValid;
}

bool OAIDeviceFeatureTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_required_feature.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceFeatureTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
