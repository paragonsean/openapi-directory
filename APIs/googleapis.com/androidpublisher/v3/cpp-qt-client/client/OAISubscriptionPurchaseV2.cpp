/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPurchaseV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPurchaseV2::OAISubscriptionPurchaseV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPurchaseV2::OAISubscriptionPurchaseV2() {
    this->initializeModel();
}

OAISubscriptionPurchaseV2::~OAISubscriptionPurchaseV2() {}

void OAISubscriptionPurchaseV2::initializeModel() {

    m_acknowledgement_state_isSet = false;
    m_acknowledgement_state_isValid = false;

    m_canceled_state_context_isSet = false;
    m_canceled_state_context_isValid = false;

    m_external_account_identifiers_isSet = false;
    m_external_account_identifiers_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_latest_order_id_isSet = false;
    m_latest_order_id_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_linked_purchase_token_isSet = false;
    m_linked_purchase_token_isValid = false;

    m_paused_state_context_isSet = false;
    m_paused_state_context_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_subscribe_with_google_info_isSet = false;
    m_subscribe_with_google_info_isValid = false;

    m_subscription_state_isSet = false;
    m_subscription_state_isValid = false;

    m_test_purchase_isSet = false;
    m_test_purchase_isValid = false;
}

void OAISubscriptionPurchaseV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPurchaseV2::fromJsonObject(QJsonObject json) {

    m_acknowledgement_state_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_state, json[QString("acknowledgementState")]);
    m_acknowledgement_state_isSet = !json[QString("acknowledgementState")].isNull() && m_acknowledgement_state_isValid;

    m_canceled_state_context_isValid = ::OpenAPI::fromJsonValue(m_canceled_state_context, json[QString("canceledStateContext")]);
    m_canceled_state_context_isSet = !json[QString("canceledStateContext")].isNull() && m_canceled_state_context_isValid;

    m_external_account_identifiers_isValid = ::OpenAPI::fromJsonValue(m_external_account_identifiers, json[QString("externalAccountIdentifiers")]);
    m_external_account_identifiers_isSet = !json[QString("externalAccountIdentifiers")].isNull() && m_external_account_identifiers_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_latest_order_id_isValid = ::OpenAPI::fromJsonValue(m_latest_order_id, json[QString("latestOrderId")]);
    m_latest_order_id_isSet = !json[QString("latestOrderId")].isNull() && m_latest_order_id_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_linked_purchase_token_isValid = ::OpenAPI::fromJsonValue(m_linked_purchase_token, json[QString("linkedPurchaseToken")]);
    m_linked_purchase_token_isSet = !json[QString("linkedPurchaseToken")].isNull() && m_linked_purchase_token_isValid;

    m_paused_state_context_isValid = ::OpenAPI::fromJsonValue(m_paused_state_context, json[QString("pausedStateContext")]);
    m_paused_state_context_isSet = !json[QString("pausedStateContext")].isNull() && m_paused_state_context_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_subscribe_with_google_info_isValid = ::OpenAPI::fromJsonValue(m_subscribe_with_google_info, json[QString("subscribeWithGoogleInfo")]);
    m_subscribe_with_google_info_isSet = !json[QString("subscribeWithGoogleInfo")].isNull() && m_subscribe_with_google_info_isValid;

    m_subscription_state_isValid = ::OpenAPI::fromJsonValue(m_subscription_state, json[QString("subscriptionState")]);
    m_subscription_state_isSet = !json[QString("subscriptionState")].isNull() && m_subscription_state_isValid;

    m_test_purchase_isValid = ::OpenAPI::fromJsonValue(m_test_purchase, json[QString("testPurchase")]);
    m_test_purchase_isSet = !json[QString("testPurchase")].isNull() && m_test_purchase_isValid;
}

QString OAISubscriptionPurchaseV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPurchaseV2::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_state_isSet) {
        obj.insert(QString("acknowledgementState"), ::OpenAPI::toJsonValue(m_acknowledgement_state));
    }
    if (m_canceled_state_context.isSet()) {
        obj.insert(QString("canceledStateContext"), ::OpenAPI::toJsonValue(m_canceled_state_context));
    }
    if (m_external_account_identifiers.isSet()) {
        obj.insert(QString("externalAccountIdentifiers"), ::OpenAPI::toJsonValue(m_external_account_identifiers));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_latest_order_id_isSet) {
        obj.insert(QString("latestOrderId"), ::OpenAPI::toJsonValue(m_latest_order_id));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_linked_purchase_token_isSet) {
        obj.insert(QString("linkedPurchaseToken"), ::OpenAPI::toJsonValue(m_linked_purchase_token));
    }
    if (m_paused_state_context.isSet()) {
        obj.insert(QString("pausedStateContext"), ::OpenAPI::toJsonValue(m_paused_state_context));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_subscribe_with_google_info.isSet()) {
        obj.insert(QString("subscribeWithGoogleInfo"), ::OpenAPI::toJsonValue(m_subscribe_with_google_info));
    }
    if (m_subscription_state_isSet) {
        obj.insert(QString("subscriptionState"), ::OpenAPI::toJsonValue(m_subscription_state));
    }
    if (m_test_purchase_isSet) {
        obj.insert(QString("testPurchase"), ::OpenAPI::toJsonValue(m_test_purchase));
    }
    return obj;
}

QString OAISubscriptionPurchaseV2::getAcknowledgementState() const {
    return m_acknowledgement_state;
}
void OAISubscriptionPurchaseV2::setAcknowledgementState(const QString &acknowledgement_state) {
    m_acknowledgement_state = acknowledgement_state;
    m_acknowledgement_state_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_acknowledgement_state_Set() const{
    return m_acknowledgement_state_isSet;
}

bool OAISubscriptionPurchaseV2::is_acknowledgement_state_Valid() const{
    return m_acknowledgement_state_isValid;
}

OAICanceledStateContext OAISubscriptionPurchaseV2::getCanceledStateContext() const {
    return m_canceled_state_context;
}
void OAISubscriptionPurchaseV2::setCanceledStateContext(const OAICanceledStateContext &canceled_state_context) {
    m_canceled_state_context = canceled_state_context;
    m_canceled_state_context_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_canceled_state_context_Set() const{
    return m_canceled_state_context_isSet;
}

bool OAISubscriptionPurchaseV2::is_canceled_state_context_Valid() const{
    return m_canceled_state_context_isValid;
}

OAIExternalAccountIdentifiers OAISubscriptionPurchaseV2::getExternalAccountIdentifiers() const {
    return m_external_account_identifiers;
}
void OAISubscriptionPurchaseV2::setExternalAccountIdentifiers(const OAIExternalAccountIdentifiers &external_account_identifiers) {
    m_external_account_identifiers = external_account_identifiers;
    m_external_account_identifiers_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_external_account_identifiers_Set() const{
    return m_external_account_identifiers_isSet;
}

bool OAISubscriptionPurchaseV2::is_external_account_identifiers_Valid() const{
    return m_external_account_identifiers_isValid;
}

QString OAISubscriptionPurchaseV2::getKind() const {
    return m_kind;
}
void OAISubscriptionPurchaseV2::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISubscriptionPurchaseV2::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISubscriptionPurchaseV2::getLatestOrderId() const {
    return m_latest_order_id;
}
void OAISubscriptionPurchaseV2::setLatestOrderId(const QString &latest_order_id) {
    m_latest_order_id = latest_order_id;
    m_latest_order_id_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_latest_order_id_Set() const{
    return m_latest_order_id_isSet;
}

bool OAISubscriptionPurchaseV2::is_latest_order_id_Valid() const{
    return m_latest_order_id_isValid;
}

QList<OAISubscriptionPurchaseLineItem> OAISubscriptionPurchaseV2::getLineItems() const {
    return m_line_items;
}
void OAISubscriptionPurchaseV2::setLineItems(const QList<OAISubscriptionPurchaseLineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAISubscriptionPurchaseV2::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAISubscriptionPurchaseV2::getLinkedPurchaseToken() const {
    return m_linked_purchase_token;
}
void OAISubscriptionPurchaseV2::setLinkedPurchaseToken(const QString &linked_purchase_token) {
    m_linked_purchase_token = linked_purchase_token;
    m_linked_purchase_token_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_linked_purchase_token_Set() const{
    return m_linked_purchase_token_isSet;
}

bool OAISubscriptionPurchaseV2::is_linked_purchase_token_Valid() const{
    return m_linked_purchase_token_isValid;
}

OAIPausedStateContext OAISubscriptionPurchaseV2::getPausedStateContext() const {
    return m_paused_state_context;
}
void OAISubscriptionPurchaseV2::setPausedStateContext(const OAIPausedStateContext &paused_state_context) {
    m_paused_state_context = paused_state_context;
    m_paused_state_context_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_paused_state_context_Set() const{
    return m_paused_state_context_isSet;
}

bool OAISubscriptionPurchaseV2::is_paused_state_context_Valid() const{
    return m_paused_state_context_isValid;
}

QString OAISubscriptionPurchaseV2::getRegionCode() const {
    return m_region_code;
}
void OAISubscriptionPurchaseV2::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAISubscriptionPurchaseV2::is_region_code_Valid() const{
    return m_region_code_isValid;
}

QString OAISubscriptionPurchaseV2::getStartTime() const {
    return m_start_time;
}
void OAISubscriptionPurchaseV2::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISubscriptionPurchaseV2::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAISubscribeWithGoogleInfo OAISubscriptionPurchaseV2::getSubscribeWithGoogleInfo() const {
    return m_subscribe_with_google_info;
}
void OAISubscriptionPurchaseV2::setSubscribeWithGoogleInfo(const OAISubscribeWithGoogleInfo &subscribe_with_google_info) {
    m_subscribe_with_google_info = subscribe_with_google_info;
    m_subscribe_with_google_info_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_subscribe_with_google_info_Set() const{
    return m_subscribe_with_google_info_isSet;
}

bool OAISubscriptionPurchaseV2::is_subscribe_with_google_info_Valid() const{
    return m_subscribe_with_google_info_isValid;
}

QString OAISubscriptionPurchaseV2::getSubscriptionState() const {
    return m_subscription_state;
}
void OAISubscriptionPurchaseV2::setSubscriptionState(const QString &subscription_state) {
    m_subscription_state = subscription_state;
    m_subscription_state_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_subscription_state_Set() const{
    return m_subscription_state_isSet;
}

bool OAISubscriptionPurchaseV2::is_subscription_state_Valid() const{
    return m_subscription_state_isValid;
}

OAIObject OAISubscriptionPurchaseV2::getTestPurchase() const {
    return m_test_purchase;
}
void OAISubscriptionPurchaseV2::setTestPurchase(const OAIObject &test_purchase) {
    m_test_purchase = test_purchase;
    m_test_purchase_isSet = true;
}

bool OAISubscriptionPurchaseV2::is_test_purchase_Set() const{
    return m_test_purchase_isSet;
}

bool OAISubscriptionPurchaseV2::is_test_purchase_Valid() const{
    return m_test_purchase_isValid;
}

bool OAISubscriptionPurchaseV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_state_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_account_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_purchase_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paused_state_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscribe_with_google_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPurchaseV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
