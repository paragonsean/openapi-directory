/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionTaxAndComplianceSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionTaxAndComplianceSettings::OAISubscriptionTaxAndComplianceSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionTaxAndComplianceSettings::OAISubscriptionTaxAndComplianceSettings() {
    this->initializeModel();
}

OAISubscriptionTaxAndComplianceSettings::~OAISubscriptionTaxAndComplianceSettings() {}

void OAISubscriptionTaxAndComplianceSettings::initializeModel() {

    m_eea_withdrawal_right_type_isSet = false;
    m_eea_withdrawal_right_type_isValid = false;

    m_is_tokenized_digital_asset_isSet = false;
    m_is_tokenized_digital_asset_isValid = false;

    m_tax_rate_info_by_region_code_isSet = false;
    m_tax_rate_info_by_region_code_isValid = false;
}

void OAISubscriptionTaxAndComplianceSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionTaxAndComplianceSettings::fromJsonObject(QJsonObject json) {

    m_eea_withdrawal_right_type_isValid = ::OpenAPI::fromJsonValue(m_eea_withdrawal_right_type, json[QString("eeaWithdrawalRightType")]);
    m_eea_withdrawal_right_type_isSet = !json[QString("eeaWithdrawalRightType")].isNull() && m_eea_withdrawal_right_type_isValid;

    m_is_tokenized_digital_asset_isValid = ::OpenAPI::fromJsonValue(m_is_tokenized_digital_asset, json[QString("isTokenizedDigitalAsset")]);
    m_is_tokenized_digital_asset_isSet = !json[QString("isTokenizedDigitalAsset")].isNull() && m_is_tokenized_digital_asset_isValid;

    m_tax_rate_info_by_region_code_isValid = ::OpenAPI::fromJsonValue(m_tax_rate_info_by_region_code, json[QString("taxRateInfoByRegionCode")]);
    m_tax_rate_info_by_region_code_isSet = !json[QString("taxRateInfoByRegionCode")].isNull() && m_tax_rate_info_by_region_code_isValid;
}

QString OAISubscriptionTaxAndComplianceSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionTaxAndComplianceSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_eea_withdrawal_right_type_isSet) {
        obj.insert(QString("eeaWithdrawalRightType"), ::OpenAPI::toJsonValue(m_eea_withdrawal_right_type));
    }
    if (m_is_tokenized_digital_asset_isSet) {
        obj.insert(QString("isTokenizedDigitalAsset"), ::OpenAPI::toJsonValue(m_is_tokenized_digital_asset));
    }
    if (m_tax_rate_info_by_region_code.size() > 0) {
        obj.insert(QString("taxRateInfoByRegionCode"), ::OpenAPI::toJsonValue(m_tax_rate_info_by_region_code));
    }
    return obj;
}

QString OAISubscriptionTaxAndComplianceSettings::getEeaWithdrawalRightType() const {
    return m_eea_withdrawal_right_type;
}
void OAISubscriptionTaxAndComplianceSettings::setEeaWithdrawalRightType(const QString &eea_withdrawal_right_type) {
    m_eea_withdrawal_right_type = eea_withdrawal_right_type;
    m_eea_withdrawal_right_type_isSet = true;
}

bool OAISubscriptionTaxAndComplianceSettings::is_eea_withdrawal_right_type_Set() const{
    return m_eea_withdrawal_right_type_isSet;
}

bool OAISubscriptionTaxAndComplianceSettings::is_eea_withdrawal_right_type_Valid() const{
    return m_eea_withdrawal_right_type_isValid;
}

bool OAISubscriptionTaxAndComplianceSettings::isIsTokenizedDigitalAsset() const {
    return m_is_tokenized_digital_asset;
}
void OAISubscriptionTaxAndComplianceSettings::setIsTokenizedDigitalAsset(const bool &is_tokenized_digital_asset) {
    m_is_tokenized_digital_asset = is_tokenized_digital_asset;
    m_is_tokenized_digital_asset_isSet = true;
}

bool OAISubscriptionTaxAndComplianceSettings::is_is_tokenized_digital_asset_Set() const{
    return m_is_tokenized_digital_asset_isSet;
}

bool OAISubscriptionTaxAndComplianceSettings::is_is_tokenized_digital_asset_Valid() const{
    return m_is_tokenized_digital_asset_isValid;
}

QMap<QString, OAIRegionalTaxRateInfo> OAISubscriptionTaxAndComplianceSettings::getTaxRateInfoByRegionCode() const {
    return m_tax_rate_info_by_region_code;
}
void OAISubscriptionTaxAndComplianceSettings::setTaxRateInfoByRegionCode(const QMap<QString, OAIRegionalTaxRateInfo> &tax_rate_info_by_region_code) {
    m_tax_rate_info_by_region_code = tax_rate_info_by_region_code;
    m_tax_rate_info_by_region_code_isSet = true;
}

bool OAISubscriptionTaxAndComplianceSettings::is_tax_rate_info_by_region_code_Set() const{
    return m_tax_rate_info_by_region_code_isSet;
}

bool OAISubscriptionTaxAndComplianceSettings::is_tax_rate_info_by_region_code_Valid() const{
    return m_tax_rate_info_by_region_code_isValid;
}

bool OAISubscriptionTaxAndComplianceSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eea_withdrawal_right_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_tokenized_digital_asset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_info_by_region_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionTaxAndComplianceSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
