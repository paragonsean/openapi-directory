/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanceledStateContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanceledStateContext::OAICanceledStateContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanceledStateContext::OAICanceledStateContext() {
    this->initializeModel();
}

OAICanceledStateContext::~OAICanceledStateContext() {}

void OAICanceledStateContext::initializeModel() {

    m_developer_initiated_cancellation_isSet = false;
    m_developer_initiated_cancellation_isValid = false;

    m_replacement_cancellation_isSet = false;
    m_replacement_cancellation_isValid = false;

    m_system_initiated_cancellation_isSet = false;
    m_system_initiated_cancellation_isValid = false;

    m_user_initiated_cancellation_isSet = false;
    m_user_initiated_cancellation_isValid = false;
}

void OAICanceledStateContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanceledStateContext::fromJsonObject(QJsonObject json) {

    m_developer_initiated_cancellation_isValid = ::OpenAPI::fromJsonValue(m_developer_initiated_cancellation, json[QString("developerInitiatedCancellation")]);
    m_developer_initiated_cancellation_isSet = !json[QString("developerInitiatedCancellation")].isNull() && m_developer_initiated_cancellation_isValid;

    m_replacement_cancellation_isValid = ::OpenAPI::fromJsonValue(m_replacement_cancellation, json[QString("replacementCancellation")]);
    m_replacement_cancellation_isSet = !json[QString("replacementCancellation")].isNull() && m_replacement_cancellation_isValid;

    m_system_initiated_cancellation_isValid = ::OpenAPI::fromJsonValue(m_system_initiated_cancellation, json[QString("systemInitiatedCancellation")]);
    m_system_initiated_cancellation_isSet = !json[QString("systemInitiatedCancellation")].isNull() && m_system_initiated_cancellation_isValid;

    m_user_initiated_cancellation_isValid = ::OpenAPI::fromJsonValue(m_user_initiated_cancellation, json[QString("userInitiatedCancellation")]);
    m_user_initiated_cancellation_isSet = !json[QString("userInitiatedCancellation")].isNull() && m_user_initiated_cancellation_isValid;
}

QString OAICanceledStateContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanceledStateContext::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_initiated_cancellation_isSet) {
        obj.insert(QString("developerInitiatedCancellation"), ::OpenAPI::toJsonValue(m_developer_initiated_cancellation));
    }
    if (m_replacement_cancellation_isSet) {
        obj.insert(QString("replacementCancellation"), ::OpenAPI::toJsonValue(m_replacement_cancellation));
    }
    if (m_system_initiated_cancellation_isSet) {
        obj.insert(QString("systemInitiatedCancellation"), ::OpenAPI::toJsonValue(m_system_initiated_cancellation));
    }
    if (m_user_initiated_cancellation.isSet()) {
        obj.insert(QString("userInitiatedCancellation"), ::OpenAPI::toJsonValue(m_user_initiated_cancellation));
    }
    return obj;
}

OAIObject OAICanceledStateContext::getDeveloperInitiatedCancellation() const {
    return m_developer_initiated_cancellation;
}
void OAICanceledStateContext::setDeveloperInitiatedCancellation(const OAIObject &developer_initiated_cancellation) {
    m_developer_initiated_cancellation = developer_initiated_cancellation;
    m_developer_initiated_cancellation_isSet = true;
}

bool OAICanceledStateContext::is_developer_initiated_cancellation_Set() const{
    return m_developer_initiated_cancellation_isSet;
}

bool OAICanceledStateContext::is_developer_initiated_cancellation_Valid() const{
    return m_developer_initiated_cancellation_isValid;
}

OAIObject OAICanceledStateContext::getReplacementCancellation() const {
    return m_replacement_cancellation;
}
void OAICanceledStateContext::setReplacementCancellation(const OAIObject &replacement_cancellation) {
    m_replacement_cancellation = replacement_cancellation;
    m_replacement_cancellation_isSet = true;
}

bool OAICanceledStateContext::is_replacement_cancellation_Set() const{
    return m_replacement_cancellation_isSet;
}

bool OAICanceledStateContext::is_replacement_cancellation_Valid() const{
    return m_replacement_cancellation_isValid;
}

OAIObject OAICanceledStateContext::getSystemInitiatedCancellation() const {
    return m_system_initiated_cancellation;
}
void OAICanceledStateContext::setSystemInitiatedCancellation(const OAIObject &system_initiated_cancellation) {
    m_system_initiated_cancellation = system_initiated_cancellation;
    m_system_initiated_cancellation_isSet = true;
}

bool OAICanceledStateContext::is_system_initiated_cancellation_Set() const{
    return m_system_initiated_cancellation_isSet;
}

bool OAICanceledStateContext::is_system_initiated_cancellation_Valid() const{
    return m_system_initiated_cancellation_isValid;
}

OAIUserInitiatedCancellation OAICanceledStateContext::getUserInitiatedCancellation() const {
    return m_user_initiated_cancellation;
}
void OAICanceledStateContext::setUserInitiatedCancellation(const OAIUserInitiatedCancellation &user_initiated_cancellation) {
    m_user_initiated_cancellation = user_initiated_cancellation;
    m_user_initiated_cancellation_isSet = true;
}

bool OAICanceledStateContext::is_user_initiated_cancellation_Set() const{
    return m_user_initiated_cancellation_isSet;
}

bool OAICanceledStateContext::is_user_initiated_cancellation_Valid() const{
    return m_user_initiated_cancellation_isValid;
}

bool OAICanceledStateContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_initiated_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_initiated_cancellation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_initiated_cancellation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanceledStateContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
