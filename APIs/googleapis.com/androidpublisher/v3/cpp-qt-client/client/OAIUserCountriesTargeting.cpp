/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserCountriesTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserCountriesTargeting::OAIUserCountriesTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserCountriesTargeting::OAIUserCountriesTargeting() {
    this->initializeModel();
}

OAIUserCountriesTargeting::~OAIUserCountriesTargeting() {}

void OAIUserCountriesTargeting::initializeModel() {

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_exclude_isSet = false;
    m_exclude_isValid = false;
}

void OAIUserCountriesTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserCountriesTargeting::fromJsonObject(QJsonObject json) {

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("countryCodes")]);
    m_country_codes_isSet = !json[QString("countryCodes")].isNull() && m_country_codes_isValid;

    m_exclude_isValid = ::OpenAPI::fromJsonValue(m_exclude, json[QString("exclude")]);
    m_exclude_isSet = !json[QString("exclude")].isNull() && m_exclude_isValid;
}

QString OAIUserCountriesTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserCountriesTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_country_codes.size() > 0) {
        obj.insert(QString("countryCodes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_exclude_isSet) {
        obj.insert(QString("exclude"), ::OpenAPI::toJsonValue(m_exclude));
    }
    return obj;
}

QList<QString> OAIUserCountriesTargeting::getCountryCodes() const {
    return m_country_codes;
}
void OAIUserCountriesTargeting::setCountryCodes(const QList<QString> &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAIUserCountriesTargeting::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAIUserCountriesTargeting::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

bool OAIUserCountriesTargeting::isExclude() const {
    return m_exclude;
}
void OAIUserCountriesTargeting::setExclude(const bool &exclude) {
    m_exclude = exclude;
    m_exclude_isSet = true;
}

bool OAIUserCountriesTargeting::is_exclude_Set() const{
    return m_exclude_isSet;
}

bool OAIUserCountriesTargeting::is_exclude_Valid() const{
    return m_exclude_isValid;
}

bool OAIUserCountriesTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserCountriesTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
