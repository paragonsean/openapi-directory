/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPurchaseLineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPurchaseLineItem::OAISubscriptionPurchaseLineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPurchaseLineItem::OAISubscriptionPurchaseLineItem() {
    this->initializeModel();
}

OAISubscriptionPurchaseLineItem::~OAISubscriptionPurchaseLineItem() {}

void OAISubscriptionPurchaseLineItem::initializeModel() {

    m_auto_renewing_plan_isSet = false;
    m_auto_renewing_plan_isValid = false;

    m_deferred_item_replacement_isSet = false;
    m_deferred_item_replacement_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_offer_details_isSet = false;
    m_offer_details_isValid = false;

    m_prepaid_plan_isSet = false;
    m_prepaid_plan_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;
}

void OAISubscriptionPurchaseLineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPurchaseLineItem::fromJsonObject(QJsonObject json) {

    m_auto_renewing_plan_isValid = ::OpenAPI::fromJsonValue(m_auto_renewing_plan, json[QString("autoRenewingPlan")]);
    m_auto_renewing_plan_isSet = !json[QString("autoRenewingPlan")].isNull() && m_auto_renewing_plan_isValid;

    m_deferred_item_replacement_isValid = ::OpenAPI::fromJsonValue(m_deferred_item_replacement, json[QString("deferredItemReplacement")]);
    m_deferred_item_replacement_isSet = !json[QString("deferredItemReplacement")].isNull() && m_deferred_item_replacement_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_offer_details_isValid = ::OpenAPI::fromJsonValue(m_offer_details, json[QString("offerDetails")]);
    m_offer_details_isSet = !json[QString("offerDetails")].isNull() && m_offer_details_isValid;

    m_prepaid_plan_isValid = ::OpenAPI::fromJsonValue(m_prepaid_plan, json[QString("prepaidPlan")]);
    m_prepaid_plan_isSet = !json[QString("prepaidPlan")].isNull() && m_prepaid_plan_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;
}

QString OAISubscriptionPurchaseLineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPurchaseLineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renewing_plan.isSet()) {
        obj.insert(QString("autoRenewingPlan"), ::OpenAPI::toJsonValue(m_auto_renewing_plan));
    }
    if (m_deferred_item_replacement.isSet()) {
        obj.insert(QString("deferredItemReplacement"), ::OpenAPI::toJsonValue(m_deferred_item_replacement));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_offer_details.isSet()) {
        obj.insert(QString("offerDetails"), ::OpenAPI::toJsonValue(m_offer_details));
    }
    if (m_prepaid_plan.isSet()) {
        obj.insert(QString("prepaidPlan"), ::OpenAPI::toJsonValue(m_prepaid_plan));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    return obj;
}

OAIAutoRenewingPlan OAISubscriptionPurchaseLineItem::getAutoRenewingPlan() const {
    return m_auto_renewing_plan;
}
void OAISubscriptionPurchaseLineItem::setAutoRenewingPlan(const OAIAutoRenewingPlan &auto_renewing_plan) {
    m_auto_renewing_plan = auto_renewing_plan;
    m_auto_renewing_plan_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_auto_renewing_plan_Set() const{
    return m_auto_renewing_plan_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_auto_renewing_plan_Valid() const{
    return m_auto_renewing_plan_isValid;
}

OAIDeferredItemReplacement OAISubscriptionPurchaseLineItem::getDeferredItemReplacement() const {
    return m_deferred_item_replacement;
}
void OAISubscriptionPurchaseLineItem::setDeferredItemReplacement(const OAIDeferredItemReplacement &deferred_item_replacement) {
    m_deferred_item_replacement = deferred_item_replacement;
    m_deferred_item_replacement_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_deferred_item_replacement_Set() const{
    return m_deferred_item_replacement_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_deferred_item_replacement_Valid() const{
    return m_deferred_item_replacement_isValid;
}

QString OAISubscriptionPurchaseLineItem::getExpiryTime() const {
    return m_expiry_time;
}
void OAISubscriptionPurchaseLineItem::setExpiryTime(const QString &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

OAIOfferDetails OAISubscriptionPurchaseLineItem::getOfferDetails() const {
    return m_offer_details;
}
void OAISubscriptionPurchaseLineItem::setOfferDetails(const OAIOfferDetails &offer_details) {
    m_offer_details = offer_details;
    m_offer_details_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_offer_details_Set() const{
    return m_offer_details_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_offer_details_Valid() const{
    return m_offer_details_isValid;
}

OAIPrepaidPlan OAISubscriptionPurchaseLineItem::getPrepaidPlan() const {
    return m_prepaid_plan;
}
void OAISubscriptionPurchaseLineItem::setPrepaidPlan(const OAIPrepaidPlan &prepaid_plan) {
    m_prepaid_plan = prepaid_plan;
    m_prepaid_plan_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_prepaid_plan_Set() const{
    return m_prepaid_plan_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_prepaid_plan_Valid() const{
    return m_prepaid_plan_isValid;
}

QString OAISubscriptionPurchaseLineItem::getProductId() const {
    return m_product_id;
}
void OAISubscriptionPurchaseLineItem::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISubscriptionPurchaseLineItem::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISubscriptionPurchaseLineItem::is_product_id_Valid() const{
    return m_product_id_isValid;
}

bool OAISubscriptionPurchaseLineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renewing_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deferred_item_replacement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPurchaseLineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
