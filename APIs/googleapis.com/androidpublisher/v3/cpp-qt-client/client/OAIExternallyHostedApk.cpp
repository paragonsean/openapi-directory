/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternallyHostedApk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternallyHostedApk::OAIExternallyHostedApk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternallyHostedApk::OAIExternallyHostedApk() {
    this->initializeModel();
}

OAIExternallyHostedApk::~OAIExternallyHostedApk() {}

void OAIExternallyHostedApk::initializeModel() {

    m_application_label_isSet = false;
    m_application_label_isValid = false;

    m_certificate_base64s_isSet = false;
    m_certificate_base64s_isValid = false;

    m_externally_hosted_url_isSet = false;
    m_externally_hosted_url_isValid = false;

    m_file_sha1_base64_isSet = false;
    m_file_sha1_base64_isValid = false;

    m_file_sha256_base64_isSet = false;
    m_file_sha256_base64_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_icon_base64_isSet = false;
    m_icon_base64_isValid = false;

    m_maximum_sdk_isSet = false;
    m_maximum_sdk_isValid = false;

    m_minimum_sdk_isSet = false;
    m_minimum_sdk_isValid = false;

    m_native_codes_isSet = false;
    m_native_codes_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_uses_features_isSet = false;
    m_uses_features_isValid = false;

    m_uses_permissions_isSet = false;
    m_uses_permissions_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;

    m_version_name_isSet = false;
    m_version_name_isValid = false;
}

void OAIExternallyHostedApk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternallyHostedApk::fromJsonObject(QJsonObject json) {

    m_application_label_isValid = ::OpenAPI::fromJsonValue(m_application_label, json[QString("applicationLabel")]);
    m_application_label_isSet = !json[QString("applicationLabel")].isNull() && m_application_label_isValid;

    m_certificate_base64s_isValid = ::OpenAPI::fromJsonValue(m_certificate_base64s, json[QString("certificateBase64s")]);
    m_certificate_base64s_isSet = !json[QString("certificateBase64s")].isNull() && m_certificate_base64s_isValid;

    m_externally_hosted_url_isValid = ::OpenAPI::fromJsonValue(m_externally_hosted_url, json[QString("externallyHostedUrl")]);
    m_externally_hosted_url_isSet = !json[QString("externallyHostedUrl")].isNull() && m_externally_hosted_url_isValid;

    m_file_sha1_base64_isValid = ::OpenAPI::fromJsonValue(m_file_sha1_base64, json[QString("fileSha1Base64")]);
    m_file_sha1_base64_isSet = !json[QString("fileSha1Base64")].isNull() && m_file_sha1_base64_isValid;

    m_file_sha256_base64_isValid = ::OpenAPI::fromJsonValue(m_file_sha256_base64, json[QString("fileSha256Base64")]);
    m_file_sha256_base64_isSet = !json[QString("fileSha256Base64")].isNull() && m_file_sha256_base64_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_icon_base64_isValid = ::OpenAPI::fromJsonValue(m_icon_base64, json[QString("iconBase64")]);
    m_icon_base64_isSet = !json[QString("iconBase64")].isNull() && m_icon_base64_isValid;

    m_maximum_sdk_isValid = ::OpenAPI::fromJsonValue(m_maximum_sdk, json[QString("maximumSdk")]);
    m_maximum_sdk_isSet = !json[QString("maximumSdk")].isNull() && m_maximum_sdk_isValid;

    m_minimum_sdk_isValid = ::OpenAPI::fromJsonValue(m_minimum_sdk, json[QString("minimumSdk")]);
    m_minimum_sdk_isSet = !json[QString("minimumSdk")].isNull() && m_minimum_sdk_isValid;

    m_native_codes_isValid = ::OpenAPI::fromJsonValue(m_native_codes, json[QString("nativeCodes")]);
    m_native_codes_isSet = !json[QString("nativeCodes")].isNull() && m_native_codes_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_uses_features_isValid = ::OpenAPI::fromJsonValue(m_uses_features, json[QString("usesFeatures")]);
    m_uses_features_isSet = !json[QString("usesFeatures")].isNull() && m_uses_features_isValid;

    m_uses_permissions_isValid = ::OpenAPI::fromJsonValue(m_uses_permissions, json[QString("usesPermissions")]);
    m_uses_permissions_isSet = !json[QString("usesPermissions")].isNull() && m_uses_permissions_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;

    m_version_name_isValid = ::OpenAPI::fromJsonValue(m_version_name, json[QString("versionName")]);
    m_version_name_isSet = !json[QString("versionName")].isNull() && m_version_name_isValid;
}

QString OAIExternallyHostedApk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternallyHostedApk::asJsonObject() const {
    QJsonObject obj;
    if (m_application_label_isSet) {
        obj.insert(QString("applicationLabel"), ::OpenAPI::toJsonValue(m_application_label));
    }
    if (m_certificate_base64s.size() > 0) {
        obj.insert(QString("certificateBase64s"), ::OpenAPI::toJsonValue(m_certificate_base64s));
    }
    if (m_externally_hosted_url_isSet) {
        obj.insert(QString("externallyHostedUrl"), ::OpenAPI::toJsonValue(m_externally_hosted_url));
    }
    if (m_file_sha1_base64_isSet) {
        obj.insert(QString("fileSha1Base64"), ::OpenAPI::toJsonValue(m_file_sha1_base64));
    }
    if (m_file_sha256_base64_isSet) {
        obj.insert(QString("fileSha256Base64"), ::OpenAPI::toJsonValue(m_file_sha256_base64));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_icon_base64_isSet) {
        obj.insert(QString("iconBase64"), ::OpenAPI::toJsonValue(m_icon_base64));
    }
    if (m_maximum_sdk_isSet) {
        obj.insert(QString("maximumSdk"), ::OpenAPI::toJsonValue(m_maximum_sdk));
    }
    if (m_minimum_sdk_isSet) {
        obj.insert(QString("minimumSdk"), ::OpenAPI::toJsonValue(m_minimum_sdk));
    }
    if (m_native_codes.size() > 0) {
        obj.insert(QString("nativeCodes"), ::OpenAPI::toJsonValue(m_native_codes));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_uses_features.size() > 0) {
        obj.insert(QString("usesFeatures"), ::OpenAPI::toJsonValue(m_uses_features));
    }
    if (m_uses_permissions.size() > 0) {
        obj.insert(QString("usesPermissions"), ::OpenAPI::toJsonValue(m_uses_permissions));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    if (m_version_name_isSet) {
        obj.insert(QString("versionName"), ::OpenAPI::toJsonValue(m_version_name));
    }
    return obj;
}

QString OAIExternallyHostedApk::getApplicationLabel() const {
    return m_application_label;
}
void OAIExternallyHostedApk::setApplicationLabel(const QString &application_label) {
    m_application_label = application_label;
    m_application_label_isSet = true;
}

bool OAIExternallyHostedApk::is_application_label_Set() const{
    return m_application_label_isSet;
}

bool OAIExternallyHostedApk::is_application_label_Valid() const{
    return m_application_label_isValid;
}

QList<QString> OAIExternallyHostedApk::getCertificateBase64s() const {
    return m_certificate_base64s;
}
void OAIExternallyHostedApk::setCertificateBase64s(const QList<QString> &certificate_base64s) {
    m_certificate_base64s = certificate_base64s;
    m_certificate_base64s_isSet = true;
}

bool OAIExternallyHostedApk::is_certificate_base64s_Set() const{
    return m_certificate_base64s_isSet;
}

bool OAIExternallyHostedApk::is_certificate_base64s_Valid() const{
    return m_certificate_base64s_isValid;
}

QString OAIExternallyHostedApk::getExternallyHostedUrl() const {
    return m_externally_hosted_url;
}
void OAIExternallyHostedApk::setExternallyHostedUrl(const QString &externally_hosted_url) {
    m_externally_hosted_url = externally_hosted_url;
    m_externally_hosted_url_isSet = true;
}

bool OAIExternallyHostedApk::is_externally_hosted_url_Set() const{
    return m_externally_hosted_url_isSet;
}

bool OAIExternallyHostedApk::is_externally_hosted_url_Valid() const{
    return m_externally_hosted_url_isValid;
}

QString OAIExternallyHostedApk::getFileSha1Base64() const {
    return m_file_sha1_base64;
}
void OAIExternallyHostedApk::setFileSha1Base64(const QString &file_sha1_base64) {
    m_file_sha1_base64 = file_sha1_base64;
    m_file_sha1_base64_isSet = true;
}

bool OAIExternallyHostedApk::is_file_sha1_base64_Set() const{
    return m_file_sha1_base64_isSet;
}

bool OAIExternallyHostedApk::is_file_sha1_base64_Valid() const{
    return m_file_sha1_base64_isValid;
}

QString OAIExternallyHostedApk::getFileSha256Base64() const {
    return m_file_sha256_base64;
}
void OAIExternallyHostedApk::setFileSha256Base64(const QString &file_sha256_base64) {
    m_file_sha256_base64 = file_sha256_base64;
    m_file_sha256_base64_isSet = true;
}

bool OAIExternallyHostedApk::is_file_sha256_base64_Set() const{
    return m_file_sha256_base64_isSet;
}

bool OAIExternallyHostedApk::is_file_sha256_base64_Valid() const{
    return m_file_sha256_base64_isValid;
}

QString OAIExternallyHostedApk::getFileSize() const {
    return m_file_size;
}
void OAIExternallyHostedApk::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIExternallyHostedApk::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIExternallyHostedApk::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIExternallyHostedApk::getIconBase64() const {
    return m_icon_base64;
}
void OAIExternallyHostedApk::setIconBase64(const QString &icon_base64) {
    m_icon_base64 = icon_base64;
    m_icon_base64_isSet = true;
}

bool OAIExternallyHostedApk::is_icon_base64_Set() const{
    return m_icon_base64_isSet;
}

bool OAIExternallyHostedApk::is_icon_base64_Valid() const{
    return m_icon_base64_isValid;
}

qint32 OAIExternallyHostedApk::getMaximumSdk() const {
    return m_maximum_sdk;
}
void OAIExternallyHostedApk::setMaximumSdk(const qint32 &maximum_sdk) {
    m_maximum_sdk = maximum_sdk;
    m_maximum_sdk_isSet = true;
}

bool OAIExternallyHostedApk::is_maximum_sdk_Set() const{
    return m_maximum_sdk_isSet;
}

bool OAIExternallyHostedApk::is_maximum_sdk_Valid() const{
    return m_maximum_sdk_isValid;
}

qint32 OAIExternallyHostedApk::getMinimumSdk() const {
    return m_minimum_sdk;
}
void OAIExternallyHostedApk::setMinimumSdk(const qint32 &minimum_sdk) {
    m_minimum_sdk = minimum_sdk;
    m_minimum_sdk_isSet = true;
}

bool OAIExternallyHostedApk::is_minimum_sdk_Set() const{
    return m_minimum_sdk_isSet;
}

bool OAIExternallyHostedApk::is_minimum_sdk_Valid() const{
    return m_minimum_sdk_isValid;
}

QList<QString> OAIExternallyHostedApk::getNativeCodes() const {
    return m_native_codes;
}
void OAIExternallyHostedApk::setNativeCodes(const QList<QString> &native_codes) {
    m_native_codes = native_codes;
    m_native_codes_isSet = true;
}

bool OAIExternallyHostedApk::is_native_codes_Set() const{
    return m_native_codes_isSet;
}

bool OAIExternallyHostedApk::is_native_codes_Valid() const{
    return m_native_codes_isValid;
}

QString OAIExternallyHostedApk::getPackageName() const {
    return m_package_name;
}
void OAIExternallyHostedApk::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIExternallyHostedApk::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIExternallyHostedApk::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QList<QString> OAIExternallyHostedApk::getUsesFeatures() const {
    return m_uses_features;
}
void OAIExternallyHostedApk::setUsesFeatures(const QList<QString> &uses_features) {
    m_uses_features = uses_features;
    m_uses_features_isSet = true;
}

bool OAIExternallyHostedApk::is_uses_features_Set() const{
    return m_uses_features_isSet;
}

bool OAIExternallyHostedApk::is_uses_features_Valid() const{
    return m_uses_features_isValid;
}

QList<OAIUsesPermission> OAIExternallyHostedApk::getUsesPermissions() const {
    return m_uses_permissions;
}
void OAIExternallyHostedApk::setUsesPermissions(const QList<OAIUsesPermission> &uses_permissions) {
    m_uses_permissions = uses_permissions;
    m_uses_permissions_isSet = true;
}

bool OAIExternallyHostedApk::is_uses_permissions_Set() const{
    return m_uses_permissions_isSet;
}

bool OAIExternallyHostedApk::is_uses_permissions_Valid() const{
    return m_uses_permissions_isValid;
}

qint32 OAIExternallyHostedApk::getVersionCode() const {
    return m_version_code;
}
void OAIExternallyHostedApk::setVersionCode(const qint32 &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIExternallyHostedApk::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIExternallyHostedApk::is_version_code_Valid() const{
    return m_version_code_isValid;
}

QString OAIExternallyHostedApk::getVersionName() const {
    return m_version_name;
}
void OAIExternallyHostedApk::setVersionName(const QString &version_name) {
    m_version_name = version_name;
    m_version_name_isSet = true;
}

bool OAIExternallyHostedApk::is_version_name_Set() const{
    return m_version_name_isSet;
}

bool OAIExternallyHostedApk::is_version_name_Valid() const{
    return m_version_name_isValid;
}

bool OAIExternallyHostedApk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_base64s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_externally_hosted_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_sha1_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_sha256_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_sdk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_sdk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uses_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternallyHostedApk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
