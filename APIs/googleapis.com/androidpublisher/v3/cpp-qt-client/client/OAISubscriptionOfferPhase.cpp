/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionOfferPhase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionOfferPhase::OAISubscriptionOfferPhase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionOfferPhase::OAISubscriptionOfferPhase() {
    this->initializeModel();
}

OAISubscriptionOfferPhase::~OAISubscriptionOfferPhase() {}

void OAISubscriptionOfferPhase::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_other_regions_config_isSet = false;
    m_other_regions_config_isValid = false;

    m_recurrence_count_isSet = false;
    m_recurrence_count_isValid = false;

    m_regional_configs_isSet = false;
    m_regional_configs_isValid = false;
}

void OAISubscriptionOfferPhase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionOfferPhase::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_other_regions_config_isValid = ::OpenAPI::fromJsonValue(m_other_regions_config, json[QString("otherRegionsConfig")]);
    m_other_regions_config_isSet = !json[QString("otherRegionsConfig")].isNull() && m_other_regions_config_isValid;

    m_recurrence_count_isValid = ::OpenAPI::fromJsonValue(m_recurrence_count, json[QString("recurrenceCount")]);
    m_recurrence_count_isSet = !json[QString("recurrenceCount")].isNull() && m_recurrence_count_isValid;

    m_regional_configs_isValid = ::OpenAPI::fromJsonValue(m_regional_configs, json[QString("regionalConfigs")]);
    m_regional_configs_isSet = !json[QString("regionalConfigs")].isNull() && m_regional_configs_isValid;
}

QString OAISubscriptionOfferPhase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionOfferPhase::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_other_regions_config.isSet()) {
        obj.insert(QString("otherRegionsConfig"), ::OpenAPI::toJsonValue(m_other_regions_config));
    }
    if (m_recurrence_count_isSet) {
        obj.insert(QString("recurrenceCount"), ::OpenAPI::toJsonValue(m_recurrence_count));
    }
    if (m_regional_configs.size() > 0) {
        obj.insert(QString("regionalConfigs"), ::OpenAPI::toJsonValue(m_regional_configs));
    }
    return obj;
}

QString OAISubscriptionOfferPhase::getDuration() const {
    return m_duration;
}
void OAISubscriptionOfferPhase::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISubscriptionOfferPhase::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISubscriptionOfferPhase::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIOtherRegionsSubscriptionOfferPhaseConfig OAISubscriptionOfferPhase::getOtherRegionsConfig() const {
    return m_other_regions_config;
}
void OAISubscriptionOfferPhase::setOtherRegionsConfig(const OAIOtherRegionsSubscriptionOfferPhaseConfig &other_regions_config) {
    m_other_regions_config = other_regions_config;
    m_other_regions_config_isSet = true;
}

bool OAISubscriptionOfferPhase::is_other_regions_config_Set() const{
    return m_other_regions_config_isSet;
}

bool OAISubscriptionOfferPhase::is_other_regions_config_Valid() const{
    return m_other_regions_config_isValid;
}

qint32 OAISubscriptionOfferPhase::getRecurrenceCount() const {
    return m_recurrence_count;
}
void OAISubscriptionOfferPhase::setRecurrenceCount(const qint32 &recurrence_count) {
    m_recurrence_count = recurrence_count;
    m_recurrence_count_isSet = true;
}

bool OAISubscriptionOfferPhase::is_recurrence_count_Set() const{
    return m_recurrence_count_isSet;
}

bool OAISubscriptionOfferPhase::is_recurrence_count_Valid() const{
    return m_recurrence_count_isValid;
}

QList<OAIRegionalSubscriptionOfferPhaseConfig> OAISubscriptionOfferPhase::getRegionalConfigs() const {
    return m_regional_configs;
}
void OAISubscriptionOfferPhase::setRegionalConfigs(const QList<OAIRegionalSubscriptionOfferPhaseConfig> &regional_configs) {
    m_regional_configs = regional_configs;
    m_regional_configs_isSet = true;
}

bool OAISubscriptionOfferPhase::is_regional_configs_Set() const{
    return m_regional_configs_isSet;
}

bool OAISubscriptionOfferPhase::is_regional_configs_Valid() const{
    return m_regional_configs_isValid;
}

bool OAISubscriptionOfferPhase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_regions_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionOfferPhase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
