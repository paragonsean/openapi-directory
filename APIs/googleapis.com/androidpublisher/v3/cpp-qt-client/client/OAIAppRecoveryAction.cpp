/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppRecoveryAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppRecoveryAction::OAIAppRecoveryAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppRecoveryAction::OAIAppRecoveryAction() {
    this->initializeModel();
}

OAIAppRecoveryAction::~OAIAppRecoveryAction() {}

void OAIAppRecoveryAction::initializeModel() {

    m_app_recovery_id_isSet = false;
    m_app_recovery_id_isValid = false;

    m_cancel_time_isSet = false;
    m_cancel_time_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_deploy_time_isSet = false;
    m_deploy_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;

    m_remote_in_app_update_data_isSet = false;
    m_remote_in_app_update_data_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_targeting_isSet = false;
    m_targeting_isValid = false;
}

void OAIAppRecoveryAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppRecoveryAction::fromJsonObject(QJsonObject json) {

    m_app_recovery_id_isValid = ::OpenAPI::fromJsonValue(m_app_recovery_id, json[QString("appRecoveryId")]);
    m_app_recovery_id_isSet = !json[QString("appRecoveryId")].isNull() && m_app_recovery_id_isValid;

    m_cancel_time_isValid = ::OpenAPI::fromJsonValue(m_cancel_time, json[QString("cancelTime")]);
    m_cancel_time_isSet = !json[QString("cancelTime")].isNull() && m_cancel_time_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_deploy_time_isValid = ::OpenAPI::fromJsonValue(m_deploy_time, json[QString("deployTime")]);
    m_deploy_time_isSet = !json[QString("deployTime")].isNull() && m_deploy_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;

    m_remote_in_app_update_data_isValid = ::OpenAPI::fromJsonValue(m_remote_in_app_update_data, json[QString("remoteInAppUpdateData")]);
    m_remote_in_app_update_data_isSet = !json[QString("remoteInAppUpdateData")].isNull() && m_remote_in_app_update_data_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_targeting_isValid = ::OpenAPI::fromJsonValue(m_targeting, json[QString("targeting")]);
    m_targeting_isSet = !json[QString("targeting")].isNull() && m_targeting_isValid;
}

QString OAIAppRecoveryAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppRecoveryAction::asJsonObject() const {
    QJsonObject obj;
    if (m_app_recovery_id_isSet) {
        obj.insert(QString("appRecoveryId"), ::OpenAPI::toJsonValue(m_app_recovery_id));
    }
    if (m_cancel_time_isSet) {
        obj.insert(QString("cancelTime"), ::OpenAPI::toJsonValue(m_cancel_time));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_deploy_time_isSet) {
        obj.insert(QString("deployTime"), ::OpenAPI::toJsonValue(m_deploy_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    if (m_remote_in_app_update_data.isSet()) {
        obj.insert(QString("remoteInAppUpdateData"), ::OpenAPI::toJsonValue(m_remote_in_app_update_data));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_targeting.isSet()) {
        obj.insert(QString("targeting"), ::OpenAPI::toJsonValue(m_targeting));
    }
    return obj;
}

QString OAIAppRecoveryAction::getAppRecoveryId() const {
    return m_app_recovery_id;
}
void OAIAppRecoveryAction::setAppRecoveryId(const QString &app_recovery_id) {
    m_app_recovery_id = app_recovery_id;
    m_app_recovery_id_isSet = true;
}

bool OAIAppRecoveryAction::is_app_recovery_id_Set() const{
    return m_app_recovery_id_isSet;
}

bool OAIAppRecoveryAction::is_app_recovery_id_Valid() const{
    return m_app_recovery_id_isValid;
}

QString OAIAppRecoveryAction::getCancelTime() const {
    return m_cancel_time;
}
void OAIAppRecoveryAction::setCancelTime(const QString &cancel_time) {
    m_cancel_time = cancel_time;
    m_cancel_time_isSet = true;
}

bool OAIAppRecoveryAction::is_cancel_time_Set() const{
    return m_cancel_time_isSet;
}

bool OAIAppRecoveryAction::is_cancel_time_Valid() const{
    return m_cancel_time_isValid;
}

QString OAIAppRecoveryAction::getCreateTime() const {
    return m_create_time;
}
void OAIAppRecoveryAction::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIAppRecoveryAction::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIAppRecoveryAction::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIAppRecoveryAction::getDeployTime() const {
    return m_deploy_time;
}
void OAIAppRecoveryAction::setDeployTime(const QString &deploy_time) {
    m_deploy_time = deploy_time;
    m_deploy_time_isSet = true;
}

bool OAIAppRecoveryAction::is_deploy_time_Set() const{
    return m_deploy_time_isSet;
}

bool OAIAppRecoveryAction::is_deploy_time_Valid() const{
    return m_deploy_time_isValid;
}

QString OAIAppRecoveryAction::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIAppRecoveryAction::setLastUpdateTime(const QString &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIAppRecoveryAction::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIAppRecoveryAction::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

OAIRemoteInAppUpdateData OAIAppRecoveryAction::getRemoteInAppUpdateData() const {
    return m_remote_in_app_update_data;
}
void OAIAppRecoveryAction::setRemoteInAppUpdateData(const OAIRemoteInAppUpdateData &remote_in_app_update_data) {
    m_remote_in_app_update_data = remote_in_app_update_data;
    m_remote_in_app_update_data_isSet = true;
}

bool OAIAppRecoveryAction::is_remote_in_app_update_data_Set() const{
    return m_remote_in_app_update_data_isSet;
}

bool OAIAppRecoveryAction::is_remote_in_app_update_data_Valid() const{
    return m_remote_in_app_update_data_isValid;
}

QString OAIAppRecoveryAction::getStatus() const {
    return m_status;
}
void OAIAppRecoveryAction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppRecoveryAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppRecoveryAction::is_status_Valid() const{
    return m_status_isValid;
}

OAITargeting OAIAppRecoveryAction::getTargeting() const {
    return m_targeting;
}
void OAIAppRecoveryAction::setTargeting(const OAITargeting &targeting) {
    m_targeting = targeting;
    m_targeting_isSet = true;
}

bool OAIAppRecoveryAction::is_targeting_Set() const{
    return m_targeting_isSet;
}

bool OAIAppRecoveryAction::is_targeting_Valid() const{
    return m_targeting_isValid;
}

bool OAIAppRecoveryAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_recovery_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_in_app_update_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppRecoveryAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
