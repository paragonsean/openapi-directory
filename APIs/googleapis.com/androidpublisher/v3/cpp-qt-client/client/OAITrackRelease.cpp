/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackRelease::OAITrackRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackRelease::OAITrackRelease() {
    this->initializeModel();
}

OAITrackRelease::~OAITrackRelease() {}

void OAITrackRelease::initializeModel() {

    m_country_targeting_isSet = false;
    m_country_targeting_isValid = false;

    m_in_app_update_priority_isSet = false;
    m_in_app_update_priority_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_release_notes_isSet = false;
    m_release_notes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_fraction_isSet = false;
    m_user_fraction_isValid = false;

    m_version_codes_isSet = false;
    m_version_codes_isValid = false;
}

void OAITrackRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackRelease::fromJsonObject(QJsonObject json) {

    m_country_targeting_isValid = ::OpenAPI::fromJsonValue(m_country_targeting, json[QString("countryTargeting")]);
    m_country_targeting_isSet = !json[QString("countryTargeting")].isNull() && m_country_targeting_isValid;

    m_in_app_update_priority_isValid = ::OpenAPI::fromJsonValue(m_in_app_update_priority, json[QString("inAppUpdatePriority")]);
    m_in_app_update_priority_isSet = !json[QString("inAppUpdatePriority")].isNull() && m_in_app_update_priority_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_release_notes_isValid = ::OpenAPI::fromJsonValue(m_release_notes, json[QString("releaseNotes")]);
    m_release_notes_isSet = !json[QString("releaseNotes")].isNull() && m_release_notes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_fraction_isValid = ::OpenAPI::fromJsonValue(m_user_fraction, json[QString("userFraction")]);
    m_user_fraction_isSet = !json[QString("userFraction")].isNull() && m_user_fraction_isValid;

    m_version_codes_isValid = ::OpenAPI::fromJsonValue(m_version_codes, json[QString("versionCodes")]);
    m_version_codes_isSet = !json[QString("versionCodes")].isNull() && m_version_codes_isValid;
}

QString OAITrackRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_country_targeting.isSet()) {
        obj.insert(QString("countryTargeting"), ::OpenAPI::toJsonValue(m_country_targeting));
    }
    if (m_in_app_update_priority_isSet) {
        obj.insert(QString("inAppUpdatePriority"), ::OpenAPI::toJsonValue(m_in_app_update_priority));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_release_notes.size() > 0) {
        obj.insert(QString("releaseNotes"), ::OpenAPI::toJsonValue(m_release_notes));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_fraction_isSet) {
        obj.insert(QString("userFraction"), ::OpenAPI::toJsonValue(m_user_fraction));
    }
    if (m_version_codes.size() > 0) {
        obj.insert(QString("versionCodes"), ::OpenAPI::toJsonValue(m_version_codes));
    }
    return obj;
}

OAICountryTargeting OAITrackRelease::getCountryTargeting() const {
    return m_country_targeting;
}
void OAITrackRelease::setCountryTargeting(const OAICountryTargeting &country_targeting) {
    m_country_targeting = country_targeting;
    m_country_targeting_isSet = true;
}

bool OAITrackRelease::is_country_targeting_Set() const{
    return m_country_targeting_isSet;
}

bool OAITrackRelease::is_country_targeting_Valid() const{
    return m_country_targeting_isValid;
}

qint32 OAITrackRelease::getInAppUpdatePriority() const {
    return m_in_app_update_priority;
}
void OAITrackRelease::setInAppUpdatePriority(const qint32 &in_app_update_priority) {
    m_in_app_update_priority = in_app_update_priority;
    m_in_app_update_priority_isSet = true;
}

bool OAITrackRelease::is_in_app_update_priority_Set() const{
    return m_in_app_update_priority_isSet;
}

bool OAITrackRelease::is_in_app_update_priority_Valid() const{
    return m_in_app_update_priority_isValid;
}

QString OAITrackRelease::getName() const {
    return m_name;
}
void OAITrackRelease::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrackRelease::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrackRelease::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAILocalizedText> OAITrackRelease::getReleaseNotes() const {
    return m_release_notes;
}
void OAITrackRelease::setReleaseNotes(const QList<OAILocalizedText> &release_notes) {
    m_release_notes = release_notes;
    m_release_notes_isSet = true;
}

bool OAITrackRelease::is_release_notes_Set() const{
    return m_release_notes_isSet;
}

bool OAITrackRelease::is_release_notes_Valid() const{
    return m_release_notes_isValid;
}

QString OAITrackRelease::getStatus() const {
    return m_status;
}
void OAITrackRelease::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrackRelease::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrackRelease::is_status_Valid() const{
    return m_status_isValid;
}

double OAITrackRelease::getUserFraction() const {
    return m_user_fraction;
}
void OAITrackRelease::setUserFraction(const double &user_fraction) {
    m_user_fraction = user_fraction;
    m_user_fraction_isSet = true;
}

bool OAITrackRelease::is_user_fraction_Set() const{
    return m_user_fraction_isSet;
}

bool OAITrackRelease::is_user_fraction_Valid() const{
    return m_user_fraction_isValid;
}

QList<QString> OAITrackRelease::getVersionCodes() const {
    return m_version_codes;
}
void OAITrackRelease::setVersionCodes(const QList<QString> &version_codes) {
    m_version_codes = version_codes;
    m_version_codes_isSet = true;
}

bool OAITrackRelease::is_version_codes_Set() const{
    return m_version_codes_isSet;
}

bool OAITrackRelease::is_version_codes_Valid() const{
    return m_version_codes_isValid;
}

bool OAITrackRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_app_update_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_notes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
