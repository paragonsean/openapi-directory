/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleTargeting::OAIModuleTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleTargeting::OAIModuleTargeting() {
    this->initializeModel();
}

OAIModuleTargeting::~OAIModuleTargeting() {}

void OAIModuleTargeting::initializeModel() {

    m_device_feature_targeting_isSet = false;
    m_device_feature_targeting_isValid = false;

    m_sdk_version_targeting_isSet = false;
    m_sdk_version_targeting_isValid = false;

    m_user_countries_targeting_isSet = false;
    m_user_countries_targeting_isValid = false;
}

void OAIModuleTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleTargeting::fromJsonObject(QJsonObject json) {

    m_device_feature_targeting_isValid = ::OpenAPI::fromJsonValue(m_device_feature_targeting, json[QString("deviceFeatureTargeting")]);
    m_device_feature_targeting_isSet = !json[QString("deviceFeatureTargeting")].isNull() && m_device_feature_targeting_isValid;

    m_sdk_version_targeting_isValid = ::OpenAPI::fromJsonValue(m_sdk_version_targeting, json[QString("sdkVersionTargeting")]);
    m_sdk_version_targeting_isSet = !json[QString("sdkVersionTargeting")].isNull() && m_sdk_version_targeting_isValid;

    m_user_countries_targeting_isValid = ::OpenAPI::fromJsonValue(m_user_countries_targeting, json[QString("userCountriesTargeting")]);
    m_user_countries_targeting_isSet = !json[QString("userCountriesTargeting")].isNull() && m_user_countries_targeting_isValid;
}

QString OAIModuleTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_device_feature_targeting.size() > 0) {
        obj.insert(QString("deviceFeatureTargeting"), ::OpenAPI::toJsonValue(m_device_feature_targeting));
    }
    if (m_sdk_version_targeting.isSet()) {
        obj.insert(QString("sdkVersionTargeting"), ::OpenAPI::toJsonValue(m_sdk_version_targeting));
    }
    if (m_user_countries_targeting.isSet()) {
        obj.insert(QString("userCountriesTargeting"), ::OpenAPI::toJsonValue(m_user_countries_targeting));
    }
    return obj;
}

QList<OAIDeviceFeatureTargeting> OAIModuleTargeting::getDeviceFeatureTargeting() const {
    return m_device_feature_targeting;
}
void OAIModuleTargeting::setDeviceFeatureTargeting(const QList<OAIDeviceFeatureTargeting> &device_feature_targeting) {
    m_device_feature_targeting = device_feature_targeting;
    m_device_feature_targeting_isSet = true;
}

bool OAIModuleTargeting::is_device_feature_targeting_Set() const{
    return m_device_feature_targeting_isSet;
}

bool OAIModuleTargeting::is_device_feature_targeting_Valid() const{
    return m_device_feature_targeting_isValid;
}

OAISdkVersionTargeting OAIModuleTargeting::getSdkVersionTargeting() const {
    return m_sdk_version_targeting;
}
void OAIModuleTargeting::setSdkVersionTargeting(const OAISdkVersionTargeting &sdk_version_targeting) {
    m_sdk_version_targeting = sdk_version_targeting;
    m_sdk_version_targeting_isSet = true;
}

bool OAIModuleTargeting::is_sdk_version_targeting_Set() const{
    return m_sdk_version_targeting_isSet;
}

bool OAIModuleTargeting::is_sdk_version_targeting_Valid() const{
    return m_sdk_version_targeting_isValid;
}

OAIUserCountriesTargeting OAIModuleTargeting::getUserCountriesTargeting() const {
    return m_user_countries_targeting;
}
void OAIModuleTargeting::setUserCountriesTargeting(const OAIUserCountriesTargeting &user_countries_targeting) {
    m_user_countries_targeting = user_countries_targeting;
    m_user_countries_targeting_isSet = true;
}

bool OAIModuleTargeting::is_user_countries_targeting_Set() const{
    return m_user_countries_targeting_isSet;
}

bool OAIModuleTargeting::is_user_countries_targeting_Valid() const{
    return m_user_countries_targeting_isValid;
}

bool OAIModuleTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_feature_targeting.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_countries_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
