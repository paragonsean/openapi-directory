/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceId::OAIDeviceId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceId::OAIDeviceId() {
    this->initializeModel();
}

OAIDeviceId::~OAIDeviceId() {}

void OAIDeviceId::initializeModel() {

    m_build_brand_isSet = false;
    m_build_brand_isValid = false;

    m_build_device_isSet = false;
    m_build_device_isValid = false;
}

void OAIDeviceId::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceId::fromJsonObject(QJsonObject json) {

    m_build_brand_isValid = ::OpenAPI::fromJsonValue(m_build_brand, json[QString("buildBrand")]);
    m_build_brand_isSet = !json[QString("buildBrand")].isNull() && m_build_brand_isValid;

    m_build_device_isValid = ::OpenAPI::fromJsonValue(m_build_device, json[QString("buildDevice")]);
    m_build_device_isSet = !json[QString("buildDevice")].isNull() && m_build_device_isValid;
}

QString OAIDeviceId::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceId::asJsonObject() const {
    QJsonObject obj;
    if (m_build_brand_isSet) {
        obj.insert(QString("buildBrand"), ::OpenAPI::toJsonValue(m_build_brand));
    }
    if (m_build_device_isSet) {
        obj.insert(QString("buildDevice"), ::OpenAPI::toJsonValue(m_build_device));
    }
    return obj;
}

QString OAIDeviceId::getBuildBrand() const {
    return m_build_brand;
}
void OAIDeviceId::setBuildBrand(const QString &build_brand) {
    m_build_brand = build_brand;
    m_build_brand_isSet = true;
}

bool OAIDeviceId::is_build_brand_Set() const{
    return m_build_brand_isSet;
}

bool OAIDeviceId::is_build_brand_Valid() const{
    return m_build_brand_isValid;
}

QString OAIDeviceId::getBuildDevice() const {
    return m_build_device;
}
void OAIDeviceId::setBuildDevice(const QString &build_device) {
    m_build_device = build_device;
    m_build_device_isSet = true;
}

bool OAIDeviceId::is_build_device_Set() const{
    return m_build_device_isSet;
}

bool OAIDeviceId::is_build_device_Valid() const{
    return m_build_device_isValid;
}

bool OAIDeviceId::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_device_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceId::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
