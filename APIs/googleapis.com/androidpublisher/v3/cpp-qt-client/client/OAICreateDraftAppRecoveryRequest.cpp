/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDraftAppRecoveryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDraftAppRecoveryRequest::OAICreateDraftAppRecoveryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDraftAppRecoveryRequest::OAICreateDraftAppRecoveryRequest() {
    this->initializeModel();
}

OAICreateDraftAppRecoveryRequest::~OAICreateDraftAppRecoveryRequest() {}

void OAICreateDraftAppRecoveryRequest::initializeModel() {

    m_remote_in_app_update_isSet = false;
    m_remote_in_app_update_isValid = false;

    m_targeting_isSet = false;
    m_targeting_isValid = false;
}

void OAICreateDraftAppRecoveryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDraftAppRecoveryRequest::fromJsonObject(QJsonObject json) {

    m_remote_in_app_update_isValid = ::OpenAPI::fromJsonValue(m_remote_in_app_update, json[QString("remoteInAppUpdate")]);
    m_remote_in_app_update_isSet = !json[QString("remoteInAppUpdate")].isNull() && m_remote_in_app_update_isValid;

    m_targeting_isValid = ::OpenAPI::fromJsonValue(m_targeting, json[QString("targeting")]);
    m_targeting_isSet = !json[QString("targeting")].isNull() && m_targeting_isValid;
}

QString OAICreateDraftAppRecoveryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDraftAppRecoveryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_remote_in_app_update.isSet()) {
        obj.insert(QString("remoteInAppUpdate"), ::OpenAPI::toJsonValue(m_remote_in_app_update));
    }
    if (m_targeting.isSet()) {
        obj.insert(QString("targeting"), ::OpenAPI::toJsonValue(m_targeting));
    }
    return obj;
}

OAIRemoteInAppUpdate OAICreateDraftAppRecoveryRequest::getRemoteInAppUpdate() const {
    return m_remote_in_app_update;
}
void OAICreateDraftAppRecoveryRequest::setRemoteInAppUpdate(const OAIRemoteInAppUpdate &remote_in_app_update) {
    m_remote_in_app_update = remote_in_app_update;
    m_remote_in_app_update_isSet = true;
}

bool OAICreateDraftAppRecoveryRequest::is_remote_in_app_update_Set() const{
    return m_remote_in_app_update_isSet;
}

bool OAICreateDraftAppRecoveryRequest::is_remote_in_app_update_Valid() const{
    return m_remote_in_app_update_isValid;
}

OAITargeting OAICreateDraftAppRecoveryRequest::getTargeting() const {
    return m_targeting;
}
void OAICreateDraftAppRecoveryRequest::setTargeting(const OAITargeting &targeting) {
    m_targeting = targeting;
    m_targeting_isSet = true;
}

bool OAICreateDraftAppRecoveryRequest::is_targeting_Set() const{
    return m_targeting_isSet;
}

bool OAICreateDraftAppRecoveryRequest::is_targeting_Valid() const{
    return m_targeting_isValid;
}

bool OAICreateDraftAppRecoveryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_remote_in_app_update.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDraftAppRecoveryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
