/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoRenewingBasePlanType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoRenewingBasePlanType::OAIAutoRenewingBasePlanType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoRenewingBasePlanType::OAIAutoRenewingBasePlanType() {
    this->initializeModel();
}

OAIAutoRenewingBasePlanType::~OAIAutoRenewingBasePlanType() {}

void OAIAutoRenewingBasePlanType::initializeModel() {

    m_account_hold_duration_isSet = false;
    m_account_hold_duration_isValid = false;

    m_billing_period_duration_isSet = false;
    m_billing_period_duration_isValid = false;

    m_grace_period_duration_isSet = false;
    m_grace_period_duration_isValid = false;

    m_legacy_compatible_isSet = false;
    m_legacy_compatible_isValid = false;

    m_legacy_compatible_subscription_offer_id_isSet = false;
    m_legacy_compatible_subscription_offer_id_isValid = false;

    m_proration_mode_isSet = false;
    m_proration_mode_isValid = false;

    m_resubscribe_state_isSet = false;
    m_resubscribe_state_isValid = false;
}

void OAIAutoRenewingBasePlanType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoRenewingBasePlanType::fromJsonObject(QJsonObject json) {

    m_account_hold_duration_isValid = ::OpenAPI::fromJsonValue(m_account_hold_duration, json[QString("accountHoldDuration")]);
    m_account_hold_duration_isSet = !json[QString("accountHoldDuration")].isNull() && m_account_hold_duration_isValid;

    m_billing_period_duration_isValid = ::OpenAPI::fromJsonValue(m_billing_period_duration, json[QString("billingPeriodDuration")]);
    m_billing_period_duration_isSet = !json[QString("billingPeriodDuration")].isNull() && m_billing_period_duration_isValid;

    m_grace_period_duration_isValid = ::OpenAPI::fromJsonValue(m_grace_period_duration, json[QString("gracePeriodDuration")]);
    m_grace_period_duration_isSet = !json[QString("gracePeriodDuration")].isNull() && m_grace_period_duration_isValid;

    m_legacy_compatible_isValid = ::OpenAPI::fromJsonValue(m_legacy_compatible, json[QString("legacyCompatible")]);
    m_legacy_compatible_isSet = !json[QString("legacyCompatible")].isNull() && m_legacy_compatible_isValid;

    m_legacy_compatible_subscription_offer_id_isValid = ::OpenAPI::fromJsonValue(m_legacy_compatible_subscription_offer_id, json[QString("legacyCompatibleSubscriptionOfferId")]);
    m_legacy_compatible_subscription_offer_id_isSet = !json[QString("legacyCompatibleSubscriptionOfferId")].isNull() && m_legacy_compatible_subscription_offer_id_isValid;

    m_proration_mode_isValid = ::OpenAPI::fromJsonValue(m_proration_mode, json[QString("prorationMode")]);
    m_proration_mode_isSet = !json[QString("prorationMode")].isNull() && m_proration_mode_isValid;

    m_resubscribe_state_isValid = ::OpenAPI::fromJsonValue(m_resubscribe_state, json[QString("resubscribeState")]);
    m_resubscribe_state_isSet = !json[QString("resubscribeState")].isNull() && m_resubscribe_state_isValid;
}

QString OAIAutoRenewingBasePlanType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoRenewingBasePlanType::asJsonObject() const {
    QJsonObject obj;
    if (m_account_hold_duration_isSet) {
        obj.insert(QString("accountHoldDuration"), ::OpenAPI::toJsonValue(m_account_hold_duration));
    }
    if (m_billing_period_duration_isSet) {
        obj.insert(QString("billingPeriodDuration"), ::OpenAPI::toJsonValue(m_billing_period_duration));
    }
    if (m_grace_period_duration_isSet) {
        obj.insert(QString("gracePeriodDuration"), ::OpenAPI::toJsonValue(m_grace_period_duration));
    }
    if (m_legacy_compatible_isSet) {
        obj.insert(QString("legacyCompatible"), ::OpenAPI::toJsonValue(m_legacy_compatible));
    }
    if (m_legacy_compatible_subscription_offer_id_isSet) {
        obj.insert(QString("legacyCompatibleSubscriptionOfferId"), ::OpenAPI::toJsonValue(m_legacy_compatible_subscription_offer_id));
    }
    if (m_proration_mode_isSet) {
        obj.insert(QString("prorationMode"), ::OpenAPI::toJsonValue(m_proration_mode));
    }
    if (m_resubscribe_state_isSet) {
        obj.insert(QString("resubscribeState"), ::OpenAPI::toJsonValue(m_resubscribe_state));
    }
    return obj;
}

QString OAIAutoRenewingBasePlanType::getAccountHoldDuration() const {
    return m_account_hold_duration;
}
void OAIAutoRenewingBasePlanType::setAccountHoldDuration(const QString &account_hold_duration) {
    m_account_hold_duration = account_hold_duration;
    m_account_hold_duration_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_account_hold_duration_Set() const{
    return m_account_hold_duration_isSet;
}

bool OAIAutoRenewingBasePlanType::is_account_hold_duration_Valid() const{
    return m_account_hold_duration_isValid;
}

QString OAIAutoRenewingBasePlanType::getBillingPeriodDuration() const {
    return m_billing_period_duration;
}
void OAIAutoRenewingBasePlanType::setBillingPeriodDuration(const QString &billing_period_duration) {
    m_billing_period_duration = billing_period_duration;
    m_billing_period_duration_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_billing_period_duration_Set() const{
    return m_billing_period_duration_isSet;
}

bool OAIAutoRenewingBasePlanType::is_billing_period_duration_Valid() const{
    return m_billing_period_duration_isValid;
}

QString OAIAutoRenewingBasePlanType::getGracePeriodDuration() const {
    return m_grace_period_duration;
}
void OAIAutoRenewingBasePlanType::setGracePeriodDuration(const QString &grace_period_duration) {
    m_grace_period_duration = grace_period_duration;
    m_grace_period_duration_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_grace_period_duration_Set() const{
    return m_grace_period_duration_isSet;
}

bool OAIAutoRenewingBasePlanType::is_grace_period_duration_Valid() const{
    return m_grace_period_duration_isValid;
}

bool OAIAutoRenewingBasePlanType::isLegacyCompatible() const {
    return m_legacy_compatible;
}
void OAIAutoRenewingBasePlanType::setLegacyCompatible(const bool &legacy_compatible) {
    m_legacy_compatible = legacy_compatible;
    m_legacy_compatible_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_legacy_compatible_Set() const{
    return m_legacy_compatible_isSet;
}

bool OAIAutoRenewingBasePlanType::is_legacy_compatible_Valid() const{
    return m_legacy_compatible_isValid;
}

QString OAIAutoRenewingBasePlanType::getLegacyCompatibleSubscriptionOfferId() const {
    return m_legacy_compatible_subscription_offer_id;
}
void OAIAutoRenewingBasePlanType::setLegacyCompatibleSubscriptionOfferId(const QString &legacy_compatible_subscription_offer_id) {
    m_legacy_compatible_subscription_offer_id = legacy_compatible_subscription_offer_id;
    m_legacy_compatible_subscription_offer_id_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_legacy_compatible_subscription_offer_id_Set() const{
    return m_legacy_compatible_subscription_offer_id_isSet;
}

bool OAIAutoRenewingBasePlanType::is_legacy_compatible_subscription_offer_id_Valid() const{
    return m_legacy_compatible_subscription_offer_id_isValid;
}

QString OAIAutoRenewingBasePlanType::getProrationMode() const {
    return m_proration_mode;
}
void OAIAutoRenewingBasePlanType::setProrationMode(const QString &proration_mode) {
    m_proration_mode = proration_mode;
    m_proration_mode_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_proration_mode_Set() const{
    return m_proration_mode_isSet;
}

bool OAIAutoRenewingBasePlanType::is_proration_mode_Valid() const{
    return m_proration_mode_isValid;
}

QString OAIAutoRenewingBasePlanType::getResubscribeState() const {
    return m_resubscribe_state;
}
void OAIAutoRenewingBasePlanType::setResubscribeState(const QString &resubscribe_state) {
    m_resubscribe_state = resubscribe_state;
    m_resubscribe_state_isSet = true;
}

bool OAIAutoRenewingBasePlanType::is_resubscribe_state_Set() const{
    return m_resubscribe_state_isSet;
}

bool OAIAutoRenewingBasePlanType::is_resubscribe_state_Valid() const{
    return m_resubscribe_state_isValid;
}

bool OAIAutoRenewingBasePlanType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_hold_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legacy_compatible_subscription_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proration_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resubscribe_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoRenewingBasePlanType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
