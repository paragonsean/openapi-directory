/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingInfo::OAITargetingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingInfo::OAITargetingInfo() {
    this->initializeModel();
}

OAITargetingInfo::~OAITargetingInfo() {}

void OAITargetingInfo::initializeModel() {

    m_asset_slice_set_isSet = false;
    m_asset_slice_set_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAITargetingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingInfo::fromJsonObject(QJsonObject json) {

    m_asset_slice_set_isValid = ::OpenAPI::fromJsonValue(m_asset_slice_set, json[QString("assetSliceSet")]);
    m_asset_slice_set_isSet = !json[QString("assetSliceSet")].isNull() && m_asset_slice_set_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAITargetingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_slice_set.size() > 0) {
        obj.insert(QString("assetSliceSet"), ::OpenAPI::toJsonValue(m_asset_slice_set));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_variant.size() > 0) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QList<OAIAssetSliceSet> OAITargetingInfo::getAssetSliceSet() const {
    return m_asset_slice_set;
}
void OAITargetingInfo::setAssetSliceSet(const QList<OAIAssetSliceSet> &asset_slice_set) {
    m_asset_slice_set = asset_slice_set;
    m_asset_slice_set_isSet = true;
}

bool OAITargetingInfo::is_asset_slice_set_Set() const{
    return m_asset_slice_set_isSet;
}

bool OAITargetingInfo::is_asset_slice_set_Valid() const{
    return m_asset_slice_set_isValid;
}

QString OAITargetingInfo::getPackageName() const {
    return m_package_name;
}
void OAITargetingInfo::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAITargetingInfo::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAITargetingInfo::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QList<OAISplitApkVariant> OAITargetingInfo::getVariant() const {
    return m_variant;
}
void OAITargetingInfo::setVariant(const QList<OAISplitApkVariant> &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAITargetingInfo::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAITargetingInfo::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAITargetingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_slice_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
