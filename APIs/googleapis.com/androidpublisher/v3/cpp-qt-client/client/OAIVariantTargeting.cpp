/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariantTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariantTargeting::OAIVariantTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariantTargeting::OAIVariantTargeting() {
    this->initializeModel();
}

OAIVariantTargeting::~OAIVariantTargeting() {}

void OAIVariantTargeting::initializeModel() {

    m_abi_targeting_isSet = false;
    m_abi_targeting_isValid = false;

    m_multi_abi_targeting_isSet = false;
    m_multi_abi_targeting_isValid = false;

    m_screen_density_targeting_isSet = false;
    m_screen_density_targeting_isValid = false;

    m_sdk_version_targeting_isSet = false;
    m_sdk_version_targeting_isValid = false;

    m_texture_compression_format_targeting_isSet = false;
    m_texture_compression_format_targeting_isValid = false;
}

void OAIVariantTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariantTargeting::fromJsonObject(QJsonObject json) {

    m_abi_targeting_isValid = ::OpenAPI::fromJsonValue(m_abi_targeting, json[QString("abiTargeting")]);
    m_abi_targeting_isSet = !json[QString("abiTargeting")].isNull() && m_abi_targeting_isValid;

    m_multi_abi_targeting_isValid = ::OpenAPI::fromJsonValue(m_multi_abi_targeting, json[QString("multiAbiTargeting")]);
    m_multi_abi_targeting_isSet = !json[QString("multiAbiTargeting")].isNull() && m_multi_abi_targeting_isValid;

    m_screen_density_targeting_isValid = ::OpenAPI::fromJsonValue(m_screen_density_targeting, json[QString("screenDensityTargeting")]);
    m_screen_density_targeting_isSet = !json[QString("screenDensityTargeting")].isNull() && m_screen_density_targeting_isValid;

    m_sdk_version_targeting_isValid = ::OpenAPI::fromJsonValue(m_sdk_version_targeting, json[QString("sdkVersionTargeting")]);
    m_sdk_version_targeting_isSet = !json[QString("sdkVersionTargeting")].isNull() && m_sdk_version_targeting_isValid;

    m_texture_compression_format_targeting_isValid = ::OpenAPI::fromJsonValue(m_texture_compression_format_targeting, json[QString("textureCompressionFormatTargeting")]);
    m_texture_compression_format_targeting_isSet = !json[QString("textureCompressionFormatTargeting")].isNull() && m_texture_compression_format_targeting_isValid;
}

QString OAIVariantTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariantTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_abi_targeting.isSet()) {
        obj.insert(QString("abiTargeting"), ::OpenAPI::toJsonValue(m_abi_targeting));
    }
    if (m_multi_abi_targeting.isSet()) {
        obj.insert(QString("multiAbiTargeting"), ::OpenAPI::toJsonValue(m_multi_abi_targeting));
    }
    if (m_screen_density_targeting.isSet()) {
        obj.insert(QString("screenDensityTargeting"), ::OpenAPI::toJsonValue(m_screen_density_targeting));
    }
    if (m_sdk_version_targeting.isSet()) {
        obj.insert(QString("sdkVersionTargeting"), ::OpenAPI::toJsonValue(m_sdk_version_targeting));
    }
    if (m_texture_compression_format_targeting.isSet()) {
        obj.insert(QString("textureCompressionFormatTargeting"), ::OpenAPI::toJsonValue(m_texture_compression_format_targeting));
    }
    return obj;
}

OAIAbiTargeting OAIVariantTargeting::getAbiTargeting() const {
    return m_abi_targeting;
}
void OAIVariantTargeting::setAbiTargeting(const OAIAbiTargeting &abi_targeting) {
    m_abi_targeting = abi_targeting;
    m_abi_targeting_isSet = true;
}

bool OAIVariantTargeting::is_abi_targeting_Set() const{
    return m_abi_targeting_isSet;
}

bool OAIVariantTargeting::is_abi_targeting_Valid() const{
    return m_abi_targeting_isValid;
}

OAIMultiAbiTargeting OAIVariantTargeting::getMultiAbiTargeting() const {
    return m_multi_abi_targeting;
}
void OAIVariantTargeting::setMultiAbiTargeting(const OAIMultiAbiTargeting &multi_abi_targeting) {
    m_multi_abi_targeting = multi_abi_targeting;
    m_multi_abi_targeting_isSet = true;
}

bool OAIVariantTargeting::is_multi_abi_targeting_Set() const{
    return m_multi_abi_targeting_isSet;
}

bool OAIVariantTargeting::is_multi_abi_targeting_Valid() const{
    return m_multi_abi_targeting_isValid;
}

OAIScreenDensityTargeting OAIVariantTargeting::getScreenDensityTargeting() const {
    return m_screen_density_targeting;
}
void OAIVariantTargeting::setScreenDensityTargeting(const OAIScreenDensityTargeting &screen_density_targeting) {
    m_screen_density_targeting = screen_density_targeting;
    m_screen_density_targeting_isSet = true;
}

bool OAIVariantTargeting::is_screen_density_targeting_Set() const{
    return m_screen_density_targeting_isSet;
}

bool OAIVariantTargeting::is_screen_density_targeting_Valid() const{
    return m_screen_density_targeting_isValid;
}

OAISdkVersionTargeting OAIVariantTargeting::getSdkVersionTargeting() const {
    return m_sdk_version_targeting;
}
void OAIVariantTargeting::setSdkVersionTargeting(const OAISdkVersionTargeting &sdk_version_targeting) {
    m_sdk_version_targeting = sdk_version_targeting;
    m_sdk_version_targeting_isSet = true;
}

bool OAIVariantTargeting::is_sdk_version_targeting_Set() const{
    return m_sdk_version_targeting_isSet;
}

bool OAIVariantTargeting::is_sdk_version_targeting_Valid() const{
    return m_sdk_version_targeting_isValid;
}

OAITextureCompressionFormatTargeting OAIVariantTargeting::getTextureCompressionFormatTargeting() const {
    return m_texture_compression_format_targeting;
}
void OAIVariantTargeting::setTextureCompressionFormatTargeting(const OAITextureCompressionFormatTargeting &texture_compression_format_targeting) {
    m_texture_compression_format_targeting = texture_compression_format_targeting;
    m_texture_compression_format_targeting_isSet = true;
}

bool OAIVariantTargeting::is_texture_compression_format_targeting_Set() const{
    return m_texture_compression_format_targeting_isSet;
}

bool OAIVariantTargeting::is_texture_compression_format_targeting_Valid() const{
    return m_texture_compression_format_targeting_isValid;
}

bool OAIVariantTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_abi_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_abi_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_density_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_texture_compression_format_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariantTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
