/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPurchasesAcknowledgeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPurchasesAcknowledgeRequest::OAISubscriptionPurchasesAcknowledgeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPurchasesAcknowledgeRequest::OAISubscriptionPurchasesAcknowledgeRequest() {
    this->initializeModel();
}

OAISubscriptionPurchasesAcknowledgeRequest::~OAISubscriptionPurchasesAcknowledgeRequest() {}

void OAISubscriptionPurchasesAcknowledgeRequest::initializeModel() {

    m_developer_payload_isSet = false;
    m_developer_payload_isValid = false;
}

void OAISubscriptionPurchasesAcknowledgeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPurchasesAcknowledgeRequest::fromJsonObject(QJsonObject json) {

    m_developer_payload_isValid = ::OpenAPI::fromJsonValue(m_developer_payload, json[QString("developerPayload")]);
    m_developer_payload_isSet = !json[QString("developerPayload")].isNull() && m_developer_payload_isValid;
}

QString OAISubscriptionPurchasesAcknowledgeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPurchasesAcknowledgeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_developer_payload_isSet) {
        obj.insert(QString("developerPayload"), ::OpenAPI::toJsonValue(m_developer_payload));
    }
    return obj;
}

QString OAISubscriptionPurchasesAcknowledgeRequest::getDeveloperPayload() const {
    return m_developer_payload;
}
void OAISubscriptionPurchasesAcknowledgeRequest::setDeveloperPayload(const QString &developer_payload) {
    m_developer_payload = developer_payload;
    m_developer_payload_isSet = true;
}

bool OAISubscriptionPurchasesAcknowledgeRequest::is_developer_payload_Set() const{
    return m_developer_payload_isSet;
}

bool OAISubscriptionPurchasesAcknowledgeRequest::is_developer_payload_Valid() const{
    return m_developer_payload_isValid;
}

bool OAISubscriptionPurchasesAcknowledgeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_developer_payload_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPurchasesAcknowledgeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
