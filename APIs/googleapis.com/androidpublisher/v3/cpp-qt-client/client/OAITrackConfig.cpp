/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackConfig::OAITrackConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackConfig::OAITrackConfig() {
    this->initializeModel();
}

OAITrackConfig::~OAITrackConfig() {}

void OAITrackConfig::initializeModel() {

    m_form_factor_isSet = false;
    m_form_factor_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITrackConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackConfig::fromJsonObject(QJsonObject json) {

    m_form_factor_isValid = ::OpenAPI::fromJsonValue(m_form_factor, json[QString("formFactor")]);
    m_form_factor_isSet = !json[QString("formFactor")].isNull() && m_form_factor_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("track")]);
    m_track_isSet = !json[QString("track")].isNull() && m_track_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITrackConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_form_factor_isSet) {
        obj.insert(QString("formFactor"), ::OpenAPI::toJsonValue(m_form_factor));
    }
    if (m_track_isSet) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(m_track));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITrackConfig::getFormFactor() const {
    return m_form_factor;
}
void OAITrackConfig::setFormFactor(const QString &form_factor) {
    m_form_factor = form_factor;
    m_form_factor_isSet = true;
}

bool OAITrackConfig::is_form_factor_Set() const{
    return m_form_factor_isSet;
}

bool OAITrackConfig::is_form_factor_Valid() const{
    return m_form_factor_isValid;
}

QString OAITrackConfig::getTrack() const {
    return m_track;
}
void OAITrackConfig::setTrack(const QString &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAITrackConfig::is_track_Set() const{
    return m_track_isSet;
}

bool OAITrackConfig::is_track_Valid() const{
    return m_track_isValid;
}

QString OAITrackConfig::getType() const {
    return m_type;
}
void OAITrackConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrackConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrackConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITrackConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
