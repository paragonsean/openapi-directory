/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreenDensity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreenDensity::OAIScreenDensity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreenDensity::OAIScreenDensity() {
    this->initializeModel();
}

OAIScreenDensity::~OAIScreenDensity() {}

void OAIScreenDensity::initializeModel() {

    m_density_alias_isSet = false;
    m_density_alias_isValid = false;

    m_density_dpi_isSet = false;
    m_density_dpi_isValid = false;
}

void OAIScreenDensity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreenDensity::fromJsonObject(QJsonObject json) {

    m_density_alias_isValid = ::OpenAPI::fromJsonValue(m_density_alias, json[QString("densityAlias")]);
    m_density_alias_isSet = !json[QString("densityAlias")].isNull() && m_density_alias_isValid;

    m_density_dpi_isValid = ::OpenAPI::fromJsonValue(m_density_dpi, json[QString("densityDpi")]);
    m_density_dpi_isSet = !json[QString("densityDpi")].isNull() && m_density_dpi_isValid;
}

QString OAIScreenDensity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreenDensity::asJsonObject() const {
    QJsonObject obj;
    if (m_density_alias_isSet) {
        obj.insert(QString("densityAlias"), ::OpenAPI::toJsonValue(m_density_alias));
    }
    if (m_density_dpi_isSet) {
        obj.insert(QString("densityDpi"), ::OpenAPI::toJsonValue(m_density_dpi));
    }
    return obj;
}

QString OAIScreenDensity::getDensityAlias() const {
    return m_density_alias;
}
void OAIScreenDensity::setDensityAlias(const QString &density_alias) {
    m_density_alias = density_alias;
    m_density_alias_isSet = true;
}

bool OAIScreenDensity::is_density_alias_Set() const{
    return m_density_alias_isSet;
}

bool OAIScreenDensity::is_density_alias_Valid() const{
    return m_density_alias_isValid;
}

qint32 OAIScreenDensity::getDensityDpi() const {
    return m_density_dpi;
}
void OAIScreenDensity::setDensityDpi(const qint32 &density_dpi) {
    m_density_dpi = density_dpi;
    m_density_dpi_isSet = true;
}

bool OAIScreenDensity::is_density_dpi_Set() const{
    return m_density_dpi_isSet;
}

bool OAIScreenDensity::is_density_dpi_Valid() const{
    return m_density_dpi_isValid;
}

bool OAIScreenDensity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_density_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_density_dpi_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreenDensity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
