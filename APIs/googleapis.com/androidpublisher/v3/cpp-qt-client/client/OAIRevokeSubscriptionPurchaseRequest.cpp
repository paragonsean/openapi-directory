/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokeSubscriptionPurchaseRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokeSubscriptionPurchaseRequest::OAIRevokeSubscriptionPurchaseRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokeSubscriptionPurchaseRequest::OAIRevokeSubscriptionPurchaseRequest() {
    this->initializeModel();
}

OAIRevokeSubscriptionPurchaseRequest::~OAIRevokeSubscriptionPurchaseRequest() {}

void OAIRevokeSubscriptionPurchaseRequest::initializeModel() {

    m_revocation_context_isSet = false;
    m_revocation_context_isValid = false;
}

void OAIRevokeSubscriptionPurchaseRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokeSubscriptionPurchaseRequest::fromJsonObject(QJsonObject json) {

    m_revocation_context_isValid = ::OpenAPI::fromJsonValue(m_revocation_context, json[QString("revocationContext")]);
    m_revocation_context_isSet = !json[QString("revocationContext")].isNull() && m_revocation_context_isValid;
}

QString OAIRevokeSubscriptionPurchaseRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokeSubscriptionPurchaseRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_revocation_context.isSet()) {
        obj.insert(QString("revocationContext"), ::OpenAPI::toJsonValue(m_revocation_context));
    }
    return obj;
}

OAIRevocationContext OAIRevokeSubscriptionPurchaseRequest::getRevocationContext() const {
    return m_revocation_context;
}
void OAIRevokeSubscriptionPurchaseRequest::setRevocationContext(const OAIRevocationContext &revocation_context) {
    m_revocation_context = revocation_context;
    m_revocation_context_isSet = true;
}

bool OAIRevokeSubscriptionPurchaseRequest::is_revocation_context_Set() const{
    return m_revocation_context_isSet;
}

bool OAIRevokeSubscriptionPurchaseRequest::is_revocation_context_Valid() const{
    return m_revocation_context_isValid;
}

bool OAIRevokeSubscriptionPurchaseRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_revocation_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokeSubscriptionPurchaseRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
