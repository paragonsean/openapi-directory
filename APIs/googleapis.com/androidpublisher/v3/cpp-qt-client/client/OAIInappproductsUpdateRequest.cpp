/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInappproductsUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInappproductsUpdateRequest::OAIInappproductsUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInappproductsUpdateRequest::OAIInappproductsUpdateRequest() {
    this->initializeModel();
}

OAIInappproductsUpdateRequest::~OAIInappproductsUpdateRequest() {}

void OAIInappproductsUpdateRequest::initializeModel() {

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_auto_convert_missing_prices_isSet = false;
    m_auto_convert_missing_prices_isValid = false;

    m_inappproduct_isSet = false;
    m_inappproduct_isValid = false;

    m_latency_tolerance_isSet = false;
    m_latency_tolerance_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIInappproductsUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInappproductsUpdateRequest::fromJsonObject(QJsonObject json) {

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_auto_convert_missing_prices_isValid = ::OpenAPI::fromJsonValue(m_auto_convert_missing_prices, json[QString("autoConvertMissingPrices")]);
    m_auto_convert_missing_prices_isSet = !json[QString("autoConvertMissingPrices")].isNull() && m_auto_convert_missing_prices_isValid;

    m_inappproduct_isValid = ::OpenAPI::fromJsonValue(m_inappproduct, json[QString("inappproduct")]);
    m_inappproduct_isSet = !json[QString("inappproduct")].isNull() && m_inappproduct_isValid;

    m_latency_tolerance_isValid = ::OpenAPI::fromJsonValue(m_latency_tolerance, json[QString("latencyTolerance")]);
    m_latency_tolerance_isSet = !json[QString("latencyTolerance")].isNull() && m_latency_tolerance_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIInappproductsUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInappproductsUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_auto_convert_missing_prices_isSet) {
        obj.insert(QString("autoConvertMissingPrices"), ::OpenAPI::toJsonValue(m_auto_convert_missing_prices));
    }
    if (m_inappproduct.isSet()) {
        obj.insert(QString("inappproduct"), ::OpenAPI::toJsonValue(m_inappproduct));
    }
    if (m_latency_tolerance_isSet) {
        obj.insert(QString("latencyTolerance"), ::OpenAPI::toJsonValue(m_latency_tolerance));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

bool OAIInappproductsUpdateRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIInappproductsUpdateRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIInappproductsUpdateRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

bool OAIInappproductsUpdateRequest::isAutoConvertMissingPrices() const {
    return m_auto_convert_missing_prices;
}
void OAIInappproductsUpdateRequest::setAutoConvertMissingPrices(const bool &auto_convert_missing_prices) {
    m_auto_convert_missing_prices = auto_convert_missing_prices;
    m_auto_convert_missing_prices_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_auto_convert_missing_prices_Set() const{
    return m_auto_convert_missing_prices_isSet;
}

bool OAIInappproductsUpdateRequest::is_auto_convert_missing_prices_Valid() const{
    return m_auto_convert_missing_prices_isValid;
}

OAIInAppProduct OAIInappproductsUpdateRequest::getInappproduct() const {
    return m_inappproduct;
}
void OAIInappproductsUpdateRequest::setInappproduct(const OAIInAppProduct &inappproduct) {
    m_inappproduct = inappproduct;
    m_inappproduct_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_inappproduct_Set() const{
    return m_inappproduct_isSet;
}

bool OAIInappproductsUpdateRequest::is_inappproduct_Valid() const{
    return m_inappproduct_isValid;
}

QString OAIInappproductsUpdateRequest::getLatencyTolerance() const {
    return m_latency_tolerance;
}
void OAIInappproductsUpdateRequest::setLatencyTolerance(const QString &latency_tolerance) {
    m_latency_tolerance = latency_tolerance;
    m_latency_tolerance_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_latency_tolerance_Set() const{
    return m_latency_tolerance_isSet;
}

bool OAIInappproductsUpdateRequest::is_latency_tolerance_Valid() const{
    return m_latency_tolerance_isValid;
}

QString OAIInappproductsUpdateRequest::getPackageName() const {
    return m_package_name;
}
void OAIInappproductsUpdateRequest::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIInappproductsUpdateRequest::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIInappproductsUpdateRequest::getSku() const {
    return m_sku;
}
void OAIInappproductsUpdateRequest::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIInappproductsUpdateRequest::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIInappproductsUpdateRequest::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIInappproductsUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_convert_missing_prices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inappproduct.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInappproductsUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
