/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteInAppUpdateDataPerBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteInAppUpdateDataPerBundle::OAIRemoteInAppUpdateDataPerBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteInAppUpdateDataPerBundle::OAIRemoteInAppUpdateDataPerBundle() {
    this->initializeModel();
}

OAIRemoteInAppUpdateDataPerBundle::~OAIRemoteInAppUpdateDataPerBundle() {}

void OAIRemoteInAppUpdateDataPerBundle::initializeModel() {

    m_recovered_device_count_isSet = false;
    m_recovered_device_count_isValid = false;

    m_total_device_count_isSet = false;
    m_total_device_count_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;
}

void OAIRemoteInAppUpdateDataPerBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteInAppUpdateDataPerBundle::fromJsonObject(QJsonObject json) {

    m_recovered_device_count_isValid = ::OpenAPI::fromJsonValue(m_recovered_device_count, json[QString("recoveredDeviceCount")]);
    m_recovered_device_count_isSet = !json[QString("recoveredDeviceCount")].isNull() && m_recovered_device_count_isValid;

    m_total_device_count_isValid = ::OpenAPI::fromJsonValue(m_total_device_count, json[QString("totalDeviceCount")]);
    m_total_device_count_isSet = !json[QString("totalDeviceCount")].isNull() && m_total_device_count_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;
}

QString OAIRemoteInAppUpdateDataPerBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteInAppUpdateDataPerBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_recovered_device_count_isSet) {
        obj.insert(QString("recoveredDeviceCount"), ::OpenAPI::toJsonValue(m_recovered_device_count));
    }
    if (m_total_device_count_isSet) {
        obj.insert(QString("totalDeviceCount"), ::OpenAPI::toJsonValue(m_total_device_count));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    return obj;
}

QString OAIRemoteInAppUpdateDataPerBundle::getRecoveredDeviceCount() const {
    return m_recovered_device_count;
}
void OAIRemoteInAppUpdateDataPerBundle::setRecoveredDeviceCount(const QString &recovered_device_count) {
    m_recovered_device_count = recovered_device_count;
    m_recovered_device_count_isSet = true;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_recovered_device_count_Set() const{
    return m_recovered_device_count_isSet;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_recovered_device_count_Valid() const{
    return m_recovered_device_count_isValid;
}

QString OAIRemoteInAppUpdateDataPerBundle::getTotalDeviceCount() const {
    return m_total_device_count;
}
void OAIRemoteInAppUpdateDataPerBundle::setTotalDeviceCount(const QString &total_device_count) {
    m_total_device_count = total_device_count;
    m_total_device_count_isSet = true;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_total_device_count_Set() const{
    return m_total_device_count_isSet;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_total_device_count_Valid() const{
    return m_total_device_count_isValid;
}

QString OAIRemoteInAppUpdateDataPerBundle::getVersionCode() const {
    return m_version_code;
}
void OAIRemoteInAppUpdateDataPerBundle::setVersionCode(const QString &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIRemoteInAppUpdateDataPerBundle::is_version_code_Valid() const{
    return m_version_code_isValid;
}

bool OAIRemoteInAppUpdateDataPerBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recovered_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_device_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteInAppUpdateDataPerBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
