/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceTier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceTier::OAIDeviceTier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceTier::OAIDeviceTier() {
    this->initializeModel();
}

OAIDeviceTier::~OAIDeviceTier() {}

void OAIDeviceTier::initializeModel() {

    m_device_group_names_isSet = false;
    m_device_group_names_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;
}

void OAIDeviceTier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceTier::fromJsonObject(QJsonObject json) {

    m_device_group_names_isValid = ::OpenAPI::fromJsonValue(m_device_group_names, json[QString("deviceGroupNames")]);
    m_device_group_names_isSet = !json[QString("deviceGroupNames")].isNull() && m_device_group_names_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;
}

QString OAIDeviceTier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceTier::asJsonObject() const {
    QJsonObject obj;
    if (m_device_group_names.size() > 0) {
        obj.insert(QString("deviceGroupNames"), ::OpenAPI::toJsonValue(m_device_group_names));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    return obj;
}

QList<QString> OAIDeviceTier::getDeviceGroupNames() const {
    return m_device_group_names;
}
void OAIDeviceTier::setDeviceGroupNames(const QList<QString> &device_group_names) {
    m_device_group_names = device_group_names;
    m_device_group_names_isSet = true;
}

bool OAIDeviceTier::is_device_group_names_Set() const{
    return m_device_group_names_isSet;
}

bool OAIDeviceTier::is_device_group_names_Valid() const{
    return m_device_group_names_isValid;
}

qint32 OAIDeviceTier::getLevel() const {
    return m_level;
}
void OAIDeviceTier::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIDeviceTier::is_level_Set() const{
    return m_level_isSet;
}

bool OAIDeviceTier::is_level_Valid() const{
    return m_level_isValid;
}

bool OAIDeviceTier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_group_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceTier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
