/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceFeature::OAIDeviceFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceFeature::OAIDeviceFeature() {
    this->initializeModel();
}

OAIDeviceFeature::~OAIDeviceFeature() {}

void OAIDeviceFeature::initializeModel() {

    m_feature_name_isSet = false;
    m_feature_name_isValid = false;

    m_feature_version_isSet = false;
    m_feature_version_isValid = false;
}

void OAIDeviceFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceFeature::fromJsonObject(QJsonObject json) {

    m_feature_name_isValid = ::OpenAPI::fromJsonValue(m_feature_name, json[QString("featureName")]);
    m_feature_name_isSet = !json[QString("featureName")].isNull() && m_feature_name_isValid;

    m_feature_version_isValid = ::OpenAPI::fromJsonValue(m_feature_version, json[QString("featureVersion")]);
    m_feature_version_isSet = !json[QString("featureVersion")].isNull() && m_feature_version_isValid;
}

QString OAIDeviceFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_name_isSet) {
        obj.insert(QString("featureName"), ::OpenAPI::toJsonValue(m_feature_name));
    }
    if (m_feature_version_isSet) {
        obj.insert(QString("featureVersion"), ::OpenAPI::toJsonValue(m_feature_version));
    }
    return obj;
}

QString OAIDeviceFeature::getFeatureName() const {
    return m_feature_name;
}
void OAIDeviceFeature::setFeatureName(const QString &feature_name) {
    m_feature_name = feature_name;
    m_feature_name_isSet = true;
}

bool OAIDeviceFeature::is_feature_name_Set() const{
    return m_feature_name_isSet;
}

bool OAIDeviceFeature::is_feature_name_Valid() const{
    return m_feature_name_isValid;
}

qint32 OAIDeviceFeature::getFeatureVersion() const {
    return m_feature_version;
}
void OAIDeviceFeature::setFeatureVersion(const qint32 &feature_version) {
    m_feature_version = feature_version;
    m_feature_version_isSet = true;
}

bool OAIDeviceFeature::is_feature_version_Set() const{
    return m_feature_version_isSet;
}

bool OAIDeviceFeature::is_feature_version_Valid() const{
    return m_feature_version_isValid;
}

bool OAIDeviceFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
