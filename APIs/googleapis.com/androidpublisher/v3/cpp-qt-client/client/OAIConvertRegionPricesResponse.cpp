/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConvertRegionPricesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConvertRegionPricesResponse::OAIConvertRegionPricesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConvertRegionPricesResponse::OAIConvertRegionPricesResponse() {
    this->initializeModel();
}

OAIConvertRegionPricesResponse::~OAIConvertRegionPricesResponse() {}

void OAIConvertRegionPricesResponse::initializeModel() {

    m_converted_other_regions_price_isSet = false;
    m_converted_other_regions_price_isValid = false;

    m_converted_region_prices_isSet = false;
    m_converted_region_prices_isValid = false;
}

void OAIConvertRegionPricesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConvertRegionPricesResponse::fromJsonObject(QJsonObject json) {

    m_converted_other_regions_price_isValid = ::OpenAPI::fromJsonValue(m_converted_other_regions_price, json[QString("convertedOtherRegionsPrice")]);
    m_converted_other_regions_price_isSet = !json[QString("convertedOtherRegionsPrice")].isNull() && m_converted_other_regions_price_isValid;

    m_converted_region_prices_isValid = ::OpenAPI::fromJsonValue(m_converted_region_prices, json[QString("convertedRegionPrices")]);
    m_converted_region_prices_isSet = !json[QString("convertedRegionPrices")].isNull() && m_converted_region_prices_isValid;
}

QString OAIConvertRegionPricesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConvertRegionPricesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_converted_other_regions_price.isSet()) {
        obj.insert(QString("convertedOtherRegionsPrice"), ::OpenAPI::toJsonValue(m_converted_other_regions_price));
    }
    if (m_converted_region_prices.size() > 0) {
        obj.insert(QString("convertedRegionPrices"), ::OpenAPI::toJsonValue(m_converted_region_prices));
    }
    return obj;
}

OAIConvertedOtherRegionsPrice OAIConvertRegionPricesResponse::getConvertedOtherRegionsPrice() const {
    return m_converted_other_regions_price;
}
void OAIConvertRegionPricesResponse::setConvertedOtherRegionsPrice(const OAIConvertedOtherRegionsPrice &converted_other_regions_price) {
    m_converted_other_regions_price = converted_other_regions_price;
    m_converted_other_regions_price_isSet = true;
}

bool OAIConvertRegionPricesResponse::is_converted_other_regions_price_Set() const{
    return m_converted_other_regions_price_isSet;
}

bool OAIConvertRegionPricesResponse::is_converted_other_regions_price_Valid() const{
    return m_converted_other_regions_price_isValid;
}

QMap<QString, OAIConvertedRegionPrice> OAIConvertRegionPricesResponse::getConvertedRegionPrices() const {
    return m_converted_region_prices;
}
void OAIConvertRegionPricesResponse::setConvertedRegionPrices(const QMap<QString, OAIConvertedRegionPrice> &converted_region_prices) {
    m_converted_region_prices = converted_region_prices;
    m_converted_region_prices_isSet = true;
}

bool OAIConvertRegionPricesResponse::is_converted_region_prices_Set() const{
    return m_converted_region_prices_isSet;
}

bool OAIConvertRegionPricesResponse::is_converted_region_prices_Valid() const{
    return m_converted_region_prices_isValid;
}

bool OAIConvertRegionPricesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_converted_other_regions_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_converted_region_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConvertRegionPricesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
