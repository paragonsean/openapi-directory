/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionalSubscriptionOfferConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionalSubscriptionOfferConfig::OAIRegionalSubscriptionOfferConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionalSubscriptionOfferConfig::OAIRegionalSubscriptionOfferConfig() {
    this->initializeModel();
}

OAIRegionalSubscriptionOfferConfig::~OAIRegionalSubscriptionOfferConfig() {}

void OAIRegionalSubscriptionOfferConfig::initializeModel() {

    m_new_subscriber_availability_isSet = false;
    m_new_subscriber_availability_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;
}

void OAIRegionalSubscriptionOfferConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionalSubscriptionOfferConfig::fromJsonObject(QJsonObject json) {

    m_new_subscriber_availability_isValid = ::OpenAPI::fromJsonValue(m_new_subscriber_availability, json[QString("newSubscriberAvailability")]);
    m_new_subscriber_availability_isSet = !json[QString("newSubscriberAvailability")].isNull() && m_new_subscriber_availability_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;
}

QString OAIRegionalSubscriptionOfferConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionalSubscriptionOfferConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_new_subscriber_availability_isSet) {
        obj.insert(QString("newSubscriberAvailability"), ::OpenAPI::toJsonValue(m_new_subscriber_availability));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    return obj;
}

bool OAIRegionalSubscriptionOfferConfig::isNewSubscriberAvailability() const {
    return m_new_subscriber_availability;
}
void OAIRegionalSubscriptionOfferConfig::setNewSubscriberAvailability(const bool &new_subscriber_availability) {
    m_new_subscriber_availability = new_subscriber_availability;
    m_new_subscriber_availability_isSet = true;
}

bool OAIRegionalSubscriptionOfferConfig::is_new_subscriber_availability_Set() const{
    return m_new_subscriber_availability_isSet;
}

bool OAIRegionalSubscriptionOfferConfig::is_new_subscriber_availability_Valid() const{
    return m_new_subscriber_availability_isValid;
}

QString OAIRegionalSubscriptionOfferConfig::getRegionCode() const {
    return m_region_code;
}
void OAIRegionalSubscriptionOfferConfig::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIRegionalSubscriptionOfferConfig::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIRegionalSubscriptionOfferConfig::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIRegionalSubscriptionOfferConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_subscriber_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionalSubscriptionOfferConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
