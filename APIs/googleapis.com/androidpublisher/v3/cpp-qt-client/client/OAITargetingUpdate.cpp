/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetingUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetingUpdate::OAITargetingUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetingUpdate::OAITargetingUpdate() {
    this->initializeModel();
}

OAITargetingUpdate::~OAITargetingUpdate() {}

void OAITargetingUpdate::initializeModel() {

    m_all_users_isSet = false;
    m_all_users_isValid = false;

    m_android_sdks_isSet = false;
    m_android_sdks_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;
}

void OAITargetingUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetingUpdate::fromJsonObject(QJsonObject json) {

    m_all_users_isValid = ::OpenAPI::fromJsonValue(m_all_users, json[QString("allUsers")]);
    m_all_users_isSet = !json[QString("allUsers")].isNull() && m_all_users_isValid;

    m_android_sdks_isValid = ::OpenAPI::fromJsonValue(m_android_sdks, json[QString("androidSdks")]);
    m_android_sdks_isSet = !json[QString("androidSdks")].isNull() && m_android_sdks_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;
}

QString OAITargetingUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetingUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_all_users.isSet()) {
        obj.insert(QString("allUsers"), ::OpenAPI::toJsonValue(m_all_users));
    }
    if (m_android_sdks.isSet()) {
        obj.insert(QString("androidSdks"), ::OpenAPI::toJsonValue(m_android_sdks));
    }
    if (m_regions.isSet()) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    return obj;
}

OAIAllUsers OAITargetingUpdate::getAllUsers() const {
    return m_all_users;
}
void OAITargetingUpdate::setAllUsers(const OAIAllUsers &all_users) {
    m_all_users = all_users;
    m_all_users_isSet = true;
}

bool OAITargetingUpdate::is_all_users_Set() const{
    return m_all_users_isSet;
}

bool OAITargetingUpdate::is_all_users_Valid() const{
    return m_all_users_isValid;
}

OAIAndroidSdks OAITargetingUpdate::getAndroidSdks() const {
    return m_android_sdks;
}
void OAITargetingUpdate::setAndroidSdks(const OAIAndroidSdks &android_sdks) {
    m_android_sdks = android_sdks;
    m_android_sdks_isSet = true;
}

bool OAITargetingUpdate::is_android_sdks_Set() const{
    return m_android_sdks_isSet;
}

bool OAITargetingUpdate::is_android_sdks_Valid() const{
    return m_android_sdks_isValid;
}

OAIRegions OAITargetingUpdate::getRegions() const {
    return m_regions;
}
void OAITargetingUpdate::setRegions(const OAIRegions &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAITargetingUpdate::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAITargetingUpdate::is_regions_Valid() const{
    return m_regions_isValid;
}

bool OAITargetingUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_all_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_android_sdks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetingUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
