/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBasePlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBasePlan::OAIBasePlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBasePlan::OAIBasePlan() {
    this->initializeModel();
}

OAIBasePlan::~OAIBasePlan() {}

void OAIBasePlan::initializeModel() {

    m_auto_renewing_base_plan_type_isSet = false;
    m_auto_renewing_base_plan_type_isValid = false;

    m_base_plan_id_isSet = false;
    m_base_plan_id_isValid = false;

    m_offer_tags_isSet = false;
    m_offer_tags_isValid = false;

    m_other_regions_config_isSet = false;
    m_other_regions_config_isValid = false;

    m_prepaid_base_plan_type_isSet = false;
    m_prepaid_base_plan_type_isValid = false;

    m_regional_configs_isSet = false;
    m_regional_configs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIBasePlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBasePlan::fromJsonObject(QJsonObject json) {

    m_auto_renewing_base_plan_type_isValid = ::OpenAPI::fromJsonValue(m_auto_renewing_base_plan_type, json[QString("autoRenewingBasePlanType")]);
    m_auto_renewing_base_plan_type_isSet = !json[QString("autoRenewingBasePlanType")].isNull() && m_auto_renewing_base_plan_type_isValid;

    m_base_plan_id_isValid = ::OpenAPI::fromJsonValue(m_base_plan_id, json[QString("basePlanId")]);
    m_base_plan_id_isSet = !json[QString("basePlanId")].isNull() && m_base_plan_id_isValid;

    m_offer_tags_isValid = ::OpenAPI::fromJsonValue(m_offer_tags, json[QString("offerTags")]);
    m_offer_tags_isSet = !json[QString("offerTags")].isNull() && m_offer_tags_isValid;

    m_other_regions_config_isValid = ::OpenAPI::fromJsonValue(m_other_regions_config, json[QString("otherRegionsConfig")]);
    m_other_regions_config_isSet = !json[QString("otherRegionsConfig")].isNull() && m_other_regions_config_isValid;

    m_prepaid_base_plan_type_isValid = ::OpenAPI::fromJsonValue(m_prepaid_base_plan_type, json[QString("prepaidBasePlanType")]);
    m_prepaid_base_plan_type_isSet = !json[QString("prepaidBasePlanType")].isNull() && m_prepaid_base_plan_type_isValid;

    m_regional_configs_isValid = ::OpenAPI::fromJsonValue(m_regional_configs, json[QString("regionalConfigs")]);
    m_regional_configs_isSet = !json[QString("regionalConfigs")].isNull() && m_regional_configs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIBasePlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBasePlan::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renewing_base_plan_type.isSet()) {
        obj.insert(QString("autoRenewingBasePlanType"), ::OpenAPI::toJsonValue(m_auto_renewing_base_plan_type));
    }
    if (m_base_plan_id_isSet) {
        obj.insert(QString("basePlanId"), ::OpenAPI::toJsonValue(m_base_plan_id));
    }
    if (m_offer_tags.size() > 0) {
        obj.insert(QString("offerTags"), ::OpenAPI::toJsonValue(m_offer_tags));
    }
    if (m_other_regions_config.isSet()) {
        obj.insert(QString("otherRegionsConfig"), ::OpenAPI::toJsonValue(m_other_regions_config));
    }
    if (m_prepaid_base_plan_type.isSet()) {
        obj.insert(QString("prepaidBasePlanType"), ::OpenAPI::toJsonValue(m_prepaid_base_plan_type));
    }
    if (m_regional_configs.size() > 0) {
        obj.insert(QString("regionalConfigs"), ::OpenAPI::toJsonValue(m_regional_configs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIAutoRenewingBasePlanType OAIBasePlan::getAutoRenewingBasePlanType() const {
    return m_auto_renewing_base_plan_type;
}
void OAIBasePlan::setAutoRenewingBasePlanType(const OAIAutoRenewingBasePlanType &auto_renewing_base_plan_type) {
    m_auto_renewing_base_plan_type = auto_renewing_base_plan_type;
    m_auto_renewing_base_plan_type_isSet = true;
}

bool OAIBasePlan::is_auto_renewing_base_plan_type_Set() const{
    return m_auto_renewing_base_plan_type_isSet;
}

bool OAIBasePlan::is_auto_renewing_base_plan_type_Valid() const{
    return m_auto_renewing_base_plan_type_isValid;
}

QString OAIBasePlan::getBasePlanId() const {
    return m_base_plan_id;
}
void OAIBasePlan::setBasePlanId(const QString &base_plan_id) {
    m_base_plan_id = base_plan_id;
    m_base_plan_id_isSet = true;
}

bool OAIBasePlan::is_base_plan_id_Set() const{
    return m_base_plan_id_isSet;
}

bool OAIBasePlan::is_base_plan_id_Valid() const{
    return m_base_plan_id_isValid;
}

QList<OAIOfferTag> OAIBasePlan::getOfferTags() const {
    return m_offer_tags;
}
void OAIBasePlan::setOfferTags(const QList<OAIOfferTag> &offer_tags) {
    m_offer_tags = offer_tags;
    m_offer_tags_isSet = true;
}

bool OAIBasePlan::is_offer_tags_Set() const{
    return m_offer_tags_isSet;
}

bool OAIBasePlan::is_offer_tags_Valid() const{
    return m_offer_tags_isValid;
}

OAIOtherRegionsBasePlanConfig OAIBasePlan::getOtherRegionsConfig() const {
    return m_other_regions_config;
}
void OAIBasePlan::setOtherRegionsConfig(const OAIOtherRegionsBasePlanConfig &other_regions_config) {
    m_other_regions_config = other_regions_config;
    m_other_regions_config_isSet = true;
}

bool OAIBasePlan::is_other_regions_config_Set() const{
    return m_other_regions_config_isSet;
}

bool OAIBasePlan::is_other_regions_config_Valid() const{
    return m_other_regions_config_isValid;
}

OAIPrepaidBasePlanType OAIBasePlan::getPrepaidBasePlanType() const {
    return m_prepaid_base_plan_type;
}
void OAIBasePlan::setPrepaidBasePlanType(const OAIPrepaidBasePlanType &prepaid_base_plan_type) {
    m_prepaid_base_plan_type = prepaid_base_plan_type;
    m_prepaid_base_plan_type_isSet = true;
}

bool OAIBasePlan::is_prepaid_base_plan_type_Set() const{
    return m_prepaid_base_plan_type_isSet;
}

bool OAIBasePlan::is_prepaid_base_plan_type_Valid() const{
    return m_prepaid_base_plan_type_isValid;
}

QList<OAIRegionalBasePlanConfig> OAIBasePlan::getRegionalConfigs() const {
    return m_regional_configs;
}
void OAIBasePlan::setRegionalConfigs(const QList<OAIRegionalBasePlanConfig> &regional_configs) {
    m_regional_configs = regional_configs;
    m_regional_configs_isSet = true;
}

bool OAIBasePlan::is_regional_configs_Set() const{
    return m_regional_configs_isSet;
}

bool OAIBasePlan::is_regional_configs_Valid() const{
    return m_regional_configs_isValid;
}

QString OAIBasePlan::getState() const {
    return m_state;
}
void OAIBasePlan::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBasePlan::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBasePlan::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIBasePlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renewing_base_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_regions_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepaid_base_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBasePlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
