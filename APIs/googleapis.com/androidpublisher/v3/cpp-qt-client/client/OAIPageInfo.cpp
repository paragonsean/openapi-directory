/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageInfo::OAIPageInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageInfo::OAIPageInfo() {
    this->initializeModel();
}

OAIPageInfo::~OAIPageInfo() {}

void OAIPageInfo::initializeModel() {

    m_result_per_page_isSet = false;
    m_result_per_page_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_total_results_isSet = false;
    m_total_results_isValid = false;
}

void OAIPageInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageInfo::fromJsonObject(QJsonObject json) {

    m_result_per_page_isValid = ::OpenAPI::fromJsonValue(m_result_per_page, json[QString("resultPerPage")]);
    m_result_per_page_isSet = !json[QString("resultPerPage")].isNull() && m_result_per_page_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_total_results_isValid = ::OpenAPI::fromJsonValue(m_total_results, json[QString("totalResults")]);
    m_total_results_isSet = !json[QString("totalResults")].isNull() && m_total_results_isValid;
}

QString OAIPageInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_result_per_page_isSet) {
        obj.insert(QString("resultPerPage"), ::OpenAPI::toJsonValue(m_result_per_page));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_total_results_isSet) {
        obj.insert(QString("totalResults"), ::OpenAPI::toJsonValue(m_total_results));
    }
    return obj;
}

qint32 OAIPageInfo::getResultPerPage() const {
    return m_result_per_page;
}
void OAIPageInfo::setResultPerPage(const qint32 &result_per_page) {
    m_result_per_page = result_per_page;
    m_result_per_page_isSet = true;
}

bool OAIPageInfo::is_result_per_page_Set() const{
    return m_result_per_page_isSet;
}

bool OAIPageInfo::is_result_per_page_Valid() const{
    return m_result_per_page_isValid;
}

qint32 OAIPageInfo::getStartIndex() const {
    return m_start_index;
}
void OAIPageInfo::setStartIndex(const qint32 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIPageInfo::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIPageInfo::is_start_index_Valid() const{
    return m_start_index_isValid;
}

qint32 OAIPageInfo::getTotalResults() const {
    return m_total_results;
}
void OAIPageInfo::setTotalResults(const qint32 &total_results) {
    m_total_results = total_results;
    m_total_results_isSet = true;
}

bool OAIPageInfo::is_total_results_Set() const{
    return m_total_results_isSet;
}

bool OAIPageInfo::is_total_results_Valid() const{
    return m_total_results_isValid;
}

bool OAIPageInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_result_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
