/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceSelector::OAIDeviceSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceSelector::OAIDeviceSelector() {
    this->initializeModel();
}

OAIDeviceSelector::~OAIDeviceSelector() {}

void OAIDeviceSelector::initializeModel() {

    m_device_ram_isSet = false;
    m_device_ram_isValid = false;

    m_excluded_device_ids_isSet = false;
    m_excluded_device_ids_isValid = false;

    m_forbidden_system_features_isSet = false;
    m_forbidden_system_features_isValid = false;

    m_included_device_ids_isSet = false;
    m_included_device_ids_isValid = false;

    m_required_system_features_isSet = false;
    m_required_system_features_isValid = false;
}

void OAIDeviceSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceSelector::fromJsonObject(QJsonObject json) {

    m_device_ram_isValid = ::OpenAPI::fromJsonValue(m_device_ram, json[QString("deviceRam")]);
    m_device_ram_isSet = !json[QString("deviceRam")].isNull() && m_device_ram_isValid;

    m_excluded_device_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_device_ids, json[QString("excludedDeviceIds")]);
    m_excluded_device_ids_isSet = !json[QString("excludedDeviceIds")].isNull() && m_excluded_device_ids_isValid;

    m_forbidden_system_features_isValid = ::OpenAPI::fromJsonValue(m_forbidden_system_features, json[QString("forbiddenSystemFeatures")]);
    m_forbidden_system_features_isSet = !json[QString("forbiddenSystemFeatures")].isNull() && m_forbidden_system_features_isValid;

    m_included_device_ids_isValid = ::OpenAPI::fromJsonValue(m_included_device_ids, json[QString("includedDeviceIds")]);
    m_included_device_ids_isSet = !json[QString("includedDeviceIds")].isNull() && m_included_device_ids_isValid;

    m_required_system_features_isValid = ::OpenAPI::fromJsonValue(m_required_system_features, json[QString("requiredSystemFeatures")]);
    m_required_system_features_isSet = !json[QString("requiredSystemFeatures")].isNull() && m_required_system_features_isValid;
}

QString OAIDeviceSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_device_ram.isSet()) {
        obj.insert(QString("deviceRam"), ::OpenAPI::toJsonValue(m_device_ram));
    }
    if (m_excluded_device_ids.size() > 0) {
        obj.insert(QString("excludedDeviceIds"), ::OpenAPI::toJsonValue(m_excluded_device_ids));
    }
    if (m_forbidden_system_features.size() > 0) {
        obj.insert(QString("forbiddenSystemFeatures"), ::OpenAPI::toJsonValue(m_forbidden_system_features));
    }
    if (m_included_device_ids.size() > 0) {
        obj.insert(QString("includedDeviceIds"), ::OpenAPI::toJsonValue(m_included_device_ids));
    }
    if (m_required_system_features.size() > 0) {
        obj.insert(QString("requiredSystemFeatures"), ::OpenAPI::toJsonValue(m_required_system_features));
    }
    return obj;
}

OAIDeviceRam OAIDeviceSelector::getDeviceRam() const {
    return m_device_ram;
}
void OAIDeviceSelector::setDeviceRam(const OAIDeviceRam &device_ram) {
    m_device_ram = device_ram;
    m_device_ram_isSet = true;
}

bool OAIDeviceSelector::is_device_ram_Set() const{
    return m_device_ram_isSet;
}

bool OAIDeviceSelector::is_device_ram_Valid() const{
    return m_device_ram_isValid;
}

QList<OAIDeviceId> OAIDeviceSelector::getExcludedDeviceIds() const {
    return m_excluded_device_ids;
}
void OAIDeviceSelector::setExcludedDeviceIds(const QList<OAIDeviceId> &excluded_device_ids) {
    m_excluded_device_ids = excluded_device_ids;
    m_excluded_device_ids_isSet = true;
}

bool OAIDeviceSelector::is_excluded_device_ids_Set() const{
    return m_excluded_device_ids_isSet;
}

bool OAIDeviceSelector::is_excluded_device_ids_Valid() const{
    return m_excluded_device_ids_isValid;
}

QList<OAISystemFeature> OAIDeviceSelector::getForbiddenSystemFeatures() const {
    return m_forbidden_system_features;
}
void OAIDeviceSelector::setForbiddenSystemFeatures(const QList<OAISystemFeature> &forbidden_system_features) {
    m_forbidden_system_features = forbidden_system_features;
    m_forbidden_system_features_isSet = true;
}

bool OAIDeviceSelector::is_forbidden_system_features_Set() const{
    return m_forbidden_system_features_isSet;
}

bool OAIDeviceSelector::is_forbidden_system_features_Valid() const{
    return m_forbidden_system_features_isValid;
}

QList<OAIDeviceId> OAIDeviceSelector::getIncludedDeviceIds() const {
    return m_included_device_ids;
}
void OAIDeviceSelector::setIncludedDeviceIds(const QList<OAIDeviceId> &included_device_ids) {
    m_included_device_ids = included_device_ids;
    m_included_device_ids_isSet = true;
}

bool OAIDeviceSelector::is_included_device_ids_Set() const{
    return m_included_device_ids_isSet;
}

bool OAIDeviceSelector::is_included_device_ids_Valid() const{
    return m_included_device_ids_isValid;
}

QList<OAISystemFeature> OAIDeviceSelector::getRequiredSystemFeatures() const {
    return m_required_system_features;
}
void OAIDeviceSelector::setRequiredSystemFeatures(const QList<OAISystemFeature> &required_system_features) {
    m_required_system_features = required_system_features;
    m_required_system_features_isSet = true;
}

bool OAIDeviceSelector::is_required_system_features_Set() const{
    return m_required_system_features_isSet;
}

bool OAIDeviceSelector::is_required_system_features_Valid() const{
    return m_required_system_features_isValid;
}

bool OAIDeviceSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_ram.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_device_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_forbidden_system_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_device_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_system_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
