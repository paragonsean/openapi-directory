/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionPurchase::OAISubscriptionPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionPurchase::OAISubscriptionPurchase() {
    this->initializeModel();
}

OAISubscriptionPurchase::~OAISubscriptionPurchase() {}

void OAISubscriptionPurchase::initializeModel() {

    m_acknowledgement_state_isSet = false;
    m_acknowledgement_state_isValid = false;

    m_auto_renewing_isSet = false;
    m_auto_renewing_isValid = false;

    m_auto_resume_time_millis_isSet = false;
    m_auto_resume_time_millis_isValid = false;

    m_cancel_reason_isSet = false;
    m_cancel_reason_isValid = false;

    m_cancel_survey_result_isSet = false;
    m_cancel_survey_result_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_developer_payload_isSet = false;
    m_developer_payload_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_expiry_time_millis_isSet = false;
    m_expiry_time_millis_isValid = false;

    m_external_account_id_isSet = false;
    m_external_account_id_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_introductory_price_info_isSet = false;
    m_introductory_price_info_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_linked_purchase_token_isSet = false;
    m_linked_purchase_token_isValid = false;

    m_obfuscated_external_account_id_isSet = false;
    m_obfuscated_external_account_id_isValid = false;

    m_obfuscated_external_profile_id_isSet = false;
    m_obfuscated_external_profile_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payment_state_isSet = false;
    m_payment_state_isValid = false;

    m_price_amount_micros_isSet = false;
    m_price_amount_micros_isValid = false;

    m_price_change_isSet = false;
    m_price_change_isValid = false;

    m_price_currency_code_isSet = false;
    m_price_currency_code_isValid = false;

    m_profile_id_isSet = false;
    m_profile_id_isValid = false;

    m_profile_name_isSet = false;
    m_profile_name_isValid = false;

    m_promotion_code_isSet = false;
    m_promotion_code_isValid = false;

    m_promotion_type_isSet = false;
    m_promotion_type_isValid = false;

    m_purchase_type_isSet = false;
    m_purchase_type_isValid = false;

    m_start_time_millis_isSet = false;
    m_start_time_millis_isValid = false;

    m_user_cancellation_time_millis_isSet = false;
    m_user_cancellation_time_millis_isValid = false;
}

void OAISubscriptionPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionPurchase::fromJsonObject(QJsonObject json) {

    m_acknowledgement_state_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_state, json[QString("acknowledgementState")]);
    m_acknowledgement_state_isSet = !json[QString("acknowledgementState")].isNull() && m_acknowledgement_state_isValid;

    m_auto_renewing_isValid = ::OpenAPI::fromJsonValue(m_auto_renewing, json[QString("autoRenewing")]);
    m_auto_renewing_isSet = !json[QString("autoRenewing")].isNull() && m_auto_renewing_isValid;

    m_auto_resume_time_millis_isValid = ::OpenAPI::fromJsonValue(m_auto_resume_time_millis, json[QString("autoResumeTimeMillis")]);
    m_auto_resume_time_millis_isSet = !json[QString("autoResumeTimeMillis")].isNull() && m_auto_resume_time_millis_isValid;

    m_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_cancel_reason, json[QString("cancelReason")]);
    m_cancel_reason_isSet = !json[QString("cancelReason")].isNull() && m_cancel_reason_isValid;

    m_cancel_survey_result_isValid = ::OpenAPI::fromJsonValue(m_cancel_survey_result, json[QString("cancelSurveyResult")]);
    m_cancel_survey_result_isSet = !json[QString("cancelSurveyResult")].isNull() && m_cancel_survey_result_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_developer_payload_isValid = ::OpenAPI::fromJsonValue(m_developer_payload, json[QString("developerPayload")]);
    m_developer_payload_isSet = !json[QString("developerPayload")].isNull() && m_developer_payload_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_expiry_time_millis_isValid = ::OpenAPI::fromJsonValue(m_expiry_time_millis, json[QString("expiryTimeMillis")]);
    m_expiry_time_millis_isSet = !json[QString("expiryTimeMillis")].isNull() && m_expiry_time_millis_isValid;

    m_external_account_id_isValid = ::OpenAPI::fromJsonValue(m_external_account_id, json[QString("externalAccountId")]);
    m_external_account_id_isSet = !json[QString("externalAccountId")].isNull() && m_external_account_id_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_introductory_price_info_isValid = ::OpenAPI::fromJsonValue(m_introductory_price_info, json[QString("introductoryPriceInfo")]);
    m_introductory_price_info_isSet = !json[QString("introductoryPriceInfo")].isNull() && m_introductory_price_info_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_linked_purchase_token_isValid = ::OpenAPI::fromJsonValue(m_linked_purchase_token, json[QString("linkedPurchaseToken")]);
    m_linked_purchase_token_isSet = !json[QString("linkedPurchaseToken")].isNull() && m_linked_purchase_token_isValid;

    m_obfuscated_external_account_id_isValid = ::OpenAPI::fromJsonValue(m_obfuscated_external_account_id, json[QString("obfuscatedExternalAccountId")]);
    m_obfuscated_external_account_id_isSet = !json[QString("obfuscatedExternalAccountId")].isNull() && m_obfuscated_external_account_id_isValid;

    m_obfuscated_external_profile_id_isValid = ::OpenAPI::fromJsonValue(m_obfuscated_external_profile_id, json[QString("obfuscatedExternalProfileId")]);
    m_obfuscated_external_profile_id_isSet = !json[QString("obfuscatedExternalProfileId")].isNull() && m_obfuscated_external_profile_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_payment_state_isValid = ::OpenAPI::fromJsonValue(m_payment_state, json[QString("paymentState")]);
    m_payment_state_isSet = !json[QString("paymentState")].isNull() && m_payment_state_isValid;

    m_price_amount_micros_isValid = ::OpenAPI::fromJsonValue(m_price_amount_micros, json[QString("priceAmountMicros")]);
    m_price_amount_micros_isSet = !json[QString("priceAmountMicros")].isNull() && m_price_amount_micros_isValid;

    m_price_change_isValid = ::OpenAPI::fromJsonValue(m_price_change, json[QString("priceChange")]);
    m_price_change_isSet = !json[QString("priceChange")].isNull() && m_price_change_isValid;

    m_price_currency_code_isValid = ::OpenAPI::fromJsonValue(m_price_currency_code, json[QString("priceCurrencyCode")]);
    m_price_currency_code_isSet = !json[QString("priceCurrencyCode")].isNull() && m_price_currency_code_isValid;

    m_profile_id_isValid = ::OpenAPI::fromJsonValue(m_profile_id, json[QString("profileId")]);
    m_profile_id_isSet = !json[QString("profileId")].isNull() && m_profile_id_isValid;

    m_profile_name_isValid = ::OpenAPI::fromJsonValue(m_profile_name, json[QString("profileName")]);
    m_profile_name_isSet = !json[QString("profileName")].isNull() && m_profile_name_isValid;

    m_promotion_code_isValid = ::OpenAPI::fromJsonValue(m_promotion_code, json[QString("promotionCode")]);
    m_promotion_code_isSet = !json[QString("promotionCode")].isNull() && m_promotion_code_isValid;

    m_promotion_type_isValid = ::OpenAPI::fromJsonValue(m_promotion_type, json[QString("promotionType")]);
    m_promotion_type_isSet = !json[QString("promotionType")].isNull() && m_promotion_type_isValid;

    m_purchase_type_isValid = ::OpenAPI::fromJsonValue(m_purchase_type, json[QString("purchaseType")]);
    m_purchase_type_isSet = !json[QString("purchaseType")].isNull() && m_purchase_type_isValid;

    m_start_time_millis_isValid = ::OpenAPI::fromJsonValue(m_start_time_millis, json[QString("startTimeMillis")]);
    m_start_time_millis_isSet = !json[QString("startTimeMillis")].isNull() && m_start_time_millis_isValid;

    m_user_cancellation_time_millis_isValid = ::OpenAPI::fromJsonValue(m_user_cancellation_time_millis, json[QString("userCancellationTimeMillis")]);
    m_user_cancellation_time_millis_isSet = !json[QString("userCancellationTimeMillis")].isNull() && m_user_cancellation_time_millis_isValid;
}

QString OAISubscriptionPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_state_isSet) {
        obj.insert(QString("acknowledgementState"), ::OpenAPI::toJsonValue(m_acknowledgement_state));
    }
    if (m_auto_renewing_isSet) {
        obj.insert(QString("autoRenewing"), ::OpenAPI::toJsonValue(m_auto_renewing));
    }
    if (m_auto_resume_time_millis_isSet) {
        obj.insert(QString("autoResumeTimeMillis"), ::OpenAPI::toJsonValue(m_auto_resume_time_millis));
    }
    if (m_cancel_reason_isSet) {
        obj.insert(QString("cancelReason"), ::OpenAPI::toJsonValue(m_cancel_reason));
    }
    if (m_cancel_survey_result.isSet()) {
        obj.insert(QString("cancelSurveyResult"), ::OpenAPI::toJsonValue(m_cancel_survey_result));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_developer_payload_isSet) {
        obj.insert(QString("developerPayload"), ::OpenAPI::toJsonValue(m_developer_payload));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_expiry_time_millis_isSet) {
        obj.insert(QString("expiryTimeMillis"), ::OpenAPI::toJsonValue(m_expiry_time_millis));
    }
    if (m_external_account_id_isSet) {
        obj.insert(QString("externalAccountId"), ::OpenAPI::toJsonValue(m_external_account_id));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_introductory_price_info.isSet()) {
        obj.insert(QString("introductoryPriceInfo"), ::OpenAPI::toJsonValue(m_introductory_price_info));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_linked_purchase_token_isSet) {
        obj.insert(QString("linkedPurchaseToken"), ::OpenAPI::toJsonValue(m_linked_purchase_token));
    }
    if (m_obfuscated_external_account_id_isSet) {
        obj.insert(QString("obfuscatedExternalAccountId"), ::OpenAPI::toJsonValue(m_obfuscated_external_account_id));
    }
    if (m_obfuscated_external_profile_id_isSet) {
        obj.insert(QString("obfuscatedExternalProfileId"), ::OpenAPI::toJsonValue(m_obfuscated_external_profile_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payment_state_isSet) {
        obj.insert(QString("paymentState"), ::OpenAPI::toJsonValue(m_payment_state));
    }
    if (m_price_amount_micros_isSet) {
        obj.insert(QString("priceAmountMicros"), ::OpenAPI::toJsonValue(m_price_amount_micros));
    }
    if (m_price_change.isSet()) {
        obj.insert(QString("priceChange"), ::OpenAPI::toJsonValue(m_price_change));
    }
    if (m_price_currency_code_isSet) {
        obj.insert(QString("priceCurrencyCode"), ::OpenAPI::toJsonValue(m_price_currency_code));
    }
    if (m_profile_id_isSet) {
        obj.insert(QString("profileId"), ::OpenAPI::toJsonValue(m_profile_id));
    }
    if (m_profile_name_isSet) {
        obj.insert(QString("profileName"), ::OpenAPI::toJsonValue(m_profile_name));
    }
    if (m_promotion_code_isSet) {
        obj.insert(QString("promotionCode"), ::OpenAPI::toJsonValue(m_promotion_code));
    }
    if (m_promotion_type_isSet) {
        obj.insert(QString("promotionType"), ::OpenAPI::toJsonValue(m_promotion_type));
    }
    if (m_purchase_type_isSet) {
        obj.insert(QString("purchaseType"), ::OpenAPI::toJsonValue(m_purchase_type));
    }
    if (m_start_time_millis_isSet) {
        obj.insert(QString("startTimeMillis"), ::OpenAPI::toJsonValue(m_start_time_millis));
    }
    if (m_user_cancellation_time_millis_isSet) {
        obj.insert(QString("userCancellationTimeMillis"), ::OpenAPI::toJsonValue(m_user_cancellation_time_millis));
    }
    return obj;
}

qint32 OAISubscriptionPurchase::getAcknowledgementState() const {
    return m_acknowledgement_state;
}
void OAISubscriptionPurchase::setAcknowledgementState(const qint32 &acknowledgement_state) {
    m_acknowledgement_state = acknowledgement_state;
    m_acknowledgement_state_isSet = true;
}

bool OAISubscriptionPurchase::is_acknowledgement_state_Set() const{
    return m_acknowledgement_state_isSet;
}

bool OAISubscriptionPurchase::is_acknowledgement_state_Valid() const{
    return m_acknowledgement_state_isValid;
}

bool OAISubscriptionPurchase::isAutoRenewing() const {
    return m_auto_renewing;
}
void OAISubscriptionPurchase::setAutoRenewing(const bool &auto_renewing) {
    m_auto_renewing = auto_renewing;
    m_auto_renewing_isSet = true;
}

bool OAISubscriptionPurchase::is_auto_renewing_Set() const{
    return m_auto_renewing_isSet;
}

bool OAISubscriptionPurchase::is_auto_renewing_Valid() const{
    return m_auto_renewing_isValid;
}

QString OAISubscriptionPurchase::getAutoResumeTimeMillis() const {
    return m_auto_resume_time_millis;
}
void OAISubscriptionPurchase::setAutoResumeTimeMillis(const QString &auto_resume_time_millis) {
    m_auto_resume_time_millis = auto_resume_time_millis;
    m_auto_resume_time_millis_isSet = true;
}

bool OAISubscriptionPurchase::is_auto_resume_time_millis_Set() const{
    return m_auto_resume_time_millis_isSet;
}

bool OAISubscriptionPurchase::is_auto_resume_time_millis_Valid() const{
    return m_auto_resume_time_millis_isValid;
}

qint32 OAISubscriptionPurchase::getCancelReason() const {
    return m_cancel_reason;
}
void OAISubscriptionPurchase::setCancelReason(const qint32 &cancel_reason) {
    m_cancel_reason = cancel_reason;
    m_cancel_reason_isSet = true;
}

bool OAISubscriptionPurchase::is_cancel_reason_Set() const{
    return m_cancel_reason_isSet;
}

bool OAISubscriptionPurchase::is_cancel_reason_Valid() const{
    return m_cancel_reason_isValid;
}

OAISubscriptionCancelSurveyResult OAISubscriptionPurchase::getCancelSurveyResult() const {
    return m_cancel_survey_result;
}
void OAISubscriptionPurchase::setCancelSurveyResult(const OAISubscriptionCancelSurveyResult &cancel_survey_result) {
    m_cancel_survey_result = cancel_survey_result;
    m_cancel_survey_result_isSet = true;
}

bool OAISubscriptionPurchase::is_cancel_survey_result_Set() const{
    return m_cancel_survey_result_isSet;
}

bool OAISubscriptionPurchase::is_cancel_survey_result_Valid() const{
    return m_cancel_survey_result_isValid;
}

QString OAISubscriptionPurchase::getCountryCode() const {
    return m_country_code;
}
void OAISubscriptionPurchase::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAISubscriptionPurchase::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAISubscriptionPurchase::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAISubscriptionPurchase::getDeveloperPayload() const {
    return m_developer_payload;
}
void OAISubscriptionPurchase::setDeveloperPayload(const QString &developer_payload) {
    m_developer_payload = developer_payload;
    m_developer_payload_isSet = true;
}

bool OAISubscriptionPurchase::is_developer_payload_Set() const{
    return m_developer_payload_isSet;
}

bool OAISubscriptionPurchase::is_developer_payload_Valid() const{
    return m_developer_payload_isValid;
}

QString OAISubscriptionPurchase::getEmailAddress() const {
    return m_email_address;
}
void OAISubscriptionPurchase::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAISubscriptionPurchase::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAISubscriptionPurchase::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAISubscriptionPurchase::getExpiryTimeMillis() const {
    return m_expiry_time_millis;
}
void OAISubscriptionPurchase::setExpiryTimeMillis(const QString &expiry_time_millis) {
    m_expiry_time_millis = expiry_time_millis;
    m_expiry_time_millis_isSet = true;
}

bool OAISubscriptionPurchase::is_expiry_time_millis_Set() const{
    return m_expiry_time_millis_isSet;
}

bool OAISubscriptionPurchase::is_expiry_time_millis_Valid() const{
    return m_expiry_time_millis_isValid;
}

QString OAISubscriptionPurchase::getExternalAccountId() const {
    return m_external_account_id;
}
void OAISubscriptionPurchase::setExternalAccountId(const QString &external_account_id) {
    m_external_account_id = external_account_id;
    m_external_account_id_isSet = true;
}

bool OAISubscriptionPurchase::is_external_account_id_Set() const{
    return m_external_account_id_isSet;
}

bool OAISubscriptionPurchase::is_external_account_id_Valid() const{
    return m_external_account_id_isValid;
}

QString OAISubscriptionPurchase::getFamilyName() const {
    return m_family_name;
}
void OAISubscriptionPurchase::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAISubscriptionPurchase::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAISubscriptionPurchase::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QString OAISubscriptionPurchase::getGivenName() const {
    return m_given_name;
}
void OAISubscriptionPurchase::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAISubscriptionPurchase::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAISubscriptionPurchase::is_given_name_Valid() const{
    return m_given_name_isValid;
}

OAIIntroductoryPriceInfo OAISubscriptionPurchase::getIntroductoryPriceInfo() const {
    return m_introductory_price_info;
}
void OAISubscriptionPurchase::setIntroductoryPriceInfo(const OAIIntroductoryPriceInfo &introductory_price_info) {
    m_introductory_price_info = introductory_price_info;
    m_introductory_price_info_isSet = true;
}

bool OAISubscriptionPurchase::is_introductory_price_info_Set() const{
    return m_introductory_price_info_isSet;
}

bool OAISubscriptionPurchase::is_introductory_price_info_Valid() const{
    return m_introductory_price_info_isValid;
}

QString OAISubscriptionPurchase::getKind() const {
    return m_kind;
}
void OAISubscriptionPurchase::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISubscriptionPurchase::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISubscriptionPurchase::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISubscriptionPurchase::getLinkedPurchaseToken() const {
    return m_linked_purchase_token;
}
void OAISubscriptionPurchase::setLinkedPurchaseToken(const QString &linked_purchase_token) {
    m_linked_purchase_token = linked_purchase_token;
    m_linked_purchase_token_isSet = true;
}

bool OAISubscriptionPurchase::is_linked_purchase_token_Set() const{
    return m_linked_purchase_token_isSet;
}

bool OAISubscriptionPurchase::is_linked_purchase_token_Valid() const{
    return m_linked_purchase_token_isValid;
}

QString OAISubscriptionPurchase::getObfuscatedExternalAccountId() const {
    return m_obfuscated_external_account_id;
}
void OAISubscriptionPurchase::setObfuscatedExternalAccountId(const QString &obfuscated_external_account_id) {
    m_obfuscated_external_account_id = obfuscated_external_account_id;
    m_obfuscated_external_account_id_isSet = true;
}

bool OAISubscriptionPurchase::is_obfuscated_external_account_id_Set() const{
    return m_obfuscated_external_account_id_isSet;
}

bool OAISubscriptionPurchase::is_obfuscated_external_account_id_Valid() const{
    return m_obfuscated_external_account_id_isValid;
}

QString OAISubscriptionPurchase::getObfuscatedExternalProfileId() const {
    return m_obfuscated_external_profile_id;
}
void OAISubscriptionPurchase::setObfuscatedExternalProfileId(const QString &obfuscated_external_profile_id) {
    m_obfuscated_external_profile_id = obfuscated_external_profile_id;
    m_obfuscated_external_profile_id_isSet = true;
}

bool OAISubscriptionPurchase::is_obfuscated_external_profile_id_Set() const{
    return m_obfuscated_external_profile_id_isSet;
}

bool OAISubscriptionPurchase::is_obfuscated_external_profile_id_Valid() const{
    return m_obfuscated_external_profile_id_isValid;
}

QString OAISubscriptionPurchase::getOrderId() const {
    return m_order_id;
}
void OAISubscriptionPurchase::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAISubscriptionPurchase::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAISubscriptionPurchase::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAISubscriptionPurchase::getPaymentState() const {
    return m_payment_state;
}
void OAISubscriptionPurchase::setPaymentState(const qint32 &payment_state) {
    m_payment_state = payment_state;
    m_payment_state_isSet = true;
}

bool OAISubscriptionPurchase::is_payment_state_Set() const{
    return m_payment_state_isSet;
}

bool OAISubscriptionPurchase::is_payment_state_Valid() const{
    return m_payment_state_isValid;
}

QString OAISubscriptionPurchase::getPriceAmountMicros() const {
    return m_price_amount_micros;
}
void OAISubscriptionPurchase::setPriceAmountMicros(const QString &price_amount_micros) {
    m_price_amount_micros = price_amount_micros;
    m_price_amount_micros_isSet = true;
}

bool OAISubscriptionPurchase::is_price_amount_micros_Set() const{
    return m_price_amount_micros_isSet;
}

bool OAISubscriptionPurchase::is_price_amount_micros_Valid() const{
    return m_price_amount_micros_isValid;
}

OAISubscriptionPriceChange OAISubscriptionPurchase::getPriceChange() const {
    return m_price_change;
}
void OAISubscriptionPurchase::setPriceChange(const OAISubscriptionPriceChange &price_change) {
    m_price_change = price_change;
    m_price_change_isSet = true;
}

bool OAISubscriptionPurchase::is_price_change_Set() const{
    return m_price_change_isSet;
}

bool OAISubscriptionPurchase::is_price_change_Valid() const{
    return m_price_change_isValid;
}

QString OAISubscriptionPurchase::getPriceCurrencyCode() const {
    return m_price_currency_code;
}
void OAISubscriptionPurchase::setPriceCurrencyCode(const QString &price_currency_code) {
    m_price_currency_code = price_currency_code;
    m_price_currency_code_isSet = true;
}

bool OAISubscriptionPurchase::is_price_currency_code_Set() const{
    return m_price_currency_code_isSet;
}

bool OAISubscriptionPurchase::is_price_currency_code_Valid() const{
    return m_price_currency_code_isValid;
}

QString OAISubscriptionPurchase::getProfileId() const {
    return m_profile_id;
}
void OAISubscriptionPurchase::setProfileId(const QString &profile_id) {
    m_profile_id = profile_id;
    m_profile_id_isSet = true;
}

bool OAISubscriptionPurchase::is_profile_id_Set() const{
    return m_profile_id_isSet;
}

bool OAISubscriptionPurchase::is_profile_id_Valid() const{
    return m_profile_id_isValid;
}

QString OAISubscriptionPurchase::getProfileName() const {
    return m_profile_name;
}
void OAISubscriptionPurchase::setProfileName(const QString &profile_name) {
    m_profile_name = profile_name;
    m_profile_name_isSet = true;
}

bool OAISubscriptionPurchase::is_profile_name_Set() const{
    return m_profile_name_isSet;
}

bool OAISubscriptionPurchase::is_profile_name_Valid() const{
    return m_profile_name_isValid;
}

QString OAISubscriptionPurchase::getPromotionCode() const {
    return m_promotion_code;
}
void OAISubscriptionPurchase::setPromotionCode(const QString &promotion_code) {
    m_promotion_code = promotion_code;
    m_promotion_code_isSet = true;
}

bool OAISubscriptionPurchase::is_promotion_code_Set() const{
    return m_promotion_code_isSet;
}

bool OAISubscriptionPurchase::is_promotion_code_Valid() const{
    return m_promotion_code_isValid;
}

qint32 OAISubscriptionPurchase::getPromotionType() const {
    return m_promotion_type;
}
void OAISubscriptionPurchase::setPromotionType(const qint32 &promotion_type) {
    m_promotion_type = promotion_type;
    m_promotion_type_isSet = true;
}

bool OAISubscriptionPurchase::is_promotion_type_Set() const{
    return m_promotion_type_isSet;
}

bool OAISubscriptionPurchase::is_promotion_type_Valid() const{
    return m_promotion_type_isValid;
}

qint32 OAISubscriptionPurchase::getPurchaseType() const {
    return m_purchase_type;
}
void OAISubscriptionPurchase::setPurchaseType(const qint32 &purchase_type) {
    m_purchase_type = purchase_type;
    m_purchase_type_isSet = true;
}

bool OAISubscriptionPurchase::is_purchase_type_Set() const{
    return m_purchase_type_isSet;
}

bool OAISubscriptionPurchase::is_purchase_type_Valid() const{
    return m_purchase_type_isValid;
}

QString OAISubscriptionPurchase::getStartTimeMillis() const {
    return m_start_time_millis;
}
void OAISubscriptionPurchase::setStartTimeMillis(const QString &start_time_millis) {
    m_start_time_millis = start_time_millis;
    m_start_time_millis_isSet = true;
}

bool OAISubscriptionPurchase::is_start_time_millis_Set() const{
    return m_start_time_millis_isSet;
}

bool OAISubscriptionPurchase::is_start_time_millis_Valid() const{
    return m_start_time_millis_isValid;
}

QString OAISubscriptionPurchase::getUserCancellationTimeMillis() const {
    return m_user_cancellation_time_millis;
}
void OAISubscriptionPurchase::setUserCancellationTimeMillis(const QString &user_cancellation_time_millis) {
    m_user_cancellation_time_millis = user_cancellation_time_millis;
    m_user_cancellation_time_millis_isSet = true;
}

bool OAISubscriptionPurchase::is_user_cancellation_time_millis_Set() const{
    return m_user_cancellation_time_millis_isSet;
}

bool OAISubscriptionPurchase::is_user_cancellation_time_millis_Valid() const{
    return m_user_cancellation_time_millis_isValid;
}

bool OAISubscriptionPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_renewing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_resume_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancel_survey_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_introductory_price_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_purchase_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscated_external_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_obfuscated_external_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_amount_micros_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_change.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotion_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_cancellation_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
