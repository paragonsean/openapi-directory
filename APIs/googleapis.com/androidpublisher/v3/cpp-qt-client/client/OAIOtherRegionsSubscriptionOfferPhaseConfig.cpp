/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOtherRegionsSubscriptionOfferPhaseConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOtherRegionsSubscriptionOfferPhaseConfig::OAIOtherRegionsSubscriptionOfferPhaseConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOtherRegionsSubscriptionOfferPhaseConfig::OAIOtherRegionsSubscriptionOfferPhaseConfig() {
    this->initializeModel();
}

OAIOtherRegionsSubscriptionOfferPhaseConfig::~OAIOtherRegionsSubscriptionOfferPhaseConfig() {}

void OAIOtherRegionsSubscriptionOfferPhaseConfig::initializeModel() {

    m_absolute_discounts_isSet = false;
    m_absolute_discounts_isValid = false;

    m_other_regions_prices_isSet = false;
    m_other_regions_prices_isValid = false;

    m_relative_discount_isSet = false;
    m_relative_discount_isValid = false;
}

void OAIOtherRegionsSubscriptionOfferPhaseConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOtherRegionsSubscriptionOfferPhaseConfig::fromJsonObject(QJsonObject json) {

    m_absolute_discounts_isValid = ::OpenAPI::fromJsonValue(m_absolute_discounts, json[QString("absoluteDiscounts")]);
    m_absolute_discounts_isSet = !json[QString("absoluteDiscounts")].isNull() && m_absolute_discounts_isValid;

    m_other_regions_prices_isValid = ::OpenAPI::fromJsonValue(m_other_regions_prices, json[QString("otherRegionsPrices")]);
    m_other_regions_prices_isSet = !json[QString("otherRegionsPrices")].isNull() && m_other_regions_prices_isValid;

    m_relative_discount_isValid = ::OpenAPI::fromJsonValue(m_relative_discount, json[QString("relativeDiscount")]);
    m_relative_discount_isSet = !json[QString("relativeDiscount")].isNull() && m_relative_discount_isValid;
}

QString OAIOtherRegionsSubscriptionOfferPhaseConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOtherRegionsSubscriptionOfferPhaseConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_discounts.isSet()) {
        obj.insert(QString("absoluteDiscounts"), ::OpenAPI::toJsonValue(m_absolute_discounts));
    }
    if (m_other_regions_prices.isSet()) {
        obj.insert(QString("otherRegionsPrices"), ::OpenAPI::toJsonValue(m_other_regions_prices));
    }
    if (m_relative_discount_isSet) {
        obj.insert(QString("relativeDiscount"), ::OpenAPI::toJsonValue(m_relative_discount));
    }
    return obj;
}

OAIOtherRegionsSubscriptionOfferPhasePrices OAIOtherRegionsSubscriptionOfferPhaseConfig::getAbsoluteDiscounts() const {
    return m_absolute_discounts;
}
void OAIOtherRegionsSubscriptionOfferPhaseConfig::setAbsoluteDiscounts(const OAIOtherRegionsSubscriptionOfferPhasePrices &absolute_discounts) {
    m_absolute_discounts = absolute_discounts;
    m_absolute_discounts_isSet = true;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_absolute_discounts_Set() const{
    return m_absolute_discounts_isSet;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_absolute_discounts_Valid() const{
    return m_absolute_discounts_isValid;
}

OAIOtherRegionsSubscriptionOfferPhasePrices OAIOtherRegionsSubscriptionOfferPhaseConfig::getOtherRegionsPrices() const {
    return m_other_regions_prices;
}
void OAIOtherRegionsSubscriptionOfferPhaseConfig::setOtherRegionsPrices(const OAIOtherRegionsSubscriptionOfferPhasePrices &other_regions_prices) {
    m_other_regions_prices = other_regions_prices;
    m_other_regions_prices_isSet = true;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_other_regions_prices_Set() const{
    return m_other_regions_prices_isSet;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_other_regions_prices_Valid() const{
    return m_other_regions_prices_isValid;
}

double OAIOtherRegionsSubscriptionOfferPhaseConfig::getRelativeDiscount() const {
    return m_relative_discount;
}
void OAIOtherRegionsSubscriptionOfferPhaseConfig::setRelativeDiscount(const double &relative_discount) {
    m_relative_discount = relative_discount;
    m_relative_discount_isSet = true;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_relative_discount_Set() const{
    return m_relative_discount_isSet;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::is_relative_discount_Valid() const{
    return m_relative_discount_isValid;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_discounts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_regions_prices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_discount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOtherRegionsSubscriptionOfferPhaseConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
