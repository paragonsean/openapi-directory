/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSubscriptionOfferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSubscriptionOfferRequest::OAIUpdateSubscriptionOfferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSubscriptionOfferRequest::OAIUpdateSubscriptionOfferRequest() {
    this->initializeModel();
}

OAIUpdateSubscriptionOfferRequest::~OAIUpdateSubscriptionOfferRequest() {}

void OAIUpdateSubscriptionOfferRequest::initializeModel() {

    m_allow_missing_isSet = false;
    m_allow_missing_isValid = false;

    m_latency_tolerance_isSet = false;
    m_latency_tolerance_isValid = false;

    m_regions_version_isSet = false;
    m_regions_version_isValid = false;

    m_subscription_offer_isSet = false;
    m_subscription_offer_isValid = false;

    m_update_mask_isSet = false;
    m_update_mask_isValid = false;
}

void OAIUpdateSubscriptionOfferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSubscriptionOfferRequest::fromJsonObject(QJsonObject json) {

    m_allow_missing_isValid = ::OpenAPI::fromJsonValue(m_allow_missing, json[QString("allowMissing")]);
    m_allow_missing_isSet = !json[QString("allowMissing")].isNull() && m_allow_missing_isValid;

    m_latency_tolerance_isValid = ::OpenAPI::fromJsonValue(m_latency_tolerance, json[QString("latencyTolerance")]);
    m_latency_tolerance_isSet = !json[QString("latencyTolerance")].isNull() && m_latency_tolerance_isValid;

    m_regions_version_isValid = ::OpenAPI::fromJsonValue(m_regions_version, json[QString("regionsVersion")]);
    m_regions_version_isSet = !json[QString("regionsVersion")].isNull() && m_regions_version_isValid;

    m_subscription_offer_isValid = ::OpenAPI::fromJsonValue(m_subscription_offer, json[QString("subscriptionOffer")]);
    m_subscription_offer_isSet = !json[QString("subscriptionOffer")].isNull() && m_subscription_offer_isValid;

    m_update_mask_isValid = ::OpenAPI::fromJsonValue(m_update_mask, json[QString("updateMask")]);
    m_update_mask_isSet = !json[QString("updateMask")].isNull() && m_update_mask_isValid;
}

QString OAIUpdateSubscriptionOfferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSubscriptionOfferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_missing_isSet) {
        obj.insert(QString("allowMissing"), ::OpenAPI::toJsonValue(m_allow_missing));
    }
    if (m_latency_tolerance_isSet) {
        obj.insert(QString("latencyTolerance"), ::OpenAPI::toJsonValue(m_latency_tolerance));
    }
    if (m_regions_version.isSet()) {
        obj.insert(QString("regionsVersion"), ::OpenAPI::toJsonValue(m_regions_version));
    }
    if (m_subscription_offer.isSet()) {
        obj.insert(QString("subscriptionOffer"), ::OpenAPI::toJsonValue(m_subscription_offer));
    }
    if (m_update_mask_isSet) {
        obj.insert(QString("updateMask"), ::OpenAPI::toJsonValue(m_update_mask));
    }
    return obj;
}

bool OAIUpdateSubscriptionOfferRequest::isAllowMissing() const {
    return m_allow_missing;
}
void OAIUpdateSubscriptionOfferRequest::setAllowMissing(const bool &allow_missing) {
    m_allow_missing = allow_missing;
    m_allow_missing_isSet = true;
}

bool OAIUpdateSubscriptionOfferRequest::is_allow_missing_Set() const{
    return m_allow_missing_isSet;
}

bool OAIUpdateSubscriptionOfferRequest::is_allow_missing_Valid() const{
    return m_allow_missing_isValid;
}

QString OAIUpdateSubscriptionOfferRequest::getLatencyTolerance() const {
    return m_latency_tolerance;
}
void OAIUpdateSubscriptionOfferRequest::setLatencyTolerance(const QString &latency_tolerance) {
    m_latency_tolerance = latency_tolerance;
    m_latency_tolerance_isSet = true;
}

bool OAIUpdateSubscriptionOfferRequest::is_latency_tolerance_Set() const{
    return m_latency_tolerance_isSet;
}

bool OAIUpdateSubscriptionOfferRequest::is_latency_tolerance_Valid() const{
    return m_latency_tolerance_isValid;
}

OAIRegionsVersion OAIUpdateSubscriptionOfferRequest::getRegionsVersion() const {
    return m_regions_version;
}
void OAIUpdateSubscriptionOfferRequest::setRegionsVersion(const OAIRegionsVersion &regions_version) {
    m_regions_version = regions_version;
    m_regions_version_isSet = true;
}

bool OAIUpdateSubscriptionOfferRequest::is_regions_version_Set() const{
    return m_regions_version_isSet;
}

bool OAIUpdateSubscriptionOfferRequest::is_regions_version_Valid() const{
    return m_regions_version_isValid;
}

OAISubscriptionOffer OAIUpdateSubscriptionOfferRequest::getSubscriptionOffer() const {
    return m_subscription_offer;
}
void OAIUpdateSubscriptionOfferRequest::setSubscriptionOffer(const OAISubscriptionOffer &subscription_offer) {
    m_subscription_offer = subscription_offer;
    m_subscription_offer_isSet = true;
}

bool OAIUpdateSubscriptionOfferRequest::is_subscription_offer_Set() const{
    return m_subscription_offer_isSet;
}

bool OAIUpdateSubscriptionOfferRequest::is_subscription_offer_Valid() const{
    return m_subscription_offer_isValid;
}

QString OAIUpdateSubscriptionOfferRequest::getUpdateMask() const {
    return m_update_mask;
}
void OAIUpdateSubscriptionOfferRequest::setUpdateMask(const QString &update_mask) {
    m_update_mask = update_mask;
    m_update_mask_isSet = true;
}

bool OAIUpdateSubscriptionOfferRequest::is_update_mask_Set() const{
    return m_update_mask_isSet;
}

bool OAIUpdateSubscriptionOfferRequest::is_update_mask_Valid() const{
    return m_update_mask_isValid;
}

bool OAIUpdateSubscriptionOfferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_offer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSubscriptionOfferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
