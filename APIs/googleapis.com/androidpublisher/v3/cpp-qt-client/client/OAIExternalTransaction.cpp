/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalTransaction::OAIExternalTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalTransaction::OAIExternalTransaction() {
    this->initializeModel();
}

OAIExternalTransaction::~OAIExternalTransaction() {}

void OAIExternalTransaction::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_current_pre_tax_amount_isSet = false;
    m_current_pre_tax_amount_isValid = false;

    m_current_tax_amount_isSet = false;
    m_current_tax_amount_isValid = false;

    m_external_transaction_id_isSet = false;
    m_external_transaction_id_isValid = false;

    m_one_time_transaction_isSet = false;
    m_one_time_transaction_isValid = false;

    m_original_pre_tax_amount_isSet = false;
    m_original_pre_tax_amount_isValid = false;

    m_original_tax_amount_isSet = false;
    m_original_tax_amount_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_recurring_transaction_isSet = false;
    m_recurring_transaction_isValid = false;

    m_test_purchase_isSet = false;
    m_test_purchase_isValid = false;

    m_transaction_state_isSet = false;
    m_transaction_state_isValid = false;

    m_transaction_time_isSet = false;
    m_transaction_time_isValid = false;

    m_user_tax_address_isSet = false;
    m_user_tax_address_isValid = false;
}

void OAIExternalTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalTransaction::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_current_pre_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_current_pre_tax_amount, json[QString("currentPreTaxAmount")]);
    m_current_pre_tax_amount_isSet = !json[QString("currentPreTaxAmount")].isNull() && m_current_pre_tax_amount_isValid;

    m_current_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_current_tax_amount, json[QString("currentTaxAmount")]);
    m_current_tax_amount_isSet = !json[QString("currentTaxAmount")].isNull() && m_current_tax_amount_isValid;

    m_external_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_external_transaction_id, json[QString("externalTransactionId")]);
    m_external_transaction_id_isSet = !json[QString("externalTransactionId")].isNull() && m_external_transaction_id_isValid;

    m_one_time_transaction_isValid = ::OpenAPI::fromJsonValue(m_one_time_transaction, json[QString("oneTimeTransaction")]);
    m_one_time_transaction_isSet = !json[QString("oneTimeTransaction")].isNull() && m_one_time_transaction_isValid;

    m_original_pre_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_original_pre_tax_amount, json[QString("originalPreTaxAmount")]);
    m_original_pre_tax_amount_isSet = !json[QString("originalPreTaxAmount")].isNull() && m_original_pre_tax_amount_isValid;

    m_original_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_original_tax_amount, json[QString("originalTaxAmount")]);
    m_original_tax_amount_isSet = !json[QString("originalTaxAmount")].isNull() && m_original_tax_amount_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_recurring_transaction_isValid = ::OpenAPI::fromJsonValue(m_recurring_transaction, json[QString("recurringTransaction")]);
    m_recurring_transaction_isSet = !json[QString("recurringTransaction")].isNull() && m_recurring_transaction_isValid;

    m_test_purchase_isValid = ::OpenAPI::fromJsonValue(m_test_purchase, json[QString("testPurchase")]);
    m_test_purchase_isSet = !json[QString("testPurchase")].isNull() && m_test_purchase_isValid;

    m_transaction_state_isValid = ::OpenAPI::fromJsonValue(m_transaction_state, json[QString("transactionState")]);
    m_transaction_state_isSet = !json[QString("transactionState")].isNull() && m_transaction_state_isValid;

    m_transaction_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_time, json[QString("transactionTime")]);
    m_transaction_time_isSet = !json[QString("transactionTime")].isNull() && m_transaction_time_isValid;

    m_user_tax_address_isValid = ::OpenAPI::fromJsonValue(m_user_tax_address, json[QString("userTaxAddress")]);
    m_user_tax_address_isSet = !json[QString("userTaxAddress")].isNull() && m_user_tax_address_isValid;
}

QString OAIExternalTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_current_pre_tax_amount.isSet()) {
        obj.insert(QString("currentPreTaxAmount"), ::OpenAPI::toJsonValue(m_current_pre_tax_amount));
    }
    if (m_current_tax_amount.isSet()) {
        obj.insert(QString("currentTaxAmount"), ::OpenAPI::toJsonValue(m_current_tax_amount));
    }
    if (m_external_transaction_id_isSet) {
        obj.insert(QString("externalTransactionId"), ::OpenAPI::toJsonValue(m_external_transaction_id));
    }
    if (m_one_time_transaction.isSet()) {
        obj.insert(QString("oneTimeTransaction"), ::OpenAPI::toJsonValue(m_one_time_transaction));
    }
    if (m_original_pre_tax_amount.isSet()) {
        obj.insert(QString("originalPreTaxAmount"), ::OpenAPI::toJsonValue(m_original_pre_tax_amount));
    }
    if (m_original_tax_amount.isSet()) {
        obj.insert(QString("originalTaxAmount"), ::OpenAPI::toJsonValue(m_original_tax_amount));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_recurring_transaction.isSet()) {
        obj.insert(QString("recurringTransaction"), ::OpenAPI::toJsonValue(m_recurring_transaction));
    }
    if (m_test_purchase_isSet) {
        obj.insert(QString("testPurchase"), ::OpenAPI::toJsonValue(m_test_purchase));
    }
    if (m_transaction_state_isSet) {
        obj.insert(QString("transactionState"), ::OpenAPI::toJsonValue(m_transaction_state));
    }
    if (m_transaction_time_isSet) {
        obj.insert(QString("transactionTime"), ::OpenAPI::toJsonValue(m_transaction_time));
    }
    if (m_user_tax_address.isSet()) {
        obj.insert(QString("userTaxAddress"), ::OpenAPI::toJsonValue(m_user_tax_address));
    }
    return obj;
}

QString OAIExternalTransaction::getCreateTime() const {
    return m_create_time;
}
void OAIExternalTransaction::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIExternalTransaction::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIExternalTransaction::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIPrice OAIExternalTransaction::getCurrentPreTaxAmount() const {
    return m_current_pre_tax_amount;
}
void OAIExternalTransaction::setCurrentPreTaxAmount(const OAIPrice &current_pre_tax_amount) {
    m_current_pre_tax_amount = current_pre_tax_amount;
    m_current_pre_tax_amount_isSet = true;
}

bool OAIExternalTransaction::is_current_pre_tax_amount_Set() const{
    return m_current_pre_tax_amount_isSet;
}

bool OAIExternalTransaction::is_current_pre_tax_amount_Valid() const{
    return m_current_pre_tax_amount_isValid;
}

OAIPrice OAIExternalTransaction::getCurrentTaxAmount() const {
    return m_current_tax_amount;
}
void OAIExternalTransaction::setCurrentTaxAmount(const OAIPrice &current_tax_amount) {
    m_current_tax_amount = current_tax_amount;
    m_current_tax_amount_isSet = true;
}

bool OAIExternalTransaction::is_current_tax_amount_Set() const{
    return m_current_tax_amount_isSet;
}

bool OAIExternalTransaction::is_current_tax_amount_Valid() const{
    return m_current_tax_amount_isValid;
}

QString OAIExternalTransaction::getExternalTransactionId() const {
    return m_external_transaction_id;
}
void OAIExternalTransaction::setExternalTransactionId(const QString &external_transaction_id) {
    m_external_transaction_id = external_transaction_id;
    m_external_transaction_id_isSet = true;
}

bool OAIExternalTransaction::is_external_transaction_id_Set() const{
    return m_external_transaction_id_isSet;
}

bool OAIExternalTransaction::is_external_transaction_id_Valid() const{
    return m_external_transaction_id_isValid;
}

OAIOneTimeExternalTransaction OAIExternalTransaction::getOneTimeTransaction() const {
    return m_one_time_transaction;
}
void OAIExternalTransaction::setOneTimeTransaction(const OAIOneTimeExternalTransaction &one_time_transaction) {
    m_one_time_transaction = one_time_transaction;
    m_one_time_transaction_isSet = true;
}

bool OAIExternalTransaction::is_one_time_transaction_Set() const{
    return m_one_time_transaction_isSet;
}

bool OAIExternalTransaction::is_one_time_transaction_Valid() const{
    return m_one_time_transaction_isValid;
}

OAIPrice OAIExternalTransaction::getOriginalPreTaxAmount() const {
    return m_original_pre_tax_amount;
}
void OAIExternalTransaction::setOriginalPreTaxAmount(const OAIPrice &original_pre_tax_amount) {
    m_original_pre_tax_amount = original_pre_tax_amount;
    m_original_pre_tax_amount_isSet = true;
}

bool OAIExternalTransaction::is_original_pre_tax_amount_Set() const{
    return m_original_pre_tax_amount_isSet;
}

bool OAIExternalTransaction::is_original_pre_tax_amount_Valid() const{
    return m_original_pre_tax_amount_isValid;
}

OAIPrice OAIExternalTransaction::getOriginalTaxAmount() const {
    return m_original_tax_amount;
}
void OAIExternalTransaction::setOriginalTaxAmount(const OAIPrice &original_tax_amount) {
    m_original_tax_amount = original_tax_amount;
    m_original_tax_amount_isSet = true;
}

bool OAIExternalTransaction::is_original_tax_amount_Set() const{
    return m_original_tax_amount_isSet;
}

bool OAIExternalTransaction::is_original_tax_amount_Valid() const{
    return m_original_tax_amount_isValid;
}

QString OAIExternalTransaction::getPackageName() const {
    return m_package_name;
}
void OAIExternalTransaction::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIExternalTransaction::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIExternalTransaction::is_package_name_Valid() const{
    return m_package_name_isValid;
}

OAIRecurringExternalTransaction OAIExternalTransaction::getRecurringTransaction() const {
    return m_recurring_transaction;
}
void OAIExternalTransaction::setRecurringTransaction(const OAIRecurringExternalTransaction &recurring_transaction) {
    m_recurring_transaction = recurring_transaction;
    m_recurring_transaction_isSet = true;
}

bool OAIExternalTransaction::is_recurring_transaction_Set() const{
    return m_recurring_transaction_isSet;
}

bool OAIExternalTransaction::is_recurring_transaction_Valid() const{
    return m_recurring_transaction_isValid;
}

OAIObject OAIExternalTransaction::getTestPurchase() const {
    return m_test_purchase;
}
void OAIExternalTransaction::setTestPurchase(const OAIObject &test_purchase) {
    m_test_purchase = test_purchase;
    m_test_purchase_isSet = true;
}

bool OAIExternalTransaction::is_test_purchase_Set() const{
    return m_test_purchase_isSet;
}

bool OAIExternalTransaction::is_test_purchase_Valid() const{
    return m_test_purchase_isValid;
}

QString OAIExternalTransaction::getTransactionState() const {
    return m_transaction_state;
}
void OAIExternalTransaction::setTransactionState(const QString &transaction_state) {
    m_transaction_state = transaction_state;
    m_transaction_state_isSet = true;
}

bool OAIExternalTransaction::is_transaction_state_Set() const{
    return m_transaction_state_isSet;
}

bool OAIExternalTransaction::is_transaction_state_Valid() const{
    return m_transaction_state_isValid;
}

QString OAIExternalTransaction::getTransactionTime() const {
    return m_transaction_time;
}
void OAIExternalTransaction::setTransactionTime(const QString &transaction_time) {
    m_transaction_time = transaction_time;
    m_transaction_time_isSet = true;
}

bool OAIExternalTransaction::is_transaction_time_Set() const{
    return m_transaction_time_isSet;
}

bool OAIExternalTransaction::is_transaction_time_Valid() const{
    return m_transaction_time_isValid;
}

OAIExternalTransactionAddress OAIExternalTransaction::getUserTaxAddress() const {
    return m_user_tax_address;
}
void OAIExternalTransaction::setUserTaxAddress(const OAIExternalTransactionAddress &user_tax_address) {
    m_user_tax_address = user_tax_address;
    m_user_tax_address_isSet = true;
}

bool OAIExternalTransaction::is_user_tax_address_Set() const{
    return m_user_tax_address_isSet;
}

bool OAIExternalTransaction::is_user_tax_address_Valid() const{
    return m_user_tax_address_isValid;
}

bool OAIExternalTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_pre_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_time_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_pre_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_tax_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_tax_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
