/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_base_plans_isSet = false;
    m_base_plans_isValid = false;

    m_listings_isSet = false;
    m_listings_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_tax_and_compliance_settings_isSet = false;
    m_tax_and_compliance_settings_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_base_plans_isValid = ::OpenAPI::fromJsonValue(m_base_plans, json[QString("basePlans")]);
    m_base_plans_isSet = !json[QString("basePlans")].isNull() && m_base_plans_isValid;

    m_listings_isValid = ::OpenAPI::fromJsonValue(m_listings, json[QString("listings")]);
    m_listings_isSet = !json[QString("listings")].isNull() && m_listings_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_tax_and_compliance_settings_isValid = ::OpenAPI::fromJsonValue(m_tax_and_compliance_settings, json[QString("taxAndComplianceSettings")]);
    m_tax_and_compliance_settings_isSet = !json[QString("taxAndComplianceSettings")].isNull() && m_tax_and_compliance_settings_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_base_plans.size() > 0) {
        obj.insert(QString("basePlans"), ::OpenAPI::toJsonValue(m_base_plans));
    }
    if (m_listings.size() > 0) {
        obj.insert(QString("listings"), ::OpenAPI::toJsonValue(m_listings));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_tax_and_compliance_settings.isSet()) {
        obj.insert(QString("taxAndComplianceSettings"), ::OpenAPI::toJsonValue(m_tax_and_compliance_settings));
    }
    return obj;
}

bool OAISubscription::isArchived() const {
    return m_archived;
}
void OAISubscription::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAISubscription::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAISubscription::is_archived_Valid() const{
    return m_archived_isValid;
}

QList<OAIBasePlan> OAISubscription::getBasePlans() const {
    return m_base_plans;
}
void OAISubscription::setBasePlans(const QList<OAIBasePlan> &base_plans) {
    m_base_plans = base_plans;
    m_base_plans_isSet = true;
}

bool OAISubscription::is_base_plans_Set() const{
    return m_base_plans_isSet;
}

bool OAISubscription::is_base_plans_Valid() const{
    return m_base_plans_isValid;
}

QList<OAISubscriptionListing> OAISubscription::getListings() const {
    return m_listings;
}
void OAISubscription::setListings(const QList<OAISubscriptionListing> &listings) {
    m_listings = listings;
    m_listings_isSet = true;
}

bool OAISubscription::is_listings_Set() const{
    return m_listings_isSet;
}

bool OAISubscription::is_listings_Valid() const{
    return m_listings_isValid;
}

QString OAISubscription::getPackageName() const {
    return m_package_name;
}
void OAISubscription::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAISubscription::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAISubscription::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAISubscription::getProductId() const {
    return m_product_id;
}
void OAISubscription::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISubscription::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISubscription::is_product_id_Valid() const{
    return m_product_id_isValid;
}

OAISubscriptionTaxAndComplianceSettings OAISubscription::getTaxAndComplianceSettings() const {
    return m_tax_and_compliance_settings;
}
void OAISubscription::setTaxAndComplianceSettings(const OAISubscriptionTaxAndComplianceSettings &tax_and_compliance_settings) {
    m_tax_and_compliance_settings = tax_and_compliance_settings;
    m_tax_and_compliance_settings_isSet = true;
}

bool OAISubscription::is_tax_and_compliance_settings_Set() const{
    return m_tax_and_compliance_settings_isSet;
}

bool OAISubscription::is_tax_and_compliance_settings_Valid() const{
    return m_tax_and_compliance_settings_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_plans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_listings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_and_compliance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
