/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMonetizationApi_H
#define OAI_OAIMonetizationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateBasePlanRequest.h"
#include "OAIActivateSubscriptionOfferRequest.h"
#include "OAIBatchGetSubscriptionOffersRequest.h"
#include "OAIBatchGetSubscriptionOffersResponse.h"
#include "OAIBatchGetSubscriptionsResponse.h"
#include "OAIBatchMigrateBasePlanPricesRequest.h"
#include "OAIBatchMigrateBasePlanPricesResponse.h"
#include "OAIBatchUpdateBasePlanStatesRequest.h"
#include "OAIBatchUpdateBasePlanStatesResponse.h"
#include "OAIBatchUpdateSubscriptionOfferStatesRequest.h"
#include "OAIBatchUpdateSubscriptionOfferStatesResponse.h"
#include "OAIBatchUpdateSubscriptionOffersRequest.h"
#include "OAIBatchUpdateSubscriptionOffersResponse.h"
#include "OAIBatchUpdateSubscriptionsRequest.h"
#include "OAIBatchUpdateSubscriptionsResponse.h"
#include "OAIConvertRegionPricesRequest.h"
#include "OAIConvertRegionPricesResponse.h"
#include "OAIDeactivateBasePlanRequest.h"
#include "OAIDeactivateSubscriptionOfferRequest.h"
#include "OAIListSubscriptionOffersResponse.h"
#include "OAIListSubscriptionsResponse.h"
#include "OAIMigrateBasePlanPricesRequest.h"
#include "OAIObject.h"
#include "OAISubscription.h"
#include "OAISubscriptionOffer.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMonetizationApi : public QObject {
    Q_OBJECT

public:
    OAIMonetizationApi(const int timeOut = 0);
    ~OAIMonetizationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_convert_region_prices_request OAIConvertRegionPricesRequest [optional]
    */
    virtual void androidpublisher_monetization_convertRegionPrices(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIConvertRegionPricesRequest> &oai_convert_region_prices_request = ::OpenAPI::OptionalParam<OAIConvertRegionPricesRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_archive(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_activate_base_plan_request OAIActivateBasePlanRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_activate(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIActivateBasePlanRequest> &oai_activate_base_plan_request = ::OpenAPI::OptionalParam<OAIActivateBasePlanRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_migrate_base_plan_prices_request OAIBatchMigrateBasePlanPricesRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_batchMigratePrices(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchMigrateBasePlanPricesRequest> &oai_batch_migrate_base_plan_prices_request = ::OpenAPI::OptionalParam<OAIBatchMigrateBasePlanPricesRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_base_plan_states_request OAIBatchUpdateBasePlanStatesRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStates(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateBasePlanStatesRequest> &oai_batch_update_base_plan_states_request = ::OpenAPI::OptionalParam<OAIBatchUpdateBasePlanStatesRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_deactivate_base_plan_request OAIDeactivateBasePlanRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_deactivate(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeactivateBasePlanRequest> &oai_deactivate_base_plan_request = ::OpenAPI::OptionalParam<OAIDeactivateBasePlanRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_delete(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_migrate_base_plan_prices_request OAIMigrateBasePlanPricesRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_migratePrices(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIMigrateBasePlanPricesRequest> &oai_migrate_base_plan_prices_request = ::OpenAPI::OptionalParam<OAIMigrateBasePlanPricesRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_activate_subscription_offer_request OAIActivateSubscriptionOfferRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_activate(const QString &package_name, const QString &product_id, const QString &base_plan_id, const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIActivateSubscriptionOfferRequest> &oai_activate_subscription_offer_request = ::OpenAPI::OptionalParam<OAIActivateSubscriptionOfferRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_get_subscription_offers_request OAIBatchGetSubscriptionOffersRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_batchGet(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchGetSubscriptionOffersRequest> &oai_batch_get_subscription_offers_request = ::OpenAPI::OptionalParam<OAIBatchGetSubscriptionOffersRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_subscription_offers_request OAIBatchUpdateSubscriptionOffersRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdate(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionOffersRequest> &oai_batch_update_subscription_offers_request = ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionOffersRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_subscription_offer_states_request OAIBatchUpdateSubscriptionOfferStatesRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStates(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionOfferStatesRequest> &oai_batch_update_subscription_offer_states_request = ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionOfferStatesRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  offer_id QString [optional]
    * @param[in]  regions_version_version QString [optional]
    * @param[in]  oai_subscription_offer OAISubscriptionOffer [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_create(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offer_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions_version_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscriptionOffer> &oai_subscription_offer = ::OpenAPI::OptionalParam<OAISubscriptionOffer>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_deactivate_subscription_offer_request OAIDeactivateSubscriptionOfferRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_deactivate(const QString &package_name, const QString &product_id, const QString &base_plan_id, const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeactivateSubscriptionOfferRequest> &oai_deactivate_subscription_offer_request = ::OpenAPI::OptionalParam<OAIDeactivateSubscriptionOfferRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_delete(const QString &package_name, const QString &product_id, const QString &base_plan_id, const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_get(const QString &package_name, const QString &product_id, const QString &base_plan_id, const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_list(const QString &package_name, const QString &product_id, const QString &base_plan_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  base_plan_id QString [required]
    * @param[in]  offer_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  latency_tolerance QString [optional]
    * @param[in]  regions_version_version QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_subscription_offer OAISubscriptionOffer [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_basePlans_offers_patch(const QString &package_name, const QString &product_id, const QString &base_plan_id, const QString &offer_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &latency_tolerance = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions_version_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscriptionOffer> &oai_subscription_offer = ::OpenAPI::OptionalParam<OAISubscriptionOffer>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  product_ids QList<QString> [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_batchGet(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &product_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_update_subscriptions_request OAIBatchUpdateSubscriptionsRequest [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_batchUpdate(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionsRequest> &oai_batch_update_subscriptions_request = ::OpenAPI::OptionalParam<OAIBatchUpdateSubscriptionsRequest>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  product_id QString [optional]
    * @param[in]  regions_version_version QString [optional]
    * @param[in]  oai_subscription OAISubscription [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_create(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions_version_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscription> &oai_subscription = ::OpenAPI::OptionalParam<OAISubscription>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_delete(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_get(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_archived bool [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_list(const QString &package_name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_archived = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  package_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  allow_missing bool [optional]
    * @param[in]  latency_tolerance QString [optional]
    * @param[in]  regions_version_version QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_subscription OAISubscription [optional]
    */
    virtual void androidpublisher_monetization_subscriptions_patch(const QString &package_name, const QString &product_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &allow_missing = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &latency_tolerance = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &regions_version_version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISubscription> &oai_subscription = ::OpenAPI::OptionalParam<OAISubscription>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void androidpublisher_monetization_convertRegionPricesCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_archiveCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_activateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_deactivateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_createCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_batchGetCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_batchUpdateCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_createCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_deleteCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_getCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_listCallback(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_patchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void androidpublisher_monetization_convertRegionPricesSignal(OAIConvertRegionPricesResponse summary);
    void androidpublisher_monetization_subscriptions_archiveSignal(OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_activateSignal(OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignal(OAIBatchMigrateBasePlanPricesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignal(OAIBatchUpdateBasePlanStatesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignal(OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignal();
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignal(OAIObject summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignal(OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignal(OAIBatchGetSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignal(OAIBatchUpdateSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignal(OAIBatchUpdateSubscriptionOfferStatesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignal(OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignal(OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignal();
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignal(OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignal(OAIListSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignal(OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_batchGetSignal(OAIBatchGetSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_batchUpdateSignal(OAIBatchUpdateSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_createSignal(OAISubscription summary);
    void androidpublisher_monetization_subscriptions_deleteSignal();
    void androidpublisher_monetization_subscriptions_getSignal(OAISubscription summary);
    void androidpublisher_monetization_subscriptions_listSignal(OAIListSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_patchSignal(OAISubscription summary);


    void androidpublisher_monetization_convertRegionPricesSignalFull(OAIHttpRequestWorker *worker, OAIConvertRegionPricesResponse summary);
    void androidpublisher_monetization_subscriptions_archiveSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_activateSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalFull(OAIHttpRequestWorker *worker, OAIBatchMigrateBasePlanPricesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateBasePlanStatesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalFull(OAIHttpRequestWorker *worker, OAIBatchGetSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateSubscriptionOfferStatesResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignalFull(OAIHttpRequestWorker *worker, OAIListSubscriptionOffersResponse summary);
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionOffer summary);
    void androidpublisher_monetization_subscriptions_batchGetSignalFull(OAIHttpRequestWorker *worker, OAIBatchGetSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_batchUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_createSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void androidpublisher_monetization_subscriptions_deleteSignalFull(OAIHttpRequestWorker *worker);
    void androidpublisher_monetization_subscriptions_getSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);
    void androidpublisher_monetization_subscriptions_listSignalFull(OAIHttpRequestWorker *worker, OAIListSubscriptionsResponse summary);
    void androidpublisher_monetization_subscriptions_patchSignalFull(OAIHttpRequestWorker *worker, OAISubscription summary);

    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_convertRegionPricesSignalError() instead")
    void androidpublisher_monetization_convertRegionPricesSignalE(OAIConvertRegionPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_convertRegionPricesSignalError(OAIConvertRegionPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_archiveSignalError() instead")
    void androidpublisher_monetization_subscriptions_archiveSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_archiveSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_activateSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_activateSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_activateSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalE(OAIBatchMigrateBasePlanPricesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalError(OAIBatchMigrateBasePlanPricesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalE(OAIBatchUpdateBasePlanStatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalError(OAIBatchUpdateBasePlanStatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_deactivateSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_deleteSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalE(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalError(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalE(OAIBatchGetSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalError(OAIBatchGetSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalE(OAIBatchUpdateSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalError(OAIBatchUpdateSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalE(OAIBatchUpdateSubscriptionOfferStatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalError(OAIBatchUpdateSubscriptionOfferStatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_createSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignalE(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignalError(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalE(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalError(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_getSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignalE(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignalError(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_listSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignalE(OAIListSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignalError(OAIListSubscriptionOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalError() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalE(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalError(OAISubscriptionOffer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_batchGetSignalError() instead")
    void androidpublisher_monetization_subscriptions_batchGetSignalE(OAIBatchGetSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_batchGetSignalError(OAIBatchGetSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_batchUpdateSignalError() instead")
    void androidpublisher_monetization_subscriptions_batchUpdateSignalE(OAIBatchUpdateSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_batchUpdateSignalError(OAIBatchUpdateSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_createSignalError() instead")
    void androidpublisher_monetization_subscriptions_createSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_createSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_deleteSignalError() instead")
    void androidpublisher_monetization_subscriptions_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_getSignalError() instead")
    void androidpublisher_monetization_subscriptions_getSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_getSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_listSignalError() instead")
    void androidpublisher_monetization_subscriptions_listSignalE(OAIListSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_listSignalError(OAIListSubscriptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_patchSignalError() instead")
    void androidpublisher_monetization_subscriptions_patchSignalE(OAISubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_patchSignalError(OAISubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_convertRegionPricesSignalErrorFull() instead")
    void androidpublisher_monetization_convertRegionPricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_convertRegionPricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_archiveSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_archiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_archiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_activateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_batchMigratePricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_batchUpdateStatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_deactivateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_deactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_deleteSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_migratePricesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_batchUpdateStatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_createSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deactivateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_getSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_listSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_basePlans_offers_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_batchGetSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_batchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_batchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_batchUpdateSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_batchUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_batchUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_createSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_deleteSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_getSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_listSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use androidpublisher_monetization_subscriptions_patchSignalErrorFull() instead")
    void androidpublisher_monetization_subscriptions_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void androidpublisher_monetization_subscriptions_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
