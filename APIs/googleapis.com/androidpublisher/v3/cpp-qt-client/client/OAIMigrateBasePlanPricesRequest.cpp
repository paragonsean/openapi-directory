/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrateBasePlanPricesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrateBasePlanPricesRequest::OAIMigrateBasePlanPricesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrateBasePlanPricesRequest::OAIMigrateBasePlanPricesRequest() {
    this->initializeModel();
}

OAIMigrateBasePlanPricesRequest::~OAIMigrateBasePlanPricesRequest() {}

void OAIMigrateBasePlanPricesRequest::initializeModel() {

    m_base_plan_id_isSet = false;
    m_base_plan_id_isValid = false;

    m_latency_tolerance_isSet = false;
    m_latency_tolerance_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_regional_price_migrations_isSet = false;
    m_regional_price_migrations_isValid = false;

    m_regions_version_isSet = false;
    m_regions_version_isValid = false;
}

void OAIMigrateBasePlanPricesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrateBasePlanPricesRequest::fromJsonObject(QJsonObject json) {

    m_base_plan_id_isValid = ::OpenAPI::fromJsonValue(m_base_plan_id, json[QString("basePlanId")]);
    m_base_plan_id_isSet = !json[QString("basePlanId")].isNull() && m_base_plan_id_isValid;

    m_latency_tolerance_isValid = ::OpenAPI::fromJsonValue(m_latency_tolerance, json[QString("latencyTolerance")]);
    m_latency_tolerance_isSet = !json[QString("latencyTolerance")].isNull() && m_latency_tolerance_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_regional_price_migrations_isValid = ::OpenAPI::fromJsonValue(m_regional_price_migrations, json[QString("regionalPriceMigrations")]);
    m_regional_price_migrations_isSet = !json[QString("regionalPriceMigrations")].isNull() && m_regional_price_migrations_isValid;

    m_regions_version_isValid = ::OpenAPI::fromJsonValue(m_regions_version, json[QString("regionsVersion")]);
    m_regions_version_isSet = !json[QString("regionsVersion")].isNull() && m_regions_version_isValid;
}

QString OAIMigrateBasePlanPricesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrateBasePlanPricesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base_plan_id_isSet) {
        obj.insert(QString("basePlanId"), ::OpenAPI::toJsonValue(m_base_plan_id));
    }
    if (m_latency_tolerance_isSet) {
        obj.insert(QString("latencyTolerance"), ::OpenAPI::toJsonValue(m_latency_tolerance));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_regional_price_migrations.size() > 0) {
        obj.insert(QString("regionalPriceMigrations"), ::OpenAPI::toJsonValue(m_regional_price_migrations));
    }
    if (m_regions_version.isSet()) {
        obj.insert(QString("regionsVersion"), ::OpenAPI::toJsonValue(m_regions_version));
    }
    return obj;
}

QString OAIMigrateBasePlanPricesRequest::getBasePlanId() const {
    return m_base_plan_id;
}
void OAIMigrateBasePlanPricesRequest::setBasePlanId(const QString &base_plan_id) {
    m_base_plan_id = base_plan_id;
    m_base_plan_id_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_base_plan_id_Set() const{
    return m_base_plan_id_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_base_plan_id_Valid() const{
    return m_base_plan_id_isValid;
}

QString OAIMigrateBasePlanPricesRequest::getLatencyTolerance() const {
    return m_latency_tolerance;
}
void OAIMigrateBasePlanPricesRequest::setLatencyTolerance(const QString &latency_tolerance) {
    m_latency_tolerance = latency_tolerance;
    m_latency_tolerance_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_latency_tolerance_Set() const{
    return m_latency_tolerance_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_latency_tolerance_Valid() const{
    return m_latency_tolerance_isValid;
}

QString OAIMigrateBasePlanPricesRequest::getPackageName() const {
    return m_package_name;
}
void OAIMigrateBasePlanPricesRequest::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIMigrateBasePlanPricesRequest::getProductId() const {
    return m_product_id;
}
void OAIMigrateBasePlanPricesRequest::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QList<OAIRegionalPriceMigrationConfig> OAIMigrateBasePlanPricesRequest::getRegionalPriceMigrations() const {
    return m_regional_price_migrations;
}
void OAIMigrateBasePlanPricesRequest::setRegionalPriceMigrations(const QList<OAIRegionalPriceMigrationConfig> &regional_price_migrations) {
    m_regional_price_migrations = regional_price_migrations;
    m_regional_price_migrations_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_regional_price_migrations_Set() const{
    return m_regional_price_migrations_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_regional_price_migrations_Valid() const{
    return m_regional_price_migrations_isValid;
}

OAIRegionsVersion OAIMigrateBasePlanPricesRequest::getRegionsVersion() const {
    return m_regions_version;
}
void OAIMigrateBasePlanPricesRequest::setRegionsVersion(const OAIRegionsVersion &regions_version) {
    m_regions_version = regions_version;
    m_regions_version_isSet = true;
}

bool OAIMigrateBasePlanPricesRequest::is_regions_version_Set() const{
    return m_regions_version_isSet;
}

bool OAIMigrateBasePlanPricesRequest::is_regions_version_Valid() const{
    return m_regions_version_isValid;
}

bool OAIMigrateBasePlanPricesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_price_migrations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrateBasePlanPricesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
