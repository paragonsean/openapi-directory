/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackCountryAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackCountryAvailability::OAITrackCountryAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackCountryAvailability::OAITrackCountryAvailability() {
    this->initializeModel();
}

OAITrackCountryAvailability::~OAITrackCountryAvailability() {}

void OAITrackCountryAvailability::initializeModel() {

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_rest_of_world_isSet = false;
    m_rest_of_world_isValid = false;

    m_sync_with_production_isSet = false;
    m_sync_with_production_isValid = false;
}

void OAITrackCountryAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackCountryAvailability::fromJsonObject(QJsonObject json) {

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_rest_of_world_isValid = ::OpenAPI::fromJsonValue(m_rest_of_world, json[QString("restOfWorld")]);
    m_rest_of_world_isSet = !json[QString("restOfWorld")].isNull() && m_rest_of_world_isValid;

    m_sync_with_production_isValid = ::OpenAPI::fromJsonValue(m_sync_with_production, json[QString("syncWithProduction")]);
    m_sync_with_production_isSet = !json[QString("syncWithProduction")].isNull() && m_sync_with_production_isValid;
}

QString OAITrackCountryAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackCountryAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_rest_of_world_isSet) {
        obj.insert(QString("restOfWorld"), ::OpenAPI::toJsonValue(m_rest_of_world));
    }
    if (m_sync_with_production_isSet) {
        obj.insert(QString("syncWithProduction"), ::OpenAPI::toJsonValue(m_sync_with_production));
    }
    return obj;
}

QList<OAITrackTargetedCountry> OAITrackCountryAvailability::getCountries() const {
    return m_countries;
}
void OAITrackCountryAvailability::setCountries(const QList<OAITrackTargetedCountry> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAITrackCountryAvailability::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAITrackCountryAvailability::is_countries_Valid() const{
    return m_countries_isValid;
}

bool OAITrackCountryAvailability::isRestOfWorld() const {
    return m_rest_of_world;
}
void OAITrackCountryAvailability::setRestOfWorld(const bool &rest_of_world) {
    m_rest_of_world = rest_of_world;
    m_rest_of_world_isSet = true;
}

bool OAITrackCountryAvailability::is_rest_of_world_Set() const{
    return m_rest_of_world_isSet;
}

bool OAITrackCountryAvailability::is_rest_of_world_Valid() const{
    return m_rest_of_world_isValid;
}

bool OAITrackCountryAvailability::isSyncWithProduction() const {
    return m_sync_with_production;
}
void OAITrackCountryAvailability::setSyncWithProduction(const bool &sync_with_production) {
    m_sync_with_production = sync_with_production;
    m_sync_with_production_isSet = true;
}

bool OAITrackCountryAvailability::is_sync_with_production_Set() const{
    return m_sync_with_production_isSet;
}

bool OAITrackCountryAvailability::is_sync_with_production_Valid() const{
    return m_sync_with_production_isValid;
}

bool OAITrackCountryAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_of_world_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_with_production_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackCountryAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
