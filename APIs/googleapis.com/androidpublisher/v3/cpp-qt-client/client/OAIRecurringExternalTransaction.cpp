/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringExternalTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringExternalTransaction::OAIRecurringExternalTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringExternalTransaction::OAIRecurringExternalTransaction() {
    this->initializeModel();
}

OAIRecurringExternalTransaction::~OAIRecurringExternalTransaction() {}

void OAIRecurringExternalTransaction::initializeModel() {

    m_external_subscription_isSet = false;
    m_external_subscription_isValid = false;

    m_external_transaction_token_isSet = false;
    m_external_transaction_token_isValid = false;

    m_initial_external_transaction_id_isSet = false;
    m_initial_external_transaction_id_isValid = false;

    m_migrated_transaction_program_isSet = false;
    m_migrated_transaction_program_isValid = false;
}

void OAIRecurringExternalTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringExternalTransaction::fromJsonObject(QJsonObject json) {

    m_external_subscription_isValid = ::OpenAPI::fromJsonValue(m_external_subscription, json[QString("externalSubscription")]);
    m_external_subscription_isSet = !json[QString("externalSubscription")].isNull() && m_external_subscription_isValid;

    m_external_transaction_token_isValid = ::OpenAPI::fromJsonValue(m_external_transaction_token, json[QString("externalTransactionToken")]);
    m_external_transaction_token_isSet = !json[QString("externalTransactionToken")].isNull() && m_external_transaction_token_isValid;

    m_initial_external_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_initial_external_transaction_id, json[QString("initialExternalTransactionId")]);
    m_initial_external_transaction_id_isSet = !json[QString("initialExternalTransactionId")].isNull() && m_initial_external_transaction_id_isValid;

    m_migrated_transaction_program_isValid = ::OpenAPI::fromJsonValue(m_migrated_transaction_program, json[QString("migratedTransactionProgram")]);
    m_migrated_transaction_program_isSet = !json[QString("migratedTransactionProgram")].isNull() && m_migrated_transaction_program_isValid;
}

QString OAIRecurringExternalTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringExternalTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_external_subscription.isSet()) {
        obj.insert(QString("externalSubscription"), ::OpenAPI::toJsonValue(m_external_subscription));
    }
    if (m_external_transaction_token_isSet) {
        obj.insert(QString("externalTransactionToken"), ::OpenAPI::toJsonValue(m_external_transaction_token));
    }
    if (m_initial_external_transaction_id_isSet) {
        obj.insert(QString("initialExternalTransactionId"), ::OpenAPI::toJsonValue(m_initial_external_transaction_id));
    }
    if (m_migrated_transaction_program_isSet) {
        obj.insert(QString("migratedTransactionProgram"), ::OpenAPI::toJsonValue(m_migrated_transaction_program));
    }
    return obj;
}

OAIExternalSubscription OAIRecurringExternalTransaction::getExternalSubscription() const {
    return m_external_subscription;
}
void OAIRecurringExternalTransaction::setExternalSubscription(const OAIExternalSubscription &external_subscription) {
    m_external_subscription = external_subscription;
    m_external_subscription_isSet = true;
}

bool OAIRecurringExternalTransaction::is_external_subscription_Set() const{
    return m_external_subscription_isSet;
}

bool OAIRecurringExternalTransaction::is_external_subscription_Valid() const{
    return m_external_subscription_isValid;
}

QString OAIRecurringExternalTransaction::getExternalTransactionToken() const {
    return m_external_transaction_token;
}
void OAIRecurringExternalTransaction::setExternalTransactionToken(const QString &external_transaction_token) {
    m_external_transaction_token = external_transaction_token;
    m_external_transaction_token_isSet = true;
}

bool OAIRecurringExternalTransaction::is_external_transaction_token_Set() const{
    return m_external_transaction_token_isSet;
}

bool OAIRecurringExternalTransaction::is_external_transaction_token_Valid() const{
    return m_external_transaction_token_isValid;
}

QString OAIRecurringExternalTransaction::getInitialExternalTransactionId() const {
    return m_initial_external_transaction_id;
}
void OAIRecurringExternalTransaction::setInitialExternalTransactionId(const QString &initial_external_transaction_id) {
    m_initial_external_transaction_id = initial_external_transaction_id;
    m_initial_external_transaction_id_isSet = true;
}

bool OAIRecurringExternalTransaction::is_initial_external_transaction_id_Set() const{
    return m_initial_external_transaction_id_isSet;
}

bool OAIRecurringExternalTransaction::is_initial_external_transaction_id_Valid() const{
    return m_initial_external_transaction_id_isValid;
}

QString OAIRecurringExternalTransaction::getMigratedTransactionProgram() const {
    return m_migrated_transaction_program;
}
void OAIRecurringExternalTransaction::setMigratedTransactionProgram(const QString &migrated_transaction_program) {
    m_migrated_transaction_program = migrated_transaction_program;
    m_migrated_transaction_program_isSet = true;
}

bool OAIRecurringExternalTransaction::is_migrated_transaction_program_Set() const{
    return m_migrated_transaction_program_isSet;
}

bool OAIRecurringExternalTransaction::is_migrated_transaction_program_Valid() const{
    return m_migrated_transaction_program_isValid;
}

bool OAIRecurringExternalTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_subscription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_transaction_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_external_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_transaction_program_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringExternalTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
