/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserComment::OAIUserComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserComment::OAIUserComment() {
    this->initializeModel();
}

OAIUserComment::~OAIUserComment() {}

void OAIUserComment::initializeModel() {

    m_android_os_version_isSet = false;
    m_android_os_version_isValid = false;

    m_app_version_code_isSet = false;
    m_app_version_code_isValid = false;

    m_app_version_name_isSet = false;
    m_app_version_name_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_device_metadata_isSet = false;
    m_device_metadata_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_original_text_isSet = false;
    m_original_text_isValid = false;

    m_reviewer_language_isSet = false;
    m_reviewer_language_isValid = false;

    m_star_rating_isSet = false;
    m_star_rating_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumbs_down_count_isSet = false;
    m_thumbs_down_count_isValid = false;

    m_thumbs_up_count_isSet = false;
    m_thumbs_up_count_isValid = false;
}

void OAIUserComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserComment::fromJsonObject(QJsonObject json) {

    m_android_os_version_isValid = ::OpenAPI::fromJsonValue(m_android_os_version, json[QString("androidOsVersion")]);
    m_android_os_version_isSet = !json[QString("androidOsVersion")].isNull() && m_android_os_version_isValid;

    m_app_version_code_isValid = ::OpenAPI::fromJsonValue(m_app_version_code, json[QString("appVersionCode")]);
    m_app_version_code_isSet = !json[QString("appVersionCode")].isNull() && m_app_version_code_isValid;

    m_app_version_name_isValid = ::OpenAPI::fromJsonValue(m_app_version_name, json[QString("appVersionName")]);
    m_app_version_name_isSet = !json[QString("appVersionName")].isNull() && m_app_version_name_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_device_metadata_isValid = ::OpenAPI::fromJsonValue(m_device_metadata, json[QString("deviceMetadata")]);
    m_device_metadata_isSet = !json[QString("deviceMetadata")].isNull() && m_device_metadata_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_original_text_isValid = ::OpenAPI::fromJsonValue(m_original_text, json[QString("originalText")]);
    m_original_text_isSet = !json[QString("originalText")].isNull() && m_original_text_isValid;

    m_reviewer_language_isValid = ::OpenAPI::fromJsonValue(m_reviewer_language, json[QString("reviewerLanguage")]);
    m_reviewer_language_isSet = !json[QString("reviewerLanguage")].isNull() && m_reviewer_language_isValid;

    m_star_rating_isValid = ::OpenAPI::fromJsonValue(m_star_rating, json[QString("starRating")]);
    m_star_rating_isSet = !json[QString("starRating")].isNull() && m_star_rating_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumbs_down_count_isValid = ::OpenAPI::fromJsonValue(m_thumbs_down_count, json[QString("thumbsDownCount")]);
    m_thumbs_down_count_isSet = !json[QString("thumbsDownCount")].isNull() && m_thumbs_down_count_isValid;

    m_thumbs_up_count_isValid = ::OpenAPI::fromJsonValue(m_thumbs_up_count, json[QString("thumbsUpCount")]);
    m_thumbs_up_count_isSet = !json[QString("thumbsUpCount")].isNull() && m_thumbs_up_count_isValid;
}

QString OAIUserComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserComment::asJsonObject() const {
    QJsonObject obj;
    if (m_android_os_version_isSet) {
        obj.insert(QString("androidOsVersion"), ::OpenAPI::toJsonValue(m_android_os_version));
    }
    if (m_app_version_code_isSet) {
        obj.insert(QString("appVersionCode"), ::OpenAPI::toJsonValue(m_app_version_code));
    }
    if (m_app_version_name_isSet) {
        obj.insert(QString("appVersionName"), ::OpenAPI::toJsonValue(m_app_version_name));
    }
    if (m_device_isSet) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_device_metadata.isSet()) {
        obj.insert(QString("deviceMetadata"), ::OpenAPI::toJsonValue(m_device_metadata));
    }
    if (m_last_modified.isSet()) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_original_text_isSet) {
        obj.insert(QString("originalText"), ::OpenAPI::toJsonValue(m_original_text));
    }
    if (m_reviewer_language_isSet) {
        obj.insert(QString("reviewerLanguage"), ::OpenAPI::toJsonValue(m_reviewer_language));
    }
    if (m_star_rating_isSet) {
        obj.insert(QString("starRating"), ::OpenAPI::toJsonValue(m_star_rating));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumbs_down_count_isSet) {
        obj.insert(QString("thumbsDownCount"), ::OpenAPI::toJsonValue(m_thumbs_down_count));
    }
    if (m_thumbs_up_count_isSet) {
        obj.insert(QString("thumbsUpCount"), ::OpenAPI::toJsonValue(m_thumbs_up_count));
    }
    return obj;
}

qint32 OAIUserComment::getAndroidOsVersion() const {
    return m_android_os_version;
}
void OAIUserComment::setAndroidOsVersion(const qint32 &android_os_version) {
    m_android_os_version = android_os_version;
    m_android_os_version_isSet = true;
}

bool OAIUserComment::is_android_os_version_Set() const{
    return m_android_os_version_isSet;
}

bool OAIUserComment::is_android_os_version_Valid() const{
    return m_android_os_version_isValid;
}

qint32 OAIUserComment::getAppVersionCode() const {
    return m_app_version_code;
}
void OAIUserComment::setAppVersionCode(const qint32 &app_version_code) {
    m_app_version_code = app_version_code;
    m_app_version_code_isSet = true;
}

bool OAIUserComment::is_app_version_code_Set() const{
    return m_app_version_code_isSet;
}

bool OAIUserComment::is_app_version_code_Valid() const{
    return m_app_version_code_isValid;
}

QString OAIUserComment::getAppVersionName() const {
    return m_app_version_name;
}
void OAIUserComment::setAppVersionName(const QString &app_version_name) {
    m_app_version_name = app_version_name;
    m_app_version_name_isSet = true;
}

bool OAIUserComment::is_app_version_name_Set() const{
    return m_app_version_name_isSet;
}

bool OAIUserComment::is_app_version_name_Valid() const{
    return m_app_version_name_isValid;
}

QString OAIUserComment::getDevice() const {
    return m_device;
}
void OAIUserComment::setDevice(const QString &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIUserComment::is_device_Set() const{
    return m_device_isSet;
}

bool OAIUserComment::is_device_Valid() const{
    return m_device_isValid;
}

OAIDeviceMetadata OAIUserComment::getDeviceMetadata() const {
    return m_device_metadata;
}
void OAIUserComment::setDeviceMetadata(const OAIDeviceMetadata &device_metadata) {
    m_device_metadata = device_metadata;
    m_device_metadata_isSet = true;
}

bool OAIUserComment::is_device_metadata_Set() const{
    return m_device_metadata_isSet;
}

bool OAIUserComment::is_device_metadata_Valid() const{
    return m_device_metadata_isValid;
}

OAITimestamp OAIUserComment::getLastModified() const {
    return m_last_modified;
}
void OAIUserComment::setLastModified(const OAITimestamp &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIUserComment::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIUserComment::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIUserComment::getOriginalText() const {
    return m_original_text;
}
void OAIUserComment::setOriginalText(const QString &original_text) {
    m_original_text = original_text;
    m_original_text_isSet = true;
}

bool OAIUserComment::is_original_text_Set() const{
    return m_original_text_isSet;
}

bool OAIUserComment::is_original_text_Valid() const{
    return m_original_text_isValid;
}

QString OAIUserComment::getReviewerLanguage() const {
    return m_reviewer_language;
}
void OAIUserComment::setReviewerLanguage(const QString &reviewer_language) {
    m_reviewer_language = reviewer_language;
    m_reviewer_language_isSet = true;
}

bool OAIUserComment::is_reviewer_language_Set() const{
    return m_reviewer_language_isSet;
}

bool OAIUserComment::is_reviewer_language_Valid() const{
    return m_reviewer_language_isValid;
}

qint32 OAIUserComment::getStarRating() const {
    return m_star_rating;
}
void OAIUserComment::setStarRating(const qint32 &star_rating) {
    m_star_rating = star_rating;
    m_star_rating_isSet = true;
}

bool OAIUserComment::is_star_rating_Set() const{
    return m_star_rating_isSet;
}

bool OAIUserComment::is_star_rating_Valid() const{
    return m_star_rating_isValid;
}

QString OAIUserComment::getText() const {
    return m_text;
}
void OAIUserComment::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIUserComment::is_text_Set() const{
    return m_text_isSet;
}

bool OAIUserComment::is_text_Valid() const{
    return m_text_isValid;
}

qint32 OAIUserComment::getThumbsDownCount() const {
    return m_thumbs_down_count;
}
void OAIUserComment::setThumbsDownCount(const qint32 &thumbs_down_count) {
    m_thumbs_down_count = thumbs_down_count;
    m_thumbs_down_count_isSet = true;
}

bool OAIUserComment::is_thumbs_down_count_Set() const{
    return m_thumbs_down_count_isSet;
}

bool OAIUserComment::is_thumbs_down_count_Valid() const{
    return m_thumbs_down_count_isValid;
}

qint32 OAIUserComment::getThumbsUpCount() const {
    return m_thumbs_up_count;
}
void OAIUserComment::setThumbsUpCount(const qint32 &thumbs_up_count) {
    m_thumbs_up_count = thumbs_up_count;
    m_thumbs_up_count_isSet = true;
}

bool OAIUserComment::is_thumbs_up_count_Set() const{
    return m_thumbs_up_count_isSet;
}

bool OAIUserComment::is_thumbs_up_count_Valid() const{
    return m_thumbs_up_count_isValid;
}

bool OAIUserComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_star_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbs_down_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbs_up_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
