/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExternalTransaction.h
 *
 * The details of an external transaction.
 */

#ifndef OAIExternalTransaction_H
#define OAIExternalTransaction_H

#include <QJsonObject>

#include "OAIExternalTransactionAddress.h"
#include "OAIObject.h"
#include "OAIOneTimeExternalTransaction.h"
#include "OAIPrice.h"
#include "OAIRecurringExternalTransaction.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPrice;
class OAIOneTimeExternalTransaction;
class OAIRecurringExternalTransaction;
class OAIExternalTransactionAddress;

class OAIExternalTransaction : public OAIObject {
public:
    OAIExternalTransaction();
    OAIExternalTransaction(QString json);
    ~OAIExternalTransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    OAIPrice getCurrentPreTaxAmount() const;
    void setCurrentPreTaxAmount(const OAIPrice &current_pre_tax_amount);
    bool is_current_pre_tax_amount_Set() const;
    bool is_current_pre_tax_amount_Valid() const;

    OAIPrice getCurrentTaxAmount() const;
    void setCurrentTaxAmount(const OAIPrice &current_tax_amount);
    bool is_current_tax_amount_Set() const;
    bool is_current_tax_amount_Valid() const;

    QString getExternalTransactionId() const;
    void setExternalTransactionId(const QString &external_transaction_id);
    bool is_external_transaction_id_Set() const;
    bool is_external_transaction_id_Valid() const;

    OAIOneTimeExternalTransaction getOneTimeTransaction() const;
    void setOneTimeTransaction(const OAIOneTimeExternalTransaction &one_time_transaction);
    bool is_one_time_transaction_Set() const;
    bool is_one_time_transaction_Valid() const;

    OAIPrice getOriginalPreTaxAmount() const;
    void setOriginalPreTaxAmount(const OAIPrice &original_pre_tax_amount);
    bool is_original_pre_tax_amount_Set() const;
    bool is_original_pre_tax_amount_Valid() const;

    OAIPrice getOriginalTaxAmount() const;
    void setOriginalTaxAmount(const OAIPrice &original_tax_amount);
    bool is_original_tax_amount_Set() const;
    bool is_original_tax_amount_Valid() const;

    QString getPackageName() const;
    void setPackageName(const QString &package_name);
    bool is_package_name_Set() const;
    bool is_package_name_Valid() const;

    OAIRecurringExternalTransaction getRecurringTransaction() const;
    void setRecurringTransaction(const OAIRecurringExternalTransaction &recurring_transaction);
    bool is_recurring_transaction_Set() const;
    bool is_recurring_transaction_Valid() const;

    OAIObject getTestPurchase() const;
    void setTestPurchase(const OAIObject &test_purchase);
    bool is_test_purchase_Set() const;
    bool is_test_purchase_Valid() const;

    QString getTransactionState() const;
    void setTransactionState(const QString &transaction_state);
    bool is_transaction_state_Set() const;
    bool is_transaction_state_Valid() const;

    QString getTransactionTime() const;
    void setTransactionTime(const QString &transaction_time);
    bool is_transaction_time_Set() const;
    bool is_transaction_time_Valid() const;

    OAIExternalTransactionAddress getUserTaxAddress() const;
    void setUserTaxAddress(const OAIExternalTransactionAddress &user_tax_address);
    bool is_user_tax_address_Set() const;
    bool is_user_tax_address_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    OAIPrice m_current_pre_tax_amount;
    bool m_current_pre_tax_amount_isSet;
    bool m_current_pre_tax_amount_isValid;

    OAIPrice m_current_tax_amount;
    bool m_current_tax_amount_isSet;
    bool m_current_tax_amount_isValid;

    QString m_external_transaction_id;
    bool m_external_transaction_id_isSet;
    bool m_external_transaction_id_isValid;

    OAIOneTimeExternalTransaction m_one_time_transaction;
    bool m_one_time_transaction_isSet;
    bool m_one_time_transaction_isValid;

    OAIPrice m_original_pre_tax_amount;
    bool m_original_pre_tax_amount_isSet;
    bool m_original_pre_tax_amount_isValid;

    OAIPrice m_original_tax_amount;
    bool m_original_tax_amount_isSet;
    bool m_original_tax_amount_isValid;

    QString m_package_name;
    bool m_package_name_isSet;
    bool m_package_name_isValid;

    OAIRecurringExternalTransaction m_recurring_transaction;
    bool m_recurring_transaction_isSet;
    bool m_recurring_transaction_isValid;

    OAIObject m_test_purchase;
    bool m_test_purchase_isSet;
    bool m_test_purchase_isValid;

    QString m_transaction_state;
    bool m_transaction_state_isSet;
    bool m_transaction_state_isValid;

    QString m_transaction_time;
    bool m_transaction_time_isSet;
    bool m_transaction_time_isValid;

    OAIExternalTransactionAddress m_user_tax_address;
    bool m_user_tax_address_isSet;
    bool m_user_tax_address_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExternalTransaction)

#endif // OAIExternalTransaction_H
