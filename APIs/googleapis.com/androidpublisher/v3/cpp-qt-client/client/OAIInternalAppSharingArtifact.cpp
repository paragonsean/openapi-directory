/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalAppSharingArtifact.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalAppSharingArtifact::OAIInternalAppSharingArtifact(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalAppSharingArtifact::OAIInternalAppSharingArtifact() {
    this->initializeModel();
}

OAIInternalAppSharingArtifact::~OAIInternalAppSharingArtifact() {}

void OAIInternalAppSharingArtifact::initializeModel() {

    m_certificate_fingerprint_isSet = false;
    m_certificate_fingerprint_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_sha256_isSet = false;
    m_sha256_isValid = false;
}

void OAIInternalAppSharingArtifact::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalAppSharingArtifact::fromJsonObject(QJsonObject json) {

    m_certificate_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_fingerprint, json[QString("certificateFingerprint")]);
    m_certificate_fingerprint_isSet = !json[QString("certificateFingerprint")].isNull() && m_certificate_fingerprint_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;
}

QString OAIInternalAppSharingArtifact::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalAppSharingArtifact::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_fingerprint_isSet) {
        obj.insert(QString("certificateFingerprint"), ::OpenAPI::toJsonValue(m_certificate_fingerprint));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    return obj;
}

QString OAIInternalAppSharingArtifact::getCertificateFingerprint() const {
    return m_certificate_fingerprint;
}
void OAIInternalAppSharingArtifact::setCertificateFingerprint(const QString &certificate_fingerprint) {
    m_certificate_fingerprint = certificate_fingerprint;
    m_certificate_fingerprint_isSet = true;
}

bool OAIInternalAppSharingArtifact::is_certificate_fingerprint_Set() const{
    return m_certificate_fingerprint_isSet;
}

bool OAIInternalAppSharingArtifact::is_certificate_fingerprint_Valid() const{
    return m_certificate_fingerprint_isValid;
}

QString OAIInternalAppSharingArtifact::getDownloadUrl() const {
    return m_download_url;
}
void OAIInternalAppSharingArtifact::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIInternalAppSharingArtifact::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIInternalAppSharingArtifact::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIInternalAppSharingArtifact::getSha256() const {
    return m_sha256;
}
void OAIInternalAppSharingArtifact::setSha256(const QString &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIInternalAppSharingArtifact::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIInternalAppSharingArtifact::is_sha256_Valid() const{
    return m_sha256_isValid;
}

bool OAIInternalAppSharingArtifact::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalAppSharingArtifact::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
