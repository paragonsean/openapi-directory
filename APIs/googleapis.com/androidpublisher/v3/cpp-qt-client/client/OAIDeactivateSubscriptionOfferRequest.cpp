/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeactivateSubscriptionOfferRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeactivateSubscriptionOfferRequest::OAIDeactivateSubscriptionOfferRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeactivateSubscriptionOfferRequest::OAIDeactivateSubscriptionOfferRequest() {
    this->initializeModel();
}

OAIDeactivateSubscriptionOfferRequest::~OAIDeactivateSubscriptionOfferRequest() {}

void OAIDeactivateSubscriptionOfferRequest::initializeModel() {

    m_base_plan_id_isSet = false;
    m_base_plan_id_isValid = false;

    m_latency_tolerance_isSet = false;
    m_latency_tolerance_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;
}

void OAIDeactivateSubscriptionOfferRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeactivateSubscriptionOfferRequest::fromJsonObject(QJsonObject json) {

    m_base_plan_id_isValid = ::OpenAPI::fromJsonValue(m_base_plan_id, json[QString("basePlanId")]);
    m_base_plan_id_isSet = !json[QString("basePlanId")].isNull() && m_base_plan_id_isValid;

    m_latency_tolerance_isValid = ::OpenAPI::fromJsonValue(m_latency_tolerance, json[QString("latencyTolerance")]);
    m_latency_tolerance_isSet = !json[QString("latencyTolerance")].isNull() && m_latency_tolerance_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;
}

QString OAIDeactivateSubscriptionOfferRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeactivateSubscriptionOfferRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_base_plan_id_isSet) {
        obj.insert(QString("basePlanId"), ::OpenAPI::toJsonValue(m_base_plan_id));
    }
    if (m_latency_tolerance_isSet) {
        obj.insert(QString("latencyTolerance"), ::OpenAPI::toJsonValue(m_latency_tolerance));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    return obj;
}

QString OAIDeactivateSubscriptionOfferRequest::getBasePlanId() const {
    return m_base_plan_id;
}
void OAIDeactivateSubscriptionOfferRequest::setBasePlanId(const QString &base_plan_id) {
    m_base_plan_id = base_plan_id;
    m_base_plan_id_isSet = true;
}

bool OAIDeactivateSubscriptionOfferRequest::is_base_plan_id_Set() const{
    return m_base_plan_id_isSet;
}

bool OAIDeactivateSubscriptionOfferRequest::is_base_plan_id_Valid() const{
    return m_base_plan_id_isValid;
}

QString OAIDeactivateSubscriptionOfferRequest::getLatencyTolerance() const {
    return m_latency_tolerance;
}
void OAIDeactivateSubscriptionOfferRequest::setLatencyTolerance(const QString &latency_tolerance) {
    m_latency_tolerance = latency_tolerance;
    m_latency_tolerance_isSet = true;
}

bool OAIDeactivateSubscriptionOfferRequest::is_latency_tolerance_Set() const{
    return m_latency_tolerance_isSet;
}

bool OAIDeactivateSubscriptionOfferRequest::is_latency_tolerance_Valid() const{
    return m_latency_tolerance_isValid;
}

QString OAIDeactivateSubscriptionOfferRequest::getOfferId() const {
    return m_offer_id;
}
void OAIDeactivateSubscriptionOfferRequest::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIDeactivateSubscriptionOfferRequest::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIDeactivateSubscriptionOfferRequest::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QString OAIDeactivateSubscriptionOfferRequest::getPackageName() const {
    return m_package_name;
}
void OAIDeactivateSubscriptionOfferRequest::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIDeactivateSubscriptionOfferRequest::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIDeactivateSubscriptionOfferRequest::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIDeactivateSubscriptionOfferRequest::getProductId() const {
    return m_product_id;
}
void OAIDeactivateSubscriptionOfferRequest::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIDeactivateSubscriptionOfferRequest::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIDeactivateSubscriptionOfferRequest::is_product_id_Valid() const{
    return m_product_id_isValid;
}

bool OAIDeactivateSubscriptionOfferRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeactivateSubscriptionOfferRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
