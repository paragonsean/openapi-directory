/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewReplyResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviewReplyResult::OAIReviewReplyResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviewReplyResult::OAIReviewReplyResult() {
    this->initializeModel();
}

OAIReviewReplyResult::~OAIReviewReplyResult() {}

void OAIReviewReplyResult::initializeModel() {

    m_last_edited_isSet = false;
    m_last_edited_isValid = false;

    m_reply_text_isSet = false;
    m_reply_text_isValid = false;
}

void OAIReviewReplyResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviewReplyResult::fromJsonObject(QJsonObject json) {

    m_last_edited_isValid = ::OpenAPI::fromJsonValue(m_last_edited, json[QString("lastEdited")]);
    m_last_edited_isSet = !json[QString("lastEdited")].isNull() && m_last_edited_isValid;

    m_reply_text_isValid = ::OpenAPI::fromJsonValue(m_reply_text, json[QString("replyText")]);
    m_reply_text_isSet = !json[QString("replyText")].isNull() && m_reply_text_isValid;
}

QString OAIReviewReplyResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviewReplyResult::asJsonObject() const {
    QJsonObject obj;
    if (m_last_edited.isSet()) {
        obj.insert(QString("lastEdited"), ::OpenAPI::toJsonValue(m_last_edited));
    }
    if (m_reply_text_isSet) {
        obj.insert(QString("replyText"), ::OpenAPI::toJsonValue(m_reply_text));
    }
    return obj;
}

OAITimestamp OAIReviewReplyResult::getLastEdited() const {
    return m_last_edited;
}
void OAIReviewReplyResult::setLastEdited(const OAITimestamp &last_edited) {
    m_last_edited = last_edited;
    m_last_edited_isSet = true;
}

bool OAIReviewReplyResult::is_last_edited_Set() const{
    return m_last_edited_isSet;
}

bool OAIReviewReplyResult::is_last_edited_Valid() const{
    return m_last_edited_isValid;
}

QString OAIReviewReplyResult::getReplyText() const {
    return m_reply_text;
}
void OAIReviewReplyResult::setReplyText(const QString &reply_text) {
    m_reply_text = reply_text;
    m_reply_text_isSet = true;
}

bool OAIReviewReplyResult::is_reply_text_Set() const{
    return m_reply_text_isSet;
}

bool OAIReviewReplyResult::is_reply_text_Valid() const{
    return m_reply_text_isValid;
}

bool OAIReviewReplyResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_edited.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviewReplyResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
