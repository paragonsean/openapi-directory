/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionListing.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionListing::OAISubscriptionListing(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionListing::OAISubscriptionListing() {
    this->initializeModel();
}

OAISubscriptionListing::~OAISubscriptionListing() {}

void OAISubscriptionListing::initializeModel() {

    m_benefits_isSet = false;
    m_benefits_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISubscriptionListing::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionListing::fromJsonObject(QJsonObject json) {

    m_benefits_isValid = ::OpenAPI::fromJsonValue(m_benefits, json[QString("benefits")]);
    m_benefits_isSet = !json[QString("benefits")].isNull() && m_benefits_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISubscriptionListing::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionListing::asJsonObject() const {
    QJsonObject obj;
    if (m_benefits.size() > 0) {
        obj.insert(QString("benefits"), ::OpenAPI::toJsonValue(m_benefits));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QList<QString> OAISubscriptionListing::getBenefits() const {
    return m_benefits;
}
void OAISubscriptionListing::setBenefits(const QList<QString> &benefits) {
    m_benefits = benefits;
    m_benefits_isSet = true;
}

bool OAISubscriptionListing::is_benefits_Set() const{
    return m_benefits_isSet;
}

bool OAISubscriptionListing::is_benefits_Valid() const{
    return m_benefits_isValid;
}

QString OAISubscriptionListing::getDescription() const {
    return m_description;
}
void OAISubscriptionListing::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubscriptionListing::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscriptionListing::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISubscriptionListing::getLanguageCode() const {
    return m_language_code;
}
void OAISubscriptionListing::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAISubscriptionListing::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAISubscriptionListing::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAISubscriptionListing::getTitle() const {
    return m_title;
}
void OAISubscriptionListing::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISubscriptionListing::is_title_Set() const{
    return m_title_isSet;
}

bool OAISubscriptionListing::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISubscriptionListing::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionListing::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
