/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceTierConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceTierConfig::OAIDeviceTierConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceTierConfig::OAIDeviceTierConfig() {
    this->initializeModel();
}

OAIDeviceTierConfig::~OAIDeviceTierConfig() {}

void OAIDeviceTierConfig::initializeModel() {

    m_device_groups_isSet = false;
    m_device_groups_isValid = false;

    m_device_tier_config_id_isSet = false;
    m_device_tier_config_id_isValid = false;

    m_device_tier_set_isSet = false;
    m_device_tier_set_isValid = false;

    m_user_country_sets_isSet = false;
    m_user_country_sets_isValid = false;
}

void OAIDeviceTierConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceTierConfig::fromJsonObject(QJsonObject json) {

    m_device_groups_isValid = ::OpenAPI::fromJsonValue(m_device_groups, json[QString("deviceGroups")]);
    m_device_groups_isSet = !json[QString("deviceGroups")].isNull() && m_device_groups_isValid;

    m_device_tier_config_id_isValid = ::OpenAPI::fromJsonValue(m_device_tier_config_id, json[QString("deviceTierConfigId")]);
    m_device_tier_config_id_isSet = !json[QString("deviceTierConfigId")].isNull() && m_device_tier_config_id_isValid;

    m_device_tier_set_isValid = ::OpenAPI::fromJsonValue(m_device_tier_set, json[QString("deviceTierSet")]);
    m_device_tier_set_isSet = !json[QString("deviceTierSet")].isNull() && m_device_tier_set_isValid;

    m_user_country_sets_isValid = ::OpenAPI::fromJsonValue(m_user_country_sets, json[QString("userCountrySets")]);
    m_user_country_sets_isSet = !json[QString("userCountrySets")].isNull() && m_user_country_sets_isValid;
}

QString OAIDeviceTierConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceTierConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_device_groups.size() > 0) {
        obj.insert(QString("deviceGroups"), ::OpenAPI::toJsonValue(m_device_groups));
    }
    if (m_device_tier_config_id_isSet) {
        obj.insert(QString("deviceTierConfigId"), ::OpenAPI::toJsonValue(m_device_tier_config_id));
    }
    if (m_device_tier_set.isSet()) {
        obj.insert(QString("deviceTierSet"), ::OpenAPI::toJsonValue(m_device_tier_set));
    }
    if (m_user_country_sets.size() > 0) {
        obj.insert(QString("userCountrySets"), ::OpenAPI::toJsonValue(m_user_country_sets));
    }
    return obj;
}

QList<OAIDeviceGroup> OAIDeviceTierConfig::getDeviceGroups() const {
    return m_device_groups;
}
void OAIDeviceTierConfig::setDeviceGroups(const QList<OAIDeviceGroup> &device_groups) {
    m_device_groups = device_groups;
    m_device_groups_isSet = true;
}

bool OAIDeviceTierConfig::is_device_groups_Set() const{
    return m_device_groups_isSet;
}

bool OAIDeviceTierConfig::is_device_groups_Valid() const{
    return m_device_groups_isValid;
}

QString OAIDeviceTierConfig::getDeviceTierConfigId() const {
    return m_device_tier_config_id;
}
void OAIDeviceTierConfig::setDeviceTierConfigId(const QString &device_tier_config_id) {
    m_device_tier_config_id = device_tier_config_id;
    m_device_tier_config_id_isSet = true;
}

bool OAIDeviceTierConfig::is_device_tier_config_id_Set() const{
    return m_device_tier_config_id_isSet;
}

bool OAIDeviceTierConfig::is_device_tier_config_id_Valid() const{
    return m_device_tier_config_id_isValid;
}

OAIDeviceTierSet OAIDeviceTierConfig::getDeviceTierSet() const {
    return m_device_tier_set;
}
void OAIDeviceTierConfig::setDeviceTierSet(const OAIDeviceTierSet &device_tier_set) {
    m_device_tier_set = device_tier_set;
    m_device_tier_set_isSet = true;
}

bool OAIDeviceTierConfig::is_device_tier_set_Set() const{
    return m_device_tier_set_isSet;
}

bool OAIDeviceTierConfig::is_device_tier_set_Valid() const{
    return m_device_tier_set_isValid;
}

QList<OAIUserCountrySet> OAIDeviceTierConfig::getUserCountrySets() const {
    return m_user_country_sets;
}
void OAIDeviceTierConfig::setUserCountrySets(const QList<OAIUserCountrySet> &user_country_sets) {
    m_user_country_sets = user_country_sets;
    m_user_country_sets_isSet = true;
}

bool OAIDeviceTierConfig::is_user_country_sets_Set() const{
    return m_user_country_sets_isSet;
}

bool OAIDeviceTierConfig::is_user_country_sets_Valid() const{
    return m_user_country_sets_isValid;
}

bool OAIDeviceTierConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_tier_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_tier_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_country_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceTierConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
