/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBundle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBundle::OAIBundle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBundle::OAIBundle() {
    this->initializeModel();
}

OAIBundle::~OAIBundle() {}

void OAIBundle::initializeModel() {

    m_sha1_isSet = false;
    m_sha1_isValid = false;

    m_sha256_isSet = false;
    m_sha256_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;
}

void OAIBundle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBundle::fromJsonObject(QJsonObject json) {

    m_sha1_isValid = ::OpenAPI::fromJsonValue(m_sha1, json[QString("sha1")]);
    m_sha1_isSet = !json[QString("sha1")].isNull() && m_sha1_isValid;

    m_sha256_isValid = ::OpenAPI::fromJsonValue(m_sha256, json[QString("sha256")]);
    m_sha256_isSet = !json[QString("sha256")].isNull() && m_sha256_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;
}

QString OAIBundle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBundle::asJsonObject() const {
    QJsonObject obj;
    if (m_sha1_isSet) {
        obj.insert(QString("sha1"), ::OpenAPI::toJsonValue(m_sha1));
    }
    if (m_sha256_isSet) {
        obj.insert(QString("sha256"), ::OpenAPI::toJsonValue(m_sha256));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    return obj;
}

QString OAIBundle::getSha1() const {
    return m_sha1;
}
void OAIBundle::setSha1(const QString &sha1) {
    m_sha1 = sha1;
    m_sha1_isSet = true;
}

bool OAIBundle::is_sha1_Set() const{
    return m_sha1_isSet;
}

bool OAIBundle::is_sha1_Valid() const{
    return m_sha1_isValid;
}

QString OAIBundle::getSha256() const {
    return m_sha256;
}
void OAIBundle::setSha256(const QString &sha256) {
    m_sha256 = sha256;
    m_sha256_isSet = true;
}

bool OAIBundle::is_sha256_Set() const{
    return m_sha256_isSet;
}

bool OAIBundle::is_sha256_Valid() const{
    return m_sha256_isValid;
}

qint32 OAIBundle::getVersionCode() const {
    return m_version_code;
}
void OAIBundle::setVersionCode(const qint32 &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIBundle::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIBundle::is_version_code_Valid() const{
    return m_version_code_isValid;
}

bool OAIBundle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sha1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBundle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
