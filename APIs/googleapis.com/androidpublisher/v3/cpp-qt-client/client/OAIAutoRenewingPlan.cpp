/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoRenewingPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoRenewingPlan::OAIAutoRenewingPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoRenewingPlan::OAIAutoRenewingPlan() {
    this->initializeModel();
}

OAIAutoRenewingPlan::~OAIAutoRenewingPlan() {}

void OAIAutoRenewingPlan::initializeModel() {

    m_auto_renew_enabled_isSet = false;
    m_auto_renew_enabled_isValid = false;

    m_price_change_details_isSet = false;
    m_price_change_details_isValid = false;
}

void OAIAutoRenewingPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoRenewingPlan::fromJsonObject(QJsonObject json) {

    m_auto_renew_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_renew_enabled, json[QString("autoRenewEnabled")]);
    m_auto_renew_enabled_isSet = !json[QString("autoRenewEnabled")].isNull() && m_auto_renew_enabled_isValid;

    m_price_change_details_isValid = ::OpenAPI::fromJsonValue(m_price_change_details, json[QString("priceChangeDetails")]);
    m_price_change_details_isSet = !json[QString("priceChangeDetails")].isNull() && m_price_change_details_isValid;
}

QString OAIAutoRenewingPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoRenewingPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_renew_enabled_isSet) {
        obj.insert(QString("autoRenewEnabled"), ::OpenAPI::toJsonValue(m_auto_renew_enabled));
    }
    if (m_price_change_details.isSet()) {
        obj.insert(QString("priceChangeDetails"), ::OpenAPI::toJsonValue(m_price_change_details));
    }
    return obj;
}

bool OAIAutoRenewingPlan::isAutoRenewEnabled() const {
    return m_auto_renew_enabled;
}
void OAIAutoRenewingPlan::setAutoRenewEnabled(const bool &auto_renew_enabled) {
    m_auto_renew_enabled = auto_renew_enabled;
    m_auto_renew_enabled_isSet = true;
}

bool OAIAutoRenewingPlan::is_auto_renew_enabled_Set() const{
    return m_auto_renew_enabled_isSet;
}

bool OAIAutoRenewingPlan::is_auto_renew_enabled_Valid() const{
    return m_auto_renew_enabled_isValid;
}

OAISubscriptionItemPriceChangeDetails OAIAutoRenewingPlan::getPriceChangeDetails() const {
    return m_price_change_details;
}
void OAIAutoRenewingPlan::setPriceChangeDetails(const OAISubscriptionItemPriceChangeDetails &price_change_details) {
    m_price_change_details = price_change_details;
    m_price_change_details_isSet = true;
}

bool OAIAutoRenewingPlan::is_price_change_details_Set() const{
    return m_price_change_details_isSet;
}

bool OAIAutoRenewingPlan::is_price_change_details_Valid() const{
    return m_price_change_details_isValid;
}

bool OAIAutoRenewingPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_renew_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_change_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoRenewingPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
