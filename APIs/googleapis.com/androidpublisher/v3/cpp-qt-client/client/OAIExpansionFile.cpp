/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpansionFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpansionFile::OAIExpansionFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpansionFile::OAIExpansionFile() {
    this->initializeModel();
}

OAIExpansionFile::~OAIExpansionFile() {}

void OAIExpansionFile::initializeModel() {

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_references_version_isSet = false;
    m_references_version_isValid = false;
}

void OAIExpansionFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpansionFile::fromJsonObject(QJsonObject json) {

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_references_version_isValid = ::OpenAPI::fromJsonValue(m_references_version, json[QString("referencesVersion")]);
    m_references_version_isSet = !json[QString("referencesVersion")].isNull() && m_references_version_isValid;
}

QString OAIExpansionFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpansionFile::asJsonObject() const {
    QJsonObject obj;
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_references_version_isSet) {
        obj.insert(QString("referencesVersion"), ::OpenAPI::toJsonValue(m_references_version));
    }
    return obj;
}

QString OAIExpansionFile::getFileSize() const {
    return m_file_size;
}
void OAIExpansionFile::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIExpansionFile::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIExpansionFile::is_file_size_Valid() const{
    return m_file_size_isValid;
}

qint32 OAIExpansionFile::getReferencesVersion() const {
    return m_references_version;
}
void OAIExpansionFile::setReferencesVersion(const qint32 &references_version) {
    m_references_version = references_version;
    m_references_version_isSet = true;
}

bool OAIExpansionFile::is_references_version_Set() const{
    return m_references_version_isSet;
}

bool OAIExpansionFile::is_references_version_Valid() const{
    return m_references_version_isValid;
}

bool OAIExpansionFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_references_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpansionFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
