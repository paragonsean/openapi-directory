/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionOffer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionOffer::OAISubscriptionOffer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionOffer::OAISubscriptionOffer() {
    this->initializeModel();
}

OAISubscriptionOffer::~OAISubscriptionOffer() {}

void OAISubscriptionOffer::initializeModel() {

    m_base_plan_id_isSet = false;
    m_base_plan_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_tags_isSet = false;
    m_offer_tags_isValid = false;

    m_other_regions_config_isSet = false;
    m_other_regions_config_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_phases_isSet = false;
    m_phases_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_regional_configs_isSet = false;
    m_regional_configs_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_targeting_isSet = false;
    m_targeting_isValid = false;
}

void OAISubscriptionOffer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionOffer::fromJsonObject(QJsonObject json) {

    m_base_plan_id_isValid = ::OpenAPI::fromJsonValue(m_base_plan_id, json[QString("basePlanId")]);
    m_base_plan_id_isSet = !json[QString("basePlanId")].isNull() && m_base_plan_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_offer_tags_isValid = ::OpenAPI::fromJsonValue(m_offer_tags, json[QString("offerTags")]);
    m_offer_tags_isSet = !json[QString("offerTags")].isNull() && m_offer_tags_isValid;

    m_other_regions_config_isValid = ::OpenAPI::fromJsonValue(m_other_regions_config, json[QString("otherRegionsConfig")]);
    m_other_regions_config_isSet = !json[QString("otherRegionsConfig")].isNull() && m_other_regions_config_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_phases_isValid = ::OpenAPI::fromJsonValue(m_phases, json[QString("phases")]);
    m_phases_isSet = !json[QString("phases")].isNull() && m_phases_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_regional_configs_isValid = ::OpenAPI::fromJsonValue(m_regional_configs, json[QString("regionalConfigs")]);
    m_regional_configs_isSet = !json[QString("regionalConfigs")].isNull() && m_regional_configs_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_targeting_isValid = ::OpenAPI::fromJsonValue(m_targeting, json[QString("targeting")]);
    m_targeting_isSet = !json[QString("targeting")].isNull() && m_targeting_isValid;
}

QString OAISubscriptionOffer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionOffer::asJsonObject() const {
    QJsonObject obj;
    if (m_base_plan_id_isSet) {
        obj.insert(QString("basePlanId"), ::OpenAPI::toJsonValue(m_base_plan_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_tags.size() > 0) {
        obj.insert(QString("offerTags"), ::OpenAPI::toJsonValue(m_offer_tags));
    }
    if (m_other_regions_config.isSet()) {
        obj.insert(QString("otherRegionsConfig"), ::OpenAPI::toJsonValue(m_other_regions_config));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_phases.size() > 0) {
        obj.insert(QString("phases"), ::OpenAPI::toJsonValue(m_phases));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_regional_configs.size() > 0) {
        obj.insert(QString("regionalConfigs"), ::OpenAPI::toJsonValue(m_regional_configs));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_targeting.isSet()) {
        obj.insert(QString("targeting"), ::OpenAPI::toJsonValue(m_targeting));
    }
    return obj;
}

QString OAISubscriptionOffer::getBasePlanId() const {
    return m_base_plan_id;
}
void OAISubscriptionOffer::setBasePlanId(const QString &base_plan_id) {
    m_base_plan_id = base_plan_id;
    m_base_plan_id_isSet = true;
}

bool OAISubscriptionOffer::is_base_plan_id_Set() const{
    return m_base_plan_id_isSet;
}

bool OAISubscriptionOffer::is_base_plan_id_Valid() const{
    return m_base_plan_id_isValid;
}

QString OAISubscriptionOffer::getOfferId() const {
    return m_offer_id;
}
void OAISubscriptionOffer::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAISubscriptionOffer::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAISubscriptionOffer::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<OAIOfferTag> OAISubscriptionOffer::getOfferTags() const {
    return m_offer_tags;
}
void OAISubscriptionOffer::setOfferTags(const QList<OAIOfferTag> &offer_tags) {
    m_offer_tags = offer_tags;
    m_offer_tags_isSet = true;
}

bool OAISubscriptionOffer::is_offer_tags_Set() const{
    return m_offer_tags_isSet;
}

bool OAISubscriptionOffer::is_offer_tags_Valid() const{
    return m_offer_tags_isValid;
}

OAIOtherRegionsSubscriptionOfferConfig OAISubscriptionOffer::getOtherRegionsConfig() const {
    return m_other_regions_config;
}
void OAISubscriptionOffer::setOtherRegionsConfig(const OAIOtherRegionsSubscriptionOfferConfig &other_regions_config) {
    m_other_regions_config = other_regions_config;
    m_other_regions_config_isSet = true;
}

bool OAISubscriptionOffer::is_other_regions_config_Set() const{
    return m_other_regions_config_isSet;
}

bool OAISubscriptionOffer::is_other_regions_config_Valid() const{
    return m_other_regions_config_isValid;
}

QString OAISubscriptionOffer::getPackageName() const {
    return m_package_name;
}
void OAISubscriptionOffer::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAISubscriptionOffer::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAISubscriptionOffer::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QList<OAISubscriptionOfferPhase> OAISubscriptionOffer::getPhases() const {
    return m_phases;
}
void OAISubscriptionOffer::setPhases(const QList<OAISubscriptionOfferPhase> &phases) {
    m_phases = phases;
    m_phases_isSet = true;
}

bool OAISubscriptionOffer::is_phases_Set() const{
    return m_phases_isSet;
}

bool OAISubscriptionOffer::is_phases_Valid() const{
    return m_phases_isValid;
}

QString OAISubscriptionOffer::getProductId() const {
    return m_product_id;
}
void OAISubscriptionOffer::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISubscriptionOffer::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISubscriptionOffer::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QList<OAIRegionalSubscriptionOfferConfig> OAISubscriptionOffer::getRegionalConfigs() const {
    return m_regional_configs;
}
void OAISubscriptionOffer::setRegionalConfigs(const QList<OAIRegionalSubscriptionOfferConfig> &regional_configs) {
    m_regional_configs = regional_configs;
    m_regional_configs_isSet = true;
}

bool OAISubscriptionOffer::is_regional_configs_Set() const{
    return m_regional_configs_isSet;
}

bool OAISubscriptionOffer::is_regional_configs_Valid() const{
    return m_regional_configs_isValid;
}

QString OAISubscriptionOffer::getState() const {
    return m_state;
}
void OAISubscriptionOffer::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscriptionOffer::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscriptionOffer::is_state_Valid() const{
    return m_state_isValid;
}

OAISubscriptionOfferTargeting OAISubscriptionOffer::getTargeting() const {
    return m_targeting;
}
void OAISubscriptionOffer::setTargeting(const OAISubscriptionOfferTargeting &targeting) {
    m_targeting = targeting;
    m_targeting_isSet = true;
}

bool OAISubscriptionOffer::is_targeting_Set() const{
    return m_targeting_isSet;
}

bool OAISubscriptionOffer::is_targeting_Valid() const{
    return m_targeting_isValid;
}

bool OAISubscriptionOffer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_regions_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regional_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionOffer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
