/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_access_state_isSet = false;
    m_access_state_isValid = false;

    m_developer_account_permissions_isSet = false;
    m_developer_account_permissions_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_partial_isSet = false;
    m_partial_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_access_state_isValid = ::OpenAPI::fromJsonValue(m_access_state, json[QString("accessState")]);
    m_access_state_isSet = !json[QString("accessState")].isNull() && m_access_state_isValid;

    m_developer_account_permissions_isValid = ::OpenAPI::fromJsonValue(m_developer_account_permissions, json[QString("developerAccountPermissions")]);
    m_developer_account_permissions_isSet = !json[QString("developerAccountPermissions")].isNull() && m_developer_account_permissions_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_grants_isValid = ::OpenAPI::fromJsonValue(m_grants, json[QString("grants")]);
    m_grants_isSet = !json[QString("grants")].isNull() && m_grants_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_partial_isValid = ::OpenAPI::fromJsonValue(m_partial, json[QString("partial")]);
    m_partial_isSet = !json[QString("partial")].isNull() && m_partial_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_access_state_isSet) {
        obj.insert(QString("accessState"), ::OpenAPI::toJsonValue(m_access_state));
    }
    if (m_developer_account_permissions.size() > 0) {
        obj.insert(QString("developerAccountPermissions"), ::OpenAPI::toJsonValue(m_developer_account_permissions));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_grants.size() > 0) {
        obj.insert(QString("grants"), ::OpenAPI::toJsonValue(m_grants));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_partial_isSet) {
        obj.insert(QString("partial"), ::OpenAPI::toJsonValue(m_partial));
    }
    return obj;
}

QString OAIUser::getAccessState() const {
    return m_access_state;
}
void OAIUser::setAccessState(const QString &access_state) {
    m_access_state = access_state;
    m_access_state_isSet = true;
}

bool OAIUser::is_access_state_Set() const{
    return m_access_state_isSet;
}

bool OAIUser::is_access_state_Valid() const{
    return m_access_state_isValid;
}

QList<QString> OAIUser::getDeveloperAccountPermissions() const {
    return m_developer_account_permissions;
}
void OAIUser::setDeveloperAccountPermissions(const QList<QString> &developer_account_permissions) {
    m_developer_account_permissions = developer_account_permissions;
    m_developer_account_permissions_isSet = true;
}

bool OAIUser::is_developer_account_permissions_Set() const{
    return m_developer_account_permissions_isSet;
}

bool OAIUser::is_developer_account_permissions_Valid() const{
    return m_developer_account_permissions_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getExpirationTime() const {
    return m_expiration_time;
}
void OAIUser::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIUser::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIUser::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QList<OAIGrant> OAIUser::getGrants() const {
    return m_grants;
}
void OAIUser::setGrants(const QList<OAIGrant> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIUser::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIUser::is_grants_Valid() const{
    return m_grants_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUser::isPartial() const {
    return m_partial;
}
void OAIUser::setPartial(const bool &partial) {
    m_partial = partial;
    m_partial_isSet = true;
}

bool OAIUser::is_partial_Set() const{
    return m_partial_isSet;
}

bool OAIUser::is_partial_Valid() const{
    return m_partial_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_account_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
