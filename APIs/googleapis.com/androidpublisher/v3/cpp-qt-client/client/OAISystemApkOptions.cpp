/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemApkOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemApkOptions::OAISystemApkOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemApkOptions::OAISystemApkOptions() {
    this->initializeModel();
}

OAISystemApkOptions::~OAISystemApkOptions() {}

void OAISystemApkOptions::initializeModel() {

    m_rotated_isSet = false;
    m_rotated_isValid = false;

    m_uncompressed_dex_files_isSet = false;
    m_uncompressed_dex_files_isValid = false;

    m_uncompressed_native_libraries_isSet = false;
    m_uncompressed_native_libraries_isValid = false;
}

void OAISystemApkOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemApkOptions::fromJsonObject(QJsonObject json) {

    m_rotated_isValid = ::OpenAPI::fromJsonValue(m_rotated, json[QString("rotated")]);
    m_rotated_isSet = !json[QString("rotated")].isNull() && m_rotated_isValid;

    m_uncompressed_dex_files_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_dex_files, json[QString("uncompressedDexFiles")]);
    m_uncompressed_dex_files_isSet = !json[QString("uncompressedDexFiles")].isNull() && m_uncompressed_dex_files_isValid;

    m_uncompressed_native_libraries_isValid = ::OpenAPI::fromJsonValue(m_uncompressed_native_libraries, json[QString("uncompressedNativeLibraries")]);
    m_uncompressed_native_libraries_isSet = !json[QString("uncompressedNativeLibraries")].isNull() && m_uncompressed_native_libraries_isValid;
}

QString OAISystemApkOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemApkOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_rotated_isSet) {
        obj.insert(QString("rotated"), ::OpenAPI::toJsonValue(m_rotated));
    }
    if (m_uncompressed_dex_files_isSet) {
        obj.insert(QString("uncompressedDexFiles"), ::OpenAPI::toJsonValue(m_uncompressed_dex_files));
    }
    if (m_uncompressed_native_libraries_isSet) {
        obj.insert(QString("uncompressedNativeLibraries"), ::OpenAPI::toJsonValue(m_uncompressed_native_libraries));
    }
    return obj;
}

bool OAISystemApkOptions::isRotated() const {
    return m_rotated;
}
void OAISystemApkOptions::setRotated(const bool &rotated) {
    m_rotated = rotated;
    m_rotated_isSet = true;
}

bool OAISystemApkOptions::is_rotated_Set() const{
    return m_rotated_isSet;
}

bool OAISystemApkOptions::is_rotated_Valid() const{
    return m_rotated_isValid;
}

bool OAISystemApkOptions::isUncompressedDexFiles() const {
    return m_uncompressed_dex_files;
}
void OAISystemApkOptions::setUncompressedDexFiles(const bool &uncompressed_dex_files) {
    m_uncompressed_dex_files = uncompressed_dex_files;
    m_uncompressed_dex_files_isSet = true;
}

bool OAISystemApkOptions::is_uncompressed_dex_files_Set() const{
    return m_uncompressed_dex_files_isSet;
}

bool OAISystemApkOptions::is_uncompressed_dex_files_Valid() const{
    return m_uncompressed_dex_files_isValid;
}

bool OAISystemApkOptions::isUncompressedNativeLibraries() const {
    return m_uncompressed_native_libraries;
}
void OAISystemApkOptions::setUncompressedNativeLibraries(const bool &uncompressed_native_libraries) {
    m_uncompressed_native_libraries = uncompressed_native_libraries;
    m_uncompressed_native_libraries_isSet = true;
}

bool OAISystemApkOptions::is_uncompressed_native_libraries_Set() const{
    return m_uncompressed_native_libraries_isSet;
}

bool OAISystemApkOptions::is_uncompressed_native_libraries_Valid() const{
    return m_uncompressed_native_libraries_isValid;
}

bool OAISystemApkOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rotated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_dex_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uncompressed_native_libraries_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemApkOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
