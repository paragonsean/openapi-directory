/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExternallyHostedApk.h
 *
 * Defines an APK available for this application that is hosted externally and not uploaded to Google Play. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
 */

#ifndef OAIExternallyHostedApk_H
#define OAIExternallyHostedApk_H

#include <QJsonObject>

#include "OAIUsesPermission.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUsesPermission;

class OAIExternallyHostedApk : public OAIObject {
public:
    OAIExternallyHostedApk();
    OAIExternallyHostedApk(QString json);
    ~OAIExternallyHostedApk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationLabel() const;
    void setApplicationLabel(const QString &application_label);
    bool is_application_label_Set() const;
    bool is_application_label_Valid() const;

    QList<QString> getCertificateBase64s() const;
    void setCertificateBase64s(const QList<QString> &certificate_base64s);
    bool is_certificate_base64s_Set() const;
    bool is_certificate_base64s_Valid() const;

    QString getExternallyHostedUrl() const;
    void setExternallyHostedUrl(const QString &externally_hosted_url);
    bool is_externally_hosted_url_Set() const;
    bool is_externally_hosted_url_Valid() const;

    QString getFileSha1Base64() const;
    void setFileSha1Base64(const QString &file_sha1_base64);
    bool is_file_sha1_base64_Set() const;
    bool is_file_sha1_base64_Valid() const;

    QString getFileSha256Base64() const;
    void setFileSha256Base64(const QString &file_sha256_base64);
    bool is_file_sha256_base64_Set() const;
    bool is_file_sha256_base64_Valid() const;

    QString getFileSize() const;
    void setFileSize(const QString &file_size);
    bool is_file_size_Set() const;
    bool is_file_size_Valid() const;

    QString getIconBase64() const;
    void setIconBase64(const QString &icon_base64);
    bool is_icon_base64_Set() const;
    bool is_icon_base64_Valid() const;

    qint32 getMaximumSdk() const;
    void setMaximumSdk(const qint32 &maximum_sdk);
    bool is_maximum_sdk_Set() const;
    bool is_maximum_sdk_Valid() const;

    qint32 getMinimumSdk() const;
    void setMinimumSdk(const qint32 &minimum_sdk);
    bool is_minimum_sdk_Set() const;
    bool is_minimum_sdk_Valid() const;

    QList<QString> getNativeCodes() const;
    void setNativeCodes(const QList<QString> &native_codes);
    bool is_native_codes_Set() const;
    bool is_native_codes_Valid() const;

    QString getPackageName() const;
    void setPackageName(const QString &package_name);
    bool is_package_name_Set() const;
    bool is_package_name_Valid() const;

    QList<QString> getUsesFeatures() const;
    void setUsesFeatures(const QList<QString> &uses_features);
    bool is_uses_features_Set() const;
    bool is_uses_features_Valid() const;

    QList<OAIUsesPermission> getUsesPermissions() const;
    void setUsesPermissions(const QList<OAIUsesPermission> &uses_permissions);
    bool is_uses_permissions_Set() const;
    bool is_uses_permissions_Valid() const;

    qint32 getVersionCode() const;
    void setVersionCode(const qint32 &version_code);
    bool is_version_code_Set() const;
    bool is_version_code_Valid() const;

    QString getVersionName() const;
    void setVersionName(const QString &version_name);
    bool is_version_name_Set() const;
    bool is_version_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_label;
    bool m_application_label_isSet;
    bool m_application_label_isValid;

    QList<QString> m_certificate_base64s;
    bool m_certificate_base64s_isSet;
    bool m_certificate_base64s_isValid;

    QString m_externally_hosted_url;
    bool m_externally_hosted_url_isSet;
    bool m_externally_hosted_url_isValid;

    QString m_file_sha1_base64;
    bool m_file_sha1_base64_isSet;
    bool m_file_sha1_base64_isValid;

    QString m_file_sha256_base64;
    bool m_file_sha256_base64_isSet;
    bool m_file_sha256_base64_isValid;

    QString m_file_size;
    bool m_file_size_isSet;
    bool m_file_size_isValid;

    QString m_icon_base64;
    bool m_icon_base64_isSet;
    bool m_icon_base64_isValid;

    qint32 m_maximum_sdk;
    bool m_maximum_sdk_isSet;
    bool m_maximum_sdk_isValid;

    qint32 m_minimum_sdk;
    bool m_minimum_sdk_isSet;
    bool m_minimum_sdk_isValid;

    QList<QString> m_native_codes;
    bool m_native_codes_isSet;
    bool m_native_codes_isValid;

    QString m_package_name;
    bool m_package_name_isSet;
    bool m_package_name_isValid;

    QList<QString> m_uses_features;
    bool m_uses_features_isSet;
    bool m_uses_features_isValid;

    QList<OAIUsesPermission> m_uses_permissions;
    bool m_uses_permissions_isSet;
    bool m_uses_permissions_isValid;

    qint32 m_version_code;
    bool m_version_code_isSet;
    bool m_version_code_isValid;

    QString m_version_name;
    bool m_version_name_isSet;
    bool m_version_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExternallyHostedApk)

#endif // OAIExternallyHostedApk_H
