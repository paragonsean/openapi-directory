/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeviceSelector.h
 *
 * Selector for a device group. A selector consists of a set of conditions on the device that should all match (logical AND) to determine a device group eligibility. For instance, if a selector specifies RAM conditions, device model inclusion and device model exclusion, a device is considered to match if: device matches RAM conditions AND device matches one of the included device models AND device doesn&#39;t match excluded device models
 */

#ifndef OAIDeviceSelector_H
#define OAIDeviceSelector_H

#include <QJsonObject>

#include "OAIDeviceId.h"
#include "OAIDeviceRam.h"
#include "OAISystemFeature.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceRam;
class OAIDeviceId;
class OAISystemFeature;

class OAIDeviceSelector : public OAIObject {
public:
    OAIDeviceSelector();
    OAIDeviceSelector(QString json);
    ~OAIDeviceSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDeviceRam getDeviceRam() const;
    void setDeviceRam(const OAIDeviceRam &device_ram);
    bool is_device_ram_Set() const;
    bool is_device_ram_Valid() const;

    QList<OAIDeviceId> getExcludedDeviceIds() const;
    void setExcludedDeviceIds(const QList<OAIDeviceId> &excluded_device_ids);
    bool is_excluded_device_ids_Set() const;
    bool is_excluded_device_ids_Valid() const;

    QList<OAISystemFeature> getForbiddenSystemFeatures() const;
    void setForbiddenSystemFeatures(const QList<OAISystemFeature> &forbidden_system_features);
    bool is_forbidden_system_features_Set() const;
    bool is_forbidden_system_features_Valid() const;

    QList<OAIDeviceId> getIncludedDeviceIds() const;
    void setIncludedDeviceIds(const QList<OAIDeviceId> &included_device_ids);
    bool is_included_device_ids_Set() const;
    bool is_included_device_ids_Valid() const;

    QList<OAISystemFeature> getRequiredSystemFeatures() const;
    void setRequiredSystemFeatures(const QList<OAISystemFeature> &required_system_features);
    bool is_required_system_features_Set() const;
    bool is_required_system_features_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDeviceRam m_device_ram;
    bool m_device_ram_isSet;
    bool m_device_ram_isValid;

    QList<OAIDeviceId> m_excluded_device_ids;
    bool m_excluded_device_ids_isSet;
    bool m_excluded_device_ids_isValid;

    QList<OAISystemFeature> m_forbidden_system_features;
    bool m_forbidden_system_features_isSet;
    bool m_forbidden_system_features_isValid;

    QList<OAIDeviceId> m_included_device_ids;
    bool m_included_device_ids_isSet;
    bool m_included_device_ids_isValid;

    QList<OAISystemFeature> m_required_system_features;
    bool m_required_system_features_isSet;
    bool m_required_system_features_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeviceSelector)

#endif // OAIDeviceSelector_H
