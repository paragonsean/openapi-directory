/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInAppProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInAppProduct::OAIInAppProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInAppProduct::OAIInAppProduct() {
    this->initializeModel();
}

OAIInAppProduct::~OAIInAppProduct() {}

void OAIInAppProduct::initializeModel() {

    m_default_language_isSet = false;
    m_default_language_isValid = false;

    m_default_price_isSet = false;
    m_default_price_isValid = false;

    m_grace_period_isSet = false;
    m_grace_period_isValid = false;

    m_listings_isSet = false;
    m_listings_isValid = false;

    m_managed_product_taxes_and_compliance_settings_isSet = false;
    m_managed_product_taxes_and_compliance_settings_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_prices_isSet = false;
    m_prices_isValid = false;

    m_purchase_type_isSet = false;
    m_purchase_type_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_period_isSet = false;
    m_subscription_period_isValid = false;

    m_subscription_taxes_and_compliance_settings_isSet = false;
    m_subscription_taxes_and_compliance_settings_isValid = false;

    m_trial_period_isSet = false;
    m_trial_period_isValid = false;
}

void OAIInAppProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInAppProduct::fromJsonObject(QJsonObject json) {

    m_default_language_isValid = ::OpenAPI::fromJsonValue(m_default_language, json[QString("defaultLanguage")]);
    m_default_language_isSet = !json[QString("defaultLanguage")].isNull() && m_default_language_isValid;

    m_default_price_isValid = ::OpenAPI::fromJsonValue(m_default_price, json[QString("defaultPrice")]);
    m_default_price_isSet = !json[QString("defaultPrice")].isNull() && m_default_price_isValid;

    m_grace_period_isValid = ::OpenAPI::fromJsonValue(m_grace_period, json[QString("gracePeriod")]);
    m_grace_period_isSet = !json[QString("gracePeriod")].isNull() && m_grace_period_isValid;

    m_listings_isValid = ::OpenAPI::fromJsonValue(m_listings, json[QString("listings")]);
    m_listings_isSet = !json[QString("listings")].isNull() && m_listings_isValid;

    m_managed_product_taxes_and_compliance_settings_isValid = ::OpenAPI::fromJsonValue(m_managed_product_taxes_and_compliance_settings, json[QString("managedProductTaxesAndComplianceSettings")]);
    m_managed_product_taxes_and_compliance_settings_isSet = !json[QString("managedProductTaxesAndComplianceSettings")].isNull() && m_managed_product_taxes_and_compliance_settings_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_prices_isValid = ::OpenAPI::fromJsonValue(m_prices, json[QString("prices")]);
    m_prices_isSet = !json[QString("prices")].isNull() && m_prices_isValid;

    m_purchase_type_isValid = ::OpenAPI::fromJsonValue(m_purchase_type, json[QString("purchaseType")]);
    m_purchase_type_isSet = !json[QString("purchaseType")].isNull() && m_purchase_type_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_period_isValid = ::OpenAPI::fromJsonValue(m_subscription_period, json[QString("subscriptionPeriod")]);
    m_subscription_period_isSet = !json[QString("subscriptionPeriod")].isNull() && m_subscription_period_isValid;

    m_subscription_taxes_and_compliance_settings_isValid = ::OpenAPI::fromJsonValue(m_subscription_taxes_and_compliance_settings, json[QString("subscriptionTaxesAndComplianceSettings")]);
    m_subscription_taxes_and_compliance_settings_isSet = !json[QString("subscriptionTaxesAndComplianceSettings")].isNull() && m_subscription_taxes_and_compliance_settings_isValid;

    m_trial_period_isValid = ::OpenAPI::fromJsonValue(m_trial_period, json[QString("trialPeriod")]);
    m_trial_period_isSet = !json[QString("trialPeriod")].isNull() && m_trial_period_isValid;
}

QString OAIInAppProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInAppProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_default_language_isSet) {
        obj.insert(QString("defaultLanguage"), ::OpenAPI::toJsonValue(m_default_language));
    }
    if (m_default_price.isSet()) {
        obj.insert(QString("defaultPrice"), ::OpenAPI::toJsonValue(m_default_price));
    }
    if (m_grace_period_isSet) {
        obj.insert(QString("gracePeriod"), ::OpenAPI::toJsonValue(m_grace_period));
    }
    if (m_listings.size() > 0) {
        obj.insert(QString("listings"), ::OpenAPI::toJsonValue(m_listings));
    }
    if (m_managed_product_taxes_and_compliance_settings.isSet()) {
        obj.insert(QString("managedProductTaxesAndComplianceSettings"), ::OpenAPI::toJsonValue(m_managed_product_taxes_and_compliance_settings));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_prices.size() > 0) {
        obj.insert(QString("prices"), ::OpenAPI::toJsonValue(m_prices));
    }
    if (m_purchase_type_isSet) {
        obj.insert(QString("purchaseType"), ::OpenAPI::toJsonValue(m_purchase_type));
    }
    if (m_sku_isSet) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_period_isSet) {
        obj.insert(QString("subscriptionPeriod"), ::OpenAPI::toJsonValue(m_subscription_period));
    }
    if (m_subscription_taxes_and_compliance_settings.isSet()) {
        obj.insert(QString("subscriptionTaxesAndComplianceSettings"), ::OpenAPI::toJsonValue(m_subscription_taxes_and_compliance_settings));
    }
    if (m_trial_period_isSet) {
        obj.insert(QString("trialPeriod"), ::OpenAPI::toJsonValue(m_trial_period));
    }
    return obj;
}

QString OAIInAppProduct::getDefaultLanguage() const {
    return m_default_language;
}
void OAIInAppProduct::setDefaultLanguage(const QString &default_language) {
    m_default_language = default_language;
    m_default_language_isSet = true;
}

bool OAIInAppProduct::is_default_language_Set() const{
    return m_default_language_isSet;
}

bool OAIInAppProduct::is_default_language_Valid() const{
    return m_default_language_isValid;
}

OAIPrice OAIInAppProduct::getDefaultPrice() const {
    return m_default_price;
}
void OAIInAppProduct::setDefaultPrice(const OAIPrice &default_price) {
    m_default_price = default_price;
    m_default_price_isSet = true;
}

bool OAIInAppProduct::is_default_price_Set() const{
    return m_default_price_isSet;
}

bool OAIInAppProduct::is_default_price_Valid() const{
    return m_default_price_isValid;
}

QString OAIInAppProduct::getGracePeriod() const {
    return m_grace_period;
}
void OAIInAppProduct::setGracePeriod(const QString &grace_period) {
    m_grace_period = grace_period;
    m_grace_period_isSet = true;
}

bool OAIInAppProduct::is_grace_period_Set() const{
    return m_grace_period_isSet;
}

bool OAIInAppProduct::is_grace_period_Valid() const{
    return m_grace_period_isValid;
}

QMap<QString, OAIInAppProductListing> OAIInAppProduct::getListings() const {
    return m_listings;
}
void OAIInAppProduct::setListings(const QMap<QString, OAIInAppProductListing> &listings) {
    m_listings = listings;
    m_listings_isSet = true;
}

bool OAIInAppProduct::is_listings_Set() const{
    return m_listings_isSet;
}

bool OAIInAppProduct::is_listings_Valid() const{
    return m_listings_isValid;
}

OAIManagedProductTaxAndComplianceSettings OAIInAppProduct::getManagedProductTaxesAndComplianceSettings() const {
    return m_managed_product_taxes_and_compliance_settings;
}
void OAIInAppProduct::setManagedProductTaxesAndComplianceSettings(const OAIManagedProductTaxAndComplianceSettings &managed_product_taxes_and_compliance_settings) {
    m_managed_product_taxes_and_compliance_settings = managed_product_taxes_and_compliance_settings;
    m_managed_product_taxes_and_compliance_settings_isSet = true;
}

bool OAIInAppProduct::is_managed_product_taxes_and_compliance_settings_Set() const{
    return m_managed_product_taxes_and_compliance_settings_isSet;
}

bool OAIInAppProduct::is_managed_product_taxes_and_compliance_settings_Valid() const{
    return m_managed_product_taxes_and_compliance_settings_isValid;
}

QString OAIInAppProduct::getPackageName() const {
    return m_package_name;
}
void OAIInAppProduct::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIInAppProduct::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIInAppProduct::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QMap<QString, OAIPrice> OAIInAppProduct::getPrices() const {
    return m_prices;
}
void OAIInAppProduct::setPrices(const QMap<QString, OAIPrice> &prices) {
    m_prices = prices;
    m_prices_isSet = true;
}

bool OAIInAppProduct::is_prices_Set() const{
    return m_prices_isSet;
}

bool OAIInAppProduct::is_prices_Valid() const{
    return m_prices_isValid;
}

QString OAIInAppProduct::getPurchaseType() const {
    return m_purchase_type;
}
void OAIInAppProduct::setPurchaseType(const QString &purchase_type) {
    m_purchase_type = purchase_type;
    m_purchase_type_isSet = true;
}

bool OAIInAppProduct::is_purchase_type_Set() const{
    return m_purchase_type_isSet;
}

bool OAIInAppProduct::is_purchase_type_Valid() const{
    return m_purchase_type_isValid;
}

QString OAIInAppProduct::getSku() const {
    return m_sku;
}
void OAIInAppProduct::setSku(const QString &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIInAppProduct::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIInAppProduct::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIInAppProduct::getStatus() const {
    return m_status;
}
void OAIInAppProduct::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInAppProduct::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInAppProduct::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInAppProduct::getSubscriptionPeriod() const {
    return m_subscription_period;
}
void OAIInAppProduct::setSubscriptionPeriod(const QString &subscription_period) {
    m_subscription_period = subscription_period;
    m_subscription_period_isSet = true;
}

bool OAIInAppProduct::is_subscription_period_Set() const{
    return m_subscription_period_isSet;
}

bool OAIInAppProduct::is_subscription_period_Valid() const{
    return m_subscription_period_isValid;
}

OAISubscriptionTaxAndComplianceSettings OAIInAppProduct::getSubscriptionTaxesAndComplianceSettings() const {
    return m_subscription_taxes_and_compliance_settings;
}
void OAIInAppProduct::setSubscriptionTaxesAndComplianceSettings(const OAISubscriptionTaxAndComplianceSettings &subscription_taxes_and_compliance_settings) {
    m_subscription_taxes_and_compliance_settings = subscription_taxes_and_compliance_settings;
    m_subscription_taxes_and_compliance_settings_isSet = true;
}

bool OAIInAppProduct::is_subscription_taxes_and_compliance_settings_Set() const{
    return m_subscription_taxes_and_compliance_settings_isSet;
}

bool OAIInAppProduct::is_subscription_taxes_and_compliance_settings_Valid() const{
    return m_subscription_taxes_and_compliance_settings_isValid;
}

QString OAIInAppProduct::getTrialPeriod() const {
    return m_trial_period;
}
void OAIInAppProduct::setTrialPeriod(const QString &trial_period) {
    m_trial_period = trial_period;
    m_trial_period_isSet = true;
}

bool OAIInAppProduct::is_trial_period_Set() const{
    return m_trial_period_isSet;
}

bool OAIInAppProduct::is_trial_period_Valid() const{
    return m_trial_period_isValid;
}

bool OAIInAppProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_product_taxes_and_compliance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_taxes_and_compliance_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInAppProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
