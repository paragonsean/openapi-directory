/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOfferDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOfferDetails::OAIOfferDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOfferDetails::OAIOfferDetails() {
    this->initializeModel();
}

OAIOfferDetails::~OAIOfferDetails() {}

void OAIOfferDetails::initializeModel() {

    m_base_plan_id_isSet = false;
    m_base_plan_id_isValid = false;

    m_offer_id_isSet = false;
    m_offer_id_isValid = false;

    m_offer_tags_isSet = false;
    m_offer_tags_isValid = false;
}

void OAIOfferDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOfferDetails::fromJsonObject(QJsonObject json) {

    m_base_plan_id_isValid = ::OpenAPI::fromJsonValue(m_base_plan_id, json[QString("basePlanId")]);
    m_base_plan_id_isSet = !json[QString("basePlanId")].isNull() && m_base_plan_id_isValid;

    m_offer_id_isValid = ::OpenAPI::fromJsonValue(m_offer_id, json[QString("offerId")]);
    m_offer_id_isSet = !json[QString("offerId")].isNull() && m_offer_id_isValid;

    m_offer_tags_isValid = ::OpenAPI::fromJsonValue(m_offer_tags, json[QString("offerTags")]);
    m_offer_tags_isSet = !json[QString("offerTags")].isNull() && m_offer_tags_isValid;
}

QString OAIOfferDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOfferDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_base_plan_id_isSet) {
        obj.insert(QString("basePlanId"), ::OpenAPI::toJsonValue(m_base_plan_id));
    }
    if (m_offer_id_isSet) {
        obj.insert(QString("offerId"), ::OpenAPI::toJsonValue(m_offer_id));
    }
    if (m_offer_tags.size() > 0) {
        obj.insert(QString("offerTags"), ::OpenAPI::toJsonValue(m_offer_tags));
    }
    return obj;
}

QString OAIOfferDetails::getBasePlanId() const {
    return m_base_plan_id;
}
void OAIOfferDetails::setBasePlanId(const QString &base_plan_id) {
    m_base_plan_id = base_plan_id;
    m_base_plan_id_isSet = true;
}

bool OAIOfferDetails::is_base_plan_id_Set() const{
    return m_base_plan_id_isSet;
}

bool OAIOfferDetails::is_base_plan_id_Valid() const{
    return m_base_plan_id_isValid;
}

QString OAIOfferDetails::getOfferId() const {
    return m_offer_id;
}
void OAIOfferDetails::setOfferId(const QString &offer_id) {
    m_offer_id = offer_id;
    m_offer_id_isSet = true;
}

bool OAIOfferDetails::is_offer_id_Set() const{
    return m_offer_id_isSet;
}

bool OAIOfferDetails::is_offer_id_Valid() const{
    return m_offer_id_isValid;
}

QList<QString> OAIOfferDetails::getOfferTags() const {
    return m_offer_tags;
}
void OAIOfferDetails::setOfferTags(const QList<QString> &offer_tags) {
    m_offer_tags = offer_tags;
    m_offer_tags_isSet = true;
}

bool OAIOfferDetails::is_offer_tags_Set() const{
    return m_offer_tags_isSet;
}

bool OAIOfferDetails::is_offer_tags_Valid() const{
    return m_offer_tags_isValid;
}

bool OAIOfferDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offer_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOfferDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
