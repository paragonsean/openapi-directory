/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionalTaxRateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionalTaxRateInfo::OAIRegionalTaxRateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionalTaxRateInfo::OAIRegionalTaxRateInfo() {
    this->initializeModel();
}

OAIRegionalTaxRateInfo::~OAIRegionalTaxRateInfo() {}

void OAIRegionalTaxRateInfo::initializeModel() {

    m_eligible_for_streaming_service_tax_rate_isSet = false;
    m_eligible_for_streaming_service_tax_rate_isValid = false;

    m_streaming_tax_type_isSet = false;
    m_streaming_tax_type_isValid = false;

    m_tax_tier_isSet = false;
    m_tax_tier_isValid = false;
}

void OAIRegionalTaxRateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionalTaxRateInfo::fromJsonObject(QJsonObject json) {

    m_eligible_for_streaming_service_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_eligible_for_streaming_service_tax_rate, json[QString("eligibleForStreamingServiceTaxRate")]);
    m_eligible_for_streaming_service_tax_rate_isSet = !json[QString("eligibleForStreamingServiceTaxRate")].isNull() && m_eligible_for_streaming_service_tax_rate_isValid;

    m_streaming_tax_type_isValid = ::OpenAPI::fromJsonValue(m_streaming_tax_type, json[QString("streamingTaxType")]);
    m_streaming_tax_type_isSet = !json[QString("streamingTaxType")].isNull() && m_streaming_tax_type_isValid;

    m_tax_tier_isValid = ::OpenAPI::fromJsonValue(m_tax_tier, json[QString("taxTier")]);
    m_tax_tier_isSet = !json[QString("taxTier")].isNull() && m_tax_tier_isValid;
}

QString OAIRegionalTaxRateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionalTaxRateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_eligible_for_streaming_service_tax_rate_isSet) {
        obj.insert(QString("eligibleForStreamingServiceTaxRate"), ::OpenAPI::toJsonValue(m_eligible_for_streaming_service_tax_rate));
    }
    if (m_streaming_tax_type_isSet) {
        obj.insert(QString("streamingTaxType"), ::OpenAPI::toJsonValue(m_streaming_tax_type));
    }
    if (m_tax_tier_isSet) {
        obj.insert(QString("taxTier"), ::OpenAPI::toJsonValue(m_tax_tier));
    }
    return obj;
}

bool OAIRegionalTaxRateInfo::isEligibleForStreamingServiceTaxRate() const {
    return m_eligible_for_streaming_service_tax_rate;
}
void OAIRegionalTaxRateInfo::setEligibleForStreamingServiceTaxRate(const bool &eligible_for_streaming_service_tax_rate) {
    m_eligible_for_streaming_service_tax_rate = eligible_for_streaming_service_tax_rate;
    m_eligible_for_streaming_service_tax_rate_isSet = true;
}

bool OAIRegionalTaxRateInfo::is_eligible_for_streaming_service_tax_rate_Set() const{
    return m_eligible_for_streaming_service_tax_rate_isSet;
}

bool OAIRegionalTaxRateInfo::is_eligible_for_streaming_service_tax_rate_Valid() const{
    return m_eligible_for_streaming_service_tax_rate_isValid;
}

QString OAIRegionalTaxRateInfo::getStreamingTaxType() const {
    return m_streaming_tax_type;
}
void OAIRegionalTaxRateInfo::setStreamingTaxType(const QString &streaming_tax_type) {
    m_streaming_tax_type = streaming_tax_type;
    m_streaming_tax_type_isSet = true;
}

bool OAIRegionalTaxRateInfo::is_streaming_tax_type_Set() const{
    return m_streaming_tax_type_isSet;
}

bool OAIRegionalTaxRateInfo::is_streaming_tax_type_Valid() const{
    return m_streaming_tax_type_isValid;
}

QString OAIRegionalTaxRateInfo::getTaxTier() const {
    return m_tax_tier;
}
void OAIRegionalTaxRateInfo::setTaxTier(const QString &tax_tier) {
    m_tax_tier = tax_tier;
    m_tax_tier_isSet = true;
}

bool OAIRegionalTaxRateInfo::is_tax_tier_Set() const{
    return m_tax_tier_isSet;
}

bool OAIRegionalTaxRateInfo::is_tax_tier_Valid() const{
    return m_tax_tier_isValid;
}

bool OAIRegionalTaxRateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_eligible_for_streaming_service_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_tax_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionalTaxRateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
