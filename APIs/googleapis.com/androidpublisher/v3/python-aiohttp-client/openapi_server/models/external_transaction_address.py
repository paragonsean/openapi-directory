# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExternalTransactionAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrative_area: str=None, region_code: str=None):
        """ExternalTransactionAddress - a model defined in OpenAPI

        :param administrative_area: The administrative_area of this ExternalTransactionAddress.
        :param region_code: The region_code of this ExternalTransactionAddress.
        """
        self.openapi_types = {
            'administrative_area': str,
            'region_code': str
        }

        self.attribute_map = {
            'administrative_area': 'administrativeArea',
            'region_code': 'regionCode'
        }

        self._administrative_area = administrative_area
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalTransactionAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalTransactionAddress of this ExternalTransactionAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrative_area(self):
        """Gets the administrative_area of this ExternalTransactionAddress.

        Optional. Top-level administrative subdivision of the country/region. Only required for transactions in India. Valid values are \"ANDAMAN AND NICOBAR ISLANDS\", \"ANDHRA PRADESH\", \"ARUNACHAL PRADESH\", \"ASSAM\", \"BIHAR\", \"CHANDIGARH\", \"CHHATTISGARH\", \"DADRA AND NAGAR HAVELI\", \"DADRA AND NAGAR HAVELI AND DAMAN AND DIU\", \"DAMAN AND DIU\", \"DELHI\", \"GOA\", \"GUJARAT\", \"HARYANA\", \"HIMACHAL PRADESH\", \"JAMMU AND KASHMIR\", \"JHARKHAND\", \"KARNATAKA\", \"KERALA\", \"LADAKH\", \"LAKSHADWEEP\", \"MADHYA PRADESH\", \"MAHARASHTRA\", \"MANIPUR\", \"MEGHALAYA\", \"MIZORAM\", \"NAGALAND\", \"ODISHA\", \"PUDUCHERRY\", \"PUNJAB\", \"RAJASTHAN\", \"SIKKIM\", \"TAMIL NADU\", \"TELANGANA\", \"TRIPURA\", \"UTTAR PRADESH\", \"UTTARAKHAND\", and \"WEST BENGAL\".

        :return: The administrative_area of this ExternalTransactionAddress.
        :rtype: str
        """
        return self._administrative_area

    @administrative_area.setter
    def administrative_area(self, administrative_area):
        """Sets the administrative_area of this ExternalTransactionAddress.

        Optional. Top-level administrative subdivision of the country/region. Only required for transactions in India. Valid values are \"ANDAMAN AND NICOBAR ISLANDS\", \"ANDHRA PRADESH\", \"ARUNACHAL PRADESH\", \"ASSAM\", \"BIHAR\", \"CHANDIGARH\", \"CHHATTISGARH\", \"DADRA AND NAGAR HAVELI\", \"DADRA AND NAGAR HAVELI AND DAMAN AND DIU\", \"DAMAN AND DIU\", \"DELHI\", \"GOA\", \"GUJARAT\", \"HARYANA\", \"HIMACHAL PRADESH\", \"JAMMU AND KASHMIR\", \"JHARKHAND\", \"KARNATAKA\", \"KERALA\", \"LADAKH\", \"LAKSHADWEEP\", \"MADHYA PRADESH\", \"MAHARASHTRA\", \"MANIPUR\", \"MEGHALAYA\", \"MIZORAM\", \"NAGALAND\", \"ODISHA\", \"PUDUCHERRY\", \"PUNJAB\", \"RAJASTHAN\", \"SIKKIM\", \"TAMIL NADU\", \"TELANGANA\", \"TRIPURA\", \"UTTAR PRADESH\", \"UTTARAKHAND\", and \"WEST BENGAL\".

        :param administrative_area: The administrative_area of this ExternalTransactionAddress.
        :type administrative_area: str
        """

        self._administrative_area = administrative_area

    @property
    def region_code(self):
        """Gets the region_code of this ExternalTransactionAddress.

        Required. Two letter region code based on ISO-3166-1 Alpha-2 (UN region codes).

        :return: The region_code of this ExternalTransactionAddress.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ExternalTransactionAddress.

        Required. Two letter region code based on ISO-3166-1 Alpha-2 (UN region codes).

        :param region_code: The region_code of this ExternalTransactionAddress.
        :type region_code: str
        """

        self._region_code = region_code
