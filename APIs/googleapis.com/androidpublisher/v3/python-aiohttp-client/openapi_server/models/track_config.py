# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrackConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_factor: str=None, track: str=None, type: str=None):
        """TrackConfig - a model defined in OpenAPI

        :param form_factor: The form_factor of this TrackConfig.
        :param track: The track of this TrackConfig.
        :param type: The type of this TrackConfig.
        """
        self.openapi_types = {
            'form_factor': str,
            'track': str,
            'type': str
        }

        self.attribute_map = {
            'form_factor': 'formFactor',
            'track': 'track',
            'type': 'type'
        }

        self._form_factor = form_factor
        self._track = track
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackConfig of this TrackConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_factor(self):
        """Gets the form_factor of this TrackConfig.

        Required. Form factor of the new track. Defaults to the default track.

        :return: The form_factor of this TrackConfig.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this TrackConfig.

        Required. Form factor of the new track. Defaults to the default track.

        :param form_factor: The form_factor of this TrackConfig.
        :type form_factor: str
        """
        allowed_values = ["FORM_FACTOR_UNSPECIFIED", "DEFAULT", "WEAR", "AUTOMOTIVE"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor

    @property
    def track(self):
        """Gets the track of this TrackConfig.

        Required. Identifier of the new track. For default tracks, this field consists of the track alias only. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. This prefix must match the value of the `form_factor` field, if it is not a default track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)

        :return: The track of this TrackConfig.
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this TrackConfig.

        Required. Identifier of the new track. For default tracks, this field consists of the track alias only. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. This prefix must match the value of the `form_factor` field, if it is not a default track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)

        :param track: The track of this TrackConfig.
        :type track: str
        """

        self._track = track

    @property
    def type(self):
        """Gets the type of this TrackConfig.

        Required. Type of the new track. Currently, the only supported value is closedTesting.

        :return: The type of this TrackConfig.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TrackConfig.

        Required. Type of the new track. Currently, the only supported value is closedTesting.

        :param type: The type of this TrackConfig.
        :type type: str
        """
        allowed_values = ["TRACK_TYPE_UNSPECIFIED", "CLOSED_TESTING"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
