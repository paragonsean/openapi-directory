# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.canceled_state_context import CanceledStateContext
from openapi_server.models.external_account_identifiers import ExternalAccountIdentifiers
from openapi_server.models.paused_state_context import PausedStateContext
from openapi_server.models.subscribe_with_google_info import SubscribeWithGoogleInfo
from openapi_server.models.subscription_purchase_line_item import SubscriptionPurchaseLineItem
from openapi_server import util


class SubscriptionPurchaseV2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_state: str=None, canceled_state_context: CanceledStateContext=None, external_account_identifiers: ExternalAccountIdentifiers=None, kind: str=None, latest_order_id: str=None, line_items: List[SubscriptionPurchaseLineItem]=None, linked_purchase_token: str=None, paused_state_context: PausedStateContext=None, region_code: str=None, start_time: str=None, subscribe_with_google_info: SubscribeWithGoogleInfo=None, subscription_state: str=None, test_purchase: object=None):
        """SubscriptionPurchaseV2 - a model defined in OpenAPI

        :param acknowledgement_state: The acknowledgement_state of this SubscriptionPurchaseV2.
        :param canceled_state_context: The canceled_state_context of this SubscriptionPurchaseV2.
        :param external_account_identifiers: The external_account_identifiers of this SubscriptionPurchaseV2.
        :param kind: The kind of this SubscriptionPurchaseV2.
        :param latest_order_id: The latest_order_id of this SubscriptionPurchaseV2.
        :param line_items: The line_items of this SubscriptionPurchaseV2.
        :param linked_purchase_token: The linked_purchase_token of this SubscriptionPurchaseV2.
        :param paused_state_context: The paused_state_context of this SubscriptionPurchaseV2.
        :param region_code: The region_code of this SubscriptionPurchaseV2.
        :param start_time: The start_time of this SubscriptionPurchaseV2.
        :param subscribe_with_google_info: The subscribe_with_google_info of this SubscriptionPurchaseV2.
        :param subscription_state: The subscription_state of this SubscriptionPurchaseV2.
        :param test_purchase: The test_purchase of this SubscriptionPurchaseV2.
        """
        self.openapi_types = {
            'acknowledgement_state': str,
            'canceled_state_context': CanceledStateContext,
            'external_account_identifiers': ExternalAccountIdentifiers,
            'kind': str,
            'latest_order_id': str,
            'line_items': List[SubscriptionPurchaseLineItem],
            'linked_purchase_token': str,
            'paused_state_context': PausedStateContext,
            'region_code': str,
            'start_time': str,
            'subscribe_with_google_info': SubscribeWithGoogleInfo,
            'subscription_state': str,
            'test_purchase': object
        }

        self.attribute_map = {
            'acknowledgement_state': 'acknowledgementState',
            'canceled_state_context': 'canceledStateContext',
            'external_account_identifiers': 'externalAccountIdentifiers',
            'kind': 'kind',
            'latest_order_id': 'latestOrderId',
            'line_items': 'lineItems',
            'linked_purchase_token': 'linkedPurchaseToken',
            'paused_state_context': 'pausedStateContext',
            'region_code': 'regionCode',
            'start_time': 'startTime',
            'subscribe_with_google_info': 'subscribeWithGoogleInfo',
            'subscription_state': 'subscriptionState',
            'test_purchase': 'testPurchase'
        }

        self._acknowledgement_state = acknowledgement_state
        self._canceled_state_context = canceled_state_context
        self._external_account_identifiers = external_account_identifiers
        self._kind = kind
        self._latest_order_id = latest_order_id
        self._line_items = line_items
        self._linked_purchase_token = linked_purchase_token
        self._paused_state_context = paused_state_context
        self._region_code = region_code
        self._start_time = start_time
        self._subscribe_with_google_info = subscribe_with_google_info
        self._subscription_state = subscription_state
        self._test_purchase = test_purchase

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPurchaseV2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPurchaseV2 of this SubscriptionPurchaseV2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_state(self):
        """Gets the acknowledgement_state of this SubscriptionPurchaseV2.

        The acknowledgement state of the subscription.

        :return: The acknowledgement_state of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._acknowledgement_state

    @acknowledgement_state.setter
    def acknowledgement_state(self, acknowledgement_state):
        """Sets the acknowledgement_state of this SubscriptionPurchaseV2.

        The acknowledgement state of the subscription.

        :param acknowledgement_state: The acknowledgement_state of this SubscriptionPurchaseV2.
        :type acknowledgement_state: str
        """
        allowed_values = ["ACKNOWLEDGEMENT_STATE_UNSPECIFIED", "ACKNOWLEDGEMENT_STATE_PENDING", "ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED"]  # noqa: E501
        if acknowledgement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `acknowledgement_state` ({0}), must be one of {1}"
                .format(acknowledgement_state, allowed_values)
            )

        self._acknowledgement_state = acknowledgement_state

    @property
    def canceled_state_context(self):
        """Gets the canceled_state_context of this SubscriptionPurchaseV2.


        :return: The canceled_state_context of this SubscriptionPurchaseV2.
        :rtype: CanceledStateContext
        """
        return self._canceled_state_context

    @canceled_state_context.setter
    def canceled_state_context(self, canceled_state_context):
        """Sets the canceled_state_context of this SubscriptionPurchaseV2.


        :param canceled_state_context: The canceled_state_context of this SubscriptionPurchaseV2.
        :type canceled_state_context: CanceledStateContext
        """

        self._canceled_state_context = canceled_state_context

    @property
    def external_account_identifiers(self):
        """Gets the external_account_identifiers of this SubscriptionPurchaseV2.


        :return: The external_account_identifiers of this SubscriptionPurchaseV2.
        :rtype: ExternalAccountIdentifiers
        """
        return self._external_account_identifiers

    @external_account_identifiers.setter
    def external_account_identifiers(self, external_account_identifiers):
        """Sets the external_account_identifiers of this SubscriptionPurchaseV2.


        :param external_account_identifiers: The external_account_identifiers of this SubscriptionPurchaseV2.
        :type external_account_identifiers: ExternalAccountIdentifiers
        """

        self._external_account_identifiers = external_account_identifiers

    @property
    def kind(self):
        """Gets the kind of this SubscriptionPurchaseV2.

        This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.

        :return: The kind of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SubscriptionPurchaseV2.

        This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.

        :param kind: The kind of this SubscriptionPurchaseV2.
        :type kind: str
        """

        self._kind = kind

    @property
    def latest_order_id(self):
        """Gets the latest_order_id of this SubscriptionPurchaseV2.

        The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.

        :return: The latest_order_id of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._latest_order_id

    @latest_order_id.setter
    def latest_order_id(self, latest_order_id):
        """Sets the latest_order_id of this SubscriptionPurchaseV2.

        The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.

        :param latest_order_id: The latest_order_id of this SubscriptionPurchaseV2.
        :type latest_order_id: str
        """

        self._latest_order_id = latest_order_id

    @property
    def line_items(self):
        """Gets the line_items of this SubscriptionPurchaseV2.

        Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.

        :return: The line_items of this SubscriptionPurchaseV2.
        :rtype: List[SubscriptionPurchaseLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this SubscriptionPurchaseV2.

        Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.

        :param line_items: The line_items of this SubscriptionPurchaseV2.
        :type line_items: List[SubscriptionPurchaseLineItem]
        """

        self._line_items = line_items

    @property
    def linked_purchase_token(self):
        """Gets the linked_purchase_token of this SubscriptionPurchaseV2.

        The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.

        :return: The linked_purchase_token of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._linked_purchase_token

    @linked_purchase_token.setter
    def linked_purchase_token(self, linked_purchase_token):
        """Sets the linked_purchase_token of this SubscriptionPurchaseV2.

        The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.

        :param linked_purchase_token: The linked_purchase_token of this SubscriptionPurchaseV2.
        :type linked_purchase_token: str
        """

        self._linked_purchase_token = linked_purchase_token

    @property
    def paused_state_context(self):
        """Gets the paused_state_context of this SubscriptionPurchaseV2.


        :return: The paused_state_context of this SubscriptionPurchaseV2.
        :rtype: PausedStateContext
        """
        return self._paused_state_context

    @paused_state_context.setter
    def paused_state_context(self, paused_state_context):
        """Sets the paused_state_context of this SubscriptionPurchaseV2.


        :param paused_state_context: The paused_state_context of this SubscriptionPurchaseV2.
        :type paused_state_context: PausedStateContext
        """

        self._paused_state_context = paused_state_context

    @property
    def region_code(self):
        """Gets the region_code of this SubscriptionPurchaseV2.

        ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.

        :return: The region_code of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this SubscriptionPurchaseV2.

        ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.

        :param region_code: The region_code of this SubscriptionPurchaseV2.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def start_time(self):
        """Gets the start_time of this SubscriptionPurchaseV2.

        Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).

        :return: The start_time of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SubscriptionPurchaseV2.

        Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).

        :param start_time: The start_time of this SubscriptionPurchaseV2.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def subscribe_with_google_info(self):
        """Gets the subscribe_with_google_info of this SubscriptionPurchaseV2.


        :return: The subscribe_with_google_info of this SubscriptionPurchaseV2.
        :rtype: SubscribeWithGoogleInfo
        """
        return self._subscribe_with_google_info

    @subscribe_with_google_info.setter
    def subscribe_with_google_info(self, subscribe_with_google_info):
        """Sets the subscribe_with_google_info of this SubscriptionPurchaseV2.


        :param subscribe_with_google_info: The subscribe_with_google_info of this SubscriptionPurchaseV2.
        :type subscribe_with_google_info: SubscribeWithGoogleInfo
        """

        self._subscribe_with_google_info = subscribe_with_google_info

    @property
    def subscription_state(self):
        """Gets the subscription_state of this SubscriptionPurchaseV2.

        The current state of the subscription.

        :return: The subscription_state of this SubscriptionPurchaseV2.
        :rtype: str
        """
        return self._subscription_state

    @subscription_state.setter
    def subscription_state(self, subscription_state):
        """Sets the subscription_state of this SubscriptionPurchaseV2.

        The current state of the subscription.

        :param subscription_state: The subscription_state of this SubscriptionPurchaseV2.
        :type subscription_state: str
        """
        allowed_values = ["SUBSCRIPTION_STATE_UNSPECIFIED", "SUBSCRIPTION_STATE_PENDING", "SUBSCRIPTION_STATE_ACTIVE", "SUBSCRIPTION_STATE_PAUSED", "SUBSCRIPTION_STATE_IN_GRACE_PERIOD", "SUBSCRIPTION_STATE_ON_HOLD", "SUBSCRIPTION_STATE_CANCELED", "SUBSCRIPTION_STATE_EXPIRED"]  # noqa: E501
        if subscription_state not in allowed_values:
            raise ValueError(
                "Invalid value for `subscription_state` ({0}), must be one of {1}"
                .format(subscription_state, allowed_values)
            )

        self._subscription_state = subscription_state

    @property
    def test_purchase(self):
        """Gets the test_purchase of this SubscriptionPurchaseV2.

        Whether this subscription purchase is a test purchase.

        :return: The test_purchase of this SubscriptionPurchaseV2.
        :rtype: object
        """
        return self._test_purchase

    @test_purchase.setter
    def test_purchase(self, test_purchase):
        """Sets the test_purchase of this SubscriptionPurchaseV2.

        Whether this subscription purchase is a test purchase.

        :param test_purchase: The test_purchase of this SubscriptionPurchaseV2.
        :type test_purchase: object
        """

        self._test_purchase = test_purchase
