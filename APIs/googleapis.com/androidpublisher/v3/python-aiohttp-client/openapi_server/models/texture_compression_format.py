# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextureCompressionFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None):
        """TextureCompressionFormat - a model defined in OpenAPI

        :param alias: The alias of this TextureCompressionFormat.
        """
        self.openapi_types = {
            'alias': str
        }

        self.attribute_map = {
            'alias': 'alias'
        }

        self._alias = alias

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextureCompressionFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextureCompressionFormat of this TextureCompressionFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this TextureCompressionFormat.

        Alias for texture compression format.

        :return: The alias of this TextureCompressionFormat.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this TextureCompressionFormat.

        Alias for texture compression format.

        :param alias: The alias of this TextureCompressionFormat.
        :type alias: str
        """
        allowed_values = ["UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT", "ETC1_RGB8", "PALETTED", "THREE_DC", "ATC", "LATC", "DXT1", "S3TC", "PVRTC", "ASTC", "ETC2"]  # noqa: E501
        if alias not in allowed_values:
            raise ValueError(
                "Invalid value for `alias` ({0}), must be one of {1}"
                .format(alias, allowed_values)
            )

        self._alias = alias
