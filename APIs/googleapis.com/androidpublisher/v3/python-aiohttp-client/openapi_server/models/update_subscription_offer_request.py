# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regions_version import RegionsVersion
from openapi_server.models.subscription_offer import SubscriptionOffer
from openapi_server import util


class UpdateSubscriptionOfferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_missing: bool=None, latency_tolerance: str=None, regions_version: RegionsVersion=None, subscription_offer: SubscriptionOffer=None, update_mask: str=None):
        """UpdateSubscriptionOfferRequest - a model defined in OpenAPI

        :param allow_missing: The allow_missing of this UpdateSubscriptionOfferRequest.
        :param latency_tolerance: The latency_tolerance of this UpdateSubscriptionOfferRequest.
        :param regions_version: The regions_version of this UpdateSubscriptionOfferRequest.
        :param subscription_offer: The subscription_offer of this UpdateSubscriptionOfferRequest.
        :param update_mask: The update_mask of this UpdateSubscriptionOfferRequest.
        """
        self.openapi_types = {
            'allow_missing': bool,
            'latency_tolerance': str,
            'regions_version': RegionsVersion,
            'subscription_offer': SubscriptionOffer,
            'update_mask': str
        }

        self.attribute_map = {
            'allow_missing': 'allowMissing',
            'latency_tolerance': 'latencyTolerance',
            'regions_version': 'regionsVersion',
            'subscription_offer': 'subscriptionOffer',
            'update_mask': 'updateMask'
        }

        self._allow_missing = allow_missing
        self._latency_tolerance = latency_tolerance
        self._regions_version = regions_version
        self._subscription_offer = subscription_offer
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSubscriptionOfferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSubscriptionOfferRequest of this UpdateSubscriptionOfferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_missing(self):
        """Gets the allow_missing of this UpdateSubscriptionOfferRequest.

        Optional. If set to true, and the subscription offer with the given package_name, product_id, base_plan_id and offer_id doesn't exist, an offer will be created. If a new offer is created, update_mask is ignored.

        :return: The allow_missing of this UpdateSubscriptionOfferRequest.
        :rtype: bool
        """
        return self._allow_missing

    @allow_missing.setter
    def allow_missing(self, allow_missing):
        """Sets the allow_missing of this UpdateSubscriptionOfferRequest.

        Optional. If set to true, and the subscription offer with the given package_name, product_id, base_plan_id and offer_id doesn't exist, an offer will be created. If a new offer is created, update_mask is ignored.

        :param allow_missing: The allow_missing of this UpdateSubscriptionOfferRequest.
        :type allow_missing: bool
        """

        self._allow_missing = allow_missing

    @property
    def latency_tolerance(self):
        """Gets the latency_tolerance of this UpdateSubscriptionOfferRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :return: The latency_tolerance of this UpdateSubscriptionOfferRequest.
        :rtype: str
        """
        return self._latency_tolerance

    @latency_tolerance.setter
    def latency_tolerance(self, latency_tolerance):
        """Sets the latency_tolerance of this UpdateSubscriptionOfferRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :param latency_tolerance: The latency_tolerance of this UpdateSubscriptionOfferRequest.
        :type latency_tolerance: str
        """
        allowed_values = ["PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT"]  # noqa: E501
        if latency_tolerance not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_tolerance` ({0}), must be one of {1}"
                .format(latency_tolerance, allowed_values)
            )

        self._latency_tolerance = latency_tolerance

    @property
    def regions_version(self):
        """Gets the regions_version of this UpdateSubscriptionOfferRequest.


        :return: The regions_version of this UpdateSubscriptionOfferRequest.
        :rtype: RegionsVersion
        """
        return self._regions_version

    @regions_version.setter
    def regions_version(self, regions_version):
        """Sets the regions_version of this UpdateSubscriptionOfferRequest.


        :param regions_version: The regions_version of this UpdateSubscriptionOfferRequest.
        :type regions_version: RegionsVersion
        """

        self._regions_version = regions_version

    @property
    def subscription_offer(self):
        """Gets the subscription_offer of this UpdateSubscriptionOfferRequest.


        :return: The subscription_offer of this UpdateSubscriptionOfferRequest.
        :rtype: SubscriptionOffer
        """
        return self._subscription_offer

    @subscription_offer.setter
    def subscription_offer(self, subscription_offer):
        """Sets the subscription_offer of this UpdateSubscriptionOfferRequest.


        :param subscription_offer: The subscription_offer of this UpdateSubscriptionOfferRequest.
        :type subscription_offer: SubscriptionOffer
        """

        self._subscription_offer = subscription_offer

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateSubscriptionOfferRequest.

        Required. The list of fields to be updated.

        :return: The update_mask of this UpdateSubscriptionOfferRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateSubscriptionOfferRequest.

        Required. The list of fields to be updated.

        :param update_mask: The update_mask of this UpdateSubscriptionOfferRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
