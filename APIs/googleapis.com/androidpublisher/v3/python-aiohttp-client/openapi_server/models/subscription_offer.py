# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offer_tag import OfferTag
from openapi_server.models.other_regions_subscription_offer_config import OtherRegionsSubscriptionOfferConfig
from openapi_server.models.regional_subscription_offer_config import RegionalSubscriptionOfferConfig
from openapi_server.models.subscription_offer_phase import SubscriptionOfferPhase
from openapi_server.models.subscription_offer_targeting import SubscriptionOfferTargeting
from openapi_server import util


class SubscriptionOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_plan_id: str=None, offer_id: str=None, offer_tags: List[OfferTag]=None, other_regions_config: OtherRegionsSubscriptionOfferConfig=None, package_name: str=None, phases: List[SubscriptionOfferPhase]=None, product_id: str=None, regional_configs: List[RegionalSubscriptionOfferConfig]=None, state: str=None, targeting: SubscriptionOfferTargeting=None):
        """SubscriptionOffer - a model defined in OpenAPI

        :param base_plan_id: The base_plan_id of this SubscriptionOffer.
        :param offer_id: The offer_id of this SubscriptionOffer.
        :param offer_tags: The offer_tags of this SubscriptionOffer.
        :param other_regions_config: The other_regions_config of this SubscriptionOffer.
        :param package_name: The package_name of this SubscriptionOffer.
        :param phases: The phases of this SubscriptionOffer.
        :param product_id: The product_id of this SubscriptionOffer.
        :param regional_configs: The regional_configs of this SubscriptionOffer.
        :param state: The state of this SubscriptionOffer.
        :param targeting: The targeting of this SubscriptionOffer.
        """
        self.openapi_types = {
            'base_plan_id': str,
            'offer_id': str,
            'offer_tags': List[OfferTag],
            'other_regions_config': OtherRegionsSubscriptionOfferConfig,
            'package_name': str,
            'phases': List[SubscriptionOfferPhase],
            'product_id': str,
            'regional_configs': List[RegionalSubscriptionOfferConfig],
            'state': str,
            'targeting': SubscriptionOfferTargeting
        }

        self.attribute_map = {
            'base_plan_id': 'basePlanId',
            'offer_id': 'offerId',
            'offer_tags': 'offerTags',
            'other_regions_config': 'otherRegionsConfig',
            'package_name': 'packageName',
            'phases': 'phases',
            'product_id': 'productId',
            'regional_configs': 'regionalConfigs',
            'state': 'state',
            'targeting': 'targeting'
        }

        self._base_plan_id = base_plan_id
        self._offer_id = offer_id
        self._offer_tags = offer_tags
        self._other_regions_config = other_regions_config
        self._package_name = package_name
        self._phases = phases
        self._product_id = product_id
        self._regional_configs = regional_configs
        self._state = state
        self._targeting = targeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionOffer of this SubscriptionOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_plan_id(self):
        """Gets the base_plan_id of this SubscriptionOffer.

        Required. Immutable. The ID of the base plan to which this offer is an extension.

        :return: The base_plan_id of this SubscriptionOffer.
        :rtype: str
        """
        return self._base_plan_id

    @base_plan_id.setter
    def base_plan_id(self, base_plan_id):
        """Sets the base_plan_id of this SubscriptionOffer.

        Required. Immutable. The ID of the base plan to which this offer is an extension.

        :param base_plan_id: The base_plan_id of this SubscriptionOffer.
        :type base_plan_id: str
        """

        self._base_plan_id = base_plan_id

    @property
    def offer_id(self):
        """Gets the offer_id of this SubscriptionOffer.

        Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.

        :return: The offer_id of this SubscriptionOffer.
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this SubscriptionOffer.

        Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.

        :param offer_id: The offer_id of this SubscriptionOffer.
        :type offer_id: str
        """

        self._offer_id = offer_id

    @property
    def offer_tags(self):
        """Gets the offer_tags of this SubscriptionOffer.

        List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.

        :return: The offer_tags of this SubscriptionOffer.
        :rtype: List[OfferTag]
        """
        return self._offer_tags

    @offer_tags.setter
    def offer_tags(self, offer_tags):
        """Sets the offer_tags of this SubscriptionOffer.

        List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.

        :param offer_tags: The offer_tags of this SubscriptionOffer.
        :type offer_tags: List[OfferTag]
        """

        self._offer_tags = offer_tags

    @property
    def other_regions_config(self):
        """Gets the other_regions_config of this SubscriptionOffer.


        :return: The other_regions_config of this SubscriptionOffer.
        :rtype: OtherRegionsSubscriptionOfferConfig
        """
        return self._other_regions_config

    @other_regions_config.setter
    def other_regions_config(self, other_regions_config):
        """Sets the other_regions_config of this SubscriptionOffer.


        :param other_regions_config: The other_regions_config of this SubscriptionOffer.
        :type other_regions_config: OtherRegionsSubscriptionOfferConfig
        """

        self._other_regions_config = other_regions_config

    @property
    def package_name(self):
        """Gets the package_name of this SubscriptionOffer.

        Required. Immutable. The package name of the app the parent subscription belongs to.

        :return: The package_name of this SubscriptionOffer.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this SubscriptionOffer.

        Required. Immutable. The package name of the app the parent subscription belongs to.

        :param package_name: The package_name of this SubscriptionOffer.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def phases(self):
        """Gets the phases of this SubscriptionOffer.

        Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.

        :return: The phases of this SubscriptionOffer.
        :rtype: List[SubscriptionOfferPhase]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this SubscriptionOffer.

        Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.

        :param phases: The phases of this SubscriptionOffer.
        :type phases: List[SubscriptionOfferPhase]
        """

        self._phases = phases

    @property
    def product_id(self):
        """Gets the product_id of this SubscriptionOffer.

        Required. Immutable. The ID of the parent subscription this offer belongs to.

        :return: The product_id of this SubscriptionOffer.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SubscriptionOffer.

        Required. Immutable. The ID of the parent subscription this offer belongs to.

        :param product_id: The product_id of this SubscriptionOffer.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def regional_configs(self):
        """Gets the regional_configs of this SubscriptionOffer.

        Required. The region-specific configuration of this offer. Must contain at least one entry.

        :return: The regional_configs of this SubscriptionOffer.
        :rtype: List[RegionalSubscriptionOfferConfig]
        """
        return self._regional_configs

    @regional_configs.setter
    def regional_configs(self, regional_configs):
        """Sets the regional_configs of this SubscriptionOffer.

        Required. The region-specific configuration of this offer. Must contain at least one entry.

        :param regional_configs: The regional_configs of this SubscriptionOffer.
        :type regional_configs: List[RegionalSubscriptionOfferConfig]
        """

        self._regional_configs = regional_configs

    @property
    def state(self):
        """Gets the state of this SubscriptionOffer.

        Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.

        :return: The state of this SubscriptionOffer.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionOffer.

        Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.

        :param state: The state of this SubscriptionOffer.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "ACTIVE", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def targeting(self):
        """Gets the targeting of this SubscriptionOffer.


        :return: The targeting of this SubscriptionOffer.
        :rtype: SubscriptionOfferTargeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this SubscriptionOffer.


        :param targeting: The targeting of this SubscriptionOffer.
        :type targeting: SubscriptionOfferTargeting
        """

        self._targeting = targeting
