# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_app_product_listing import InAppProductListing
from openapi_server.models.managed_product_tax_and_compliance_settings import ManagedProductTaxAndComplianceSettings
from openapi_server.models.price import Price
from openapi_server.models.subscription_tax_and_compliance_settings import SubscriptionTaxAndComplianceSettings
from openapi_server import util


class InAppProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_language: str=None, default_price: Price=None, grace_period: str=None, listings: Dict[str, InAppProductListing]=None, managed_product_taxes_and_compliance_settings: ManagedProductTaxAndComplianceSettings=None, package_name: str=None, prices: Dict[str, Price]=None, purchase_type: str=None, sku: str=None, status: str=None, subscription_period: str=None, subscription_taxes_and_compliance_settings: SubscriptionTaxAndComplianceSettings=None, trial_period: str=None):
        """InAppProduct - a model defined in OpenAPI

        :param default_language: The default_language of this InAppProduct.
        :param default_price: The default_price of this InAppProduct.
        :param grace_period: The grace_period of this InAppProduct.
        :param listings: The listings of this InAppProduct.
        :param managed_product_taxes_and_compliance_settings: The managed_product_taxes_and_compliance_settings of this InAppProduct.
        :param package_name: The package_name of this InAppProduct.
        :param prices: The prices of this InAppProduct.
        :param purchase_type: The purchase_type of this InAppProduct.
        :param sku: The sku of this InAppProduct.
        :param status: The status of this InAppProduct.
        :param subscription_period: The subscription_period of this InAppProduct.
        :param subscription_taxes_and_compliance_settings: The subscription_taxes_and_compliance_settings of this InAppProduct.
        :param trial_period: The trial_period of this InAppProduct.
        """
        self.openapi_types = {
            'default_language': str,
            'default_price': Price,
            'grace_period': str,
            'listings': Dict[str, InAppProductListing],
            'managed_product_taxes_and_compliance_settings': ManagedProductTaxAndComplianceSettings,
            'package_name': str,
            'prices': Dict[str, Price],
            'purchase_type': str,
            'sku': str,
            'status': str,
            'subscription_period': str,
            'subscription_taxes_and_compliance_settings': SubscriptionTaxAndComplianceSettings,
            'trial_period': str
        }

        self.attribute_map = {
            'default_language': 'defaultLanguage',
            'default_price': 'defaultPrice',
            'grace_period': 'gracePeriod',
            'listings': 'listings',
            'managed_product_taxes_and_compliance_settings': 'managedProductTaxesAndComplianceSettings',
            'package_name': 'packageName',
            'prices': 'prices',
            'purchase_type': 'purchaseType',
            'sku': 'sku',
            'status': 'status',
            'subscription_period': 'subscriptionPeriod',
            'subscription_taxes_and_compliance_settings': 'subscriptionTaxesAndComplianceSettings',
            'trial_period': 'trialPeriod'
        }

        self._default_language = default_language
        self._default_price = default_price
        self._grace_period = grace_period
        self._listings = listings
        self._managed_product_taxes_and_compliance_settings = managed_product_taxes_and_compliance_settings
        self._package_name = package_name
        self._prices = prices
        self._purchase_type = purchase_type
        self._sku = sku
        self._status = status
        self._subscription_period = subscription_period
        self._subscription_taxes_and_compliance_settings = subscription_taxes_and_compliance_settings
        self._trial_period = trial_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InAppProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InAppProduct of this InAppProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_language(self):
        """Gets the default_language of this InAppProduct.

        Default language of the localized data, as defined by BCP-47. e.g. \"en-US\".

        :return: The default_language of this InAppProduct.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this InAppProduct.

        Default language of the localized data, as defined by BCP-47. e.g. \"en-US\".

        :param default_language: The default_language of this InAppProduct.
        :type default_language: str
        """

        self._default_language = default_language

    @property
    def default_price(self):
        """Gets the default_price of this InAppProduct.


        :return: The default_price of this InAppProduct.
        :rtype: Price
        """
        return self._default_price

    @default_price.setter
    def default_price(self, default_price):
        """Sets the default_price of this InAppProduct.


        :param default_price: The default_price of this InAppProduct.
        :type default_price: Price
        """

        self._default_price = default_price

    @property
    def grace_period(self):
        """Gets the grace_period of this InAppProduct.

        Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).

        :return: The grace_period of this InAppProduct.
        :rtype: str
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this InAppProduct.

        Grace period of the subscription, specified in ISO 8601 format. Allows developers to give their subscribers a grace period when the payment for the new recurrence period is declined. Acceptable values are P0D (zero days), P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).

        :param grace_period: The grace_period of this InAppProduct.
        :type grace_period: str
        """

        self._grace_period = grace_period

    @property
    def listings(self):
        """Gets the listings of this InAppProduct.

        List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. \"en-US\".

        :return: The listings of this InAppProduct.
        :rtype: Dict[str, InAppProductListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this InAppProduct.

        List of localized title and description data. Map key is the language of the localized data, as defined by BCP-47, e.g. \"en-US\".

        :param listings: The listings of this InAppProduct.
        :type listings: Dict[str, InAppProductListing]
        """

        self._listings = listings

    @property
    def managed_product_taxes_and_compliance_settings(self):
        """Gets the managed_product_taxes_and_compliance_settings of this InAppProduct.


        :return: The managed_product_taxes_and_compliance_settings of this InAppProduct.
        :rtype: ManagedProductTaxAndComplianceSettings
        """
        return self._managed_product_taxes_and_compliance_settings

    @managed_product_taxes_and_compliance_settings.setter
    def managed_product_taxes_and_compliance_settings(self, managed_product_taxes_and_compliance_settings):
        """Sets the managed_product_taxes_and_compliance_settings of this InAppProduct.


        :param managed_product_taxes_and_compliance_settings: The managed_product_taxes_and_compliance_settings of this InAppProduct.
        :type managed_product_taxes_and_compliance_settings: ManagedProductTaxAndComplianceSettings
        """

        self._managed_product_taxes_and_compliance_settings = managed_product_taxes_and_compliance_settings

    @property
    def package_name(self):
        """Gets the package_name of this InAppProduct.

        Package name of the parent app.

        :return: The package_name of this InAppProduct.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this InAppProduct.

        Package name of the parent app.

        :param package_name: The package_name of this InAppProduct.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def prices(self):
        """Gets the prices of this InAppProduct.

        Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2.

        :return: The prices of this InAppProduct.
        :rtype: Dict[str, Price]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """Sets the prices of this InAppProduct.

        Prices per buyer region. None of these can be zero, as in-app products are never free. Map key is region code, as defined by ISO 3166-2.

        :param prices: The prices of this InAppProduct.
        :type prices: Dict[str, Price]
        """

        self._prices = prices

    @property
    def purchase_type(self):
        """Gets the purchase_type of this InAppProduct.

        The type of the product, e.g. a recurring subscription.

        :return: The purchase_type of this InAppProduct.
        :rtype: str
        """
        return self._purchase_type

    @purchase_type.setter
    def purchase_type(self, purchase_type):
        """Sets the purchase_type of this InAppProduct.

        The type of the product, e.g. a recurring subscription.

        :param purchase_type: The purchase_type of this InAppProduct.
        :type purchase_type: str
        """
        allowed_values = ["purchaseTypeUnspecified", "managedUser", "subscription"]  # noqa: E501
        if purchase_type not in allowed_values:
            raise ValueError(
                "Invalid value for `purchase_type` ({0}), must be one of {1}"
                .format(purchase_type, allowed_values)
            )

        self._purchase_type = purchase_type

    @property
    def sku(self):
        """Gets the sku of this InAppProduct.

        Stock-keeping-unit (SKU) of the product, unique within an app.

        :return: The sku of this InAppProduct.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InAppProduct.

        Stock-keeping-unit (SKU) of the product, unique within an app.

        :param sku: The sku of this InAppProduct.
        :type sku: str
        """

        self._sku = sku

    @property
    def status(self):
        """Gets the status of this InAppProduct.

        The status of the product, e.g. whether it's active.

        :return: The status of this InAppProduct.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InAppProduct.

        The status of the product, e.g. whether it's active.

        :param status: The status of this InAppProduct.
        :type status: str
        """
        allowed_values = ["statusUnspecified", "active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_period(self):
        """Gets the subscription_period of this InAppProduct.

        Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year).

        :return: The subscription_period of this InAppProduct.
        :rtype: str
        """
        return self._subscription_period

    @subscription_period.setter
    def subscription_period(self, subscription_period):
        """Sets the subscription_period of this InAppProduct.

        Subscription period, specified in ISO 8601 format. Acceptable values are P1W (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y (one year).

        :param subscription_period: The subscription_period of this InAppProduct.
        :type subscription_period: str
        """

        self._subscription_period = subscription_period

    @property
    def subscription_taxes_and_compliance_settings(self):
        """Gets the subscription_taxes_and_compliance_settings of this InAppProduct.


        :return: The subscription_taxes_and_compliance_settings of this InAppProduct.
        :rtype: SubscriptionTaxAndComplianceSettings
        """
        return self._subscription_taxes_and_compliance_settings

    @subscription_taxes_and_compliance_settings.setter
    def subscription_taxes_and_compliance_settings(self, subscription_taxes_and_compliance_settings):
        """Sets the subscription_taxes_and_compliance_settings of this InAppProduct.


        :param subscription_taxes_and_compliance_settings: The subscription_taxes_and_compliance_settings of this InAppProduct.
        :type subscription_taxes_and_compliance_settings: SubscriptionTaxAndComplianceSettings
        """

        self._subscription_taxes_and_compliance_settings = subscription_taxes_and_compliance_settings

    @property
    def trial_period(self):
        """Gets the trial_period of this InAppProduct.

        Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days).

        :return: The trial_period of this InAppProduct.
        :rtype: str
        """
        return self._trial_period

    @trial_period.setter
    def trial_period(self, trial_period):
        """Sets the trial_period of this InAppProduct.

        Trial period, specified in ISO 8601 format. Acceptable values are anything between P7D (seven days) and P999D (999 days).

        :param trial_period: The trial_period of this InAppProduct.
        :type trial_period: str
        """

        self._trial_period = trial_period
