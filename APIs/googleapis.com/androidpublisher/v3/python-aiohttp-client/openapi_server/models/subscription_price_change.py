# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class SubscriptionPriceChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_price: Price=None, state: int=None):
        """SubscriptionPriceChange - a model defined in OpenAPI

        :param new_price: The new_price of this SubscriptionPriceChange.
        :param state: The state of this SubscriptionPriceChange.
        """
        self.openapi_types = {
            'new_price': Price,
            'state': int
        }

        self.attribute_map = {
            'new_price': 'newPrice',
            'state': 'state'
        }

        self._new_price = new_price
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPriceChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPriceChange of this SubscriptionPriceChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_price(self):
        """Gets the new_price of this SubscriptionPriceChange.


        :return: The new_price of this SubscriptionPriceChange.
        :rtype: Price
        """
        return self._new_price

    @new_price.setter
    def new_price(self, new_price):
        """Sets the new_price of this SubscriptionPriceChange.


        :param new_price: The new_price of this SubscriptionPriceChange.
        :type new_price: Price
        """

        self._new_price = new_price

    @property
    def state(self):
        """Gets the state of this SubscriptionPriceChange.

        The current state of the price change. Possible values are: 0. Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek confirmation from the user using the In-App API. 1. Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.

        :return: The state of this SubscriptionPriceChange.
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionPriceChange.

        The current state of the price change. Possible values are: 0. Outstanding: State for a pending price change waiting for the user to agree. In this state, you can optionally seek confirmation from the user using the In-App API. 1. Accepted: State for an accepted price change that the subscription will renew with unless it's canceled. The price change takes effect on a future date when the subscription renews. Note that the change might not occur when the subscription is renewed next.

        :param state: The state of this SubscriptionPriceChange.
        :type state: int
        """

        self._state = state
