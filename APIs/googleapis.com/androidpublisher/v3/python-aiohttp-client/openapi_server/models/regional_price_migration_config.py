# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalPriceMigrationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, oldest_allowed_price_version_time: str=None, price_increase_type: str=None, region_code: str=None):
        """RegionalPriceMigrationConfig - a model defined in OpenAPI

        :param oldest_allowed_price_version_time: The oldest_allowed_price_version_time of this RegionalPriceMigrationConfig.
        :param price_increase_type: The price_increase_type of this RegionalPriceMigrationConfig.
        :param region_code: The region_code of this RegionalPriceMigrationConfig.
        """
        self.openapi_types = {
            'oldest_allowed_price_version_time': str,
            'price_increase_type': str,
            'region_code': str
        }

        self.attribute_map = {
            'oldest_allowed_price_version_time': 'oldestAllowedPriceVersionTime',
            'price_increase_type': 'priceIncreaseType',
            'region_code': 'regionCode'
        }

        self._oldest_allowed_price_version_time = oldest_allowed_price_version_time
        self._price_increase_type = price_increase_type
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalPriceMigrationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalPriceMigrationConfig of this RegionalPriceMigrationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def oldest_allowed_price_version_time(self):
        """Gets the oldest_allowed_price_version_time of this RegionalPriceMigrationConfig.

        Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.

        :return: The oldest_allowed_price_version_time of this RegionalPriceMigrationConfig.
        :rtype: str
        """
        return self._oldest_allowed_price_version_time

    @oldest_allowed_price_version_time.setter
    def oldest_allowed_price_version_time(self, oldest_allowed_price_version_time):
        """Sets the oldest_allowed_price_version_time of this RegionalPriceMigrationConfig.

        Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.

        :param oldest_allowed_price_version_time: The oldest_allowed_price_version_time of this RegionalPriceMigrationConfig.
        :type oldest_allowed_price_version_time: str
        """

        self._oldest_allowed_price_version_time = oldest_allowed_price_version_time

    @property
    def price_increase_type(self):
        """Gets the price_increase_type of this RegionalPriceMigrationConfig.

        Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.

        :return: The price_increase_type of this RegionalPriceMigrationConfig.
        :rtype: str
        """
        return self._price_increase_type

    @price_increase_type.setter
    def price_increase_type(self, price_increase_type):
        """Sets the price_increase_type of this RegionalPriceMigrationConfig.

        Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.

        :param price_increase_type: The price_increase_type of this RegionalPriceMigrationConfig.
        :type price_increase_type: str
        """
        allowed_values = ["PRICE_INCREASE_TYPE_UNSPECIFIED", "PRICE_INCREASE_TYPE_OPT_IN", "PRICE_INCREASE_TYPE_OPT_OUT"]  # noqa: E501
        if price_increase_type not in allowed_values:
            raise ValueError(
                "Invalid value for `price_increase_type` ({0}), must be one of {1}"
                .format(price_increase_type, allowed_values)
            )

        self._price_increase_type = price_increase_type

    @property
    def region_code(self):
        """Gets the region_code of this RegionalPriceMigrationConfig.

        Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :return: The region_code of this RegionalPriceMigrationConfig.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this RegionalPriceMigrationConfig.

        Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :param region_code: The region_code of this RegionalPriceMigrationConfig.
        :type region_code: str
        """

        self._region_code = region_code
