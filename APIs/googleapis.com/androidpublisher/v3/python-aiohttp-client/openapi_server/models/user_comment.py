# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_metadata import DeviceMetadata
from openapi_server.models.timestamp import Timestamp
from openapi_server import util


class UserComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, android_os_version: int=None, app_version_code: int=None, app_version_name: str=None, device: str=None, device_metadata: DeviceMetadata=None, last_modified: Timestamp=None, original_text: str=None, reviewer_language: str=None, star_rating: int=None, text: str=None, thumbs_down_count: int=None, thumbs_up_count: int=None):
        """UserComment - a model defined in OpenAPI

        :param android_os_version: The android_os_version of this UserComment.
        :param app_version_code: The app_version_code of this UserComment.
        :param app_version_name: The app_version_name of this UserComment.
        :param device: The device of this UserComment.
        :param device_metadata: The device_metadata of this UserComment.
        :param last_modified: The last_modified of this UserComment.
        :param original_text: The original_text of this UserComment.
        :param reviewer_language: The reviewer_language of this UserComment.
        :param star_rating: The star_rating of this UserComment.
        :param text: The text of this UserComment.
        :param thumbs_down_count: The thumbs_down_count of this UserComment.
        :param thumbs_up_count: The thumbs_up_count of this UserComment.
        """
        self.openapi_types = {
            'android_os_version': int,
            'app_version_code': int,
            'app_version_name': str,
            'device': str,
            'device_metadata': DeviceMetadata,
            'last_modified': Timestamp,
            'original_text': str,
            'reviewer_language': str,
            'star_rating': int,
            'text': str,
            'thumbs_down_count': int,
            'thumbs_up_count': int
        }

        self.attribute_map = {
            'android_os_version': 'androidOsVersion',
            'app_version_code': 'appVersionCode',
            'app_version_name': 'appVersionName',
            'device': 'device',
            'device_metadata': 'deviceMetadata',
            'last_modified': 'lastModified',
            'original_text': 'originalText',
            'reviewer_language': 'reviewerLanguage',
            'star_rating': 'starRating',
            'text': 'text',
            'thumbs_down_count': 'thumbsDownCount',
            'thumbs_up_count': 'thumbsUpCount'
        }

        self._android_os_version = android_os_version
        self._app_version_code = app_version_code
        self._app_version_name = app_version_name
        self._device = device
        self._device_metadata = device_metadata
        self._last_modified = last_modified
        self._original_text = original_text
        self._reviewer_language = reviewer_language
        self._star_rating = star_rating
        self._text = text
        self._thumbs_down_count = thumbs_down_count
        self._thumbs_up_count = thumbs_up_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserComment of this UserComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def android_os_version(self):
        """Gets the android_os_version of this UserComment.

        Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.

        :return: The android_os_version of this UserComment.
        :rtype: int
        """
        return self._android_os_version

    @android_os_version.setter
    def android_os_version(self, android_os_version):
        """Sets the android_os_version of this UserComment.

        Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.

        :param android_os_version: The android_os_version of this UserComment.
        :type android_os_version: int
        """

        self._android_os_version = android_os_version

    @property
    def app_version_code(self):
        """Gets the app_version_code of this UserComment.

        Integer version code of the app as installed at the time the review was written. May be absent.

        :return: The app_version_code of this UserComment.
        :rtype: int
        """
        return self._app_version_code

    @app_version_code.setter
    def app_version_code(self, app_version_code):
        """Sets the app_version_code of this UserComment.

        Integer version code of the app as installed at the time the review was written. May be absent.

        :param app_version_code: The app_version_code of this UserComment.
        :type app_version_code: int
        """

        self._app_version_code = app_version_code

    @property
    def app_version_name(self):
        """Gets the app_version_name of this UserComment.

        String version name of the app as installed at the time the review was written. May be absent.

        :return: The app_version_name of this UserComment.
        :rtype: str
        """
        return self._app_version_name

    @app_version_name.setter
    def app_version_name(self, app_version_name):
        """Sets the app_version_name of this UserComment.

        String version name of the app as installed at the time the review was written. May be absent.

        :param app_version_name: The app_version_name of this UserComment.
        :type app_version_name: str
        """

        self._app_version_name = app_version_name

    @property
    def device(self):
        """Gets the device of this UserComment.

        Codename for the reviewer's device, e.g. klte, flounder. May be absent.

        :return: The device of this UserComment.
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this UserComment.

        Codename for the reviewer's device, e.g. klte, flounder. May be absent.

        :param device: The device of this UserComment.
        :type device: str
        """

        self._device = device

    @property
    def device_metadata(self):
        """Gets the device_metadata of this UserComment.


        :return: The device_metadata of this UserComment.
        :rtype: DeviceMetadata
        """
        return self._device_metadata

    @device_metadata.setter
    def device_metadata(self, device_metadata):
        """Sets the device_metadata of this UserComment.


        :param device_metadata: The device_metadata of this UserComment.
        :type device_metadata: DeviceMetadata
        """

        self._device_metadata = device_metadata

    @property
    def last_modified(self):
        """Gets the last_modified of this UserComment.


        :return: The last_modified of this UserComment.
        :rtype: Timestamp
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this UserComment.


        :param last_modified: The last_modified of this UserComment.
        :type last_modified: Timestamp
        """

        self._last_modified = last_modified

    @property
    def original_text(self):
        """Gets the original_text of this UserComment.

        Untranslated text of the review, where the review was translated. If the review was not translated this is left blank.

        :return: The original_text of this UserComment.
        :rtype: str
        """
        return self._original_text

    @original_text.setter
    def original_text(self, original_text):
        """Sets the original_text of this UserComment.

        Untranslated text of the review, where the review was translated. If the review was not translated this is left blank.

        :param original_text: The original_text of this UserComment.
        :type original_text: str
        """

        self._original_text = original_text

    @property
    def reviewer_language(self):
        """Gets the reviewer_language of this UserComment.

        Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.

        :return: The reviewer_language of this UserComment.
        :rtype: str
        """
        return self._reviewer_language

    @reviewer_language.setter
    def reviewer_language(self, reviewer_language):
        """Sets the reviewer_language of this UserComment.

        Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.

        :param reviewer_language: The reviewer_language of this UserComment.
        :type reviewer_language: str
        """

        self._reviewer_language = reviewer_language

    @property
    def star_rating(self):
        """Gets the star_rating of this UserComment.

        The star rating associated with the review, from 1 to 5.

        :return: The star_rating of this UserComment.
        :rtype: int
        """
        return self._star_rating

    @star_rating.setter
    def star_rating(self, star_rating):
        """Sets the star_rating of this UserComment.

        The star rating associated with the review, from 1 to 5.

        :param star_rating: The star_rating of this UserComment.
        :type star_rating: int
        """

        self._star_rating = star_rating

    @property
    def text(self):
        """Gets the text of this UserComment.

        The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.

        :return: The text of this UserComment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this UserComment.

        The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.

        :param text: The text of this UserComment.
        :type text: str
        """

        self._text = text

    @property
    def thumbs_down_count(self):
        """Gets the thumbs_down_count of this UserComment.

        Number of users who have given this review a thumbs down.

        :return: The thumbs_down_count of this UserComment.
        :rtype: int
        """
        return self._thumbs_down_count

    @thumbs_down_count.setter
    def thumbs_down_count(self, thumbs_down_count):
        """Sets the thumbs_down_count of this UserComment.

        Number of users who have given this review a thumbs down.

        :param thumbs_down_count: The thumbs_down_count of this UserComment.
        :type thumbs_down_count: int
        """

        self._thumbs_down_count = thumbs_down_count

    @property
    def thumbs_up_count(self):
        """Gets the thumbs_up_count of this UserComment.

        Number of users who have given this review a thumbs up.

        :return: The thumbs_up_count of this UserComment.
        :rtype: int
        """
        return self._thumbs_up_count

    @thumbs_up_count.setter
    def thumbs_up_count(self, thumbs_up_count):
        """Sets the thumbs_up_count of this UserComment.

        Number of users who have given this review a thumbs up.

        :param thumbs_up_count: The thumbs_up_count of this UserComment.
        :type thumbs_up_count: int
        """

        self._thumbs_up_count = thumbs_up_count
