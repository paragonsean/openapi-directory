# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCountrySet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_codes: List[str]=None, name: str=None):
        """UserCountrySet - a model defined in OpenAPI

        :param country_codes: The country_codes of this UserCountrySet.
        :param name: The name of this UserCountrySet.
        """
        self.openapi_types = {
            'country_codes': List[str],
            'name': str
        }

        self.attribute_map = {
            'country_codes': 'countryCodes',
            'name': 'name'
        }

        self._country_codes = country_codes
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCountrySet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCountrySet of this UserCountrySet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_codes(self):
        """Gets the country_codes of this UserCountrySet.

        List of country codes representing countries. A Country code is represented in ISO 3166 alpha-2 format. For Example:- \"IT\" for Italy, \"GE\" for Georgia.

        :return: The country_codes of this UserCountrySet.
        :rtype: List[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this UserCountrySet.

        List of country codes representing countries. A Country code is represented in ISO 3166 alpha-2 format. For Example:- \"IT\" for Italy, \"GE\" for Georgia.

        :param country_codes: The country_codes of this UserCountrySet.
        :type country_codes: List[str]
        """

        self._country_codes = country_codes

    @property
    def name(self):
        """Gets the name of this UserCountrySet.

        Country set name.

        :return: The name of this UserCountrySet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCountrySet.

        Country set name.

        :param name: The name of this UserCountrySet.
        :type name: str
        """

        self._name = name
