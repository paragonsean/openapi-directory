# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_brand: str=None, build_device: str=None):
        """DeviceId - a model defined in OpenAPI

        :param build_brand: The build_brand of this DeviceId.
        :param build_device: The build_device of this DeviceId.
        """
        self.openapi_types = {
            'build_brand': str,
            'build_device': str
        }

        self.attribute_map = {
            'build_brand': 'buildBrand',
            'build_device': 'buildDevice'
        }

        self._build_brand = build_brand
        self._build_device = build_device

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceId of this DeviceId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_brand(self):
        """Gets the build_brand of this DeviceId.

        Value of Build.BRAND.

        :return: The build_brand of this DeviceId.
        :rtype: str
        """
        return self._build_brand

    @build_brand.setter
    def build_brand(self, build_brand):
        """Sets the build_brand of this DeviceId.

        Value of Build.BRAND.

        :param build_brand: The build_brand of this DeviceId.
        :type build_brand: str
        """

        self._build_brand = build_brand

    @property
    def build_device(self):
        """Gets the build_device of this DeviceId.

        Value of Build.DEVICE.

        :return: The build_device of this DeviceId.
        :rtype: str
        """
        return self._build_device

    @build_device.setter
    def build_device(self, build_device):
        """Sets the build_device of this DeviceId.

        Value of Build.DEVICE.

        :param build_device: The build_device of this DeviceId.
        :type build_device: str
        """

        self._build_device = build_device
