# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductPurchase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_state: int=None, consumption_state: int=None, developer_payload: str=None, kind: str=None, obfuscated_external_account_id: str=None, obfuscated_external_profile_id: str=None, order_id: str=None, product_id: str=None, purchase_state: int=None, purchase_time_millis: str=None, purchase_token: str=None, purchase_type: int=None, quantity: int=None, region_code: str=None):
        """ProductPurchase - a model defined in OpenAPI

        :param acknowledgement_state: The acknowledgement_state of this ProductPurchase.
        :param consumption_state: The consumption_state of this ProductPurchase.
        :param developer_payload: The developer_payload of this ProductPurchase.
        :param kind: The kind of this ProductPurchase.
        :param obfuscated_external_account_id: The obfuscated_external_account_id of this ProductPurchase.
        :param obfuscated_external_profile_id: The obfuscated_external_profile_id of this ProductPurchase.
        :param order_id: The order_id of this ProductPurchase.
        :param product_id: The product_id of this ProductPurchase.
        :param purchase_state: The purchase_state of this ProductPurchase.
        :param purchase_time_millis: The purchase_time_millis of this ProductPurchase.
        :param purchase_token: The purchase_token of this ProductPurchase.
        :param purchase_type: The purchase_type of this ProductPurchase.
        :param quantity: The quantity of this ProductPurchase.
        :param region_code: The region_code of this ProductPurchase.
        """
        self.openapi_types = {
            'acknowledgement_state': int,
            'consumption_state': int,
            'developer_payload': str,
            'kind': str,
            'obfuscated_external_account_id': str,
            'obfuscated_external_profile_id': str,
            'order_id': str,
            'product_id': str,
            'purchase_state': int,
            'purchase_time_millis': str,
            'purchase_token': str,
            'purchase_type': int,
            'quantity': int,
            'region_code': str
        }

        self.attribute_map = {
            'acknowledgement_state': 'acknowledgementState',
            'consumption_state': 'consumptionState',
            'developer_payload': 'developerPayload',
            'kind': 'kind',
            'obfuscated_external_account_id': 'obfuscatedExternalAccountId',
            'obfuscated_external_profile_id': 'obfuscatedExternalProfileId',
            'order_id': 'orderId',
            'product_id': 'productId',
            'purchase_state': 'purchaseState',
            'purchase_time_millis': 'purchaseTimeMillis',
            'purchase_token': 'purchaseToken',
            'purchase_type': 'purchaseType',
            'quantity': 'quantity',
            'region_code': 'regionCode'
        }

        self._acknowledgement_state = acknowledgement_state
        self._consumption_state = consumption_state
        self._developer_payload = developer_payload
        self._kind = kind
        self._obfuscated_external_account_id = obfuscated_external_account_id
        self._obfuscated_external_profile_id = obfuscated_external_profile_id
        self._order_id = order_id
        self._product_id = product_id
        self._purchase_state = purchase_state
        self._purchase_time_millis = purchase_time_millis
        self._purchase_token = purchase_token
        self._purchase_type = purchase_type
        self._quantity = quantity
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPurchase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPurchase of this ProductPurchase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_state(self):
        """Gets the acknowledgement_state of this ProductPurchase.

        The acknowledgement state of the inapp product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged

        :return: The acknowledgement_state of this ProductPurchase.
        :rtype: int
        """
        return self._acknowledgement_state

    @acknowledgement_state.setter
    def acknowledgement_state(self, acknowledgement_state):
        """Sets the acknowledgement_state of this ProductPurchase.

        The acknowledgement state of the inapp product. Possible values are: 0. Yet to be acknowledged 1. Acknowledged

        :param acknowledgement_state: The acknowledgement_state of this ProductPurchase.
        :type acknowledgement_state: int
        """

        self._acknowledgement_state = acknowledgement_state

    @property
    def consumption_state(self):
        """Gets the consumption_state of this ProductPurchase.

        The consumption state of the inapp product. Possible values are: 0. Yet to be consumed 1. Consumed

        :return: The consumption_state of this ProductPurchase.
        :rtype: int
        """
        return self._consumption_state

    @consumption_state.setter
    def consumption_state(self, consumption_state):
        """Sets the consumption_state of this ProductPurchase.

        The consumption state of the inapp product. Possible values are: 0. Yet to be consumed 1. Consumed

        :param consumption_state: The consumption_state of this ProductPurchase.
        :type consumption_state: int
        """

        self._consumption_state = consumption_state

    @property
    def developer_payload(self):
        """Gets the developer_payload of this ProductPurchase.

        A developer-specified string that contains supplemental information about an order.

        :return: The developer_payload of this ProductPurchase.
        :rtype: str
        """
        return self._developer_payload

    @developer_payload.setter
    def developer_payload(self, developer_payload):
        """Sets the developer_payload of this ProductPurchase.

        A developer-specified string that contains supplemental information about an order.

        :param developer_payload: The developer_payload of this ProductPurchase.
        :type developer_payload: str
        """

        self._developer_payload = developer_payload

    @property
    def kind(self):
        """Gets the kind of this ProductPurchase.

        This kind represents an inappPurchase object in the androidpublisher service.

        :return: The kind of this ProductPurchase.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProductPurchase.

        This kind represents an inappPurchase object in the androidpublisher service.

        :param kind: The kind of this ProductPurchase.
        :type kind: str
        """

        self._kind = kind

    @property
    def obfuscated_external_account_id(self):
        """Gets the obfuscated_external_account_id of this ProductPurchase.

        An obfuscated version of the id that is uniquely associated with the user's account in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.

        :return: The obfuscated_external_account_id of this ProductPurchase.
        :rtype: str
        """
        return self._obfuscated_external_account_id

    @obfuscated_external_account_id.setter
    def obfuscated_external_account_id(self, obfuscated_external_account_id):
        """Sets the obfuscated_external_account_id of this ProductPurchase.

        An obfuscated version of the id that is uniquely associated with the user's account in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid when the purchase was made.

        :param obfuscated_external_account_id: The obfuscated_external_account_id of this ProductPurchase.
        :type obfuscated_external_account_id: str
        """

        self._obfuscated_external_account_id = obfuscated_external_account_id

    @property
    def obfuscated_external_profile_id(self):
        """Gets the obfuscated_external_profile_id of this ProductPurchase.

        An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.

        :return: The obfuscated_external_profile_id of this ProductPurchase.
        :rtype: str
        """
        return self._obfuscated_external_profile_id

    @obfuscated_external_profile_id.setter
    def obfuscated_external_profile_id(self, obfuscated_external_profile_id):
        """Sets the obfuscated_external_profile_id of this ProductPurchase.

        An obfuscated version of the id that is uniquely associated with the user's profile in your app. Only present if specified using https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid when the purchase was made.

        :param obfuscated_external_profile_id: The obfuscated_external_profile_id of this ProductPurchase.
        :type obfuscated_external_profile_id: str
        """

        self._obfuscated_external_profile_id = obfuscated_external_profile_id

    @property
    def order_id(self):
        """Gets the order_id of this ProductPurchase.

        The order id associated with the purchase of the inapp product.

        :return: The order_id of this ProductPurchase.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this ProductPurchase.

        The order id associated with the purchase of the inapp product.

        :param order_id: The order_id of this ProductPurchase.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def product_id(self):
        """Gets the product_id of this ProductPurchase.

        The inapp product SKU. May not be present.

        :return: The product_id of this ProductPurchase.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductPurchase.

        The inapp product SKU. May not be present.

        :param product_id: The product_id of this ProductPurchase.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def purchase_state(self):
        """Gets the purchase_state of this ProductPurchase.

        The purchase state of the order. Possible values are: 0. Purchased 1. Canceled 2. Pending

        :return: The purchase_state of this ProductPurchase.
        :rtype: int
        """
        return self._purchase_state

    @purchase_state.setter
    def purchase_state(self, purchase_state):
        """Sets the purchase_state of this ProductPurchase.

        The purchase state of the order. Possible values are: 0. Purchased 1. Canceled 2. Pending

        :param purchase_state: The purchase_state of this ProductPurchase.
        :type purchase_state: int
        """

        self._purchase_state = purchase_state

    @property
    def purchase_time_millis(self):
        """Gets the purchase_time_millis of this ProductPurchase.

        The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).

        :return: The purchase_time_millis of this ProductPurchase.
        :rtype: str
        """
        return self._purchase_time_millis

    @purchase_time_millis.setter
    def purchase_time_millis(self, purchase_time_millis):
        """Sets the purchase_time_millis of this ProductPurchase.

        The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).

        :param purchase_time_millis: The purchase_time_millis of this ProductPurchase.
        :type purchase_time_millis: str
        """

        self._purchase_time_millis = purchase_time_millis

    @property
    def purchase_token(self):
        """Gets the purchase_token of this ProductPurchase.

        The purchase token generated to identify this purchase. May not be present.

        :return: The purchase_token of this ProductPurchase.
        :rtype: str
        """
        return self._purchase_token

    @purchase_token.setter
    def purchase_token(self, purchase_token):
        """Sets the purchase_token of this ProductPurchase.

        The purchase token generated to identify this purchase. May not be present.

        :param purchase_token: The purchase_token of this ProductPurchase.
        :type purchase_token: str
        """

        self._purchase_token = purchase_token

    @property
    def purchase_type(self):
        """Gets the purchase_type of this ProductPurchase.

        The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased from a license testing account) 1. Promo (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video ad instead of paying)

        :return: The purchase_type of this ProductPurchase.
        :rtype: int
        """
        return self._purchase_type

    @purchase_type.setter
    def purchase_type(self, purchase_type):
        """Sets the purchase_type of this ProductPurchase.

        The type of purchase of the inapp product. This field is only set if this purchase was not made using the standard in-app billing flow. Possible values are: 0. Test (i.e. purchased from a license testing account) 1. Promo (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video ad instead of paying)

        :param purchase_type: The purchase_type of this ProductPurchase.
        :type purchase_type: int
        """

        self._purchase_type = purchase_type

    @property
    def quantity(self):
        """Gets the quantity of this ProductPurchase.

        The quantity associated with the purchase of the inapp product. If not present, the quantity is 1.

        :return: The quantity of this ProductPurchase.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductPurchase.

        The quantity associated with the purchase of the inapp product. If not present, the quantity is 1.

        :param quantity: The quantity of this ProductPurchase.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def region_code(self):
        """Gets the region_code of this ProductPurchase.

        ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted.

        :return: The region_code of this ProductPurchase.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ProductPurchase.

        ISO 3166-1 alpha-2 billing region code of the user at the time the product was granted.

        :param region_code: The region_code of this ProductPurchase.
        :type region_code: str
        """

        self._region_code = region_code
