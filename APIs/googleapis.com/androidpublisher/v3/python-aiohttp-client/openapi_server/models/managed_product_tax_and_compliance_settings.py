# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regional_tax_rate_info import RegionalTaxRateInfo
from openapi_server import util


class ManagedProductTaxAndComplianceSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eea_withdrawal_right_type: str=None, is_tokenized_digital_asset: bool=None, tax_rate_info_by_region_code: Dict[str, RegionalTaxRateInfo]=None):
        """ManagedProductTaxAndComplianceSettings - a model defined in OpenAPI

        :param eea_withdrawal_right_type: The eea_withdrawal_right_type of this ManagedProductTaxAndComplianceSettings.
        :param is_tokenized_digital_asset: The is_tokenized_digital_asset of this ManagedProductTaxAndComplianceSettings.
        :param tax_rate_info_by_region_code: The tax_rate_info_by_region_code of this ManagedProductTaxAndComplianceSettings.
        """
        self.openapi_types = {
            'eea_withdrawal_right_type': str,
            'is_tokenized_digital_asset': bool,
            'tax_rate_info_by_region_code': Dict[str, RegionalTaxRateInfo]
        }

        self.attribute_map = {
            'eea_withdrawal_right_type': 'eeaWithdrawalRightType',
            'is_tokenized_digital_asset': 'isTokenizedDigitalAsset',
            'tax_rate_info_by_region_code': 'taxRateInfoByRegionCode'
        }

        self._eea_withdrawal_right_type = eea_withdrawal_right_type
        self._is_tokenized_digital_asset = is_tokenized_digital_asset
        self._tax_rate_info_by_region_code = tax_rate_info_by_region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ManagedProductTaxAndComplianceSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ManagedProductTaxAndComplianceSettings of this ManagedProductTaxAndComplianceSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eea_withdrawal_right_type(self):
        """Gets the eea_withdrawal_right_type of this ManagedProductTaxAndComplianceSettings.

        Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.

        :return: The eea_withdrawal_right_type of this ManagedProductTaxAndComplianceSettings.
        :rtype: str
        """
        return self._eea_withdrawal_right_type

    @eea_withdrawal_right_type.setter
    def eea_withdrawal_right_type(self, eea_withdrawal_right_type):
        """Sets the eea_withdrawal_right_type of this ManagedProductTaxAndComplianceSettings.

        Digital content or service classification for products distributed to users in the European Economic Area (EEA). The withdrawal regime under EEA consumer laws depends on this classification. Refer to the [Help Center article](https://support.google.com/googleplay/android-developer/answer/10463498) for more information.

        :param eea_withdrawal_right_type: The eea_withdrawal_right_type of this ManagedProductTaxAndComplianceSettings.
        :type eea_withdrawal_right_type: str
        """
        allowed_values = ["WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED", "WITHDRAWAL_RIGHT_DIGITAL_CONTENT", "WITHDRAWAL_RIGHT_SERVICE"]  # noqa: E501
        if eea_withdrawal_right_type not in allowed_values:
            raise ValueError(
                "Invalid value for `eea_withdrawal_right_type` ({0}), must be one of {1}"
                .format(eea_withdrawal_right_type, allowed_values)
            )

        self._eea_withdrawal_right_type = eea_withdrawal_right_type

    @property
    def is_tokenized_digital_asset(self):
        """Gets the is_tokenized_digital_asset of this ManagedProductTaxAndComplianceSettings.

        Whether this in-app product is declared as a product representing a tokenized digital asset.

        :return: The is_tokenized_digital_asset of this ManagedProductTaxAndComplianceSettings.
        :rtype: bool
        """
        return self._is_tokenized_digital_asset

    @is_tokenized_digital_asset.setter
    def is_tokenized_digital_asset(self, is_tokenized_digital_asset):
        """Sets the is_tokenized_digital_asset of this ManagedProductTaxAndComplianceSettings.

        Whether this in-app product is declared as a product representing a tokenized digital asset.

        :param is_tokenized_digital_asset: The is_tokenized_digital_asset of this ManagedProductTaxAndComplianceSettings.
        :type is_tokenized_digital_asset: bool
        """

        self._is_tokenized_digital_asset = is_tokenized_digital_asset

    @property
    def tax_rate_info_by_region_code(self):
        """Gets the tax_rate_info_by_region_code of this ManagedProductTaxAndComplianceSettings.

        A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's \"CLDR\".

        :return: The tax_rate_info_by_region_code of this ManagedProductTaxAndComplianceSettings.
        :rtype: Dict[str, RegionalTaxRateInfo]
        """
        return self._tax_rate_info_by_region_code

    @tax_rate_info_by_region_code.setter
    def tax_rate_info_by_region_code(self, tax_rate_info_by_region_code):
        """Sets the tax_rate_info_by_region_code of this ManagedProductTaxAndComplianceSettings.

        A mapping from region code to tax rate details. The keys are region codes as defined by Unicode's \"CLDR\".

        :param tax_rate_info_by_region_code: The tax_rate_info_by_region_code of this ManagedProductTaxAndComplianceSettings.
        :type tax_rate_info_by_region_code: Dict[str, RegionalTaxRateInfo]
        """

        self._tax_rate_info_by_region_code = tax_rate_info_by_region_code
