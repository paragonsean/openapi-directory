# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class RegionalSubscriptionOfferPhaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_discount: Money=None, price: Money=None, region_code: str=None, relative_discount: float=None):
        """RegionalSubscriptionOfferPhaseConfig - a model defined in OpenAPI

        :param absolute_discount: The absolute_discount of this RegionalSubscriptionOfferPhaseConfig.
        :param price: The price of this RegionalSubscriptionOfferPhaseConfig.
        :param region_code: The region_code of this RegionalSubscriptionOfferPhaseConfig.
        :param relative_discount: The relative_discount of this RegionalSubscriptionOfferPhaseConfig.
        """
        self.openapi_types = {
            'absolute_discount': Money,
            'price': Money,
            'region_code': str,
            'relative_discount': float
        }

        self.attribute_map = {
            'absolute_discount': 'absoluteDiscount',
            'price': 'price',
            'region_code': 'regionCode',
            'relative_discount': 'relativeDiscount'
        }

        self._absolute_discount = absolute_discount
        self._price = price
        self._region_code = region_code
        self._relative_discount = relative_discount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalSubscriptionOfferPhaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalSubscriptionOfferPhaseConfig of this RegionalSubscriptionOfferPhaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_discount(self):
        """Gets the absolute_discount of this RegionalSubscriptionOfferPhaseConfig.


        :return: The absolute_discount of this RegionalSubscriptionOfferPhaseConfig.
        :rtype: Money
        """
        return self._absolute_discount

    @absolute_discount.setter
    def absolute_discount(self, absolute_discount):
        """Sets the absolute_discount of this RegionalSubscriptionOfferPhaseConfig.


        :param absolute_discount: The absolute_discount of this RegionalSubscriptionOfferPhaseConfig.
        :type absolute_discount: Money
        """

        self._absolute_discount = absolute_discount

    @property
    def price(self):
        """Gets the price of this RegionalSubscriptionOfferPhaseConfig.


        :return: The price of this RegionalSubscriptionOfferPhaseConfig.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RegionalSubscriptionOfferPhaseConfig.


        :param price: The price of this RegionalSubscriptionOfferPhaseConfig.
        :type price: Money
        """

        self._price = price

    @property
    def region_code(self):
        """Gets the region_code of this RegionalSubscriptionOfferPhaseConfig.

        Required. Immutable. The region to which this config applies.

        :return: The region_code of this RegionalSubscriptionOfferPhaseConfig.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this RegionalSubscriptionOfferPhaseConfig.

        Required. Immutable. The region to which this config applies.

        :param region_code: The region_code of this RegionalSubscriptionOfferPhaseConfig.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def relative_discount(self):
        """Gets the relative_discount of this RegionalSubscriptionOfferPhaseConfig.

        The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in this region.

        :return: The relative_discount of this RegionalSubscriptionOfferPhaseConfig.
        :rtype: float
        """
        return self._relative_discount

    @relative_discount.setter
    def relative_discount(self, relative_discount):
        """Sets the relative_discount of this RegionalSubscriptionOfferPhaseConfig.

        The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in this region.

        :param relative_discount: The relative_discount of this RegionalSubscriptionOfferPhaseConfig.
        :type relative_discount: float
        """

        self._relative_discount = relative_discount
