# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeobfuscationFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, symbol_type: str=None):
        """DeobfuscationFile - a model defined in OpenAPI

        :param symbol_type: The symbol_type of this DeobfuscationFile.
        """
        self.openapi_types = {
            'symbol_type': str
        }

        self.attribute_map = {
            'symbol_type': 'symbolType'
        }

        self._symbol_type = symbol_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeobfuscationFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeobfuscationFile of this DeobfuscationFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol_type(self):
        """Gets the symbol_type of this DeobfuscationFile.

        The type of the deobfuscation file.

        :return: The symbol_type of this DeobfuscationFile.
        :rtype: str
        """
        return self._symbol_type

    @symbol_type.setter
    def symbol_type(self, symbol_type):
        """Sets the symbol_type of this DeobfuscationFile.

        The type of the deobfuscation file.

        :param symbol_type: The symbol_type of this DeobfuscationFile.
        :type symbol_type: str
        """
        allowed_values = ["deobfuscationFileTypeUnspecified", "proguard", "nativeCode"]  # noqa: E501
        if symbol_type not in allowed_values:
            raise ValueError(
                "Invalid value for `symbol_type` ({0}), must be one of {1}"
                .format(symbol_type, allowed_values)
            )

        self._symbol_type = symbol_type
