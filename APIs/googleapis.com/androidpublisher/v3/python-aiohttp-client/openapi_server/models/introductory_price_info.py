# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntroductoryPriceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, introductory_price_amount_micros: str=None, introductory_price_currency_code: str=None, introductory_price_cycles: int=None, introductory_price_period: str=None):
        """IntroductoryPriceInfo - a model defined in OpenAPI

        :param introductory_price_amount_micros: The introductory_price_amount_micros of this IntroductoryPriceInfo.
        :param introductory_price_currency_code: The introductory_price_currency_code of this IntroductoryPriceInfo.
        :param introductory_price_cycles: The introductory_price_cycles of this IntroductoryPriceInfo.
        :param introductory_price_period: The introductory_price_period of this IntroductoryPriceInfo.
        """
        self.openapi_types = {
            'introductory_price_amount_micros': str,
            'introductory_price_currency_code': str,
            'introductory_price_cycles': int,
            'introductory_price_period': str
        }

        self.attribute_map = {
            'introductory_price_amount_micros': 'introductoryPriceAmountMicros',
            'introductory_price_currency_code': 'introductoryPriceCurrencyCode',
            'introductory_price_cycles': 'introductoryPriceCycles',
            'introductory_price_period': 'introductoryPricePeriod'
        }

        self._introductory_price_amount_micros = introductory_price_amount_micros
        self._introductory_price_currency_code = introductory_price_currency_code
        self._introductory_price_cycles = introductory_price_cycles
        self._introductory_price_period = introductory_price_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntroductoryPriceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntroductoryPriceInfo of this IntroductoryPriceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def introductory_price_amount_micros(self):
        """Gets the introductory_price_amount_micros of this IntroductoryPriceInfo.

        Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.

        :return: The introductory_price_amount_micros of this IntroductoryPriceInfo.
        :rtype: str
        """
        return self._introductory_price_amount_micros

    @introductory_price_amount_micros.setter
    def introductory_price_amount_micros(self, introductory_price_amount_micros):
        """Sets the introductory_price_amount_micros of this IntroductoryPriceInfo.

        Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is €1.99, price_amount_micros is 1990000.

        :param introductory_price_amount_micros: The introductory_price_amount_micros of this IntroductoryPriceInfo.
        :type introductory_price_amount_micros: str
        """

        self._introductory_price_amount_micros = introductory_price_amount_micros

    @property
    def introductory_price_currency_code(self):
        """Gets the introductory_price_currency_code of this IntroductoryPriceInfo.

        ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".

        :return: The introductory_price_currency_code of this IntroductoryPriceInfo.
        :rtype: str
        """
        return self._introductory_price_currency_code

    @introductory_price_currency_code.setter
    def introductory_price_currency_code(self, introductory_price_currency_code):
        """Sets the introductory_price_currency_code of this IntroductoryPriceInfo.

        ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".

        :param introductory_price_currency_code: The introductory_price_currency_code of this IntroductoryPriceInfo.
        :type introductory_price_currency_code: str
        """

        self._introductory_price_currency_code = introductory_price_currency_code

    @property
    def introductory_price_cycles(self):
        """Gets the introductory_price_cycles of this IntroductoryPriceInfo.

        The number of billing period to offer introductory pricing.

        :return: The introductory_price_cycles of this IntroductoryPriceInfo.
        :rtype: int
        """
        return self._introductory_price_cycles

    @introductory_price_cycles.setter
    def introductory_price_cycles(self, introductory_price_cycles):
        """Sets the introductory_price_cycles of this IntroductoryPriceInfo.

        The number of billing period to offer introductory pricing.

        :param introductory_price_cycles: The introductory_price_cycles of this IntroductoryPriceInfo.
        :type introductory_price_cycles: int
        """

        self._introductory_price_cycles = introductory_price_cycles

    @property
    def introductory_price_period(self):
        """Gets the introductory_price_period of this IntroductoryPriceInfo.

        Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) \"P1W\" (one week), \"P1M\" (one month), \"P3M\" (three months), \"P6M\" (six months), and \"P1Y\" (one year).

        :return: The introductory_price_period of this IntroductoryPriceInfo.
        :rtype: str
        """
        return self._introductory_price_period

    @introductory_price_period.setter
    def introductory_price_period(self, introductory_price_period):
        """Sets the introductory_price_period of this IntroductoryPriceInfo.

        Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) \"P1W\" (one week), \"P1M\" (one month), \"P3M\" (three months), \"P6M\" (six months), and \"P1Y\" (one year).

        :param introductory_price_period: The introductory_price_period of this IntroductoryPriceInfo.
        :type introductory_price_period: str
        """

        self._introductory_price_period = introductory_price_period
