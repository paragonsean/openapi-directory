# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountryTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[str]=None, include_rest_of_world: bool=None):
        """CountryTargeting - a model defined in OpenAPI

        :param countries: The countries of this CountryTargeting.
        :param include_rest_of_world: The include_rest_of_world of this CountryTargeting.
        """
        self.openapi_types = {
            'countries': List[str],
            'include_rest_of_world': bool
        }

        self.attribute_map = {
            'countries': 'countries',
            'include_rest_of_world': 'includeRestOfWorld'
        }

        self._countries = countries
        self._include_rest_of_world = include_rest_of_world

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryTargeting of this CountryTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this CountryTargeting.

        Countries to target, specified as two letter [CLDR codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html).

        :return: The countries of this CountryTargeting.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this CountryTargeting.

        Countries to target, specified as two letter [CLDR codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html).

        :param countries: The countries of this CountryTargeting.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def include_rest_of_world(self):
        """Gets the include_rest_of_world of this CountryTargeting.

        Include \"rest of world\" as well as explicitly targeted countries.

        :return: The include_rest_of_world of this CountryTargeting.
        :rtype: bool
        """
        return self._include_rest_of_world

    @include_rest_of_world.setter
    def include_rest_of_world(self, include_rest_of_world):
        """Sets the include_rest_of_world of this CountryTargeting.

        Include \"rest of world\" as well as explicitly targeted countries.

        :param include_rest_of_world: The include_rest_of_world of this CountryTargeting.
        :type include_rest_of_world: bool
        """

        self._include_rest_of_world = include_rest_of_world
