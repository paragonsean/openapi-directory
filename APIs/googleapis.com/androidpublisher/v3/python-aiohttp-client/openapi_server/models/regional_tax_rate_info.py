# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalTaxRateInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eligible_for_streaming_service_tax_rate: bool=None, streaming_tax_type: str=None, tax_tier: str=None):
        """RegionalTaxRateInfo - a model defined in OpenAPI

        :param eligible_for_streaming_service_tax_rate: The eligible_for_streaming_service_tax_rate of this RegionalTaxRateInfo.
        :param streaming_tax_type: The streaming_tax_type of this RegionalTaxRateInfo.
        :param tax_tier: The tax_tier of this RegionalTaxRateInfo.
        """
        self.openapi_types = {
            'eligible_for_streaming_service_tax_rate': bool,
            'streaming_tax_type': str,
            'tax_tier': str
        }

        self.attribute_map = {
            'eligible_for_streaming_service_tax_rate': 'eligibleForStreamingServiceTaxRate',
            'streaming_tax_type': 'streamingTaxType',
            'tax_tier': 'taxTier'
        }

        self._eligible_for_streaming_service_tax_rate = eligible_for_streaming_service_tax_rate
        self._streaming_tax_type = streaming_tax_type
        self._tax_tier = tax_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalTaxRateInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalTaxRateInfo of this RegionalTaxRateInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eligible_for_streaming_service_tax_rate(self):
        """Gets the eligible_for_streaming_service_tax_rate of this RegionalTaxRateInfo.

        You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in the United States.

        :return: The eligible_for_streaming_service_tax_rate of this RegionalTaxRateInfo.
        :rtype: bool
        """
        return self._eligible_for_streaming_service_tax_rate

    @eligible_for_streaming_service_tax_rate.setter
    def eligible_for_streaming_service_tax_rate(self, eligible_for_streaming_service_tax_rate):
        """Sets the eligible_for_streaming_service_tax_rate of this RegionalTaxRateInfo.

        You must tell us if your app contains streaming products to correctly charge US state and local sales tax. Field only supported in the United States.

        :param eligible_for_streaming_service_tax_rate: The eligible_for_streaming_service_tax_rate of this RegionalTaxRateInfo.
        :type eligible_for_streaming_service_tax_rate: bool
        """

        self._eligible_for_streaming_service_tax_rate = eligible_for_streaming_service_tax_rate

    @property
    def streaming_tax_type(self):
        """Gets the streaming_tax_type of this RegionalTaxRateInfo.

        To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).

        :return: The streaming_tax_type of this RegionalTaxRateInfo.
        :rtype: str
        """
        return self._streaming_tax_type

    @streaming_tax_type.setter
    def streaming_tax_type(self, streaming_tax_type):
        """Sets the streaming_tax_type of this RegionalTaxRateInfo.

        To collect communications or amusement taxes in the United States, choose the appropriate tax category. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).

        :param streaming_tax_type: The streaming_tax_type of this RegionalTaxRateInfo.
        :type streaming_tax_type: str
        """
        allowed_values = ["STREAMING_TAX_TYPE_UNSPECIFIED", "STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL", "STREAMING_TAX_TYPE_TELCO_VIDEO_SALES", "STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL", "STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL", "STREAMING_TAX_TYPE_TELCO_AUDIO_SALES", "STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL"]  # noqa: E501
        if streaming_tax_type not in allowed_values:
            raise ValueError(
                "Invalid value for `streaming_tax_type` ({0}), must be one of {1}"
                .format(streaming_tax_type, allowed_values)
            )

        self._streaming_tax_type = streaming_tax_type

    @property
    def tax_tier(self):
        """Gets the tax_tier of this RegionalTaxRateInfo.

        Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).

        :return: The tax_tier of this RegionalTaxRateInfo.
        :rtype: str
        """
        return self._tax_tier

    @tax_tier.setter
    def tax_tier(self, tax_tier):
        """Sets the tax_tier of this RegionalTaxRateInfo.

        Tax tier to specify reduced tax rate. Developers who sell digital news, magazines, newspapers, books, or audiobooks in various regions may be eligible for reduced tax rates. [Learn more](https://support.google.com/googleplay/android-developer/answer/10463498).

        :param tax_tier: The tax_tier of this RegionalTaxRateInfo.
        :type tax_tier: str
        """
        allowed_values = ["TAX_TIER_UNSPECIFIED", "TAX_TIER_BOOKS_1", "TAX_TIER_NEWS_1", "TAX_TIER_NEWS_2", "TAX_TIER_MUSIC_OR_AUDIO_1", "TAX_TIER_LIVE_OR_BROADCAST_1"]  # noqa: E501
        if tax_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_tier` ({0}), must be one of {1}"
                .format(tax_tier, allowed_values)
            )

        self._tax_tier = tax_tier
