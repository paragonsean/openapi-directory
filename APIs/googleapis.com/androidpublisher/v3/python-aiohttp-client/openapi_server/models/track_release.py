# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country_targeting import CountryTargeting
from openapi_server.models.localized_text import LocalizedText
from openapi_server import util


class TrackRelease(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_targeting: CountryTargeting=None, in_app_update_priority: int=None, name: str=None, release_notes: List[LocalizedText]=None, status: str=None, user_fraction: float=None, version_codes: List[str]=None):
        """TrackRelease - a model defined in OpenAPI

        :param country_targeting: The country_targeting of this TrackRelease.
        :param in_app_update_priority: The in_app_update_priority of this TrackRelease.
        :param name: The name of this TrackRelease.
        :param release_notes: The release_notes of this TrackRelease.
        :param status: The status of this TrackRelease.
        :param user_fraction: The user_fraction of this TrackRelease.
        :param version_codes: The version_codes of this TrackRelease.
        """
        self.openapi_types = {
            'country_targeting': CountryTargeting,
            'in_app_update_priority': int,
            'name': str,
            'release_notes': List[LocalizedText],
            'status': str,
            'user_fraction': float,
            'version_codes': List[str]
        }

        self.attribute_map = {
            'country_targeting': 'countryTargeting',
            'in_app_update_priority': 'inAppUpdatePriority',
            'name': 'name',
            'release_notes': 'releaseNotes',
            'status': 'status',
            'user_fraction': 'userFraction',
            'version_codes': 'versionCodes'
        }

        self._country_targeting = country_targeting
        self._in_app_update_priority = in_app_update_priority
        self._name = name
        self._release_notes = release_notes
        self._status = status
        self._user_fraction = user_fraction
        self._version_codes = version_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackRelease':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackRelease of this TrackRelease.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_targeting(self):
        """Gets the country_targeting of this TrackRelease.


        :return: The country_targeting of this TrackRelease.
        :rtype: CountryTargeting
        """
        return self._country_targeting

    @country_targeting.setter
    def country_targeting(self, country_targeting):
        """Sets the country_targeting of this TrackRelease.


        :param country_targeting: The country_targeting of this TrackRelease.
        :type country_targeting: CountryTargeting
        """

        self._country_targeting = country_targeting

    @property
    def in_app_update_priority(self):
        """Gets the in_app_update_priority of this TrackRelease.

        In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority. Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.

        :return: The in_app_update_priority of this TrackRelease.
        :rtype: int
        """
        return self._in_app_update_priority

    @in_app_update_priority.setter
    def in_app_update_priority(self, in_app_update_priority):
        """Sets the in_app_update_priority of this TrackRelease.

        In-app update priority of the release. All newly added APKs in the release will be considered at this priority. Can take values in the range [0, 5], with 5 the highest priority. Defaults to 0. in_app_update_priority can not be updated once the release is rolled out. See https://developer.android.com/guide/playcore/in-app-updates.

        :param in_app_update_priority: The in_app_update_priority of this TrackRelease.
        :type in_app_update_priority: int
        """

        self._in_app_update_priority = in_app_update_priority

    @property
    def name(self):
        """Gets the name of this TrackRelease.

        The release name. Not required to be unique. If not set, the name is generated from the APK's version_name. If the release contains multiple APKs, the name is generated from the date.

        :return: The name of this TrackRelease.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackRelease.

        The release name. Not required to be unique. If not set, the name is generated from the APK's version_name. If the release contains multiple APKs, the name is generated from the date.

        :param name: The name of this TrackRelease.
        :type name: str
        """

        self._name = name

    @property
    def release_notes(self):
        """Gets the release_notes of this TrackRelease.

        A description of what is new in this release.

        :return: The release_notes of this TrackRelease.
        :rtype: List[LocalizedText]
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this TrackRelease.

        A description of what is new in this release.

        :param release_notes: The release_notes of this TrackRelease.
        :type release_notes: List[LocalizedText]
        """

        self._release_notes = release_notes

    @property
    def status(self):
        """Gets the status of this TrackRelease.

        The status of the release.

        :return: The status of this TrackRelease.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrackRelease.

        The status of the release.

        :param status: The status of this TrackRelease.
        :type status: str
        """
        allowed_values = ["statusUnspecified", "draft", "inProgress", "halted", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_fraction(self):
        """Gets the user_fraction of this TrackRelease.

        Fraction of users who are eligible for a staged release. 0 < fraction < 1. Can only be set when status is \"inProgress\" or \"halted\".

        :return: The user_fraction of this TrackRelease.
        :rtype: float
        """
        return self._user_fraction

    @user_fraction.setter
    def user_fraction(self, user_fraction):
        """Sets the user_fraction of this TrackRelease.

        Fraction of users who are eligible for a staged release. 0 < fraction < 1. Can only be set when status is \"inProgress\" or \"halted\".

        :param user_fraction: The user_fraction of this TrackRelease.
        :type user_fraction: float
        """

        self._user_fraction = user_fraction

    @property
    def version_codes(self):
        """Gets the version_codes of this TrackRelease.

        Version codes of all APKs in the release. Must include version codes to retain from previous releases.

        :return: The version_codes of this TrackRelease.
        :rtype: List[str]
        """
        return self._version_codes

    @version_codes.setter
    def version_codes(self, version_codes):
        """Sets the version_codes of this TrackRelease.

        Version codes of all APKs in the release. Must include version codes to retain from previous releases.

        :param version_codes: The version_codes of this TrackRelease.
        :type version_codes: List[str]
        """

        self._version_codes = version_codes
