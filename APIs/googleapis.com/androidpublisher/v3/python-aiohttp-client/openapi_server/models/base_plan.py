# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_renewing_base_plan_type import AutoRenewingBasePlanType
from openapi_server.models.offer_tag import OfferTag
from openapi_server.models.other_regions_base_plan_config import OtherRegionsBasePlanConfig
from openapi_server.models.prepaid_base_plan_type import PrepaidBasePlanType
from openapi_server.models.regional_base_plan_config import RegionalBasePlanConfig
from openapi_server import util


class BasePlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_renewing_base_plan_type: AutoRenewingBasePlanType=None, base_plan_id: str=None, offer_tags: List[OfferTag]=None, other_regions_config: OtherRegionsBasePlanConfig=None, prepaid_base_plan_type: PrepaidBasePlanType=None, regional_configs: List[RegionalBasePlanConfig]=None, state: str=None):
        """BasePlan - a model defined in OpenAPI

        :param auto_renewing_base_plan_type: The auto_renewing_base_plan_type of this BasePlan.
        :param base_plan_id: The base_plan_id of this BasePlan.
        :param offer_tags: The offer_tags of this BasePlan.
        :param other_regions_config: The other_regions_config of this BasePlan.
        :param prepaid_base_plan_type: The prepaid_base_plan_type of this BasePlan.
        :param regional_configs: The regional_configs of this BasePlan.
        :param state: The state of this BasePlan.
        """
        self.openapi_types = {
            'auto_renewing_base_plan_type': AutoRenewingBasePlanType,
            'base_plan_id': str,
            'offer_tags': List[OfferTag],
            'other_regions_config': OtherRegionsBasePlanConfig,
            'prepaid_base_plan_type': PrepaidBasePlanType,
            'regional_configs': List[RegionalBasePlanConfig],
            'state': str
        }

        self.attribute_map = {
            'auto_renewing_base_plan_type': 'autoRenewingBasePlanType',
            'base_plan_id': 'basePlanId',
            'offer_tags': 'offerTags',
            'other_regions_config': 'otherRegionsConfig',
            'prepaid_base_plan_type': 'prepaidBasePlanType',
            'regional_configs': 'regionalConfigs',
            'state': 'state'
        }

        self._auto_renewing_base_plan_type = auto_renewing_base_plan_type
        self._base_plan_id = base_plan_id
        self._offer_tags = offer_tags
        self._other_regions_config = other_regions_config
        self._prepaid_base_plan_type = prepaid_base_plan_type
        self._regional_configs = regional_configs
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BasePlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BasePlan of this BasePlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_renewing_base_plan_type(self):
        """Gets the auto_renewing_base_plan_type of this BasePlan.


        :return: The auto_renewing_base_plan_type of this BasePlan.
        :rtype: AutoRenewingBasePlanType
        """
        return self._auto_renewing_base_plan_type

    @auto_renewing_base_plan_type.setter
    def auto_renewing_base_plan_type(self, auto_renewing_base_plan_type):
        """Sets the auto_renewing_base_plan_type of this BasePlan.


        :param auto_renewing_base_plan_type: The auto_renewing_base_plan_type of this BasePlan.
        :type auto_renewing_base_plan_type: AutoRenewingBasePlanType
        """

        self._auto_renewing_base_plan_type = auto_renewing_base_plan_type

    @property
    def base_plan_id(self):
        """Gets the base_plan_id of this BasePlan.

        Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.

        :return: The base_plan_id of this BasePlan.
        :rtype: str
        """
        return self._base_plan_id

    @base_plan_id.setter
    def base_plan_id(self, base_plan_id):
        """Sets the base_plan_id of this BasePlan.

        Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.

        :param base_plan_id: The base_plan_id of this BasePlan.
        :type base_plan_id: str
        """

        self._base_plan_id = base_plan_id

    @property
    def offer_tags(self):
        """Gets the offer_tags of this BasePlan.

        List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.

        :return: The offer_tags of this BasePlan.
        :rtype: List[OfferTag]
        """
        return self._offer_tags

    @offer_tags.setter
    def offer_tags(self, offer_tags):
        """Sets the offer_tags of this BasePlan.

        List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.

        :param offer_tags: The offer_tags of this BasePlan.
        :type offer_tags: List[OfferTag]
        """

        self._offer_tags = offer_tags

    @property
    def other_regions_config(self):
        """Gets the other_regions_config of this BasePlan.


        :return: The other_regions_config of this BasePlan.
        :rtype: OtherRegionsBasePlanConfig
        """
        return self._other_regions_config

    @other_regions_config.setter
    def other_regions_config(self, other_regions_config):
        """Sets the other_regions_config of this BasePlan.


        :param other_regions_config: The other_regions_config of this BasePlan.
        :type other_regions_config: OtherRegionsBasePlanConfig
        """

        self._other_regions_config = other_regions_config

    @property
    def prepaid_base_plan_type(self):
        """Gets the prepaid_base_plan_type of this BasePlan.


        :return: The prepaid_base_plan_type of this BasePlan.
        :rtype: PrepaidBasePlanType
        """
        return self._prepaid_base_plan_type

    @prepaid_base_plan_type.setter
    def prepaid_base_plan_type(self, prepaid_base_plan_type):
        """Sets the prepaid_base_plan_type of this BasePlan.


        :param prepaid_base_plan_type: The prepaid_base_plan_type of this BasePlan.
        :type prepaid_base_plan_type: PrepaidBasePlanType
        """

        self._prepaid_base_plan_type = prepaid_base_plan_type

    @property
    def regional_configs(self):
        """Gets the regional_configs of this BasePlan.

        Region-specific information for this base plan.

        :return: The regional_configs of this BasePlan.
        :rtype: List[RegionalBasePlanConfig]
        """
        return self._regional_configs

    @regional_configs.setter
    def regional_configs(self, regional_configs):
        """Sets the regional_configs of this BasePlan.

        Region-specific information for this base plan.

        :param regional_configs: The regional_configs of this BasePlan.
        :type regional_configs: List[RegionalBasePlanConfig]
        """

        self._regional_configs = regional_configs

    @property
    def state(self):
        """Gets the state of this BasePlan.

        Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.

        :return: The state of this BasePlan.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BasePlan.

        Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.

        :param state: The state of this BasePlan.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "DRAFT", "ACTIVE", "INACTIVE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
