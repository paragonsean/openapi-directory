# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_id import DeviceId
from openapi_server.models.device_ram import DeviceRam
from openapi_server.models.system_feature import SystemFeature
from openapi_server import util


class DeviceSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_ram: DeviceRam=None, excluded_device_ids: List[DeviceId]=None, forbidden_system_features: List[SystemFeature]=None, included_device_ids: List[DeviceId]=None, required_system_features: List[SystemFeature]=None):
        """DeviceSelector - a model defined in OpenAPI

        :param device_ram: The device_ram of this DeviceSelector.
        :param excluded_device_ids: The excluded_device_ids of this DeviceSelector.
        :param forbidden_system_features: The forbidden_system_features of this DeviceSelector.
        :param included_device_ids: The included_device_ids of this DeviceSelector.
        :param required_system_features: The required_system_features of this DeviceSelector.
        """
        self.openapi_types = {
            'device_ram': DeviceRam,
            'excluded_device_ids': List[DeviceId],
            'forbidden_system_features': List[SystemFeature],
            'included_device_ids': List[DeviceId],
            'required_system_features': List[SystemFeature]
        }

        self.attribute_map = {
            'device_ram': 'deviceRam',
            'excluded_device_ids': 'excludedDeviceIds',
            'forbidden_system_features': 'forbiddenSystemFeatures',
            'included_device_ids': 'includedDeviceIds',
            'required_system_features': 'requiredSystemFeatures'
        }

        self._device_ram = device_ram
        self._excluded_device_ids = excluded_device_ids
        self._forbidden_system_features = forbidden_system_features
        self._included_device_ids = included_device_ids
        self._required_system_features = required_system_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceSelector of this DeviceSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_ram(self):
        """Gets the device_ram of this DeviceSelector.


        :return: The device_ram of this DeviceSelector.
        :rtype: DeviceRam
        """
        return self._device_ram

    @device_ram.setter
    def device_ram(self, device_ram):
        """Sets the device_ram of this DeviceSelector.


        :param device_ram: The device_ram of this DeviceSelector.
        :type device_ram: DeviceRam
        """

        self._device_ram = device_ram

    @property
    def excluded_device_ids(self):
        """Gets the excluded_device_ids of this DeviceSelector.

        Device models excluded by this selector, even if they match all other conditions.

        :return: The excluded_device_ids of this DeviceSelector.
        :rtype: List[DeviceId]
        """
        return self._excluded_device_ids

    @excluded_device_ids.setter
    def excluded_device_ids(self, excluded_device_ids):
        """Sets the excluded_device_ids of this DeviceSelector.

        Device models excluded by this selector, even if they match all other conditions.

        :param excluded_device_ids: The excluded_device_ids of this DeviceSelector.
        :type excluded_device_ids: List[DeviceId]
        """

        self._excluded_device_ids = excluded_device_ids

    @property
    def forbidden_system_features(self):
        """Gets the forbidden_system_features of this DeviceSelector.

        A device that has any of these system features is excluded by this selector, even if it matches all other conditions.

        :return: The forbidden_system_features of this DeviceSelector.
        :rtype: List[SystemFeature]
        """
        return self._forbidden_system_features

    @forbidden_system_features.setter
    def forbidden_system_features(self, forbidden_system_features):
        """Sets the forbidden_system_features of this DeviceSelector.

        A device that has any of these system features is excluded by this selector, even if it matches all other conditions.

        :param forbidden_system_features: The forbidden_system_features of this DeviceSelector.
        :type forbidden_system_features: List[SystemFeature]
        """

        self._forbidden_system_features = forbidden_system_features

    @property
    def included_device_ids(self):
        """Gets the included_device_ids of this DeviceSelector.

        Device models included by this selector.

        :return: The included_device_ids of this DeviceSelector.
        :rtype: List[DeviceId]
        """
        return self._included_device_ids

    @included_device_ids.setter
    def included_device_ids(self, included_device_ids):
        """Sets the included_device_ids of this DeviceSelector.

        Device models included by this selector.

        :param included_device_ids: The included_device_ids of this DeviceSelector.
        :type included_device_ids: List[DeviceId]
        """

        self._included_device_ids = included_device_ids

    @property
    def required_system_features(self):
        """Gets the required_system_features of this DeviceSelector.

        A device needs to have all these system features to be included by the selector.

        :return: The required_system_features of this DeviceSelector.
        :rtype: List[SystemFeature]
        """
        return self._required_system_features

    @required_system_features.setter
    def required_system_features(self, required_system_features):
        """Sets the required_system_features of this DeviceSelector.

        A device needs to have all these system features to be included by the selector.

        :param required_system_features: The required_system_features of this DeviceSelector.
        :type required_system_features: List[SystemFeature]
        """

        self._required_system_features = required_system_features
