# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetModuleMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_type: str=None, name: str=None):
        """AssetModuleMetadata - a model defined in OpenAPI

        :param delivery_type: The delivery_type of this AssetModuleMetadata.
        :param name: The name of this AssetModuleMetadata.
        """
        self.openapi_types = {
            'delivery_type': str,
            'name': str
        }

        self.attribute_map = {
            'delivery_type': 'deliveryType',
            'name': 'name'
        }

        self._delivery_type = delivery_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetModuleMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetModuleMetadata of this AssetModuleMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_type(self):
        """Gets the delivery_type of this AssetModuleMetadata.

        Indicates the delivery type for persistent install.

        :return: The delivery_type of this AssetModuleMetadata.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this AssetModuleMetadata.

        Indicates the delivery type for persistent install.

        :param delivery_type: The delivery_type of this AssetModuleMetadata.
        :type delivery_type: str
        """
        allowed_values = ["UNKNOWN_DELIVERY_TYPE", "INSTALL_TIME", "ON_DEMAND", "FAST_FOLLOW"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def name(self):
        """Gets the name of this AssetModuleMetadata.

        Module name.

        :return: The name of this AssetModuleMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetModuleMetadata.

        Module name.

        :param name: The name of this AssetModuleMetadata.
        :type name: str
        """

        self._name = name
