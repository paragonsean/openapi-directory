# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.remote_in_app_update_data import RemoteInAppUpdateData
from openapi_server.models.targeting import Targeting
from openapi_server import util


class AppRecoveryAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_recovery_id: str=None, cancel_time: str=None, create_time: str=None, deploy_time: str=None, last_update_time: str=None, remote_in_app_update_data: RemoteInAppUpdateData=None, status: str=None, targeting: Targeting=None):
        """AppRecoveryAction - a model defined in OpenAPI

        :param app_recovery_id: The app_recovery_id of this AppRecoveryAction.
        :param cancel_time: The cancel_time of this AppRecoveryAction.
        :param create_time: The create_time of this AppRecoveryAction.
        :param deploy_time: The deploy_time of this AppRecoveryAction.
        :param last_update_time: The last_update_time of this AppRecoveryAction.
        :param remote_in_app_update_data: The remote_in_app_update_data of this AppRecoveryAction.
        :param status: The status of this AppRecoveryAction.
        :param targeting: The targeting of this AppRecoveryAction.
        """
        self.openapi_types = {
            'app_recovery_id': str,
            'cancel_time': str,
            'create_time': str,
            'deploy_time': str,
            'last_update_time': str,
            'remote_in_app_update_data': RemoteInAppUpdateData,
            'status': str,
            'targeting': Targeting
        }

        self.attribute_map = {
            'app_recovery_id': 'appRecoveryId',
            'cancel_time': 'cancelTime',
            'create_time': 'createTime',
            'deploy_time': 'deployTime',
            'last_update_time': 'lastUpdateTime',
            'remote_in_app_update_data': 'remoteInAppUpdateData',
            'status': 'status',
            'targeting': 'targeting'
        }

        self._app_recovery_id = app_recovery_id
        self._cancel_time = cancel_time
        self._create_time = create_time
        self._deploy_time = deploy_time
        self._last_update_time = last_update_time
        self._remote_in_app_update_data = remote_in_app_update_data
        self._status = status
        self._targeting = targeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AppRecoveryAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AppRecoveryAction of this AppRecoveryAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_recovery_id(self):
        """Gets the app_recovery_id of this AppRecoveryAction.

        ID corresponding to the app recovery action.

        :return: The app_recovery_id of this AppRecoveryAction.
        :rtype: str
        """
        return self._app_recovery_id

    @app_recovery_id.setter
    def app_recovery_id(self, app_recovery_id):
        """Sets the app_recovery_id of this AppRecoveryAction.

        ID corresponding to the app recovery action.

        :param app_recovery_id: The app_recovery_id of this AppRecoveryAction.
        :type app_recovery_id: str
        """

        self._app_recovery_id = app_recovery_id

    @property
    def cancel_time(self):
        """Gets the cancel_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is canceled by the developer. Only set if the recovery action has been canceled.

        :return: The cancel_time of this AppRecoveryAction.
        :rtype: str
        """
        return self._cancel_time

    @cancel_time.setter
    def cancel_time(self, cancel_time):
        """Sets the cancel_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is canceled by the developer. Only set if the recovery action has been canceled.

        :param cancel_time: The cancel_time of this AppRecoveryAction.
        :type cancel_time: str
        """

        self._cancel_time = cancel_time

    @property
    def create_time(self):
        """Gets the create_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is created by the developer. It is always set after creation of the recovery action.

        :return: The create_time of this AppRecoveryAction.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is created by the developer. It is always set after creation of the recovery action.

        :param create_time: The create_time of this AppRecoveryAction.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def deploy_time(self):
        """Gets the deploy_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is deployed to the users. Only set if the recovery action has been deployed.

        :return: The deploy_time of this AppRecoveryAction.
        :rtype: str
        """
        return self._deploy_time

    @deploy_time.setter
    def deploy_time(self, deploy_time):
        """Sets the deploy_time of this AppRecoveryAction.

        Timestamp of when the app recovery action is deployed to the users. Only set if the recovery action has been deployed.

        :param deploy_time: The deploy_time of this AppRecoveryAction.
        :type deploy_time: str
        """

        self._deploy_time = deploy_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this AppRecoveryAction.

        Timestamp of when the developer last updated recovery action. In case the action is cancelled, it corresponds to cancellation time. It is always set after creation of the recovery action.

        :return: The last_update_time of this AppRecoveryAction.
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this AppRecoveryAction.

        Timestamp of when the developer last updated recovery action. In case the action is cancelled, it corresponds to cancellation time. It is always set after creation of the recovery action.

        :param last_update_time: The last_update_time of this AppRecoveryAction.
        :type last_update_time: str
        """

        self._last_update_time = last_update_time

    @property
    def remote_in_app_update_data(self):
        """Gets the remote_in_app_update_data of this AppRecoveryAction.


        :return: The remote_in_app_update_data of this AppRecoveryAction.
        :rtype: RemoteInAppUpdateData
        """
        return self._remote_in_app_update_data

    @remote_in_app_update_data.setter
    def remote_in_app_update_data(self, remote_in_app_update_data):
        """Sets the remote_in_app_update_data of this AppRecoveryAction.


        :param remote_in_app_update_data: The remote_in_app_update_data of this AppRecoveryAction.
        :type remote_in_app_update_data: RemoteInAppUpdateData
        """

        self._remote_in_app_update_data = remote_in_app_update_data

    @property
    def status(self):
        """Gets the status of this AppRecoveryAction.

        The status of the recovery action.

        :return: The status of this AppRecoveryAction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppRecoveryAction.

        The status of the recovery action.

        :param status: The status of this AppRecoveryAction.
        :type status: str
        """
        allowed_values = ["RECOVERY_STATUS_UNSPECIFIED", "RECOVERY_STATUS_ACTIVE", "RECOVERY_STATUS_CANCELED", "RECOVERY_STATUS_DRAFT", "RECOVERY_STATUS_GENERATION_IN_PROGRESS", "RECOVERY_STATUS_GENERATION_FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def targeting(self):
        """Gets the targeting of this AppRecoveryAction.


        :return: The targeting of this AppRecoveryAction.
        :rtype: Targeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this AppRecoveryAction.


        :param targeting: The targeting of this AppRecoveryAction.
        :type targeting: Targeting
        """

        self._targeting = targeting
