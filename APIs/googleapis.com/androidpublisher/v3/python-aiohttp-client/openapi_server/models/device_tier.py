# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceTier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_group_names: List[str]=None, level: int=None):
        """DeviceTier - a model defined in OpenAPI

        :param device_group_names: The device_group_names of this DeviceTier.
        :param level: The level of this DeviceTier.
        """
        self.openapi_types = {
            'device_group_names': List[str],
            'level': int
        }

        self.attribute_map = {
            'device_group_names': 'deviceGroupNames',
            'level': 'level'
        }

        self._device_group_names = device_group_names
        self._level = level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceTier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceTier of this DeviceTier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_group_names(self):
        """Gets the device_group_names of this DeviceTier.

        Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.

        :return: The device_group_names of this DeviceTier.
        :rtype: List[str]
        """
        return self._device_group_names

    @device_group_names.setter
    def device_group_names(self, device_group_names):
        """Sets the device_group_names of this DeviceTier.

        Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.

        :param device_group_names: The device_group_names of this DeviceTier.
        :type device_group_names: List[str]
        """

        self._device_group_names = device_group_names

    @property
    def level(self):
        """Gets the level of this DeviceTier.

        The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.

        :return: The level of this DeviceTier.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DeviceTier.

        The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.

        :param level: The level of this DeviceTier.
        :type level: int
        """

        self._level = level
