# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_selector import DeviceSelector
from openapi_server import util


class DeviceGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_selectors: List[DeviceSelector]=None, name: str=None):
        """DeviceGroup - a model defined in OpenAPI

        :param device_selectors: The device_selectors of this DeviceGroup.
        :param name: The name of this DeviceGroup.
        """
        self.openapi_types = {
            'device_selectors': List[DeviceSelector],
            'name': str
        }

        self.attribute_map = {
            'device_selectors': 'deviceSelectors',
            'name': 'name'
        }

        self._device_selectors = device_selectors
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceGroup of this DeviceGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_selectors(self):
        """Gets the device_selectors of this DeviceGroup.

        Device selectors for this group. A device matching any of the selectors is included in this group.

        :return: The device_selectors of this DeviceGroup.
        :rtype: List[DeviceSelector]
        """
        return self._device_selectors

    @device_selectors.setter
    def device_selectors(self, device_selectors):
        """Sets the device_selectors of this DeviceGroup.

        Device selectors for this group. A device matching any of the selectors is included in this group.

        :param device_selectors: The device_selectors of this DeviceGroup.
        :type device_selectors: List[DeviceSelector]
        """

        self._device_selectors = device_selectors

    @property
    def name(self):
        """Gets the name of this DeviceGroup.

        The name of the group.

        :return: The name of this DeviceGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceGroup.

        The name of the group.

        :param name: The name of this DeviceGroup.
        :type name: str
        """

        self._name = name
