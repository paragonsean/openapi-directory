# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.targeting_rule_scope import TargetingRuleScope
from openapi_server import util


class UpgradeTargetingRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_period_duration: str=None, once_per_user: bool=None, scope: TargetingRuleScope=None):
        """UpgradeTargetingRule - a model defined in OpenAPI

        :param billing_period_duration: The billing_period_duration of this UpgradeTargetingRule.
        :param once_per_user: The once_per_user of this UpgradeTargetingRule.
        :param scope: The scope of this UpgradeTargetingRule.
        """
        self.openapi_types = {
            'billing_period_duration': str,
            'once_per_user': bool,
            'scope': TargetingRuleScope
        }

        self.attribute_map = {
            'billing_period_duration': 'billingPeriodDuration',
            'once_per_user': 'oncePerUser',
            'scope': 'scope'
        }

        self._billing_period_duration = billing_period_duration
        self._once_per_user = once_per_user
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeTargetingRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeTargetingRule of this UpgradeTargetingRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_period_duration(self):
        """Gets the billing_period_duration of this UpgradeTargetingRule.

        The specific billing period duration, specified in ISO 8601 format, that a user must be currently subscribed to to be eligible for this rule. If not specified, users subscribed to any billing period are matched.

        :return: The billing_period_duration of this UpgradeTargetingRule.
        :rtype: str
        """
        return self._billing_period_duration

    @billing_period_duration.setter
    def billing_period_duration(self, billing_period_duration):
        """Sets the billing_period_duration of this UpgradeTargetingRule.

        The specific billing period duration, specified in ISO 8601 format, that a user must be currently subscribed to to be eligible for this rule. If not specified, users subscribed to any billing period are matched.

        :param billing_period_duration: The billing_period_duration of this UpgradeTargetingRule.
        :type billing_period_duration: str
        """

        self._billing_period_duration = billing_period_duration

    @property
    def once_per_user(self):
        """Gets the once_per_user of this UpgradeTargetingRule.

        Limit this offer to only once per user. If set to true, a user can never be eligible for this offer again if they ever subscribed to this offer.

        :return: The once_per_user of this UpgradeTargetingRule.
        :rtype: bool
        """
        return self._once_per_user

    @once_per_user.setter
    def once_per_user(self, once_per_user):
        """Sets the once_per_user of this UpgradeTargetingRule.

        Limit this offer to only once per user. If set to true, a user can never be eligible for this offer again if they ever subscribed to this offer.

        :param once_per_user: The once_per_user of this UpgradeTargetingRule.
        :type once_per_user: bool
        """

        self._once_per_user = once_per_user

    @property
    def scope(self):
        """Gets the scope of this UpgradeTargetingRule.


        :return: The scope of this UpgradeTargetingRule.
        :rtype: TargetingRuleScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this UpgradeTargetingRule.


        :param scope: The scope of this UpgradeTargetingRule.
        :type scope: TargetingRuleScope
        """

        self._scope = scope
