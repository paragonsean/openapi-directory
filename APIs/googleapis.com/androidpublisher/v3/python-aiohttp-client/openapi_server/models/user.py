# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grant import Grant
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_state: str=None, developer_account_permissions: List[str]=None, email: str=None, expiration_time: str=None, grants: List[Grant]=None, name: str=None, partial: bool=None):
        """User - a model defined in OpenAPI

        :param access_state: The access_state of this User.
        :param developer_account_permissions: The developer_account_permissions of this User.
        :param email: The email of this User.
        :param expiration_time: The expiration_time of this User.
        :param grants: The grants of this User.
        :param name: The name of this User.
        :param partial: The partial of this User.
        """
        self.openapi_types = {
            'access_state': str,
            'developer_account_permissions': List[str],
            'email': str,
            'expiration_time': str,
            'grants': List[Grant],
            'name': str,
            'partial': bool
        }

        self.attribute_map = {
            'access_state': 'accessState',
            'developer_account_permissions': 'developerAccountPermissions',
            'email': 'email',
            'expiration_time': 'expirationTime',
            'grants': 'grants',
            'name': 'name',
            'partial': 'partial'
        }

        self._access_state = access_state
        self._developer_account_permissions = developer_account_permissions
        self._email = email
        self._expiration_time = expiration_time
        self._grants = grants
        self._name = name
        self._partial = partial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_state(self):
        """Gets the access_state of this User.

        Output only. The state of the user's access to the Play Console.

        :return: The access_state of this User.
        :rtype: str
        """
        return self._access_state

    @access_state.setter
    def access_state(self, access_state):
        """Sets the access_state of this User.

        Output only. The state of the user's access to the Play Console.

        :param access_state: The access_state of this User.
        :type access_state: str
        """
        allowed_values = ["ACCESS_STATE_UNSPECIFIED", "INVITED", "INVITATION_EXPIRED", "ACCESS_GRANTED", "ACCESS_EXPIRED"]  # noqa: E501
        if access_state not in allowed_values:
            raise ValueError(
                "Invalid value for `access_state` ({0}), must be one of {1}"
                .format(access_state, allowed_values)
            )

        self._access_state = access_state

    @property
    def developer_account_permissions(self):
        """Gets the developer_account_permissions of this User.

        Permissions for the user which apply across the developer account.

        :return: The developer_account_permissions of this User.
        :rtype: List[str]
        """
        return self._developer_account_permissions

    @developer_account_permissions.setter
    def developer_account_permissions(self, developer_account_permissions):
        """Sets the developer_account_permissions of this User.

        Permissions for the user which apply across the developer account.

        :param developer_account_permissions: The developer_account_permissions of this User.
        :type developer_account_permissions: List[str]
        """
        allowed_values = ["DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED", "CAN_SEE_ALL_APPS", "CAN_VIEW_FINANCIAL_DATA_GLOBAL", "CAN_MANAGE_PERMISSIONS_GLOBAL", "CAN_EDIT_GAMES_GLOBAL", "CAN_PUBLISH_GAMES_GLOBAL", "CAN_REPLY_TO_REVIEWS_GLOBAL", "CAN_MANAGE_PUBLIC_APKS_GLOBAL", "CAN_MANAGE_TRACK_APKS_GLOBAL", "CAN_MANAGE_TRACK_USERS_GLOBAL", "CAN_MANAGE_PUBLIC_LISTING_GLOBAL", "CAN_MANAGE_DRAFT_APPS_GLOBAL", "CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL", "CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL", "CAN_MANAGE_ORDERS_GLOBAL", "CAN_MANAGE_APP_CONTENT_GLOBAL", "CAN_VIEW_NON_FINANCIAL_DATA_GLOBAL", "CAN_VIEW_APP_QUALITY_GLOBAL"]  # noqa: E501
        if not set(developer_account_permissions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `developer_account_permissions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(developer_account_permissions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._developer_account_permissions = developer_account_permissions

    @property
    def email(self):
        """Gets the email of this User.

        Immutable. The user's email address.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Immutable. The user's email address.

        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def expiration_time(self):
        """Gets the expiration_time of this User.

        The time at which the user's access expires, if set. When setting this value, it must always be in the future.

        :return: The expiration_time of this User.
        :rtype: str
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this User.

        The time at which the user's access expires, if set. When setting this value, it must always be in the future.

        :param expiration_time: The expiration_time of this User.
        :type expiration_time: str
        """

        self._expiration_time = expiration_time

    @property
    def grants(self):
        """Gets the grants of this User.

        Output only. Per-app permissions for the user.

        :return: The grants of this User.
        :rtype: List[Grant]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this User.

        Output only. Per-app permissions for the user.

        :param grants: The grants of this User.
        :type grants: List[Grant]
        """

        self._grants = grants

    @property
    def name(self):
        """Gets the name of this User.

        Required. Resource name for this user, following the pattern \"developers/{developer}/users/{email}\".

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        Required. Resource name for this user, following the pattern \"developers/{developer}/users/{email}\".

        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def partial(self):
        """Gets the partial of this User.

        Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.

        :return: The partial of this User.
        :rtype: bool
        """
        return self._partial

    @partial.setter
    def partial(self, partial):
        """Sets the partial of this User.

        Output only. Whether there are more permissions for the user that are not represented here. This can happen if the caller does not have permission to manage all apps in the account. This is also `true` if this user is the account owner. If this field is `true`, it should be taken as a signal that this user cannot be fully managed via the API. That is, the API caller is not be able to manage all of the permissions this user holds, either because it doesn't know about them or because the user is the account owner.

        :param partial: The partial of this User.
        :type partial: bool
        """

        self._partial = partial
