# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class RegionalBasePlanConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_subscriber_availability: bool=None, price: Money=None, region_code: str=None):
        """RegionalBasePlanConfig - a model defined in OpenAPI

        :param new_subscriber_availability: The new_subscriber_availability of this RegionalBasePlanConfig.
        :param price: The price of this RegionalBasePlanConfig.
        :param region_code: The region_code of this RegionalBasePlanConfig.
        """
        self.openapi_types = {
            'new_subscriber_availability': bool,
            'price': Money,
            'region_code': str
        }

        self.attribute_map = {
            'new_subscriber_availability': 'newSubscriberAvailability',
            'price': 'price',
            'region_code': 'regionCode'
        }

        self._new_subscriber_availability = new_subscriber_availability
        self._price = price
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalBasePlanConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalBasePlanConfig of this RegionalBasePlanConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_subscriber_availability(self):
        """Gets the new_subscriber_availability of this RegionalBasePlanConfig.

        Whether the base plan in the specified region is available for new subscribers. Existing subscribers will not have their subscription canceled if this value is set to false. If not specified, this will default to false.

        :return: The new_subscriber_availability of this RegionalBasePlanConfig.
        :rtype: bool
        """
        return self._new_subscriber_availability

    @new_subscriber_availability.setter
    def new_subscriber_availability(self, new_subscriber_availability):
        """Sets the new_subscriber_availability of this RegionalBasePlanConfig.

        Whether the base plan in the specified region is available for new subscribers. Existing subscribers will not have their subscription canceled if this value is set to false. If not specified, this will default to false.

        :param new_subscriber_availability: The new_subscriber_availability of this RegionalBasePlanConfig.
        :type new_subscriber_availability: bool
        """

        self._new_subscriber_availability = new_subscriber_availability

    @property
    def price(self):
        """Gets the price of this RegionalBasePlanConfig.


        :return: The price of this RegionalBasePlanConfig.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RegionalBasePlanConfig.


        :param price: The price of this RegionalBasePlanConfig.
        :type price: Money
        """

        self._price = price

    @property
    def region_code(self):
        """Gets the region_code of this RegionalBasePlanConfig.

        Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :return: The region_code of this RegionalBasePlanConfig.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this RegionalBasePlanConfig.

        Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :param region_code: The region_code of this RegionalBasePlanConfig.
        :type region_code: str
        """

        self._region_code = region_code
