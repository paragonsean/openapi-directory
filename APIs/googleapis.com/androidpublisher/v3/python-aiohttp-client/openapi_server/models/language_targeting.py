# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LanguageTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternatives: List[str]=None, value: List[str]=None):
        """LanguageTargeting - a model defined in OpenAPI

        :param alternatives: The alternatives of this LanguageTargeting.
        :param value: The value of this LanguageTargeting.
        """
        self.openapi_types = {
            'alternatives': List[str],
            'value': List[str]
        }

        self.attribute_map = {
            'alternatives': 'alternatives',
            'value': 'value'
        }

        self._alternatives = alternatives
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LanguageTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LanguageTargeting of this LanguageTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternatives(self):
        """Gets the alternatives of this LanguageTargeting.

        Alternative languages.

        :return: The alternatives of this LanguageTargeting.
        :rtype: List[str]
        """
        return self._alternatives

    @alternatives.setter
    def alternatives(self, alternatives):
        """Sets the alternatives of this LanguageTargeting.

        Alternative languages.

        :param alternatives: The alternatives of this LanguageTargeting.
        :type alternatives: List[str]
        """

        self._alternatives = alternatives

    @property
    def value(self):
        """Gets the value of this LanguageTargeting.

        ISO-639: 2 or 3 letter language code.

        :return: The value of this LanguageTargeting.
        :rtype: List[str]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LanguageTargeting.

        ISO-639: 2 or 3 letter language code.

        :param value: The value of this LanguageTargeting.
        :type value: List[str]
        """

        self._value = value
