# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class ConvertedRegionPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: Money=None, region_code: str=None, tax_amount: Money=None):
        """ConvertedRegionPrice - a model defined in OpenAPI

        :param price: The price of this ConvertedRegionPrice.
        :param region_code: The region_code of this ConvertedRegionPrice.
        :param tax_amount: The tax_amount of this ConvertedRegionPrice.
        """
        self.openapi_types = {
            'price': Money,
            'region_code': str,
            'tax_amount': Money
        }

        self.attribute_map = {
            'price': 'price',
            'region_code': 'regionCode',
            'tax_amount': 'taxAmount'
        }

        self._price = price
        self._region_code = region_code
        self._tax_amount = tax_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertedRegionPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConvertedRegionPrice of this ConvertedRegionPrice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this ConvertedRegionPrice.


        :return: The price of this ConvertedRegionPrice.
        :rtype: Money
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ConvertedRegionPrice.


        :param price: The price of this ConvertedRegionPrice.
        :type price: Money
        """

        self._price = price

    @property
    def region_code(self):
        """Gets the region_code of this ConvertedRegionPrice.

        The region code of the region.

        :return: The region_code of this ConvertedRegionPrice.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this ConvertedRegionPrice.

        The region code of the region.

        :param region_code: The region_code of this ConvertedRegionPrice.
        :type region_code: str
        """

        self._region_code = region_code

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ConvertedRegionPrice.


        :return: The tax_amount of this ConvertedRegionPrice.
        :rtype: Money
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ConvertedRegionPrice.


        :param tax_amount: The tax_amount of this ConvertedRegionPrice.
        :type tax_amount: Money
        """

        self._tax_amount = tax_amount
