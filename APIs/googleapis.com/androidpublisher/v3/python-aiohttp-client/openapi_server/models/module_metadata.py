# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.module_targeting import ModuleTargeting
from openapi_server import util


class ModuleMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delivery_type: str=None, dependencies: List[str]=None, module_type: str=None, name: str=None, targeting: ModuleTargeting=None):
        """ModuleMetadata - a model defined in OpenAPI

        :param delivery_type: The delivery_type of this ModuleMetadata.
        :param dependencies: The dependencies of this ModuleMetadata.
        :param module_type: The module_type of this ModuleMetadata.
        :param name: The name of this ModuleMetadata.
        :param targeting: The targeting of this ModuleMetadata.
        """
        self.openapi_types = {
            'delivery_type': str,
            'dependencies': List[str],
            'module_type': str,
            'name': str,
            'targeting': ModuleTargeting
        }

        self.attribute_map = {
            'delivery_type': 'deliveryType',
            'dependencies': 'dependencies',
            'module_type': 'moduleType',
            'name': 'name',
            'targeting': 'targeting'
        }

        self._delivery_type = delivery_type
        self._dependencies = dependencies
        self._module_type = module_type
        self._name = name
        self._targeting = targeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModuleMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModuleMetadata of this ModuleMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delivery_type(self):
        """Gets the delivery_type of this ModuleMetadata.

        Indicates the delivery type (e.g. on-demand) of the module.

        :return: The delivery_type of this ModuleMetadata.
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this ModuleMetadata.

        Indicates the delivery type (e.g. on-demand) of the module.

        :param delivery_type: The delivery_type of this ModuleMetadata.
        :type delivery_type: str
        """
        allowed_values = ["UNKNOWN_DELIVERY_TYPE", "INSTALL_TIME", "ON_DEMAND", "FAST_FOLLOW"]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    @property
    def dependencies(self):
        """Gets the dependencies of this ModuleMetadata.

        Names of the modules that this module directly depends on. Each module implicitly depends on the base module.

        :return: The dependencies of this ModuleMetadata.
        :rtype: List[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this ModuleMetadata.

        Names of the modules that this module directly depends on. Each module implicitly depends on the base module.

        :param dependencies: The dependencies of this ModuleMetadata.
        :type dependencies: List[str]
        """

        self._dependencies = dependencies

    @property
    def module_type(self):
        """Gets the module_type of this ModuleMetadata.

        Indicates the type of this feature module.

        :return: The module_type of this ModuleMetadata.
        :rtype: str
        """
        return self._module_type

    @module_type.setter
    def module_type(self, module_type):
        """Sets the module_type of this ModuleMetadata.

        Indicates the type of this feature module.

        :param module_type: The module_type of this ModuleMetadata.
        :type module_type: str
        """
        allowed_values = ["UNKNOWN_MODULE_TYPE", "FEATURE_MODULE"]  # noqa: E501
        if module_type not in allowed_values:
            raise ValueError(
                "Invalid value for `module_type` ({0}), must be one of {1}"
                .format(module_type, allowed_values)
            )

        self._module_type = module_type

    @property
    def name(self):
        """Gets the name of this ModuleMetadata.

        Module name.

        :return: The name of this ModuleMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModuleMetadata.

        Module name.

        :param name: The name of this ModuleMetadata.
        :type name: str
        """

        self._name = name

    @property
    def targeting(self):
        """Gets the targeting of this ModuleMetadata.


        :return: The targeting of this ModuleMetadata.
        :rtype: ModuleTargeting
        """
        return self._targeting

    @targeting.setter
    def targeting(self, targeting):
        """Sets the targeting of this ModuleMetadata.


        :param targeting: The targeting of this ModuleMetadata.
        :type targeting: ModuleTargeting
        """

        self._targeting = targeting
