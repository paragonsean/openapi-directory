# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoRenewingBasePlanType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_hold_duration: str=None, billing_period_duration: str=None, grace_period_duration: str=None, legacy_compatible: bool=None, legacy_compatible_subscription_offer_id: str=None, proration_mode: str=None, resubscribe_state: str=None):
        """AutoRenewingBasePlanType - a model defined in OpenAPI

        :param account_hold_duration: The account_hold_duration of this AutoRenewingBasePlanType.
        :param billing_period_duration: The billing_period_duration of this AutoRenewingBasePlanType.
        :param grace_period_duration: The grace_period_duration of this AutoRenewingBasePlanType.
        :param legacy_compatible: The legacy_compatible of this AutoRenewingBasePlanType.
        :param legacy_compatible_subscription_offer_id: The legacy_compatible_subscription_offer_id of this AutoRenewingBasePlanType.
        :param proration_mode: The proration_mode of this AutoRenewingBasePlanType.
        :param resubscribe_state: The resubscribe_state of this AutoRenewingBasePlanType.
        """
        self.openapi_types = {
            'account_hold_duration': str,
            'billing_period_duration': str,
            'grace_period_duration': str,
            'legacy_compatible': bool,
            'legacy_compatible_subscription_offer_id': str,
            'proration_mode': str,
            'resubscribe_state': str
        }

        self.attribute_map = {
            'account_hold_duration': 'accountHoldDuration',
            'billing_period_duration': 'billingPeriodDuration',
            'grace_period_duration': 'gracePeriodDuration',
            'legacy_compatible': 'legacyCompatible',
            'legacy_compatible_subscription_offer_id': 'legacyCompatibleSubscriptionOfferId',
            'proration_mode': 'prorationMode',
            'resubscribe_state': 'resubscribeState'
        }

        self._account_hold_duration = account_hold_duration
        self._billing_period_duration = billing_period_duration
        self._grace_period_duration = grace_period_duration
        self._legacy_compatible = legacy_compatible
        self._legacy_compatible_subscription_offer_id = legacy_compatible_subscription_offer_id
        self._proration_mode = proration_mode
        self._resubscribe_state = resubscribe_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoRenewingBasePlanType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoRenewingBasePlanType of this AutoRenewingBasePlanType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_hold_duration(self):
        """Gets the account_hold_duration of this AutoRenewingBasePlanType.

        Optional. Account hold period of the subscription, specified in ISO 8601 format. Acceptable values must be in DAYS and in the range P0D (zero days) to P30D (30 days). If not specified, the default value is P30D (30 days).

        :return: The account_hold_duration of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._account_hold_duration

    @account_hold_duration.setter
    def account_hold_duration(self, account_hold_duration):
        """Sets the account_hold_duration of this AutoRenewingBasePlanType.

        Optional. Account hold period of the subscription, specified in ISO 8601 format. Acceptable values must be in DAYS and in the range P0D (zero days) to P30D (30 days). If not specified, the default value is P30D (30 days).

        :param account_hold_duration: The account_hold_duration of this AutoRenewingBasePlanType.
        :type account_hold_duration: str
        """

        self._account_hold_duration = account_hold_duration

    @property
    def billing_period_duration(self):
        """Gets the billing_period_duration of this AutoRenewingBasePlanType.

        Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.

        :return: The billing_period_duration of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._billing_period_duration

    @billing_period_duration.setter
    def billing_period_duration(self, billing_period_duration):
        """Sets the billing_period_duration of this AutoRenewingBasePlanType.

        Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.

        :param billing_period_duration: The billing_period_duration of this AutoRenewingBasePlanType.
        :type billing_period_duration: str
        """

        self._billing_period_duration = billing_period_duration

    @property
    def grace_period_duration(self):
        """Gets the grace_period_duration of this AutoRenewingBasePlanType.

        Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.

        :return: The grace_period_duration of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._grace_period_duration

    @grace_period_duration.setter
    def grace_period_duration(self, grace_period_duration):
        """Sets the grace_period_duration of this AutoRenewingBasePlanType.

        Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.

        :param grace_period_duration: The grace_period_duration of this AutoRenewingBasePlanType.
        :type grace_period_duration: str
        """

        self._grace_period_duration = grace_period_duration

    @property
    def legacy_compatible(self):
        """Gets the legacy_compatible of this AutoRenewingBasePlanType.

        Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.

        :return: The legacy_compatible of this AutoRenewingBasePlanType.
        :rtype: bool
        """
        return self._legacy_compatible

    @legacy_compatible.setter
    def legacy_compatible(self, legacy_compatible):
        """Sets the legacy_compatible of this AutoRenewingBasePlanType.

        Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.

        :param legacy_compatible: The legacy_compatible of this AutoRenewingBasePlanType.
        :type legacy_compatible: bool
        """

        self._legacy_compatible = legacy_compatible

    @property
    def legacy_compatible_subscription_offer_id(self):
        """Gets the legacy_compatible_subscription_offer_id of this AutoRenewingBasePlanType.

        Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.

        :return: The legacy_compatible_subscription_offer_id of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._legacy_compatible_subscription_offer_id

    @legacy_compatible_subscription_offer_id.setter
    def legacy_compatible_subscription_offer_id(self, legacy_compatible_subscription_offer_id):
        """Sets the legacy_compatible_subscription_offer_id of this AutoRenewingBasePlanType.

        Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.

        :param legacy_compatible_subscription_offer_id: The legacy_compatible_subscription_offer_id of this AutoRenewingBasePlanType.
        :type legacy_compatible_subscription_offer_id: str
        """

        self._legacy_compatible_subscription_offer_id = legacy_compatible_subscription_offer_id

    @property
    def proration_mode(self):
        """Gets the proration_mode of this AutoRenewingBasePlanType.

        The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.

        :return: The proration_mode of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._proration_mode

    @proration_mode.setter
    def proration_mode(self, proration_mode):
        """Sets the proration_mode of this AutoRenewingBasePlanType.

        The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.

        :param proration_mode: The proration_mode of this AutoRenewingBasePlanType.
        :type proration_mode: str
        """
        allowed_values = ["SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED", "SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE", "SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY"]  # noqa: E501
        if proration_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `proration_mode` ({0}), must be one of {1}"
                .format(proration_mode, allowed_values)
            )

        self._proration_mode = proration_mode

    @property
    def resubscribe_state(self):
        """Gets the resubscribe_state of this AutoRenewingBasePlanType.

        Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.

        :return: The resubscribe_state of this AutoRenewingBasePlanType.
        :rtype: str
        """
        return self._resubscribe_state

    @resubscribe_state.setter
    def resubscribe_state(self, resubscribe_state):
        """Sets the resubscribe_state of this AutoRenewingBasePlanType.

        Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.

        :param resubscribe_state: The resubscribe_state of this AutoRenewingBasePlanType.
        :type resubscribe_state: str
        """
        allowed_values = ["RESUBSCRIBE_STATE_UNSPECIFIED", "RESUBSCRIBE_STATE_ACTIVE", "RESUBSCRIBE_STATE_INACTIVE"]  # noqa: E501
        if resubscribe_state not in allowed_values:
            raise ValueError(
                "Invalid value for `resubscribe_state` ({0}), must be one of {1}"
                .format(resubscribe_state, allowed_values)
            )

        self._resubscribe_state = resubscribe_state
