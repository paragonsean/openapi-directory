# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_regions_subscription_offer_phase_prices import OtherRegionsSubscriptionOfferPhasePrices
from openapi_server import util


class OtherRegionsSubscriptionOfferPhaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, absolute_discounts: OtherRegionsSubscriptionOfferPhasePrices=None, other_regions_prices: OtherRegionsSubscriptionOfferPhasePrices=None, relative_discount: float=None):
        """OtherRegionsSubscriptionOfferPhaseConfig - a model defined in OpenAPI

        :param absolute_discounts: The absolute_discounts of this OtherRegionsSubscriptionOfferPhaseConfig.
        :param other_regions_prices: The other_regions_prices of this OtherRegionsSubscriptionOfferPhaseConfig.
        :param relative_discount: The relative_discount of this OtherRegionsSubscriptionOfferPhaseConfig.
        """
        self.openapi_types = {
            'absolute_discounts': OtherRegionsSubscriptionOfferPhasePrices,
            'other_regions_prices': OtherRegionsSubscriptionOfferPhasePrices,
            'relative_discount': float
        }

        self.attribute_map = {
            'absolute_discounts': 'absoluteDiscounts',
            'other_regions_prices': 'otherRegionsPrices',
            'relative_discount': 'relativeDiscount'
        }

        self._absolute_discounts = absolute_discounts
        self._other_regions_prices = other_regions_prices
        self._relative_discount = relative_discount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherRegionsSubscriptionOfferPhaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherRegionsSubscriptionOfferPhaseConfig of this OtherRegionsSubscriptionOfferPhaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def absolute_discounts(self):
        """Gets the absolute_discounts of this OtherRegionsSubscriptionOfferPhaseConfig.


        :return: The absolute_discounts of this OtherRegionsSubscriptionOfferPhaseConfig.
        :rtype: OtherRegionsSubscriptionOfferPhasePrices
        """
        return self._absolute_discounts

    @absolute_discounts.setter
    def absolute_discounts(self, absolute_discounts):
        """Sets the absolute_discounts of this OtherRegionsSubscriptionOfferPhaseConfig.


        :param absolute_discounts: The absolute_discounts of this OtherRegionsSubscriptionOfferPhaseConfig.
        :type absolute_discounts: OtherRegionsSubscriptionOfferPhasePrices
        """

        self._absolute_discounts = absolute_discounts

    @property
    def other_regions_prices(self):
        """Gets the other_regions_prices of this OtherRegionsSubscriptionOfferPhaseConfig.


        :return: The other_regions_prices of this OtherRegionsSubscriptionOfferPhaseConfig.
        :rtype: OtherRegionsSubscriptionOfferPhasePrices
        """
        return self._other_regions_prices

    @other_regions_prices.setter
    def other_regions_prices(self, other_regions_prices):
        """Sets the other_regions_prices of this OtherRegionsSubscriptionOfferPhaseConfig.


        :param other_regions_prices: The other_regions_prices of this OtherRegionsSubscriptionOfferPhaseConfig.
        :type other_regions_prices: OtherRegionsSubscriptionOfferPhasePrices
        """

        self._other_regions_prices = other_regions_prices

    @property
    def relative_discount(self):
        """Gets the relative_discount of this OtherRegionsSubscriptionOfferPhaseConfig.

        The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in any new locations Play may launch in.

        :return: The relative_discount of this OtherRegionsSubscriptionOfferPhaseConfig.
        :rtype: float
        """
        return self._relative_discount

    @relative_discount.setter
    def relative_discount(self, relative_discount):
        """Sets the relative_discount of this OtherRegionsSubscriptionOfferPhaseConfig.

        The fraction of the base plan price prorated over the phase duration that the user pays for this offer phase. For example, if the base plan price for this region is $12 for a period of 1 year, then a 50% discount for a phase of a duration of 3 months would correspond to a price of $1.50. The discount must be specified as a fraction strictly larger than 0 and strictly smaller than 1. The resulting price will be rounded to the nearest billable unit (e.g. cents for USD). The relative discount is considered invalid if the discounted price ends up being smaller than the minimum price allowed in any new locations Play may launch in.

        :param relative_discount: The relative_discount of this OtherRegionsSubscriptionOfferPhaseConfig.
        :type relative_discount: float
        """

        self._relative_discount = relative_discount
