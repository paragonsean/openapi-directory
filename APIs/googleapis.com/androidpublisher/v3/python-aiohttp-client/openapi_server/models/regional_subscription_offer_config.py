# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionalSubscriptionOfferConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_subscriber_availability: bool=None, region_code: str=None):
        """RegionalSubscriptionOfferConfig - a model defined in OpenAPI

        :param new_subscriber_availability: The new_subscriber_availability of this RegionalSubscriptionOfferConfig.
        :param region_code: The region_code of this RegionalSubscriptionOfferConfig.
        """
        self.openapi_types = {
            'new_subscriber_availability': bool,
            'region_code': str
        }

        self.attribute_map = {
            'new_subscriber_availability': 'newSubscriberAvailability',
            'region_code': 'regionCode'
        }

        self._new_subscriber_availability = new_subscriber_availability
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionalSubscriptionOfferConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionalSubscriptionOfferConfig of this RegionalSubscriptionOfferConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_subscriber_availability(self):
        """Gets the new_subscriber_availability of this RegionalSubscriptionOfferConfig.

        Whether the subscription offer in the specified region is available for new subscribers. Existing subscribers will not have their subscription cancelled if this value is set to false. If not specified, this will default to false.

        :return: The new_subscriber_availability of this RegionalSubscriptionOfferConfig.
        :rtype: bool
        """
        return self._new_subscriber_availability

    @new_subscriber_availability.setter
    def new_subscriber_availability(self, new_subscriber_availability):
        """Sets the new_subscriber_availability of this RegionalSubscriptionOfferConfig.

        Whether the subscription offer in the specified region is available for new subscribers. Existing subscribers will not have their subscription cancelled if this value is set to false. If not specified, this will default to false.

        :param new_subscriber_availability: The new_subscriber_availability of this RegionalSubscriptionOfferConfig.
        :type new_subscriber_availability: bool
        """

        self._new_subscriber_availability = new_subscriber_availability

    @property
    def region_code(self):
        """Gets the region_code of this RegionalSubscriptionOfferConfig.

        Required. Immutable. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :return: The region_code of this RegionalSubscriptionOfferConfig.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this RegionalSubscriptionOfferConfig.

        Required. Immutable. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".

        :param region_code: The region_code of this RegionalSubscriptionOfferConfig.
        :type region_code: str
        """

        self._region_code = region_code
