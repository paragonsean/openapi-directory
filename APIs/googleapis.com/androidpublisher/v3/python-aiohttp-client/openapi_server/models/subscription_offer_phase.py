# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.other_regions_subscription_offer_phase_config import OtherRegionsSubscriptionOfferPhaseConfig
from openapi_server.models.regional_subscription_offer_phase_config import RegionalSubscriptionOfferPhaseConfig
from openapi_server import util


class SubscriptionOfferPhase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, other_regions_config: OtherRegionsSubscriptionOfferPhaseConfig=None, recurrence_count: int=None, regional_configs: List[RegionalSubscriptionOfferPhaseConfig]=None):
        """SubscriptionOfferPhase - a model defined in OpenAPI

        :param duration: The duration of this SubscriptionOfferPhase.
        :param other_regions_config: The other_regions_config of this SubscriptionOfferPhase.
        :param recurrence_count: The recurrence_count of this SubscriptionOfferPhase.
        :param regional_configs: The regional_configs of this SubscriptionOfferPhase.
        """
        self.openapi_types = {
            'duration': str,
            'other_regions_config': OtherRegionsSubscriptionOfferPhaseConfig,
            'recurrence_count': int,
            'regional_configs': List[RegionalSubscriptionOfferPhaseConfig]
        }

        self.attribute_map = {
            'duration': 'duration',
            'other_regions_config': 'otherRegionsConfig',
            'recurrence_count': 'recurrenceCount',
            'regional_configs': 'regionalConfigs'
        }

        self._duration = duration
        self._other_regions_config = other_regions_config
        self._recurrence_count = recurrence_count
        self._regional_configs = regional_configs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionOfferPhase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionOfferPhase of this SubscriptionOfferPhase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SubscriptionOfferPhase.

        Required. The duration of a single recurrence of this phase. Specified in ISO 8601 format.

        :return: The duration of this SubscriptionOfferPhase.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SubscriptionOfferPhase.

        Required. The duration of a single recurrence of this phase. Specified in ISO 8601 format.

        :param duration: The duration of this SubscriptionOfferPhase.
        :type duration: str
        """

        self._duration = duration

    @property
    def other_regions_config(self):
        """Gets the other_regions_config of this SubscriptionOfferPhase.


        :return: The other_regions_config of this SubscriptionOfferPhase.
        :rtype: OtherRegionsSubscriptionOfferPhaseConfig
        """
        return self._other_regions_config

    @other_regions_config.setter
    def other_regions_config(self, other_regions_config):
        """Sets the other_regions_config of this SubscriptionOfferPhase.


        :param other_regions_config: The other_regions_config of this SubscriptionOfferPhase.
        :type other_regions_config: OtherRegionsSubscriptionOfferPhaseConfig
        """

        self._other_regions_config = other_regions_config

    @property
    def recurrence_count(self):
        """Gets the recurrence_count of this SubscriptionOfferPhase.

        Required. The number of times this phase repeats. If this offer phase is not free, each recurrence charges the user the price of this offer phase.

        :return: The recurrence_count of this SubscriptionOfferPhase.
        :rtype: int
        """
        return self._recurrence_count

    @recurrence_count.setter
    def recurrence_count(self, recurrence_count):
        """Sets the recurrence_count of this SubscriptionOfferPhase.

        Required. The number of times this phase repeats. If this offer phase is not free, each recurrence charges the user the price of this offer phase.

        :param recurrence_count: The recurrence_count of this SubscriptionOfferPhase.
        :type recurrence_count: int
        """

        self._recurrence_count = recurrence_count

    @property
    def regional_configs(self):
        """Gets the regional_configs of this SubscriptionOfferPhase.

        Required. The region-specific configuration of this offer phase. This list must contain exactly one entry for each region for which the subscription offer has a regional config.

        :return: The regional_configs of this SubscriptionOfferPhase.
        :rtype: List[RegionalSubscriptionOfferPhaseConfig]
        """
        return self._regional_configs

    @regional_configs.setter
    def regional_configs(self, regional_configs):
        """Sets the regional_configs of this SubscriptionOfferPhase.

        Required. The region-specific configuration of this offer phase. This list must contain exactly one entry for each region for which the subscription offer has a regional config.

        :param regional_configs: The regional_configs of this SubscriptionOfferPhase.
        :type regional_configs: List[RegionalSubscriptionOfferPhaseConfig]
        """

        self._regional_configs = regional_configs
