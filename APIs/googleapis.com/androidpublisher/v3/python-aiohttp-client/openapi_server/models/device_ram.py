# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceRam(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_bytes: str=None, min_bytes: str=None):
        """DeviceRam - a model defined in OpenAPI

        :param max_bytes: The max_bytes of this DeviceRam.
        :param min_bytes: The min_bytes of this DeviceRam.
        """
        self.openapi_types = {
            'max_bytes': str,
            'min_bytes': str
        }

        self.attribute_map = {
            'max_bytes': 'maxBytes',
            'min_bytes': 'minBytes'
        }

        self._max_bytes = max_bytes
        self._min_bytes = min_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRam':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRam of this DeviceRam.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_bytes(self):
        """Gets the max_bytes of this DeviceRam.

        Maximum RAM in bytes (bound excluded).

        :return: The max_bytes of this DeviceRam.
        :rtype: str
        """
        return self._max_bytes

    @max_bytes.setter
    def max_bytes(self, max_bytes):
        """Sets the max_bytes of this DeviceRam.

        Maximum RAM in bytes (bound excluded).

        :param max_bytes: The max_bytes of this DeviceRam.
        :type max_bytes: str
        """

        self._max_bytes = max_bytes

    @property
    def min_bytes(self):
        """Gets the min_bytes of this DeviceRam.

        Minimum RAM in bytes (bound included).

        :return: The min_bytes of this DeviceRam.
        :rtype: str
        """
        return self._min_bytes

    @min_bytes.setter
    def min_bytes(self, min_bytes):
        """Sets the min_bytes of this DeviceRam.

        Minimum RAM in bytes (bound included).

        :param min_bytes: The min_bytes of this DeviceRam.
        :type min_bytes: str
        """

        self._min_bytes = min_bytes
