# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_subscription import ExternalSubscription
from openapi_server import util


class RecurringExternalTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_subscription: ExternalSubscription=None, external_transaction_token: str=None, initial_external_transaction_id: str=None, migrated_transaction_program: str=None):
        """RecurringExternalTransaction - a model defined in OpenAPI

        :param external_subscription: The external_subscription of this RecurringExternalTransaction.
        :param external_transaction_token: The external_transaction_token of this RecurringExternalTransaction.
        :param initial_external_transaction_id: The initial_external_transaction_id of this RecurringExternalTransaction.
        :param migrated_transaction_program: The migrated_transaction_program of this RecurringExternalTransaction.
        """
        self.openapi_types = {
            'external_subscription': ExternalSubscription,
            'external_transaction_token': str,
            'initial_external_transaction_id': str,
            'migrated_transaction_program': str
        }

        self.attribute_map = {
            'external_subscription': 'externalSubscription',
            'external_transaction_token': 'externalTransactionToken',
            'initial_external_transaction_id': 'initialExternalTransactionId',
            'migrated_transaction_program': 'migratedTransactionProgram'
        }

        self._external_subscription = external_subscription
        self._external_transaction_token = external_transaction_token
        self._initial_external_transaction_id = initial_external_transaction_id
        self._migrated_transaction_program = migrated_transaction_program

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringExternalTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringExternalTransaction of this RecurringExternalTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_subscription(self):
        """Gets the external_subscription of this RecurringExternalTransaction.


        :return: The external_subscription of this RecurringExternalTransaction.
        :rtype: ExternalSubscription
        """
        return self._external_subscription

    @external_subscription.setter
    def external_subscription(self, external_subscription):
        """Sets the external_subscription of this RecurringExternalTransaction.


        :param external_subscription: The external_subscription of this RecurringExternalTransaction.
        :type external_subscription: ExternalSubscription
        """

        self._external_subscription = external_subscription

    @property
    def external_transaction_token(self):
        """Gets the external_transaction_token of this RecurringExternalTransaction.

        Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.

        :return: The external_transaction_token of this RecurringExternalTransaction.
        :rtype: str
        """
        return self._external_transaction_token

    @external_transaction_token.setter
    def external_transaction_token(self, external_transaction_token):
        """Sets the external_transaction_token of this RecurringExternalTransaction.

        Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.

        :param external_transaction_token: The external_transaction_token of this RecurringExternalTransaction.
        :type external_transaction_token: str
        """

        self._external_transaction_token = external_transaction_token

    @property
    def initial_external_transaction_id(self):
        """Gets the initial_external_transaction_id of this RecurringExternalTransaction.

        The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.

        :return: The initial_external_transaction_id of this RecurringExternalTransaction.
        :rtype: str
        """
        return self._initial_external_transaction_id

    @initial_external_transaction_id.setter
    def initial_external_transaction_id(self, initial_external_transaction_id):
        """Sets the initial_external_transaction_id of this RecurringExternalTransaction.

        The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.

        :param initial_external_transaction_id: The initial_external_transaction_id of this RecurringExternalTransaction.
        :type initial_external_transaction_id: str
        """

        self._initial_external_transaction_id = initial_external_transaction_id

    @property
    def migrated_transaction_program(self):
        """Gets the migrated_transaction_program of this RecurringExternalTransaction.

        Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.

        :return: The migrated_transaction_program of this RecurringExternalTransaction.
        :rtype: str
        """
        return self._migrated_transaction_program

    @migrated_transaction_program.setter
    def migrated_transaction_program(self, migrated_transaction_program):
        """Sets the migrated_transaction_program of this RecurringExternalTransaction.

        Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.

        :param migrated_transaction_program: The migrated_transaction_program of this RecurringExternalTransaction.
        :type migrated_transaction_program: str
        """
        allowed_values = ["EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED", "USER_CHOICE_BILLING", "ALTERTNATIVE_BILLING_ONLY"]  # noqa: E501
        if migrated_transaction_program not in allowed_values:
            raise ValueError(
                "Invalid value for `migrated_transaction_program` ({0}), must be one of {1}"
                .format(migrated_transaction_program, allowed_values)
            )

        self._migrated_transaction_program = migrated_transaction_program
