# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, screen_density: int=None, supported_abis: List[str]=None, supported_locales: List[str]=None):
        """DeviceSpec - a model defined in OpenAPI

        :param screen_density: The screen_density of this DeviceSpec.
        :param supported_abis: The supported_abis of this DeviceSpec.
        :param supported_locales: The supported_locales of this DeviceSpec.
        """
        self.openapi_types = {
            'screen_density': int,
            'supported_abis': List[str],
            'supported_locales': List[str]
        }

        self.attribute_map = {
            'screen_density': 'screenDensity',
            'supported_abis': 'supportedAbis',
            'supported_locales': 'supportedLocales'
        }

        self._screen_density = screen_density
        self._supported_abis = supported_abis
        self._supported_locales = supported_locales

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceSpec of this DeviceSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def screen_density(self):
        """Gets the screen_density of this DeviceSpec.

        Screen dpi.

        :return: The screen_density of this DeviceSpec.
        :rtype: int
        """
        return self._screen_density

    @screen_density.setter
    def screen_density(self, screen_density):
        """Sets the screen_density of this DeviceSpec.

        Screen dpi.

        :param screen_density: The screen_density of this DeviceSpec.
        :type screen_density: int
        """

        self._screen_density = screen_density

    @property
    def supported_abis(self):
        """Gets the supported_abis of this DeviceSpec.

        Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. \"armeabi-v7a\", \"x86_64\".

        :return: The supported_abis of this DeviceSpec.
        :rtype: List[str]
        """
        return self._supported_abis

    @supported_abis.setter
    def supported_abis(self, supported_abis):
        """Sets the supported_abis of this DeviceSpec.

        Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. \"armeabi-v7a\", \"x86_64\".

        :param supported_abis: The supported_abis of this DeviceSpec.
        :type supported_abis: List[str]
        """

        self._supported_abis = supported_abis

    @property
    def supported_locales(self):
        """Gets the supported_locales of this DeviceSpec.

        All installed locales represented as BCP-47 strings, e.g. \"en-US\".

        :return: The supported_locales of this DeviceSpec.
        :rtype: List[str]
        """
        return self._supported_locales

    @supported_locales.setter
    def supported_locales(self, supported_locales):
        """Sets the supported_locales of this DeviceSpec.

        All installed locales represented as BCP-47 strings, e.g. \"en-US\".

        :param supported_locales: The supported_locales of this DeviceSpec.
        :type supported_locales: List[str]
        """

        self._supported_locales = supported_locales
