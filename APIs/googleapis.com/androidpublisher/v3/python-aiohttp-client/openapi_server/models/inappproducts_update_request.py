# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.in_app_product import InAppProduct
from openapi_server import util


class InappproductsUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_missing: bool=None, auto_convert_missing_prices: bool=None, inappproduct: InAppProduct=None, latency_tolerance: str=None, package_name: str=None, sku: str=None):
        """InappproductsUpdateRequest - a model defined in OpenAPI

        :param allow_missing: The allow_missing of this InappproductsUpdateRequest.
        :param auto_convert_missing_prices: The auto_convert_missing_prices of this InappproductsUpdateRequest.
        :param inappproduct: The inappproduct of this InappproductsUpdateRequest.
        :param latency_tolerance: The latency_tolerance of this InappproductsUpdateRequest.
        :param package_name: The package_name of this InappproductsUpdateRequest.
        :param sku: The sku of this InappproductsUpdateRequest.
        """
        self.openapi_types = {
            'allow_missing': bool,
            'auto_convert_missing_prices': bool,
            'inappproduct': InAppProduct,
            'latency_tolerance': str,
            'package_name': str,
            'sku': str
        }

        self.attribute_map = {
            'allow_missing': 'allowMissing',
            'auto_convert_missing_prices': 'autoConvertMissingPrices',
            'inappproduct': 'inappproduct',
            'latency_tolerance': 'latencyTolerance',
            'package_name': 'packageName',
            'sku': 'sku'
        }

        self._allow_missing = allow_missing
        self._auto_convert_missing_prices = auto_convert_missing_prices
        self._inappproduct = inappproduct
        self._latency_tolerance = latency_tolerance
        self._package_name = package_name
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InappproductsUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InappproductsUpdateRequest of this InappproductsUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_missing(self):
        """Gets the allow_missing of this InappproductsUpdateRequest.

        If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created.

        :return: The allow_missing of this InappproductsUpdateRequest.
        :rtype: bool
        """
        return self._allow_missing

    @allow_missing.setter
    def allow_missing(self, allow_missing):
        """Sets the allow_missing of this InappproductsUpdateRequest.

        If set to true, and the in-app product with the given package_name and sku doesn't exist, the in-app product will be created.

        :param allow_missing: The allow_missing of this InappproductsUpdateRequest.
        :type allow_missing: bool
        """

        self._allow_missing = allow_missing

    @property
    def auto_convert_missing_prices(self):
        """Gets the auto_convert_missing_prices of this InappproductsUpdateRequest.

        If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.

        :return: The auto_convert_missing_prices of this InappproductsUpdateRequest.
        :rtype: bool
        """
        return self._auto_convert_missing_prices

    @auto_convert_missing_prices.setter
    def auto_convert_missing_prices(self, auto_convert_missing_prices):
        """Sets the auto_convert_missing_prices of this InappproductsUpdateRequest.

        If true the prices for all regions targeted by the parent app that don't have a price specified for this in-app product will be auto converted to the target currency based on the default price. Defaults to false.

        :param auto_convert_missing_prices: The auto_convert_missing_prices of this InappproductsUpdateRequest.
        :type auto_convert_missing_prices: bool
        """

        self._auto_convert_missing_prices = auto_convert_missing_prices

    @property
    def inappproduct(self):
        """Gets the inappproduct of this InappproductsUpdateRequest.


        :return: The inappproduct of this InappproductsUpdateRequest.
        :rtype: InAppProduct
        """
        return self._inappproduct

    @inappproduct.setter
    def inappproduct(self, inappproduct):
        """Sets the inappproduct of this InappproductsUpdateRequest.


        :param inappproduct: The inappproduct of this InappproductsUpdateRequest.
        :type inappproduct: InAppProduct
        """

        self._inappproduct = inappproduct

    @property
    def latency_tolerance(self):
        """Gets the latency_tolerance of this InappproductsUpdateRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :return: The latency_tolerance of this InappproductsUpdateRequest.
        :rtype: str
        """
        return self._latency_tolerance

    @latency_tolerance.setter
    def latency_tolerance(self, latency_tolerance):
        """Sets the latency_tolerance of this InappproductsUpdateRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :param latency_tolerance: The latency_tolerance of this InappproductsUpdateRequest.
        :type latency_tolerance: str
        """
        allowed_values = ["PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT"]  # noqa: E501
        if latency_tolerance not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_tolerance` ({0}), must be one of {1}"
                .format(latency_tolerance, allowed_values)
            )

        self._latency_tolerance = latency_tolerance

    @property
    def package_name(self):
        """Gets the package_name of this InappproductsUpdateRequest.

        Package name of the app.

        :return: The package_name of this InappproductsUpdateRequest.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this InappproductsUpdateRequest.

        Package name of the app.

        :param package_name: The package_name of this InappproductsUpdateRequest.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def sku(self):
        """Gets the sku of this InappproductsUpdateRequest.

        Unique identifier for the in-app product.

        :return: The sku of this InappproductsUpdateRequest.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InappproductsUpdateRequest.

        Unique identifier for the in-app product.

        :param sku: The sku of this InappproductsUpdateRequest.
        :type sku: str
        """

        self._sku = sku
