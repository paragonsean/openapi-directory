# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.base_plan import BasePlan
from openapi_server.models.subscription_listing import SubscriptionListing
from openapi_server.models.subscription_tax_and_compliance_settings import SubscriptionTaxAndComplianceSettings
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, base_plans: List[BasePlan]=None, listings: List[SubscriptionListing]=None, package_name: str=None, product_id: str=None, tax_and_compliance_settings: SubscriptionTaxAndComplianceSettings=None):
        """Subscription - a model defined in OpenAPI

        :param archived: The archived of this Subscription.
        :param base_plans: The base_plans of this Subscription.
        :param listings: The listings of this Subscription.
        :param package_name: The package_name of this Subscription.
        :param product_id: The product_id of this Subscription.
        :param tax_and_compliance_settings: The tax_and_compliance_settings of this Subscription.
        """
        self.openapi_types = {
            'archived': bool,
            'base_plans': List[BasePlan],
            'listings': List[SubscriptionListing],
            'package_name': str,
            'product_id': str,
            'tax_and_compliance_settings': SubscriptionTaxAndComplianceSettings
        }

        self.attribute_map = {
            'archived': 'archived',
            'base_plans': 'basePlans',
            'listings': 'listings',
            'package_name': 'packageName',
            'product_id': 'productId',
            'tax_and_compliance_settings': 'taxAndComplianceSettings'
        }

        self._archived = archived
        self._base_plans = base_plans
        self._listings = listings
        self._package_name = package_name
        self._product_id = product_id
        self._tax_and_compliance_settings = tax_and_compliance_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this Subscription.

        Output only. Deprecated: subscription archiving is not supported.

        :return: The archived of this Subscription.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Subscription.

        Output only. Deprecated: subscription archiving is not supported.

        :param archived: The archived of this Subscription.
        :type archived: bool
        """

        self._archived = archived

    @property
    def base_plans(self):
        """Gets the base_plans of this Subscription.

        The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.

        :return: The base_plans of this Subscription.
        :rtype: List[BasePlan]
        """
        return self._base_plans

    @base_plans.setter
    def base_plans(self, base_plans):
        """Sets the base_plans of this Subscription.

        The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.

        :param base_plans: The base_plans of this Subscription.
        :type base_plans: List[BasePlan]
        """

        self._base_plans = base_plans

    @property
    def listings(self):
        """Gets the listings of this Subscription.

        Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.

        :return: The listings of this Subscription.
        :rtype: List[SubscriptionListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this Subscription.

        Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.

        :param listings: The listings of this Subscription.
        :type listings: List[SubscriptionListing]
        """

        self._listings = listings

    @property
    def package_name(self):
        """Gets the package_name of this Subscription.

        Immutable. Package name of the parent app.

        :return: The package_name of this Subscription.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Subscription.

        Immutable. Package name of the parent app.

        :param package_name: The package_name of this Subscription.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def product_id(self):
        """Gets the product_id of this Subscription.

        Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.

        :return: The product_id of this Subscription.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Subscription.

        Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.

        :param product_id: The product_id of this Subscription.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def tax_and_compliance_settings(self):
        """Gets the tax_and_compliance_settings of this Subscription.


        :return: The tax_and_compliance_settings of this Subscription.
        :rtype: SubscriptionTaxAndComplianceSettings
        """
        return self._tax_and_compliance_settings

    @tax_and_compliance_settings.setter
    def tax_and_compliance_settings(self, tax_and_compliance_settings):
        """Sets the tax_and_compliance_settings of this Subscription.


        :param tax_and_compliance_settings: The tax_and_compliance_settings of this Subscription.
        :type tax_and_compliance_settings: SubscriptionTaxAndComplianceSettings
        """

        self._tax_and_compliance_settings = tax_and_compliance_settings
