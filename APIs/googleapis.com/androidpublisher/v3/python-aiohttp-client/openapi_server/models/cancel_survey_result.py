# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelSurveyResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: str=None, reason_user_input: str=None):
        """CancelSurveyResult - a model defined in OpenAPI

        :param reason: The reason of this CancelSurveyResult.
        :param reason_user_input: The reason_user_input of this CancelSurveyResult.
        """
        self.openapi_types = {
            'reason': str,
            'reason_user_input': str
        }

        self.attribute_map = {
            'reason': 'reason',
            'reason_user_input': 'reasonUserInput'
        }

        self._reason = reason
        self._reason_user_input = reason_user_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelSurveyResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelSurveyResult of this CancelSurveyResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this CancelSurveyResult.

        The reason the user selected in the cancel survey.

        :return: The reason of this CancelSurveyResult.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CancelSurveyResult.

        The reason the user selected in the cancel survey.

        :param reason: The reason of this CancelSurveyResult.
        :type reason: str
        """
        allowed_values = ["CANCEL_SURVEY_REASON_UNSPECIFIED", "CANCEL_SURVEY_REASON_NOT_ENOUGH_USAGE", "CANCEL_SURVEY_REASON_TECHNICAL_ISSUES", "CANCEL_SURVEY_REASON_COST_RELATED", "CANCEL_SURVEY_REASON_FOUND_BETTER_APP", "CANCEL_SURVEY_REASON_OTHERS"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def reason_user_input(self):
        """Gets the reason_user_input of this CancelSurveyResult.

        Only set for CANCEL_SURVEY_REASON_OTHERS. This is the user's freeform response to the survey.

        :return: The reason_user_input of this CancelSurveyResult.
        :rtype: str
        """
        return self._reason_user_input

    @reason_user_input.setter
    def reason_user_input(self, reason_user_input):
        """Sets the reason_user_input of this CancelSurveyResult.

        Only set for CANCEL_SURVEY_REASON_OTHERS. This is the user's freeform response to the survey.

        :param reason_user_input: The reason_user_input of this CancelSurveyResult.
        :type reason_user_input: str
        """

        self._reason_user_input = reason_user_input
