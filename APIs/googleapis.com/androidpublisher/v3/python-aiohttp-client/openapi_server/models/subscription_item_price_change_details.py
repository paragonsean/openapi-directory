# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class SubscriptionItemPriceChangeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_new_price_charge_time: str=None, new_price: Money=None, price_change_mode: str=None, price_change_state: str=None):
        """SubscriptionItemPriceChangeDetails - a model defined in OpenAPI

        :param expected_new_price_charge_time: The expected_new_price_charge_time of this SubscriptionItemPriceChangeDetails.
        :param new_price: The new_price of this SubscriptionItemPriceChangeDetails.
        :param price_change_mode: The price_change_mode of this SubscriptionItemPriceChangeDetails.
        :param price_change_state: The price_change_state of this SubscriptionItemPriceChangeDetails.
        """
        self.openapi_types = {
            'expected_new_price_charge_time': str,
            'new_price': Money,
            'price_change_mode': str,
            'price_change_state': str
        }

        self.attribute_map = {
            'expected_new_price_charge_time': 'expectedNewPriceChargeTime',
            'new_price': 'newPrice',
            'price_change_mode': 'priceChangeMode',
            'price_change_state': 'priceChangeState'
        }

        self._expected_new_price_charge_time = expected_new_price_charge_time
        self._new_price = new_price
        self._price_change_mode = price_change_mode
        self._price_change_state = price_change_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionItemPriceChangeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionItemPriceChangeDetails of this SubscriptionItemPriceChangeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_new_price_charge_time(self):
        """Gets the expected_new_price_charge_time of this SubscriptionItemPriceChangeDetails.

        The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. This field is only populated if the price change has not taken effect.

        :return: The expected_new_price_charge_time of this SubscriptionItemPriceChangeDetails.
        :rtype: str
        """
        return self._expected_new_price_charge_time

    @expected_new_price_charge_time.setter
    def expected_new_price_charge_time(self, expected_new_price_charge_time):
        """Sets the expected_new_price_charge_time of this SubscriptionItemPriceChangeDetails.

        The renewal time at which the price change will become effective for the user. This is subject to change(to a future time) due to cases where the renewal time shifts like pause. This field is only populated if the price change has not taken effect.

        :param expected_new_price_charge_time: The expected_new_price_charge_time of this SubscriptionItemPriceChangeDetails.
        :type expected_new_price_charge_time: str
        """

        self._expected_new_price_charge_time = expected_new_price_charge_time

    @property
    def new_price(self):
        """Gets the new_price of this SubscriptionItemPriceChangeDetails.


        :return: The new_price of this SubscriptionItemPriceChangeDetails.
        :rtype: Money
        """
        return self._new_price

    @new_price.setter
    def new_price(self, new_price):
        """Sets the new_price of this SubscriptionItemPriceChangeDetails.


        :param new_price: The new_price of this SubscriptionItemPriceChangeDetails.
        :type new_price: Money
        """

        self._new_price = new_price

    @property
    def price_change_mode(self):
        """Gets the price_change_mode of this SubscriptionItemPriceChangeDetails.

        Price change mode specifies how the subscription item price is changing.

        :return: The price_change_mode of this SubscriptionItemPriceChangeDetails.
        :rtype: str
        """
        return self._price_change_mode

    @price_change_mode.setter
    def price_change_mode(self, price_change_mode):
        """Sets the price_change_mode of this SubscriptionItemPriceChangeDetails.

        Price change mode specifies how the subscription item price is changing.

        :param price_change_mode: The price_change_mode of this SubscriptionItemPriceChangeDetails.
        :type price_change_mode: str
        """
        allowed_values = ["PRICE_CHANGE_MODE_UNSPECIFIED", "PRICE_DECREASE", "PRICE_INCREASE", "OPT_OUT_PRICE_INCREASE"]  # noqa: E501
        if price_change_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `price_change_mode` ({0}), must be one of {1}"
                .format(price_change_mode, allowed_values)
            )

        self._price_change_mode = price_change_mode

    @property
    def price_change_state(self):
        """Gets the price_change_state of this SubscriptionItemPriceChangeDetails.

        State the price change is currently in.

        :return: The price_change_state of this SubscriptionItemPriceChangeDetails.
        :rtype: str
        """
        return self._price_change_state

    @price_change_state.setter
    def price_change_state(self, price_change_state):
        """Sets the price_change_state of this SubscriptionItemPriceChangeDetails.

        State the price change is currently in.

        :param price_change_state: The price_change_state of this SubscriptionItemPriceChangeDetails.
        :type price_change_state: str
        """
        allowed_values = ["PRICE_CHANGE_STATE_UNSPECIFIED", "OUTSTANDING", "CONFIRMED", "APPLIED"]  # noqa: E501
        if price_change_state not in allowed_values:
            raise ValueError(
                "Invalid value for `price_change_state` ({0}), must be one of {1}"
                .format(price_change_state, allowed_values)
            )

        self._price_change_state = price_change_state
