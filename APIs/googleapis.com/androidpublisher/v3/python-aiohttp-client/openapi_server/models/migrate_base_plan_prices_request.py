# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regional_price_migration_config import RegionalPriceMigrationConfig
from openapi_server.models.regions_version import RegionsVersion
from openapi_server import util


class MigrateBasePlanPricesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_plan_id: str=None, latency_tolerance: str=None, package_name: str=None, product_id: str=None, regional_price_migrations: List[RegionalPriceMigrationConfig]=None, regions_version: RegionsVersion=None):
        """MigrateBasePlanPricesRequest - a model defined in OpenAPI

        :param base_plan_id: The base_plan_id of this MigrateBasePlanPricesRequest.
        :param latency_tolerance: The latency_tolerance of this MigrateBasePlanPricesRequest.
        :param package_name: The package_name of this MigrateBasePlanPricesRequest.
        :param product_id: The product_id of this MigrateBasePlanPricesRequest.
        :param regional_price_migrations: The regional_price_migrations of this MigrateBasePlanPricesRequest.
        :param regions_version: The regions_version of this MigrateBasePlanPricesRequest.
        """
        self.openapi_types = {
            'base_plan_id': str,
            'latency_tolerance': str,
            'package_name': str,
            'product_id': str,
            'regional_price_migrations': List[RegionalPriceMigrationConfig],
            'regions_version': RegionsVersion
        }

        self.attribute_map = {
            'base_plan_id': 'basePlanId',
            'latency_tolerance': 'latencyTolerance',
            'package_name': 'packageName',
            'product_id': 'productId',
            'regional_price_migrations': 'regionalPriceMigrations',
            'regions_version': 'regionsVersion'
        }

        self._base_plan_id = base_plan_id
        self._latency_tolerance = latency_tolerance
        self._package_name = package_name
        self._product_id = product_id
        self._regional_price_migrations = regional_price_migrations
        self._regions_version = regions_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrateBasePlanPricesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrateBasePlanPricesRequest of this MigrateBasePlanPricesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_plan_id(self):
        """Gets the base_plan_id of this MigrateBasePlanPricesRequest.

        Required. The unique base plan ID of the base plan to update prices on.

        :return: The base_plan_id of this MigrateBasePlanPricesRequest.
        :rtype: str
        """
        return self._base_plan_id

    @base_plan_id.setter
    def base_plan_id(self, base_plan_id):
        """Sets the base_plan_id of this MigrateBasePlanPricesRequest.

        Required. The unique base plan ID of the base plan to update prices on.

        :param base_plan_id: The base_plan_id of this MigrateBasePlanPricesRequest.
        :type base_plan_id: str
        """

        self._base_plan_id = base_plan_id

    @property
    def latency_tolerance(self):
        """Gets the latency_tolerance of this MigrateBasePlanPricesRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :return: The latency_tolerance of this MigrateBasePlanPricesRequest.
        :rtype: str
        """
        return self._latency_tolerance

    @latency_tolerance.setter
    def latency_tolerance(self, latency_tolerance):
        """Sets the latency_tolerance of this MigrateBasePlanPricesRequest.

        Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.

        :param latency_tolerance: The latency_tolerance of this MigrateBasePlanPricesRequest.
        :type latency_tolerance: str
        """
        allowed_values = ["PRODUCT_UPDATE_LATENCY_TOLERANCE_UNSPECIFIED", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_SENSITIVE", "PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT"]  # noqa: E501
        if latency_tolerance not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_tolerance` ({0}), must be one of {1}"
                .format(latency_tolerance, allowed_values)
            )

        self._latency_tolerance = latency_tolerance

    @property
    def package_name(self):
        """Gets the package_name of this MigrateBasePlanPricesRequest.

        Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource.

        :return: The package_name of this MigrateBasePlanPricesRequest.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this MigrateBasePlanPricesRequest.

        Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource.

        :param package_name: The package_name of this MigrateBasePlanPricesRequest.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def product_id(self):
        """Gets the product_id of this MigrateBasePlanPricesRequest.

        Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource.

        :return: The product_id of this MigrateBasePlanPricesRequest.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this MigrateBasePlanPricesRequest.

        Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource.

        :param product_id: The product_id of this MigrateBasePlanPricesRequest.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def regional_price_migrations(self):
        """Gets the regional_price_migrations of this MigrateBasePlanPricesRequest.

        Required. The regional prices to update.

        :return: The regional_price_migrations of this MigrateBasePlanPricesRequest.
        :rtype: List[RegionalPriceMigrationConfig]
        """
        return self._regional_price_migrations

    @regional_price_migrations.setter
    def regional_price_migrations(self, regional_price_migrations):
        """Sets the regional_price_migrations of this MigrateBasePlanPricesRequest.

        Required. The regional prices to update.

        :param regional_price_migrations: The regional_price_migrations of this MigrateBasePlanPricesRequest.
        :type regional_price_migrations: List[RegionalPriceMigrationConfig]
        """

        self._regional_price_migrations = regional_price_migrations

    @property
    def regions_version(self):
        """Gets the regions_version of this MigrateBasePlanPricesRequest.


        :return: The regions_version of this MigrateBasePlanPricesRequest.
        :rtype: RegionsVersion
        """
        return self._regions_version

    @regions_version.setter
    def regions_version(self, regions_version):
        """Sets the regions_version of this MigrateBasePlanPricesRequest.


        :param regions_version: The regions_version of this MigrateBasePlanPricesRequest.
        :type regions_version: RegionsVersion
        """

        self._regions_version = regions_version
