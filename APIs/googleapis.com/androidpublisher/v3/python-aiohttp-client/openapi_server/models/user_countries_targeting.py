# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserCountriesTargeting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_codes: List[str]=None, exclude: bool=None):
        """UserCountriesTargeting - a model defined in OpenAPI

        :param country_codes: The country_codes of this UserCountriesTargeting.
        :param exclude: The exclude of this UserCountriesTargeting.
        """
        self.openapi_types = {
            'country_codes': List[str],
            'exclude': bool
        }

        self.attribute_map = {
            'country_codes': 'countryCodes',
            'exclude': 'exclude'
        }

        self._country_codes = country_codes
        self._exclude = exclude

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserCountriesTargeting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserCountriesTargeting of this UserCountriesTargeting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_codes(self):
        """Gets the country_codes of this UserCountriesTargeting.

        List of country codes in the two-letter CLDR territory format.

        :return: The country_codes of this UserCountriesTargeting.
        :rtype: List[str]
        """
        return self._country_codes

    @country_codes.setter
    def country_codes(self, country_codes):
        """Sets the country_codes of this UserCountriesTargeting.

        List of country codes in the two-letter CLDR territory format.

        :param country_codes: The country_codes of this UserCountriesTargeting.
        :type country_codes: List[str]
        """

        self._country_codes = country_codes

    @property
    def exclude(self):
        """Gets the exclude of this UserCountriesTargeting.

        Indicates if the list above is exclusive.

        :return: The exclude of this UserCountriesTargeting.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this UserCountriesTargeting.

        Indicates if the list above is exclusive.

        :param exclude: The exclude of this UserCountriesTargeting.
        :type exclude: bool
        """

        self._exclude = exclude
