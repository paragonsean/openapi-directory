# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.external_transaction_address import ExternalTransactionAddress
from openapi_server.models.one_time_external_transaction import OneTimeExternalTransaction
from openapi_server.models.price import Price
from openapi_server.models.recurring_external_transaction import RecurringExternalTransaction
from openapi_server import util


class ExternalTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, current_pre_tax_amount: Price=None, current_tax_amount: Price=None, external_transaction_id: str=None, one_time_transaction: OneTimeExternalTransaction=None, original_pre_tax_amount: Price=None, original_tax_amount: Price=None, package_name: str=None, recurring_transaction: RecurringExternalTransaction=None, test_purchase: object=None, transaction_state: str=None, transaction_time: str=None, user_tax_address: ExternalTransactionAddress=None):
        """ExternalTransaction - a model defined in OpenAPI

        :param create_time: The create_time of this ExternalTransaction.
        :param current_pre_tax_amount: The current_pre_tax_amount of this ExternalTransaction.
        :param current_tax_amount: The current_tax_amount of this ExternalTransaction.
        :param external_transaction_id: The external_transaction_id of this ExternalTransaction.
        :param one_time_transaction: The one_time_transaction of this ExternalTransaction.
        :param original_pre_tax_amount: The original_pre_tax_amount of this ExternalTransaction.
        :param original_tax_amount: The original_tax_amount of this ExternalTransaction.
        :param package_name: The package_name of this ExternalTransaction.
        :param recurring_transaction: The recurring_transaction of this ExternalTransaction.
        :param test_purchase: The test_purchase of this ExternalTransaction.
        :param transaction_state: The transaction_state of this ExternalTransaction.
        :param transaction_time: The transaction_time of this ExternalTransaction.
        :param user_tax_address: The user_tax_address of this ExternalTransaction.
        """
        self.openapi_types = {
            'create_time': str,
            'current_pre_tax_amount': Price,
            'current_tax_amount': Price,
            'external_transaction_id': str,
            'one_time_transaction': OneTimeExternalTransaction,
            'original_pre_tax_amount': Price,
            'original_tax_amount': Price,
            'package_name': str,
            'recurring_transaction': RecurringExternalTransaction,
            'test_purchase': object,
            'transaction_state': str,
            'transaction_time': str,
            'user_tax_address': ExternalTransactionAddress
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'current_pre_tax_amount': 'currentPreTaxAmount',
            'current_tax_amount': 'currentTaxAmount',
            'external_transaction_id': 'externalTransactionId',
            'one_time_transaction': 'oneTimeTransaction',
            'original_pre_tax_amount': 'originalPreTaxAmount',
            'original_tax_amount': 'originalTaxAmount',
            'package_name': 'packageName',
            'recurring_transaction': 'recurringTransaction',
            'test_purchase': 'testPurchase',
            'transaction_state': 'transactionState',
            'transaction_time': 'transactionTime',
            'user_tax_address': 'userTaxAddress'
        }

        self._create_time = create_time
        self._current_pre_tax_amount = current_pre_tax_amount
        self._current_tax_amount = current_tax_amount
        self._external_transaction_id = external_transaction_id
        self._one_time_transaction = one_time_transaction
        self._original_pre_tax_amount = original_pre_tax_amount
        self._original_tax_amount = original_tax_amount
        self._package_name = package_name
        self._recurring_transaction = recurring_transaction
        self._test_purchase = test_purchase
        self._transaction_state = transaction_state
        self._transaction_time = transaction_time
        self._user_tax_address = user_tax_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExternalTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExternalTransaction of this ExternalTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ExternalTransaction.

        Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.

        :return: The create_time of this ExternalTransaction.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ExternalTransaction.

        Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.

        :param create_time: The create_time of this ExternalTransaction.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def current_pre_tax_amount(self):
        """Gets the current_pre_tax_amount of this ExternalTransaction.


        :return: The current_pre_tax_amount of this ExternalTransaction.
        :rtype: Price
        """
        return self._current_pre_tax_amount

    @current_pre_tax_amount.setter
    def current_pre_tax_amount(self, current_pre_tax_amount):
        """Sets the current_pre_tax_amount of this ExternalTransaction.


        :param current_pre_tax_amount: The current_pre_tax_amount of this ExternalTransaction.
        :type current_pre_tax_amount: Price
        """

        self._current_pre_tax_amount = current_pre_tax_amount

    @property
    def current_tax_amount(self):
        """Gets the current_tax_amount of this ExternalTransaction.


        :return: The current_tax_amount of this ExternalTransaction.
        :rtype: Price
        """
        return self._current_tax_amount

    @current_tax_amount.setter
    def current_tax_amount(self, current_tax_amount):
        """Sets the current_tax_amount of this ExternalTransaction.


        :param current_tax_amount: The current_tax_amount of this ExternalTransaction.
        :type current_tax_amount: Price
        """

        self._current_tax_amount = current_tax_amount

    @property
    def external_transaction_id(self):
        """Gets the external_transaction_id of this ExternalTransaction.

        Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.

        :return: The external_transaction_id of this ExternalTransaction.
        :rtype: str
        """
        return self._external_transaction_id

    @external_transaction_id.setter
    def external_transaction_id(self, external_transaction_id):
        """Sets the external_transaction_id of this ExternalTransaction.

        Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.

        :param external_transaction_id: The external_transaction_id of this ExternalTransaction.
        :type external_transaction_id: str
        """

        self._external_transaction_id = external_transaction_id

    @property
    def one_time_transaction(self):
        """Gets the one_time_transaction of this ExternalTransaction.


        :return: The one_time_transaction of this ExternalTransaction.
        :rtype: OneTimeExternalTransaction
        """
        return self._one_time_transaction

    @one_time_transaction.setter
    def one_time_transaction(self, one_time_transaction):
        """Sets the one_time_transaction of this ExternalTransaction.


        :param one_time_transaction: The one_time_transaction of this ExternalTransaction.
        :type one_time_transaction: OneTimeExternalTransaction
        """

        self._one_time_transaction = one_time_transaction

    @property
    def original_pre_tax_amount(self):
        """Gets the original_pre_tax_amount of this ExternalTransaction.


        :return: The original_pre_tax_amount of this ExternalTransaction.
        :rtype: Price
        """
        return self._original_pre_tax_amount

    @original_pre_tax_amount.setter
    def original_pre_tax_amount(self, original_pre_tax_amount):
        """Sets the original_pre_tax_amount of this ExternalTransaction.


        :param original_pre_tax_amount: The original_pre_tax_amount of this ExternalTransaction.
        :type original_pre_tax_amount: Price
        """

        self._original_pre_tax_amount = original_pre_tax_amount

    @property
    def original_tax_amount(self):
        """Gets the original_tax_amount of this ExternalTransaction.


        :return: The original_tax_amount of this ExternalTransaction.
        :rtype: Price
        """
        return self._original_tax_amount

    @original_tax_amount.setter
    def original_tax_amount(self, original_tax_amount):
        """Sets the original_tax_amount of this ExternalTransaction.


        :param original_tax_amount: The original_tax_amount of this ExternalTransaction.
        :type original_tax_amount: Price
        """

        self._original_tax_amount = original_tax_amount

    @property
    def package_name(self):
        """Gets the package_name of this ExternalTransaction.

        Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app').

        :return: The package_name of this ExternalTransaction.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this ExternalTransaction.

        Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app').

        :param package_name: The package_name of this ExternalTransaction.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def recurring_transaction(self):
        """Gets the recurring_transaction of this ExternalTransaction.


        :return: The recurring_transaction of this ExternalTransaction.
        :rtype: RecurringExternalTransaction
        """
        return self._recurring_transaction

    @recurring_transaction.setter
    def recurring_transaction(self, recurring_transaction):
        """Sets the recurring_transaction of this ExternalTransaction.


        :param recurring_transaction: The recurring_transaction of this ExternalTransaction.
        :type recurring_transaction: RecurringExternalTransaction
        """

        self._recurring_transaction = recurring_transaction

    @property
    def test_purchase(self):
        """Gets the test_purchase of this ExternalTransaction.

        Represents a transaction performed using a test account. These transactions will not be charged by Google.

        :return: The test_purchase of this ExternalTransaction.
        :rtype: object
        """
        return self._test_purchase

    @test_purchase.setter
    def test_purchase(self, test_purchase):
        """Sets the test_purchase of this ExternalTransaction.

        Represents a transaction performed using a test account. These transactions will not be charged by Google.

        :param test_purchase: The test_purchase of this ExternalTransaction.
        :type test_purchase: object
        """

        self._test_purchase = test_purchase

    @property
    def transaction_state(self):
        """Gets the transaction_state of this ExternalTransaction.

        Output only. The current state of the transaction.

        :return: The transaction_state of this ExternalTransaction.
        :rtype: str
        """
        return self._transaction_state

    @transaction_state.setter
    def transaction_state(self, transaction_state):
        """Sets the transaction_state of this ExternalTransaction.

        Output only. The current state of the transaction.

        :param transaction_state: The transaction_state of this ExternalTransaction.
        :type transaction_state: str
        """
        allowed_values = ["TRANSACTION_STATE_UNSPECIFIED", "TRANSACTION_REPORTED", "TRANSACTION_CANCELED"]  # noqa: E501
        if transaction_state not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_state` ({0}), must be one of {1}"
                .format(transaction_state, allowed_values)
            )

        self._transaction_state = transaction_state

    @property
    def transaction_time(self):
        """Gets the transaction_time of this ExternalTransaction.

        Required. The time when the transaction was completed.

        :return: The transaction_time of this ExternalTransaction.
        :rtype: str
        """
        return self._transaction_time

    @transaction_time.setter
    def transaction_time(self, transaction_time):
        """Sets the transaction_time of this ExternalTransaction.

        Required. The time when the transaction was completed.

        :param transaction_time: The transaction_time of this ExternalTransaction.
        :type transaction_time: str
        """

        self._transaction_time = transaction_time

    @property
    def user_tax_address(self):
        """Gets the user_tax_address of this ExternalTransaction.


        :return: The user_tax_address of this ExternalTransaction.
        :rtype: ExternalTransactionAddress
        """
        return self._user_tax_address

    @user_tax_address.setter
    def user_tax_address(self, user_tax_address):
        """Sets the user_tax_address of this ExternalTransaction.


        :param user_tax_address: The user_tax_address of this ExternalTransaction.
        :type user_tax_address: ExternalTransactionAddress
        """

        self._user_tax_address = user_tax_address
