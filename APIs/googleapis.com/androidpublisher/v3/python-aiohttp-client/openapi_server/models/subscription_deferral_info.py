# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionDeferralInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_expiry_time_millis: str=None, expected_expiry_time_millis: str=None):
        """SubscriptionDeferralInfo - a model defined in OpenAPI

        :param desired_expiry_time_millis: The desired_expiry_time_millis of this SubscriptionDeferralInfo.
        :param expected_expiry_time_millis: The expected_expiry_time_millis of this SubscriptionDeferralInfo.
        """
        self.openapi_types = {
            'desired_expiry_time_millis': str,
            'expected_expiry_time_millis': str
        }

        self.attribute_map = {
            'desired_expiry_time_millis': 'desiredExpiryTimeMillis',
            'expected_expiry_time_millis': 'expectedExpiryTimeMillis'
        }

        self._desired_expiry_time_millis = desired_expiry_time_millis
        self._expected_expiry_time_millis = expected_expiry_time_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDeferralInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDeferralInfo of this SubscriptionDeferralInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_expiry_time_millis(self):
        """Gets the desired_expiry_time_millis of this SubscriptionDeferralInfo.

        The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription.

        :return: The desired_expiry_time_millis of this SubscriptionDeferralInfo.
        :rtype: str
        """
        return self._desired_expiry_time_millis

    @desired_expiry_time_millis.setter
    def desired_expiry_time_millis(self, desired_expiry_time_millis):
        """Sets the desired_expiry_time_millis of this SubscriptionDeferralInfo.

        The desired next expiry time to assign to the subscription, in milliseconds since the Epoch. The given time must be later/greater than the current expiry time for the subscription.

        :param desired_expiry_time_millis: The desired_expiry_time_millis of this SubscriptionDeferralInfo.
        :type desired_expiry_time_millis: str
        """

        self._desired_expiry_time_millis = desired_expiry_time_millis

    @property
    def expected_expiry_time_millis(self):
        """Gets the expected_expiry_time_millis of this SubscriptionDeferralInfo.

        The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur.

        :return: The expected_expiry_time_millis of this SubscriptionDeferralInfo.
        :rtype: str
        """
        return self._expected_expiry_time_millis

    @expected_expiry_time_millis.setter
    def expected_expiry_time_millis(self, expected_expiry_time_millis):
        """Sets the expected_expiry_time_millis of this SubscriptionDeferralInfo.

        The expected expiry time for the subscription. If the current expiry time for the subscription is not the value specified here, the deferral will not occur.

        :param expected_expiry_time_millis: The expected_expiry_time_millis of this SubscriptionDeferralInfo.
        :type expected_expiry_time_millis: str
        """

        self._expected_expiry_time_millis = expected_expiry_time_millis
