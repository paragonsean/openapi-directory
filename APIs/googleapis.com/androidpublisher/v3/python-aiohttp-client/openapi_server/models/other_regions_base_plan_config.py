# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class OtherRegionsBasePlanConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, eur_price: Money=None, new_subscriber_availability: bool=None, usd_price: Money=None):
        """OtherRegionsBasePlanConfig - a model defined in OpenAPI

        :param eur_price: The eur_price of this OtherRegionsBasePlanConfig.
        :param new_subscriber_availability: The new_subscriber_availability of this OtherRegionsBasePlanConfig.
        :param usd_price: The usd_price of this OtherRegionsBasePlanConfig.
        """
        self.openapi_types = {
            'eur_price': Money,
            'new_subscriber_availability': bool,
            'usd_price': Money
        }

        self.attribute_map = {
            'eur_price': 'eurPrice',
            'new_subscriber_availability': 'newSubscriberAvailability',
            'usd_price': 'usdPrice'
        }

        self._eur_price = eur_price
        self._new_subscriber_availability = new_subscriber_availability
        self._usd_price = usd_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OtherRegionsBasePlanConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OtherRegionsBasePlanConfig of this OtherRegionsBasePlanConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def eur_price(self):
        """Gets the eur_price of this OtherRegionsBasePlanConfig.


        :return: The eur_price of this OtherRegionsBasePlanConfig.
        :rtype: Money
        """
        return self._eur_price

    @eur_price.setter
    def eur_price(self, eur_price):
        """Sets the eur_price of this OtherRegionsBasePlanConfig.


        :param eur_price: The eur_price of this OtherRegionsBasePlanConfig.
        :type eur_price: Money
        """

        self._eur_price = eur_price

    @property
    def new_subscriber_availability(self):
        """Gets the new_subscriber_availability of this OtherRegionsBasePlanConfig.

        Whether the base plan is available for new subscribers in any new locations Play may launch in. If not specified, this will default to false.

        :return: The new_subscriber_availability of this OtherRegionsBasePlanConfig.
        :rtype: bool
        """
        return self._new_subscriber_availability

    @new_subscriber_availability.setter
    def new_subscriber_availability(self, new_subscriber_availability):
        """Sets the new_subscriber_availability of this OtherRegionsBasePlanConfig.

        Whether the base plan is available for new subscribers in any new locations Play may launch in. If not specified, this will default to false.

        :param new_subscriber_availability: The new_subscriber_availability of this OtherRegionsBasePlanConfig.
        :type new_subscriber_availability: bool
        """

        self._new_subscriber_availability = new_subscriber_availability

    @property
    def usd_price(self):
        """Gets the usd_price of this OtherRegionsBasePlanConfig.


        :return: The usd_price of this OtherRegionsBasePlanConfig.
        :rtype: Money
        """
        return self._usd_price

    @usd_price.setter
    def usd_price(self, usd_price):
        """Sets the usd_price of this OtherRegionsBasePlanConfig.


        :param usd_price: The usd_price of this OtherRegionsBasePlanConfig.
        :type usd_price: Money
        """

        self._usd_price = usd_price
