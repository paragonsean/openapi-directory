/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExternalTransaction from '../model/ExternalTransaction';
import RefundExternalTransactionRequest from '../model/RefundExternalTransactionRequest';

/**
* Externaltransactions service.
* @module api/ExternaltransactionsApi
* @version v3
*/
export default class ExternaltransactionsApi {

    /**
    * Constructs a new ExternaltransactionsApi. 
    * @alias module:api/ExternaltransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherExternaltransactionsCreateexternaltransaction operation.
     * @callback module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsCreateexternaltransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new external transaction.
     * @param {String} parent Required. The parent resource where this external transaction will be created. Format: applications/{package_name}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [externalTransactionId] Required. The id to use for the external transaction. Must be unique across all other transactions for the app. This value should be 1-63 characters and valid characters are /a-z0-9_-/. Do not use this field to store any Personally Identifiable Information (PII) such as emails. Attempting to store PII in this field may result in requests being blocked.
     * @param {module:model/ExternalTransaction} [externalTransaction] 
     * @param {module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsCreateexternaltransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalTransaction}
     */
    androidpublisherExternaltransactionsCreateexternaltransaction(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['externalTransaction'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling androidpublisherExternaltransactionsCreateexternaltransaction");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'externalTransactionId': opts['externalTransactionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExternalTransaction;
      return this.apiClient.callApi(
        '/androidpublisher/v3/{parent}/externalTransactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherExternaltransactionsGetexternaltransaction operation.
     * @callback module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsGetexternaltransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an existing external transaction.
     * @param {String} name Required. The name of the external transaction to retrieve. Format: applications/{package_name}/externalTransactions/{external_transaction}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsGetexternaltransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalTransaction}
     */
    androidpublisherExternaltransactionsGetexternaltransaction(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling androidpublisherExternaltransactionsGetexternaltransaction");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExternalTransaction;
      return this.apiClient.callApi(
        '/androidpublisher/v3/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherExternaltransactionsRefundexternaltransaction operation.
     * @callback module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsRefundexternaltransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExternalTransaction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refunds or partially refunds an existing external transaction.
     * @param {String} name Required. The name of the external transaction that will be refunded. Format: applications/{package_name}/externalTransactions/{external_transaction}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RefundExternalTransactionRequest} [refundExternalTransactionRequest] 
     * @param {module:api/ExternaltransactionsApi~androidpublisherExternaltransactionsRefundexternaltransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExternalTransaction}
     */
    androidpublisherExternaltransactionsRefundexternaltransaction(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['refundExternalTransactionRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling androidpublisherExternaltransactionsRefundexternaltransaction");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExternalTransaction;
      return this.apiClient.callApi(
        '/androidpublisher/v3/{name}:refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
