/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Review from '../model/Review';
import ReviewsListResponse from '../model/ReviewsListResponse';
import ReviewsReplyRequest from '../model/ReviewsReplyRequest';
import ReviewsReplyResponse from '../model/ReviewsReplyResponse';

/**
* Reviews service.
* @module api/ReviewsApi
* @version v3
*/
export default class ReviewsApi {

    /**
    * Constructs a new ReviewsApi. 
    * @alias module:api/ReviewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherReviewsGet operation.
     * @callback module:api/ReviewsApi~androidpublisherReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a single review.
     * @param {String} packageName Package name of the app.
     * @param {String} reviewId Unique identifier for a review.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [translationLanguage] Language localization code.
     * @param {module:api/ReviewsApi~androidpublisherReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    androidpublisherReviewsGet(packageName, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherReviewsGet");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling androidpublisherReviewsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'reviewId': reviewId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'translationLanguage': opts['translationLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherReviewsList operation.
     * @callback module:api/ReviewsApi~androidpublisherReviewsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all reviews.
     * @param {String} packageName Package name of the app.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] How many results the list operation should return.
     * @param {Number} [startIndex] The index of the first element to return.
     * @param {String} [token] Pagination token. If empty, list starts at the first review.
     * @param {String} [translationLanguage] Language localization code.
     * @param {module:api/ReviewsApi~androidpublisherReviewsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewsListResponse}
     */
    androidpublisherReviewsList(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherReviewsList");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'startIndex': opts['startIndex'],
        'token': opts['token'],
        'translationLanguage': opts['translationLanguage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReviewsListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherReviewsReply operation.
     * @callback module:api/ReviewsApi~androidpublisherReviewsReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReviewsReplyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replies to a single review, or updates an existing reply.
     * @param {String} packageName Package name of the app.
     * @param {String} reviewId Unique identifier for a review.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ReviewsReplyRequest} [reviewsReplyRequest] 
     * @param {module:api/ReviewsApi~androidpublisherReviewsReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReviewsReplyResponse}
     */
    androidpublisherReviewsReply(packageName, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = opts['reviewsReplyRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherReviewsReply");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling androidpublisherReviewsReply");
      }

      let pathParams = {
        'packageName': packageName,
        'reviewId': reviewId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewsReplyResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
