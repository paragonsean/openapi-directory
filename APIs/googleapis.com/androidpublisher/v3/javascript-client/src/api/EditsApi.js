/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Apk from '../model/Apk';
import ApksAddExternallyHostedRequest from '../model/ApksAddExternallyHostedRequest';
import ApksAddExternallyHostedResponse from '../model/ApksAddExternallyHostedResponse';
import ApksListResponse from '../model/ApksListResponse';
import AppDetails from '../model/AppDetails';
import AppEdit from '../model/AppEdit';
import Bundle from '../model/Bundle';
import BundlesListResponse from '../model/BundlesListResponse';
import DeobfuscationFilesUploadResponse from '../model/DeobfuscationFilesUploadResponse';
import ExpansionFile from '../model/ExpansionFile';
import ExpansionFilesUploadResponse from '../model/ExpansionFilesUploadResponse';
import ImagesDeleteAllResponse from '../model/ImagesDeleteAllResponse';
import ImagesListResponse from '../model/ImagesListResponse';
import ImagesUploadResponse from '../model/ImagesUploadResponse';
import Listing from '../model/Listing';
import ListingsListResponse from '../model/ListingsListResponse';
import Testers from '../model/Testers';
import Track from '../model/Track';
import TrackConfig from '../model/TrackConfig';
import TrackCountryAvailability from '../model/TrackCountryAvailability';
import TracksListResponse from '../model/TracksListResponse';

/**
* Edits service.
* @module api/EditsApi
* @version v3
*/
export default class EditsApi {

    /**
    * Constructs a new EditsApi. 
    * @alias module:api/EditsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherEditsApksAddexternallyhosted operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksAddexternallyhostedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApksAddExternallyHostedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ApksAddExternallyHostedRequest} [apksAddExternallyHostedRequest] 
     * @param {module:api/EditsApi~androidpublisherEditsApksAddexternallyhostedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApksAddExternallyHostedResponse}
     */
    androidpublisherEditsApksAddexternallyhosted(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apksAddExternallyHostedRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksAddexternallyhosted");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksAddexternallyhosted");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApksAddExternallyHostedResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApksList operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApksListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all current APKs of the app and edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsApksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApksListResponse}
     */
    androidpublisherEditsApksList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApksListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsApksUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsApksUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Apk} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads an APK and adds to the current edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsApksUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Apk}
     */
    androidpublisherEditsApksUpload(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsApksUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsApksUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Apk;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsBundlesList operation.
     * @callback module:api/EditsApi~androidpublisherEditsBundlesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BundlesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all current Android App Bundles of the app and edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsBundlesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BundlesListResponse}
     */
    androidpublisherEditsBundlesList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsBundlesList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsBundlesList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BundlesListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsBundlesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsBundlesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [ackBundleInstallationWarning] Must be set to true if the app bundle installation may trigger a warning on user devices (for example, if installation size may be over a threshold, typically 100 MB).
     * @param {String} [deviceTierConfigId] Device tier config (DTC) to be used for generating deliverables (APKs). Contains id of the DTC or \"LATEST\" for last uploaded DTC.
     * @param {module:api/EditsApi~androidpublisherEditsBundlesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bundle}
     */
    androidpublisherEditsBundlesUpload(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsBundlesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsBundlesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'ackBundleInstallationWarning': opts['ackBundleInstallationWarning'],
        'deviceTierConfigId': opts['deviceTierConfigId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Bundle;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsCommit operation.
     * @callback module:api/EditsApi~androidpublisherEditsCommitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commits an app edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [changesNotSentForReview] Indicates that the changes in this edit will not be reviewed until they are explicitly sent for review from the Google Play Console UI. These changes will be added to any other changes that are not yet sent for review.
     * @param {module:api/EditsApi~androidpublisherEditsCommitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsCommit(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsCommit");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsCommit");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'changesNotSentForReview': opts['changesNotSentForReview']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsCountryavailabilityGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsCountryavailabilityGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrackCountryAvailability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets country availability.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track The track to read from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsCountryavailabilityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrackCountryAvailability}
     */
    androidpublisherEditsCountryavailabilityGet(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsCountryavailabilityGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsCountryavailabilityGet");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsCountryavailabilityGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TrackCountryAvailability;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an app edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsDelete(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDeobfuscationfilesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsDeobfuscationfilesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeobfuscationFilesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new deobfuscation file and attaches to the specified APK.
     * @param {String} packageName Unique identifier for the Android app.
     * @param {String} editId Unique identifier for this edit.
     * @param {Number} apkVersionCode The version code of the APK whose Deobfuscation File is being uploaded.
     * @param {module:model/String} deobfuscationFileType The type of the deobfuscation file.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsDeobfuscationfilesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeobfuscationFilesUploadResponse}
     */
    androidpublisherEditsDeobfuscationfilesUpload(packageName, editId, apkVersionCode, deobfuscationFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }
      // verify the required parameter 'deobfuscationFileType' is set
      if (deobfuscationFileType === undefined || deobfuscationFileType === null) {
        throw new Error("Missing the required parameter 'deobfuscationFileType' when calling androidpublisherEditsDeobfuscationfilesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'deobfuscationFileType': deobfuscationFileType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeobfuscationFilesUploadResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of an app.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsDetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsGet(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches details of an app.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AppDetails} [appDetails] 
     * @param {module:api/EditsApi~androidpublisherEditsDetailsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsPatch(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appDetails'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsDetailsUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsDetailsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates details of an app.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AppDetails} [appDetails] 
     * @param {module:api/EditsApi~androidpublisherEditsDetailsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppDetails}
     */
    androidpublisherEditsDetailsUpdate(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['appDetails'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsDetailsUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsDetailsUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppDetails;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/details', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches the expansion file configuration for the specified APK.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Number} apkVersionCode The version code of the APK whose expansion file configuration is being read or modified.
     * @param {module:model/String} expansionFileType The file type of the file configuration which is being read or modified.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesGet(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesGet");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Number} apkVersionCode The version code of the APK whose expansion file configuration is being read or modified.
     * @param {module:model/String} expansionFileType The file type of the expansion file configuration which is being updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ExpansionFile} [expansionFile] 
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesPatch(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = opts['expansionFile'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesPatch");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Number} apkVersionCode The version code of the APK whose expansion file configuration is being read or modified.
     * @param {module:model/String} expansionFileType The file type of the file configuration which is being read or modified.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ExpansionFile} [expansionFile] 
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFile}
     */
    androidpublisherEditsExpansionfilesUpdate(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = opts['expansionFile'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesUpdate");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpansionFile;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsExpansionfilesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsExpansionfilesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpansionFilesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads a new expansion file and attaches to the specified APK.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Number} apkVersionCode The version code of the APK whose expansion file configuration is being read or modified.
     * @param {module:model/String} expansionFileType The file type of the expansion file configuration which is being updated.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsExpansionfilesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpansionFilesUploadResponse}
     */
    androidpublisherEditsExpansionfilesUpload(packageName, editId, apkVersionCode, expansionFileType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'apkVersionCode' is set
      if (apkVersionCode === undefined || apkVersionCode === null) {
        throw new Error("Missing the required parameter 'apkVersionCode' when calling androidpublisherEditsExpansionfilesUpload");
      }
      // verify the required parameter 'expansionFileType' is set
      if (expansionFileType === undefined || expansionFileType === null) {
        throw new Error("Missing the required parameter 'expansionFileType' when calling androidpublisherEditsExpansionfilesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'apkVersionCode': apkVersionCode,
        'expansionFileType': expansionFileType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpansionFilesUploadResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an app edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsGet(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the image (specified by id) from the edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German).
     * @param {module:model/String} imageType Type of the Image.
     * @param {String} imageId Unique identifier an image within the set of images attached to this edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsImagesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsImagesDelete(packageName, editId, language, imageType, imageId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesDelete");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling androidpublisherEditsImagesDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType,
        'imageId': imageId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesDeleteall operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesDeleteallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesDeleteAllResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all images for the specified language and image type. Returns an empty response if no images are found.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German). Providing a language that is not supported by the App is a no-op.
     * @param {module:model/String} imageType Type of the Image. Providing an image type that refers to no images is a no-op.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsImagesDeleteallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesDeleteAllResponse}
     */
    androidpublisherEditsImagesDeleteall(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesDeleteall");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesDeleteall");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImagesDeleteAllResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesList operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all images. The response may be empty.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German). There must be a store listing for the specified language.
     * @param {module:model/String} imageType Type of the Image. Providing an image type that refers to no images will return an empty response.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsImagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesListResponse}
     */
    androidpublisherEditsImagesList(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesList");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImagesListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsImagesUpload operation.
     * @callback module:api/EditsApi~androidpublisherEditsImagesUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagesUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads an image of the specified language and image type, and adds to the edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German). Providing a language that is not supported by the App is a no-op.
     * @param {module:model/String} imageType Type of the Image.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsImagesUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagesUploadResponse}
     */
    androidpublisherEditsImagesUpload(packageName, editId, language, imageType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsImagesUpload");
      }
      // verify the required parameter 'imageType' is set
      if (imageType === undefined || imageType === null) {
        throw new Error("Missing the required parameter 'imageType' when calling androidpublisherEditsImagesUpload");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language,
        'imageType': imageType
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImagesUploadResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsInsert operation.
     * @callback module:api/EditsApi~androidpublisherEditsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new edit for an app.
     * @param {String} packageName Package name of the app.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AppEdit} [appEdit] 
     * @param {module:api/EditsApi~androidpublisherEditsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsInsert(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['appEdit'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsInsert");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsDelete operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a localized store listing.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsListingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsListingsDelete(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsDelete");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsDelete");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsDeleteall operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsDeleteallCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all store listings.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsListingsDeleteallCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherEditsListingsDeleteall(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsDeleteall");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsDeleteall");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a localized store listing.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsListingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsGet(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsGet");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsList operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListingsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all localized store listings.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsListingsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListingsListResponse}
     */
    androidpublisherEditsListingsList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListingsListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches a localized store listing.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Listing} [listing] 
     * @param {module:api/EditsApi~androidpublisherEditsListingsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsPatch(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['listing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsPatch");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsListingsUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsListingsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Listing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a localized store listing.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} language Language localization code (a BCP-47 language tag; for example, \"de-AT\" for Austrian German).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Listing} [listing] 
     * @param {module:api/EditsApi~androidpublisherEditsListingsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Listing}
     */
    androidpublisherEditsListingsUpdate(packageName, editId, language, opts, callback) {
      opts = opts || {};
      let postBody = opts['listing'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsListingsUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsListingsUpdate");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling androidpublisherEditsListingsUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'language': language
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Listing;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets testers. Note: Testers resource does not support email lists.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track The track to read from.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsTestersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersGet(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersGet");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches testers. Note: Testers resource does not support email lists.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track The track to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Testers} [testers] 
     * @param {module:api/EditsApi~androidpublisherEditsTestersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersPatch(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['testers'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersPatch");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTestersUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsTestersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Testers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates testers. Note: Testers resource does not support email lists.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track The track to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Testers} [testers] 
     * @param {module:api/EditsApi~androidpublisherEditsTestersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Testers}
     */
    androidpublisherEditsTestersUpdate(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['testers'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTestersUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTestersUpdate");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTestersUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Testers;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksCreate operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new track.
     * @param {String} packageName Required. Package name of the app.
     * @param {String} editId Required. Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TrackConfig} [trackConfig] 
     * @param {module:api/EditsApi~androidpublisherEditsTracksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksCreate(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = opts['trackConfig'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksCreate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksCreate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksGet operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a track.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsTracksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksGet(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksGet");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksGet");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksGet");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksList operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TracksListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tracks.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsTracksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TracksListResponse}
     */
    androidpublisherEditsTracksList(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksList");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksList");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TracksListResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksPatch operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches a track.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Track} [track2] 
     * @param {module:api/EditsApi~androidpublisherEditsTracksPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksPatch(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['track2'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksPatch");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksPatch");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsTracksUpdate operation.
     * @callback module:api/EditsApi~androidpublisherEditsTracksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Track} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a track.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {String} track Identifier of the track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/Track} [track2] 
     * @param {module:api/EditsApi~androidpublisherEditsTracksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Track}
     */
    androidpublisherEditsTracksUpdate(packageName, editId, track, opts, callback) {
      opts = opts || {};
      let postBody = opts['track2'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsTracksUpdate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsTracksUpdate");
      }
      // verify the required parameter 'track' is set
      if (track === undefined || track === null) {
        throw new Error("Missing the required parameter 'track' when calling androidpublisherEditsTracksUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId,
        'track': track
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Track;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherEditsValidate operation.
     * @callback module:api/EditsApi~androidpublisherEditsValidateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppEdit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates an app edit.
     * @param {String} packageName Package name of the app.
     * @param {String} editId Identifier of the edit.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/EditsApi~androidpublisherEditsValidateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppEdit}
     */
    androidpublisherEditsValidate(packageName, editId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherEditsValidate");
      }
      // verify the required parameter 'editId' is set
      if (editId === undefined || editId === null) {
        throw new Error("Missing the required parameter 'editId' when calling androidpublisherEditsValidate");
      }

      let pathParams = {
        'packageName': packageName,
        'editId': editId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppEdit;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/edits/{editId}:validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
