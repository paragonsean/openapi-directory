/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateBasePlanRequest from '../model/ActivateBasePlanRequest';
import ActivateSubscriptionOfferRequest from '../model/ActivateSubscriptionOfferRequest';
import BatchGetSubscriptionOffersRequest from '../model/BatchGetSubscriptionOffersRequest';
import BatchGetSubscriptionOffersResponse from '../model/BatchGetSubscriptionOffersResponse';
import BatchGetSubscriptionsResponse from '../model/BatchGetSubscriptionsResponse';
import BatchMigrateBasePlanPricesRequest from '../model/BatchMigrateBasePlanPricesRequest';
import BatchMigrateBasePlanPricesResponse from '../model/BatchMigrateBasePlanPricesResponse';
import BatchUpdateBasePlanStatesRequest from '../model/BatchUpdateBasePlanStatesRequest';
import BatchUpdateBasePlanStatesResponse from '../model/BatchUpdateBasePlanStatesResponse';
import BatchUpdateSubscriptionOfferStatesRequest from '../model/BatchUpdateSubscriptionOfferStatesRequest';
import BatchUpdateSubscriptionOfferStatesResponse from '../model/BatchUpdateSubscriptionOfferStatesResponse';
import BatchUpdateSubscriptionOffersRequest from '../model/BatchUpdateSubscriptionOffersRequest';
import BatchUpdateSubscriptionOffersResponse from '../model/BatchUpdateSubscriptionOffersResponse';
import BatchUpdateSubscriptionsRequest from '../model/BatchUpdateSubscriptionsRequest';
import BatchUpdateSubscriptionsResponse from '../model/BatchUpdateSubscriptionsResponse';
import ConvertRegionPricesRequest from '../model/ConvertRegionPricesRequest';
import ConvertRegionPricesResponse from '../model/ConvertRegionPricesResponse';
import DeactivateBasePlanRequest from '../model/DeactivateBasePlanRequest';
import DeactivateSubscriptionOfferRequest from '../model/DeactivateSubscriptionOfferRequest';
import ListSubscriptionOffersResponse from '../model/ListSubscriptionOffersResponse';
import ListSubscriptionsResponse from '../model/ListSubscriptionsResponse';
import MigrateBasePlanPricesRequest from '../model/MigrateBasePlanPricesRequest';
import Subscription from '../model/Subscription';
import SubscriptionOffer from '../model/SubscriptionOffer';

/**
* Monetization service.
* @module api/MonetizationApi
* @version v3
*/
export default class MonetizationApi {

    /**
    * Constructs a new MonetizationApi. 
    * @alias module:api/MonetizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherMonetizationConvertRegionPrices operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationConvertRegionPricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConvertRegionPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.
     * @param {String} packageName Required. The app package name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ConvertRegionPricesRequest} [convertRegionPricesRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationConvertRegionPricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConvertRegionPricesResponse}
     */
    androidpublisherMonetizationConvertRegionPrices(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['convertRegionPricesRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationConvertRegionPrices");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConvertRegionPricesResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsArchive operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: subscription archiving is not supported.
     * @param {String} packageName Required. The parent app (package name) of the app of the subscription to delete.
     * @param {String} productId Required. The unique product ID of the subscription to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsArchive(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsArchive");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsArchive");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansActivate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a base plan. Once activated, base plans will be available to new subscribers.
     * @param {String} packageName Required. The parent app (package name) of the base plan to activate.
     * @param {String} productId Required. The parent subscription (ID) of the base plan to activate.
     * @param {String} basePlanId Required. The unique base plan ID of the base plan to activate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ActivateBasePlanRequest} [activateBasePlanRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsBasePlansActivate(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['activateBasePlanRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansActivate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansActivate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansActivate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePrices operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePricesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchMigrateBasePlanPricesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch variant of the MigrateBasePlanPrices endpoint. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be created or updated. Must be equal to the package_name field on all the Subscription resources.
     * @param {String} productId Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this batch update spans multiple subscriptions, set this field to \"-\". Must be set.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchMigrateBasePlanPricesRequest} [batchMigrateBasePlanPricesRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchMigrateBasePlanPricesResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePrices(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchMigrateBasePlanPricesRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePrices");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansBatchMigratePrices");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchMigrateBasePlanPricesResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans:batchMigratePrices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStates operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateBasePlanStatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates or deactivates base plans across one or multiple subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     * @param {String} packageName Required. The parent app (package name) of the updated base plans.
     * @param {String} productId Required. The product ID of the parent subscription, if all updated base plans belong to the same subscription. If this batch update spans multiple subscriptions, set this field to \"-\". Must be set.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateBasePlanStatesRequest} [batchUpdateBasePlanStatesRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateBasePlanStatesResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStates(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateBasePlanStatesRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStates");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansBatchUpdateStates");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateBasePlanStatesResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans:batchUpdateStates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansDeactivate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansDeactivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates a base plan. Once deactivated, the base plan will become unavailable to new subscribers, but existing subscribers will maintain their subscription
     * @param {String} packageName Required. The parent app (package name) of the base plan to deactivate.
     * @param {String} productId Required. The parent subscription (ID) of the base plan to deactivate.
     * @param {String} basePlanId Required. The unique base plan ID of the base plan to deactivate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/DeactivateBasePlanRequest} [deactivateBasePlanRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsBasePlansDeactivate(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deactivateBasePlanRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansDeactivate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansDeactivate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansDeactivate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansDelete operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a base plan. Can only be done for draft base plans. This action is irreversible.
     * @param {String} packageName Required. The parent app (package name) of the base plan to delete.
     * @param {String} productId Required. The parent subscription (ID) of the base plan to delete.
     * @param {String} basePlanId Required. The unique offer ID of the base plan to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherMonetizationSubscriptionsBasePlansDelete(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansDelete");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansMigratePrices operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansMigratePricesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Migrates subscribers who are receiving an historical subscription price to the currently-offered price for the specified region. Requests will cause price change notifications to be sent to users who are currently receiving an historical price older than the supplied timestamp. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
     * @param {String} packageName Required. Package name of the parent app. Must be equal to the package_name field on the Subscription resource.
     * @param {String} productId Required. The ID of the subscription to update. Must be equal to the product_id field on the Subscription resource.
     * @param {String} basePlanId Required. The unique base plan ID of the base plan to update prices on.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/MigrateBasePlanPricesRequest} [migrateBasePlanPricesRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansMigratePricesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    androidpublisherMonetizationSubscriptionsBasePlansMigratePrices(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['migrateBasePlanPricesRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansMigratePrices");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansMigratePrices");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansMigratePrices");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersActivate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a subscription offer. Once activated, subscription offers will be available to new subscribers.
     * @param {String} packageName Required. The parent app (package name) of the offer to activate.
     * @param {String} productId Required. The parent subscription (ID) of the offer to activate.
     * @param {String} basePlanId Required. The parent base plan (ID) of the offer to activate.
     * @param {String} offerId Required. The unique offer ID of the offer to activate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/ActivateSubscriptionOfferRequest} [activateSubscriptionOfferRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOffer}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersActivate(packageName, productId, basePlanId, offerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['activateSubscriptionOfferRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersActivate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersActivate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersActivate");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersActivate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId,
        'offerId': offerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOffer;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetSubscriptionOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads one or more subscription offers.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be created or updated. Must be equal to the package_name field on all the requests.
     * @param {String} productId Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to \"-\". Must be set.
     * @param {String} basePlanId Required. The parent base plan (ID) for which the offers should be read. May be specified as '-' to read offers from multiple base plans.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchGetSubscriptionOffersRequest} [batchGetSubscriptionOffersRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetSubscriptionOffersResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchGetSubscriptionOffersRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchGet");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetSubscriptionOffersResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchGet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateSubscriptionOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a batch of subscription offers. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     * @param {String} packageName Required. The parent app (package name) of the updated subscription offers. Must be equal to the package_name field on all the updated SubscriptionOffer resources.
     * @param {String} productId Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to \"-\". Must be set.
     * @param {String} basePlanId Required. The parent base plan (ID) for which the offers should be updated. May be specified as '-' to update offers from multiple base plans.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateSubscriptionOffersRequest} [batchUpdateSubscriptionOffersRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateSubscriptionOffersResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateSubscriptionOffersRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateSubscriptionOffersResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateSubscriptionOfferStatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a batch of subscription offer states. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     * @param {String} packageName Required. The parent app (package name) of the updated subscription offers. Must be equal to the package_name field on all the updated SubscriptionOffer resources.
     * @param {String} productId Required. The product ID of the parent subscription, if all updated offers belong to the same subscription. If this request spans multiple subscriptions, set this field to \"-\". Must be set.
     * @param {String} basePlanId Required. The parent base plan (ID) for which the offers should be updated. May be specified as '-' to update offers from multiple base plans.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateSubscriptionOfferStatesRequest} [batchUpdateSubscriptionOfferStatesRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateSubscriptionOfferStatesResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateSubscriptionOfferStatesRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersBatchUpdateStates");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateSubscriptionOfferStatesResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers:batchUpdateStates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersCreate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new subscription offer. Only auto-renewing base plans can have subscription offers. The offer state will be DRAFT until it is activated.
     * @param {String} packageName Required. The parent app (package name) for which the offer should be created. Must be equal to the package_name field on the Subscription resource.
     * @param {String} productId Required. The parent subscription (ID) for which the offer should be created. Must be equal to the product_id field on the SubscriptionOffer resource.
     * @param {String} basePlanId Required. The parent base plan (ID) for which the offer should be created. Must be equal to the base_plan_id field on the SubscriptionOffer resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [offerId] Required. The ID to use for the offer. For the requirements on this format, see the documentation of the offer_id field on the SubscriptionOffer resource.
     * @param {String} [regionsVersionVersion] Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.
     * @param {module:model/SubscriptionOffer} [subscriptionOffer] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOffer}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersCreate(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionOffer'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersCreate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersCreate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersCreate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'offerId': opts['offerId'],
        'regionsVersion.version': opts['regionsVersionVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOffer;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates a subscription offer. Once deactivated, existing subscribers will maintain their subscription, but the offer will become unavailable to new subscribers.
     * @param {String} packageName Required. The parent app (package name) of the offer to deactivate.
     * @param {String} productId Required. The parent subscription (ID) of the offer to deactivate.
     * @param {String} basePlanId Required. The parent base plan (ID) of the offer to deactivate.
     * @param {String} offerId Required. The unique offer ID of the offer to deactivate.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/DeactivateSubscriptionOfferRequest} [deactivateSubscriptionOfferRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOffer}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate(packageName, productId, basePlanId, offerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['deactivateSubscriptionOfferRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDeactivate");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId,
        'offerId': offerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOffer;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersDelete operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a subscription offer. Can only be done for draft offers. This action is irreversible.
     * @param {String} packageName Required. The parent app (package name) of the offer to delete.
     * @param {String} productId Required. The parent subscription (ID) of the offer to delete.
     * @param {String} basePlanId Required. The parent base plan (ID) of the offer to delete.
     * @param {String} offerId Required. The unique offer ID of the offer to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersDelete(packageName, productId, basePlanId, offerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDelete");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDelete");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId,
        'offerId': offerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersGet operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads a single offer
     * @param {String} packageName Required. The parent app (package name) of the offer to get.
     * @param {String} productId Required. The parent subscription (ID) of the offer to get.
     * @param {String} basePlanId Required. The parent base plan (ID) of the offer to get.
     * @param {String} offerId Required. The unique offer ID of the offer to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOffer}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersGet(packageName, productId, basePlanId, offerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersGet");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersGet");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersGet");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId,
        'offerId': offerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionOffer;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersList operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscriptionOffersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all offers under a given subscription.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be read.
     * @param {String} productId Required. The parent subscription (ID) for which the offers should be read. May be specified as '-' to read all offers under an app.
     * @param {String} basePlanId Required. The parent base plan (ID) for which the offers should be read. May be specified as '-' to read all offers under a subscription or an app. Must be specified as '-' if product_id is specified as '-'.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListSubscriptionsOffers` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSubscriptionOffers` must match the call that provided the page token.
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscriptionOffersResponse}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersList(packageName, productId, basePlanId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersList");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersList");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersList");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionOffersResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBasePlansOffersPatch operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionOffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing subscription offer.
     * @param {String} packageName Required. Immutable. The package name of the app the parent subscription belongs to.
     * @param {String} productId Required. Immutable. The ID of the parent subscription this offer belongs to.
     * @param {String} basePlanId Required. Immutable. The ID of the base plan to which this offer is an extension.
     * @param {String} offerId Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [allowMissing] Optional. If set to true, and the subscription offer with the given package_name, product_id, base_plan_id and offer_id doesn't exist, an offer will be created. If a new offer is created, update_mask is ignored.
     * @param {module:model/String} [latencyTolerance] Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
     * @param {String} [regionsVersionVersion] Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.
     * @param {String} [updateMask] Required. The list of fields to be updated.
     * @param {module:model/SubscriptionOffer} [subscriptionOffer] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBasePlansOffersPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionOffer}
     */
    androidpublisherMonetizationSubscriptionsBasePlansOffersPatch(packageName, productId, basePlanId, offerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscriptionOffer'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersPatch");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersPatch");
      }
      // verify the required parameter 'basePlanId' is set
      if (basePlanId === undefined || basePlanId === null) {
        throw new Error("Missing the required parameter 'basePlanId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersPatch");
      }
      // verify the required parameter 'offerId' is set
      if (offerId === undefined || offerId === null) {
        throw new Error("Missing the required parameter 'offerId' when calling androidpublisherMonetizationSubscriptionsBasePlansOffersPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId,
        'basePlanId': basePlanId,
        'offerId': offerId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'allowMissing': opts['allowMissing'],
        'latencyTolerance': opts['latencyTolerance'],
        'regionsVersion.version': opts['regionsVersionVersion'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubscriptionOffer;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBatchGet operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBatchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads one or more subscriptions.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be retrieved. Must be equal to the package_name field on all the requests.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Array.<String>} [productIds] Required. A list of up to 100 subscription product IDs to retrieve. All the IDs must be different.
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBatchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetSubscriptionsResponse}
     */
    androidpublisherMonetizationSubscriptionsBatchGet(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBatchGet");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'productIds': this.apiClient.buildCollectionParam(opts['productIds'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchGetSubscriptionsResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions:batchGet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsBatchUpdate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBatchUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a batch of subscriptions. Set the latencyTolerance field on nested requests to PRODUCT_UPDATE_LATENCY_TOLERANCE_LATENCY_TOLERANT to achieve maximum update throughput.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be updated. Must be equal to the package_name field on all the Subscription resources.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchUpdateSubscriptionsRequest} [batchUpdateSubscriptionsRequest] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsBatchUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateSubscriptionsResponse}
     */
    androidpublisherMonetizationSubscriptionsBatchUpdate(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchUpdateSubscriptionsRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsBatchUpdate");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateSubscriptionsResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions:batchUpdate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsCreate operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new subscription. Newly added base plans will remain in draft state until activated.
     * @param {String} packageName Required. The parent app (package name) for which the subscription should be created. Must be equal to the package_name field on the Subscription resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [productId] Required. The ID to use for the subscription. For the requirements on this format, see the documentation of the product_id field on the Subscription resource.
     * @param {String} [regionsVersionVersion] Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.
     * @param {module:model/Subscription} [subscription] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsCreate(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscription'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsCreate");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'productId': opts['productId'],
        'regionsVersion.version': opts['regionsVersionVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsDelete operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a subscription. A subscription can only be deleted if it has never had a base plan published.
     * @param {String} packageName Required. The parent app (package name) of the app of the subscription to delete.
     * @param {String} productId Required. The unique product ID of the subscription to delete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    androidpublisherMonetizationSubscriptionsDelete(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsDelete");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsDelete");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsGet operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads a single subscription.
     * @param {String} packageName Required. The parent app (package name) of the subscription to get.
     * @param {String} productId Required. The unique product ID of the subscription to get.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsGet(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsGet");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsList operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSubscriptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all subscriptions under a given app.
     * @param {String} packageName Required. The parent app (package name) for which the subscriptions should be read.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of subscriptions to return. The service may return fewer than this value. If unspecified, at most 50 subscriptions will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.
     * @param {String} [pageToken] A page token, received from a previous `ListSubscriptions` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListSubscriptions` must match the call that provided the page token.
     * @param {Boolean} [showArchived] Deprecated: subscription archiving is not supported.
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSubscriptionsResponse}
     */
    androidpublisherMonetizationSubscriptionsList(packageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsList");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'showArchived': opts['showArchived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionsResponse;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherMonetizationSubscriptionsPatch operation.
     * @callback module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Subscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing subscription.
     * @param {String} packageName Immutable. Package name of the parent app.
     * @param {String} productId Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [allowMissing] Optional. If set to true, and the subscription with the given package_name and product_id doesn't exist, the subscription will be created. If a new subscription is created, update_mask is ignored.
     * @param {module:model/String} [latencyTolerance] Optional. The latency tolerance for the propagation of this product update. Defaults to latency-sensitive.
     * @param {String} [regionsVersionVersion] Required. A string representing the version of available regions being used for the specified resource. Regional prices for the resource have to be specified according to the information published in [this article](https://support.google.com/googleplay/android-developer/answer/10532353). Each time the supported locations substantially change, the version will be incremented. Using this field will ensure that creating and updating the resource with an older region's version and set of regional prices and currencies will succeed even though a new version is available. The latest version is 2022/02.
     * @param {String} [updateMask] Required. The list of fields to be updated.
     * @param {module:model/Subscription} [subscription] 
     * @param {module:api/MonetizationApi~androidpublisherMonetizationSubscriptionsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Subscription}
     */
    androidpublisherMonetizationSubscriptionsPatch(packageName, productId, opts, callback) {
      opts = opts || {};
      let postBody = opts['subscription'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherMonetizationSubscriptionsPatch");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling androidpublisherMonetizationSubscriptionsPatch");
      }

      let pathParams = {
        'packageName': packageName,
        'productId': productId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'allowMissing': opts['allowMissing'],
        'latencyTolerance': opts['latencyTolerance'],
        'regionsVersion.version': opts['regionsVersionVersion'],
        'updateMask': opts['updateMask']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Subscription;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/subscriptions/{productId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
