/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTargetingRequest from '../model/AddTargetingRequest';
import AppRecoveryAction from '../model/AppRecoveryAction';
import CreateDraftAppRecoveryRequest from '../model/CreateDraftAppRecoveryRequest';

/**
* Apprecovery service.
* @module api/ApprecoveryApi
* @version v3
*/
export default class ApprecoveryApi {

    /**
    * Constructs a new ApprecoveryApi. 
    * @alias module:api/ApprecoveryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the androidpublisherApprecoveryAddTargeting operation.
     * @callback module:api/ApprecoveryApi~androidpublisherApprecoveryAddTargetingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Incrementally update targeting for a recovery action. Note that only the criteria selected during the creation of recovery action can be expanded.
     * @param {String} packageName Required. Package name of the app for which recovery action is to be updated.
     * @param {String} appRecoveryId Required. ID corresponding to the app recovery action.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddTargetingRequest} [addTargetingRequest] 
     * @param {module:api/ApprecoveryApi~androidpublisherApprecoveryAddTargetingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    androidpublisherApprecoveryAddTargeting(packageName, appRecoveryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTargetingRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherApprecoveryAddTargeting");
      }
      // verify the required parameter 'appRecoveryId' is set
      if (appRecoveryId === undefined || appRecoveryId === null) {
        throw new Error("Missing the required parameter 'appRecoveryId' when calling androidpublisherApprecoveryAddTargeting");
      }

      let pathParams = {
        'packageName': packageName,
        'appRecoveryId': appRecoveryId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:addTargeting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherApprecoveryCancel operation.
     * @callback module:api/ApprecoveryApi~androidpublisherApprecoveryCancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an already executing app recovery action. Note that this action changes status of the recovery action to CANCELED.
     * @param {String} packageName Required. Package name of the app for which recovery action cancellation is requested.
     * @param {String} appRecoveryId Required. ID corresponding to the app recovery action.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/ApprecoveryApi~androidpublisherApprecoveryCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    androidpublisherApprecoveryCancel(packageName, appRecoveryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherApprecoveryCancel");
      }
      // verify the required parameter 'appRecoveryId' is set
      if (appRecoveryId === undefined || appRecoveryId === null) {
        throw new Error("Missing the required parameter 'appRecoveryId' when calling androidpublisherApprecoveryCancel");
      }

      let pathParams = {
        'packageName': packageName,
        'appRecoveryId': appRecoveryId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherApprecoveryCreate operation.
     * @callback module:api/ApprecoveryApi~androidpublisherApprecoveryCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppRecoveryAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an app recovery action with recovery status as DRAFT. Note that this action does not execute the recovery action.
     * @param {String} packageName Required. Package name of the app on which recovery action is performed.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CreateDraftAppRecoveryRequest} [createDraftAppRecoveryRequest] 
     * @param {module:api/ApprecoveryApi~androidpublisherApprecoveryCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppRecoveryAction}
     */
    androidpublisherApprecoveryCreate(packageName, opts, callback) {
      opts = opts || {};
      let postBody = opts['createDraftAppRecoveryRequest'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherApprecoveryCreate");
      }

      let pathParams = {
        'packageName': packageName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AppRecoveryAction;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/appRecoveries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the androidpublisherApprecoveryDeploy operation.
     * @callback module:api/ApprecoveryApi~androidpublisherApprecoveryDeployCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy an already created app recovery action with recovery status DRAFT. Note that this action activates the recovery action for all targeted users and changes its status to ACTIVE.
     * @param {String} packageName Required. Package name of the app for which recovery action is deployed.
     * @param {String} appRecoveryId Required. ID corresponding to the app recovery action to deploy.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/ApprecoveryApi~androidpublisherApprecoveryDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    androidpublisherApprecoveryDeploy(packageName, appRecoveryId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'packageName' is set
      if (packageName === undefined || packageName === null) {
        throw new Error("Missing the required parameter 'packageName' when calling androidpublisherApprecoveryDeploy");
      }
      // verify the required parameter 'appRecoveryId' is set
      if (appRecoveryId === undefined || appRecoveryId === null) {
        throw new Error("Missing the required parameter 'appRecoveryId' when calling androidpublisherApprecoveryDeploy");
      }

      let pathParams = {
        'packageName': packageName,
        'appRecoveryId': appRecoveryId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/androidpublisher/v3/applications/{packageName}/appRecoveries/{appRecoveryId}:deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
