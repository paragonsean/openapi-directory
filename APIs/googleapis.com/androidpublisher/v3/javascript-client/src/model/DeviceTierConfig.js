/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceGroup from './DeviceGroup';
import DeviceTierSet from './DeviceTierSet';
import UserCountrySet from './UserCountrySet';

/**
 * The DeviceTierConfig model module.
 * @module model/DeviceTierConfig
 * @version v3
 */
class DeviceTierConfig {
    /**
     * Constructs a new <code>DeviceTierConfig</code>.
     * Configuration describing device targeting criteria for the content of an app.
     * @alias module:model/DeviceTierConfig
     */
    constructor() { 
        
        DeviceTierConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceTierConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceTierConfig} obj Optional instance to populate.
     * @return {module:model/DeviceTierConfig} The populated <code>DeviceTierConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceTierConfig();

            if (data.hasOwnProperty('deviceGroups')) {
                obj['deviceGroups'] = ApiClient.convertToType(data['deviceGroups'], [DeviceGroup]);
            }
            if (data.hasOwnProperty('deviceTierConfigId')) {
                obj['deviceTierConfigId'] = ApiClient.convertToType(data['deviceTierConfigId'], 'String');
            }
            if (data.hasOwnProperty('deviceTierSet')) {
                obj['deviceTierSet'] = DeviceTierSet.constructFromObject(data['deviceTierSet']);
            }
            if (data.hasOwnProperty('userCountrySets')) {
                obj['userCountrySets'] = ApiClient.convertToType(data['userCountrySets'], [UserCountrySet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceTierConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceTierConfig</code>.
     */
    static validateJSON(data) {
        if (data['deviceGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deviceGroups'])) {
                throw new Error("Expected the field `deviceGroups` to be an array in the JSON data but got " + data['deviceGroups']);
            }
            // validate the optional field `deviceGroups` (array)
            for (const item of data['deviceGroups']) {
                DeviceGroup.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['deviceTierConfigId'] && !(typeof data['deviceTierConfigId'] === 'string' || data['deviceTierConfigId'] instanceof String)) {
            throw new Error("Expected the field `deviceTierConfigId` to be a primitive type in the JSON string but got " + data['deviceTierConfigId']);
        }
        // validate the optional field `deviceTierSet`
        if (data['deviceTierSet']) { // data not null
          DeviceTierSet.validateJSON(data['deviceTierSet']);
        }
        if (data['userCountrySets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userCountrySets'])) {
                throw new Error("Expected the field `userCountrySets` to be an array in the JSON data but got " + data['userCountrySets']);
            }
            // validate the optional field `userCountrySets` (array)
            for (const item of data['userCountrySets']) {
                UserCountrySet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Definition of device groups for the app.
 * @member {Array.<module:model/DeviceGroup>} deviceGroups
 */
DeviceTierConfig.prototype['deviceGroups'] = undefined;

/**
 * Output only. The device tier config ID.
 * @member {String} deviceTierConfigId
 */
DeviceTierConfig.prototype['deviceTierConfigId'] = undefined;

/**
 * @member {module:model/DeviceTierSet} deviceTierSet
 */
DeviceTierConfig.prototype['deviceTierSet'] = undefined;

/**
 * Definition of user country sets for the app.
 * @member {Array.<module:model/UserCountrySet>} userCountrySets
 */
DeviceTierConfig.prototype['userCountrySets'] = undefined;






export default DeviceTierConfig;

