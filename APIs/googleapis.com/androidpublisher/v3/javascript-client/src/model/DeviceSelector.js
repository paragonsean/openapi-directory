/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceId from './DeviceId';
import DeviceRam from './DeviceRam';
import SystemFeature from './SystemFeature';

/**
 * The DeviceSelector model module.
 * @module model/DeviceSelector
 * @version v3
 */
class DeviceSelector {
    /**
     * Constructs a new <code>DeviceSelector</code>.
     * Selector for a device group. A selector consists of a set of conditions on the device that should all match (logical AND) to determine a device group eligibility. For instance, if a selector specifies RAM conditions, device model inclusion and device model exclusion, a device is considered to match if: device matches RAM conditions AND device matches one of the included device models AND device doesn&#39;t match excluded device models
     * @alias module:model/DeviceSelector
     */
    constructor() { 
        
        DeviceSelector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceSelector} obj Optional instance to populate.
     * @return {module:model/DeviceSelector} The populated <code>DeviceSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceSelector();

            if (data.hasOwnProperty('deviceRam')) {
                obj['deviceRam'] = DeviceRam.constructFromObject(data['deviceRam']);
            }
            if (data.hasOwnProperty('excludedDeviceIds')) {
                obj['excludedDeviceIds'] = ApiClient.convertToType(data['excludedDeviceIds'], [DeviceId]);
            }
            if (data.hasOwnProperty('forbiddenSystemFeatures')) {
                obj['forbiddenSystemFeatures'] = ApiClient.convertToType(data['forbiddenSystemFeatures'], [SystemFeature]);
            }
            if (data.hasOwnProperty('includedDeviceIds')) {
                obj['includedDeviceIds'] = ApiClient.convertToType(data['includedDeviceIds'], [DeviceId]);
            }
            if (data.hasOwnProperty('requiredSystemFeatures')) {
                obj['requiredSystemFeatures'] = ApiClient.convertToType(data['requiredSystemFeatures'], [SystemFeature]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceSelector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deviceRam`
        if (data['deviceRam']) { // data not null
          DeviceRam.validateJSON(data['deviceRam']);
        }
        if (data['excludedDeviceIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['excludedDeviceIds'])) {
                throw new Error("Expected the field `excludedDeviceIds` to be an array in the JSON data but got " + data['excludedDeviceIds']);
            }
            // validate the optional field `excludedDeviceIds` (array)
            for (const item of data['excludedDeviceIds']) {
                DeviceId.validateJSON(item);
            };
        }
        if (data['forbiddenSystemFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['forbiddenSystemFeatures'])) {
                throw new Error("Expected the field `forbiddenSystemFeatures` to be an array in the JSON data but got " + data['forbiddenSystemFeatures']);
            }
            // validate the optional field `forbiddenSystemFeatures` (array)
            for (const item of data['forbiddenSystemFeatures']) {
                SystemFeature.validateJSON(item);
            };
        }
        if (data['includedDeviceIds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedDeviceIds'])) {
                throw new Error("Expected the field `includedDeviceIds` to be an array in the JSON data but got " + data['includedDeviceIds']);
            }
            // validate the optional field `includedDeviceIds` (array)
            for (const item of data['includedDeviceIds']) {
                DeviceId.validateJSON(item);
            };
        }
        if (data['requiredSystemFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requiredSystemFeatures'])) {
                throw new Error("Expected the field `requiredSystemFeatures` to be an array in the JSON data but got " + data['requiredSystemFeatures']);
            }
            // validate the optional field `requiredSystemFeatures` (array)
            for (const item of data['requiredSystemFeatures']) {
                SystemFeature.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DeviceRam} deviceRam
 */
DeviceSelector.prototype['deviceRam'] = undefined;

/**
 * Device models excluded by this selector, even if they match all other conditions.
 * @member {Array.<module:model/DeviceId>} excludedDeviceIds
 */
DeviceSelector.prototype['excludedDeviceIds'] = undefined;

/**
 * A device that has any of these system features is excluded by this selector, even if it matches all other conditions.
 * @member {Array.<module:model/SystemFeature>} forbiddenSystemFeatures
 */
DeviceSelector.prototype['forbiddenSystemFeatures'] = undefined;

/**
 * Device models included by this selector.
 * @member {Array.<module:model/DeviceId>} includedDeviceIds
 */
DeviceSelector.prototype['includedDeviceIds'] = undefined;

/**
 * A device needs to have all these system features to be included by the selector.
 * @member {Array.<module:model/SystemFeature>} requiredSystemFeatures
 */
DeviceSelector.prototype['requiredSystemFeatures'] = undefined;






export default DeviceSelector;

