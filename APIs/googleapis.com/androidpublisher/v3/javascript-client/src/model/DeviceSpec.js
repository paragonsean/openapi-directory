/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceSpec model module.
 * @module model/DeviceSpec
 * @version v3
 */
class DeviceSpec {
    /**
     * Constructs a new <code>DeviceSpec</code>.
     * The device spec used to generate a system APK.
     * @alias module:model/DeviceSpec
     */
    constructor() { 
        
        DeviceSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceSpec} obj Optional instance to populate.
     * @return {module:model/DeviceSpec} The populated <code>DeviceSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceSpec();

            if (data.hasOwnProperty('screenDensity')) {
                obj['screenDensity'] = ApiClient.convertToType(data['screenDensity'], 'Number');
            }
            if (data.hasOwnProperty('supportedAbis')) {
                obj['supportedAbis'] = ApiClient.convertToType(data['supportedAbis'], ['String']);
            }
            if (data.hasOwnProperty('supportedLocales')) {
                obj['supportedLocales'] = ApiClient.convertToType(data['supportedLocales'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['supportedAbis'])) {
            throw new Error("Expected the field `supportedAbis` to be an array in the JSON data but got " + data['supportedAbis']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedLocales'])) {
            throw new Error("Expected the field `supportedLocales` to be an array in the JSON data but got " + data['supportedLocales']);
        }

        return true;
    }


}



/**
 * Screen dpi.
 * @member {Number} screenDensity
 */
DeviceSpec.prototype['screenDensity'] = undefined;

/**
 * Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. \"armeabi-v7a\", \"x86_64\".
 * @member {Array.<String>} supportedAbis
 */
DeviceSpec.prototype['supportedAbis'] = undefined;

/**
 * All installed locales represented as BCP-47 strings, e.g. \"en-US\".
 * @member {Array.<String>} supportedLocales
 */
DeviceSpec.prototype['supportedLocales'] = undefined;






export default DeviceSpec;

