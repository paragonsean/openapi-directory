/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasePlan from './BasePlan';
import SubscriptionListing from './SubscriptionListing';
import SubscriptionTaxAndComplianceSettings from './SubscriptionTaxAndComplianceSettings';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v3
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * A single subscription for an app.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('basePlans')) {
                obj['basePlans'] = ApiClient.convertToType(data['basePlans'], [BasePlan]);
            }
            if (data.hasOwnProperty('listings')) {
                obj['listings'] = ApiClient.convertToType(data['listings'], [SubscriptionListing]);
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('taxAndComplianceSettings')) {
                obj['taxAndComplianceSettings'] = SubscriptionTaxAndComplianceSettings.constructFromObject(data['taxAndComplianceSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        if (data['basePlans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['basePlans'])) {
                throw new Error("Expected the field `basePlans` to be an array in the JSON data but got " + data['basePlans']);
            }
            // validate the optional field `basePlans` (array)
            for (const item of data['basePlans']) {
                BasePlan.validateJSON(item);
            };
        }
        if (data['listings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listings'])) {
                throw new Error("Expected the field `listings` to be an array in the JSON data but got " + data['listings']);
            }
            // validate the optional field `listings` (array)
            for (const item of data['listings']) {
                SubscriptionListing.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // validate the optional field `taxAndComplianceSettings`
        if (data['taxAndComplianceSettings']) { // data not null
          SubscriptionTaxAndComplianceSettings.validateJSON(data['taxAndComplianceSettings']);
        }

        return true;
    }


}



/**
 * Output only. Deprecated: subscription archiving is not supported.
 * @member {Boolean} archived
 */
Subscription.prototype['archived'] = undefined;

/**
 * The set of base plans for this subscription. Represents the prices and duration of the subscription if no other offers apply.
 * @member {Array.<module:model/BasePlan>} basePlans
 */
Subscription.prototype['basePlans'] = undefined;

/**
 * Required. List of localized listings for this subscription. Must contain at least an entry for the default language of the parent app.
 * @member {Array.<module:model/SubscriptionListing>} listings
 */
Subscription.prototype['listings'] = undefined;

/**
 * Immutable. Package name of the parent app.
 * @member {String} packageName
 */
Subscription.prototype['packageName'] = undefined;

/**
 * Immutable. Unique product ID of the product. Unique within the parent app. Product IDs must be composed of lower-case letters (a-z), numbers (0-9), underscores (_) and dots (.). It must start with a lower-case letter or number, and be between 1 and 40 (inclusive) characters in length.
 * @member {String} productId
 */
Subscription.prototype['productId'] = undefined;

/**
 * @member {module:model/SubscriptionTaxAndComplianceSettings} taxAndComplianceSettings
 */
Subscription.prototype['taxAndComplianceSettings'] = undefined;






export default Subscription;

