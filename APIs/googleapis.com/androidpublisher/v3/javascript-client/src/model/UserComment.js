/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceMetadata from './DeviceMetadata';
import Timestamp from './Timestamp';

/**
 * The UserComment model module.
 * @module model/UserComment
 * @version v3
 */
class UserComment {
    /**
     * Constructs a new <code>UserComment</code>.
     * User entry from conversation between user and developer.
     * @alias module:model/UserComment
     */
    constructor() { 
        
        UserComment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserComment} obj Optional instance to populate.
     * @return {module:model/UserComment} The populated <code>UserComment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserComment();

            if (data.hasOwnProperty('androidOsVersion')) {
                obj['androidOsVersion'] = ApiClient.convertToType(data['androidOsVersion'], 'Number');
            }
            if (data.hasOwnProperty('appVersionCode')) {
                obj['appVersionCode'] = ApiClient.convertToType(data['appVersionCode'], 'Number');
            }
            if (data.hasOwnProperty('appVersionName')) {
                obj['appVersionName'] = ApiClient.convertToType(data['appVersionName'], 'String');
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = ApiClient.convertToType(data['device'], 'String');
            }
            if (data.hasOwnProperty('deviceMetadata')) {
                obj['deviceMetadata'] = DeviceMetadata.constructFromObject(data['deviceMetadata']);
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = Timestamp.constructFromObject(data['lastModified']);
            }
            if (data.hasOwnProperty('originalText')) {
                obj['originalText'] = ApiClient.convertToType(data['originalText'], 'String');
            }
            if (data.hasOwnProperty('reviewerLanguage')) {
                obj['reviewerLanguage'] = ApiClient.convertToType(data['reviewerLanguage'], 'String');
            }
            if (data.hasOwnProperty('starRating')) {
                obj['starRating'] = ApiClient.convertToType(data['starRating'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thumbsDownCount')) {
                obj['thumbsDownCount'] = ApiClient.convertToType(data['thumbsDownCount'], 'Number');
            }
            if (data.hasOwnProperty('thumbsUpCount')) {
                obj['thumbsUpCount'] = ApiClient.convertToType(data['thumbsUpCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserComment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserComment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appVersionName'] && !(typeof data['appVersionName'] === 'string' || data['appVersionName'] instanceof String)) {
            throw new Error("Expected the field `appVersionName` to be a primitive type in the JSON string but got " + data['appVersionName']);
        }
        // ensure the json data is a string
        if (data['device'] && !(typeof data['device'] === 'string' || data['device'] instanceof String)) {
            throw new Error("Expected the field `device` to be a primitive type in the JSON string but got " + data['device']);
        }
        // validate the optional field `deviceMetadata`
        if (data['deviceMetadata']) { // data not null
          DeviceMetadata.validateJSON(data['deviceMetadata']);
        }
        // validate the optional field `lastModified`
        if (data['lastModified']) { // data not null
          Timestamp.validateJSON(data['lastModified']);
        }
        // ensure the json data is a string
        if (data['originalText'] && !(typeof data['originalText'] === 'string' || data['originalText'] instanceof String)) {
            throw new Error("Expected the field `originalText` to be a primitive type in the JSON string but got " + data['originalText']);
        }
        // ensure the json data is a string
        if (data['reviewerLanguage'] && !(typeof data['reviewerLanguage'] === 'string' || data['reviewerLanguage'] instanceof String)) {
            throw new Error("Expected the field `reviewerLanguage` to be a primitive type in the JSON string but got " + data['reviewerLanguage']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Integer Android SDK version of the user's device at the time the review was written, e.g. 23 is Marshmallow. May be absent.
 * @member {Number} androidOsVersion
 */
UserComment.prototype['androidOsVersion'] = undefined;

/**
 * Integer version code of the app as installed at the time the review was written. May be absent.
 * @member {Number} appVersionCode
 */
UserComment.prototype['appVersionCode'] = undefined;

/**
 * String version name of the app as installed at the time the review was written. May be absent.
 * @member {String} appVersionName
 */
UserComment.prototype['appVersionName'] = undefined;

/**
 * Codename for the reviewer's device, e.g. klte, flounder. May be absent.
 * @member {String} device
 */
UserComment.prototype['device'] = undefined;

/**
 * @member {module:model/DeviceMetadata} deviceMetadata
 */
UserComment.prototype['deviceMetadata'] = undefined;

/**
 * @member {module:model/Timestamp} lastModified
 */
UserComment.prototype['lastModified'] = undefined;

/**
 * Untranslated text of the review, where the review was translated. If the review was not translated this is left blank.
 * @member {String} originalText
 */
UserComment.prototype['originalText'] = undefined;

/**
 * Language code for the reviewer. This is taken from the device settings so is not guaranteed to match the language the review is written in. May be absent.
 * @member {String} reviewerLanguage
 */
UserComment.prototype['reviewerLanguage'] = undefined;

/**
 * The star rating associated with the review, from 1 to 5.
 * @member {Number} starRating
 */
UserComment.prototype['starRating'] = undefined;

/**
 * The content of the comment, i.e. review body. In some cases users have been able to write a review with separate title and body; in those cases the title and body are concatenated and separated by a tab character.
 * @member {String} text
 */
UserComment.prototype['text'] = undefined;

/**
 * Number of users who have given this review a thumbs down.
 * @member {Number} thumbsDownCount
 */
UserComment.prototype['thumbsDownCount'] = undefined;

/**
 * Number of users who have given this review a thumbs up.
 * @member {Number} thumbsUpCount
 */
UserComment.prototype['thumbsUpCount'] = undefined;






export default UserComment;

