/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextureCompressionFormat model module.
 * @module model/TextureCompressionFormat
 * @version v3
 */
class TextureCompressionFormat {
    /**
     * Constructs a new <code>TextureCompressionFormat</code>.
     * Represents texture compression format.
     * @alias module:model/TextureCompressionFormat
     */
    constructor() { 
        
        TextureCompressionFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextureCompressionFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextureCompressionFormat} obj Optional instance to populate.
     * @return {module:model/TextureCompressionFormat} The populated <code>TextureCompressionFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextureCompressionFormat();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextureCompressionFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextureCompressionFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }

        return true;
    }


}



/**
 * Alias for texture compression format.
 * @member {module:model/TextureCompressionFormat.AliasEnum} alias
 */
TextureCompressionFormat.prototype['alias'] = undefined;





/**
 * Allowed values for the <code>alias</code> property.
 * @enum {String}
 * @readonly
 */
TextureCompressionFormat['AliasEnum'] = {

    /**
     * value: "UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT"
     * @const
     */
    "UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT": "UNSPECIFIED_TEXTURE_COMPRESSION_FORMAT",

    /**
     * value: "ETC1_RGB8"
     * @const
     */
    "ETC1_RGB8": "ETC1_RGB8",

    /**
     * value: "PALETTED"
     * @const
     */
    "PALETTED": "PALETTED",

    /**
     * value: "THREE_DC"
     * @const
     */
    "THREE_DC": "THREE_DC",

    /**
     * value: "ATC"
     * @const
     */
    "ATC": "ATC",

    /**
     * value: "LATC"
     * @const
     */
    "LATC": "LATC",

    /**
     * value: "DXT1"
     * @const
     */
    "DXT1": "DXT1",

    /**
     * value: "S3TC"
     * @const
     */
    "S3TC": "S3TC",

    /**
     * value: "PVRTC"
     * @const
     */
    "PVRTC": "PVRTC",

    /**
     * value: "ASTC"
     * @const
     */
    "ASTC": "ASTC",

    /**
     * value: "ETC2"
     * @const
     */
    "ETC2": "ETC2"
};



export default TextureCompressionFormat;

