/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscribeWithGoogleInfo model module.
 * @module model/SubscribeWithGoogleInfo
 * @version v3
 */
class SubscribeWithGoogleInfo {
    /**
     * Constructs a new <code>SubscribeWithGoogleInfo</code>.
     * Information associated with purchases made with &#39;Subscribe with Google&#39;.
     * @alias module:model/SubscribeWithGoogleInfo
     */
    constructor() { 
        
        SubscribeWithGoogleInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscribeWithGoogleInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscribeWithGoogleInfo} obj Optional instance to populate.
     * @return {module:model/SubscribeWithGoogleInfo} The populated <code>SubscribeWithGoogleInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscribeWithGoogleInfo();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('givenName')) {
                obj['givenName'] = ApiClient.convertToType(data['givenName'], 'String');
            }
            if (data.hasOwnProperty('profileId')) {
                obj['profileId'] = ApiClient.convertToType(data['profileId'], 'String');
            }
            if (data.hasOwnProperty('profileName')) {
                obj['profileName'] = ApiClient.convertToType(data['profileName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscribeWithGoogleInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscribeWithGoogleInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is a string
        if (data['givenName'] && !(typeof data['givenName'] === 'string' || data['givenName'] instanceof String)) {
            throw new Error("Expected the field `givenName` to be a primitive type in the JSON string but got " + data['givenName']);
        }
        // ensure the json data is a string
        if (data['profileId'] && !(typeof data['profileId'] === 'string' || data['profileId'] instanceof String)) {
            throw new Error("Expected the field `profileId` to be a primitive type in the JSON string but got " + data['profileId']);
        }
        // ensure the json data is a string
        if (data['profileName'] && !(typeof data['profileName'] === 'string' || data['profileName'] instanceof String)) {
            throw new Error("Expected the field `profileName` to be a primitive type in the JSON string but got " + data['profileName']);
        }

        return true;
    }


}



/**
 * The email address of the user when the subscription was purchased.
 * @member {String} emailAddress
 */
SubscribeWithGoogleInfo.prototype['emailAddress'] = undefined;

/**
 * The family name of the user when the subscription was purchased.
 * @member {String} familyName
 */
SubscribeWithGoogleInfo.prototype['familyName'] = undefined;

/**
 * The given name of the user when the subscription was purchased.
 * @member {String} givenName
 */
SubscribeWithGoogleInfo.prototype['givenName'] = undefined;

/**
 * The Google profile id of the user when the subscription was purchased.
 * @member {String} profileId
 */
SubscribeWithGoogleInfo.prototype['profileId'] = undefined;

/**
 * The profile name of the user when the subscription was purchased.
 * @member {String} profileName
 */
SubscribeWithGoogleInfo.prototype['profileName'] = undefined;






export default SubscribeWithGoogleInfo;

