/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CanceledStateContext from './CanceledStateContext';
import ExternalAccountIdentifiers from './ExternalAccountIdentifiers';
import PausedStateContext from './PausedStateContext';
import SubscribeWithGoogleInfo from './SubscribeWithGoogleInfo';
import SubscriptionPurchaseLineItem from './SubscriptionPurchaseLineItem';

/**
 * The SubscriptionPurchaseV2 model module.
 * @module model/SubscriptionPurchaseV2
 * @version v3
 */
class SubscriptionPurchaseV2 {
    /**
     * Constructs a new <code>SubscriptionPurchaseV2</code>.
     * Indicates the status of a user&#39;s subscription purchase.
     * @alias module:model/SubscriptionPurchaseV2
     */
    constructor() { 
        
        SubscriptionPurchaseV2.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionPurchaseV2</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionPurchaseV2} obj Optional instance to populate.
     * @return {module:model/SubscriptionPurchaseV2} The populated <code>SubscriptionPurchaseV2</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionPurchaseV2();

            if (data.hasOwnProperty('acknowledgementState')) {
                obj['acknowledgementState'] = ApiClient.convertToType(data['acknowledgementState'], 'String');
            }
            if (data.hasOwnProperty('canceledStateContext')) {
                obj['canceledStateContext'] = CanceledStateContext.constructFromObject(data['canceledStateContext']);
            }
            if (data.hasOwnProperty('externalAccountIdentifiers')) {
                obj['externalAccountIdentifiers'] = ExternalAccountIdentifiers.constructFromObject(data['externalAccountIdentifiers']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('latestOrderId')) {
                obj['latestOrderId'] = ApiClient.convertToType(data['latestOrderId'], 'String');
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [SubscriptionPurchaseLineItem]);
            }
            if (data.hasOwnProperty('linkedPurchaseToken')) {
                obj['linkedPurchaseToken'] = ApiClient.convertToType(data['linkedPurchaseToken'], 'String');
            }
            if (data.hasOwnProperty('pausedStateContext')) {
                obj['pausedStateContext'] = PausedStateContext.constructFromObject(data['pausedStateContext']);
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('subscribeWithGoogleInfo')) {
                obj['subscribeWithGoogleInfo'] = SubscribeWithGoogleInfo.constructFromObject(data['subscribeWithGoogleInfo']);
            }
            if (data.hasOwnProperty('subscriptionState')) {
                obj['subscriptionState'] = ApiClient.convertToType(data['subscriptionState'], 'String');
            }
            if (data.hasOwnProperty('testPurchase')) {
                obj['testPurchase'] = ApiClient.convertToType(data['testPurchase'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionPurchaseV2</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionPurchaseV2</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acknowledgementState'] && !(typeof data['acknowledgementState'] === 'string' || data['acknowledgementState'] instanceof String)) {
            throw new Error("Expected the field `acknowledgementState` to be a primitive type in the JSON string but got " + data['acknowledgementState']);
        }
        // validate the optional field `canceledStateContext`
        if (data['canceledStateContext']) { // data not null
          CanceledStateContext.validateJSON(data['canceledStateContext']);
        }
        // validate the optional field `externalAccountIdentifiers`
        if (data['externalAccountIdentifiers']) { // data not null
          ExternalAccountIdentifiers.validateJSON(data['externalAccountIdentifiers']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['latestOrderId'] && !(typeof data['latestOrderId'] === 'string' || data['latestOrderId'] instanceof String)) {
            throw new Error("Expected the field `latestOrderId` to be a primitive type in the JSON string but got " + data['latestOrderId']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                SubscriptionPurchaseLineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['linkedPurchaseToken'] && !(typeof data['linkedPurchaseToken'] === 'string' || data['linkedPurchaseToken'] instanceof String)) {
            throw new Error("Expected the field `linkedPurchaseToken` to be a primitive type in the JSON string but got " + data['linkedPurchaseToken']);
        }
        // validate the optional field `pausedStateContext`
        if (data['pausedStateContext']) { // data not null
          PausedStateContext.validateJSON(data['pausedStateContext']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `subscribeWithGoogleInfo`
        if (data['subscribeWithGoogleInfo']) { // data not null
          SubscribeWithGoogleInfo.validateJSON(data['subscribeWithGoogleInfo']);
        }
        // ensure the json data is a string
        if (data['subscriptionState'] && !(typeof data['subscriptionState'] === 'string' || data['subscriptionState'] instanceof String)) {
            throw new Error("Expected the field `subscriptionState` to be a primitive type in the JSON string but got " + data['subscriptionState']);
        }

        return true;
    }


}



/**
 * The acknowledgement state of the subscription.
 * @member {module:model/SubscriptionPurchaseV2.AcknowledgementStateEnum} acknowledgementState
 */
SubscriptionPurchaseV2.prototype['acknowledgementState'] = undefined;

/**
 * @member {module:model/CanceledStateContext} canceledStateContext
 */
SubscriptionPurchaseV2.prototype['canceledStateContext'] = undefined;

/**
 * @member {module:model/ExternalAccountIdentifiers} externalAccountIdentifiers
 */
SubscriptionPurchaseV2.prototype['externalAccountIdentifiers'] = undefined;

/**
 * This kind represents a SubscriptionPurchaseV2 object in the androidpublisher service.
 * @member {String} kind
 */
SubscriptionPurchaseV2.prototype['kind'] = undefined;

/**
 * The order id of the latest order associated with the purchase of the subscription. For autoRenewing subscription, this is the order id of signup order if it is not renewed yet, or the last recurring order id (success, pending, or declined order). For prepaid subscription, this is the order id associated with the queried purchase token.
 * @member {String} latestOrderId
 */
SubscriptionPurchaseV2.prototype['latestOrderId'] = undefined;

/**
 * Item-level info for a subscription purchase. The items in the same purchase should be either all with AutoRenewingPlan or all with PrepaidPlan.
 * @member {Array.<module:model/SubscriptionPurchaseLineItem>} lineItems
 */
SubscriptionPurchaseV2.prototype['lineItems'] = undefined;

/**
 * The purchase token of the old subscription if this subscription is one of the following: * Re-signup of a canceled but non-lapsed subscription * Upgrade/downgrade from a previous subscription. * Convert from prepaid to auto renewing subscription. * Convert from an auto renewing subscription to prepaid. * Topup a prepaid subscription.
 * @member {String} linkedPurchaseToken
 */
SubscriptionPurchaseV2.prototype['linkedPurchaseToken'] = undefined;

/**
 * @member {module:model/PausedStateContext} pausedStateContext
 */
SubscriptionPurchaseV2.prototype['pausedStateContext'] = undefined;

/**
 * ISO 3166-1 alpha-2 billing country/region code of the user at the time the subscription was granted.
 * @member {String} regionCode
 */
SubscriptionPurchaseV2.prototype['regionCode'] = undefined;

/**
 * Time at which the subscription was granted. Not set for pending subscriptions (subscription was created but awaiting payment during signup).
 * @member {String} startTime
 */
SubscriptionPurchaseV2.prototype['startTime'] = undefined;

/**
 * @member {module:model/SubscribeWithGoogleInfo} subscribeWithGoogleInfo
 */
SubscriptionPurchaseV2.prototype['subscribeWithGoogleInfo'] = undefined;

/**
 * The current state of the subscription.
 * @member {module:model/SubscriptionPurchaseV2.SubscriptionStateEnum} subscriptionState
 */
SubscriptionPurchaseV2.prototype['subscriptionState'] = undefined;

/**
 * Whether this subscription purchase is a test purchase.
 * @member {Object} testPurchase
 */
SubscriptionPurchaseV2.prototype['testPurchase'] = undefined;





/**
 * Allowed values for the <code>acknowledgementState</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionPurchaseV2['AcknowledgementStateEnum'] = {

    /**
     * value: "ACKNOWLEDGEMENT_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ACKNOWLEDGEMENT_STATE_UNSPECIFIED",

    /**
     * value: "ACKNOWLEDGEMENT_STATE_PENDING"
     * @const
     */
    "PENDING": "ACKNOWLEDGEMENT_STATE_PENDING",

    /**
     * value: "ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED"
     * @const
     */
    "ACKNOWLEDGED": "ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED"
};


/**
 * Allowed values for the <code>subscriptionState</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionPurchaseV2['SubscriptionStateEnum'] = {

    /**
     * value: "SUBSCRIPTION_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SUBSCRIPTION_STATE_UNSPECIFIED",

    /**
     * value: "SUBSCRIPTION_STATE_PENDING"
     * @const
     */
    "PENDING": "SUBSCRIPTION_STATE_PENDING",

    /**
     * value: "SUBSCRIPTION_STATE_ACTIVE"
     * @const
     */
    "ACTIVE": "SUBSCRIPTION_STATE_ACTIVE",

    /**
     * value: "SUBSCRIPTION_STATE_PAUSED"
     * @const
     */
    "PAUSED": "SUBSCRIPTION_STATE_PAUSED",

    /**
     * value: "SUBSCRIPTION_STATE_IN_GRACE_PERIOD"
     * @const
     */
    "IN_GRACE_PERIOD": "SUBSCRIPTION_STATE_IN_GRACE_PERIOD",

    /**
     * value: "SUBSCRIPTION_STATE_ON_HOLD"
     * @const
     */
    "ON_HOLD": "SUBSCRIPTION_STATE_ON_HOLD",

    /**
     * value: "SUBSCRIPTION_STATE_CANCELED"
     * @const
     */
    "CANCELED": "SUBSCRIPTION_STATE_CANCELED",

    /**
     * value: "SUBSCRIPTION_STATE_EXPIRED"
     * @const
     */
    "EXPIRED": "SUBSCRIPTION_STATE_EXPIRED"
};



export default SubscriptionPurchaseV2;

