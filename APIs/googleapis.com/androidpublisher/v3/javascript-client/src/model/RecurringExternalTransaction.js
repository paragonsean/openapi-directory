/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalSubscription from './ExternalSubscription';

/**
 * The RecurringExternalTransaction model module.
 * @module model/RecurringExternalTransaction
 * @version v3
 */
class RecurringExternalTransaction {
    /**
     * Constructs a new <code>RecurringExternalTransaction</code>.
     * Represents a transaction that is part of a recurring series of payments. This can be a subscription or a one-time product with multiple payments (such as preorder).
     * @alias module:model/RecurringExternalTransaction
     */
    constructor() { 
        
        RecurringExternalTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecurringExternalTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringExternalTransaction} obj Optional instance to populate.
     * @return {module:model/RecurringExternalTransaction} The populated <code>RecurringExternalTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringExternalTransaction();

            if (data.hasOwnProperty('externalSubscription')) {
                obj['externalSubscription'] = ExternalSubscription.constructFromObject(data['externalSubscription']);
            }
            if (data.hasOwnProperty('externalTransactionToken')) {
                obj['externalTransactionToken'] = ApiClient.convertToType(data['externalTransactionToken'], 'String');
            }
            if (data.hasOwnProperty('initialExternalTransactionId')) {
                obj['initialExternalTransactionId'] = ApiClient.convertToType(data['initialExternalTransactionId'], 'String');
            }
            if (data.hasOwnProperty('migratedTransactionProgram')) {
                obj['migratedTransactionProgram'] = ApiClient.convertToType(data['migratedTransactionProgram'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringExternalTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringExternalTransaction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `externalSubscription`
        if (data['externalSubscription']) { // data not null
          ExternalSubscription.validateJSON(data['externalSubscription']);
        }
        // ensure the json data is a string
        if (data['externalTransactionToken'] && !(typeof data['externalTransactionToken'] === 'string' || data['externalTransactionToken'] instanceof String)) {
            throw new Error("Expected the field `externalTransactionToken` to be a primitive type in the JSON string but got " + data['externalTransactionToken']);
        }
        // ensure the json data is a string
        if (data['initialExternalTransactionId'] && !(typeof data['initialExternalTransactionId'] === 'string' || data['initialExternalTransactionId'] instanceof String)) {
            throw new Error("Expected the field `initialExternalTransactionId` to be a primitive type in the JSON string but got " + data['initialExternalTransactionId']);
        }
        // ensure the json data is a string
        if (data['migratedTransactionProgram'] && !(typeof data['migratedTransactionProgram'] === 'string' || data['migratedTransactionProgram'] instanceof String)) {
            throw new Error("Expected the field `migratedTransactionProgram` to be a primitive type in the JSON string but got " + data['migratedTransactionProgram']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExternalSubscription} externalSubscription
 */
RecurringExternalTransaction.prototype['externalSubscription'] = undefined;

/**
 * Input only. Provided during the call to Create. Retrieved from the client when the alternative billing flow is launched. Required only for the initial purchase.
 * @member {String} externalTransactionToken
 */
RecurringExternalTransaction.prototype['externalTransactionToken'] = undefined;

/**
 * The external transaction id of the first transaction of this recurring series of transactions. For example, for a subscription this would be the transaction id of the first payment. Required when creating recurring external transactions.
 * @member {String} initialExternalTransactionId
 */
RecurringExternalTransaction.prototype['initialExternalTransactionId'] = undefined;

/**
 * Input only. Provided during the call to Create. Must only be used when migrating a subscription from manual monthly reporting to automated reporting.
 * @member {module:model/RecurringExternalTransaction.MigratedTransactionProgramEnum} migratedTransactionProgram
 */
RecurringExternalTransaction.prototype['migratedTransactionProgram'] = undefined;





/**
 * Allowed values for the <code>migratedTransactionProgram</code> property.
 * @enum {String}
 * @readonly
 */
RecurringExternalTransaction['MigratedTransactionProgramEnum'] = {

    /**
     * value: "EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED"
     * @const
     */
    "EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED": "EXTERNAL_TRANSACTION_PROGRAM_UNSPECIFIED",

    /**
     * value: "USER_CHOICE_BILLING"
     * @const
     */
    "USER_CHOICE_BILLING": "USER_CHOICE_BILLING",

    /**
     * value: "ALTERTNATIVE_BILLING_ONLY"
     * @const
     */
    "ALTERTNATIVE_BILLING_ONLY": "ALTERTNATIVE_BILLING_ONLY"
};



export default RecurringExternalTransaction;

