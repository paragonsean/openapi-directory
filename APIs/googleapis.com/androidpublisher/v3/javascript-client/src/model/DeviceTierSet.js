/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceTier from './DeviceTier';

/**
 * The DeviceTierSet model module.
 * @module model/DeviceTierSet
 * @version v3
 */
class DeviceTierSet {
    /**
     * Constructs a new <code>DeviceTierSet</code>.
     * A set of device tiers. A tier set determines what variation of app content gets served to a specific device, for device-targeted content. You should assign a priority level to each tier, which determines the ordering by which they are evaluated by Play. See the documentation of DeviceTier.level for more details.
     * @alias module:model/DeviceTierSet
     */
    constructor() { 
        
        DeviceTierSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceTierSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceTierSet} obj Optional instance to populate.
     * @return {module:model/DeviceTierSet} The populated <code>DeviceTierSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceTierSet();

            if (data.hasOwnProperty('deviceTiers')) {
                obj['deviceTiers'] = ApiClient.convertToType(data['deviceTiers'], [DeviceTier]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceTierSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceTierSet</code>.
     */
    static validateJSON(data) {
        if (data['deviceTiers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deviceTiers'])) {
                throw new Error("Expected the field `deviceTiers` to be an array in the JSON data but got " + data['deviceTiers']);
            }
            // validate the optional field `deviceTiers` (array)
            for (const item of data['deviceTiers']) {
                DeviceTier.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Device tiers belonging to the set.
 * @member {Array.<module:model/DeviceTier>} deviceTiers
 */
DeviceTierSet.prototype['deviceTiers'] = undefined;






export default DeviceTierSet;

