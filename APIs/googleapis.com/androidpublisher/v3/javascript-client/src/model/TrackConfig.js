/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrackConfig model module.
 * @module model/TrackConfig
 * @version v3
 */
class TrackConfig {
    /**
     * Constructs a new <code>TrackConfig</code>.
     * Configurations of the new track.
     * @alias module:model/TrackConfig
     */
    constructor() { 
        
        TrackConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TrackConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackConfig} obj Optional instance to populate.
     * @return {module:model/TrackConfig} The populated <code>TrackConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackConfig();

            if (data.hasOwnProperty('formFactor')) {
                obj['formFactor'] = ApiClient.convertToType(data['formFactor'], 'String');
            }
            if (data.hasOwnProperty('track')) {
                obj['track'] = ApiClient.convertToType(data['track'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formFactor'] && !(typeof data['formFactor'] === 'string' || data['formFactor'] instanceof String)) {
            throw new Error("Expected the field `formFactor` to be a primitive type in the JSON string but got " + data['formFactor']);
        }
        // ensure the json data is a string
        if (data['track'] && !(typeof data['track'] === 'string' || data['track'] instanceof String)) {
            throw new Error("Expected the field `track` to be a primitive type in the JSON string but got " + data['track']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Required. Form factor of the new track. Defaults to the default track.
 * @member {module:model/TrackConfig.FormFactorEnum} formFactor
 */
TrackConfig.prototype['formFactor'] = undefined;

/**
 * Required. Identifier of the new track. For default tracks, this field consists of the track alias only. Form factor tracks have a special prefix as an identifier, for example `wear:production`, `automotive:production`. This prefix must match the value of the `form_factor` field, if it is not a default track. [More on track name](https://developers.google.com/android-publisher/tracks#ff-track-name)
 * @member {String} track
 */
TrackConfig.prototype['track'] = undefined;

/**
 * Required. Type of the new track. Currently, the only supported value is closedTesting.
 * @member {module:model/TrackConfig.TypeEnum} type
 */
TrackConfig.prototype['type'] = undefined;





/**
 * Allowed values for the <code>formFactor</code> property.
 * @enum {String}
 * @readonly
 */
TrackConfig['FormFactorEnum'] = {

    /**
     * value: "FORM_FACTOR_UNSPECIFIED"
     * @const
     */
    "FORM_FACTOR_UNSPECIFIED": "FORM_FACTOR_UNSPECIFIED",

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "WEAR"
     * @const
     */
    "WEAR": "WEAR",

    /**
     * value: "AUTOMOTIVE"
     * @const
     */
    "AUTOMOTIVE": "AUTOMOTIVE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TrackConfig['TypeEnum'] = {

    /**
     * value: "TRACK_TYPE_UNSPECIFIED"
     * @const
     */
    "TRACK_TYPE_UNSPECIFIED": "TRACK_TYPE_UNSPECIFIED",

    /**
     * value: "CLOSED_TESTING"
     * @const
     */
    "CLOSED_TESTING": "CLOSED_TESTING"
};



export default TrackConfig;

