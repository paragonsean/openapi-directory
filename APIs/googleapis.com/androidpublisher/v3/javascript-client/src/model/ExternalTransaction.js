/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExternalTransactionAddress from './ExternalTransactionAddress';
import OneTimeExternalTransaction from './OneTimeExternalTransaction';
import Price from './Price';
import RecurringExternalTransaction from './RecurringExternalTransaction';

/**
 * The ExternalTransaction model module.
 * @module model/ExternalTransaction
 * @version v3
 */
class ExternalTransaction {
    /**
     * Constructs a new <code>ExternalTransaction</code>.
     * The details of an external transaction.
     * @alias module:model/ExternalTransaction
     */
    constructor() { 
        
        ExternalTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExternalTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExternalTransaction} obj Optional instance to populate.
     * @return {module:model/ExternalTransaction} The populated <code>ExternalTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExternalTransaction();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('currentPreTaxAmount')) {
                obj['currentPreTaxAmount'] = Price.constructFromObject(data['currentPreTaxAmount']);
            }
            if (data.hasOwnProperty('currentTaxAmount')) {
                obj['currentTaxAmount'] = Price.constructFromObject(data['currentTaxAmount']);
            }
            if (data.hasOwnProperty('externalTransactionId')) {
                obj['externalTransactionId'] = ApiClient.convertToType(data['externalTransactionId'], 'String');
            }
            if (data.hasOwnProperty('oneTimeTransaction')) {
                obj['oneTimeTransaction'] = OneTimeExternalTransaction.constructFromObject(data['oneTimeTransaction']);
            }
            if (data.hasOwnProperty('originalPreTaxAmount')) {
                obj['originalPreTaxAmount'] = Price.constructFromObject(data['originalPreTaxAmount']);
            }
            if (data.hasOwnProperty('originalTaxAmount')) {
                obj['originalTaxAmount'] = Price.constructFromObject(data['originalTaxAmount']);
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('recurringTransaction')) {
                obj['recurringTransaction'] = RecurringExternalTransaction.constructFromObject(data['recurringTransaction']);
            }
            if (data.hasOwnProperty('testPurchase')) {
                obj['testPurchase'] = ApiClient.convertToType(data['testPurchase'], Object);
            }
            if (data.hasOwnProperty('transactionState')) {
                obj['transactionState'] = ApiClient.convertToType(data['transactionState'], 'String');
            }
            if (data.hasOwnProperty('transactionTime')) {
                obj['transactionTime'] = ApiClient.convertToType(data['transactionTime'], 'String');
            }
            if (data.hasOwnProperty('userTaxAddress')) {
                obj['userTaxAddress'] = ExternalTransactionAddress.constructFromObject(data['userTaxAddress']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExternalTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExternalTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // validate the optional field `currentPreTaxAmount`
        if (data['currentPreTaxAmount']) { // data not null
          Price.validateJSON(data['currentPreTaxAmount']);
        }
        // validate the optional field `currentTaxAmount`
        if (data['currentTaxAmount']) { // data not null
          Price.validateJSON(data['currentTaxAmount']);
        }
        // ensure the json data is a string
        if (data['externalTransactionId'] && !(typeof data['externalTransactionId'] === 'string' || data['externalTransactionId'] instanceof String)) {
            throw new Error("Expected the field `externalTransactionId` to be a primitive type in the JSON string but got " + data['externalTransactionId']);
        }
        // validate the optional field `oneTimeTransaction`
        if (data['oneTimeTransaction']) { // data not null
          OneTimeExternalTransaction.validateJSON(data['oneTimeTransaction']);
        }
        // validate the optional field `originalPreTaxAmount`
        if (data['originalPreTaxAmount']) { // data not null
          Price.validateJSON(data['originalPreTaxAmount']);
        }
        // validate the optional field `originalTaxAmount`
        if (data['originalTaxAmount']) { // data not null
          Price.validateJSON(data['originalTaxAmount']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        // validate the optional field `recurringTransaction`
        if (data['recurringTransaction']) { // data not null
          RecurringExternalTransaction.validateJSON(data['recurringTransaction']);
        }
        // ensure the json data is a string
        if (data['transactionState'] && !(typeof data['transactionState'] === 'string' || data['transactionState'] instanceof String)) {
            throw new Error("Expected the field `transactionState` to be a primitive type in the JSON string but got " + data['transactionState']);
        }
        // ensure the json data is a string
        if (data['transactionTime'] && !(typeof data['transactionTime'] === 'string' || data['transactionTime'] instanceof String)) {
            throw new Error("Expected the field `transactionTime` to be a primitive type in the JSON string but got " + data['transactionTime']);
        }
        // validate the optional field `userTaxAddress`
        if (data['userTaxAddress']) { // data not null
          ExternalTransactionAddress.validateJSON(data['userTaxAddress']);
        }

        return true;
    }


}



/**
 * Output only. The time when this transaction was created. This is the time when Google was notified of the transaction.
 * @member {String} createTime
 */
ExternalTransaction.prototype['createTime'] = undefined;

/**
 * @member {module:model/Price} currentPreTaxAmount
 */
ExternalTransaction.prototype['currentPreTaxAmount'] = undefined;

/**
 * @member {module:model/Price} currentTaxAmount
 */
ExternalTransaction.prototype['currentTaxAmount'] = undefined;

/**
 * Output only. The id of this transaction. All transaction ids under the same package name must be unique. Set when creating the external transaction.
 * @member {String} externalTransactionId
 */
ExternalTransaction.prototype['externalTransactionId'] = undefined;

/**
 * @member {module:model/OneTimeExternalTransaction} oneTimeTransaction
 */
ExternalTransaction.prototype['oneTimeTransaction'] = undefined;

/**
 * @member {module:model/Price} originalPreTaxAmount
 */
ExternalTransaction.prototype['originalPreTaxAmount'] = undefined;

/**
 * @member {module:model/Price} originalTaxAmount
 */
ExternalTransaction.prototype['originalTaxAmount'] = undefined;

/**
 * Output only. The resource name of the external transaction. The package name of the application the inapp products were sold (for example, 'com.some.app').
 * @member {String} packageName
 */
ExternalTransaction.prototype['packageName'] = undefined;

/**
 * @member {module:model/RecurringExternalTransaction} recurringTransaction
 */
ExternalTransaction.prototype['recurringTransaction'] = undefined;

/**
 * Represents a transaction performed using a test account. These transactions will not be charged by Google.
 * @member {Object} testPurchase
 */
ExternalTransaction.prototype['testPurchase'] = undefined;

/**
 * Output only. The current state of the transaction.
 * @member {module:model/ExternalTransaction.TransactionStateEnum} transactionState
 */
ExternalTransaction.prototype['transactionState'] = undefined;

/**
 * Required. The time when the transaction was completed.
 * @member {String} transactionTime
 */
ExternalTransaction.prototype['transactionTime'] = undefined;

/**
 * @member {module:model/ExternalTransactionAddress} userTaxAddress
 */
ExternalTransaction.prototype['userTaxAddress'] = undefined;





/**
 * Allowed values for the <code>transactionState</code> property.
 * @enum {String}
 * @readonly
 */
ExternalTransaction['TransactionStateEnum'] = {

    /**
     * value: "TRANSACTION_STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "TRANSACTION_STATE_UNSPECIFIED",

    /**
     * value: "TRANSACTION_REPORTED"
     * @const
     */
    "REPORTED": "TRANSACTION_REPORTED",

    /**
     * value: "TRANSACTION_CANCELED"
     * @const
     */
    "CANCELED": "TRANSACTION_CANCELED"
};



export default ExternalTransaction;

