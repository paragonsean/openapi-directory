/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceMetadata model module.
 * @module model/DeviceMetadata
 * @version v3
 */
class DeviceMetadata {
    /**
     * Constructs a new <code>DeviceMetadata</code>.
     * Characteristics of the user&#39;s device.
     * @alias module:model/DeviceMetadata
     */
    constructor() { 
        
        DeviceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceMetadata} obj Optional instance to populate.
     * @return {module:model/DeviceMetadata} The populated <code>DeviceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceMetadata();

            if (data.hasOwnProperty('cpuMake')) {
                obj['cpuMake'] = ApiClient.convertToType(data['cpuMake'], 'String');
            }
            if (data.hasOwnProperty('cpuModel')) {
                obj['cpuModel'] = ApiClient.convertToType(data['cpuModel'], 'String');
            }
            if (data.hasOwnProperty('deviceClass')) {
                obj['deviceClass'] = ApiClient.convertToType(data['deviceClass'], 'String');
            }
            if (data.hasOwnProperty('glEsVersion')) {
                obj['glEsVersion'] = ApiClient.convertToType(data['glEsVersion'], 'Number');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('nativePlatform')) {
                obj['nativePlatform'] = ApiClient.convertToType(data['nativePlatform'], 'String');
            }
            if (data.hasOwnProperty('productName')) {
                obj['productName'] = ApiClient.convertToType(data['productName'], 'String');
            }
            if (data.hasOwnProperty('ramMb')) {
                obj['ramMb'] = ApiClient.convertToType(data['ramMb'], 'Number');
            }
            if (data.hasOwnProperty('screenDensityDpi')) {
                obj['screenDensityDpi'] = ApiClient.convertToType(data['screenDensityDpi'], 'Number');
            }
            if (data.hasOwnProperty('screenHeightPx')) {
                obj['screenHeightPx'] = ApiClient.convertToType(data['screenHeightPx'], 'Number');
            }
            if (data.hasOwnProperty('screenWidthPx')) {
                obj['screenWidthPx'] = ApiClient.convertToType(data['screenWidthPx'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cpuMake'] && !(typeof data['cpuMake'] === 'string' || data['cpuMake'] instanceof String)) {
            throw new Error("Expected the field `cpuMake` to be a primitive type in the JSON string but got " + data['cpuMake']);
        }
        // ensure the json data is a string
        if (data['cpuModel'] && !(typeof data['cpuModel'] === 'string' || data['cpuModel'] instanceof String)) {
            throw new Error("Expected the field `cpuModel` to be a primitive type in the JSON string but got " + data['cpuModel']);
        }
        // ensure the json data is a string
        if (data['deviceClass'] && !(typeof data['deviceClass'] === 'string' || data['deviceClass'] instanceof String)) {
            throw new Error("Expected the field `deviceClass` to be a primitive type in the JSON string but got " + data['deviceClass']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['nativePlatform'] && !(typeof data['nativePlatform'] === 'string' || data['nativePlatform'] instanceof String)) {
            throw new Error("Expected the field `nativePlatform` to be a primitive type in the JSON string but got " + data['nativePlatform']);
        }
        // ensure the json data is a string
        if (data['productName'] && !(typeof data['productName'] === 'string' || data['productName'] instanceof String)) {
            throw new Error("Expected the field `productName` to be a primitive type in the JSON string but got " + data['productName']);
        }

        return true;
    }


}



/**
 * Device CPU make, e.g. \"Qualcomm\"
 * @member {String} cpuMake
 */
DeviceMetadata.prototype['cpuMake'] = undefined;

/**
 * Device CPU model, e.g. \"MSM8974\"
 * @member {String} cpuModel
 */
DeviceMetadata.prototype['cpuModel'] = undefined;

/**
 * Device class (e.g. tablet)
 * @member {String} deviceClass
 */
DeviceMetadata.prototype['deviceClass'] = undefined;

/**
 * OpenGL version
 * @member {Number} glEsVersion
 */
DeviceMetadata.prototype['glEsVersion'] = undefined;

/**
 * Device manufacturer (e.g. Motorola)
 * @member {String} manufacturer
 */
DeviceMetadata.prototype['manufacturer'] = undefined;

/**
 * Comma separated list of native platforms (e.g. \"arm\", \"arm7\")
 * @member {String} nativePlatform
 */
DeviceMetadata.prototype['nativePlatform'] = undefined;

/**
 * Device model name (e.g. Droid)
 * @member {String} productName
 */
DeviceMetadata.prototype['productName'] = undefined;

/**
 * Device RAM in Megabytes, e.g. \"2048\"
 * @member {Number} ramMb
 */
DeviceMetadata.prototype['ramMb'] = undefined;

/**
 * Screen density in DPI
 * @member {Number} screenDensityDpi
 */
DeviceMetadata.prototype['screenDensityDpi'] = undefined;

/**
 * Screen height in pixels
 * @member {Number} screenHeightPx
 */
DeviceMetadata.prototype['screenHeightPx'] = undefined;

/**
 * Screen width in pixels
 * @member {Number} screenWidthPx
 */
DeviceMetadata.prototype['screenWidthPx'] = undefined;






export default DeviceMetadata;

