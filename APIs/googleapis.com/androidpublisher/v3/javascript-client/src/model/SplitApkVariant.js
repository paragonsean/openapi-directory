/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApkSet from './ApkSet';
import VariantTargeting from './VariantTargeting';

/**
 * The SplitApkVariant model module.
 * @module model/SplitApkVariant
 * @version v3
 */
class SplitApkVariant {
    /**
     * Constructs a new <code>SplitApkVariant</code>.
     * Variant is a group of APKs that covers a part of the device configuration space. APKs from multiple variants are never combined on one device.
     * @alias module:model/SplitApkVariant
     */
    constructor() { 
        
        SplitApkVariant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SplitApkVariant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SplitApkVariant} obj Optional instance to populate.
     * @return {module:model/SplitApkVariant} The populated <code>SplitApkVariant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SplitApkVariant();

            if (data.hasOwnProperty('apkSet')) {
                obj['apkSet'] = ApiClient.convertToType(data['apkSet'], [ApkSet]);
            }
            if (data.hasOwnProperty('targeting')) {
                obj['targeting'] = VariantTargeting.constructFromObject(data['targeting']);
            }
            if (data.hasOwnProperty('variantNumber')) {
                obj['variantNumber'] = ApiClient.convertToType(data['variantNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SplitApkVariant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SplitApkVariant</code>.
     */
    static validateJSON(data) {
        if (data['apkSet']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['apkSet'])) {
                throw new Error("Expected the field `apkSet` to be an array in the JSON data but got " + data['apkSet']);
            }
            // validate the optional field `apkSet` (array)
            for (const item of data['apkSet']) {
                ApkSet.validateJSON(item);
            };
        }
        // validate the optional field `targeting`
        if (data['targeting']) { // data not null
          VariantTargeting.validateJSON(data['targeting']);
        }

        return true;
    }


}



/**
 * Set of APKs, one set per module.
 * @member {Array.<module:model/ApkSet>} apkSet
 */
SplitApkVariant.prototype['apkSet'] = undefined;

/**
 * @member {module:model/VariantTargeting} targeting
 */
SplitApkVariant.prototype['targeting'] = undefined;

/**
 * Number of the variant, starting at 0 (unless overridden). A device will receive APKs from the first variant that matches the device configuration, with higher variant numbers having priority over lower variant numbers.
 * @member {Number} variantNumber
 */
SplitApkVariant.prototype['variantNumber'] = undefined;






export default SplitApkVariant;

