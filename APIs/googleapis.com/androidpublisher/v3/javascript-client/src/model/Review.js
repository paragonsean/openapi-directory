/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';

/**
 * The Review model module.
 * @module model/Review
 * @version v3
 */
class Review {
    /**
     * Constructs a new <code>Review</code>.
     * An Android app review.
     * @alias module:model/Review
     */
    constructor() { 
        
        Review.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Review</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Review} obj Optional instance to populate.
     * @return {module:model/Review} The populated <code>Review</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Review();

            if (data.hasOwnProperty('authorName')) {
                obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [Comment]);
            }
            if (data.hasOwnProperty('reviewId')) {
                obj['reviewId'] = ApiClient.convertToType(data['reviewId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Review</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Review</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authorName'] && !(typeof data['authorName'] === 'string' || data['authorName'] instanceof String)) {
            throw new Error("Expected the field `authorName` to be a primitive type in the JSON string but got " + data['authorName']);
        }
        if (data['comments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['comments'])) {
                throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
            }
            // validate the optional field `comments` (array)
            for (const item of data['comments']) {
                Comment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reviewId'] && !(typeof data['reviewId'] === 'string' || data['reviewId'] instanceof String)) {
            throw new Error("Expected the field `reviewId` to be a primitive type in the JSON string but got " + data['reviewId']);
        }

        return true;
    }


}



/**
 * The name of the user who wrote the review.
 * @member {String} authorName
 */
Review.prototype['authorName'] = undefined;

/**
 * A repeated field containing comments for the review.
 * @member {Array.<module:model/Comment>} comments
 */
Review.prototype['comments'] = undefined;

/**
 * Unique identifier for this review.
 * @member {String} reviewId
 */
Review.prototype['reviewId'] = undefined;






export default Review;

