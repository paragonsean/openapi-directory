/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModuleTargeting from './ModuleTargeting';

/**
 * The ModuleMetadata model module.
 * @module model/ModuleMetadata
 * @version v3
 */
class ModuleMetadata {
    /**
     * Constructs a new <code>ModuleMetadata</code>.
     * Metadata of a module.
     * @alias module:model/ModuleMetadata
     */
    constructor() { 
        
        ModuleMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModuleMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModuleMetadata} obj Optional instance to populate.
     * @return {module:model/ModuleMetadata} The populated <code>ModuleMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModuleMetadata();

            if (data.hasOwnProperty('deliveryType')) {
                obj['deliveryType'] = ApiClient.convertToType(data['deliveryType'], 'String');
            }
            if (data.hasOwnProperty('dependencies')) {
                obj['dependencies'] = ApiClient.convertToType(data['dependencies'], ['String']);
            }
            if (data.hasOwnProperty('moduleType')) {
                obj['moduleType'] = ApiClient.convertToType(data['moduleType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('targeting')) {
                obj['targeting'] = ModuleTargeting.constructFromObject(data['targeting']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModuleMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModuleMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deliveryType'] && !(typeof data['deliveryType'] === 'string' || data['deliveryType'] instanceof String)) {
            throw new Error("Expected the field `deliveryType` to be a primitive type in the JSON string but got " + data['deliveryType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dependencies'])) {
            throw new Error("Expected the field `dependencies` to be an array in the JSON data but got " + data['dependencies']);
        }
        // ensure the json data is a string
        if (data['moduleType'] && !(typeof data['moduleType'] === 'string' || data['moduleType'] instanceof String)) {
            throw new Error("Expected the field `moduleType` to be a primitive type in the JSON string but got " + data['moduleType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `targeting`
        if (data['targeting']) { // data not null
          ModuleTargeting.validateJSON(data['targeting']);
        }

        return true;
    }


}



/**
 * Indicates the delivery type (e.g. on-demand) of the module.
 * @member {module:model/ModuleMetadata.DeliveryTypeEnum} deliveryType
 */
ModuleMetadata.prototype['deliveryType'] = undefined;

/**
 * Names of the modules that this module directly depends on. Each module implicitly depends on the base module.
 * @member {Array.<String>} dependencies
 */
ModuleMetadata.prototype['dependencies'] = undefined;

/**
 * Indicates the type of this feature module.
 * @member {module:model/ModuleMetadata.ModuleTypeEnum} moduleType
 */
ModuleMetadata.prototype['moduleType'] = undefined;

/**
 * Module name.
 * @member {String} name
 */
ModuleMetadata.prototype['name'] = undefined;

/**
 * @member {module:model/ModuleTargeting} targeting
 */
ModuleMetadata.prototype['targeting'] = undefined;





/**
 * Allowed values for the <code>deliveryType</code> property.
 * @enum {String}
 * @readonly
 */
ModuleMetadata['DeliveryTypeEnum'] = {

    /**
     * value: "UNKNOWN_DELIVERY_TYPE"
     * @const
     */
    "UNKNOWN_DELIVERY_TYPE": "UNKNOWN_DELIVERY_TYPE",

    /**
     * value: "INSTALL_TIME"
     * @const
     */
    "INSTALL_TIME": "INSTALL_TIME",

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND",

    /**
     * value: "FAST_FOLLOW"
     * @const
     */
    "FAST_FOLLOW": "FAST_FOLLOW"
};


/**
 * Allowed values for the <code>moduleType</code> property.
 * @enum {String}
 * @readonly
 */
ModuleMetadata['ModuleTypeEnum'] = {

    /**
     * value: "UNKNOWN_MODULE_TYPE"
     * @const
     */
    "UNKNOWN_MODULE_TYPE": "UNKNOWN_MODULE_TYPE",

    /**
     * value: "FEATURE_MODULE"
     * @const
     */
    "FEATURE_MODULE": "FEATURE_MODULE"
};



export default ModuleMetadata;

