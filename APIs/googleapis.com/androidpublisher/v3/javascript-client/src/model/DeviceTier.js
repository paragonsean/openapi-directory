/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceTier model module.
 * @module model/DeviceTier
 * @version v3
 */
class DeviceTier {
    /**
     * Constructs a new <code>DeviceTier</code>.
     * A single device tier. Devices matching any of the device groups in device_group_names are considered to match the tier.
     * @alias module:model/DeviceTier
     */
    constructor() { 
        
        DeviceTier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceTier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceTier} obj Optional instance to populate.
     * @return {module:model/DeviceTier} The populated <code>DeviceTier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceTier();

            if (data.hasOwnProperty('deviceGroupNames')) {
                obj['deviceGroupNames'] = ApiClient.convertToType(data['deviceGroupNames'], ['String']);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceTier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceTier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['deviceGroupNames'])) {
            throw new Error("Expected the field `deviceGroupNames` to be an array in the JSON data but got " + data['deviceGroupNames']);
        }

        return true;
    }


}



/**
 * Groups of devices included in this tier. These groups must be defined explicitly under device_groups in this configuration.
 * @member {Array.<String>} deviceGroupNames
 */
DeviceTier.prototype['deviceGroupNames'] = undefined;

/**
 * The priority level of the tier. Tiers are evaluated in descending order of level: the highest level tier has the highest priority. The highest tier matching a given device is selected for that device. You should use a contiguous range of levels for your tiers in a tier set; tier levels in a tier set must be unique. For instance, if your tier set has 4 tiers (including the global fallback), you should define tiers 1, 2 and 3 in this configuration. Note: tier 0 is implicitly defined as a global fallback and selected for devices that don't match any of the tiers explicitly defined here. You mustn't define level 0 explicitly in this configuration.
 * @member {Number} level
 */
DeviceTier.prototype['level'] = undefined;






export default DeviceTier;

