/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScreenDensity model module.
 * @module model/ScreenDensity
 * @version v3
 */
class ScreenDensity {
    /**
     * Constructs a new <code>ScreenDensity</code>.
     * Represents a screen density.
     * @alias module:model/ScreenDensity
     */
    constructor() { 
        
        ScreenDensity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ScreenDensity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScreenDensity} obj Optional instance to populate.
     * @return {module:model/ScreenDensity} The populated <code>ScreenDensity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScreenDensity();

            if (data.hasOwnProperty('densityAlias')) {
                obj['densityAlias'] = ApiClient.convertToType(data['densityAlias'], 'String');
            }
            if (data.hasOwnProperty('densityDpi')) {
                obj['densityDpi'] = ApiClient.convertToType(data['densityDpi'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScreenDensity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScreenDensity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['densityAlias'] && !(typeof data['densityAlias'] === 'string' || data['densityAlias'] instanceof String)) {
            throw new Error("Expected the field `densityAlias` to be a primitive type in the JSON string but got " + data['densityAlias']);
        }

        return true;
    }


}



/**
 * Alias for a screen density.
 * @member {module:model/ScreenDensity.DensityAliasEnum} densityAlias
 */
ScreenDensity.prototype['densityAlias'] = undefined;

/**
 * Value for density dpi.
 * @member {Number} densityDpi
 */
ScreenDensity.prototype['densityDpi'] = undefined;





/**
 * Allowed values for the <code>densityAlias</code> property.
 * @enum {String}
 * @readonly
 */
ScreenDensity['DensityAliasEnum'] = {

    /**
     * value: "DENSITY_UNSPECIFIED"
     * @const
     */
    "DENSITY_UNSPECIFIED": "DENSITY_UNSPECIFIED",

    /**
     * value: "NODPI"
     * @const
     */
    "NODPI": "NODPI",

    /**
     * value: "LDPI"
     * @const
     */
    "LDPI": "LDPI",

    /**
     * value: "MDPI"
     * @const
     */
    "MDPI": "MDPI",

    /**
     * value: "TVDPI"
     * @const
     */
    "TVDPI": "TVDPI",

    /**
     * value: "HDPI"
     * @const
     */
    "HDPI": "HDPI",

    /**
     * value: "XHDPI"
     * @const
     */
    "XHDPI": "XHDPI",

    /**
     * value: "XXHDPI"
     * @const
     */
    "XXHDPI": "XXHDPI",

    /**
     * value: "XXXHDPI"
     * @const
     */
    "XXXHDPI": "XXXHDPI"
};



export default ScreenDensity;

