/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IntroductoryPriceInfo model module.
 * @module model/IntroductoryPriceInfo
 * @version v3
 */
class IntroductoryPriceInfo {
    /**
     * Constructs a new <code>IntroductoryPriceInfo</code>.
     * Contains the introductory price information for a subscription.
     * @alias module:model/IntroductoryPriceInfo
     */
    constructor() { 
        
        IntroductoryPriceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntroductoryPriceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntroductoryPriceInfo} obj Optional instance to populate.
     * @return {module:model/IntroductoryPriceInfo} The populated <code>IntroductoryPriceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntroductoryPriceInfo();

            if (data.hasOwnProperty('introductoryPriceAmountMicros')) {
                obj['introductoryPriceAmountMicros'] = ApiClient.convertToType(data['introductoryPriceAmountMicros'], 'String');
            }
            if (data.hasOwnProperty('introductoryPriceCurrencyCode')) {
                obj['introductoryPriceCurrencyCode'] = ApiClient.convertToType(data['introductoryPriceCurrencyCode'], 'String');
            }
            if (data.hasOwnProperty('introductoryPriceCycles')) {
                obj['introductoryPriceCycles'] = ApiClient.convertToType(data['introductoryPriceCycles'], 'Number');
            }
            if (data.hasOwnProperty('introductoryPricePeriod')) {
                obj['introductoryPricePeriod'] = ApiClient.convertToType(data['introductoryPricePeriod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntroductoryPriceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntroductoryPriceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['introductoryPriceAmountMicros'] && !(typeof data['introductoryPriceAmountMicros'] === 'string' || data['introductoryPriceAmountMicros'] instanceof String)) {
            throw new Error("Expected the field `introductoryPriceAmountMicros` to be a primitive type in the JSON string but got " + data['introductoryPriceAmountMicros']);
        }
        // ensure the json data is a string
        if (data['introductoryPriceCurrencyCode'] && !(typeof data['introductoryPriceCurrencyCode'] === 'string' || data['introductoryPriceCurrencyCode'] instanceof String)) {
            throw new Error("Expected the field `introductoryPriceCurrencyCode` to be a primitive type in the JSON string but got " + data['introductoryPriceCurrencyCode']);
        }
        // ensure the json data is a string
        if (data['introductoryPricePeriod'] && !(typeof data['introductoryPricePeriod'] === 'string' || data['introductoryPricePeriod'] instanceof String)) {
            throw new Error("Expected the field `introductoryPricePeriod` to be a primitive type in the JSON string but got " + data['introductoryPricePeriod']);
        }

        return true;
    }


}



/**
 * Introductory price of the subscription, not including tax. The currency is the same as price_currency_code. Price is expressed in micro-units, where 1,000,000 micro-units represents one unit of the currency. For example, if the subscription price is â‚¬1.99, price_amount_micros is 1990000.
 * @member {String} introductoryPriceAmountMicros
 */
IntroductoryPriceInfo.prototype['introductoryPriceAmountMicros'] = undefined;

/**
 * ISO 4217 currency code for the introductory subscription price. For example, if the price is specified in British pounds sterling, price_currency_code is \"GBP\".
 * @member {String} introductoryPriceCurrencyCode
 */
IntroductoryPriceInfo.prototype['introductoryPriceCurrencyCode'] = undefined;

/**
 * The number of billing period to offer introductory pricing.
 * @member {Number} introductoryPriceCycles
 */
IntroductoryPriceInfo.prototype['introductoryPriceCycles'] = undefined;

/**
 * Introductory price period, specified in ISO 8601 format. Common values are (but not limited to) \"P1W\" (one week), \"P1M\" (one month), \"P3M\" (three months), \"P6M\" (six months), and \"P1Y\" (one year).
 * @member {String} introductoryPricePeriod
 */
IntroductoryPriceInfo.prototype['introductoryPricePeriod'] = undefined;






export default IntroductoryPriceInfo;

