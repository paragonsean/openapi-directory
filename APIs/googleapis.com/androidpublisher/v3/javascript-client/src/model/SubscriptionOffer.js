/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OfferTag from './OfferTag';
import OtherRegionsSubscriptionOfferConfig from './OtherRegionsSubscriptionOfferConfig';
import RegionalSubscriptionOfferConfig from './RegionalSubscriptionOfferConfig';
import SubscriptionOfferPhase from './SubscriptionOfferPhase';
import SubscriptionOfferTargeting from './SubscriptionOfferTargeting';

/**
 * The SubscriptionOffer model module.
 * @module model/SubscriptionOffer
 * @version v3
 */
class SubscriptionOffer {
    /**
     * Constructs a new <code>SubscriptionOffer</code>.
     * A single, temporary offer
     * @alias module:model/SubscriptionOffer
     */
    constructor() { 
        
        SubscriptionOffer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionOffer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionOffer} obj Optional instance to populate.
     * @return {module:model/SubscriptionOffer} The populated <code>SubscriptionOffer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionOffer();

            if (data.hasOwnProperty('basePlanId')) {
                obj['basePlanId'] = ApiClient.convertToType(data['basePlanId'], 'String');
            }
            if (data.hasOwnProperty('offerId')) {
                obj['offerId'] = ApiClient.convertToType(data['offerId'], 'String');
            }
            if (data.hasOwnProperty('offerTags')) {
                obj['offerTags'] = ApiClient.convertToType(data['offerTags'], [OfferTag]);
            }
            if (data.hasOwnProperty('otherRegionsConfig')) {
                obj['otherRegionsConfig'] = OtherRegionsSubscriptionOfferConfig.constructFromObject(data['otherRegionsConfig']);
            }
            if (data.hasOwnProperty('packageName')) {
                obj['packageName'] = ApiClient.convertToType(data['packageName'], 'String');
            }
            if (data.hasOwnProperty('phases')) {
                obj['phases'] = ApiClient.convertToType(data['phases'], [SubscriptionOfferPhase]);
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('regionalConfigs')) {
                obj['regionalConfigs'] = ApiClient.convertToType(data['regionalConfigs'], [RegionalSubscriptionOfferConfig]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('targeting')) {
                obj['targeting'] = SubscriptionOfferTargeting.constructFromObject(data['targeting']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionOffer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionOffer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['basePlanId'] && !(typeof data['basePlanId'] === 'string' || data['basePlanId'] instanceof String)) {
            throw new Error("Expected the field `basePlanId` to be a primitive type in the JSON string but got " + data['basePlanId']);
        }
        // ensure the json data is a string
        if (data['offerId'] && !(typeof data['offerId'] === 'string' || data['offerId'] instanceof String)) {
            throw new Error("Expected the field `offerId` to be a primitive type in the JSON string but got " + data['offerId']);
        }
        if (data['offerTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offerTags'])) {
                throw new Error("Expected the field `offerTags` to be an array in the JSON data but got " + data['offerTags']);
            }
            // validate the optional field `offerTags` (array)
            for (const item of data['offerTags']) {
                OfferTag.validateJSON(item);
            };
        }
        // validate the optional field `otherRegionsConfig`
        if (data['otherRegionsConfig']) { // data not null
          OtherRegionsSubscriptionOfferConfig.validateJSON(data['otherRegionsConfig']);
        }
        // ensure the json data is a string
        if (data['packageName'] && !(typeof data['packageName'] === 'string' || data['packageName'] instanceof String)) {
            throw new Error("Expected the field `packageName` to be a primitive type in the JSON string but got " + data['packageName']);
        }
        if (data['phases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phases'])) {
                throw new Error("Expected the field `phases` to be an array in the JSON data but got " + data['phases']);
            }
            // validate the optional field `phases` (array)
            for (const item of data['phases']) {
                SubscriptionOfferPhase.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        if (data['regionalConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regionalConfigs'])) {
                throw new Error("Expected the field `regionalConfigs` to be an array in the JSON data but got " + data['regionalConfigs']);
            }
            // validate the optional field `regionalConfigs` (array)
            for (const item of data['regionalConfigs']) {
                RegionalSubscriptionOfferConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `targeting`
        if (data['targeting']) { // data not null
          SubscriptionOfferTargeting.validateJSON(data['targeting']);
        }

        return true;
    }


}



/**
 * Required. Immutable. The ID of the base plan to which this offer is an extension.
 * @member {String} basePlanId
 */
SubscriptionOffer.prototype['basePlanId'] = undefined;

/**
 * Required. Immutable. Unique ID of this subscription offer. Must be unique within the base plan.
 * @member {String} offerId
 */
SubscriptionOffer.prototype['offerId'] = undefined;

/**
 * List of up to 20 custom tags specified for this offer, and returned to the app through the billing library.
 * @member {Array.<module:model/OfferTag>} offerTags
 */
SubscriptionOffer.prototype['offerTags'] = undefined;

/**
 * @member {module:model/OtherRegionsSubscriptionOfferConfig} otherRegionsConfig
 */
SubscriptionOffer.prototype['otherRegionsConfig'] = undefined;

/**
 * Required. Immutable. The package name of the app the parent subscription belongs to.
 * @member {String} packageName
 */
SubscriptionOffer.prototype['packageName'] = undefined;

/**
 * Required. The phases of this subscription offer. Must contain at least one entry, and may contain at most five. Users will always receive all these phases in the specified order. Phases may not be added, removed, or reordered after initial creation.
 * @member {Array.<module:model/SubscriptionOfferPhase>} phases
 */
SubscriptionOffer.prototype['phases'] = undefined;

/**
 * Required. Immutable. The ID of the parent subscription this offer belongs to.
 * @member {String} productId
 */
SubscriptionOffer.prototype['productId'] = undefined;

/**
 * Required. The region-specific configuration of this offer. Must contain at least one entry.
 * @member {Array.<module:model/RegionalSubscriptionOfferConfig>} regionalConfigs
 */
SubscriptionOffer.prototype['regionalConfigs'] = undefined;

/**
 * Output only. The current state of this offer. Can be changed using Activate and Deactivate actions. NB: the base plan state supersedes this state, so an active offer may not be available if the base plan is not active.
 * @member {module:model/SubscriptionOffer.StateEnum} state
 */
SubscriptionOffer.prototype['state'] = undefined;

/**
 * @member {module:model/SubscriptionOfferTargeting} targeting
 */
SubscriptionOffer.prototype['targeting'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SubscriptionOffer['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default SubscriptionOffer;

