/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoRenewingBasePlanType from './AutoRenewingBasePlanType';
import OfferTag from './OfferTag';
import OtherRegionsBasePlanConfig from './OtherRegionsBasePlanConfig';
import PrepaidBasePlanType from './PrepaidBasePlanType';
import RegionalBasePlanConfig from './RegionalBasePlanConfig';

/**
 * The BasePlan model module.
 * @module model/BasePlan
 * @version v3
 */
class BasePlan {
    /**
     * Constructs a new <code>BasePlan</code>.
     * A single base plan for a subscription.
     * @alias module:model/BasePlan
     */
    constructor() { 
        
        BasePlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasePlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasePlan} obj Optional instance to populate.
     * @return {module:model/BasePlan} The populated <code>BasePlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasePlan();

            if (data.hasOwnProperty('autoRenewingBasePlanType')) {
                obj['autoRenewingBasePlanType'] = AutoRenewingBasePlanType.constructFromObject(data['autoRenewingBasePlanType']);
            }
            if (data.hasOwnProperty('basePlanId')) {
                obj['basePlanId'] = ApiClient.convertToType(data['basePlanId'], 'String');
            }
            if (data.hasOwnProperty('offerTags')) {
                obj['offerTags'] = ApiClient.convertToType(data['offerTags'], [OfferTag]);
            }
            if (data.hasOwnProperty('otherRegionsConfig')) {
                obj['otherRegionsConfig'] = OtherRegionsBasePlanConfig.constructFromObject(data['otherRegionsConfig']);
            }
            if (data.hasOwnProperty('prepaidBasePlanType')) {
                obj['prepaidBasePlanType'] = PrepaidBasePlanType.constructFromObject(data['prepaidBasePlanType']);
            }
            if (data.hasOwnProperty('regionalConfigs')) {
                obj['regionalConfigs'] = ApiClient.convertToType(data['regionalConfigs'], [RegionalBasePlanConfig]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasePlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasePlan</code>.
     */
    static validateJSON(data) {
        // validate the optional field `autoRenewingBasePlanType`
        if (data['autoRenewingBasePlanType']) { // data not null
          AutoRenewingBasePlanType.validateJSON(data['autoRenewingBasePlanType']);
        }
        // ensure the json data is a string
        if (data['basePlanId'] && !(typeof data['basePlanId'] === 'string' || data['basePlanId'] instanceof String)) {
            throw new Error("Expected the field `basePlanId` to be a primitive type in the JSON string but got " + data['basePlanId']);
        }
        if (data['offerTags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['offerTags'])) {
                throw new Error("Expected the field `offerTags` to be an array in the JSON data but got " + data['offerTags']);
            }
            // validate the optional field `offerTags` (array)
            for (const item of data['offerTags']) {
                OfferTag.validateJSON(item);
            };
        }
        // validate the optional field `otherRegionsConfig`
        if (data['otherRegionsConfig']) { // data not null
          OtherRegionsBasePlanConfig.validateJSON(data['otherRegionsConfig']);
        }
        // validate the optional field `prepaidBasePlanType`
        if (data['prepaidBasePlanType']) { // data not null
          PrepaidBasePlanType.validateJSON(data['prepaidBasePlanType']);
        }
        if (data['regionalConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regionalConfigs'])) {
                throw new Error("Expected the field `regionalConfigs` to be an array in the JSON data but got " + data['regionalConfigs']);
            }
            // validate the optional field `regionalConfigs` (array)
            for (const item of data['regionalConfigs']) {
                RegionalBasePlanConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/AutoRenewingBasePlanType} autoRenewingBasePlanType
 */
BasePlan.prototype['autoRenewingBasePlanType'] = undefined;

/**
 * Required. Immutable. The unique identifier of this base plan. Must be unique within the subscription, and conform with RFC-1034. That is, this ID can only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and be at most 63 characters.
 * @member {String} basePlanId
 */
BasePlan.prototype['basePlanId'] = undefined;

/**
 * List of up to 20 custom tags specified for this base plan, and returned to the app through the billing library. Subscription offers for this base plan will also receive these offer tags in the billing library.
 * @member {Array.<module:model/OfferTag>} offerTags
 */
BasePlan.prototype['offerTags'] = undefined;

/**
 * @member {module:model/OtherRegionsBasePlanConfig} otherRegionsConfig
 */
BasePlan.prototype['otherRegionsConfig'] = undefined;

/**
 * @member {module:model/PrepaidBasePlanType} prepaidBasePlanType
 */
BasePlan.prototype['prepaidBasePlanType'] = undefined;

/**
 * Region-specific information for this base plan.
 * @member {Array.<module:model/RegionalBasePlanConfig>} regionalConfigs
 */
BasePlan.prototype['regionalConfigs'] = undefined;

/**
 * Output only. The state of the base plan, i.e. whether it's active. Draft and inactive base plans can be activated or deleted. Active base plans can be made inactive. Inactive base plans can be canceled. This field cannot be changed by updating the resource. Use the dedicated endpoints instead.
 * @member {module:model/BasePlan.StateEnum} state
 */
BasePlan.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BasePlan['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE"
};



export default BasePlan;

