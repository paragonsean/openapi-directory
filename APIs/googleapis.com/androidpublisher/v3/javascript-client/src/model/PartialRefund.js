/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';

/**
 * The PartialRefund model module.
 * @module model/PartialRefund
 * @version v3
 */
class PartialRefund {
    /**
     * Constructs a new <code>PartialRefund</code>.
     * A partial refund of a transaction.
     * @alias module:model/PartialRefund
     */
    constructor() { 
        
        PartialRefund.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PartialRefund</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PartialRefund} obj Optional instance to populate.
     * @return {module:model/PartialRefund} The populated <code>PartialRefund</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PartialRefund();

            if (data.hasOwnProperty('refundId')) {
                obj['refundId'] = ApiClient.convertToType(data['refundId'], 'String');
            }
            if (data.hasOwnProperty('refundPreTaxAmount')) {
                obj['refundPreTaxAmount'] = Price.constructFromObject(data['refundPreTaxAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PartialRefund</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PartialRefund</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['refundId'] && !(typeof data['refundId'] === 'string' || data['refundId'] instanceof String)) {
            throw new Error("Expected the field `refundId` to be a primitive type in the JSON string but got " + data['refundId']);
        }
        // validate the optional field `refundPreTaxAmount`
        if (data['refundPreTaxAmount']) { // data not null
          Price.validateJSON(data['refundPreTaxAmount']);
        }

        return true;
    }


}



/**
 * Required. A unique id distinguishing this partial refund. If the refund is successful, subsequent refunds with the same id will fail. Must be unique across refunds for one individual transaction.
 * @member {String} refundId
 */
PartialRefund.prototype['refundId'] = undefined;

/**
 * @member {module:model/Price} refundPreTaxAmount
 */
PartialRefund.prototype['refundPreTaxAmount'] = undefined;






export default PartialRefund;

