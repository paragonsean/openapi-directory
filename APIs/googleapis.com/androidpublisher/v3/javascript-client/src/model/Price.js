/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Price model module.
 * @module model/Price
 * @version v3
 */
class Price {
    /**
     * Constructs a new <code>Price</code>.
     * Definition of a price, i.e. currency and units.
     * @alias module:model/Price
     */
    constructor() { 
        
        Price.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Price</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Price} obj Optional instance to populate.
     * @return {module:model/Price} The populated <code>Price</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Price();

            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('priceMicros')) {
                obj['priceMicros'] = ApiClient.convertToType(data['priceMicros'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Price</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Price</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['priceMicros'] && !(typeof data['priceMicros'] === 'string' || data['priceMicros'] instanceof String)) {
            throw new Error("Expected the field `priceMicros` to be a primitive type in the JSON string but got " + data['priceMicros']);
        }

        return true;
    }


}



/**
 * 3 letter Currency code, as defined by ISO 4217. See java/com/google/common/money/CurrencyCode.java
 * @member {String} currency
 */
Price.prototype['currency'] = undefined;

/**
 * Price in 1/million of the currency base unit, represented as a string.
 * @member {String} priceMicros
 */
Price.prototype['priceMicros'] = undefined;






export default Price;

