/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Money from './Money';

/**
 * The ConvertedRegionPrice model module.
 * @module model/ConvertedRegionPrice
 * @version v3
 */
class ConvertedRegionPrice {
    /**
     * Constructs a new <code>ConvertedRegionPrice</code>.
     * A converted region price.
     * @alias module:model/ConvertedRegionPrice
     */
    constructor() { 
        
        ConvertedRegionPrice.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConvertedRegionPrice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConvertedRegionPrice} obj Optional instance to populate.
     * @return {module:model/ConvertedRegionPrice} The populated <code>ConvertedRegionPrice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConvertedRegionPrice();

            if (data.hasOwnProperty('price')) {
                obj['price'] = Money.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = Money.constructFromObject(data['taxAmount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConvertedRegionPrice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConvertedRegionPrice</code>.
     */
    static validateJSON(data) {
        // validate the optional field `price`
        if (data['price']) { // data not null
          Money.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }
        // validate the optional field `taxAmount`
        if (data['taxAmount']) { // data not null
          Money.validateJSON(data['taxAmount']);
        }

        return true;
    }


}



/**
 * @member {module:model/Money} price
 */
ConvertedRegionPrice.prototype['price'] = undefined;

/**
 * The region code of the region.
 * @member {String} regionCode
 */
ConvertedRegionPrice.prototype['regionCode'] = undefined;

/**
 * @member {module:model/Money} taxAmount
 */
ConvertedRegionPrice.prototype['taxAmount'] = undefined;






export default ConvertedRegionPrice;

