/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegionalPriceMigrationConfig model module.
 * @module model/RegionalPriceMigrationConfig
 * @version v3
 */
class RegionalPriceMigrationConfig {
    /**
     * Constructs a new <code>RegionalPriceMigrationConfig</code>.
     * Configuration for a price migration.
     * @alias module:model/RegionalPriceMigrationConfig
     */
    constructor() { 
        
        RegionalPriceMigrationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RegionalPriceMigrationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegionalPriceMigrationConfig} obj Optional instance to populate.
     * @return {module:model/RegionalPriceMigrationConfig} The populated <code>RegionalPriceMigrationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegionalPriceMigrationConfig();

            if (data.hasOwnProperty('oldestAllowedPriceVersionTime')) {
                obj['oldestAllowedPriceVersionTime'] = ApiClient.convertToType(data['oldestAllowedPriceVersionTime'], 'String');
            }
            if (data.hasOwnProperty('priceIncreaseType')) {
                obj['priceIncreaseType'] = ApiClient.convertToType(data['priceIncreaseType'], 'String');
            }
            if (data.hasOwnProperty('regionCode')) {
                obj['regionCode'] = ApiClient.convertToType(data['regionCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegionalPriceMigrationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegionalPriceMigrationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['oldestAllowedPriceVersionTime'] && !(typeof data['oldestAllowedPriceVersionTime'] === 'string' || data['oldestAllowedPriceVersionTime'] instanceof String)) {
            throw new Error("Expected the field `oldestAllowedPriceVersionTime` to be a primitive type in the JSON string but got " + data['oldestAllowedPriceVersionTime']);
        }
        // ensure the json data is a string
        if (data['priceIncreaseType'] && !(typeof data['priceIncreaseType'] === 'string' || data['priceIncreaseType'] instanceof String)) {
            throw new Error("Expected the field `priceIncreaseType` to be a primitive type in the JSON string but got " + data['priceIncreaseType']);
        }
        // ensure the json data is a string
        if (data['regionCode'] && !(typeof data['regionCode'] === 'string' || data['regionCode'] instanceof String)) {
            throw new Error("Expected the field `regionCode` to be a primitive type in the JSON string but got " + data['regionCode']);
        }

        return true;
    }


}



/**
 * Required. The cutoff time for historical prices that subscribers can remain paying. Subscribers on prices which were available at this cutoff time or later will stay on their existing price. Subscribers on older prices will be migrated to the currently-offered price. The migrated subscribers will receive a notification that they will be paying a different price. Subscribers who do not agree to the new price will have their subscription ended at the next renewal.
 * @member {String} oldestAllowedPriceVersionTime
 */
RegionalPriceMigrationConfig.prototype['oldestAllowedPriceVersionTime'] = undefined;

/**
 * Optional. The behavior the caller wants users to see when there is a price increase during migration. If left unset, the behavior defaults to PRICE_INCREASE_TYPE_OPT_IN. Note that the first opt-out price increase migration for each app must be initiated in Play Console.
 * @member {module:model/RegionalPriceMigrationConfig.PriceIncreaseTypeEnum} priceIncreaseType
 */
RegionalPriceMigrationConfig.prototype['priceIncreaseType'] = undefined;

/**
 * Required. Region code this configuration applies to, as defined by ISO 3166-2, e.g. \"US\".
 * @member {String} regionCode
 */
RegionalPriceMigrationConfig.prototype['regionCode'] = undefined;





/**
 * Allowed values for the <code>priceIncreaseType</code> property.
 * @enum {String}
 * @readonly
 */
RegionalPriceMigrationConfig['PriceIncreaseTypeEnum'] = {

    /**
     * value: "PRICE_INCREASE_TYPE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PRICE_INCREASE_TYPE_UNSPECIFIED",

    /**
     * value: "PRICE_INCREASE_TYPE_OPT_IN"
     * @const
     */
    "OPT_IN": "PRICE_INCREASE_TYPE_OPT_IN",

    /**
     * value: "PRICE_INCREASE_TYPE_OPT_OUT"
     * @const
     */
    "OPT_OUT": "PRICE_INCREASE_TYPE_OPT_OUT"
};



export default RegionalPriceMigrationConfig;

