/**
 * Google Play Android Developer API
 * Lets Android application developers access their Google Play accounts. At a high level, the expected workflow is to \"insert\" an Edit, make changes as necessary, and then \"commit\" it. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AutoRenewingBasePlanType model module.
 * @module model/AutoRenewingBasePlanType
 * @version v3
 */
class AutoRenewingBasePlanType {
    /**
     * Constructs a new <code>AutoRenewingBasePlanType</code>.
     * Represents a base plan that automatically renews at the end of its subscription period.
     * @alias module:model/AutoRenewingBasePlanType
     */
    constructor() { 
        
        AutoRenewingBasePlanType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AutoRenewingBasePlanType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoRenewingBasePlanType} obj Optional instance to populate.
     * @return {module:model/AutoRenewingBasePlanType} The populated <code>AutoRenewingBasePlanType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoRenewingBasePlanType();

            if (data.hasOwnProperty('accountHoldDuration')) {
                obj['accountHoldDuration'] = ApiClient.convertToType(data['accountHoldDuration'], 'String');
            }
            if (data.hasOwnProperty('billingPeriodDuration')) {
                obj['billingPeriodDuration'] = ApiClient.convertToType(data['billingPeriodDuration'], 'String');
            }
            if (data.hasOwnProperty('gracePeriodDuration')) {
                obj['gracePeriodDuration'] = ApiClient.convertToType(data['gracePeriodDuration'], 'String');
            }
            if (data.hasOwnProperty('legacyCompatible')) {
                obj['legacyCompatible'] = ApiClient.convertToType(data['legacyCompatible'], 'Boolean');
            }
            if (data.hasOwnProperty('legacyCompatibleSubscriptionOfferId')) {
                obj['legacyCompatibleSubscriptionOfferId'] = ApiClient.convertToType(data['legacyCompatibleSubscriptionOfferId'], 'String');
            }
            if (data.hasOwnProperty('prorationMode')) {
                obj['prorationMode'] = ApiClient.convertToType(data['prorationMode'], 'String');
            }
            if (data.hasOwnProperty('resubscribeState')) {
                obj['resubscribeState'] = ApiClient.convertToType(data['resubscribeState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoRenewingBasePlanType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoRenewingBasePlanType</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountHoldDuration'] && !(typeof data['accountHoldDuration'] === 'string' || data['accountHoldDuration'] instanceof String)) {
            throw new Error("Expected the field `accountHoldDuration` to be a primitive type in the JSON string but got " + data['accountHoldDuration']);
        }
        // ensure the json data is a string
        if (data['billingPeriodDuration'] && !(typeof data['billingPeriodDuration'] === 'string' || data['billingPeriodDuration'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodDuration` to be a primitive type in the JSON string but got " + data['billingPeriodDuration']);
        }
        // ensure the json data is a string
        if (data['gracePeriodDuration'] && !(typeof data['gracePeriodDuration'] === 'string' || data['gracePeriodDuration'] instanceof String)) {
            throw new Error("Expected the field `gracePeriodDuration` to be a primitive type in the JSON string but got " + data['gracePeriodDuration']);
        }
        // ensure the json data is a string
        if (data['legacyCompatibleSubscriptionOfferId'] && !(typeof data['legacyCompatibleSubscriptionOfferId'] === 'string' || data['legacyCompatibleSubscriptionOfferId'] instanceof String)) {
            throw new Error("Expected the field `legacyCompatibleSubscriptionOfferId` to be a primitive type in the JSON string but got " + data['legacyCompatibleSubscriptionOfferId']);
        }
        // ensure the json data is a string
        if (data['prorationMode'] && !(typeof data['prorationMode'] === 'string' || data['prorationMode'] instanceof String)) {
            throw new Error("Expected the field `prorationMode` to be a primitive type in the JSON string but got " + data['prorationMode']);
        }
        // ensure the json data is a string
        if (data['resubscribeState'] && !(typeof data['resubscribeState'] === 'string' || data['resubscribeState'] instanceof String)) {
            throw new Error("Expected the field `resubscribeState` to be a primitive type in the JSON string but got " + data['resubscribeState']);
        }

        return true;
    }


}



/**
 * Optional. Account hold period of the subscription, specified in ISO 8601 format. Acceptable values must be in DAYS and in the range P0D (zero days) to P30D (30 days). If not specified, the default value is P30D (30 days).
 * @member {String} accountHoldDuration
 */
AutoRenewingBasePlanType.prototype['accountHoldDuration'] = undefined;

/**
 * Required. Subscription period, specified in ISO 8601 format. For a list of acceptable billing periods, refer to the help center.
 * @member {String} billingPeriodDuration
 */
AutoRenewingBasePlanType.prototype['billingPeriodDuration'] = undefined;

/**
 * Grace period of the subscription, specified in ISO 8601 format. Acceptable values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and P30D (30 days). If not specified, a default value will be used based on the recurring period duration.
 * @member {String} gracePeriodDuration
 */
AutoRenewingBasePlanType.prototype['gracePeriodDuration'] = undefined;

/**
 * Whether the renewing base plan is backward compatible. The backward compatible base plan is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one renewing base plan can be marked as legacy compatible for a given subscription.
 * @member {Boolean} legacyCompatible
 */
AutoRenewingBasePlanType.prototype['legacyCompatible'] = undefined;

/**
 * Subscription offer id which is legacy compatible. The backward compatible subscription offer is returned by the Google Play Billing Library deprecated method querySkuDetailsAsync(). Only one subscription offer can be marked as legacy compatible for a given renewing base plan. To have no Subscription offer as legacy compatible set this field as empty string.
 * @member {String} legacyCompatibleSubscriptionOfferId
 */
AutoRenewingBasePlanType.prototype['legacyCompatibleSubscriptionOfferId'] = undefined;

/**
 * The proration mode for the base plan determines what happens when a user switches to this plan from another base plan. If unspecified, defaults to CHARGE_ON_NEXT_BILLING_DATE.
 * @member {module:model/AutoRenewingBasePlanType.ProrationModeEnum} prorationMode
 */
AutoRenewingBasePlanType.prototype['prorationMode'] = undefined;

/**
 * Whether users should be able to resubscribe to this base plan in Google Play surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.
 * @member {module:model/AutoRenewingBasePlanType.ResubscribeStateEnum} resubscribeState
 */
AutoRenewingBasePlanType.prototype['resubscribeState'] = undefined;





/**
 * Allowed values for the <code>prorationMode</code> property.
 * @enum {String}
 * @readonly
 */
AutoRenewingBasePlanType['ProrationModeEnum'] = {

    /**
     * value: "SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED",

    /**
     * value: "SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE"
     * @const
     */
    "CHARGE_ON_NEXT_BILLING_DATE": "SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE",

    /**
     * value: "SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY"
     * @const
     */
    "CHARGE_FULL_PRICE_IMMEDIATELY": "SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY"
};


/**
 * Allowed values for the <code>resubscribeState</code> property.
 * @enum {String}
 * @readonly
 */
AutoRenewingBasePlanType['ResubscribeStateEnum'] = {

    /**
     * value: "RESUBSCRIBE_STATE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "RESUBSCRIBE_STATE_UNSPECIFIED",

    /**
     * value: "RESUBSCRIBE_STATE_ACTIVE"
     * @const
     */
    "ACTIVE": "RESUBSCRIBE_STATE_ACTIVE",

    /**
     * value: "RESUBSCRIBE_STATE_INACTIVE"
     * @const
     */
    "INACTIVE": "RESUBSCRIBE_STATE_INACTIVE"
};



export default AutoRenewingBasePlanType;

