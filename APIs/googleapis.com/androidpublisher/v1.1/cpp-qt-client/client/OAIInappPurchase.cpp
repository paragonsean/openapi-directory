/**
 * Google Play Developer
 * Accesses Android application developers' Google Play accounts.
 *
 * The version of the OpenAPI document: v1.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInappPurchase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInappPurchase::OAIInappPurchase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInappPurchase::OAIInappPurchase() {
    this->initializeModel();
}

OAIInappPurchase::~OAIInappPurchase() {}

void OAIInappPurchase::initializeModel() {

    m_consumption_state_isSet = false;
    m_consumption_state_isValid = false;

    m_developer_payload_isSet = false;
    m_developer_payload_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_purchase_state_isSet = false;
    m_purchase_state_isValid = false;

    m_purchase_time_isSet = false;
    m_purchase_time_isValid = false;

    m_purchase_type_isSet = false;
    m_purchase_type_isValid = false;
}

void OAIInappPurchase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInappPurchase::fromJsonObject(QJsonObject json) {

    m_consumption_state_isValid = ::OpenAPI::fromJsonValue(m_consumption_state, json[QString("consumptionState")]);
    m_consumption_state_isSet = !json[QString("consumptionState")].isNull() && m_consumption_state_isValid;

    m_developer_payload_isValid = ::OpenAPI::fromJsonValue(m_developer_payload, json[QString("developerPayload")]);
    m_developer_payload_isSet = !json[QString("developerPayload")].isNull() && m_developer_payload_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderId")]);
    m_order_id_isSet = !json[QString("orderId")].isNull() && m_order_id_isValid;

    m_purchase_state_isValid = ::OpenAPI::fromJsonValue(m_purchase_state, json[QString("purchaseState")]);
    m_purchase_state_isSet = !json[QString("purchaseState")].isNull() && m_purchase_state_isValid;

    m_purchase_time_isValid = ::OpenAPI::fromJsonValue(m_purchase_time, json[QString("purchaseTime")]);
    m_purchase_time_isSet = !json[QString("purchaseTime")].isNull() && m_purchase_time_isValid;

    m_purchase_type_isValid = ::OpenAPI::fromJsonValue(m_purchase_type, json[QString("purchaseType")]);
    m_purchase_type_isSet = !json[QString("purchaseType")].isNull() && m_purchase_type_isValid;
}

QString OAIInappPurchase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInappPurchase::asJsonObject() const {
    QJsonObject obj;
    if (m_consumption_state_isSet) {
        obj.insert(QString("consumptionState"), ::OpenAPI::toJsonValue(m_consumption_state));
    }
    if (m_developer_payload_isSet) {
        obj.insert(QString("developerPayload"), ::OpenAPI::toJsonValue(m_developer_payload));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderId"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_purchase_state_isSet) {
        obj.insert(QString("purchaseState"), ::OpenAPI::toJsonValue(m_purchase_state));
    }
    if (m_purchase_time_isSet) {
        obj.insert(QString("purchaseTime"), ::OpenAPI::toJsonValue(m_purchase_time));
    }
    if (m_purchase_type_isSet) {
        obj.insert(QString("purchaseType"), ::OpenAPI::toJsonValue(m_purchase_type));
    }
    return obj;
}

qint32 OAIInappPurchase::getConsumptionState() const {
    return m_consumption_state;
}
void OAIInappPurchase::setConsumptionState(const qint32 &consumption_state) {
    m_consumption_state = consumption_state;
    m_consumption_state_isSet = true;
}

bool OAIInappPurchase::is_consumption_state_Set() const{
    return m_consumption_state_isSet;
}

bool OAIInappPurchase::is_consumption_state_Valid() const{
    return m_consumption_state_isValid;
}

QString OAIInappPurchase::getDeveloperPayload() const {
    return m_developer_payload;
}
void OAIInappPurchase::setDeveloperPayload(const QString &developer_payload) {
    m_developer_payload = developer_payload;
    m_developer_payload_isSet = true;
}

bool OAIInappPurchase::is_developer_payload_Set() const{
    return m_developer_payload_isSet;
}

bool OAIInappPurchase::is_developer_payload_Valid() const{
    return m_developer_payload_isValid;
}

QString OAIInappPurchase::getKind() const {
    return m_kind;
}
void OAIInappPurchase::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIInappPurchase::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIInappPurchase::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIInappPurchase::getOrderId() const {
    return m_order_id;
}
void OAIInappPurchase::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIInappPurchase::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIInappPurchase::is_order_id_Valid() const{
    return m_order_id_isValid;
}

qint32 OAIInappPurchase::getPurchaseState() const {
    return m_purchase_state;
}
void OAIInappPurchase::setPurchaseState(const qint32 &purchase_state) {
    m_purchase_state = purchase_state;
    m_purchase_state_isSet = true;
}

bool OAIInappPurchase::is_purchase_state_Set() const{
    return m_purchase_state_isSet;
}

bool OAIInappPurchase::is_purchase_state_Valid() const{
    return m_purchase_state_isValid;
}

QString OAIInappPurchase::getPurchaseTime() const {
    return m_purchase_time;
}
void OAIInappPurchase::setPurchaseTime(const QString &purchase_time) {
    m_purchase_time = purchase_time;
    m_purchase_time_isSet = true;
}

bool OAIInappPurchase::is_purchase_time_Set() const{
    return m_purchase_time_isSet;
}

bool OAIInappPurchase::is_purchase_time_Valid() const{
    return m_purchase_time_isValid;
}

qint32 OAIInappPurchase::getPurchaseType() const {
    return m_purchase_type;
}
void OAIInappPurchase::setPurchaseType(const qint32 &purchase_type) {
    m_purchase_type = purchase_type;
    m_purchase_type_isSet = true;
}

bool OAIInappPurchase::is_purchase_type_Set() const{
    return m_purchase_type_isSet;
}

bool OAIInappPurchase::is_purchase_type_Valid() const{
    return m_purchase_type_isValid;
}

bool OAIInappPurchase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumption_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_developer_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInappPurchase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
