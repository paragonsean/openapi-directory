# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_legacy_promotion import OrderLegacyPromotion
from openapi_server.models.price import Price
from openapi_server.models.test_order_customer import TestOrderCustomer
from openapi_server.models.test_order_line_item import TestOrderLineItem
from openapi_server.models.test_order_payment_method import TestOrderPaymentMethod
from openapi_server import util


class TestOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer: TestOrderCustomer=None, enable_orderinvoices: bool=None, kind: str=None, line_items: List[TestOrderLineItem]=None, notification_mode: str=None, payment_method: TestOrderPaymentMethod=None, predefined_delivery_address: str=None, predefined_pickup_details: str=None, promotions: List[OrderLegacyPromotion]=None, shipping_cost: Price=None, shipping_cost_tax: Price=None, shipping_option: str=None):
        """TestOrder - a model defined in OpenAPI

        :param customer: The customer of this TestOrder.
        :param enable_orderinvoices: The enable_orderinvoices of this TestOrder.
        :param kind: The kind of this TestOrder.
        :param line_items: The line_items of this TestOrder.
        :param notification_mode: The notification_mode of this TestOrder.
        :param payment_method: The payment_method of this TestOrder.
        :param predefined_delivery_address: The predefined_delivery_address of this TestOrder.
        :param predefined_pickup_details: The predefined_pickup_details of this TestOrder.
        :param promotions: The promotions of this TestOrder.
        :param shipping_cost: The shipping_cost of this TestOrder.
        :param shipping_cost_tax: The shipping_cost_tax of this TestOrder.
        :param shipping_option: The shipping_option of this TestOrder.
        """
        self.openapi_types = {
            'customer': TestOrderCustomer,
            'enable_orderinvoices': bool,
            'kind': str,
            'line_items': List[TestOrderLineItem],
            'notification_mode': str,
            'payment_method': TestOrderPaymentMethod,
            'predefined_delivery_address': str,
            'predefined_pickup_details': str,
            'promotions': List[OrderLegacyPromotion],
            'shipping_cost': Price,
            'shipping_cost_tax': Price,
            'shipping_option': str
        }

        self.attribute_map = {
            'customer': 'customer',
            'enable_orderinvoices': 'enableOrderinvoices',
            'kind': 'kind',
            'line_items': 'lineItems',
            'notification_mode': 'notificationMode',
            'payment_method': 'paymentMethod',
            'predefined_delivery_address': 'predefinedDeliveryAddress',
            'predefined_pickup_details': 'predefinedPickupDetails',
            'promotions': 'promotions',
            'shipping_cost': 'shippingCost',
            'shipping_cost_tax': 'shippingCostTax',
            'shipping_option': 'shippingOption'
        }

        self._customer = customer
        self._enable_orderinvoices = enable_orderinvoices
        self._kind = kind
        self._line_items = line_items
        self._notification_mode = notification_mode
        self._payment_method = payment_method
        self._predefined_delivery_address = predefined_delivery_address
        self._predefined_pickup_details = predefined_pickup_details
        self._promotions = promotions
        self._shipping_cost = shipping_cost
        self._shipping_cost_tax = shipping_cost_tax
        self._shipping_option = shipping_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestOrder of this TestOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer(self):
        """Gets the customer of this TestOrder.


        :return: The customer of this TestOrder.
        :rtype: TestOrderCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this TestOrder.


        :param customer: The customer of this TestOrder.
        :type customer: TestOrderCustomer
        """

        self._customer = customer

    @property
    def enable_orderinvoices(self):
        """Gets the enable_orderinvoices of this TestOrder.

        Whether the orderinvoices service should support this order.

        :return: The enable_orderinvoices of this TestOrder.
        :rtype: bool
        """
        return self._enable_orderinvoices

    @enable_orderinvoices.setter
    def enable_orderinvoices(self, enable_orderinvoices):
        """Sets the enable_orderinvoices of this TestOrder.

        Whether the orderinvoices service should support this order.

        :param enable_orderinvoices: The enable_orderinvoices of this TestOrder.
        :type enable_orderinvoices: bool
        """

        self._enable_orderinvoices = enable_orderinvoices

    @property
    def kind(self):
        """Gets the kind of this TestOrder.

        Identifies what kind of resource this is. Value: the fixed string \"`content#testOrder`\"

        :return: The kind of this TestOrder.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this TestOrder.

        Identifies what kind of resource this is. Value: the fixed string \"`content#testOrder`\"

        :param kind: The kind of this TestOrder.
        :type kind: str
        """

        self._kind = kind

    @property
    def line_items(self):
        """Gets the line_items of this TestOrder.

        Required. Line items that are ordered. At least one line item must be provided.

        :return: The line_items of this TestOrder.
        :rtype: List[TestOrderLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this TestOrder.

        Required. Line items that are ordered. At least one line item must be provided.

        :param line_items: The line_items of this TestOrder.
        :type line_items: List[TestOrderLineItem]
        """

        self._line_items = line_items

    @property
    def notification_mode(self):
        """Gets the notification_mode of this TestOrder.

        Restricted. Do not use.

        :return: The notification_mode of this TestOrder.
        :rtype: str
        """
        return self._notification_mode

    @notification_mode.setter
    def notification_mode(self, notification_mode):
        """Sets the notification_mode of this TestOrder.

        Restricted. Do not use.

        :param notification_mode: The notification_mode of this TestOrder.
        :type notification_mode: str
        """

        self._notification_mode = notification_mode

    @property
    def payment_method(self):
        """Gets the payment_method of this TestOrder.


        :return: The payment_method of this TestOrder.
        :rtype: TestOrderPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this TestOrder.


        :param payment_method: The payment_method of this TestOrder.
        :type payment_method: TestOrderPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def predefined_delivery_address(self):
        """Gets the predefined_delivery_address of this TestOrder.

        Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :return: The predefined_delivery_address of this TestOrder.
        :rtype: str
        """
        return self._predefined_delivery_address

    @predefined_delivery_address.setter
    def predefined_delivery_address(self, predefined_delivery_address):
        """Sets the predefined_delivery_address of this TestOrder.

        Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :param predefined_delivery_address: The predefined_delivery_address of this TestOrder.
        :type predefined_delivery_address: str
        """

        self._predefined_delivery_address = predefined_delivery_address

    @property
    def predefined_pickup_details(self):
        """Gets the predefined_pickup_details of this TestOrder.

        Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :return: The predefined_pickup_details of this TestOrder.
        :rtype: str
        """
        return self._predefined_pickup_details

    @predefined_pickup_details.setter
    def predefined_pickup_details(self, predefined_pickup_details):
        """Sets the predefined_pickup_details of this TestOrder.

        Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :param predefined_pickup_details: The predefined_pickup_details of this TestOrder.
        :type predefined_pickup_details: str
        """

        self._predefined_pickup_details = predefined_pickup_details

    @property
    def promotions(self):
        """Gets the promotions of this TestOrder.

        Deprecated. Ignored if provided.

        :return: The promotions of this TestOrder.
        :rtype: List[OrderLegacyPromotion]
        """
        return self._promotions

    @promotions.setter
    def promotions(self, promotions):
        """Sets the promotions of this TestOrder.

        Deprecated. Ignored if provided.

        :param promotions: The promotions of this TestOrder.
        :type promotions: List[OrderLegacyPromotion]
        """

        self._promotions = promotions

    @property
    def shipping_cost(self):
        """Gets the shipping_cost of this TestOrder.


        :return: The shipping_cost of this TestOrder.
        :rtype: Price
        """
        return self._shipping_cost

    @shipping_cost.setter
    def shipping_cost(self, shipping_cost):
        """Sets the shipping_cost of this TestOrder.


        :param shipping_cost: The shipping_cost of this TestOrder.
        :type shipping_cost: Price
        """

        self._shipping_cost = shipping_cost

    @property
    def shipping_cost_tax(self):
        """Gets the shipping_cost_tax of this TestOrder.


        :return: The shipping_cost_tax of this TestOrder.
        :rtype: Price
        """
        return self._shipping_cost_tax

    @shipping_cost_tax.setter
    def shipping_cost_tax(self, shipping_cost_tax):
        """Sets the shipping_cost_tax of this TestOrder.


        :param shipping_cost_tax: The shipping_cost_tax of this TestOrder.
        :type shipping_cost_tax: Price
        """

        self._shipping_cost_tax = shipping_cost_tax

    @property
    def shipping_option(self):
        """Gets the shipping_option of this TestOrder.

        Required. The requested shipping option. Acceptable values are: - \"`economy`\" - \"`expedited`\" - \"`oneDay`\" - \"`sameDay`\" - \"`standard`\" - \"`twoDay`\" 

        :return: The shipping_option of this TestOrder.
        :rtype: str
        """
        return self._shipping_option

    @shipping_option.setter
    def shipping_option(self, shipping_option):
        """Sets the shipping_option of this TestOrder.

        Required. The requested shipping option. Acceptable values are: - \"`economy`\" - \"`expedited`\" - \"`oneDay`\" - \"`sameDay`\" - \"`standard`\" - \"`twoDay`\" 

        :param shipping_option: The shipping_option of this TestOrder.
        :type shipping_option: str
        """

        self._shipping_option = shipping_option
