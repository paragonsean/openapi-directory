# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestOrderPaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_month: int=None, expiration_year: int=None, last_four_digits: str=None, predefined_billing_address: str=None, type: str=None):
        """TestOrderPaymentMethod - a model defined in OpenAPI

        :param expiration_month: The expiration_month of this TestOrderPaymentMethod.
        :param expiration_year: The expiration_year of this TestOrderPaymentMethod.
        :param last_four_digits: The last_four_digits of this TestOrderPaymentMethod.
        :param predefined_billing_address: The predefined_billing_address of this TestOrderPaymentMethod.
        :param type: The type of this TestOrderPaymentMethod.
        """
        self.openapi_types = {
            'expiration_month': int,
            'expiration_year': int,
            'last_four_digits': str,
            'predefined_billing_address': str,
            'type': str
        }

        self.attribute_map = {
            'expiration_month': 'expirationMonth',
            'expiration_year': 'expirationYear',
            'last_four_digits': 'lastFourDigits',
            'predefined_billing_address': 'predefinedBillingAddress',
            'type': 'type'
        }

        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        self._last_four_digits = last_four_digits
        self._predefined_billing_address = predefined_billing_address
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestOrderPaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestOrderPaymentMethod of this TestOrderPaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_month(self):
        """Gets the expiration_month of this TestOrderPaymentMethod.

        The card expiration month (January = 1, February = 2 etc.).

        :return: The expiration_month of this TestOrderPaymentMethod.
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this TestOrderPaymentMethod.

        The card expiration month (January = 1, February = 2 etc.).

        :param expiration_month: The expiration_month of this TestOrderPaymentMethod.
        :type expiration_month: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this TestOrderPaymentMethod.

        The card expiration year (4-digit, e.g. 2015).

        :return: The expiration_year of this TestOrderPaymentMethod.
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this TestOrderPaymentMethod.

        The card expiration year (4-digit, e.g. 2015).

        :param expiration_year: The expiration_year of this TestOrderPaymentMethod.
        :type expiration_year: int
        """

        self._expiration_year = expiration_year

    @property
    def last_four_digits(self):
        """Gets the last_four_digits of this TestOrderPaymentMethod.

        The last four digits of the card number.

        :return: The last_four_digits of this TestOrderPaymentMethod.
        :rtype: str
        """
        return self._last_four_digits

    @last_four_digits.setter
    def last_four_digits(self, last_four_digits):
        """Sets the last_four_digits of this TestOrderPaymentMethod.

        The last four digits of the card number.

        :param last_four_digits: The last_four_digits of this TestOrderPaymentMethod.
        :type last_four_digits: str
        """

        self._last_four_digits = last_four_digits

    @property
    def predefined_billing_address(self):
        """Gets the predefined_billing_address of this TestOrderPaymentMethod.

        The billing address. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :return: The predefined_billing_address of this TestOrderPaymentMethod.
        :rtype: str
        """
        return self._predefined_billing_address

    @predefined_billing_address.setter
    def predefined_billing_address(self, predefined_billing_address):
        """Sets the predefined_billing_address of this TestOrderPaymentMethod.

        The billing address. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" 

        :param predefined_billing_address: The predefined_billing_address of this TestOrderPaymentMethod.
        :type predefined_billing_address: str
        """

        self._predefined_billing_address = predefined_billing_address

    @property
    def type(self):
        """Gets the type of this TestOrderPaymentMethod.

        The type of instrument. Note that real orders might have different values than the four values accepted by `createTestOrder`. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`MASTERCARD`\" - \"`VISA`\" 

        :return: The type of this TestOrderPaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TestOrderPaymentMethod.

        The type of instrument. Note that real orders might have different values than the four values accepted by `createTestOrder`. Acceptable values are: - \"`AMEX`\" - \"`DISCOVER`\" - \"`MASTERCARD`\" - \"`VISA`\" 

        :param type: The type of this TestOrderPaymentMethod.
        :type type: str
        """

        self._type = type
