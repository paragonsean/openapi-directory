# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price import Price
from openapi_server import util


class UnitInvoiceTaxLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tax_amount: Price=None, tax_name: str=None, tax_type: str=None):
        """UnitInvoiceTaxLine - a model defined in OpenAPI

        :param tax_amount: The tax_amount of this UnitInvoiceTaxLine.
        :param tax_name: The tax_name of this UnitInvoiceTaxLine.
        :param tax_type: The tax_type of this UnitInvoiceTaxLine.
        """
        self.openapi_types = {
            'tax_amount': Price,
            'tax_name': str,
            'tax_type': str
        }

        self.attribute_map = {
            'tax_amount': 'taxAmount',
            'tax_name': 'taxName',
            'tax_type': 'taxType'
        }

        self._tax_amount = tax_amount
        self._tax_name = tax_name
        self._tax_type = tax_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnitInvoiceTaxLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnitInvoiceTaxLine of this UnitInvoiceTaxLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tax_amount(self):
        """Gets the tax_amount of this UnitInvoiceTaxLine.


        :return: The tax_amount of this UnitInvoiceTaxLine.
        :rtype: Price
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this UnitInvoiceTaxLine.


        :param tax_amount: The tax_amount of this UnitInvoiceTaxLine.
        :type tax_amount: Price
        """

        self._tax_amount = tax_amount

    @property
    def tax_name(self):
        """Gets the tax_name of this UnitInvoiceTaxLine.

        Optional name of the tax type. This should only be provided if `taxType` is `otherFeeTax`.

        :return: The tax_name of this UnitInvoiceTaxLine.
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this UnitInvoiceTaxLine.

        Optional name of the tax type. This should only be provided if `taxType` is `otherFeeTax`.

        :param tax_name: The tax_name of this UnitInvoiceTaxLine.
        :type tax_name: str
        """

        self._tax_name = tax_name

    @property
    def tax_type(self):
        """Gets the tax_type of this UnitInvoiceTaxLine.

        [required] Type of the tax. Acceptable values are: - \"`otherFee`\" - \"`otherFeeTax`\" - \"`sales`\" 

        :return: The tax_type of this UnitInvoiceTaxLine.
        :rtype: str
        """
        return self._tax_type

    @tax_type.setter
    def tax_type(self, tax_type):
        """Sets the tax_type of this UnitInvoiceTaxLine.

        [required] Type of the tax. Acceptable values are: - \"`otherFee`\" - \"`otherFeeTax`\" - \"`sales`\" 

        :param tax_type: The tax_type of this UnitInvoiceTaxLine.
        :type tax_type: str
        """

        self._tax_type = tax_type
