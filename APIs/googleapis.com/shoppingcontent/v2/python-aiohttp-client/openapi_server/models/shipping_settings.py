# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.postal_code_group import PostalCodeGroup
from openapi_server.models.service import Service
from openapi_server.models.warehouse import Warehouse
from openapi_server import util


class ShippingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, postal_code_groups: List[PostalCodeGroup]=None, services: List[Service]=None, warehouses: List[Warehouse]=None):
        """ShippingSettings - a model defined in OpenAPI

        :param account_id: The account_id of this ShippingSettings.
        :param postal_code_groups: The postal_code_groups of this ShippingSettings.
        :param services: The services of this ShippingSettings.
        :param warehouses: The warehouses of this ShippingSettings.
        """
        self.openapi_types = {
            'account_id': str,
            'postal_code_groups': List[PostalCodeGroup],
            'services': List[Service],
            'warehouses': List[Warehouse]
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'postal_code_groups': 'postalCodeGroups',
            'services': 'services',
            'warehouses': 'warehouses'
        }

        self._account_id = account_id
        self._postal_code_groups = postal_code_groups
        self._services = services
        self._warehouses = warehouses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingSettings of this ShippingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ShippingSettings.

        The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.

        :return: The account_id of this ShippingSettings.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ShippingSettings.

        The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.

        :param account_id: The account_id of this ShippingSettings.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def postal_code_groups(self):
        """Gets the postal_code_groups of this ShippingSettings.

        A list of postal code groups that can be referred to in `services`. Optional.

        :return: The postal_code_groups of this ShippingSettings.
        :rtype: List[PostalCodeGroup]
        """
        return self._postal_code_groups

    @postal_code_groups.setter
    def postal_code_groups(self, postal_code_groups):
        """Sets the postal_code_groups of this ShippingSettings.

        A list of postal code groups that can be referred to in `services`. Optional.

        :param postal_code_groups: The postal_code_groups of this ShippingSettings.
        :type postal_code_groups: List[PostalCodeGroup]
        """

        self._postal_code_groups = postal_code_groups

    @property
    def services(self):
        """Gets the services of this ShippingSettings.

        The target account's list of services. Optional.

        :return: The services of this ShippingSettings.
        :rtype: List[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this ShippingSettings.

        The target account's list of services. Optional.

        :param services: The services of this ShippingSettings.
        :type services: List[Service]
        """

        self._services = services

    @property
    def warehouses(self):
        """Gets the warehouses of this ShippingSettings.

        Optional. A list of warehouses which can be referred to in `services`.

        :return: The warehouses of this ShippingSettings.
        :rtype: List[Warehouse]
        """
        return self._warehouses

    @warehouses.setter
    def warehouses(self, warehouses):
        """Sets the warehouses of this ShippingSettings.

        Optional. A list of warehouses which can be referred to in `services`.

        :param warehouses: The warehouses of this ShippingSettings.
        :type warehouses: List[Warehouse]
        """

        self._warehouses = warehouses
