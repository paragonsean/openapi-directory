/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PosCustomBatchRequest from '../model/PosCustomBatchRequest';
import PosCustomBatchResponse from '../model/PosCustomBatchResponse';
import PosInventoryRequest from '../model/PosInventoryRequest';
import PosInventoryResponse from '../model/PosInventoryResponse';
import PosListResponse from '../model/PosListResponse';
import PosSaleRequest from '../model/PosSaleRequest';
import PosSaleResponse from '../model/PosSaleResponse';
import PosStore from '../model/PosStore';

/**
* Pos service.
* @module api/PosApi
* @version v2
*/
export default class PosApi {

    /**
    * Constructs a new PosApi. 
    * @alias module:api/PosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the contentPosCustombatch operation.
     * @callback module:api/PosApi~contentPosCustombatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosCustomBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batches multiple POS-related calls in a single request.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/PosCustomBatchRequest} [posCustomBatchRequest] 
     * @param {module:api/PosApi~contentPosCustombatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosCustomBatchResponse}
     */
    contentPosCustombatch(opts, callback) {
      opts = opts || {};
      let postBody = opts['posCustomBatchRequest'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PosCustomBatchResponse;
      return this.apiClient.callApi(
        '/pos/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosDelete operation.
     * @callback module:api/PosApi~contentPosDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a store for the given merchant.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {String} storeCode A store code that is unique per merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:api/PosApi~contentPosDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    contentPosDelete(merchantId, targetMerchantId, storeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosDelete");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosDelete");
      }
      // verify the required parameter 'storeCode' is set
      if (storeCode === undefined || storeCode === null) {
        throw new Error("Missing the required parameter 'storeCode' when calling contentPosDelete");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId,
        'storeCode': storeCode
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosGet operation.
     * @callback module:api/PosApi~contentPosGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about the given store.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {String} storeCode A store code that is unique per merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/PosApi~contentPosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosStore}
     */
    contentPosGet(merchantId, targetMerchantId, storeCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosGet");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosGet");
      }
      // verify the required parameter 'storeCode' is set
      if (storeCode === undefined || storeCode === null) {
        throw new Error("Missing the required parameter 'storeCode' when calling contentPosGet");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId,
        'storeCode': storeCode
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PosStore;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/store/{storeCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosInsert operation.
     * @callback module:api/PosApi~contentPosInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a store for the given merchant.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/PosStore} [posStore] 
     * @param {module:api/PosApi~contentPosInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosStore}
     */
    contentPosInsert(merchantId, targetMerchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['posStore'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosInsert");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosInsert");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PosStore;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/store', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosInventory operation.
     * @callback module:api/PosApi~contentPosInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosInventoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit inventory for the given merchant.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/PosInventoryRequest} [posInventoryRequest] 
     * @param {module:api/PosApi~contentPosInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosInventoryResponse}
     */
    contentPosInventory(merchantId, targetMerchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['posInventoryRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosInventory");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosInventory");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PosInventoryResponse;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/inventory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosList operation.
     * @callback module:api/PosApi~contentPosListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the stores of the target merchant.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/PosApi~contentPosListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosListResponse}
     */
    contentPosList(merchantId, targetMerchantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosList");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosList");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PosListResponse;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/store', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the contentPosSale operation.
     * @callback module:api/PosApi~contentPosSaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PosSaleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a sale event for the given merchant.
     * @param {String} merchantId The ID of the POS or inventory data provider.
     * @param {String} targetMerchantId The ID of the target merchant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [dryRun] Flag to simulate a request like in a live environment. If set to true, dry-run mode checks the validity of the request and returns errors (if any).
     * @param {module:model/PosSaleRequest} [posSaleRequest] 
     * @param {module:api/PosApi~contentPosSaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PosSaleResponse}
     */
    contentPosSale(merchantId, targetMerchantId, opts, callback) {
      opts = opts || {};
      let postBody = opts['posSaleRequest'];
      // verify the required parameter 'merchantId' is set
      if (merchantId === undefined || merchantId === null) {
        throw new Error("Missing the required parameter 'merchantId' when calling contentPosSale");
      }
      // verify the required parameter 'targetMerchantId' is set
      if (targetMerchantId === undefined || targetMerchantId === null) {
        throw new Error("Missing the required parameter 'targetMerchantId' when calling contentPosSale");
      }

      let pathParams = {
        'merchantId': merchantId,
        'targetMerchantId': targetMerchantId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'dryRun': opts['dryRun']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PosSaleResponse;
      return this.apiClient.callApi(
        '/{merchantId}/pos/{targetMerchantId}/sale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
