/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosInventory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosInventory::OAIPosInventory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosInventory::OAIPosInventory() {
    this->initializeModel();
}

OAIPosInventory::~OAIPosInventory() {}

void OAIPosInventory::initializeModel() {

    m_content_language_isSet = false;
    m_content_language_isValid = false;

    m_gtin_isSet = false;
    m_gtin_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_store_code_isSet = false;
    m_store_code_isValid = false;

    m_target_country_isSet = false;
    m_target_country_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIPosInventory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosInventory::fromJsonObject(QJsonObject json) {

    m_content_language_isValid = ::OpenAPI::fromJsonValue(m_content_language, json[QString("contentLanguage")]);
    m_content_language_isSet = !json[QString("contentLanguage")].isNull() && m_content_language_isValid;

    m_gtin_isValid = ::OpenAPI::fromJsonValue(m_gtin, json[QString("gtin")]);
    m_gtin_isSet = !json[QString("gtin")].isNull() && m_gtin_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_store_code_isValid = ::OpenAPI::fromJsonValue(m_store_code, json[QString("storeCode")]);
    m_store_code_isSet = !json[QString("storeCode")].isNull() && m_store_code_isValid;

    m_target_country_isValid = ::OpenAPI::fromJsonValue(m_target_country, json[QString("targetCountry")]);
    m_target_country_isSet = !json[QString("targetCountry")].isNull() && m_target_country_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIPosInventory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosInventory::asJsonObject() const {
    QJsonObject obj;
    if (m_content_language_isSet) {
        obj.insert(QString("contentLanguage"), ::OpenAPI::toJsonValue(m_content_language));
    }
    if (m_gtin_isSet) {
        obj.insert(QString("gtin"), ::OpenAPI::toJsonValue(m_gtin));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_store_code_isSet) {
        obj.insert(QString("storeCode"), ::OpenAPI::toJsonValue(m_store_code));
    }
    if (m_target_country_isSet) {
        obj.insert(QString("targetCountry"), ::OpenAPI::toJsonValue(m_target_country));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

QString OAIPosInventory::getContentLanguage() const {
    return m_content_language;
}
void OAIPosInventory::setContentLanguage(const QString &content_language) {
    m_content_language = content_language;
    m_content_language_isSet = true;
}

bool OAIPosInventory::is_content_language_Set() const{
    return m_content_language_isSet;
}

bool OAIPosInventory::is_content_language_Valid() const{
    return m_content_language_isValid;
}

QString OAIPosInventory::getGtin() const {
    return m_gtin;
}
void OAIPosInventory::setGtin(const QString &gtin) {
    m_gtin = gtin;
    m_gtin_isSet = true;
}

bool OAIPosInventory::is_gtin_Set() const{
    return m_gtin_isSet;
}

bool OAIPosInventory::is_gtin_Valid() const{
    return m_gtin_isValid;
}

QString OAIPosInventory::getItemId() const {
    return m_item_id;
}
void OAIPosInventory::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIPosInventory::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIPosInventory::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAIPosInventory::getKind() const {
    return m_kind;
}
void OAIPosInventory::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPosInventory::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPosInventory::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIPrice OAIPosInventory::getPrice() const {
    return m_price;
}
void OAIPosInventory::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAIPosInventory::is_price_Set() const{
    return m_price_isSet;
}

bool OAIPosInventory::is_price_Valid() const{
    return m_price_isValid;
}

QString OAIPosInventory::getQuantity() const {
    return m_quantity;
}
void OAIPosInventory::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIPosInventory::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIPosInventory::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIPosInventory::getStoreCode() const {
    return m_store_code;
}
void OAIPosInventory::setStoreCode(const QString &store_code) {
    m_store_code = store_code;
    m_store_code_isSet = true;
}

bool OAIPosInventory::is_store_code_Set() const{
    return m_store_code_isSet;
}

bool OAIPosInventory::is_store_code_Valid() const{
    return m_store_code_isValid;
}

QString OAIPosInventory::getTargetCountry() const {
    return m_target_country;
}
void OAIPosInventory::setTargetCountry(const QString &target_country) {
    m_target_country = target_country;
    m_target_country_isSet = true;
}

bool OAIPosInventory::is_target_country_Set() const{
    return m_target_country_isSet;
}

bool OAIPosInventory::is_target_country_Valid() const{
    return m_target_country_isValid;
}

QString OAIPosInventory::getTimestamp() const {
    return m_timestamp;
}
void OAIPosInventory::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPosInventory::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPosInventory::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIPosInventory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gtin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosInventory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
