/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedFetchSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedFetchSchedule::OAIDatafeedFetchSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedFetchSchedule::OAIDatafeedFetchSchedule() {
    this->initializeModel();
}

OAIDatafeedFetchSchedule::~OAIDatafeedFetchSchedule() {}

void OAIDatafeedFetchSchedule::initializeModel() {

    m_day_of_month_isSet = false;
    m_day_of_month_isValid = false;

    m_fetch_url_isSet = false;
    m_fetch_url_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;

    m_minute_of_hour_isSet = false;
    m_minute_of_hour_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_paused_isSet = false;
    m_paused_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_weekday_isSet = false;
    m_weekday_isValid = false;
}

void OAIDatafeedFetchSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedFetchSchedule::fromJsonObject(QJsonObject json) {

    m_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_day_of_month, json[QString("dayOfMonth")]);
    m_day_of_month_isSet = !json[QString("dayOfMonth")].isNull() && m_day_of_month_isValid;

    m_fetch_url_isValid = ::OpenAPI::fromJsonValue(m_fetch_url, json[QString("fetchUrl")]);
    m_fetch_url_isSet = !json[QString("fetchUrl")].isNull() && m_fetch_url_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("hour")]);
    m_hour_isSet = !json[QString("hour")].isNull() && m_hour_isValid;

    m_minute_of_hour_isValid = ::OpenAPI::fromJsonValue(m_minute_of_hour, json[QString("minuteOfHour")]);
    m_minute_of_hour_isSet = !json[QString("minuteOfHour")].isNull() && m_minute_of_hour_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_paused_isValid = ::OpenAPI::fromJsonValue(m_paused, json[QString("paused")]);
    m_paused_isSet = !json[QString("paused")].isNull() && m_paused_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_weekday_isValid = ::OpenAPI::fromJsonValue(m_weekday, json[QString("weekday")]);
    m_weekday_isSet = !json[QString("weekday")].isNull() && m_weekday_isValid;
}

QString OAIDatafeedFetchSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedFetchSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_month_isSet) {
        obj.insert(QString("dayOfMonth"), ::OpenAPI::toJsonValue(m_day_of_month));
    }
    if (m_fetch_url_isSet) {
        obj.insert(QString("fetchUrl"), ::OpenAPI::toJsonValue(m_fetch_url));
    }
    if (m_hour_isSet) {
        obj.insert(QString("hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    if (m_minute_of_hour_isSet) {
        obj.insert(QString("minuteOfHour"), ::OpenAPI::toJsonValue(m_minute_of_hour));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_paused_isSet) {
        obj.insert(QString("paused"), ::OpenAPI::toJsonValue(m_paused));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_weekday_isSet) {
        obj.insert(QString("weekday"), ::OpenAPI::toJsonValue(m_weekday));
    }
    return obj;
}

qint32 OAIDatafeedFetchSchedule::getDayOfMonth() const {
    return m_day_of_month;
}
void OAIDatafeedFetchSchedule::setDayOfMonth(const qint32 &day_of_month) {
    m_day_of_month = day_of_month;
    m_day_of_month_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_day_of_month_Set() const{
    return m_day_of_month_isSet;
}

bool OAIDatafeedFetchSchedule::is_day_of_month_Valid() const{
    return m_day_of_month_isValid;
}

QString OAIDatafeedFetchSchedule::getFetchUrl() const {
    return m_fetch_url;
}
void OAIDatafeedFetchSchedule::setFetchUrl(const QString &fetch_url) {
    m_fetch_url = fetch_url;
    m_fetch_url_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_fetch_url_Set() const{
    return m_fetch_url_isSet;
}

bool OAIDatafeedFetchSchedule::is_fetch_url_Valid() const{
    return m_fetch_url_isValid;
}

qint32 OAIDatafeedFetchSchedule::getHour() const {
    return m_hour;
}
void OAIDatafeedFetchSchedule::setHour(const qint32 &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAIDatafeedFetchSchedule::is_hour_Valid() const{
    return m_hour_isValid;
}

qint32 OAIDatafeedFetchSchedule::getMinuteOfHour() const {
    return m_minute_of_hour;
}
void OAIDatafeedFetchSchedule::setMinuteOfHour(const qint32 &minute_of_hour) {
    m_minute_of_hour = minute_of_hour;
    m_minute_of_hour_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_minute_of_hour_Set() const{
    return m_minute_of_hour_isSet;
}

bool OAIDatafeedFetchSchedule::is_minute_of_hour_Valid() const{
    return m_minute_of_hour_isValid;
}

QString OAIDatafeedFetchSchedule::getPassword() const {
    return m_password;
}
void OAIDatafeedFetchSchedule::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_password_Set() const{
    return m_password_isSet;
}

bool OAIDatafeedFetchSchedule::is_password_Valid() const{
    return m_password_isValid;
}

bool OAIDatafeedFetchSchedule::isPaused() const {
    return m_paused;
}
void OAIDatafeedFetchSchedule::setPaused(const bool &paused) {
    m_paused = paused;
    m_paused_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_paused_Set() const{
    return m_paused_isSet;
}

bool OAIDatafeedFetchSchedule::is_paused_Valid() const{
    return m_paused_isValid;
}

QString OAIDatafeedFetchSchedule::getTimeZone() const {
    return m_time_zone;
}
void OAIDatafeedFetchSchedule::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIDatafeedFetchSchedule::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIDatafeedFetchSchedule::getUsername() const {
    return m_username;
}
void OAIDatafeedFetchSchedule::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_username_Set() const{
    return m_username_isSet;
}

bool OAIDatafeedFetchSchedule::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIDatafeedFetchSchedule::getWeekday() const {
    return m_weekday;
}
void OAIDatafeedFetchSchedule::setWeekday(const QString &weekday) {
    m_weekday = weekday;
    m_weekday_isSet = true;
}

bool OAIDatafeedFetchSchedule::is_weekday_Set() const{
    return m_weekday_isSet;
}

bool OAIDatafeedFetchSchedule::is_weekday_Valid() const{
    return m_weekday_isValid;
}

bool OAIDatafeedFetchSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minute_of_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weekday_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedFetchSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
