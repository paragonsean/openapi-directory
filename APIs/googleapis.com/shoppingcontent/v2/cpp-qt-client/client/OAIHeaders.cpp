/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHeaders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHeaders::OAIHeaders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHeaders::OAIHeaders() {
    this->initializeModel();
}

OAIHeaders::~OAIHeaders() {}

void OAIHeaders::initializeModel() {

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_number_of_items_isSet = false;
    m_number_of_items_isValid = false;

    m_postal_code_group_names_isSet = false;
    m_postal_code_group_names_isValid = false;

    m_prices_isSet = false;
    m_prices_isValid = false;

    m_weights_isSet = false;
    m_weights_isValid = false;
}

void OAIHeaders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHeaders::fromJsonObject(QJsonObject json) {

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_number_of_items_isValid = ::OpenAPI::fromJsonValue(m_number_of_items, json[QString("numberOfItems")]);
    m_number_of_items_isSet = !json[QString("numberOfItems")].isNull() && m_number_of_items_isValid;

    m_postal_code_group_names_isValid = ::OpenAPI::fromJsonValue(m_postal_code_group_names, json[QString("postalCodeGroupNames")]);
    m_postal_code_group_names_isSet = !json[QString("postalCodeGroupNames")].isNull() && m_postal_code_group_names_isValid;

    m_prices_isValid = ::OpenAPI::fromJsonValue(m_prices, json[QString("prices")]);
    m_prices_isSet = !json[QString("prices")].isNull() && m_prices_isValid;

    m_weights_isValid = ::OpenAPI::fromJsonValue(m_weights, json[QString("weights")]);
    m_weights_isSet = !json[QString("weights")].isNull() && m_weights_isValid;
}

QString OAIHeaders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHeaders::asJsonObject() const {
    QJsonObject obj;
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_number_of_items.size() > 0) {
        obj.insert(QString("numberOfItems"), ::OpenAPI::toJsonValue(m_number_of_items));
    }
    if (m_postal_code_group_names.size() > 0) {
        obj.insert(QString("postalCodeGroupNames"), ::OpenAPI::toJsonValue(m_postal_code_group_names));
    }
    if (m_prices.size() > 0) {
        obj.insert(QString("prices"), ::OpenAPI::toJsonValue(m_prices));
    }
    if (m_weights.size() > 0) {
        obj.insert(QString("weights"), ::OpenAPI::toJsonValue(m_weights));
    }
    return obj;
}

QList<OAILocationIdSet> OAIHeaders::getLocations() const {
    return m_locations;
}
void OAIHeaders::setLocations(const QList<OAILocationIdSet> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIHeaders::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIHeaders::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAIHeaders::getNumberOfItems() const {
    return m_number_of_items;
}
void OAIHeaders::setNumberOfItems(const QList<QString> &number_of_items) {
    m_number_of_items = number_of_items;
    m_number_of_items_isSet = true;
}

bool OAIHeaders::is_number_of_items_Set() const{
    return m_number_of_items_isSet;
}

bool OAIHeaders::is_number_of_items_Valid() const{
    return m_number_of_items_isValid;
}

QList<QString> OAIHeaders::getPostalCodeGroupNames() const {
    return m_postal_code_group_names;
}
void OAIHeaders::setPostalCodeGroupNames(const QList<QString> &postal_code_group_names) {
    m_postal_code_group_names = postal_code_group_names;
    m_postal_code_group_names_isSet = true;
}

bool OAIHeaders::is_postal_code_group_names_Set() const{
    return m_postal_code_group_names_isSet;
}

bool OAIHeaders::is_postal_code_group_names_Valid() const{
    return m_postal_code_group_names_isValid;
}

QList<OAIPrice> OAIHeaders::getPrices() const {
    return m_prices;
}
void OAIHeaders::setPrices(const QList<OAIPrice> &prices) {
    m_prices = prices;
    m_prices_isSet = true;
}

bool OAIHeaders::is_prices_Set() const{
    return m_prices_isSet;
}

bool OAIHeaders::is_prices_Valid() const{
    return m_prices_isValid;
}

QList<OAIWeight> OAIHeaders::getWeights() const {
    return m_weights;
}
void OAIHeaders::setWeights(const QList<OAIWeight> &weights) {
    m_weights = weights;
    m_weights_isSet = true;
}

bool OAIHeaders::is_weights_Set() const{
    return m_weights_isSet;
}

bool OAIHeaders::is_weights_Valid() const{
    return m_weights_isValid;
}

bool OAIHeaders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_group_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_weights.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHeaders::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
