/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestOrder::OAITestOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestOrder::OAITestOrder() {
    this->initializeModel();
}

OAITestOrder::~OAITestOrder() {}

void OAITestOrder::initializeModel() {

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_enable_orderinvoices_isSet = false;
    m_enable_orderinvoices_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_notification_mode_isSet = false;
    m_notification_mode_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_predefined_delivery_address_isSet = false;
    m_predefined_delivery_address_isValid = false;

    m_predefined_pickup_details_isSet = false;
    m_predefined_pickup_details_isValid = false;

    m_promotions_isSet = false;
    m_promotions_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_cost_tax_isSet = false;
    m_shipping_cost_tax_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;
}

void OAITestOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestOrder::fromJsonObject(QJsonObject json) {

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_enable_orderinvoices_isValid = ::OpenAPI::fromJsonValue(m_enable_orderinvoices, json[QString("enableOrderinvoices")]);
    m_enable_orderinvoices_isSet = !json[QString("enableOrderinvoices")].isNull() && m_enable_orderinvoices_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_notification_mode_isValid = ::OpenAPI::fromJsonValue(m_notification_mode, json[QString("notificationMode")]);
    m_notification_mode_isSet = !json[QString("notificationMode")].isNull() && m_notification_mode_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_predefined_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_predefined_delivery_address, json[QString("predefinedDeliveryAddress")]);
    m_predefined_delivery_address_isSet = !json[QString("predefinedDeliveryAddress")].isNull() && m_predefined_delivery_address_isValid;

    m_predefined_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_predefined_pickup_details, json[QString("predefinedPickupDetails")]);
    m_predefined_pickup_details_isSet = !json[QString("predefinedPickupDetails")].isNull() && m_predefined_pickup_details_isValid;

    m_promotions_isValid = ::OpenAPI::fromJsonValue(m_promotions, json[QString("promotions")]);
    m_promotions_isSet = !json[QString("promotions")].isNull() && m_promotions_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shippingCost")]);
    m_shipping_cost_isSet = !json[QString("shippingCost")].isNull() && m_shipping_cost_isValid;

    m_shipping_cost_tax_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost_tax, json[QString("shippingCostTax")]);
    m_shipping_cost_tax_isSet = !json[QString("shippingCostTax")].isNull() && m_shipping_cost_tax_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("shippingOption")]);
    m_shipping_option_isSet = !json[QString("shippingOption")].isNull() && m_shipping_option_isValid;
}

QString OAITestOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_customer.isSet()) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_enable_orderinvoices_isSet) {
        obj.insert(QString("enableOrderinvoices"), ::OpenAPI::toJsonValue(m_enable_orderinvoices));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_notification_mode_isSet) {
        obj.insert(QString("notificationMode"), ::OpenAPI::toJsonValue(m_notification_mode));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_predefined_delivery_address_isSet) {
        obj.insert(QString("predefinedDeliveryAddress"), ::OpenAPI::toJsonValue(m_predefined_delivery_address));
    }
    if (m_predefined_pickup_details_isSet) {
        obj.insert(QString("predefinedPickupDetails"), ::OpenAPI::toJsonValue(m_predefined_pickup_details));
    }
    if (m_promotions.size() > 0) {
        obj.insert(QString("promotions"), ::OpenAPI::toJsonValue(m_promotions));
    }
    if (m_shipping_cost.isSet()) {
        obj.insert(QString("shippingCost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_cost_tax.isSet()) {
        obj.insert(QString("shippingCostTax"), ::OpenAPI::toJsonValue(m_shipping_cost_tax));
    }
    if (m_shipping_option_isSet) {
        obj.insert(QString("shippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    return obj;
}

OAITestOrderCustomer OAITestOrder::getCustomer() const {
    return m_customer;
}
void OAITestOrder::setCustomer(const OAITestOrderCustomer &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAITestOrder::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAITestOrder::is_customer_Valid() const{
    return m_customer_isValid;
}

bool OAITestOrder::isEnableOrderinvoices() const {
    return m_enable_orderinvoices;
}
void OAITestOrder::setEnableOrderinvoices(const bool &enable_orderinvoices) {
    m_enable_orderinvoices = enable_orderinvoices;
    m_enable_orderinvoices_isSet = true;
}

bool OAITestOrder::is_enable_orderinvoices_Set() const{
    return m_enable_orderinvoices_isSet;
}

bool OAITestOrder::is_enable_orderinvoices_Valid() const{
    return m_enable_orderinvoices_isValid;
}

QString OAITestOrder::getKind() const {
    return m_kind;
}
void OAITestOrder::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITestOrder::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITestOrder::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAITestOrderLineItem> OAITestOrder::getLineItems() const {
    return m_line_items;
}
void OAITestOrder::setLineItems(const QList<OAITestOrderLineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAITestOrder::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAITestOrder::is_line_items_Valid() const{
    return m_line_items_isValid;
}

QString OAITestOrder::getNotificationMode() const {
    return m_notification_mode;
}
void OAITestOrder::setNotificationMode(const QString &notification_mode) {
    m_notification_mode = notification_mode;
    m_notification_mode_isSet = true;
}

bool OAITestOrder::is_notification_mode_Set() const{
    return m_notification_mode_isSet;
}

bool OAITestOrder::is_notification_mode_Valid() const{
    return m_notification_mode_isValid;
}

OAITestOrderPaymentMethod OAITestOrder::getPaymentMethod() const {
    return m_payment_method;
}
void OAITestOrder::setPaymentMethod(const OAITestOrderPaymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAITestOrder::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAITestOrder::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAITestOrder::getPredefinedDeliveryAddress() const {
    return m_predefined_delivery_address;
}
void OAITestOrder::setPredefinedDeliveryAddress(const QString &predefined_delivery_address) {
    m_predefined_delivery_address = predefined_delivery_address;
    m_predefined_delivery_address_isSet = true;
}

bool OAITestOrder::is_predefined_delivery_address_Set() const{
    return m_predefined_delivery_address_isSet;
}

bool OAITestOrder::is_predefined_delivery_address_Valid() const{
    return m_predefined_delivery_address_isValid;
}

QString OAITestOrder::getPredefinedPickupDetails() const {
    return m_predefined_pickup_details;
}
void OAITestOrder::setPredefinedPickupDetails(const QString &predefined_pickup_details) {
    m_predefined_pickup_details = predefined_pickup_details;
    m_predefined_pickup_details_isSet = true;
}

bool OAITestOrder::is_predefined_pickup_details_Set() const{
    return m_predefined_pickup_details_isSet;
}

bool OAITestOrder::is_predefined_pickup_details_Valid() const{
    return m_predefined_pickup_details_isValid;
}

QList<OAIOrderLegacyPromotion> OAITestOrder::getPromotions() const {
    return m_promotions;
}
void OAITestOrder::setPromotions(const QList<OAIOrderLegacyPromotion> &promotions) {
    m_promotions = promotions;
    m_promotions_isSet = true;
}

bool OAITestOrder::is_promotions_Set() const{
    return m_promotions_isSet;
}

bool OAITestOrder::is_promotions_Valid() const{
    return m_promotions_isValid;
}

OAIPrice OAITestOrder::getShippingCost() const {
    return m_shipping_cost;
}
void OAITestOrder::setShippingCost(const OAIPrice &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAITestOrder::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAITestOrder::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

OAIPrice OAITestOrder::getShippingCostTax() const {
    return m_shipping_cost_tax;
}
void OAITestOrder::setShippingCostTax(const OAIPrice &shipping_cost_tax) {
    m_shipping_cost_tax = shipping_cost_tax;
    m_shipping_cost_tax_isSet = true;
}

bool OAITestOrder::is_shipping_cost_tax_Set() const{
    return m_shipping_cost_tax_isSet;
}

bool OAITestOrder::is_shipping_cost_tax_Valid() const{
    return m_shipping_cost_tax_isValid;
}

QString OAITestOrder::getShippingOption() const {
    return m_shipping_option;
}
void OAITestOrder::setShippingOption(const QString &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAITestOrder::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAITestOrder::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

bool OAITestOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_orderinvoices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_delivery_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_pickup_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
