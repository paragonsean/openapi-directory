/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderLegacyPromotion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderLegacyPromotion::OAIOrderLegacyPromotion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderLegacyPromotion::OAIOrderLegacyPromotion() {
    this->initializeModel();
}

OAIOrderLegacyPromotion::~OAIOrderLegacyPromotion() {}

void OAIOrderLegacyPromotion::initializeModel() {

    m_benefits_isSet = false;
    m_benefits_isValid = false;

    m_effective_dates_isSet = false;
    m_effective_dates_isValid = false;

    m_generic_redemption_code_isSet = false;
    m_generic_redemption_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_long_title_isSet = false;
    m_long_title_isValid = false;

    m_product_applicability_isSet = false;
    m_product_applicability_isValid = false;

    m_redemption_channel_isSet = false;
    m_redemption_channel_isValid = false;
}

void OAIOrderLegacyPromotion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderLegacyPromotion::fromJsonObject(QJsonObject json) {

    m_benefits_isValid = ::OpenAPI::fromJsonValue(m_benefits, json[QString("benefits")]);
    m_benefits_isSet = !json[QString("benefits")].isNull() && m_benefits_isValid;

    m_effective_dates_isValid = ::OpenAPI::fromJsonValue(m_effective_dates, json[QString("effectiveDates")]);
    m_effective_dates_isSet = !json[QString("effectiveDates")].isNull() && m_effective_dates_isValid;

    m_generic_redemption_code_isValid = ::OpenAPI::fromJsonValue(m_generic_redemption_code, json[QString("genericRedemptionCode")]);
    m_generic_redemption_code_isSet = !json[QString("genericRedemptionCode")].isNull() && m_generic_redemption_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_long_title_isValid = ::OpenAPI::fromJsonValue(m_long_title, json[QString("longTitle")]);
    m_long_title_isSet = !json[QString("longTitle")].isNull() && m_long_title_isValid;

    m_product_applicability_isValid = ::OpenAPI::fromJsonValue(m_product_applicability, json[QString("productApplicability")]);
    m_product_applicability_isSet = !json[QString("productApplicability")].isNull() && m_product_applicability_isValid;

    m_redemption_channel_isValid = ::OpenAPI::fromJsonValue(m_redemption_channel, json[QString("redemptionChannel")]);
    m_redemption_channel_isSet = !json[QString("redemptionChannel")].isNull() && m_redemption_channel_isValid;
}

QString OAIOrderLegacyPromotion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderLegacyPromotion::asJsonObject() const {
    QJsonObject obj;
    if (m_benefits.size() > 0) {
        obj.insert(QString("benefits"), ::OpenAPI::toJsonValue(m_benefits));
    }
    if (m_effective_dates_isSet) {
        obj.insert(QString("effectiveDates"), ::OpenAPI::toJsonValue(m_effective_dates));
    }
    if (m_generic_redemption_code_isSet) {
        obj.insert(QString("genericRedemptionCode"), ::OpenAPI::toJsonValue(m_generic_redemption_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_long_title_isSet) {
        obj.insert(QString("longTitle"), ::OpenAPI::toJsonValue(m_long_title));
    }
    if (m_product_applicability_isSet) {
        obj.insert(QString("productApplicability"), ::OpenAPI::toJsonValue(m_product_applicability));
    }
    if (m_redemption_channel_isSet) {
        obj.insert(QString("redemptionChannel"), ::OpenAPI::toJsonValue(m_redemption_channel));
    }
    return obj;
}

QList<OAIOrderLegacyPromotionBenefit> OAIOrderLegacyPromotion::getBenefits() const {
    return m_benefits;
}
void OAIOrderLegacyPromotion::setBenefits(const QList<OAIOrderLegacyPromotionBenefit> &benefits) {
    m_benefits = benefits;
    m_benefits_isSet = true;
}

bool OAIOrderLegacyPromotion::is_benefits_Set() const{
    return m_benefits_isSet;
}

bool OAIOrderLegacyPromotion::is_benefits_Valid() const{
    return m_benefits_isValid;
}

QString OAIOrderLegacyPromotion::getEffectiveDates() const {
    return m_effective_dates;
}
void OAIOrderLegacyPromotion::setEffectiveDates(const QString &effective_dates) {
    m_effective_dates = effective_dates;
    m_effective_dates_isSet = true;
}

bool OAIOrderLegacyPromotion::is_effective_dates_Set() const{
    return m_effective_dates_isSet;
}

bool OAIOrderLegacyPromotion::is_effective_dates_Valid() const{
    return m_effective_dates_isValid;
}

QString OAIOrderLegacyPromotion::getGenericRedemptionCode() const {
    return m_generic_redemption_code;
}
void OAIOrderLegacyPromotion::setGenericRedemptionCode(const QString &generic_redemption_code) {
    m_generic_redemption_code = generic_redemption_code;
    m_generic_redemption_code_isSet = true;
}

bool OAIOrderLegacyPromotion::is_generic_redemption_code_Set() const{
    return m_generic_redemption_code_isSet;
}

bool OAIOrderLegacyPromotion::is_generic_redemption_code_Valid() const{
    return m_generic_redemption_code_isValid;
}

QString OAIOrderLegacyPromotion::getId() const {
    return m_id;
}
void OAIOrderLegacyPromotion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrderLegacyPromotion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrderLegacyPromotion::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrderLegacyPromotion::getLongTitle() const {
    return m_long_title;
}
void OAIOrderLegacyPromotion::setLongTitle(const QString &long_title) {
    m_long_title = long_title;
    m_long_title_isSet = true;
}

bool OAIOrderLegacyPromotion::is_long_title_Set() const{
    return m_long_title_isSet;
}

bool OAIOrderLegacyPromotion::is_long_title_Valid() const{
    return m_long_title_isValid;
}

QString OAIOrderLegacyPromotion::getProductApplicability() const {
    return m_product_applicability;
}
void OAIOrderLegacyPromotion::setProductApplicability(const QString &product_applicability) {
    m_product_applicability = product_applicability;
    m_product_applicability_isSet = true;
}

bool OAIOrderLegacyPromotion::is_product_applicability_Set() const{
    return m_product_applicability_isSet;
}

bool OAIOrderLegacyPromotion::is_product_applicability_Valid() const{
    return m_product_applicability_isValid;
}

QString OAIOrderLegacyPromotion::getRedemptionChannel() const {
    return m_redemption_channel;
}
void OAIOrderLegacyPromotion::setRedemptionChannel(const QString &redemption_channel) {
    m_redemption_channel = redemption_channel;
    m_redemption_channel_isSet = true;
}

bool OAIOrderLegacyPromotion::is_redemption_channel_Set() const{
    return m_redemption_channel_isSet;
}

bool OAIOrderLegacyPromotion::is_redemption_channel_Valid() const{
    return m_redemption_channel_isValid;
}

bool OAIOrderLegacyPromotion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_benefits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_dates_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_redemption_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_applicability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redemption_channel_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderLegacyPromotion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
