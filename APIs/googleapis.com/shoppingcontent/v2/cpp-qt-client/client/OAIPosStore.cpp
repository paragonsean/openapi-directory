/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosStore::OAIPosStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosStore::OAIPosStore() {
    this->initializeModel();
}

OAIPosStore::~OAIPosStore() {}

void OAIPosStore::initializeModel() {

    m_gcid_category_isSet = false;
    m_gcid_category_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_place_id_isSet = false;
    m_place_id_isValid = false;

    m_store_address_isSet = false;
    m_store_address_isValid = false;

    m_store_code_isSet = false;
    m_store_code_isValid = false;

    m_store_name_isSet = false;
    m_store_name_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIPosStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosStore::fromJsonObject(QJsonObject json) {

    m_gcid_category_isValid = ::OpenAPI::fromJsonValue(m_gcid_category, json[QString("gcidCategory")]);
    m_gcid_category_isSet = !json[QString("gcidCategory")].isNull() && m_gcid_category_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_place_id_isValid = ::OpenAPI::fromJsonValue(m_place_id, json[QString("placeId")]);
    m_place_id_isSet = !json[QString("placeId")].isNull() && m_place_id_isValid;

    m_store_address_isValid = ::OpenAPI::fromJsonValue(m_store_address, json[QString("storeAddress")]);
    m_store_address_isSet = !json[QString("storeAddress")].isNull() && m_store_address_isValid;

    m_store_code_isValid = ::OpenAPI::fromJsonValue(m_store_code, json[QString("storeCode")]);
    m_store_code_isSet = !json[QString("storeCode")].isNull() && m_store_code_isValid;

    m_store_name_isValid = ::OpenAPI::fromJsonValue(m_store_name, json[QString("storeName")]);
    m_store_name_isSet = !json[QString("storeName")].isNull() && m_store_name_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAIPosStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosStore::asJsonObject() const {
    QJsonObject obj;
    if (m_gcid_category.size() > 0) {
        obj.insert(QString("gcidCategory"), ::OpenAPI::toJsonValue(m_gcid_category));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_place_id_isSet) {
        obj.insert(QString("placeId"), ::OpenAPI::toJsonValue(m_place_id));
    }
    if (m_store_address_isSet) {
        obj.insert(QString("storeAddress"), ::OpenAPI::toJsonValue(m_store_address));
    }
    if (m_store_code_isSet) {
        obj.insert(QString("storeCode"), ::OpenAPI::toJsonValue(m_store_code));
    }
    if (m_store_name_isSet) {
        obj.insert(QString("storeName"), ::OpenAPI::toJsonValue(m_store_name));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QList<QString> OAIPosStore::getGcidCategory() const {
    return m_gcid_category;
}
void OAIPosStore::setGcidCategory(const QList<QString> &gcid_category) {
    m_gcid_category = gcid_category;
    m_gcid_category_isSet = true;
}

bool OAIPosStore::is_gcid_category_Set() const{
    return m_gcid_category_isSet;
}

bool OAIPosStore::is_gcid_category_Valid() const{
    return m_gcid_category_isValid;
}

QString OAIPosStore::getKind() const {
    return m_kind;
}
void OAIPosStore::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPosStore::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPosStore::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIPosStore::getPhoneNumber() const {
    return m_phone_number;
}
void OAIPosStore::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIPosStore::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIPosStore::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIPosStore::getPlaceId() const {
    return m_place_id;
}
void OAIPosStore::setPlaceId(const QString &place_id) {
    m_place_id = place_id;
    m_place_id_isSet = true;
}

bool OAIPosStore::is_place_id_Set() const{
    return m_place_id_isSet;
}

bool OAIPosStore::is_place_id_Valid() const{
    return m_place_id_isValid;
}

QString OAIPosStore::getStoreAddress() const {
    return m_store_address;
}
void OAIPosStore::setStoreAddress(const QString &store_address) {
    m_store_address = store_address;
    m_store_address_isSet = true;
}

bool OAIPosStore::is_store_address_Set() const{
    return m_store_address_isSet;
}

bool OAIPosStore::is_store_address_Valid() const{
    return m_store_address_isValid;
}

QString OAIPosStore::getStoreCode() const {
    return m_store_code;
}
void OAIPosStore::setStoreCode(const QString &store_code) {
    m_store_code = store_code;
    m_store_code_isSet = true;
}

bool OAIPosStore::is_store_code_Set() const{
    return m_store_code_isSet;
}

bool OAIPosStore::is_store_code_Valid() const{
    return m_store_code_isValid;
}

QString OAIPosStore::getStoreName() const {
    return m_store_name;
}
void OAIPosStore::setStoreName(const QString &store_name) {
    m_store_name = store_name;
    m_store_name_isSet = true;
}

bool OAIPosStore::is_store_name_Set() const{
    return m_store_name_isSet;
}

bool OAIPosStore::is_store_name_Valid() const{
    return m_store_name_isValid;
}

QString OAIPosStore::getWebsiteUrl() const {
    return m_website_url;
}
void OAIPosStore::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIPosStore::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIPosStore::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIPosStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcid_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_place_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
