/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountTaxTaxRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountTaxTaxRule::OAIAccountTaxTaxRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountTaxTaxRule::OAIAccountTaxTaxRule() {
    this->initializeModel();
}

OAIAccountTaxTaxRule::~OAIAccountTaxTaxRule() {}

void OAIAccountTaxTaxRule::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_rate_percent_isSet = false;
    m_rate_percent_isValid = false;

    m_shipping_taxed_isSet = false;
    m_shipping_taxed_isValid = false;

    m_use_global_rate_isSet = false;
    m_use_global_rate_isValid = false;
}

void OAIAccountTaxTaxRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountTaxTaxRule::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("locationId")]);
    m_location_id_isSet = !json[QString("locationId")].isNull() && m_location_id_isValid;

    m_rate_percent_isValid = ::OpenAPI::fromJsonValue(m_rate_percent, json[QString("ratePercent")]);
    m_rate_percent_isSet = !json[QString("ratePercent")].isNull() && m_rate_percent_isValid;

    m_shipping_taxed_isValid = ::OpenAPI::fromJsonValue(m_shipping_taxed, json[QString("shippingTaxed")]);
    m_shipping_taxed_isSet = !json[QString("shippingTaxed")].isNull() && m_shipping_taxed_isValid;

    m_use_global_rate_isValid = ::OpenAPI::fromJsonValue(m_use_global_rate, json[QString("useGlobalRate")]);
    m_use_global_rate_isSet = !json[QString("useGlobalRate")].isNull() && m_use_global_rate_isValid;
}

QString OAIAccountTaxTaxRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountTaxTaxRule::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("locationId"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_rate_percent_isSet) {
        obj.insert(QString("ratePercent"), ::OpenAPI::toJsonValue(m_rate_percent));
    }
    if (m_shipping_taxed_isSet) {
        obj.insert(QString("shippingTaxed"), ::OpenAPI::toJsonValue(m_shipping_taxed));
    }
    if (m_use_global_rate_isSet) {
        obj.insert(QString("useGlobalRate"), ::OpenAPI::toJsonValue(m_use_global_rate));
    }
    return obj;
}

QString OAIAccountTaxTaxRule::getCountry() const {
    return m_country;
}
void OAIAccountTaxTaxRule::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAccountTaxTaxRule::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAccountTaxTaxRule::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAccountTaxTaxRule::getLocationId() const {
    return m_location_id;
}
void OAIAccountTaxTaxRule::setLocationId(const QString &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIAccountTaxTaxRule::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIAccountTaxTaxRule::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIAccountTaxTaxRule::getRatePercent() const {
    return m_rate_percent;
}
void OAIAccountTaxTaxRule::setRatePercent(const QString &rate_percent) {
    m_rate_percent = rate_percent;
    m_rate_percent_isSet = true;
}

bool OAIAccountTaxTaxRule::is_rate_percent_Set() const{
    return m_rate_percent_isSet;
}

bool OAIAccountTaxTaxRule::is_rate_percent_Valid() const{
    return m_rate_percent_isValid;
}

bool OAIAccountTaxTaxRule::isShippingTaxed() const {
    return m_shipping_taxed;
}
void OAIAccountTaxTaxRule::setShippingTaxed(const bool &shipping_taxed) {
    m_shipping_taxed = shipping_taxed;
    m_shipping_taxed_isSet = true;
}

bool OAIAccountTaxTaxRule::is_shipping_taxed_Set() const{
    return m_shipping_taxed_isSet;
}

bool OAIAccountTaxTaxRule::is_shipping_taxed_Valid() const{
    return m_shipping_taxed_isValid;
}

bool OAIAccountTaxTaxRule::isUseGlobalRate() const {
    return m_use_global_rate;
}
void OAIAccountTaxTaxRule::setUseGlobalRate(const bool &use_global_rate) {
    m_use_global_rate = use_global_rate;
    m_use_global_rate_isSet = true;
}

bool OAIAccountTaxTaxRule::is_use_global_rate_Set() const{
    return m_use_global_rate_isSet;
}

bool OAIAccountTaxTaxRule::is_use_global_rate_Valid() const{
    return m_use_global_rate_isValid;
}

bool OAIAccountTaxTaxRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_taxed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_global_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountTaxTaxRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
