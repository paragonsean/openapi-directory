/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedStatus::OAIDatafeedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedStatus::OAIDatafeedStatus() {
    this->initializeModel();
}

OAIDatafeedStatus::~OAIDatafeedStatus() {}

void OAIDatafeedStatus::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_datafeed_id_isSet = false;
    m_datafeed_id_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_items_valid_isSet = false;
    m_items_valid_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_upload_date_isSet = false;
    m_last_upload_date_isValid = false;

    m_processing_status_isSet = false;
    m_processing_status_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIDatafeedStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedStatus::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_datafeed_id_isValid = ::OpenAPI::fromJsonValue(m_datafeed_id, json[QString("datafeedId")]);
    m_datafeed_id_isSet = !json[QString("datafeedId")].isNull() && m_datafeed_id_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_items_valid_isValid = ::OpenAPI::fromJsonValue(m_items_valid, json[QString("itemsValid")]);
    m_items_valid_isSet = !json[QString("itemsValid")].isNull() && m_items_valid_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_upload_date_isValid = ::OpenAPI::fromJsonValue(m_last_upload_date, json[QString("lastUploadDate")]);
    m_last_upload_date_isSet = !json[QString("lastUploadDate")].isNull() && m_last_upload_date_isValid;

    m_processing_status_isValid = ::OpenAPI::fromJsonValue(m_processing_status, json[QString("processingStatus")]);
    m_processing_status_isSet = !json[QString("processingStatus")].isNull() && m_processing_status_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIDatafeedStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_datafeed_id_isSet) {
        obj.insert(QString("datafeedId"), ::OpenAPI::toJsonValue(m_datafeed_id));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_items_valid_isSet) {
        obj.insert(QString("itemsValid"), ::OpenAPI::toJsonValue(m_items_valid));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_upload_date_isSet) {
        obj.insert(QString("lastUploadDate"), ::OpenAPI::toJsonValue(m_last_upload_date));
    }
    if (m_processing_status_isSet) {
        obj.insert(QString("processingStatus"), ::OpenAPI::toJsonValue(m_processing_status));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIDatafeedStatus::getCountry() const {
    return m_country;
}
void OAIDatafeedStatus::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIDatafeedStatus::is_country_Set() const{
    return m_country_isSet;
}

bool OAIDatafeedStatus::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIDatafeedStatus::getDatafeedId() const {
    return m_datafeed_id;
}
void OAIDatafeedStatus::setDatafeedId(const QString &datafeed_id) {
    m_datafeed_id = datafeed_id;
    m_datafeed_id_isSet = true;
}

bool OAIDatafeedStatus::is_datafeed_id_Set() const{
    return m_datafeed_id_isSet;
}

bool OAIDatafeedStatus::is_datafeed_id_Valid() const{
    return m_datafeed_id_isValid;
}

QList<OAIDatafeedStatusError> OAIDatafeedStatus::getErrors() const {
    return m_errors;
}
void OAIDatafeedStatus::setErrors(const QList<OAIDatafeedStatusError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDatafeedStatus::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDatafeedStatus::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIDatafeedStatus::getItemsTotal() const {
    return m_items_total;
}
void OAIDatafeedStatus::setItemsTotal(const QString &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAIDatafeedStatus::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAIDatafeedStatus::is_items_total_Valid() const{
    return m_items_total_isValid;
}

QString OAIDatafeedStatus::getItemsValid() const {
    return m_items_valid;
}
void OAIDatafeedStatus::setItemsValid(const QString &items_valid) {
    m_items_valid = items_valid;
    m_items_valid_isSet = true;
}

bool OAIDatafeedStatus::is_items_valid_Set() const{
    return m_items_valid_isSet;
}

bool OAIDatafeedStatus::is_items_valid_Valid() const{
    return m_items_valid_isValid;
}

QString OAIDatafeedStatus::getKind() const {
    return m_kind;
}
void OAIDatafeedStatus::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatafeedStatus::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatafeedStatus::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDatafeedStatus::getLanguage() const {
    return m_language;
}
void OAIDatafeedStatus::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDatafeedStatus::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDatafeedStatus::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIDatafeedStatus::getLastUploadDate() const {
    return m_last_upload_date;
}
void OAIDatafeedStatus::setLastUploadDate(const QString &last_upload_date) {
    m_last_upload_date = last_upload_date;
    m_last_upload_date_isSet = true;
}

bool OAIDatafeedStatus::is_last_upload_date_Set() const{
    return m_last_upload_date_isSet;
}

bool OAIDatafeedStatus::is_last_upload_date_Valid() const{
    return m_last_upload_date_isValid;
}

QString OAIDatafeedStatus::getProcessingStatus() const {
    return m_processing_status;
}
void OAIDatafeedStatus::setProcessingStatus(const QString &processing_status) {
    m_processing_status = processing_status;
    m_processing_status_isSet = true;
}

bool OAIDatafeedStatus::is_processing_status_Set() const{
    return m_processing_status_isSet;
}

bool OAIDatafeedStatus::is_processing_status_Valid() const{
    return m_processing_status_isValid;
}

QList<OAIDatafeedStatusError> OAIDatafeedStatus::getWarnings() const {
    return m_warnings;
}
void OAIDatafeedStatus::setWarnings(const QList<OAIDatafeedStatusError> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIDatafeedStatus::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIDatafeedStatus::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIDatafeedStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datafeed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
