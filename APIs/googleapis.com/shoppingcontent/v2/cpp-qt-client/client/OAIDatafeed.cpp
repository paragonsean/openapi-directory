/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeed::OAIDatafeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeed::OAIDatafeed() {
    this->initializeModel();
}

OAIDatafeed::~OAIDatafeed() {}

void OAIDatafeed::initializeModel() {

    m_attribute_language_isSet = false;
    m_attribute_language_isValid = false;

    m_content_language_isSet = false;
    m_content_language_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_fetch_schedule_isSet = false;
    m_fetch_schedule_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_intended_destinations_isSet = false;
    m_intended_destinations_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_target_country_isSet = false;
    m_target_country_isValid = false;

    m_targets_isSet = false;
    m_targets_isValid = false;
}

void OAIDatafeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeed::fromJsonObject(QJsonObject json) {

    m_attribute_language_isValid = ::OpenAPI::fromJsonValue(m_attribute_language, json[QString("attributeLanguage")]);
    m_attribute_language_isSet = !json[QString("attributeLanguage")].isNull() && m_attribute_language_isValid;

    m_content_language_isValid = ::OpenAPI::fromJsonValue(m_content_language, json[QString("contentLanguage")]);
    m_content_language_isSet = !json[QString("contentLanguage")].isNull() && m_content_language_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_fetch_schedule_isValid = ::OpenAPI::fromJsonValue(m_fetch_schedule, json[QString("fetchSchedule")]);
    m_fetch_schedule_isSet = !json[QString("fetchSchedule")].isNull() && m_fetch_schedule_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_intended_destinations_isValid = ::OpenAPI::fromJsonValue(m_intended_destinations, json[QString("intendedDestinations")]);
    m_intended_destinations_isSet = !json[QString("intendedDestinations")].isNull() && m_intended_destinations_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_target_country_isValid = ::OpenAPI::fromJsonValue(m_target_country, json[QString("targetCountry")]);
    m_target_country_isSet = !json[QString("targetCountry")].isNull() && m_target_country_isValid;

    m_targets_isValid = ::OpenAPI::fromJsonValue(m_targets, json[QString("targets")]);
    m_targets_isSet = !json[QString("targets")].isNull() && m_targets_isValid;
}

QString OAIDatafeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeed::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_language_isSet) {
        obj.insert(QString("attributeLanguage"), ::OpenAPI::toJsonValue(m_attribute_language));
    }
    if (m_content_language_isSet) {
        obj.insert(QString("contentLanguage"), ::OpenAPI::toJsonValue(m_content_language));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_fetch_schedule.isSet()) {
        obj.insert(QString("fetchSchedule"), ::OpenAPI::toJsonValue(m_fetch_schedule));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_format.isSet()) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_intended_destinations.size() > 0) {
        obj.insert(QString("intendedDestinations"), ::OpenAPI::toJsonValue(m_intended_destinations));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_target_country_isSet) {
        obj.insert(QString("targetCountry"), ::OpenAPI::toJsonValue(m_target_country));
    }
    if (m_targets.size() > 0) {
        obj.insert(QString("targets"), ::OpenAPI::toJsonValue(m_targets));
    }
    return obj;
}

QString OAIDatafeed::getAttributeLanguage() const {
    return m_attribute_language;
}
void OAIDatafeed::setAttributeLanguage(const QString &attribute_language) {
    m_attribute_language = attribute_language;
    m_attribute_language_isSet = true;
}

bool OAIDatafeed::is_attribute_language_Set() const{
    return m_attribute_language_isSet;
}

bool OAIDatafeed::is_attribute_language_Valid() const{
    return m_attribute_language_isValid;
}

QString OAIDatafeed::getContentLanguage() const {
    return m_content_language;
}
void OAIDatafeed::setContentLanguage(const QString &content_language) {
    m_content_language = content_language;
    m_content_language_isSet = true;
}

bool OAIDatafeed::is_content_language_Set() const{
    return m_content_language_isSet;
}

bool OAIDatafeed::is_content_language_Valid() const{
    return m_content_language_isValid;
}

QString OAIDatafeed::getContentType() const {
    return m_content_type;
}
void OAIDatafeed::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIDatafeed::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIDatafeed::is_content_type_Valid() const{
    return m_content_type_isValid;
}

OAIDatafeedFetchSchedule OAIDatafeed::getFetchSchedule() const {
    return m_fetch_schedule;
}
void OAIDatafeed::setFetchSchedule(const OAIDatafeedFetchSchedule &fetch_schedule) {
    m_fetch_schedule = fetch_schedule;
    m_fetch_schedule_isSet = true;
}

bool OAIDatafeed::is_fetch_schedule_Set() const{
    return m_fetch_schedule_isSet;
}

bool OAIDatafeed::is_fetch_schedule_Valid() const{
    return m_fetch_schedule_isValid;
}

QString OAIDatafeed::getFileName() const {
    return m_file_name;
}
void OAIDatafeed::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIDatafeed::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIDatafeed::is_file_name_Valid() const{
    return m_file_name_isValid;
}

OAIDatafeedFormat OAIDatafeed::getFormat() const {
    return m_format;
}
void OAIDatafeed::setFormat(const OAIDatafeedFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDatafeed::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDatafeed::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIDatafeed::getId() const {
    return m_id;
}
void OAIDatafeed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDatafeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDatafeed::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIDatafeed::getIntendedDestinations() const {
    return m_intended_destinations;
}
void OAIDatafeed::setIntendedDestinations(const QList<QString> &intended_destinations) {
    m_intended_destinations = intended_destinations;
    m_intended_destinations_isSet = true;
}

bool OAIDatafeed::is_intended_destinations_Set() const{
    return m_intended_destinations_isSet;
}

bool OAIDatafeed::is_intended_destinations_Valid() const{
    return m_intended_destinations_isValid;
}

QString OAIDatafeed::getKind() const {
    return m_kind;
}
void OAIDatafeed::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatafeed::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatafeed::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDatafeed::getName() const {
    return m_name;
}
void OAIDatafeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatafeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatafeed::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatafeed::getTargetCountry() const {
    return m_target_country;
}
void OAIDatafeed::setTargetCountry(const QString &target_country) {
    m_target_country = target_country;
    m_target_country_isSet = true;
}

bool OAIDatafeed::is_target_country_Set() const{
    return m_target_country_isSet;
}

bool OAIDatafeed::is_target_country_Valid() const{
    return m_target_country_isValid;
}

QList<OAIDatafeedTarget> OAIDatafeed::getTargets() const {
    return m_targets;
}
void OAIDatafeed::setTargets(const QList<OAIDatafeedTarget> &targets) {
    m_targets = targets;
    m_targets_isSet = true;
}

bool OAIDatafeed::is_targets_Set() const{
    return m_targets_isSet;
}

bool OAIDatafeed::is_targets_Valid() const{
    return m_targets_isValid;
}

bool OAIDatafeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intended_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
