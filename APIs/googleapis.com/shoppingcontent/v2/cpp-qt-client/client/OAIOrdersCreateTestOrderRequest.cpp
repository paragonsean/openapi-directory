/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersCreateTestOrderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersCreateTestOrderRequest::OAIOrdersCreateTestOrderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersCreateTestOrderRequest::OAIOrdersCreateTestOrderRequest() {
    this->initializeModel();
}

OAIOrdersCreateTestOrderRequest::~OAIOrdersCreateTestOrderRequest() {}

void OAIOrdersCreateTestOrderRequest::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_template_name_isSet = false;
    m_template_name_isValid = false;

    m_test_order_isSet = false;
    m_test_order_isValid = false;
}

void OAIOrdersCreateTestOrderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrdersCreateTestOrderRequest::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_template_name_isValid = ::OpenAPI::fromJsonValue(m_template_name, json[QString("templateName")]);
    m_template_name_isSet = !json[QString("templateName")].isNull() && m_template_name_isValid;

    m_test_order_isValid = ::OpenAPI::fromJsonValue(m_test_order, json[QString("testOrder")]);
    m_test_order_isSet = !json[QString("testOrder")].isNull() && m_test_order_isValid;
}

QString OAIOrdersCreateTestOrderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrdersCreateTestOrderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_template_name_isSet) {
        obj.insert(QString("templateName"), ::OpenAPI::toJsonValue(m_template_name));
    }
    if (m_test_order.isSet()) {
        obj.insert(QString("testOrder"), ::OpenAPI::toJsonValue(m_test_order));
    }
    return obj;
}

QString OAIOrdersCreateTestOrderRequest::getCountry() const {
    return m_country;
}
void OAIOrdersCreateTestOrderRequest::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIOrdersCreateTestOrderRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAIOrdersCreateTestOrderRequest::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIOrdersCreateTestOrderRequest::getTemplateName() const {
    return m_template_name;
}
void OAIOrdersCreateTestOrderRequest::setTemplateName(const QString &template_name) {
    m_template_name = template_name;
    m_template_name_isSet = true;
}

bool OAIOrdersCreateTestOrderRequest::is_template_name_Set() const{
    return m_template_name_isSet;
}

bool OAIOrdersCreateTestOrderRequest::is_template_name_Valid() const{
    return m_template_name_isValid;
}

OAITestOrder OAIOrdersCreateTestOrderRequest::getTestOrder() const {
    return m_test_order;
}
void OAIOrdersCreateTestOrderRequest::setTestOrder(const OAITestOrder &test_order) {
    m_test_order = test_order;
    m_test_order_isSet = true;
}

bool OAIOrdersCreateTestOrderRequest::is_test_order_Set() const{
    return m_test_order_isSet;
}

bool OAIOrdersCreateTestOrderRequest::is_test_order_Valid() const{
    return m_test_order_isValid;
}

bool OAIOrdersCreateTestOrderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrdersCreateTestOrderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
