/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestOrderPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestOrderPaymentMethod::OAITestOrderPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestOrderPaymentMethod::OAITestOrderPaymentMethod() {
    this->initializeModel();
}

OAITestOrderPaymentMethod::~OAITestOrderPaymentMethod() {}

void OAITestOrderPaymentMethod::initializeModel() {

    m_expiration_month_isSet = false;
    m_expiration_month_isValid = false;

    m_expiration_year_isSet = false;
    m_expiration_year_isValid = false;

    m_last_four_digits_isSet = false;
    m_last_four_digits_isValid = false;

    m_predefined_billing_address_isSet = false;
    m_predefined_billing_address_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITestOrderPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestOrderPaymentMethod::fromJsonObject(QJsonObject json) {

    m_expiration_month_isValid = ::OpenAPI::fromJsonValue(m_expiration_month, json[QString("expirationMonth")]);
    m_expiration_month_isSet = !json[QString("expirationMonth")].isNull() && m_expiration_month_isValid;

    m_expiration_year_isValid = ::OpenAPI::fromJsonValue(m_expiration_year, json[QString("expirationYear")]);
    m_expiration_year_isSet = !json[QString("expirationYear")].isNull() && m_expiration_year_isValid;

    m_last_four_digits_isValid = ::OpenAPI::fromJsonValue(m_last_four_digits, json[QString("lastFourDigits")]);
    m_last_four_digits_isSet = !json[QString("lastFourDigits")].isNull() && m_last_four_digits_isValid;

    m_predefined_billing_address_isValid = ::OpenAPI::fromJsonValue(m_predefined_billing_address, json[QString("predefinedBillingAddress")]);
    m_predefined_billing_address_isSet = !json[QString("predefinedBillingAddress")].isNull() && m_predefined_billing_address_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITestOrderPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestOrderPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_month_isSet) {
        obj.insert(QString("expirationMonth"), ::OpenAPI::toJsonValue(m_expiration_month));
    }
    if (m_expiration_year_isSet) {
        obj.insert(QString("expirationYear"), ::OpenAPI::toJsonValue(m_expiration_year));
    }
    if (m_last_four_digits_isSet) {
        obj.insert(QString("lastFourDigits"), ::OpenAPI::toJsonValue(m_last_four_digits));
    }
    if (m_predefined_billing_address_isSet) {
        obj.insert(QString("predefinedBillingAddress"), ::OpenAPI::toJsonValue(m_predefined_billing_address));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAITestOrderPaymentMethod::getExpirationMonth() const {
    return m_expiration_month;
}
void OAITestOrderPaymentMethod::setExpirationMonth(const qint32 &expiration_month) {
    m_expiration_month = expiration_month;
    m_expiration_month_isSet = true;
}

bool OAITestOrderPaymentMethod::is_expiration_month_Set() const{
    return m_expiration_month_isSet;
}

bool OAITestOrderPaymentMethod::is_expiration_month_Valid() const{
    return m_expiration_month_isValid;
}

qint32 OAITestOrderPaymentMethod::getExpirationYear() const {
    return m_expiration_year;
}
void OAITestOrderPaymentMethod::setExpirationYear(const qint32 &expiration_year) {
    m_expiration_year = expiration_year;
    m_expiration_year_isSet = true;
}

bool OAITestOrderPaymentMethod::is_expiration_year_Set() const{
    return m_expiration_year_isSet;
}

bool OAITestOrderPaymentMethod::is_expiration_year_Valid() const{
    return m_expiration_year_isValid;
}

QString OAITestOrderPaymentMethod::getLastFourDigits() const {
    return m_last_four_digits;
}
void OAITestOrderPaymentMethod::setLastFourDigits(const QString &last_four_digits) {
    m_last_four_digits = last_four_digits;
    m_last_four_digits_isSet = true;
}

bool OAITestOrderPaymentMethod::is_last_four_digits_Set() const{
    return m_last_four_digits_isSet;
}

bool OAITestOrderPaymentMethod::is_last_four_digits_Valid() const{
    return m_last_four_digits_isValid;
}

QString OAITestOrderPaymentMethod::getPredefinedBillingAddress() const {
    return m_predefined_billing_address;
}
void OAITestOrderPaymentMethod::setPredefinedBillingAddress(const QString &predefined_billing_address) {
    m_predefined_billing_address = predefined_billing_address;
    m_predefined_billing_address_isSet = true;
}

bool OAITestOrderPaymentMethod::is_predefined_billing_address_Set() const{
    return m_predefined_billing_address_isSet;
}

bool OAITestOrderPaymentMethod::is_predefined_billing_address_Valid() const{
    return m_predefined_billing_address_isValid;
}

QString OAITestOrderPaymentMethod::getType() const {
    return m_type;
}
void OAITestOrderPaymentMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITestOrderPaymentMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAITestOrderPaymentMethod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITestOrderPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_four_digits_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestOrderPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
