/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountStatusStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountStatusStatistics::OAIAccountStatusStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountStatusStatistics::OAIAccountStatusStatistics() {
    this->initializeModel();
}

OAIAccountStatusStatistics::~OAIAccountStatusStatistics() {}

void OAIAccountStatusStatistics::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_disapproved_isSet = false;
    m_disapproved_isValid = false;

    m_expiring_isSet = false;
    m_expiring_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;
}

void OAIAccountStatusStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountStatusStatistics::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_disapproved_isValid = ::OpenAPI::fromJsonValue(m_disapproved, json[QString("disapproved")]);
    m_disapproved_isSet = !json[QString("disapproved")].isNull() && m_disapproved_isValid;

    m_expiring_isValid = ::OpenAPI::fromJsonValue(m_expiring, json[QString("expiring")]);
    m_expiring_isSet = !json[QString("expiring")].isNull() && m_expiring_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;
}

QString OAIAccountStatusStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountStatusStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_disapproved_isSet) {
        obj.insert(QString("disapproved"), ::OpenAPI::toJsonValue(m_disapproved));
    }
    if (m_expiring_isSet) {
        obj.insert(QString("expiring"), ::OpenAPI::toJsonValue(m_expiring));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    return obj;
}

QString OAIAccountStatusStatistics::getActive() const {
    return m_active;
}
void OAIAccountStatusStatistics::setActive(const QString &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIAccountStatusStatistics::is_active_Set() const{
    return m_active_isSet;
}

bool OAIAccountStatusStatistics::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIAccountStatusStatistics::getDisapproved() const {
    return m_disapproved;
}
void OAIAccountStatusStatistics::setDisapproved(const QString &disapproved) {
    m_disapproved = disapproved;
    m_disapproved_isSet = true;
}

bool OAIAccountStatusStatistics::is_disapproved_Set() const{
    return m_disapproved_isSet;
}

bool OAIAccountStatusStatistics::is_disapproved_Valid() const{
    return m_disapproved_isValid;
}

QString OAIAccountStatusStatistics::getExpiring() const {
    return m_expiring;
}
void OAIAccountStatusStatistics::setExpiring(const QString &expiring) {
    m_expiring = expiring;
    m_expiring_isSet = true;
}

bool OAIAccountStatusStatistics::is_expiring_Set() const{
    return m_expiring_isSet;
}

bool OAIAccountStatusStatistics::is_expiring_Valid() const{
    return m_expiring_isValid;
}

QString OAIAccountStatusStatistics::getPending() const {
    return m_pending;
}
void OAIAccountStatusStatistics::setPending(const QString &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIAccountStatusStatistics::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIAccountStatusStatistics::is_pending_Valid() const{
    return m_pending_isValid;
}

bool OAIAccountStatusStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disapproved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountStatusStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
