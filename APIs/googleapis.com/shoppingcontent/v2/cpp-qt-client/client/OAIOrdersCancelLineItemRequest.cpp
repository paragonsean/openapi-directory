/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrdersCancelLineItemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrdersCancelLineItemRequest::OAIOrdersCancelLineItemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrdersCancelLineItemRequest::OAIOrdersCancelLineItemRequest() {
    this->initializeModel();
}

OAIOrdersCancelLineItemRequest::~OAIOrdersCancelLineItemRequest() {}

void OAIOrdersCancelLineItemRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_pretax_isSet = false;
    m_amount_pretax_isValid = false;

    m_amount_tax_isSet = false;
    m_amount_tax_isValid = false;

    m_line_item_id_isSet = false;
    m_line_item_id_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_text_isSet = false;
    m_reason_text_isValid = false;
}

void OAIOrdersCancelLineItemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrdersCancelLineItemRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_pretax_isValid = ::OpenAPI::fromJsonValue(m_amount_pretax, json[QString("amountPretax")]);
    m_amount_pretax_isSet = !json[QString("amountPretax")].isNull() && m_amount_pretax_isValid;

    m_amount_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_tax, json[QString("amountTax")]);
    m_amount_tax_isSet = !json[QString("amountTax")].isNull() && m_amount_tax_isValid;

    m_line_item_id_isValid = ::OpenAPI::fromJsonValue(m_line_item_id, json[QString("lineItemId")]);
    m_line_item_id_isSet = !json[QString("lineItemId")].isNull() && m_line_item_id_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_text_isValid = ::OpenAPI::fromJsonValue(m_reason_text, json[QString("reasonText")]);
    m_reason_text_isSet = !json[QString("reasonText")].isNull() && m_reason_text_isValid;
}

QString OAIOrdersCancelLineItemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrdersCancelLineItemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_pretax.isSet()) {
        obj.insert(QString("amountPretax"), ::OpenAPI::toJsonValue(m_amount_pretax));
    }
    if (m_amount_tax.isSet()) {
        obj.insert(QString("amountTax"), ::OpenAPI::toJsonValue(m_amount_tax));
    }
    if (m_line_item_id_isSet) {
        obj.insert(QString("lineItemId"), ::OpenAPI::toJsonValue(m_line_item_id));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_text_isSet) {
        obj.insert(QString("reasonText"), ::OpenAPI::toJsonValue(m_reason_text));
    }
    return obj;
}

OAIPrice OAIOrdersCancelLineItemRequest::getAmount() const {
    return m_amount;
}
void OAIOrdersCancelLineItemRequest::setAmount(const OAIPrice &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIPrice OAIOrdersCancelLineItemRequest::getAmountPretax() const {
    return m_amount_pretax;
}
void OAIOrdersCancelLineItemRequest::setAmountPretax(const OAIPrice &amount_pretax) {
    m_amount_pretax = amount_pretax;
    m_amount_pretax_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_amount_pretax_Set() const{
    return m_amount_pretax_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_amount_pretax_Valid() const{
    return m_amount_pretax_isValid;
}

OAIPrice OAIOrdersCancelLineItemRequest::getAmountTax() const {
    return m_amount_tax;
}
void OAIOrdersCancelLineItemRequest::setAmountTax(const OAIPrice &amount_tax) {
    m_amount_tax = amount_tax;
    m_amount_tax_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_amount_tax_Set() const{
    return m_amount_tax_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_amount_tax_Valid() const{
    return m_amount_tax_isValid;
}

QString OAIOrdersCancelLineItemRequest::getLineItemId() const {
    return m_line_item_id;
}
void OAIOrdersCancelLineItemRequest::setLineItemId(const QString &line_item_id) {
    m_line_item_id = line_item_id;
    m_line_item_id_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_line_item_id_Set() const{
    return m_line_item_id_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_line_item_id_Valid() const{
    return m_line_item_id_isValid;
}

QString OAIOrdersCancelLineItemRequest::getOperationId() const {
    return m_operation_id;
}
void OAIOrdersCancelLineItemRequest::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIOrdersCancelLineItemRequest::getProductId() const {
    return m_product_id;
}
void OAIOrdersCancelLineItemRequest::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_product_id_Valid() const{
    return m_product_id_isValid;
}

qint32 OAIOrdersCancelLineItemRequest::getQuantity() const {
    return m_quantity;
}
void OAIOrdersCancelLineItemRequest::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrdersCancelLineItemRequest::getReason() const {
    return m_reason;
}
void OAIOrdersCancelLineItemRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIOrdersCancelLineItemRequest::getReasonText() const {
    return m_reason_text;
}
void OAIOrdersCancelLineItemRequest::setReasonText(const QString &reason_text) {
    m_reason_text = reason_text;
    m_reason_text_isSet = true;
}

bool OAIOrdersCancelLineItemRequest::is_reason_text_Set() const{
    return m_reason_text_isSet;
}

bool OAIOrdersCancelLineItemRequest::is_reason_text_Valid() const{
    return m_reason_text_isValid;
}

bool OAIOrdersCancelLineItemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_pretax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_tax.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrdersCancelLineItemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
