/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedsCustomBatchRequestEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedsCustomBatchRequestEntry::OAIDatafeedsCustomBatchRequestEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedsCustomBatchRequestEntry::OAIDatafeedsCustomBatchRequestEntry() {
    this->initializeModel();
}

OAIDatafeedsCustomBatchRequestEntry::~OAIDatafeedsCustomBatchRequestEntry() {}

void OAIDatafeedsCustomBatchRequestEntry::initializeModel() {

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_datafeed_isSet = false;
    m_datafeed_isValid = false;

    m_datafeed_id_isSet = false;
    m_datafeed_id_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;
}

void OAIDatafeedsCustomBatchRequestEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedsCustomBatchRequestEntry::fromJsonObject(QJsonObject json) {

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_datafeed_isValid = ::OpenAPI::fromJsonValue(m_datafeed, json[QString("datafeed")]);
    m_datafeed_isSet = !json[QString("datafeed")].isNull() && m_datafeed_isValid;

    m_datafeed_id_isValid = ::OpenAPI::fromJsonValue(m_datafeed_id, json[QString("datafeedId")]);
    m_datafeed_id_isSet = !json[QString("datafeedId")].isNull() && m_datafeed_id_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;
}

QString OAIDatafeedsCustomBatchRequestEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedsCustomBatchRequestEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_datafeed.isSet()) {
        obj.insert(QString("datafeed"), ::OpenAPI::toJsonValue(m_datafeed));
    }
    if (m_datafeed_id_isSet) {
        obj.insert(QString("datafeedId"), ::OpenAPI::toJsonValue(m_datafeed_id));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    return obj;
}

qint32 OAIDatafeedsCustomBatchRequestEntry::getBatchId() const {
    return m_batch_id;
}
void OAIDatafeedsCustomBatchRequestEntry::setBatchId(const qint32 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

OAIDatafeed OAIDatafeedsCustomBatchRequestEntry::getDatafeed() const {
    return m_datafeed;
}
void OAIDatafeedsCustomBatchRequestEntry::setDatafeed(const OAIDatafeed &datafeed) {
    m_datafeed = datafeed;
    m_datafeed_isSet = true;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_datafeed_Set() const{
    return m_datafeed_isSet;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_datafeed_Valid() const{
    return m_datafeed_isValid;
}

QString OAIDatafeedsCustomBatchRequestEntry::getDatafeedId() const {
    return m_datafeed_id;
}
void OAIDatafeedsCustomBatchRequestEntry::setDatafeedId(const QString &datafeed_id) {
    m_datafeed_id = datafeed_id;
    m_datafeed_id_isSet = true;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_datafeed_id_Set() const{
    return m_datafeed_id_isSet;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_datafeed_id_Valid() const{
    return m_datafeed_id_isValid;
}

QString OAIDatafeedsCustomBatchRequestEntry::getMerchantId() const {
    return m_merchant_id;
}
void OAIDatafeedsCustomBatchRequestEntry::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAIDatafeedsCustomBatchRequestEntry::getMethod() const {
    return m_method;
}
void OAIDatafeedsCustomBatchRequestEntry::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_method_Set() const{
    return m_method_isSet;
}

bool OAIDatafeedsCustomBatchRequestEntry::is_method_Valid() const{
    return m_method_isValid;
}

bool OAIDatafeedsCustomBatchRequestEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datafeed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_datafeed_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedsCustomBatchRequestEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
