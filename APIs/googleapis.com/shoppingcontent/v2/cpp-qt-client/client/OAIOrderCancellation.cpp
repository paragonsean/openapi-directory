/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderCancellation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderCancellation::OAIOrderCancellation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderCancellation::OAIOrderCancellation() {
    this->initializeModel();
}

OAIOrderCancellation::~OAIOrderCancellation() {}

void OAIOrderCancellation::initializeModel() {

    m_actor_isSet = false;
    m_actor_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reason_text_isSet = false;
    m_reason_text_isValid = false;
}

void OAIOrderCancellation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderCancellation::fromJsonObject(QJsonObject json) {

    m_actor_isValid = ::OpenAPI::fromJsonValue(m_actor, json[QString("actor")]);
    m_actor_isSet = !json[QString("actor")].isNull() && m_actor_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reason_text_isValid = ::OpenAPI::fromJsonValue(m_reason_text, json[QString("reasonText")]);
    m_reason_text_isSet = !json[QString("reasonText")].isNull() && m_reason_text_isValid;
}

QString OAIOrderCancellation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderCancellation::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_isSet) {
        obj.insert(QString("actor"), ::OpenAPI::toJsonValue(m_actor));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reason_text_isSet) {
        obj.insert(QString("reasonText"), ::OpenAPI::toJsonValue(m_reason_text));
    }
    return obj;
}

QString OAIOrderCancellation::getActor() const {
    return m_actor;
}
void OAIOrderCancellation::setActor(const QString &actor) {
    m_actor = actor;
    m_actor_isSet = true;
}

bool OAIOrderCancellation::is_actor_Set() const{
    return m_actor_isSet;
}

bool OAIOrderCancellation::is_actor_Valid() const{
    return m_actor_isValid;
}

QString OAIOrderCancellation::getCreationDate() const {
    return m_creation_date;
}
void OAIOrderCancellation::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIOrderCancellation::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIOrderCancellation::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIOrderCancellation::getQuantity() const {
    return m_quantity;
}
void OAIOrderCancellation::setQuantity(const qint32 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIOrderCancellation::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIOrderCancellation::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIOrderCancellation::getReason() const {
    return m_reason;
}
void OAIOrderCancellation::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIOrderCancellation::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIOrderCancellation::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIOrderCancellation::getReasonText() const {
    return m_reason_text;
}
void OAIOrderCancellation::setReasonText(const QString &reason_text) {
    m_reason_text = reason_text;
    m_reason_text_isSet = true;
}

bool OAIOrderCancellation::is_reason_text_Set() const{
    return m_reason_text_isSet;
}

bool OAIOrderCancellation::is_reason_text_Valid() const{
    return m_reason_text_isValid;
}

bool OAIOrderCancellation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderCancellation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
