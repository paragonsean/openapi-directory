/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedstatusesCustomBatchResponseEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedstatusesCustomBatchResponseEntry::OAIDatafeedstatusesCustomBatchResponseEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedstatusesCustomBatchResponseEntry::OAIDatafeedstatusesCustomBatchResponseEntry() {
    this->initializeModel();
}

OAIDatafeedstatusesCustomBatchResponseEntry::~OAIDatafeedstatusesCustomBatchResponseEntry() {}

void OAIDatafeedstatusesCustomBatchResponseEntry::initializeModel() {

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_datafeed_status_isSet = false;
    m_datafeed_status_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;
}

void OAIDatafeedstatusesCustomBatchResponseEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedstatusesCustomBatchResponseEntry::fromJsonObject(QJsonObject json) {

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_datafeed_status_isValid = ::OpenAPI::fromJsonValue(m_datafeed_status, json[QString("datafeedStatus")]);
    m_datafeed_status_isSet = !json[QString("datafeedStatus")].isNull() && m_datafeed_status_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;
}

QString OAIDatafeedstatusesCustomBatchResponseEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedstatusesCustomBatchResponseEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_datafeed_status.isSet()) {
        obj.insert(QString("datafeedStatus"), ::OpenAPI::toJsonValue(m_datafeed_status));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    return obj;
}

qint32 OAIDatafeedstatusesCustomBatchResponseEntry::getBatchId() const {
    return m_batch_id;
}
void OAIDatafeedstatusesCustomBatchResponseEntry::setBatchId(const qint32 &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

OAIDatafeedStatus OAIDatafeedstatusesCustomBatchResponseEntry::getDatafeedStatus() const {
    return m_datafeed_status;
}
void OAIDatafeedstatusesCustomBatchResponseEntry::setDatafeedStatus(const OAIDatafeedStatus &datafeed_status) {
    m_datafeed_status = datafeed_status;
    m_datafeed_status_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_datafeed_status_Set() const{
    return m_datafeed_status_isSet;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_datafeed_status_Valid() const{
    return m_datafeed_status_isValid;
}

OAIErrors OAIDatafeedstatusesCustomBatchResponseEntry::getErrors() const {
    return m_errors;
}
void OAIDatafeedstatusesCustomBatchResponseEntry::setErrors(const OAIErrors &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::is_errors_Valid() const{
    return m_errors_isValid;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datafeed_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedstatusesCustomBatchResponseEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
