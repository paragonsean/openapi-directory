/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatafeedFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatafeedFormat::OAIDatafeedFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatafeedFormat::OAIDatafeedFormat() {
    this->initializeModel();
}

OAIDatafeedFormat::~OAIDatafeedFormat() {}

void OAIDatafeedFormat::initializeModel() {

    m_column_delimiter_isSet = false;
    m_column_delimiter_isValid = false;

    m_file_encoding_isSet = false;
    m_file_encoding_isValid = false;

    m_quoting_mode_isSet = false;
    m_quoting_mode_isValid = false;
}

void OAIDatafeedFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatafeedFormat::fromJsonObject(QJsonObject json) {

    m_column_delimiter_isValid = ::OpenAPI::fromJsonValue(m_column_delimiter, json[QString("columnDelimiter")]);
    m_column_delimiter_isSet = !json[QString("columnDelimiter")].isNull() && m_column_delimiter_isValid;

    m_file_encoding_isValid = ::OpenAPI::fromJsonValue(m_file_encoding, json[QString("fileEncoding")]);
    m_file_encoding_isSet = !json[QString("fileEncoding")].isNull() && m_file_encoding_isValid;

    m_quoting_mode_isValid = ::OpenAPI::fromJsonValue(m_quoting_mode, json[QString("quotingMode")]);
    m_quoting_mode_isSet = !json[QString("quotingMode")].isNull() && m_quoting_mode_isValid;
}

QString OAIDatafeedFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatafeedFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_column_delimiter_isSet) {
        obj.insert(QString("columnDelimiter"), ::OpenAPI::toJsonValue(m_column_delimiter));
    }
    if (m_file_encoding_isSet) {
        obj.insert(QString("fileEncoding"), ::OpenAPI::toJsonValue(m_file_encoding));
    }
    if (m_quoting_mode_isSet) {
        obj.insert(QString("quotingMode"), ::OpenAPI::toJsonValue(m_quoting_mode));
    }
    return obj;
}

QString OAIDatafeedFormat::getColumnDelimiter() const {
    return m_column_delimiter;
}
void OAIDatafeedFormat::setColumnDelimiter(const QString &column_delimiter) {
    m_column_delimiter = column_delimiter;
    m_column_delimiter_isSet = true;
}

bool OAIDatafeedFormat::is_column_delimiter_Set() const{
    return m_column_delimiter_isSet;
}

bool OAIDatafeedFormat::is_column_delimiter_Valid() const{
    return m_column_delimiter_isValid;
}

QString OAIDatafeedFormat::getFileEncoding() const {
    return m_file_encoding;
}
void OAIDatafeedFormat::setFileEncoding(const QString &file_encoding) {
    m_file_encoding = file_encoding;
    m_file_encoding_isSet = true;
}

bool OAIDatafeedFormat::is_file_encoding_Set() const{
    return m_file_encoding_isSet;
}

bool OAIDatafeedFormat::is_file_encoding_Valid() const{
    return m_file_encoding_isValid;
}

QString OAIDatafeedFormat::getQuotingMode() const {
    return m_quoting_mode;
}
void OAIDatafeedFormat::setQuotingMode(const QString &quoting_mode) {
    m_quoting_mode = quoting_mode;
    m_quoting_mode_isSet = true;
}

bool OAIDatafeedFormat::is_quoting_mode_Set() const{
    return m_quoting_mode_isSet;
}

bool OAIDatafeedFormat::is_quoting_mode_Valid() const{
    return m_quoting_mode_isValid;
}

bool OAIDatafeedFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_column_delimiter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatafeedFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
