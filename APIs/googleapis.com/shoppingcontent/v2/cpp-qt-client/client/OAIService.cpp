/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_delivery_country_isSet = false;
    m_delivery_country_isValid = false;

    m_delivery_time_isSet = false;
    m_delivery_time_isValid = false;

    m_eligibility_isSet = false;
    m_eligibility_isValid = false;

    m_minimum_order_value_isSet = false;
    m_minimum_order_value_isValid = false;

    m_minimum_order_value_table_isSet = false;
    m_minimum_order_value_table_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pickup_service_isSet = false;
    m_pickup_service_isValid = false;

    m_rate_groups_isSet = false;
    m_rate_groups_isValid = false;

    m_shipment_type_isSet = false;
    m_shipment_type_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_delivery_country_isValid = ::OpenAPI::fromJsonValue(m_delivery_country, json[QString("deliveryCountry")]);
    m_delivery_country_isSet = !json[QString("deliveryCountry")].isNull() && m_delivery_country_isValid;

    m_delivery_time_isValid = ::OpenAPI::fromJsonValue(m_delivery_time, json[QString("deliveryTime")]);
    m_delivery_time_isSet = !json[QString("deliveryTime")].isNull() && m_delivery_time_isValid;

    m_eligibility_isValid = ::OpenAPI::fromJsonValue(m_eligibility, json[QString("eligibility")]);
    m_eligibility_isSet = !json[QString("eligibility")].isNull() && m_eligibility_isValid;

    m_minimum_order_value_isValid = ::OpenAPI::fromJsonValue(m_minimum_order_value, json[QString("minimumOrderValue")]);
    m_minimum_order_value_isSet = !json[QString("minimumOrderValue")].isNull() && m_minimum_order_value_isValid;

    m_minimum_order_value_table_isValid = ::OpenAPI::fromJsonValue(m_minimum_order_value_table, json[QString("minimumOrderValueTable")]);
    m_minimum_order_value_table_isSet = !json[QString("minimumOrderValueTable")].isNull() && m_minimum_order_value_table_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pickup_service_isValid = ::OpenAPI::fromJsonValue(m_pickup_service, json[QString("pickupService")]);
    m_pickup_service_isSet = !json[QString("pickupService")].isNull() && m_pickup_service_isValid;

    m_rate_groups_isValid = ::OpenAPI::fromJsonValue(m_rate_groups, json[QString("rateGroups")]);
    m_rate_groups_isSet = !json[QString("rateGroups")].isNull() && m_rate_groups_isValid;

    m_shipment_type_isValid = ::OpenAPI::fromJsonValue(m_shipment_type, json[QString("shipmentType")]);
    m_shipment_type_isSet = !json[QString("shipmentType")].isNull() && m_shipment_type_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_delivery_country_isSet) {
        obj.insert(QString("deliveryCountry"), ::OpenAPI::toJsonValue(m_delivery_country));
    }
    if (m_delivery_time.isSet()) {
        obj.insert(QString("deliveryTime"), ::OpenAPI::toJsonValue(m_delivery_time));
    }
    if (m_eligibility_isSet) {
        obj.insert(QString("eligibility"), ::OpenAPI::toJsonValue(m_eligibility));
    }
    if (m_minimum_order_value.isSet()) {
        obj.insert(QString("minimumOrderValue"), ::OpenAPI::toJsonValue(m_minimum_order_value));
    }
    if (m_minimum_order_value_table.isSet()) {
        obj.insert(QString("minimumOrderValueTable"), ::OpenAPI::toJsonValue(m_minimum_order_value_table));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pickup_service.isSet()) {
        obj.insert(QString("pickupService"), ::OpenAPI::toJsonValue(m_pickup_service));
    }
    if (m_rate_groups.size() > 0) {
        obj.insert(QString("rateGroups"), ::OpenAPI::toJsonValue(m_rate_groups));
    }
    if (m_shipment_type_isSet) {
        obj.insert(QString("shipmentType"), ::OpenAPI::toJsonValue(m_shipment_type));
    }
    return obj;
}

bool OAIService::isActive() const {
    return m_active;
}
void OAIService::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIService::is_active_Set() const{
    return m_active_isSet;
}

bool OAIService::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIService::getCurrency() const {
    return m_currency;
}
void OAIService::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIService::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIService::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIService::getDeliveryCountry() const {
    return m_delivery_country;
}
void OAIService::setDeliveryCountry(const QString &delivery_country) {
    m_delivery_country = delivery_country;
    m_delivery_country_isSet = true;
}

bool OAIService::is_delivery_country_Set() const{
    return m_delivery_country_isSet;
}

bool OAIService::is_delivery_country_Valid() const{
    return m_delivery_country_isValid;
}

OAIDeliveryTime OAIService::getDeliveryTime() const {
    return m_delivery_time;
}
void OAIService::setDeliveryTime(const OAIDeliveryTime &delivery_time) {
    m_delivery_time = delivery_time;
    m_delivery_time_isSet = true;
}

bool OAIService::is_delivery_time_Set() const{
    return m_delivery_time_isSet;
}

bool OAIService::is_delivery_time_Valid() const{
    return m_delivery_time_isValid;
}

QString OAIService::getEligibility() const {
    return m_eligibility;
}
void OAIService::setEligibility(const QString &eligibility) {
    m_eligibility = eligibility;
    m_eligibility_isSet = true;
}

bool OAIService::is_eligibility_Set() const{
    return m_eligibility_isSet;
}

bool OAIService::is_eligibility_Valid() const{
    return m_eligibility_isValid;
}

OAIPrice OAIService::getMinimumOrderValue() const {
    return m_minimum_order_value;
}
void OAIService::setMinimumOrderValue(const OAIPrice &minimum_order_value) {
    m_minimum_order_value = minimum_order_value;
    m_minimum_order_value_isSet = true;
}

bool OAIService::is_minimum_order_value_Set() const{
    return m_minimum_order_value_isSet;
}

bool OAIService::is_minimum_order_value_Valid() const{
    return m_minimum_order_value_isValid;
}

OAIMinimumOrderValueTable OAIService::getMinimumOrderValueTable() const {
    return m_minimum_order_value_table;
}
void OAIService::setMinimumOrderValueTable(const OAIMinimumOrderValueTable &minimum_order_value_table) {
    m_minimum_order_value_table = minimum_order_value_table;
    m_minimum_order_value_table_isSet = true;
}

bool OAIService::is_minimum_order_value_table_Set() const{
    return m_minimum_order_value_table_isSet;
}

bool OAIService::is_minimum_order_value_table_Valid() const{
    return m_minimum_order_value_table_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

OAIPickupCarrierService OAIService::getPickupService() const {
    return m_pickup_service;
}
void OAIService::setPickupService(const OAIPickupCarrierService &pickup_service) {
    m_pickup_service = pickup_service;
    m_pickup_service_isSet = true;
}

bool OAIService::is_pickup_service_Set() const{
    return m_pickup_service_isSet;
}

bool OAIService::is_pickup_service_Valid() const{
    return m_pickup_service_isValid;
}

QList<OAIRateGroup> OAIService::getRateGroups() const {
    return m_rate_groups;
}
void OAIService::setRateGroups(const QList<OAIRateGroup> &rate_groups) {
    m_rate_groups = rate_groups;
    m_rate_groups_isSet = true;
}

bool OAIService::is_rate_groups_Set() const{
    return m_rate_groups_isSet;
}

bool OAIService::is_rate_groups_Valid() const{
    return m_rate_groups_isValid;
}

QString OAIService::getShipmentType() const {
    return m_shipment_type;
}
void OAIService::setShipmentType(const QString &shipment_type) {
    m_shipment_type = shipment_type;
    m_shipment_type_isSet = true;
}

bool OAIService::is_shipment_type_Set() const{
    return m_shipment_type_isSet;
}

bool OAIService::is_shipment_type_Valid() const{
    return m_shipment_type_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_order_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_order_value_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipment_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
