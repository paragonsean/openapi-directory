/**
 * Content API for Shopping
 * Manage your product listings and accounts for Google Shopping
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductStatusDataQualityIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductStatusDataQualityIssue::OAIProductStatusDataQualityIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductStatusDataQualityIssue::OAIProductStatusDataQualityIssue() {
    this->initializeModel();
}

OAIProductStatusDataQualityIssue::~OAIProductStatusDataQualityIssue() {}

void OAIProductStatusDataQualityIssue::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_fetch_status_isSet = false;
    m_fetch_status_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_on_landing_page_isSet = false;
    m_value_on_landing_page_isValid = false;

    m_value_provided_isSet = false;
    m_value_provided_isValid = false;
}

void OAIProductStatusDataQualityIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductStatusDataQualityIssue::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_fetch_status_isValid = ::OpenAPI::fromJsonValue(m_fetch_status, json[QString("fetchStatus")]);
    m_fetch_status_isSet = !json[QString("fetchStatus")].isNull() && m_fetch_status_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_value_on_landing_page_isValid = ::OpenAPI::fromJsonValue(m_value_on_landing_page, json[QString("valueOnLandingPage")]);
    m_value_on_landing_page_isSet = !json[QString("valueOnLandingPage")].isNull() && m_value_on_landing_page_isValid;

    m_value_provided_isValid = ::OpenAPI::fromJsonValue(m_value_provided, json[QString("valueProvided")]);
    m_value_provided_isSet = !json[QString("valueProvided")].isNull() && m_value_provided_isValid;
}

QString OAIProductStatusDataQualityIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductStatusDataQualityIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_isSet) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_fetch_status_isSet) {
        obj.insert(QString("fetchStatus"), ::OpenAPI::toJsonValue(m_fetch_status));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_on_landing_page_isSet) {
        obj.insert(QString("valueOnLandingPage"), ::OpenAPI::toJsonValue(m_value_on_landing_page));
    }
    if (m_value_provided_isSet) {
        obj.insert(QString("valueProvided"), ::OpenAPI::toJsonValue(m_value_provided));
    }
    return obj;
}

QString OAIProductStatusDataQualityIssue::getDestination() const {
    return m_destination;
}
void OAIProductStatusDataQualityIssue::setDestination(const QString &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIProductStatusDataQualityIssue::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAIProductStatusDataQualityIssue::getDetail() const {
    return m_detail;
}
void OAIProductStatusDataQualityIssue::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIProductStatusDataQualityIssue::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIProductStatusDataQualityIssue::getFetchStatus() const {
    return m_fetch_status;
}
void OAIProductStatusDataQualityIssue::setFetchStatus(const QString &fetch_status) {
    m_fetch_status = fetch_status;
    m_fetch_status_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_fetch_status_Set() const{
    return m_fetch_status_isSet;
}

bool OAIProductStatusDataQualityIssue::is_fetch_status_Valid() const{
    return m_fetch_status_isValid;
}

QString OAIProductStatusDataQualityIssue::getId() const {
    return m_id;
}
void OAIProductStatusDataQualityIssue::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProductStatusDataQualityIssue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProductStatusDataQualityIssue::getLocation() const {
    return m_location;
}
void OAIProductStatusDataQualityIssue::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProductStatusDataQualityIssue::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIProductStatusDataQualityIssue::getSeverity() const {
    return m_severity;
}
void OAIProductStatusDataQualityIssue::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIProductStatusDataQualityIssue::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIProductStatusDataQualityIssue::getTimestamp() const {
    return m_timestamp;
}
void OAIProductStatusDataQualityIssue::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIProductStatusDataQualityIssue::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIProductStatusDataQualityIssue::getValueOnLandingPage() const {
    return m_value_on_landing_page;
}
void OAIProductStatusDataQualityIssue::setValueOnLandingPage(const QString &value_on_landing_page) {
    m_value_on_landing_page = value_on_landing_page;
    m_value_on_landing_page_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_value_on_landing_page_Set() const{
    return m_value_on_landing_page_isSet;
}

bool OAIProductStatusDataQualityIssue::is_value_on_landing_page_Valid() const{
    return m_value_on_landing_page_isValid;
}

QString OAIProductStatusDataQualityIssue::getValueProvided() const {
    return m_value_provided;
}
void OAIProductStatusDataQualityIssue::setValueProvided(const QString &value_provided) {
    m_value_provided = value_provided;
    m_value_provided_isSet = true;
}

bool OAIProductStatusDataQualityIssue::is_value_provided_Set() const{
    return m_value_provided_isSet;
}

bool OAIProductStatusDataQualityIssue::is_value_provided_Valid() const{
    return m_value_provided_isValid;
}

bool OAIProductStatusDataQualityIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fetch_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_on_landing_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_provided_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductStatusDataQualityIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
