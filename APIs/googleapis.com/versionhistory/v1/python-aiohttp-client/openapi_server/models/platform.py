# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Platform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, platform_type: str=None):
        """Platform - a model defined in OpenAPI

        :param name: The name of this Platform.
        :param platform_type: The platform_type of this Platform.
        """
        self.openapi_types = {
            'name': str,
            'platform_type': str
        }

        self.attribute_map = {
            'name': 'name',
            'platform_type': 'platformType'
        }

        self._name = name
        self._platform_type = platform_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Platform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Platform of this Platform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Platform.

        Platform name. Format is \"{product}/platforms/{platform}\"

        :return: The name of this Platform.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Platform.

        Platform name. Format is \"{product}/platforms/{platform}\"

        :param name: The name of this Platform.
        :type name: str
        """

        self._name = name

    @property
    def platform_type(self):
        """Gets the platform_type of this Platform.

        Type of platform.

        :return: The platform_type of this Platform.
        :rtype: str
        """
        return self._platform_type

    @platform_type.setter
    def platform_type(self, platform_type):
        """Sets the platform_type of this Platform.

        Type of platform.

        :param platform_type: The platform_type of this Platform.
        :type platform_type: str
        """
        allowed_values = ["PLATFORM_TYPE_UNSPECIFIED", "WIN", "WIN64", "MAC", "LINUX", "ANDROID", "WEBVIEW", "IOS", "ALL", "MAC_ARM64", "LACROS", "LACROS_ARM32", "CHROMEOS", "LACROS_ARM64", "FUCHSIA"]  # noqa: E501
        if platform_type not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_type` ({0}), must be one of {1}"
                .format(platform_type, allowed_values)
            )

        self._platform_type = platform_type
