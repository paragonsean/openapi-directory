# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interval import Interval
from openapi_server import util


class Release(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fraction: float=None, fraction_group: str=None, name: str=None, serving: Interval=None, version: str=None):
        """Release - a model defined in OpenAPI

        :param fraction: The fraction of this Release.
        :param fraction_group: The fraction_group of this Release.
        :param name: The name of this Release.
        :param serving: The serving of this Release.
        :param version: The version of this Release.
        """
        self.openapi_types = {
            'fraction': float,
            'fraction_group': str,
            'name': str,
            'serving': Interval,
            'version': str
        }

        self.attribute_map = {
            'fraction': 'fraction',
            'fraction_group': 'fractionGroup',
            'name': 'name',
            'serving': 'serving',
            'version': 'version'
        }

        self._fraction = fraction
        self._fraction_group = fraction_group
        self._name = name
        self._serving = serving
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Release':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Release of this Release.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fraction(self):
        """Gets the fraction of this Release.

        Rollout fraction. This fraction indicates the fraction of people that should receive this version in this release. If the fraction is not specified in ReleaseManager, the API will assume fraction is 1.

        :return: The fraction of this Release.
        :rtype: float
        """
        return self._fraction

    @fraction.setter
    def fraction(self, fraction):
        """Sets the fraction of this Release.

        Rollout fraction. This fraction indicates the fraction of people that should receive this version in this release. If the fraction is not specified in ReleaseManager, the API will assume fraction is 1.

        :param fraction: The fraction of this Release.
        :type fraction: float
        """

        self._fraction = fraction

    @property
    def fraction_group(self):
        """Gets the fraction_group of this Release.

        Rollout fraction group. Only fractions with the same fraction_group are statistically comparable: there may be non-fractional differences between different fraction groups.

        :return: The fraction_group of this Release.
        :rtype: str
        """
        return self._fraction_group

    @fraction_group.setter
    def fraction_group(self, fraction_group):
        """Sets the fraction_group of this Release.

        Rollout fraction group. Only fractions with the same fraction_group are statistically comparable: there may be non-fractional differences between different fraction groups.

        :param fraction_group: The fraction_group of this Release.
        :type fraction_group: str
        """

        self._fraction_group = fraction_group

    @property
    def name(self):
        """Gets the name of this Release.

        Release name. Format is \"{product}/platforms/{platform}/channels/{channel}/versions/{version}/releases/{release}\"

        :return: The name of this Release.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Release.

        Release name. Format is \"{product}/platforms/{platform}/channels/{channel}/versions/{version}/releases/{release}\"

        :param name: The name of this Release.
        :type name: str
        """

        self._name = name

    @property
    def serving(self):
        """Gets the serving of this Release.


        :return: The serving of this Release.
        :rtype: Interval
        """
        return self._serving

    @serving.setter
    def serving(self, serving):
        """Sets the serving of this Release.


        :param serving: The serving of this Release.
        :type serving: Interval
        """

        self._serving = serving

    @property
    def version(self):
        """Gets the version of this Release.

        String containing just the version number. e.g. \"84.0.4147.38\"

        :return: The version of this Release.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Release.

        String containing just the version number. e.g. \"84.0.4147.38\"

        :param version: The version of this Release.
        :type version: str
        """

        self._version = version
