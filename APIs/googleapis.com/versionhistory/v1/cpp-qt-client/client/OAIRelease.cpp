/**
 * versionhistory.googleapis.com API
 * Version History API - Prod
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelease.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelease::OAIRelease(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelease::OAIRelease() {
    this->initializeModel();
}

OAIRelease::~OAIRelease() {}

void OAIRelease::initializeModel() {

    m_fraction_isSet = false;
    m_fraction_isValid = false;

    m_fraction_group_isSet = false;
    m_fraction_group_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_serving_isSet = false;
    m_serving_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIRelease::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelease::fromJsonObject(QJsonObject json) {

    m_fraction_isValid = ::OpenAPI::fromJsonValue(m_fraction, json[QString("fraction")]);
    m_fraction_isSet = !json[QString("fraction")].isNull() && m_fraction_isValid;

    m_fraction_group_isValid = ::OpenAPI::fromJsonValue(m_fraction_group, json[QString("fractionGroup")]);
    m_fraction_group_isSet = !json[QString("fractionGroup")].isNull() && m_fraction_group_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_serving_isValid = ::OpenAPI::fromJsonValue(m_serving, json[QString("serving")]);
    m_serving_isSet = !json[QString("serving")].isNull() && m_serving_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIRelease::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelease::asJsonObject() const {
    QJsonObject obj;
    if (m_fraction_isSet) {
        obj.insert(QString("fraction"), ::OpenAPI::toJsonValue(m_fraction));
    }
    if (m_fraction_group_isSet) {
        obj.insert(QString("fractionGroup"), ::OpenAPI::toJsonValue(m_fraction_group));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_serving.isSet()) {
        obj.insert(QString("serving"), ::OpenAPI::toJsonValue(m_serving));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

double OAIRelease::getFraction() const {
    return m_fraction;
}
void OAIRelease::setFraction(const double &fraction) {
    m_fraction = fraction;
    m_fraction_isSet = true;
}

bool OAIRelease::is_fraction_Set() const{
    return m_fraction_isSet;
}

bool OAIRelease::is_fraction_Valid() const{
    return m_fraction_isValid;
}

QString OAIRelease::getFractionGroup() const {
    return m_fraction_group;
}
void OAIRelease::setFractionGroup(const QString &fraction_group) {
    m_fraction_group = fraction_group;
    m_fraction_group_isSet = true;
}

bool OAIRelease::is_fraction_group_Set() const{
    return m_fraction_group_isSet;
}

bool OAIRelease::is_fraction_group_Valid() const{
    return m_fraction_group_isValid;
}

QString OAIRelease::getName() const {
    return m_name;
}
void OAIRelease::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRelease::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRelease::is_name_Valid() const{
    return m_name_isValid;
}

OAIInterval OAIRelease::getServing() const {
    return m_serving;
}
void OAIRelease::setServing(const OAIInterval &serving) {
    m_serving = serving;
    m_serving_isSet = true;
}

bool OAIRelease::is_serving_Set() const{
    return m_serving_isSet;
}

bool OAIRelease::is_serving_Valid() const{
    return m_serving_isValid;
}

QString OAIRelease::getVersion() const {
    return m_version;
}
void OAIRelease::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIRelease::is_version_Set() const{
    return m_version_isSet;
}

bool OAIRelease::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIRelease::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serving.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelease::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
