/**
 * versionhistory.googleapis.com API
 * Version History API - Prod
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Platform model module.
 * @module model/Platform
 * @version v1
 */
class Platform {
    /**
     * Constructs a new <code>Platform</code>.
     * Each Platform is owned by a Product and owns a collection of channels. Available platforms are listed in Platform enum below. Not all Channels are available for every Platform (e.g. CANARY does not exist for LINUX).
     * @alias module:model/Platform
     */
    constructor() { 
        
        Platform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Platform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Platform} obj Optional instance to populate.
     * @return {module:model/Platform} The populated <code>Platform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Platform();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platformType')) {
                obj['platformType'] = ApiClient.convertToType(data['platformType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Platform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Platform</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['platformType'] && !(typeof data['platformType'] === 'string' || data['platformType'] instanceof String)) {
            throw new Error("Expected the field `platformType` to be a primitive type in the JSON string but got " + data['platformType']);
        }

        return true;
    }


}



/**
 * Platform name. Format is \"{product}/platforms/{platform}\"
 * @member {String} name
 */
Platform.prototype['name'] = undefined;

/**
 * Type of platform.
 * @member {module:model/Platform.PlatformTypeEnum} platformType
 */
Platform.prototype['platformType'] = undefined;





/**
 * Allowed values for the <code>platformType</code> property.
 * @enum {String}
 * @readonly
 */
Platform['PlatformTypeEnum'] = {

    /**
     * value: "PLATFORM_TYPE_UNSPECIFIED"
     * @const
     */
    "PLATFORM_TYPE_UNSPECIFIED": "PLATFORM_TYPE_UNSPECIFIED",

    /**
     * value: "WIN"
     * @const
     */
    "WIN": "WIN",

    /**
     * value: "WIN64"
     * @const
     */
    "WIN64": "WIN64",

    /**
     * value: "MAC"
     * @const
     */
    "MAC": "MAC",

    /**
     * value: "LINUX"
     * @const
     */
    "LINUX": "LINUX",

    /**
     * value: "ANDROID"
     * @const
     */
    "ANDROID": "ANDROID",

    /**
     * value: "WEBVIEW"
     * @const
     */
    "WEBVIEW": "WEBVIEW",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "MAC_ARM64"
     * @const
     */
    "MAC_ARM64": "MAC_ARM64",

    /**
     * value: "LACROS"
     * @const
     */
    "LACROS": "LACROS",

    /**
     * value: "LACROS_ARM32"
     * @const
     */
    "LACROS_ARM32": "LACROS_ARM32",

    /**
     * value: "CHROMEOS"
     * @const
     */
    "CHROMEOS": "CHROMEOS",

    /**
     * value: "LACROS_ARM64"
     * @const
     */
    "LACROS_ARM64": "LACROS_ARM64",

    /**
     * value: "FUCHSIA"
     * @const
     */
    "FUCHSIA": "FUCHSIA"
};



export default Platform;

