/**
 * versionhistory.googleapis.com API
 * Version History API - Prod
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Channel model module.
 * @module model/Channel
 * @version v1
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * Each Channel is owned by a Platform and owns a collection of versions. Possible Channels are listed in the Channel enum below. Not all Channels are available for every Platform (e.g. CANARY does not exist for LINUX).
     * @alias module:model/Channel
     */
    constructor() { 
        
        Channel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            if (data.hasOwnProperty('channelType')) {
                obj['channelType'] = ApiClient.convertToType(data['channelType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channelType'] && !(typeof data['channelType'] === 'string' || data['channelType'] instanceof String)) {
            throw new Error("Expected the field `channelType` to be a primitive type in the JSON string but got " + data['channelType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Type of channel.
 * @member {module:model/Channel.ChannelTypeEnum} channelType
 */
Channel.prototype['channelType'] = undefined;

/**
 * Channel name. Format is \"{product}/platforms/{platform}/channels/{channel}\"
 * @member {String} name
 */
Channel.prototype['name'] = undefined;





/**
 * Allowed values for the <code>channelType</code> property.
 * @enum {String}
 * @readonly
 */
Channel['ChannelTypeEnum'] = {

    /**
     * value: "CHANNEL_TYPE_UNSPECIFIED"
     * @const
     */
    "CHANNEL_TYPE_UNSPECIFIED": "CHANNEL_TYPE_UNSPECIFIED",

    /**
     * value: "STABLE"
     * @const
     */
    "STABLE": "STABLE",

    /**
     * value: "BETA"
     * @const
     */
    "BETA": "BETA",

    /**
     * value: "DEV"
     * @const
     */
    "DEV": "DEV",

    /**
     * value: "CANARY"
     * @const
     */
    "CANARY": "CANARY",

    /**
     * value: "CANARY_ASAN"
     * @const
     */
    "CANARY_ASAN": "CANARY_ASAN",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "EXTENDED"
     * @const
     */
    "EXTENDED": "EXTENDED",

    /**
     * value: "LTS"
     * @const
     */
    "LTS": "LTS",

    /**
     * value: "LTC"
     * @const
     */
    "LTC": "LTC"
};



export default Channel;

