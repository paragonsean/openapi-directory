/**
 * versionhistory.googleapis.com API
 * Version History API - Prod
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Interval from './Interval';

/**
 * The Release model module.
 * @module model/Release
 * @version v1
 */
class Release {
    /**
     * Constructs a new <code>Release</code>.
     * A Release is owned by a Version. A Release contains information about the release(s) of its parent version. This includes when the release began and ended, as well as what percentage it was released at. If the version is released again, or if the serving percentage changes, it will create another release under the version.
     * @alias module:model/Release
     */
    constructor() { 
        
        Release.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Release</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Release} obj Optional instance to populate.
     * @return {module:model/Release} The populated <code>Release</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Release();

            if (data.hasOwnProperty('fraction')) {
                obj['fraction'] = ApiClient.convertToType(data['fraction'], 'Number');
            }
            if (data.hasOwnProperty('fractionGroup')) {
                obj['fractionGroup'] = ApiClient.convertToType(data['fractionGroup'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('serving')) {
                obj['serving'] = Interval.constructFromObject(data['serving']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Release</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Release</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fractionGroup'] && !(typeof data['fractionGroup'] === 'string' || data['fractionGroup'] instanceof String)) {
            throw new Error("Expected the field `fractionGroup` to be a primitive type in the JSON string but got " + data['fractionGroup']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `serving`
        if (data['serving']) { // data not null
          Interval.validateJSON(data['serving']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * Rollout fraction. This fraction indicates the fraction of people that should receive this version in this release. If the fraction is not specified in ReleaseManager, the API will assume fraction is 1.
 * @member {Number} fraction
 */
Release.prototype['fraction'] = undefined;

/**
 * Rollout fraction group. Only fractions with the same fraction_group are statistically comparable: there may be non-fractional differences between different fraction groups.
 * @member {String} fractionGroup
 */
Release.prototype['fractionGroup'] = undefined;

/**
 * Release name. Format is \"{product}/platforms/{platform}/channels/{channel}/versions/{version}/releases/{release}\"
 * @member {String} name
 */
Release.prototype['name'] = undefined;

/**
 * @member {module:model/Interval} serving
 */
Release.prototype['serving'] = undefined;

/**
 * String containing just the version number. e.g. \"84.0.4147.38\"
 * @member {String} version
 */
Release.prototype['version'] = undefined;






export default Release;

