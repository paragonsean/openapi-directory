/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompleteVerificationRequest from '../model/CompleteVerificationRequest';
import CompleteVerificationResponse from '../model/CompleteVerificationResponse';
import FetchVerificationOptionsRequest from '../model/FetchVerificationOptionsRequest';
import FetchVerificationOptionsResponse from '../model/FetchVerificationOptionsResponse';
import ListVerificationsResponse from '../model/ListVerificationsResponse';
import VerifyLocationRequest from '../model/VerifyLocationRequest';
import VerifyLocationResponse from '../model/VerifyLocationResponse';
import VoiceOfMerchantState from '../model/VoiceOfMerchantState';

/**
* Locations service.
* @module api/LocationsApi
* @version v1
*/
export default class LocationsApi {

    /**
    * Constructs a new LocationsApi. 
    * @alias module:api/LocationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mybusinessverificationsLocationsFetchVerificationOptions operation.
     * @callback module:api/LocationsApi~mybusinessverificationsLocationsFetchVerificationOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchVerificationOptionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reports all eligible verification options for a location in a specific language.
     * @param {String} location Required. The location to verify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/FetchVerificationOptionsRequest} [fetchVerificationOptionsRequest] 
     * @param {module:api/LocationsApi~mybusinessverificationsLocationsFetchVerificationOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchVerificationOptionsResponse}
     */
    mybusinessverificationsLocationsFetchVerificationOptions(location, opts, callback) {
      opts = opts || {};
      let postBody = opts['fetchVerificationOptionsRequest'];
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling mybusinessverificationsLocationsFetchVerificationOptions");
      }

      let pathParams = {
        'location': location
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FetchVerificationOptionsResponse;
      return this.apiClient.callApi(
        '/v1/{location}:fetchVerificationOptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mybusinessverificationsLocationsGetVoiceOfMerchantState operation.
     * @callback module:api/LocationsApi~mybusinessverificationsLocationsGetVoiceOfMerchantStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VoiceOfMerchantState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the VoiceOfMerchant state.
     * @param {String} name Required. Resource name of the location.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/LocationsApi~mybusinessverificationsLocationsGetVoiceOfMerchantStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VoiceOfMerchantState}
     */
    mybusinessverificationsLocationsGetVoiceOfMerchantState(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling mybusinessverificationsLocationsGetVoiceOfMerchantState");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VoiceOfMerchantState;
      return this.apiClient.callApi(
        '/v1/{name}/VoiceOfMerchantState', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mybusinessverificationsLocationsVerificationsComplete operation.
     * @callback module:api/LocationsApi~mybusinessverificationsLocationsVerificationsCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompleteVerificationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.
     * @param {String} name Required. Resource name of the verification to complete.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CompleteVerificationRequest} [completeVerificationRequest] 
     * @param {module:api/LocationsApi~mybusinessverificationsLocationsVerificationsCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompleteVerificationResponse}
     */
    mybusinessverificationsLocationsVerificationsComplete(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['completeVerificationRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling mybusinessverificationsLocationsVerificationsComplete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CompleteVerificationResponse;
      return this.apiClient.callApi(
        '/v1/{name}:complete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mybusinessverificationsLocationsVerificationsList operation.
     * @callback module:api/LocationsApi~mybusinessverificationsLocationsVerificationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVerificationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List verifications of a location, ordered by create time.
     * @param {String} parent Required. Resource name of the location that verification requests belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] How many verification to include per page. Minimum is 1, and the default and maximum page size is 100.
     * @param {String} [pageToken] If specified, returns the next page of verifications.
     * @param {module:api/LocationsApi~mybusinessverificationsLocationsVerificationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVerificationsResponse}
     */
    mybusinessverificationsLocationsVerificationsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling mybusinessverificationsLocationsVerificationsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVerificationsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/verifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mybusinessverificationsLocationsVerify operation.
     * @callback module:api/LocationsApi~mybusinessverificationsLocationsVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyLocationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the verification process for a location.
     * @param {String} name Required. Resource name of the location to verify.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/VerifyLocationRequest} [verifyLocationRequest] 
     * @param {module:api/LocationsApi~mybusinessverificationsLocationsVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyLocationResponse}
     */
    mybusinessverificationsLocationsVerify(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['verifyLocationRequest'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling mybusinessverificationsLocationsVerify");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyLocationResponse;
      return this.apiClient.callApi(
        '/v1/{name}:verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
