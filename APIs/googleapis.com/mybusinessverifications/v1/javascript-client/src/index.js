/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AddressVerificationData from './model/AddressVerificationData';
import CompleteVerificationRequest from './model/CompleteVerificationRequest';
import CompleteVerificationResponse from './model/CompleteVerificationResponse';
import ComplyWithGuidelines from './model/ComplyWithGuidelines';
import EmailVerificationData from './model/EmailVerificationData';
import FetchVerificationOptionsRequest from './model/FetchVerificationOptionsRequest';
import FetchVerificationOptionsResponse from './model/FetchVerificationOptionsResponse';
import ListVerificationsResponse from './model/ListVerificationsResponse';
import PostalAddress from './model/PostalAddress';
import ServiceBusinessContext from './model/ServiceBusinessContext';
import Verification from './model/Verification';
import VerificationOption from './model/VerificationOption';
import VerificationToken from './model/VerificationToken';
import Verify from './model/Verify';
import VerifyLocationRequest from './model/VerifyLocationRequest';
import VerifyLocationResponse from './model/VerifyLocationResponse';
import VoiceOfMerchantState from './model/VoiceOfMerchantState';
import LocationsApi from './api/LocationsApi';


/**
* The My Business Verifications API provides an interface for taking verifications related actions for locations..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MyBusinessVerificationsApi = require('index'); // See note below*.
* var xxxSvc = new MyBusinessVerificationsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MyBusinessVerificationsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MyBusinessVerificationsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MyBusinessVerificationsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AddressVerificationData model constructor.
     * @property {module:model/AddressVerificationData}
     */
    AddressVerificationData,

    /**
     * The CompleteVerificationRequest model constructor.
     * @property {module:model/CompleteVerificationRequest}
     */
    CompleteVerificationRequest,

    /**
     * The CompleteVerificationResponse model constructor.
     * @property {module:model/CompleteVerificationResponse}
     */
    CompleteVerificationResponse,

    /**
     * The ComplyWithGuidelines model constructor.
     * @property {module:model/ComplyWithGuidelines}
     */
    ComplyWithGuidelines,

    /**
     * The EmailVerificationData model constructor.
     * @property {module:model/EmailVerificationData}
     */
    EmailVerificationData,

    /**
     * The FetchVerificationOptionsRequest model constructor.
     * @property {module:model/FetchVerificationOptionsRequest}
     */
    FetchVerificationOptionsRequest,

    /**
     * The FetchVerificationOptionsResponse model constructor.
     * @property {module:model/FetchVerificationOptionsResponse}
     */
    FetchVerificationOptionsResponse,

    /**
     * The ListVerificationsResponse model constructor.
     * @property {module:model/ListVerificationsResponse}
     */
    ListVerificationsResponse,

    /**
     * The PostalAddress model constructor.
     * @property {module:model/PostalAddress}
     */
    PostalAddress,

    /**
     * The ServiceBusinessContext model constructor.
     * @property {module:model/ServiceBusinessContext}
     */
    ServiceBusinessContext,

    /**
     * The Verification model constructor.
     * @property {module:model/Verification}
     */
    Verification,

    /**
     * The VerificationOption model constructor.
     * @property {module:model/VerificationOption}
     */
    VerificationOption,

    /**
     * The VerificationToken model constructor.
     * @property {module:model/VerificationToken}
     */
    VerificationToken,

    /**
     * The Verify model constructor.
     * @property {module:model/Verify}
     */
    Verify,

    /**
     * The VerifyLocationRequest model constructor.
     * @property {module:model/VerifyLocationRequest}
     */
    VerifyLocationRequest,

    /**
     * The VerifyLocationResponse model constructor.
     * @property {module:model/VerifyLocationResponse}
     */
    VerifyLocationResponse,

    /**
     * The VoiceOfMerchantState model constructor.
     * @property {module:model/VoiceOfMerchantState}
     */
    VoiceOfMerchantState,

    /**
    * The LocationsApi service constructor.
    * @property {module:api/LocationsApi}
    */
    LocationsApi
};
