/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressVerificationData from './AddressVerificationData';
import EmailVerificationData from './EmailVerificationData';

/**
 * The VerificationOption model module.
 * @module model/VerificationOption
 * @version v1
 */
class VerificationOption {
    /**
     * Constructs a new <code>VerificationOption</code>.
     * The verification option represents how to verify the location (indicated by verification method) and where the verification will be sent to (indicated by display data).
     * @alias module:model/VerificationOption
     */
    constructor() { 
        
        VerificationOption.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VerificationOption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VerificationOption} obj Optional instance to populate.
     * @return {module:model/VerificationOption} The populated <code>VerificationOption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VerificationOption();

            if (data.hasOwnProperty('addressData')) {
                obj['addressData'] = AddressVerificationData.constructFromObject(data['addressData']);
            }
            if (data.hasOwnProperty('announcement')) {
                obj['announcement'] = ApiClient.convertToType(data['announcement'], 'String');
            }
            if (data.hasOwnProperty('emailData')) {
                obj['emailData'] = EmailVerificationData.constructFromObject(data['emailData']);
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('verificationMethod')) {
                obj['verificationMethod'] = ApiClient.convertToType(data['verificationMethod'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VerificationOption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VerificationOption</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addressData`
        if (data['addressData']) { // data not null
          AddressVerificationData.validateJSON(data['addressData']);
        }
        // ensure the json data is a string
        if (data['announcement'] && !(typeof data['announcement'] === 'string' || data['announcement'] instanceof String)) {
            throw new Error("Expected the field `announcement` to be a primitive type in the JSON string but got " + data['announcement']);
        }
        // validate the optional field `emailData`
        if (data['emailData']) { // data not null
          EmailVerificationData.validateJSON(data['emailData']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['verificationMethod'] && !(typeof data['verificationMethod'] === 'string' || data['verificationMethod'] instanceof String)) {
            throw new Error("Expected the field `verificationMethod` to be a primitive type in the JSON string but got " + data['verificationMethod']);
        }

        return true;
    }


}



/**
 * @member {module:model/AddressVerificationData} addressData
 */
VerificationOption.prototype['addressData'] = undefined;

/**
 * Set only if the method is VETTED_PARTNER.
 * @member {String} announcement
 */
VerificationOption.prototype['announcement'] = undefined;

/**
 * @member {module:model/EmailVerificationData} emailData
 */
VerificationOption.prototype['emailData'] = undefined;

/**
 * Set only if the method is PHONE_CALL or SMS. Phone number that the PIN will be sent to.
 * @member {String} phoneNumber
 */
VerificationOption.prototype['phoneNumber'] = undefined;

/**
 * Method to verify the location.
 * @member {module:model/VerificationOption.VerificationMethodEnum} verificationMethod
 */
VerificationOption.prototype['verificationMethod'] = undefined;





/**
 * Allowed values for the <code>verificationMethod</code> property.
 * @enum {String}
 * @readonly
 */
VerificationOption['VerificationMethodEnum'] = {

    /**
     * value: "VERIFICATION_METHOD_UNSPECIFIED"
     * @const
     */
    "VERIFICATION_METHOD_UNSPECIFIED": "VERIFICATION_METHOD_UNSPECIFIED",

    /**
     * value: "ADDRESS"
     * @const
     */
    "ADDRESS": "ADDRESS",

    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",

    /**
     * value: "PHONE_CALL"
     * @const
     */
    "PHONE_CALL": "PHONE_CALL",

    /**
     * value: "SMS"
     * @const
     */
    "SMS": "SMS",

    /**
     * value: "AUTO"
     * @const
     */
    "AUTO": "AUTO",

    /**
     * value: "VETTED_PARTNER"
     * @const
     */
    "VETTED_PARTNER": "VETTED_PARTNER"
};



export default VerificationOption;

