/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComplyWithGuidelines from './ComplyWithGuidelines';
import Verify from './Verify';

/**
 * The VoiceOfMerchantState model module.
 * @module model/VoiceOfMerchantState
 * @version v1
 */
class VoiceOfMerchantState {
    /**
     * Constructs a new <code>VoiceOfMerchantState</code>.
     * Response message for VoiceOfMerchant.GetVoiceOfMerchantState.
     * @alias module:model/VoiceOfMerchantState
     */
    constructor() { 
        
        VoiceOfMerchantState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VoiceOfMerchantState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VoiceOfMerchantState} obj Optional instance to populate.
     * @return {module:model/VoiceOfMerchantState} The populated <code>VoiceOfMerchantState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VoiceOfMerchantState();

            if (data.hasOwnProperty('complyWithGuidelines')) {
                obj['complyWithGuidelines'] = ComplyWithGuidelines.constructFromObject(data['complyWithGuidelines']);
            }
            if (data.hasOwnProperty('hasBusinessAuthority')) {
                obj['hasBusinessAuthority'] = ApiClient.convertToType(data['hasBusinessAuthority'], 'Boolean');
            }
            if (data.hasOwnProperty('hasVoiceOfMerchant')) {
                obj['hasVoiceOfMerchant'] = ApiClient.convertToType(data['hasVoiceOfMerchant'], 'Boolean');
            }
            if (data.hasOwnProperty('resolveOwnershipConflict')) {
                obj['resolveOwnershipConflict'] = ApiClient.convertToType(data['resolveOwnershipConflict'], Object);
            }
            if (data.hasOwnProperty('verify')) {
                obj['verify'] = Verify.constructFromObject(data['verify']);
            }
            if (data.hasOwnProperty('waitForVoiceOfMerchant')) {
                obj['waitForVoiceOfMerchant'] = ApiClient.convertToType(data['waitForVoiceOfMerchant'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VoiceOfMerchantState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VoiceOfMerchantState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `complyWithGuidelines`
        if (data['complyWithGuidelines']) { // data not null
          ComplyWithGuidelines.validateJSON(data['complyWithGuidelines']);
        }
        // validate the optional field `verify`
        if (data['verify']) { // data not null
          Verify.validateJSON(data['verify']);
        }

        return true;
    }


}



/**
 * @member {module:model/ComplyWithGuidelines} complyWithGuidelines
 */
VoiceOfMerchantState.prototype['complyWithGuidelines'] = undefined;

/**
 * Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).
 * @member {Boolean} hasBusinessAuthority
 */
VoiceOfMerchantState.prototype['hasBusinessAuthority'] = undefined;

/**
 * Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase.
 * @member {Boolean} hasVoiceOfMerchant
 */
VoiceOfMerchantState.prototype['hasVoiceOfMerchant'] = undefined;

/**
 * Indicates that the location duplicates another location that is in good standing.
 * @member {Object} resolveOwnershipConflict
 */
VoiceOfMerchantState.prototype['resolveOwnershipConflict'] = undefined;

/**
 * @member {module:model/Verify} verify
 */
VoiceOfMerchantState.prototype['verify'] = undefined;

/**
 * Indicates that the location will gain voice of merchant after passing review.
 * @member {Object} waitForVoiceOfMerchant
 */
VoiceOfMerchantState.prototype['waitForVoiceOfMerchant'] = undefined;






export default VoiceOfMerchantState;

