/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Verify model module.
 * @module model/Verify
 * @version v1
 */
class Verify {
    /**
     * Constructs a new <code>Verify</code>.
     * Indicates that the location requires verification. Contains information about the current verification actions performed on the location.
     * @alias module:model/Verify
     */
    constructor() { 
        
        Verify.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Verify</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Verify} obj Optional instance to populate.
     * @return {module:model/Verify} The populated <code>Verify</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Verify();

            if (data.hasOwnProperty('hasPendingVerification')) {
                obj['hasPendingVerification'] = ApiClient.convertToType(data['hasPendingVerification'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Verify</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Verify</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Indicates whether a verification process has already started, and can be completed by the location.
 * @member {Boolean} hasPendingVerification
 */
Verify.prototype['hasPendingVerification'] = undefined;






export default Verify;

