/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Verification model module.
 * @module model/Verification
 * @version v1
 */
class Verification {
    /**
     * Constructs a new <code>Verification</code>.
     * A verification represents a verification attempt on a location.
     * @alias module:model/Verification
     */
    constructor() { 
        
        Verification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Verification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Verification} obj Optional instance to populate.
     * @return {module:model/Verification} The populated <code>Verification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Verification();

            if (data.hasOwnProperty('announcement')) {
                obj['announcement'] = ApiClient.convertToType(data['announcement'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Verification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Verification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['announcement'] && !(typeof data['announcement'] === 'string' || data['announcement'] instanceof String)) {
            throw new Error("Expected the field `announcement` to be a primitive type in the JSON string but got " + data['announcement']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Optional. Response announcement set only if the method is VETTED_PARTNER.
 * @member {String} announcement
 */
Verification.prototype['announcement'] = undefined;

/**
 * The timestamp when the verification is requested.
 * @member {String} createTime
 */
Verification.prototype['createTime'] = undefined;

/**
 * The method of the verification.
 * @member {module:model/Verification.MethodEnum} method
 */
Verification.prototype['method'] = undefined;

/**
 * Resource name of the verification.
 * @member {String} name
 */
Verification.prototype['name'] = undefined;

/**
 * The state of the verification.
 * @member {module:model/Verification.StateEnum} state
 */
Verification.prototype['state'] = undefined;





/**
 * Allowed values for the <code>method</code> property.
 * @enum {String}
 * @readonly
 */
Verification['MethodEnum'] = {

    /**
     * value: "VERIFICATION_METHOD_UNSPECIFIED"
     * @const
     */
    "VERIFICATION_METHOD_UNSPECIFIED": "VERIFICATION_METHOD_UNSPECIFIED",

    /**
     * value: "ADDRESS"
     * @const
     */
    "ADDRESS": "ADDRESS",

    /**
     * value: "EMAIL"
     * @const
     */
    "EMAIL": "EMAIL",

    /**
     * value: "PHONE_CALL"
     * @const
     */
    "PHONE_CALL": "PHONE_CALL",

    /**
     * value: "SMS"
     * @const
     */
    "SMS": "SMS",

    /**
     * value: "AUTO"
     * @const
     */
    "AUTO": "AUTO",

    /**
     * value: "VETTED_PARTNER"
     * @const
     */
    "VETTED_PARTNER": "VETTED_PARTNER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Verification['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default Verification;

