# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_business_context import ServiceBusinessContext
from openapi_server.models.verification_token import VerificationToken
from openapi_server import util


class VerifyLocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: ServiceBusinessContext=None, email_address: str=None, language_code: str=None, mailer_contact: str=None, method: str=None, phone_number: str=None, token: VerificationToken=None):
        """VerifyLocationRequest - a model defined in OpenAPI

        :param context: The context of this VerifyLocationRequest.
        :param email_address: The email_address of this VerifyLocationRequest.
        :param language_code: The language_code of this VerifyLocationRequest.
        :param mailer_contact: The mailer_contact of this VerifyLocationRequest.
        :param method: The method of this VerifyLocationRequest.
        :param phone_number: The phone_number of this VerifyLocationRequest.
        :param token: The token of this VerifyLocationRequest.
        """
        self.openapi_types = {
            'context': ServiceBusinessContext,
            'email_address': str,
            'language_code': str,
            'mailer_contact': str,
            'method': str,
            'phone_number': str,
            'token': VerificationToken
        }

        self.attribute_map = {
            'context': 'context',
            'email_address': 'emailAddress',
            'language_code': 'languageCode',
            'mailer_contact': 'mailerContact',
            'method': 'method',
            'phone_number': 'phoneNumber',
            'token': 'token'
        }

        self._context = context
        self._email_address = email_address
        self._language_code = language_code
        self._mailer_contact = mailer_contact
        self._method = method
        self._phone_number = phone_number
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyLocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyLocationRequest of this VerifyLocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this VerifyLocationRequest.


        :return: The context of this VerifyLocationRequest.
        :rtype: ServiceBusinessContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this VerifyLocationRequest.


        :param context: The context of this VerifyLocationRequest.
        :type context: ServiceBusinessContext
        """

        self._context = context

    @property
    def email_address(self):
        """Gets the email_address of this VerifyLocationRequest.

        Optional. The input for EMAIL method. Email address where the PIN should be sent to. An email address is accepted only if it is one of the addresses provided by FetchVerificationOptions. If the EmailVerificationData has is_user_name_editable set to true, the client may specify a different user name (local-part) but must match the domain name.

        :return: The email_address of this VerifyLocationRequest.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this VerifyLocationRequest.

        Optional. The input for EMAIL method. Email address where the PIN should be sent to. An email address is accepted only if it is one of the addresses provided by FetchVerificationOptions. If the EmailVerificationData has is_user_name_editable set to true, the client may specify a different user name (local-part) but must match the domain name.

        :param email_address: The email_address of this VerifyLocationRequest.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def language_code(self):
        """Gets the language_code of this VerifyLocationRequest.

        Optional. The BCP 47 language code representing the language that is to be used for the verification process.

        :return: The language_code of this VerifyLocationRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this VerifyLocationRequest.

        Optional. The BCP 47 language code representing the language that is to be used for the verification process.

        :param language_code: The language_code of this VerifyLocationRequest.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def mailer_contact(self):
        """Gets the mailer_contact of this VerifyLocationRequest.

        Optional. The input for ADDRESS method. Contact name the mail should be sent to.

        :return: The mailer_contact of this VerifyLocationRequest.
        :rtype: str
        """
        return self._mailer_contact

    @mailer_contact.setter
    def mailer_contact(self, mailer_contact):
        """Sets the mailer_contact of this VerifyLocationRequest.

        Optional. The input for ADDRESS method. Contact name the mail should be sent to.

        :param mailer_contact: The mailer_contact of this VerifyLocationRequest.
        :type mailer_contact: str
        """

        self._mailer_contact = mailer_contact

    @property
    def method(self):
        """Gets the method of this VerifyLocationRequest.

        Required. Verification method.

        :return: The method of this VerifyLocationRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this VerifyLocationRequest.

        Required. Verification method.

        :param method: The method of this VerifyLocationRequest.
        :type method: str
        """
        allowed_values = ["VERIFICATION_METHOD_UNSPECIFIED", "ADDRESS", "EMAIL", "PHONE_CALL", "SMS", "AUTO", "VETTED_PARTNER"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def phone_number(self):
        """Gets the phone_number of this VerifyLocationRequest.

        Optional. The input for PHONE_CALL/SMS method The phone number that should be called or be sent SMS to. It must be one of the phone numbers in the eligible options.

        :return: The phone_number of this VerifyLocationRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this VerifyLocationRequest.

        Optional. The input for PHONE_CALL/SMS method The phone number that should be called or be sent SMS to. It must be one of the phone numbers in the eligible options.

        :param phone_number: The phone_number of this VerifyLocationRequest.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def token(self):
        """Gets the token of this VerifyLocationRequest.


        :return: The token of this VerifyLocationRequest.
        :rtype: VerificationToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this VerifyLocationRequest.


        :param token: The token of this VerifyLocationRequest.
        :type token: VerificationToken
        """

        self._token = token
