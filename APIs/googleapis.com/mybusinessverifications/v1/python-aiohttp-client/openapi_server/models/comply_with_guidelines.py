# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComplyWithGuidelines(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_reason: str=None):
        """ComplyWithGuidelines - a model defined in OpenAPI

        :param recommendation_reason: The recommendation_reason of this ComplyWithGuidelines.
        """
        self.openapi_types = {
            'recommendation_reason': str
        }

        self.attribute_map = {
            'recommendation_reason': 'recommendationReason'
        }

        self._recommendation_reason = recommendation_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplyWithGuidelines':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplyWithGuidelines of this ComplyWithGuidelines.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_reason(self):
        """Gets the recommendation_reason of this ComplyWithGuidelines.

        The reason why the location is being recommended to comply with guidelines.

        :return: The recommendation_reason of this ComplyWithGuidelines.
        :rtype: str
        """
        return self._recommendation_reason

    @recommendation_reason.setter
    def recommendation_reason(self, recommendation_reason):
        """Sets the recommendation_reason of this ComplyWithGuidelines.

        The reason why the location is being recommended to comply with guidelines.

        :param recommendation_reason: The recommendation_reason of this ComplyWithGuidelines.
        :type recommendation_reason: str
        """
        allowed_values = ["RECOMMENDATION_REASON_UNSPECIFIED", "BUSINESS_LOCATION_SUSPENDED", "BUSINESS_LOCATION_DISABLED"]  # noqa: E501
        if recommendation_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `recommendation_reason` ({0}), must be one of {1}"
                .format(recommendation_reason, allowed_values)
            )

        self._recommendation_reason = recommendation_reason
