# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EmailVerificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain: str=None, is_user_name_editable: bool=None, user: str=None):
        """EmailVerificationData - a model defined in OpenAPI

        :param domain: The domain of this EmailVerificationData.
        :param is_user_name_editable: The is_user_name_editable of this EmailVerificationData.
        :param user: The user of this EmailVerificationData.
        """
        self.openapi_types = {
            'domain': str,
            'is_user_name_editable': bool,
            'user': str
        }

        self.attribute_map = {
            'domain': 'domain',
            'is_user_name_editable': 'isUserNameEditable',
            'user': 'user'
        }

        self._domain = domain
        self._is_user_name_editable = is_user_name_editable
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EmailVerificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EmailVerificationData of this EmailVerificationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain(self):
        """Gets the domain of this EmailVerificationData.

        Domain name in the email address. e.g. \"gmail.com\" in foo@gmail.com

        :return: The domain of this EmailVerificationData.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this EmailVerificationData.

        Domain name in the email address. e.g. \"gmail.com\" in foo@gmail.com

        :param domain: The domain of this EmailVerificationData.
        :type domain: str
        """

        self._domain = domain

    @property
    def is_user_name_editable(self):
        """Gets the is_user_name_editable of this EmailVerificationData.

        Whether client is allowed to provide a different user name.

        :return: The is_user_name_editable of this EmailVerificationData.
        :rtype: bool
        """
        return self._is_user_name_editable

    @is_user_name_editable.setter
    def is_user_name_editable(self, is_user_name_editable):
        """Sets the is_user_name_editable of this EmailVerificationData.

        Whether client is allowed to provide a different user name.

        :param is_user_name_editable: The is_user_name_editable of this EmailVerificationData.
        :type is_user_name_editable: bool
        """

        self._is_user_name_editable = is_user_name_editable

    @property
    def user(self):
        """Gets the user of this EmailVerificationData.

        User name in the email address. e.g. \"foo\" in foo@gmail.com

        :return: The user of this EmailVerificationData.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EmailVerificationData.

        User name in the email address. e.g. \"foo\" in foo@gmail.com

        :param user: The user of this EmailVerificationData.
        :type user: str
        """

        self._user = user
