# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comply_with_guidelines import ComplyWithGuidelines
from openapi_server.models.verify import Verify
from openapi_server import util


class VoiceOfMerchantState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comply_with_guidelines: ComplyWithGuidelines=None, has_business_authority: bool=None, has_voice_of_merchant: bool=None, resolve_ownership_conflict: object=None, verify: Verify=None, wait_for_voice_of_merchant: object=None):
        """VoiceOfMerchantState - a model defined in OpenAPI

        :param comply_with_guidelines: The comply_with_guidelines of this VoiceOfMerchantState.
        :param has_business_authority: The has_business_authority of this VoiceOfMerchantState.
        :param has_voice_of_merchant: The has_voice_of_merchant of this VoiceOfMerchantState.
        :param resolve_ownership_conflict: The resolve_ownership_conflict of this VoiceOfMerchantState.
        :param verify: The verify of this VoiceOfMerchantState.
        :param wait_for_voice_of_merchant: The wait_for_voice_of_merchant of this VoiceOfMerchantState.
        """
        self.openapi_types = {
            'comply_with_guidelines': ComplyWithGuidelines,
            'has_business_authority': bool,
            'has_voice_of_merchant': bool,
            'resolve_ownership_conflict': object,
            'verify': Verify,
            'wait_for_voice_of_merchant': object
        }

        self.attribute_map = {
            'comply_with_guidelines': 'complyWithGuidelines',
            'has_business_authority': 'hasBusinessAuthority',
            'has_voice_of_merchant': 'hasVoiceOfMerchant',
            'resolve_ownership_conflict': 'resolveOwnershipConflict',
            'verify': 'verify',
            'wait_for_voice_of_merchant': 'waitForVoiceOfMerchant'
        }

        self._comply_with_guidelines = comply_with_guidelines
        self._has_business_authority = has_business_authority
        self._has_voice_of_merchant = has_voice_of_merchant
        self._resolve_ownership_conflict = resolve_ownership_conflict
        self._verify = verify
        self._wait_for_voice_of_merchant = wait_for_voice_of_merchant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoiceOfMerchantState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoiceOfMerchantState of this VoiceOfMerchantState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comply_with_guidelines(self):
        """Gets the comply_with_guidelines of this VoiceOfMerchantState.


        :return: The comply_with_guidelines of this VoiceOfMerchantState.
        :rtype: ComplyWithGuidelines
        """
        return self._comply_with_guidelines

    @comply_with_guidelines.setter
    def comply_with_guidelines(self, comply_with_guidelines):
        """Sets the comply_with_guidelines of this VoiceOfMerchantState.


        :param comply_with_guidelines: The comply_with_guidelines of this VoiceOfMerchantState.
        :type comply_with_guidelines: ComplyWithGuidelines
        """

        self._comply_with_guidelines = comply_with_guidelines

    @property
    def has_business_authority(self):
        """Gets the has_business_authority of this VoiceOfMerchantState.

        Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).

        :return: The has_business_authority of this VoiceOfMerchantState.
        :rtype: bool
        """
        return self._has_business_authority

    @has_business_authority.setter
    def has_business_authority(self, has_business_authority):
        """Sets the has_business_authority of this VoiceOfMerchantState.

        Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).

        :param has_business_authority: The has_business_authority of this VoiceOfMerchantState.
        :type has_business_authority: bool
        """

        self._has_business_authority = has_business_authority

    @property
    def has_voice_of_merchant(self):
        """Gets the has_voice_of_merchant of this VoiceOfMerchantState.

        Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase.

        :return: The has_voice_of_merchant of this VoiceOfMerchantState.
        :rtype: bool
        """
        return self._has_voice_of_merchant

    @has_voice_of_merchant.setter
    def has_voice_of_merchant(self, has_voice_of_merchant):
        """Sets the has_voice_of_merchant of this VoiceOfMerchantState.

        Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase.

        :param has_voice_of_merchant: The has_voice_of_merchant of this VoiceOfMerchantState.
        :type has_voice_of_merchant: bool
        """

        self._has_voice_of_merchant = has_voice_of_merchant

    @property
    def resolve_ownership_conflict(self):
        """Gets the resolve_ownership_conflict of this VoiceOfMerchantState.

        Indicates that the location duplicates another location that is in good standing.

        :return: The resolve_ownership_conflict of this VoiceOfMerchantState.
        :rtype: object
        """
        return self._resolve_ownership_conflict

    @resolve_ownership_conflict.setter
    def resolve_ownership_conflict(self, resolve_ownership_conflict):
        """Sets the resolve_ownership_conflict of this VoiceOfMerchantState.

        Indicates that the location duplicates another location that is in good standing.

        :param resolve_ownership_conflict: The resolve_ownership_conflict of this VoiceOfMerchantState.
        :type resolve_ownership_conflict: object
        """

        self._resolve_ownership_conflict = resolve_ownership_conflict

    @property
    def verify(self):
        """Gets the verify of this VoiceOfMerchantState.


        :return: The verify of this VoiceOfMerchantState.
        :rtype: Verify
        """
        return self._verify

    @verify.setter
    def verify(self, verify):
        """Sets the verify of this VoiceOfMerchantState.


        :param verify: The verify of this VoiceOfMerchantState.
        :type verify: Verify
        """

        self._verify = verify

    @property
    def wait_for_voice_of_merchant(self):
        """Gets the wait_for_voice_of_merchant of this VoiceOfMerchantState.

        Indicates that the location will gain voice of merchant after passing review.

        :return: The wait_for_voice_of_merchant of this VoiceOfMerchantState.
        :rtype: object
        """
        return self._wait_for_voice_of_merchant

    @wait_for_voice_of_merchant.setter
    def wait_for_voice_of_merchant(self, wait_for_voice_of_merchant):
        """Sets the wait_for_voice_of_merchant of this VoiceOfMerchantState.

        Indicates that the location will gain voice of merchant after passing review.

        :param wait_for_voice_of_merchant: The wait_for_voice_of_merchant of this VoiceOfMerchantState.
        :type wait_for_voice_of_merchant: object
        """

        self._wait_for_voice_of_merchant = wait_for_voice_of_merchant
