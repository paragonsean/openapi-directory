# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Verification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, announcement: str=None, create_time: str=None, method: str=None, name: str=None, state: str=None):
        """Verification - a model defined in OpenAPI

        :param announcement: The announcement of this Verification.
        :param create_time: The create_time of this Verification.
        :param method: The method of this Verification.
        :param name: The name of this Verification.
        :param state: The state of this Verification.
        """
        self.openapi_types = {
            'announcement': str,
            'create_time': str,
            'method': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'announcement': 'announcement',
            'create_time': 'createTime',
            'method': 'method',
            'name': 'name',
            'state': 'state'
        }

        self._announcement = announcement
        self._create_time = create_time
        self._method = method
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Verification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Verification of this Verification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def announcement(self):
        """Gets the announcement of this Verification.

        Optional. Response announcement set only if the method is VETTED_PARTNER.

        :return: The announcement of this Verification.
        :rtype: str
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this Verification.

        Optional. Response announcement set only if the method is VETTED_PARTNER.

        :param announcement: The announcement of this Verification.
        :type announcement: str
        """

        self._announcement = announcement

    @property
    def create_time(self):
        """Gets the create_time of this Verification.

        The timestamp when the verification is requested.

        :return: The create_time of this Verification.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Verification.

        The timestamp when the verification is requested.

        :param create_time: The create_time of this Verification.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def method(self):
        """Gets the method of this Verification.

        The method of the verification.

        :return: The method of this Verification.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Verification.

        The method of the verification.

        :param method: The method of this Verification.
        :type method: str
        """
        allowed_values = ["VERIFICATION_METHOD_UNSPECIFIED", "ADDRESS", "EMAIL", "PHONE_CALL", "SMS", "AUTO", "VETTED_PARTNER"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def name(self):
        """Gets the name of this Verification.

        Resource name of the verification.

        :return: The name of this Verification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Verification.

        Resource name of the verification.

        :param name: The name of this Verification.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Verification.

        The state of the verification.

        :return: The state of this Verification.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Verification.

        The state of the verification.

        :param state: The state of this Verification.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "COMPLETED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
