/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerificationOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerificationOption::OAIVerificationOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerificationOption::OAIVerificationOption() {
    this->initializeModel();
}

OAIVerificationOption::~OAIVerificationOption() {}

void OAIVerificationOption::initializeModel() {

    m_address_data_isSet = false;
    m_address_data_isValid = false;

    m_announcement_isSet = false;
    m_announcement_isValid = false;

    m_email_data_isSet = false;
    m_email_data_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_verification_method_isSet = false;
    m_verification_method_isValid = false;
}

void OAIVerificationOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerificationOption::fromJsonObject(QJsonObject json) {

    m_address_data_isValid = ::OpenAPI::fromJsonValue(m_address_data, json[QString("addressData")]);
    m_address_data_isSet = !json[QString("addressData")].isNull() && m_address_data_isValid;

    m_announcement_isValid = ::OpenAPI::fromJsonValue(m_announcement, json[QString("announcement")]);
    m_announcement_isSet = !json[QString("announcement")].isNull() && m_announcement_isValid;

    m_email_data_isValid = ::OpenAPI::fromJsonValue(m_email_data, json[QString("emailData")]);
    m_email_data_isSet = !json[QString("emailData")].isNull() && m_email_data_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_verification_method_isValid = ::OpenAPI::fromJsonValue(m_verification_method, json[QString("verificationMethod")]);
    m_verification_method_isSet = !json[QString("verificationMethod")].isNull() && m_verification_method_isValid;
}

QString OAIVerificationOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerificationOption::asJsonObject() const {
    QJsonObject obj;
    if (m_address_data.isSet()) {
        obj.insert(QString("addressData"), ::OpenAPI::toJsonValue(m_address_data));
    }
    if (m_announcement_isSet) {
        obj.insert(QString("announcement"), ::OpenAPI::toJsonValue(m_announcement));
    }
    if (m_email_data.isSet()) {
        obj.insert(QString("emailData"), ::OpenAPI::toJsonValue(m_email_data));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_verification_method_isSet) {
        obj.insert(QString("verificationMethod"), ::OpenAPI::toJsonValue(m_verification_method));
    }
    return obj;
}

OAIAddressVerificationData OAIVerificationOption::getAddressData() const {
    return m_address_data;
}
void OAIVerificationOption::setAddressData(const OAIAddressVerificationData &address_data) {
    m_address_data = address_data;
    m_address_data_isSet = true;
}

bool OAIVerificationOption::is_address_data_Set() const{
    return m_address_data_isSet;
}

bool OAIVerificationOption::is_address_data_Valid() const{
    return m_address_data_isValid;
}

QString OAIVerificationOption::getAnnouncement() const {
    return m_announcement;
}
void OAIVerificationOption::setAnnouncement(const QString &announcement) {
    m_announcement = announcement;
    m_announcement_isSet = true;
}

bool OAIVerificationOption::is_announcement_Set() const{
    return m_announcement_isSet;
}

bool OAIVerificationOption::is_announcement_Valid() const{
    return m_announcement_isValid;
}

OAIEmailVerificationData OAIVerificationOption::getEmailData() const {
    return m_email_data;
}
void OAIVerificationOption::setEmailData(const OAIEmailVerificationData &email_data) {
    m_email_data = email_data;
    m_email_data_isSet = true;
}

bool OAIVerificationOption::is_email_data_Set() const{
    return m_email_data_isSet;
}

bool OAIVerificationOption::is_email_data_Valid() const{
    return m_email_data_isValid;
}

QString OAIVerificationOption::getPhoneNumber() const {
    return m_phone_number;
}
void OAIVerificationOption::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIVerificationOption::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIVerificationOption::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIVerificationOption::getVerificationMethod() const {
    return m_verification_method;
}
void OAIVerificationOption::setVerificationMethod(const QString &verification_method) {
    m_verification_method = verification_method;
    m_verification_method_isSet = true;
}

bool OAIVerificationOption::is_verification_method_Set() const{
    return m_verification_method_isSet;
}

bool OAIVerificationOption::is_verification_method_Valid() const{
    return m_verification_method_isValid;
}

bool OAIVerificationOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_announcement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerificationOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
