/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerify::OAIVerify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerify::OAIVerify() {
    this->initializeModel();
}

OAIVerify::~OAIVerify() {}

void OAIVerify::initializeModel() {

    m_has_pending_verification_isSet = false;
    m_has_pending_verification_isValid = false;
}

void OAIVerify::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerify::fromJsonObject(QJsonObject json) {

    m_has_pending_verification_isValid = ::OpenAPI::fromJsonValue(m_has_pending_verification, json[QString("hasPendingVerification")]);
    m_has_pending_verification_isSet = !json[QString("hasPendingVerification")].isNull() && m_has_pending_verification_isValid;
}

QString OAIVerify::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerify::asJsonObject() const {
    QJsonObject obj;
    if (m_has_pending_verification_isSet) {
        obj.insert(QString("hasPendingVerification"), ::OpenAPI::toJsonValue(m_has_pending_verification));
    }
    return obj;
}

bool OAIVerify::isHasPendingVerification() const {
    return m_has_pending_verification;
}
void OAIVerify::setHasPendingVerification(const bool &has_pending_verification) {
    m_has_pending_verification = has_pending_verification;
    m_has_pending_verification_isSet = true;
}

bool OAIVerify::is_has_pending_verification_Set() const{
    return m_has_pending_verification_isSet;
}

bool OAIVerify::is_has_pending_verification_Valid() const{
    return m_has_pending_verification_isValid;
}

bool OAIVerify::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_has_pending_verification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerify::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
