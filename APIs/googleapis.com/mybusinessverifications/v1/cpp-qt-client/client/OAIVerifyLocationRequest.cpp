/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVerifyLocationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVerifyLocationRequest::OAIVerifyLocationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVerifyLocationRequest::OAIVerifyLocationRequest() {
    this->initializeModel();
}

OAIVerifyLocationRequest::~OAIVerifyLocationRequest() {}

void OAIVerifyLocationRequest::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_mailer_contact_isSet = false;
    m_mailer_contact_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIVerifyLocationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVerifyLocationRequest::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_mailer_contact_isValid = ::OpenAPI::fromJsonValue(m_mailer_contact, json[QString("mailerContact")]);
    m_mailer_contact_isSet = !json[QString("mailerContact")].isNull() && m_mailer_contact_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIVerifyLocationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVerifyLocationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_mailer_contact_isSet) {
        obj.insert(QString("mailerContact"), ::OpenAPI::toJsonValue(m_mailer_contact));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_token.isSet()) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

OAIServiceBusinessContext OAIVerifyLocationRequest::getContext() const {
    return m_context;
}
void OAIVerifyLocationRequest::setContext(const OAIServiceBusinessContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIVerifyLocationRequest::is_context_Set() const{
    return m_context_isSet;
}

bool OAIVerifyLocationRequest::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIVerifyLocationRequest::getEmailAddress() const {
    return m_email_address;
}
void OAIVerifyLocationRequest::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIVerifyLocationRequest::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIVerifyLocationRequest::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIVerifyLocationRequest::getLanguageCode() const {
    return m_language_code;
}
void OAIVerifyLocationRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIVerifyLocationRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIVerifyLocationRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIVerifyLocationRequest::getMailerContact() const {
    return m_mailer_contact;
}
void OAIVerifyLocationRequest::setMailerContact(const QString &mailer_contact) {
    m_mailer_contact = mailer_contact;
    m_mailer_contact_isSet = true;
}

bool OAIVerifyLocationRequest::is_mailer_contact_Set() const{
    return m_mailer_contact_isSet;
}

bool OAIVerifyLocationRequest::is_mailer_contact_Valid() const{
    return m_mailer_contact_isValid;
}

QString OAIVerifyLocationRequest::getMethod() const {
    return m_method;
}
void OAIVerifyLocationRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIVerifyLocationRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAIVerifyLocationRequest::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIVerifyLocationRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIVerifyLocationRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIVerifyLocationRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIVerifyLocationRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIVerificationToken OAIVerifyLocationRequest::getToken() const {
    return m_token;
}
void OAIVerifyLocationRequest::setToken(const OAIVerificationToken &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIVerifyLocationRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAIVerifyLocationRequest::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIVerifyLocationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mailer_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVerifyLocationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
