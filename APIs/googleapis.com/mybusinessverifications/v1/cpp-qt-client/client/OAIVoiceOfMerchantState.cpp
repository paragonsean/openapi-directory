/**
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVoiceOfMerchantState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVoiceOfMerchantState::OAIVoiceOfMerchantState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVoiceOfMerchantState::OAIVoiceOfMerchantState() {
    this->initializeModel();
}

OAIVoiceOfMerchantState::~OAIVoiceOfMerchantState() {}

void OAIVoiceOfMerchantState::initializeModel() {

    m_comply_with_guidelines_isSet = false;
    m_comply_with_guidelines_isValid = false;

    m_has_business_authority_isSet = false;
    m_has_business_authority_isValid = false;

    m_has_voice_of_merchant_isSet = false;
    m_has_voice_of_merchant_isValid = false;

    m_resolve_ownership_conflict_isSet = false;
    m_resolve_ownership_conflict_isValid = false;

    m_verify_isSet = false;
    m_verify_isValid = false;

    m_wait_for_voice_of_merchant_isSet = false;
    m_wait_for_voice_of_merchant_isValid = false;
}

void OAIVoiceOfMerchantState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVoiceOfMerchantState::fromJsonObject(QJsonObject json) {

    m_comply_with_guidelines_isValid = ::OpenAPI::fromJsonValue(m_comply_with_guidelines, json[QString("complyWithGuidelines")]);
    m_comply_with_guidelines_isSet = !json[QString("complyWithGuidelines")].isNull() && m_comply_with_guidelines_isValid;

    m_has_business_authority_isValid = ::OpenAPI::fromJsonValue(m_has_business_authority, json[QString("hasBusinessAuthority")]);
    m_has_business_authority_isSet = !json[QString("hasBusinessAuthority")].isNull() && m_has_business_authority_isValid;

    m_has_voice_of_merchant_isValid = ::OpenAPI::fromJsonValue(m_has_voice_of_merchant, json[QString("hasVoiceOfMerchant")]);
    m_has_voice_of_merchant_isSet = !json[QString("hasVoiceOfMerchant")].isNull() && m_has_voice_of_merchant_isValid;

    m_resolve_ownership_conflict_isValid = ::OpenAPI::fromJsonValue(m_resolve_ownership_conflict, json[QString("resolveOwnershipConflict")]);
    m_resolve_ownership_conflict_isSet = !json[QString("resolveOwnershipConflict")].isNull() && m_resolve_ownership_conflict_isValid;

    m_verify_isValid = ::OpenAPI::fromJsonValue(m_verify, json[QString("verify")]);
    m_verify_isSet = !json[QString("verify")].isNull() && m_verify_isValid;

    m_wait_for_voice_of_merchant_isValid = ::OpenAPI::fromJsonValue(m_wait_for_voice_of_merchant, json[QString("waitForVoiceOfMerchant")]);
    m_wait_for_voice_of_merchant_isSet = !json[QString("waitForVoiceOfMerchant")].isNull() && m_wait_for_voice_of_merchant_isValid;
}

QString OAIVoiceOfMerchantState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVoiceOfMerchantState::asJsonObject() const {
    QJsonObject obj;
    if (m_comply_with_guidelines.isSet()) {
        obj.insert(QString("complyWithGuidelines"), ::OpenAPI::toJsonValue(m_comply_with_guidelines));
    }
    if (m_has_business_authority_isSet) {
        obj.insert(QString("hasBusinessAuthority"), ::OpenAPI::toJsonValue(m_has_business_authority));
    }
    if (m_has_voice_of_merchant_isSet) {
        obj.insert(QString("hasVoiceOfMerchant"), ::OpenAPI::toJsonValue(m_has_voice_of_merchant));
    }
    if (m_resolve_ownership_conflict_isSet) {
        obj.insert(QString("resolveOwnershipConflict"), ::OpenAPI::toJsonValue(m_resolve_ownership_conflict));
    }
    if (m_verify.isSet()) {
        obj.insert(QString("verify"), ::OpenAPI::toJsonValue(m_verify));
    }
    if (m_wait_for_voice_of_merchant_isSet) {
        obj.insert(QString("waitForVoiceOfMerchant"), ::OpenAPI::toJsonValue(m_wait_for_voice_of_merchant));
    }
    return obj;
}

OAIComplyWithGuidelines OAIVoiceOfMerchantState::getComplyWithGuidelines() const {
    return m_comply_with_guidelines;
}
void OAIVoiceOfMerchantState::setComplyWithGuidelines(const OAIComplyWithGuidelines &comply_with_guidelines) {
    m_comply_with_guidelines = comply_with_guidelines;
    m_comply_with_guidelines_isSet = true;
}

bool OAIVoiceOfMerchantState::is_comply_with_guidelines_Set() const{
    return m_comply_with_guidelines_isSet;
}

bool OAIVoiceOfMerchantState::is_comply_with_guidelines_Valid() const{
    return m_comply_with_guidelines_isValid;
}

bool OAIVoiceOfMerchantState::isHasBusinessAuthority() const {
    return m_has_business_authority;
}
void OAIVoiceOfMerchantState::setHasBusinessAuthority(const bool &has_business_authority) {
    m_has_business_authority = has_business_authority;
    m_has_business_authority_isSet = true;
}

bool OAIVoiceOfMerchantState::is_has_business_authority_Set() const{
    return m_has_business_authority_isSet;
}

bool OAIVoiceOfMerchantState::is_has_business_authority_Valid() const{
    return m_has_business_authority_isValid;
}

bool OAIVoiceOfMerchantState::isHasVoiceOfMerchant() const {
    return m_has_voice_of_merchant;
}
void OAIVoiceOfMerchantState::setHasVoiceOfMerchant(const bool &has_voice_of_merchant) {
    m_has_voice_of_merchant = has_voice_of_merchant;
    m_has_voice_of_merchant_isSet = true;
}

bool OAIVoiceOfMerchantState::is_has_voice_of_merchant_Set() const{
    return m_has_voice_of_merchant_isSet;
}

bool OAIVoiceOfMerchantState::is_has_voice_of_merchant_Valid() const{
    return m_has_voice_of_merchant_isValid;
}

OAIObject OAIVoiceOfMerchantState::getResolveOwnershipConflict() const {
    return m_resolve_ownership_conflict;
}
void OAIVoiceOfMerchantState::setResolveOwnershipConflict(const OAIObject &resolve_ownership_conflict) {
    m_resolve_ownership_conflict = resolve_ownership_conflict;
    m_resolve_ownership_conflict_isSet = true;
}

bool OAIVoiceOfMerchantState::is_resolve_ownership_conflict_Set() const{
    return m_resolve_ownership_conflict_isSet;
}

bool OAIVoiceOfMerchantState::is_resolve_ownership_conflict_Valid() const{
    return m_resolve_ownership_conflict_isValid;
}

OAIVerify OAIVoiceOfMerchantState::getVerify() const {
    return m_verify;
}
void OAIVoiceOfMerchantState::setVerify(const OAIVerify &verify) {
    m_verify = verify;
    m_verify_isSet = true;
}

bool OAIVoiceOfMerchantState::is_verify_Set() const{
    return m_verify_isSet;
}

bool OAIVoiceOfMerchantState::is_verify_Valid() const{
    return m_verify_isValid;
}

OAIObject OAIVoiceOfMerchantState::getWaitForVoiceOfMerchant() const {
    return m_wait_for_voice_of_merchant;
}
void OAIVoiceOfMerchantState::setWaitForVoiceOfMerchant(const OAIObject &wait_for_voice_of_merchant) {
    m_wait_for_voice_of_merchant = wait_for_voice_of_merchant;
    m_wait_for_voice_of_merchant_isSet = true;
}

bool OAIVoiceOfMerchantState::is_wait_for_voice_of_merchant_Set() const{
    return m_wait_for_voice_of_merchant_isSet;
}

bool OAIVoiceOfMerchantState::is_wait_for_voice_of_merchant_Valid() const{
    return m_wait_for_voice_of_merchant_isValid;
}

bool OAIVoiceOfMerchantState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comply_with_guidelines.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_business_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_voice_of_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolve_ownership_conflict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_for_voice_of_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVoiceOfMerchantState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
