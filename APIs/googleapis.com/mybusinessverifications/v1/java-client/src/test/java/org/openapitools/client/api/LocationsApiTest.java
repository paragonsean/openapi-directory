/*
 * My Business Verifications API
 * The My Business Verifications API provides an interface for taking verifications related actions for locations.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompleteVerificationRequest;
import org.openapitools.client.model.CompleteVerificationResponse;
import org.openapitools.client.model.FetchVerificationOptionsRequest;
import org.openapitools.client.model.FetchVerificationOptionsResponse;
import org.openapitools.client.model.ListVerificationsResponse;
import org.openapitools.client.model.VerifyLocationRequest;
import org.openapitools.client.model.VerifyLocationResponse;
import org.openapitools.client.model.VoiceOfMerchantState;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Reports all eligible verification options for a location in a specific language.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessverificationsLocationsFetchVerificationOptionsTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FetchVerificationOptionsRequest fetchVerificationOptionsRequest = null;
        FetchVerificationOptionsResponse response = api.mybusinessverificationsLocationsFetchVerificationOptions(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchVerificationOptionsRequest);
        // TODO: test validations
    }

    /**
     * Gets the VoiceOfMerchant state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessverificationsLocationsGetVoiceOfMerchantStateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VoiceOfMerchantState response = api.mybusinessverificationsLocationsGetVoiceOfMerchantState(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Completes a &#x60;PENDING&#x60; verification. It is only necessary for non &#x60;AUTO&#x60; verification methods. &#x60;AUTO&#x60; verification request is instantly &#x60;VERIFIED&#x60; upon creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessverificationsLocationsVerificationsCompleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CompleteVerificationRequest completeVerificationRequest = null;
        CompleteVerificationResponse response = api.mybusinessverificationsLocationsVerificationsComplete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, completeVerificationRequest);
        // TODO: test validations
    }

    /**
     * List verifications of a location, ordered by create time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessverificationsLocationsVerificationsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVerificationsResponse response = api.mybusinessverificationsLocationsVerificationsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts the verification process for a location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessverificationsLocationsVerifyTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VerifyLocationRequest verifyLocationRequest = null;
        VerifyLocationResponse response = api.mybusinessverificationsLocationsVerify(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, verifyLocationRequest);
        // TODO: test validations
    }

}
