/**
 * Firebase Realtime Database API
 * The Firebase Realtime Database API enables programmatic provisioning and management of Realtime Database instances.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseInstance::OAIDatabaseInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseInstance::OAIDatabaseInstance() {
    this->initializeModel();
}

OAIDatabaseInstance::~OAIDatabaseInstance() {}

void OAIDatabaseInstance::initializeModel() {

    m_database_url_isSet = false;
    m_database_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDatabaseInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseInstance::fromJsonObject(QJsonObject json) {

    m_database_url_isValid = ::OpenAPI::fromJsonValue(m_database_url, json[QString("databaseUrl")]);
    m_database_url_isSet = !json[QString("databaseUrl")].isNull() && m_database_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDatabaseInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_database_url_isSet) {
        obj.insert(QString("databaseUrl"), ::OpenAPI::toJsonValue(m_database_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIDatabaseInstance::getDatabaseUrl() const {
    return m_database_url;
}
void OAIDatabaseInstance::setDatabaseUrl(const QString &database_url) {
    m_database_url = database_url;
    m_database_url_isSet = true;
}

bool OAIDatabaseInstance::is_database_url_Set() const{
    return m_database_url_isSet;
}

bool OAIDatabaseInstance::is_database_url_Valid() const{
    return m_database_url_isValid;
}

QString OAIDatabaseInstance::getName() const {
    return m_name;
}
void OAIDatabaseInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabaseInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabaseInstance::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatabaseInstance::getProject() const {
    return m_project;
}
void OAIDatabaseInstance::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDatabaseInstance::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDatabaseInstance::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIDatabaseInstance::getState() const {
    return m_state;
}
void OAIDatabaseInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDatabaseInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDatabaseInstance::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDatabaseInstance::getType() const {
    return m_type;
}
void OAIDatabaseInstance::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDatabaseInstance::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDatabaseInstance::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDatabaseInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_database_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
