/**
 * Firebase Realtime Database API
 * The Firebase Realtime Database API enables programmatic provisioning and management of Realtime Database instances.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseInstance model module.
 * @module model/DatabaseInstance
 * @version v1beta
 */
class DatabaseInstance {
    /**
     * Constructs a new <code>DatabaseInstance</code>.
     * Representation of a Realtime Database instance. Details on interacting with contents of a DatabaseInstance can be found at: https://firebase.google.com/docs/database/rest/start.
     * @alias module:model/DatabaseInstance
     */
    constructor() { 
        
        DatabaseInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseInstance} obj Optional instance to populate.
     * @return {module:model/DatabaseInstance} The populated <code>DatabaseInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseInstance();

            if (data.hasOwnProperty('databaseUrl')) {
                obj['databaseUrl'] = ApiClient.convertToType(data['databaseUrl'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseInstance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['databaseUrl'] && !(typeof data['databaseUrl'] === 'string' || data['databaseUrl'] instanceof String)) {
            throw new Error("Expected the field `databaseUrl` to be a primitive type in the JSON string but got " + data['databaseUrl']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. Output Only. The globally unique hostname of the database.
 * @member {String} databaseUrl
 */
DatabaseInstance.prototype['databaseUrl'] = undefined;

/**
 * The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
 * @member {String} name
 */
DatabaseInstance.prototype['name'] = undefined;

/**
 * Output only. The resource name of the project this instance belongs to. For example: `projects/{project-number}`.
 * @member {String} project
 */
DatabaseInstance.prototype['project'] = undefined;

/**
 * Output only. The database's lifecycle state. Read-only.
 * @member {module:model/DatabaseInstance.StateEnum} state
 */
DatabaseInstance.prototype['state'] = undefined;

/**
 * Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.
 * @member {module:model/DatabaseInstance.TypeEnum} type
 */
DatabaseInstance.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseInstance['StateEnum'] = {

    /**
     * value: "LIFECYCLE_STATE_UNSPECIFIED"
     * @const
     */
    "LIFECYCLE_STATE_UNSPECIFIED": "LIFECYCLE_STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DatabaseInstance['TypeEnum'] = {

    /**
     * value: "DATABASE_INSTANCE_TYPE_UNSPECIFIED"
     * @const
     */
    "DATABASE_INSTANCE_TYPE_UNSPECIFIED": "DATABASE_INSTANCE_TYPE_UNSPECIFIED",

    /**
     * value: "DEFAULT_DATABASE"
     * @const
     */
    "DEFAULT_DATABASE": "DEFAULT_DATABASE",

    /**
     * value: "USER_DATABASE"
     * @const
     */
    "USER_DATABASE": "USER_DATABASE"
};



export default DatabaseInstance;

