# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database_url: str=None, name: str=None, project: str=None, state: str=None, type: str=None):
        """DatabaseInstance - a model defined in OpenAPI

        :param database_url: The database_url of this DatabaseInstance.
        :param name: The name of this DatabaseInstance.
        :param project: The project of this DatabaseInstance.
        :param state: The state of this DatabaseInstance.
        :param type: The type of this DatabaseInstance.
        """
        self.openapi_types = {
            'database_url': str,
            'name': str,
            'project': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'database_url': 'databaseUrl',
            'name': 'name',
            'project': 'project',
            'state': 'state',
            'type': 'type'
        }

        self._database_url = database_url
        self._name = name
        self._project = project
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseInstance of this DatabaseInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database_url(self):
        """Gets the database_url of this DatabaseInstance.

        Output only. Output Only. The globally unique hostname of the database.

        :return: The database_url of this DatabaseInstance.
        :rtype: str
        """
        return self._database_url

    @database_url.setter
    def database_url(self, database_url):
        """Sets the database_url of this DatabaseInstance.

        Output only. Output Only. The globally unique hostname of the database.

        :param database_url: The database_url of this DatabaseInstance.
        :type database_url: str
        """

        self._database_url = database_url

    @property
    def name(self):
        """Gets the name of this DatabaseInstance.

        The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.

        :return: The name of this DatabaseInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseInstance.

        The fully qualified resource name of the database instance, in the form: `projects/{project-number}/locations/{location-id}/instances/{database-id}`.

        :param name: The name of this DatabaseInstance.
        :type name: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this DatabaseInstance.

        Output only. The resource name of the project this instance belongs to. For example: `projects/{project-number}`.

        :return: The project of this DatabaseInstance.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DatabaseInstance.

        Output only. The resource name of the project this instance belongs to. For example: `projects/{project-number}`.

        :param project: The project of this DatabaseInstance.
        :type project: str
        """

        self._project = project

    @property
    def state(self):
        """Gets the state of this DatabaseInstance.

        Output only. The database's lifecycle state. Read-only.

        :return: The state of this DatabaseInstance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DatabaseInstance.

        Output only. The database's lifecycle state. Read-only.

        :param state: The state of this DatabaseInstance.
        :type state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "ACTIVE", "DISABLED", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this DatabaseInstance.

        Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.

        :return: The type of this DatabaseInstance.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DatabaseInstance.

        Immutable. The database instance type. On creation only USER_DATABASE is allowed, which is also the default when omitted.

        :param type: The type of this DatabaseInstance.
        :type type: str
        """
        allowed_values = ["DATABASE_INSTANCE_TYPE_UNSPECIFIED", "DEFAULT_DATABASE", "USER_DATABASE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
