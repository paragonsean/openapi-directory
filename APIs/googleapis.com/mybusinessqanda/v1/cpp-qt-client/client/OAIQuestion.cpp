/**
 * My Business Q&A API
 * The My Business Q&A API allows questions and answers to be posted for specific listings. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestion::OAIQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestion::OAIQuestion() {
    this->initializeModel();
}

OAIQuestion::~OAIQuestion() {}

void OAIQuestion::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_top_answers_isSet = false;
    m_top_answers_isValid = false;

    m_total_answer_count_isSet = false;
    m_total_answer_count_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_upvote_count_isSet = false;
    m_upvote_count_isValid = false;
}

void OAIQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestion::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_top_answers_isValid = ::OpenAPI::fromJsonValue(m_top_answers, json[QString("topAnswers")]);
    m_top_answers_isSet = !json[QString("topAnswers")].isNull() && m_top_answers_isValid;

    m_total_answer_count_isValid = ::OpenAPI::fromJsonValue(m_total_answer_count, json[QString("totalAnswerCount")]);
    m_total_answer_count_isSet = !json[QString("totalAnswerCount")].isNull() && m_total_answer_count_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_upvote_count_isValid = ::OpenAPI::fromJsonValue(m_upvote_count, json[QString("upvoteCount")]);
    m_upvote_count_isSet = !json[QString("upvoteCount")].isNull() && m_upvote_count_isValid;
}

QString OAIQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_top_answers.size() > 0) {
        obj.insert(QString("topAnswers"), ::OpenAPI::toJsonValue(m_top_answers));
    }
    if (m_total_answer_count_isSet) {
        obj.insert(QString("totalAnswerCount"), ::OpenAPI::toJsonValue(m_total_answer_count));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_upvote_count_isSet) {
        obj.insert(QString("upvoteCount"), ::OpenAPI::toJsonValue(m_upvote_count));
    }
    return obj;
}

OAIAuthor OAIQuestion::getAuthor() const {
    return m_author;
}
void OAIQuestion::setAuthor(const OAIAuthor &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIQuestion::is_author_Set() const{
    return m_author_isSet;
}

bool OAIQuestion::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIQuestion::getCreateTime() const {
    return m_create_time;
}
void OAIQuestion::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIQuestion::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIQuestion::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIQuestion::getName() const {
    return m_name;
}
void OAIQuestion::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIQuestion::is_name_Set() const{
    return m_name_isSet;
}

bool OAIQuestion::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIQuestion::getText() const {
    return m_text;
}
void OAIQuestion::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIQuestion::is_text_Set() const{
    return m_text_isSet;
}

bool OAIQuestion::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIAnswer> OAIQuestion::getTopAnswers() const {
    return m_top_answers;
}
void OAIQuestion::setTopAnswers(const QList<OAIAnswer> &top_answers) {
    m_top_answers = top_answers;
    m_top_answers_isSet = true;
}

bool OAIQuestion::is_top_answers_Set() const{
    return m_top_answers_isSet;
}

bool OAIQuestion::is_top_answers_Valid() const{
    return m_top_answers_isValid;
}

qint32 OAIQuestion::getTotalAnswerCount() const {
    return m_total_answer_count;
}
void OAIQuestion::setTotalAnswerCount(const qint32 &total_answer_count) {
    m_total_answer_count = total_answer_count;
    m_total_answer_count_isSet = true;
}

bool OAIQuestion::is_total_answer_count_Set() const{
    return m_total_answer_count_isSet;
}

bool OAIQuestion::is_total_answer_count_Valid() const{
    return m_total_answer_count_isValid;
}

QString OAIQuestion::getUpdateTime() const {
    return m_update_time;
}
void OAIQuestion::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIQuestion::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIQuestion::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIQuestion::getUpvoteCount() const {
    return m_upvote_count;
}
void OAIQuestion::setUpvoteCount(const qint32 &upvote_count) {
    m_upvote_count = upvote_count;
    m_upvote_count_isSet = true;
}

bool OAIQuestion::is_upvote_count_Set() const{
    return m_upvote_count_isSet;
}

bool OAIQuestion::is_upvote_count_Valid() const{
    return m_upvote_count_isValid;
}

bool OAIQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvote_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
