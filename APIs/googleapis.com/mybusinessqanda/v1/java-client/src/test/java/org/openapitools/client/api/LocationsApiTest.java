/*
 * My Business Q&A API
 * The My Business Q&A API allows questions and answers to be posted for specific listings. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Answer;
import org.openapitools.client.model.ListAnswersResponse;
import org.openapitools.client.model.ListQuestionsResponse;
import org.openapitools.client.model.Question;
import org.openapitools.client.model.UpsertAnswerRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LocationsApi
 */
@Disabled
public class LocationsApiTest {

    private final LocationsApi api = new LocationsApi();

    /**
     * Deletes the answer written by the current user to a question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsAnswersDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.mybusinessqandaLocationsQuestionsAnswersDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of answers for a specified question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsAnswersListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListAnswersResponse response = api.mybusinessqandaLocationsQuestionsAnswersList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates an answer or updates the existing answer written by the user for the specified question. A user can only create one answer per question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsAnswersUpsertTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UpsertAnswerRequest upsertAnswerRequest = null;
        Answer response = api.mybusinessqandaLocationsQuestionsAnswersUpsert(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, upsertAnswerRequest);
        // TODO: test validations
    }

    /**
     * Adds a question for the specified location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Question question = null;
        Question response = api.mybusinessqandaLocationsQuestionsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, question);
        // TODO: test validations
    }

    /**
     * Deletes a specific question written by the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.mybusinessqandaLocationsQuestionsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the paginated list of questions and some of its answers for a specified location. This operation is only valid if the specified location is verified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer answersPerQuestion = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListQuestionsResponse response = api.mybusinessqandaLocationsQuestionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, answersPerQuestion, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a specific question written by the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mybusinessqandaLocationsQuestionsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Question question = null;
        Question response = api.mybusinessqandaLocationsQuestionsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, question);
        // TODO: test validations
    }

}
