# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.author import Author
from openapi_server import util


class Answer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: Author=None, create_time: str=None, name: str=None, text: str=None, update_time: str=None, upvote_count: int=None):
        """Answer - a model defined in OpenAPI

        :param author: The author of this Answer.
        :param create_time: The create_time of this Answer.
        :param name: The name of this Answer.
        :param text: The text of this Answer.
        :param update_time: The update_time of this Answer.
        :param upvote_count: The upvote_count of this Answer.
        """
        self.openapi_types = {
            'author': Author,
            'create_time': str,
            'name': str,
            'text': str,
            'update_time': str,
            'upvote_count': int
        }

        self.attribute_map = {
            'author': 'author',
            'create_time': 'createTime',
            'name': 'name',
            'text': 'text',
            'update_time': 'updateTime',
            'upvote_count': 'upvoteCount'
        }

        self._author = author
        self._create_time = create_time
        self._name = name
        self._text = text
        self._update_time = update_time
        self._upvote_count = upvote_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Answer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Answer of this Answer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Answer.


        :return: The author of this Answer.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Answer.


        :param author: The author of this Answer.
        :type author: Author
        """

        self._author = author

    @property
    def create_time(self):
        """Gets the create_time of this Answer.

        Output only. The timestamp for when the answer was written. Only retrieved during ListResponse fetching.

        :return: The create_time of this Answer.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Answer.

        Output only. The timestamp for when the answer was written. Only retrieved during ListResponse fetching.

        :param create_time: The create_time of this Answer.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Answer.

        Output only. The unique name for the answer locations/*/questions/*/answers/*

        :return: The name of this Answer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Answer.

        Output only. The unique name for the answer locations/*/questions/*/answers/*

        :param name: The name of this Answer.
        :type name: str
        """

        self._name = name

    @property
    def text(self):
        """Gets the text of this Answer.

        Required. The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.

        :return: The text of this Answer.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Answer.

        Required. The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.

        :param text: The text of this Answer.
        :type text: str
        """

        self._text = text

    @property
    def update_time(self):
        """Gets the update_time of this Answer.

        Output only. The timestamp for when the answer was last modified.

        :return: The update_time of this Answer.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Answer.

        Output only. The timestamp for when the answer was last modified.

        :param update_time: The update_time of this Answer.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upvote_count(self):
        """Gets the upvote_count of this Answer.

        Output only. The number of upvotes for the answer.

        :return: The upvote_count of this Answer.
        :rtype: int
        """
        return self._upvote_count

    @upvote_count.setter
    def upvote_count(self, upvote_count):
        """Sets the upvote_count of this Answer.

        Output only. The number of upvotes for the answer.

        :param upvote_count: The upvote_count of this Answer.
        :type upvote_count: int
        """

        self._upvote_count = upvote_count
