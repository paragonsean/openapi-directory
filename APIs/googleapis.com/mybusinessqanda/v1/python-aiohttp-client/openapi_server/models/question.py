# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answer import Answer
from openapi_server.models.author import Author
from openapi_server import util


class Question(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: Author=None, create_time: str=None, name: str=None, text: str=None, top_answers: List[Answer]=None, total_answer_count: int=None, update_time: str=None, upvote_count: int=None):
        """Question - a model defined in OpenAPI

        :param author: The author of this Question.
        :param create_time: The create_time of this Question.
        :param name: The name of this Question.
        :param text: The text of this Question.
        :param top_answers: The top_answers of this Question.
        :param total_answer_count: The total_answer_count of this Question.
        :param update_time: The update_time of this Question.
        :param upvote_count: The upvote_count of this Question.
        """
        self.openapi_types = {
            'author': Author,
            'create_time': str,
            'name': str,
            'text': str,
            'top_answers': List[Answer],
            'total_answer_count': int,
            'update_time': str,
            'upvote_count': int
        }

        self.attribute_map = {
            'author': 'author',
            'create_time': 'createTime',
            'name': 'name',
            'text': 'text',
            'top_answers': 'topAnswers',
            'total_answer_count': 'totalAnswerCount',
            'update_time': 'updateTime',
            'upvote_count': 'upvoteCount'
        }

        self._author = author
        self._create_time = create_time
        self._name = name
        self._text = text
        self._top_answers = top_answers
        self._total_answer_count = total_answer_count
        self._update_time = update_time
        self._upvote_count = upvote_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Question of this Question.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Question.


        :return: The author of this Question.
        :rtype: Author
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Question.


        :param author: The author of this Question.
        :type author: Author
        """

        self._author = author

    @property
    def create_time(self):
        """Gets the create_time of this Question.

        Output only. The timestamp for when the question was written.

        :return: The create_time of this Question.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Question.

        Output only. The timestamp for when the question was written.

        :param create_time: The create_time of this Question.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def name(self):
        """Gets the name of this Question.

        Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.

        :return: The name of this Question.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Question.

        Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.

        :param name: The name of this Question.
        :type name: str
        """

        self._name = name

    @property
    def text(self):
        """Gets the text of this Question.

        Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.

        :return: The text of this Question.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Question.

        Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.

        :param text: The text of this Question.
        :type text: str
        """

        self._text = text

    @property
    def top_answers(self):
        """Gets the top_answers of this Question.

        Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)

        :return: The top_answers of this Question.
        :rtype: List[Answer]
        """
        return self._top_answers

    @top_answers.setter
    def top_answers(self, top_answers):
        """Sets the top_answers of this Question.

        Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)

        :param top_answers: The top_answers of this Question.
        :type top_answers: List[Answer]
        """

        self._top_answers = top_answers

    @property
    def total_answer_count(self):
        """Gets the total_answer_count of this Question.

        Output only. The total number of answers posted for this question.

        :return: The total_answer_count of this Question.
        :rtype: int
        """
        return self._total_answer_count

    @total_answer_count.setter
    def total_answer_count(self, total_answer_count):
        """Sets the total_answer_count of this Question.

        Output only. The total number of answers posted for this question.

        :param total_answer_count: The total_answer_count of this Question.
        :type total_answer_count: int
        """

        self._total_answer_count = total_answer_count

    @property
    def update_time(self):
        """Gets the update_time of this Question.

        Output only. The timestamp for when the question was last modified.

        :return: The update_time of this Question.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Question.

        Output only. The timestamp for when the question was last modified.

        :param update_time: The update_time of this Question.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def upvote_count(self):
        """Gets the upvote_count of this Question.

        Output only. The number of upvotes for the question.

        :return: The upvote_count of this Question.
        :rtype: int
        """
        return self._upvote_count

    @upvote_count.setter
    def upvote_count(self, upvote_count):
        """Sets the upvote_count of this Question.

        Output only. The number of upvotes for the question.

        :param upvote_count: The upvote_count of this Question.
        :type upvote_count: int
        """

        self._upvote_count = upvote_count
