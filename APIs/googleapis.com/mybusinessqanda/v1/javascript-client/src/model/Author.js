/**
 * My Business Q&A API
 * The My Business Q&A API allows questions and answers to be posted for specific listings. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Author model module.
 * @module model/Author
 * @version v1
 */
class Author {
    /**
     * Constructs a new <code>Author</code>.
     * Represents the author of a question or answer
     * @alias module:model/Author
     */
    constructor() { 
        
        Author.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Author</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Author} obj Optional instance to populate.
     * @return {module:model/Author} The populated <code>Author</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Author();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('profilePhotoUri')) {
                obj['profilePhotoUri'] = ApiClient.convertToType(data['profilePhotoUri'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Author</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Author</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['profilePhotoUri'] && !(typeof data['profilePhotoUri'] === 'string' || data['profilePhotoUri'] instanceof String)) {
            throw new Error("Expected the field `profilePhotoUri` to be a primitive type in the JSON string but got " + data['profilePhotoUri']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The display name of the user
 * @member {String} displayName
 */
Author.prototype['displayName'] = undefined;

/**
 * The profile photo URI of the user.
 * @member {String} profilePhotoUri
 */
Author.prototype['profilePhotoUri'] = undefined;

/**
 * The type of user the author is.
 * @member {module:model/Author.TypeEnum} type
 */
Author.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Author['TypeEnum'] = {

    /**
     * value: "AUTHOR_TYPE_UNSPECIFIED"
     * @const
     */
    "AUTHOR_TYPE_UNSPECIFIED": "AUTHOR_TYPE_UNSPECIFIED",

    /**
     * value: "REGULAR_USER"
     * @const
     */
    "REGULAR_USER": "REGULAR_USER",

    /**
     * value: "LOCAL_GUIDE"
     * @const
     */
    "LOCAL_GUIDE": "LOCAL_GUIDE",

    /**
     * value: "MERCHANT"
     * @const
     */
    "MERCHANT": "MERCHANT"
};



export default Author;

