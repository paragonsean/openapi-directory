/**
 * My Business Q&A API
 * The My Business Q&A API allows questions and answers to be posted for specific listings. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer from './Answer';
import Author from './Author';

/**
 * The Question model module.
 * @module model/Question
 * @version v1
 */
class Question {
    /**
     * Constructs a new <code>Question</code>.
     * Represents a single question and some of its answers.
     * @alias module:model/Question
     */
    constructor() { 
        
        Question.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Question</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Question} obj Optional instance to populate.
     * @return {module:model/Question} The populated <code>Question</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Question();

            if (data.hasOwnProperty('author')) {
                obj['author'] = Author.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('topAnswers')) {
                obj['topAnswers'] = ApiClient.convertToType(data['topAnswers'], [Answer]);
            }
            if (data.hasOwnProperty('totalAnswerCount')) {
                obj['totalAnswerCount'] = ApiClient.convertToType(data['totalAnswerCount'], 'Number');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('upvoteCount')) {
                obj['upvoteCount'] = ApiClient.convertToType(data['upvoteCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Question</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Question</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          Author.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['topAnswers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topAnswers'])) {
                throw new Error("Expected the field `topAnswers` to be an array in the JSON data but got " + data['topAnswers']);
            }
            // validate the optional field `topAnswers` (array)
            for (const item of data['topAnswers']) {
                Answer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * @member {module:model/Author} author
 */
Question.prototype['author'] = undefined;

/**
 * Output only. The timestamp for when the question was written.
 * @member {String} createTime
 */
Question.prototype['createTime'] = undefined;

/**
 * Immutable. The unique name for the question. locations/_*_/questions/_* This field will be ignored if set during question creation.
 * @member {String} name
 */
Question.prototype['name'] = undefined;

/**
 * Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.
 * @member {String} text
 */
Question.prototype['text'] = undefined;

/**
 * Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)
 * @member {Array.<module:model/Answer>} topAnswers
 */
Question.prototype['topAnswers'] = undefined;

/**
 * Output only. The total number of answers posted for this question.
 * @member {Number} totalAnswerCount
 */
Question.prototype['totalAnswerCount'] = undefined;

/**
 * Output only. The timestamp for when the question was last modified.
 * @member {String} updateTime
 */
Question.prototype['updateTime'] = undefined;

/**
 * Output only. The number of upvotes for the question.
 * @member {Number} upvoteCount
 */
Question.prototype['upvoteCount'] = undefined;






export default Question;

