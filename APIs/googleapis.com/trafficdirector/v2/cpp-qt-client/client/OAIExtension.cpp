/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtension::OAIExtension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtension::OAIExtension() {
    this->initializeModel();
}

OAIExtension::~OAIExtension() {}

void OAIExtension::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_descriptor_isSet = false;
    m_type_descriptor_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIExtension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtension::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_descriptor_isValid = ::OpenAPI::fromJsonValue(m_type_descriptor, json[QString("typeDescriptor")]);
    m_type_descriptor_isSet = !json[QString("typeDescriptor")].isNull() && m_type_descriptor_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIExtension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtension::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_descriptor_isSet) {
        obj.insert(QString("typeDescriptor"), ::OpenAPI::toJsonValue(m_type_descriptor));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIExtension::getCategory() const {
    return m_category;
}
void OAIExtension::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIExtension::is_category_Set() const{
    return m_category_isSet;
}

bool OAIExtension::is_category_Valid() const{
    return m_category_isValid;
}

bool OAIExtension::isDisabled() const {
    return m_disabled;
}
void OAIExtension::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIExtension::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIExtension::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIExtension::getName() const {
    return m_name;
}
void OAIExtension::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExtension::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExtension::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExtension::getTypeDescriptor() const {
    return m_type_descriptor;
}
void OAIExtension::setTypeDescriptor(const QString &type_descriptor) {
    m_type_descriptor = type_descriptor;
    m_type_descriptor_isSet = true;
}

bool OAIExtension::is_type_descriptor_Set() const{
    return m_type_descriptor_isSet;
}

bool OAIExtension::is_type_descriptor_Valid() const{
    return m_type_descriptor_isValid;
}

OAIBuildVersion OAIExtension::getVersion() const {
    return m_version;
}
void OAIExtension::setVersion(const OAIBuildVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExtension::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExtension::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIExtension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
