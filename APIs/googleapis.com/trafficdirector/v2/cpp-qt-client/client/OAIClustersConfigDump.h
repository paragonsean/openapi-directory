/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClustersConfigDump.h
 *
 * Envoy&#39;s cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
 */

#ifndef OAIClustersConfigDump_H
#define OAIClustersConfigDump_H

#include <QJsonObject>

#include "OAIDynamicCluster.h"
#include "OAIStaticCluster.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDynamicCluster;
class OAIStaticCluster;

class OAIClustersConfigDump : public OAIObject {
public:
    OAIClustersConfigDump();
    OAIClustersConfigDump(QString json);
    ~OAIClustersConfigDump() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIDynamicCluster> getDynamicActiveClusters() const;
    void setDynamicActiveClusters(const QList<OAIDynamicCluster> &dynamic_active_clusters);
    bool is_dynamic_active_clusters_Set() const;
    bool is_dynamic_active_clusters_Valid() const;

    QList<OAIDynamicCluster> getDynamicWarmingClusters() const;
    void setDynamicWarmingClusters(const QList<OAIDynamicCluster> &dynamic_warming_clusters);
    bool is_dynamic_warming_clusters_Set() const;
    bool is_dynamic_warming_clusters_Valid() const;

    QList<OAIStaticCluster> getStaticClusters() const;
    void setStaticClusters(const QList<OAIStaticCluster> &static_clusters);
    bool is_static_clusters_Set() const;
    bool is_static_clusters_Valid() const;

    QString getVersionInfo() const;
    void setVersionInfo(const QString &version_info);
    bool is_version_info_Set() const;
    bool is_version_info_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIDynamicCluster> m_dynamic_active_clusters;
    bool m_dynamic_active_clusters_isSet;
    bool m_dynamic_active_clusters_isValid;

    QList<OAIDynamicCluster> m_dynamic_warming_clusters;
    bool m_dynamic_warming_clusters_isSet;
    bool m_dynamic_warming_clusters_isValid;

    QList<OAIStaticCluster> m_static_clusters;
    bool m_static_clusters_isSet;
    bool m_static_clusters_isValid;

    QString m_version_info;
    bool m_version_info_isSet;
    bool m_version_info_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClustersConfigDump)

#endif // OAIClustersConfigDump_H
