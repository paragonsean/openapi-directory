/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStringMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStringMatcher::OAIStringMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStringMatcher::OAIStringMatcher() {
    this->initializeModel();
}

OAIStringMatcher::~OAIStringMatcher() {}

void OAIStringMatcher::initializeModel() {

    m_exact_isSet = false;
    m_exact_isValid = false;

    m_ignore_case_isSet = false;
    m_ignore_case_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;

    m_safe_regex_isSet = false;
    m_safe_regex_isValid = false;

    m_suffix_isSet = false;
    m_suffix_isValid = false;
}

void OAIStringMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStringMatcher::fromJsonObject(QJsonObject json) {

    m_exact_isValid = ::OpenAPI::fromJsonValue(m_exact, json[QString("exact")]);
    m_exact_isSet = !json[QString("exact")].isNull() && m_exact_isValid;

    m_ignore_case_isValid = ::OpenAPI::fromJsonValue(m_ignore_case, json[QString("ignoreCase")]);
    m_ignore_case_isSet = !json[QString("ignoreCase")].isNull() && m_ignore_case_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;

    m_safe_regex_isValid = ::OpenAPI::fromJsonValue(m_safe_regex, json[QString("safeRegex")]);
    m_safe_regex_isSet = !json[QString("safeRegex")].isNull() && m_safe_regex_isValid;

    m_suffix_isValid = ::OpenAPI::fromJsonValue(m_suffix, json[QString("suffix")]);
    m_suffix_isSet = !json[QString("suffix")].isNull() && m_suffix_isValid;
}

QString OAIStringMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStringMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_exact_isSet) {
        obj.insert(QString("exact"), ::OpenAPI::toJsonValue(m_exact));
    }
    if (m_ignore_case_isSet) {
        obj.insert(QString("ignoreCase"), ::OpenAPI::toJsonValue(m_ignore_case));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    if (m_safe_regex.isSet()) {
        obj.insert(QString("safeRegex"), ::OpenAPI::toJsonValue(m_safe_regex));
    }
    if (m_suffix_isSet) {
        obj.insert(QString("suffix"), ::OpenAPI::toJsonValue(m_suffix));
    }
    return obj;
}

QString OAIStringMatcher::getExact() const {
    return m_exact;
}
void OAIStringMatcher::setExact(const QString &exact) {
    m_exact = exact;
    m_exact_isSet = true;
}

bool OAIStringMatcher::is_exact_Set() const{
    return m_exact_isSet;
}

bool OAIStringMatcher::is_exact_Valid() const{
    return m_exact_isValid;
}

bool OAIStringMatcher::isIgnoreCase() const {
    return m_ignore_case;
}
void OAIStringMatcher::setIgnoreCase(const bool &ignore_case) {
    m_ignore_case = ignore_case;
    m_ignore_case_isSet = true;
}

bool OAIStringMatcher::is_ignore_case_Set() const{
    return m_ignore_case_isSet;
}

bool OAIStringMatcher::is_ignore_case_Valid() const{
    return m_ignore_case_isValid;
}

QString OAIStringMatcher::getPrefix() const {
    return m_prefix;
}
void OAIStringMatcher::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIStringMatcher::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIStringMatcher::is_prefix_Valid() const{
    return m_prefix_isValid;
}

QString OAIStringMatcher::getRegex() const {
    return m_regex;
}
void OAIStringMatcher::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIStringMatcher::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIStringMatcher::is_regex_Valid() const{
    return m_regex_isValid;
}

OAIRegexMatcher OAIStringMatcher::getSafeRegex() const {
    return m_safe_regex;
}
void OAIStringMatcher::setSafeRegex(const OAIRegexMatcher &safe_regex) {
    m_safe_regex = safe_regex;
    m_safe_regex_isSet = true;
}

bool OAIStringMatcher::is_safe_regex_Set() const{
    return m_safe_regex_isSet;
}

bool OAIStringMatcher::is_safe_regex_Valid() const{
    return m_safe_regex_isValid;
}

QString OAIStringMatcher::getSuffix() const {
    return m_suffix;
}
void OAIStringMatcher::setSuffix(const QString &suffix) {
    m_suffix = suffix;
    m_suffix_isSet = true;
}

bool OAIStringMatcher::is_suffix_Set() const{
    return m_suffix_isSet;
}

bool OAIStringMatcher::is_suffix_Valid() const{
    return m_suffix_isValid;
}

bool OAIStringMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_case_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_regex.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStringMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
