/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISocketAddress.h
 *
 * [#next-free-field: 7]
 */

#ifndef OAISocketAddress_H
#define OAISocketAddress_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISocketAddress : public OAIObject {
public:
    OAISocketAddress();
    OAISocketAddress(QString json);
    ~OAISocketAddress() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAddress() const;
    void setAddress(const QString &address);
    bool is_address_Set() const;
    bool is_address_Valid() const;

    bool isIpv4Compat() const;
    void setIpv4Compat(const bool &ipv4_compat);
    bool is_ipv4_compat_Set() const;
    bool is_ipv4_compat_Valid() const;

    QString getNamedPort() const;
    void setNamedPort(const QString &named_port);
    bool is_named_port_Set() const;
    bool is_named_port_Valid() const;

    qint32 getPortValue() const;
    void setPortValue(const qint32 &port_value);
    bool is_port_value_Set() const;
    bool is_port_value_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getResolverName() const;
    void setResolverName(const QString &resolver_name);
    bool is_resolver_name_Set() const;
    bool is_resolver_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_address;
    bool m_address_isSet;
    bool m_address_isValid;

    bool m_ipv4_compat;
    bool m_ipv4_compat_isSet;
    bool m_ipv4_compat_isValid;

    QString m_named_port;
    bool m_named_port_isSet;
    bool m_named_port_isValid;

    qint32 m_port_value;
    bool m_port_value_isSet;
    bool m_port_value_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_resolver_name;
    bool m_resolver_name_isSet;
    bool m_resolver_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISocketAddress)

#endif // OAISocketAddress_H
