/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListenersConfigDump.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListenersConfigDump::OAIListenersConfigDump(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListenersConfigDump::OAIListenersConfigDump() {
    this->initializeModel();
}

OAIListenersConfigDump::~OAIListenersConfigDump() {}

void OAIListenersConfigDump::initializeModel() {

    m_dynamic_listeners_isSet = false;
    m_dynamic_listeners_isValid = false;

    m_static_listeners_isSet = false;
    m_static_listeners_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;
}

void OAIListenersConfigDump::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListenersConfigDump::fromJsonObject(QJsonObject json) {

    m_dynamic_listeners_isValid = ::OpenAPI::fromJsonValue(m_dynamic_listeners, json[QString("dynamicListeners")]);
    m_dynamic_listeners_isSet = !json[QString("dynamicListeners")].isNull() && m_dynamic_listeners_isValid;

    m_static_listeners_isValid = ::OpenAPI::fromJsonValue(m_static_listeners, json[QString("staticListeners")]);
    m_static_listeners_isSet = !json[QString("staticListeners")].isNull() && m_static_listeners_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;
}

QString OAIListenersConfigDump::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListenersConfigDump::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_listeners.size() > 0) {
        obj.insert(QString("dynamicListeners"), ::OpenAPI::toJsonValue(m_dynamic_listeners));
    }
    if (m_static_listeners.size() > 0) {
        obj.insert(QString("staticListeners"), ::OpenAPI::toJsonValue(m_static_listeners));
    }
    if (m_version_info_isSet) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    return obj;
}

QList<OAIDynamicListener> OAIListenersConfigDump::getDynamicListeners() const {
    return m_dynamic_listeners;
}
void OAIListenersConfigDump::setDynamicListeners(const QList<OAIDynamicListener> &dynamic_listeners) {
    m_dynamic_listeners = dynamic_listeners;
    m_dynamic_listeners_isSet = true;
}

bool OAIListenersConfigDump::is_dynamic_listeners_Set() const{
    return m_dynamic_listeners_isSet;
}

bool OAIListenersConfigDump::is_dynamic_listeners_Valid() const{
    return m_dynamic_listeners_isValid;
}

QList<OAIStaticListener> OAIListenersConfigDump::getStaticListeners() const {
    return m_static_listeners;
}
void OAIListenersConfigDump::setStaticListeners(const QList<OAIStaticListener> &static_listeners) {
    m_static_listeners = static_listeners;
    m_static_listeners_isSet = true;
}

bool OAIListenersConfigDump::is_static_listeners_Set() const{
    return m_static_listeners_isSet;
}

bool OAIListenersConfigDump::is_static_listeners_Valid() const{
    return m_static_listeners_isValid;
}

QString OAIListenersConfigDump::getVersionInfo() const {
    return m_version_info;
}
void OAIListenersConfigDump::setVersionInfo(const QString &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIListenersConfigDump::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIListenersConfigDump::is_version_info_Valid() const{
    return m_version_info_isValid;
}

bool OAIListenersConfigDump::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListenersConfigDump::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
