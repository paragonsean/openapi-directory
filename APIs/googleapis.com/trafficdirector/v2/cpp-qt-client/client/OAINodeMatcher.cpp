/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeMatcher::OAINodeMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeMatcher::OAINodeMatcher() {
    this->initializeModel();
}

OAINodeMatcher::~OAINodeMatcher() {}

void OAINodeMatcher::initializeModel() {

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_metadatas_isSet = false;
    m_node_metadatas_isValid = false;
}

void OAINodeMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeMatcher::fromJsonObject(QJsonObject json) {

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_node_metadatas_isValid = ::OpenAPI::fromJsonValue(m_node_metadatas, json[QString("nodeMetadatas")]);
    m_node_metadatas_isSet = !json[QString("nodeMetadatas")].isNull() && m_node_metadatas_isValid;
}

QString OAINodeMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_node_id.isSet()) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_metadatas.size() > 0) {
        obj.insert(QString("nodeMetadatas"), ::OpenAPI::toJsonValue(m_node_metadatas));
    }
    return obj;
}

OAIStringMatcher OAINodeMatcher::getNodeId() const {
    return m_node_id;
}
void OAINodeMatcher::setNodeId(const OAIStringMatcher &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINodeMatcher::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINodeMatcher::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QList<OAIStructMatcher> OAINodeMatcher::getNodeMetadatas() const {
    return m_node_metadatas;
}
void OAINodeMatcher::setNodeMetadatas(const QList<OAIStructMatcher> &node_metadatas) {
    m_node_metadatas = node_metadatas;
    m_node_metadatas_isSet = true;
}

bool OAINodeMatcher::is_node_metadatas_Set() const{
    return m_node_metadatas_isSet;
}

bool OAINodeMatcher::is_node_metadatas_Valid() const{
    return m_node_metadatas_isValid;
}

bool OAINodeMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_metadatas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
