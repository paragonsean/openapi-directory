/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInlineScopedRouteConfigs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInlineScopedRouteConfigs::OAIInlineScopedRouteConfigs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInlineScopedRouteConfigs::OAIInlineScopedRouteConfigs() {
    this->initializeModel();
}

OAIInlineScopedRouteConfigs::~OAIInlineScopedRouteConfigs() {}

void OAIInlineScopedRouteConfigs::initializeModel() {

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scoped_route_configs_isSet = false;
    m_scoped_route_configs_isValid = false;
}

void OAIInlineScopedRouteConfigs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInlineScopedRouteConfigs::fromJsonObject(QJsonObject json) {

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    if(json["scopedRouteConfigs"].isArray()){
        auto arr = json["scopedRouteConfigs"].toArray();
        m_scoped_route_configs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_scoped_route_configs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_scoped_route_configs_isSet = !jval.isNull() && m_scoped_route_configs_isValid;
                m_scoped_route_configs.push_back(item);
            }
        }
    }
}

QString OAIInlineScopedRouteConfigs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInlineScopedRouteConfigs::asJsonObject() const {
    QJsonObject obj;
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scoped_route_configs.size() > 0) {
        
        obj.insert(QString("scopedRouteConfigs"), toJsonValue(m_scoped_route_configs));
    }
    return obj;
}

QString OAIInlineScopedRouteConfigs::getLastUpdated() const {
    return m_last_updated;
}
void OAIInlineScopedRouteConfigs::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIInlineScopedRouteConfigs::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIInlineScopedRouteConfigs::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIInlineScopedRouteConfigs::getName() const {
    return m_name;
}
void OAIInlineScopedRouteConfigs::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInlineScopedRouteConfigs::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInlineScopedRouteConfigs::is_name_Valid() const{
    return m_name_isValid;
}

QList<QMap<QString, QJsonValue>> OAIInlineScopedRouteConfigs::getScopedRouteConfigs() const {
    return m_scoped_route_configs;
}
void OAIInlineScopedRouteConfigs::setScopedRouteConfigs(const QList<QMap<QString, QJsonValue>> &scoped_route_configs) {
    m_scoped_route_configs = scoped_route_configs;
    m_scoped_route_configs_isSet = true;
}

bool OAIInlineScopedRouteConfigs::is_scoped_route_configs_Set() const{
    return m_scoped_route_configs_isSet;
}

bool OAIInlineScopedRouteConfigs::is_scoped_route_configs_Valid() const{
    return m_scoped_route_configs_isValid;
}

bool OAIInlineScopedRouteConfigs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoped_route_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInlineScopedRouteConfigs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
