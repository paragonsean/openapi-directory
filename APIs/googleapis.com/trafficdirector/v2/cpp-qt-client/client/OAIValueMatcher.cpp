/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValueMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValueMatcher::OAIValueMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValueMatcher::OAIValueMatcher() {
    this->initializeModel();
}

OAIValueMatcher::~OAIValueMatcher() {}

void OAIValueMatcher::initializeModel() {

    m_bool_match_isSet = false;
    m_bool_match_isValid = false;

    m_double_match_isSet = false;
    m_double_match_isValid = false;

    m_list_match_isSet = false;
    m_list_match_isValid = false;

    m_null_match_isSet = false;
    m_null_match_isValid = false;

    m_present_match_isSet = false;
    m_present_match_isValid = false;

    m_string_match_isSet = false;
    m_string_match_isValid = false;
}

void OAIValueMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValueMatcher::fromJsonObject(QJsonObject json) {

    m_bool_match_isValid = ::OpenAPI::fromJsonValue(m_bool_match, json[QString("boolMatch")]);
    m_bool_match_isSet = !json[QString("boolMatch")].isNull() && m_bool_match_isValid;

    m_double_match_isValid = ::OpenAPI::fromJsonValue(m_double_match, json[QString("doubleMatch")]);
    m_double_match_isSet = !json[QString("doubleMatch")].isNull() && m_double_match_isValid;

    m_list_match_isValid = ::OpenAPI::fromJsonValue(m_list_match, json[QString("listMatch")]);
    m_list_match_isSet = !json[QString("listMatch")].isNull() && m_list_match_isValid;

    m_null_match_isValid = ::OpenAPI::fromJsonValue(m_null_match, json[QString("nullMatch")]);
    m_null_match_isSet = !json[QString("nullMatch")].isNull() && m_null_match_isValid;

    m_present_match_isValid = ::OpenAPI::fromJsonValue(m_present_match, json[QString("presentMatch")]);
    m_present_match_isSet = !json[QString("presentMatch")].isNull() && m_present_match_isValid;

    m_string_match_isValid = ::OpenAPI::fromJsonValue(m_string_match, json[QString("stringMatch")]);
    m_string_match_isSet = !json[QString("stringMatch")].isNull() && m_string_match_isValid;
}

QString OAIValueMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValueMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_match_isSet) {
        obj.insert(QString("boolMatch"), ::OpenAPI::toJsonValue(m_bool_match));
    }
    if (m_double_match.isSet()) {
        obj.insert(QString("doubleMatch"), ::OpenAPI::toJsonValue(m_double_match));
    }
    if (m_list_match.isSet()) {
        obj.insert(QString("listMatch"), ::OpenAPI::toJsonValue(m_list_match));
    }
    if (m_null_match_isSet) {
        obj.insert(QString("nullMatch"), ::OpenAPI::toJsonValue(m_null_match));
    }
    if (m_present_match_isSet) {
        obj.insert(QString("presentMatch"), ::OpenAPI::toJsonValue(m_present_match));
    }
    if (m_string_match.isSet()) {
        obj.insert(QString("stringMatch"), ::OpenAPI::toJsonValue(m_string_match));
    }
    return obj;
}

bool OAIValueMatcher::isBoolMatch() const {
    return m_bool_match;
}
void OAIValueMatcher::setBoolMatch(const bool &bool_match) {
    m_bool_match = bool_match;
    m_bool_match_isSet = true;
}

bool OAIValueMatcher::is_bool_match_Set() const{
    return m_bool_match_isSet;
}

bool OAIValueMatcher::is_bool_match_Valid() const{
    return m_bool_match_isValid;
}

OAIDoubleMatcher OAIValueMatcher::getDoubleMatch() const {
    return m_double_match;
}
void OAIValueMatcher::setDoubleMatch(const OAIDoubleMatcher &double_match) {
    m_double_match = double_match;
    m_double_match_isSet = true;
}

bool OAIValueMatcher::is_double_match_Set() const{
    return m_double_match_isSet;
}

bool OAIValueMatcher::is_double_match_Valid() const{
    return m_double_match_isValid;
}

OAIListMatcher OAIValueMatcher::getListMatch() const {
    return m_list_match;
}
void OAIValueMatcher::setListMatch(const OAIListMatcher &list_match) {
    m_list_match = list_match;
    m_list_match_isSet = true;
}

bool OAIValueMatcher::is_list_match_Set() const{
    return m_list_match_isSet;
}

bool OAIValueMatcher::is_list_match_Valid() const{
    return m_list_match_isValid;
}

OAIObject OAIValueMatcher::getNullMatch() const {
    return m_null_match;
}
void OAIValueMatcher::setNullMatch(const OAIObject &null_match) {
    m_null_match = null_match;
    m_null_match_isSet = true;
}

bool OAIValueMatcher::is_null_match_Set() const{
    return m_null_match_isSet;
}

bool OAIValueMatcher::is_null_match_Valid() const{
    return m_null_match_isValid;
}

bool OAIValueMatcher::isPresentMatch() const {
    return m_present_match;
}
void OAIValueMatcher::setPresentMatch(const bool &present_match) {
    m_present_match = present_match;
    m_present_match_isSet = true;
}

bool OAIValueMatcher::is_present_match_Set() const{
    return m_present_match_isSet;
}

bool OAIValueMatcher::is_present_match_Valid() const{
    return m_present_match_isValid;
}

OAIStringMatcher OAIValueMatcher::getStringMatch() const {
    return m_string_match;
}
void OAIValueMatcher::setStringMatch(const OAIStringMatcher &string_match) {
    m_string_match = string_match;
    m_string_match_isSet = true;
}

bool OAIValueMatcher::is_string_match_Set() const{
    return m_string_match_isSet;
}

bool OAIValueMatcher::is_string_match_Valid() const{
    return m_string_match_isValid;
}

bool OAIValueMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_match.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_present_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_match.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValueMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
