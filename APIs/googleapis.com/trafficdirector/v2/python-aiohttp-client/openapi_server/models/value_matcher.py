# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.double_matcher import DoubleMatcher
from openapi_server.models.list_matcher import ListMatcher
from openapi_server.models.string_matcher import StringMatcher
from openapi_server import util


class ValueMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_match: bool=None, double_match: DoubleMatcher=None, list_match: ListMatcher=None, null_match: object=None, present_match: bool=None, string_match: StringMatcher=None):
        """ValueMatcher - a model defined in OpenAPI

        :param bool_match: The bool_match of this ValueMatcher.
        :param double_match: The double_match of this ValueMatcher.
        :param list_match: The list_match of this ValueMatcher.
        :param null_match: The null_match of this ValueMatcher.
        :param present_match: The present_match of this ValueMatcher.
        :param string_match: The string_match of this ValueMatcher.
        """
        self.openapi_types = {
            'bool_match': bool,
            'double_match': DoubleMatcher,
            'list_match': ListMatcher,
            'null_match': object,
            'present_match': bool,
            'string_match': StringMatcher
        }

        self.attribute_map = {
            'bool_match': 'boolMatch',
            'double_match': 'doubleMatch',
            'list_match': 'listMatch',
            'null_match': 'nullMatch',
            'present_match': 'presentMatch',
            'string_match': 'stringMatch'
        }

        self._bool_match = bool_match
        self._double_match = double_match
        self._list_match = list_match
        self._null_match = null_match
        self._present_match = present_match
        self._string_match = string_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValueMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValueMatcher of this ValueMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_match(self):
        """Gets the bool_match of this ValueMatcher.

        If specified, a match occurs if and only if the target value is a bool value and is equal to this field.

        :return: The bool_match of this ValueMatcher.
        :rtype: bool
        """
        return self._bool_match

    @bool_match.setter
    def bool_match(self, bool_match):
        """Sets the bool_match of this ValueMatcher.

        If specified, a match occurs if and only if the target value is a bool value and is equal to this field.

        :param bool_match: The bool_match of this ValueMatcher.
        :type bool_match: bool
        """

        self._bool_match = bool_match

    @property
    def double_match(self):
        """Gets the double_match of this ValueMatcher.


        :return: The double_match of this ValueMatcher.
        :rtype: DoubleMatcher
        """
        return self._double_match

    @double_match.setter
    def double_match(self, double_match):
        """Sets the double_match of this ValueMatcher.


        :param double_match: The double_match of this ValueMatcher.
        :type double_match: DoubleMatcher
        """

        self._double_match = double_match

    @property
    def list_match(self):
        """Gets the list_match of this ValueMatcher.


        :return: The list_match of this ValueMatcher.
        :rtype: ListMatcher
        """
        return self._list_match

    @list_match.setter
    def list_match(self, list_match):
        """Sets the list_match of this ValueMatcher.


        :param list_match: The list_match of this ValueMatcher.
        :type list_match: ListMatcher
        """

        self._list_match = list_match

    @property
    def null_match(self):
        """Gets the null_match of this ValueMatcher.

        NullMatch is an empty message to specify a null value.

        :return: The null_match of this ValueMatcher.
        :rtype: object
        """
        return self._null_match

    @null_match.setter
    def null_match(self, null_match):
        """Sets the null_match of this ValueMatcher.

        NullMatch is an empty message to specify a null value.

        :param null_match: The null_match of this ValueMatcher.
        :type null_match: object
        """

        self._null_match = null_match

    @property
    def present_match(self):
        """Gets the present_match of this ValueMatcher.

        If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.

        :return: The present_match of this ValueMatcher.
        :rtype: bool
        """
        return self._present_match

    @present_match.setter
    def present_match(self, present_match):
        """Sets the present_match of this ValueMatcher.

        If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.

        :param present_match: The present_match of this ValueMatcher.
        :type present_match: bool
        """

        self._present_match = present_match

    @property
    def string_match(self):
        """Gets the string_match of this ValueMatcher.


        :return: The string_match of this ValueMatcher.
        :rtype: StringMatcher
        """
        return self._string_match

    @string_match.setter
    def string_match(self, string_match):
        """Sets the string_match of this ValueMatcher.


        :param string_match: The string_match of this ValueMatcher.
        :type string_match: StringMatcher
        """

        self._string_match = string_match
