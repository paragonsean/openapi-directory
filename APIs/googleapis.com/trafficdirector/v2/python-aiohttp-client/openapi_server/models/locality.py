# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Locality(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region: str=None, sub_zone: str=None, zone: str=None):
        """Locality - a model defined in OpenAPI

        :param region: The region of this Locality.
        :param sub_zone: The sub_zone of this Locality.
        :param zone: The zone of this Locality.
        """
        self.openapi_types = {
            'region': str,
            'sub_zone': str,
            'zone': str
        }

        self.attribute_map = {
            'region': 'region',
            'sub_zone': 'subZone',
            'zone': 'zone'
        }

        self._region = region
        self._sub_zone = sub_zone
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Locality':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Locality of this Locality.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region(self):
        """Gets the region of this Locality.

        Region this :ref:`zone ` belongs to.

        :return: The region of this Locality.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Locality.

        Region this :ref:`zone ` belongs to.

        :param region: The region of this Locality.
        :type region: str
        """

        self._region = region

    @property
    def sub_zone(self):
        """Gets the sub_zone of this Locality.

        When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently.

        :return: The sub_zone of this Locality.
        :rtype: str
        """
        return self._sub_zone

    @sub_zone.setter
    def sub_zone(self, sub_zone):
        """Sets the sub_zone of this Locality.

        When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently.

        :param sub_zone: The sub_zone of this Locality.
        :type sub_zone: str
        """

        self._sub_zone = sub_zone

    @property
    def zone(self):
        """Gets the zone of this Locality.

        Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data `, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) `_ on AWS, `Zone `_ on GCP, etc.

        :return: The zone of this Locality.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this Locality.

        Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data `, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) `_ on AWS, `Zone `_ on GCP, etc.

        :param zone: The zone of this Locality.
        :type zone: str
        """

        self._zone = zone
