# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_listener_state import DynamicListenerState
from openapi_server.models.update_failure_state import UpdateFailureState
from openapi_server import util


class DynamicListener(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_state: DynamicListenerState=None, draining_state: DynamicListenerState=None, error_state: UpdateFailureState=None, name: str=None, warming_state: DynamicListenerState=None):
        """DynamicListener - a model defined in OpenAPI

        :param active_state: The active_state of this DynamicListener.
        :param draining_state: The draining_state of this DynamicListener.
        :param error_state: The error_state of this DynamicListener.
        :param name: The name of this DynamicListener.
        :param warming_state: The warming_state of this DynamicListener.
        """
        self.openapi_types = {
            'active_state': DynamicListenerState,
            'draining_state': DynamicListenerState,
            'error_state': UpdateFailureState,
            'name': str,
            'warming_state': DynamicListenerState
        }

        self.attribute_map = {
            'active_state': 'activeState',
            'draining_state': 'drainingState',
            'error_state': 'errorState',
            'name': 'name',
            'warming_state': 'warmingState'
        }

        self._active_state = active_state
        self._draining_state = draining_state
        self._error_state = error_state
        self._name = name
        self._warming_state = warming_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DynamicListener':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DynamicListener of this DynamicListener.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_state(self):
        """Gets the active_state of this DynamicListener.


        :return: The active_state of this DynamicListener.
        :rtype: DynamicListenerState
        """
        return self._active_state

    @active_state.setter
    def active_state(self, active_state):
        """Sets the active_state of this DynamicListener.


        :param active_state: The active_state of this DynamicListener.
        :type active_state: DynamicListenerState
        """

        self._active_state = active_state

    @property
    def draining_state(self):
        """Gets the draining_state of this DynamicListener.


        :return: The draining_state of this DynamicListener.
        :rtype: DynamicListenerState
        """
        return self._draining_state

    @draining_state.setter
    def draining_state(self, draining_state):
        """Sets the draining_state of this DynamicListener.


        :param draining_state: The draining_state of this DynamicListener.
        :type draining_state: DynamicListenerState
        """

        self._draining_state = draining_state

    @property
    def error_state(self):
        """Gets the error_state of this DynamicListener.


        :return: The error_state of this DynamicListener.
        :rtype: UpdateFailureState
        """
        return self._error_state

    @error_state.setter
    def error_state(self, error_state):
        """Sets the error_state of this DynamicListener.


        :param error_state: The error_state of this DynamicListener.
        :type error_state: UpdateFailureState
        """

        self._error_state = error_state

    @property
    def name(self):
        """Gets the name of this DynamicListener.

        The name or unique id of this listener, pulled from the DynamicListenerState config.

        :return: The name of this DynamicListener.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DynamicListener.

        The name or unique id of this listener, pulled from the DynamicListenerState config.

        :param name: The name of this DynamicListener.
        :type name: str
        """

        self._name = name

    @property
    def warming_state(self):
        """Gets the warming_state of this DynamicListener.


        :return: The warming_state of this DynamicListener.
        :rtype: DynamicListenerState
        """
        return self._warming_state

    @warming_state.setter
    def warming_state(self, warming_state):
        """Sets the warming_state of this DynamicListener.


        :param warming_state: The warming_state of this DynamicListener.
        :type warming_state: DynamicListenerState
        """

        self._warming_state = warming_state
