# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.regex_matcher import RegexMatcher
from openapi_server import util


class StringMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exact: str=None, ignore_case: bool=None, prefix: str=None, regex: str=None, safe_regex: RegexMatcher=None, suffix: str=None):
        """StringMatcher - a model defined in OpenAPI

        :param exact: The exact of this StringMatcher.
        :param ignore_case: The ignore_case of this StringMatcher.
        :param prefix: The prefix of this StringMatcher.
        :param regex: The regex of this StringMatcher.
        :param safe_regex: The safe_regex of this StringMatcher.
        :param suffix: The suffix of this StringMatcher.
        """
        self.openapi_types = {
            'exact': str,
            'ignore_case': bool,
            'prefix': str,
            'regex': str,
            'safe_regex': RegexMatcher,
            'suffix': str
        }

        self.attribute_map = {
            'exact': 'exact',
            'ignore_case': 'ignoreCase',
            'prefix': 'prefix',
            'regex': 'regex',
            'safe_regex': 'safeRegex',
            'suffix': 'suffix'
        }

        self._exact = exact
        self._ignore_case = ignore_case
        self._prefix = prefix
        self._regex = regex
        self._safe_regex = safe_regex
        self._suffix = suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StringMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StringMatcher of this StringMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exact(self):
        """Gets the exact of this StringMatcher.

        The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.

        :return: The exact of this StringMatcher.
        :rtype: str
        """
        return self._exact

    @exact.setter
    def exact(self, exact):
        """Sets the exact of this StringMatcher.

        The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.

        :param exact: The exact of this StringMatcher.
        :type exact: str
        """

        self._exact = exact

    @property
    def ignore_case(self):
        """Gets the ignore_case of this StringMatcher.

        If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.

        :return: The ignore_case of this StringMatcher.
        :rtype: bool
        """
        return self._ignore_case

    @ignore_case.setter
    def ignore_case(self, ignore_case):
        """Sets the ignore_case of this StringMatcher.

        If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.

        :param ignore_case: The ignore_case of this StringMatcher.
        :type ignore_case: bool
        """

        self._ignore_case = ignore_case

    @property
    def prefix(self):
        """Gets the prefix of this StringMatcher.

        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*

        :return: The prefix of this StringMatcher.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this StringMatcher.

        The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*

        :param prefix: The prefix of this StringMatcher.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def regex(self):
        """Gets the regex of this StringMatcher.

        The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\\d{3}`` matches the value *123* * The regex ``\\d{3}`` does not match the value *1234* * The regex ``\\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.

        :return: The regex of this StringMatcher.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this StringMatcher.

        The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\\d{3}`` matches the value *123* * The regex ``\\d{3}`` does not match the value *1234* * The regex ``\\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.

        :param regex: The regex of this StringMatcher.
        :type regex: str
        """

        self._regex = regex

    @property
    def safe_regex(self):
        """Gets the safe_regex of this StringMatcher.


        :return: The safe_regex of this StringMatcher.
        :rtype: RegexMatcher
        """
        return self._safe_regex

    @safe_regex.setter
    def safe_regex(self, safe_regex):
        """Sets the safe_regex of this StringMatcher.


        :param safe_regex: The safe_regex of this StringMatcher.
        :type safe_regex: RegexMatcher
        """

        self._safe_regex = safe_regex

    @property
    def suffix(self):
        """Gets the suffix of this StringMatcher.

        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*

        :return: The suffix of this StringMatcher.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this StringMatcher.

        The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*

        :param suffix: The suffix of this StringMatcher.
        :type suffix: str
        """

        self._suffix = suffix
