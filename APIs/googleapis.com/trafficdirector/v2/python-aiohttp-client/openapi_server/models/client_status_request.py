# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_matcher import NodeMatcher
from openapi_server import util


class ClientStatusRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_matchers: List[NodeMatcher]=None):
        """ClientStatusRequest - a model defined in OpenAPI

        :param node_matchers: The node_matchers of this ClientStatusRequest.
        """
        self.openapi_types = {
            'node_matchers': List[NodeMatcher]
        }

        self.attribute_map = {
            'node_matchers': 'nodeMatchers'
        }

        self._node_matchers = node_matchers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientStatusRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientStatusRequest of this ClientStatusRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_matchers(self):
        """Gets the node_matchers of this ClientStatusRequest.

        Management server can use these match criteria to identify clients. The match follows OR semantics.

        :return: The node_matchers of this ClientStatusRequest.
        :rtype: List[NodeMatcher]
        """
        return self._node_matchers

    @node_matchers.setter
    def node_matchers(self, node_matchers):
        """Sets the node_matchers of this ClientStatusRequest.

        Management server can use these match criteria to identify clients. The match follows OR semantics.

        :param node_matchers: The node_matchers of this ClientStatusRequest.
        :type node_matchers: List[NodeMatcher]
        """

        self._node_matchers = node_matchers
