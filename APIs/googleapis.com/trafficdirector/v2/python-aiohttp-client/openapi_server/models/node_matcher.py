# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.string_matcher import StringMatcher
from openapi_server.models.struct_matcher import StructMatcher
from openapi_server import util


class NodeMatcher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_id: StringMatcher=None, node_metadatas: List[StructMatcher]=None):
        """NodeMatcher - a model defined in OpenAPI

        :param node_id: The node_id of this NodeMatcher.
        :param node_metadatas: The node_metadatas of this NodeMatcher.
        """
        self.openapi_types = {
            'node_id': StringMatcher,
            'node_metadatas': List[StructMatcher]
        }

        self.attribute_map = {
            'node_id': 'nodeId',
            'node_metadatas': 'nodeMetadatas'
        }

        self._node_id = node_id
        self._node_metadatas = node_metadatas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeMatcher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeMatcher of this NodeMatcher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self):
        """Gets the node_id of this NodeMatcher.


        :return: The node_id of this NodeMatcher.
        :rtype: StringMatcher
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NodeMatcher.


        :param node_id: The node_id of this NodeMatcher.
        :type node_id: StringMatcher
        """

        self._node_id = node_id

    @property
    def node_metadatas(self):
        """Gets the node_metadatas of this NodeMatcher.

        Specifies match criteria on the node metadata.

        :return: The node_metadatas of this NodeMatcher.
        :rtype: List[StructMatcher]
        """
        return self._node_metadatas

    @node_metadatas.setter
    def node_metadatas(self, node_metadatas):
        """Sets the node_metadatas of this NodeMatcher.

        Specifies match criteria on the node metadata.

        :param node_metadatas: The node_metadatas of this NodeMatcher.
        :type node_metadatas: List[StructMatcher]
        """

        self._node_metadatas = node_metadatas
