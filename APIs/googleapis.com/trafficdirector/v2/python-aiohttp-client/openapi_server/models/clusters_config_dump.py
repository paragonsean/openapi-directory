# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_cluster import DynamicCluster
from openapi_server.models.static_cluster import StaticCluster
from openapi_server import util


class ClustersConfigDump(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_active_clusters: List[DynamicCluster]=None, dynamic_warming_clusters: List[DynamicCluster]=None, static_clusters: List[StaticCluster]=None, version_info: str=None):
        """ClustersConfigDump - a model defined in OpenAPI

        :param dynamic_active_clusters: The dynamic_active_clusters of this ClustersConfigDump.
        :param dynamic_warming_clusters: The dynamic_warming_clusters of this ClustersConfigDump.
        :param static_clusters: The static_clusters of this ClustersConfigDump.
        :param version_info: The version_info of this ClustersConfigDump.
        """
        self.openapi_types = {
            'dynamic_active_clusters': List[DynamicCluster],
            'dynamic_warming_clusters': List[DynamicCluster],
            'static_clusters': List[StaticCluster],
            'version_info': str
        }

        self.attribute_map = {
            'dynamic_active_clusters': 'dynamicActiveClusters',
            'dynamic_warming_clusters': 'dynamicWarmingClusters',
            'static_clusters': 'staticClusters',
            'version_info': 'versionInfo'
        }

        self._dynamic_active_clusters = dynamic_active_clusters
        self._dynamic_warming_clusters = dynamic_warming_clusters
        self._static_clusters = static_clusters
        self._version_info = version_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClustersConfigDump':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClustersConfigDump of this ClustersConfigDump.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_active_clusters(self):
        """Gets the dynamic_active_clusters of this ClustersConfigDump.

        The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.

        :return: The dynamic_active_clusters of this ClustersConfigDump.
        :rtype: List[DynamicCluster]
        """
        return self._dynamic_active_clusters

    @dynamic_active_clusters.setter
    def dynamic_active_clusters(self, dynamic_active_clusters):
        """Sets the dynamic_active_clusters of this ClustersConfigDump.

        The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.

        :param dynamic_active_clusters: The dynamic_active_clusters of this ClustersConfigDump.
        :type dynamic_active_clusters: List[DynamicCluster]
        """

        self._dynamic_active_clusters = dynamic_active_clusters

    @property
    def dynamic_warming_clusters(self):
        """Gets the dynamic_warming_clusters of this ClustersConfigDump.

        The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.

        :return: The dynamic_warming_clusters of this ClustersConfigDump.
        :rtype: List[DynamicCluster]
        """
        return self._dynamic_warming_clusters

    @dynamic_warming_clusters.setter
    def dynamic_warming_clusters(self, dynamic_warming_clusters):
        """Sets the dynamic_warming_clusters of this ClustersConfigDump.

        The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.

        :param dynamic_warming_clusters: The dynamic_warming_clusters of this ClustersConfigDump.
        :type dynamic_warming_clusters: List[DynamicCluster]
        """

        self._dynamic_warming_clusters = dynamic_warming_clusters

    @property
    def static_clusters(self):
        """Gets the static_clusters of this ClustersConfigDump.

        The statically loaded cluster configs.

        :return: The static_clusters of this ClustersConfigDump.
        :rtype: List[StaticCluster]
        """
        return self._static_clusters

    @static_clusters.setter
    def static_clusters(self, static_clusters):
        """Sets the static_clusters of this ClustersConfigDump.

        The statically loaded cluster configs.

        :param static_clusters: The static_clusters of this ClustersConfigDump.
        :type static_clusters: List[StaticCluster]
        """

        self._static_clusters = static_clusters

    @property
    def version_info(self):
        """Gets the version_info of this ClustersConfigDump.

        This is the :ref:`version_info ` in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be \"\".

        :return: The version_info of this ClustersConfigDump.
        :rtype: str
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this ClustersConfigDump.

        This is the :ref:`version_info ` in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be \"\".

        :param version_info: The version_info of this ClustersConfigDump.
        :type version_info: str
        """

        self._version_info = version_info
