/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RegexMatcher from './RegexMatcher';

/**
 * The StringMatcher model module.
 * @module model/StringMatcher
 * @version v2
 */
class StringMatcher {
    /**
     * Constructs a new <code>StringMatcher</code>.
     * Specifies the way to match a string. [#next-free-field: 7]
     * @alias module:model/StringMatcher
     */
    constructor() { 
        
        StringMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StringMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StringMatcher} obj Optional instance to populate.
     * @return {module:model/StringMatcher} The populated <code>StringMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StringMatcher();

            if (data.hasOwnProperty('exact')) {
                obj['exact'] = ApiClient.convertToType(data['exact'], 'String');
            }
            if (data.hasOwnProperty('ignoreCase')) {
                obj['ignoreCase'] = ApiClient.convertToType(data['ignoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('regex')) {
                obj['regex'] = ApiClient.convertToType(data['regex'], 'String');
            }
            if (data.hasOwnProperty('safeRegex')) {
                obj['safeRegex'] = RegexMatcher.constructFromObject(data['safeRegex']);
            }
            if (data.hasOwnProperty('suffix')) {
                obj['suffix'] = ApiClient.convertToType(data['suffix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StringMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StringMatcher</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['exact'] && !(typeof data['exact'] === 'string' || data['exact'] instanceof String)) {
            throw new Error("Expected the field `exact` to be a primitive type in the JSON string but got " + data['exact']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }
        // ensure the json data is a string
        if (data['regex'] && !(typeof data['regex'] === 'string' || data['regex'] instanceof String)) {
            throw new Error("Expected the field `regex` to be a primitive type in the JSON string but got " + data['regex']);
        }
        // validate the optional field `safeRegex`
        if (data['safeRegex']) { // data not null
          RegexMatcher.validateJSON(data['safeRegex']);
        }
        // ensure the json data is a string
        if (data['suffix'] && !(typeof data['suffix'] === 'string' || data['suffix'] instanceof String)) {
            throw new Error("Expected the field `suffix` to be a primitive type in the JSON string but got " + data['suffix']);
        }

        return true;
    }


}



/**
 * The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.
 * @member {String} exact
 */
StringMatcher.prototype['exact'] = undefined;

/**
 * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.
 * @member {Boolean} ignoreCase
 */
StringMatcher.prototype['ignoreCase'] = undefined;

/**
 * The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*
 * @member {String} prefix
 */
StringMatcher.prototype['prefix'] = undefined;

/**
 * The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\\d{3}`` matches the value *123* * The regex ``\\d{3}`` does not match the value *1234* * The regex ``\\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.
 * @member {String} regex
 */
StringMatcher.prototype['regex'] = undefined;

/**
 * @member {module:model/RegexMatcher} safeRegex
 */
StringMatcher.prototype['safeRegex'] = undefined;

/**
 * The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*
 * @member {String} suffix
 */
StringMatcher.prototype['suffix'] = undefined;






export default StringMatcher;

