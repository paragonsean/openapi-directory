/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DynamicCluster from './DynamicCluster';
import StaticCluster from './StaticCluster';

/**
 * The ClustersConfigDump model module.
 * @module model/ClustersConfigDump
 * @version v2
 */
class ClustersConfigDump {
    /**
     * Constructs a new <code>ClustersConfigDump</code>.
     * Envoy&#39;s cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
     * @alias module:model/ClustersConfigDump
     */
    constructor() { 
        
        ClustersConfigDump.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClustersConfigDump</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClustersConfigDump} obj Optional instance to populate.
     * @return {module:model/ClustersConfigDump} The populated <code>ClustersConfigDump</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClustersConfigDump();

            if (data.hasOwnProperty('dynamicActiveClusters')) {
                obj['dynamicActiveClusters'] = ApiClient.convertToType(data['dynamicActiveClusters'], [DynamicCluster]);
            }
            if (data.hasOwnProperty('dynamicWarmingClusters')) {
                obj['dynamicWarmingClusters'] = ApiClient.convertToType(data['dynamicWarmingClusters'], [DynamicCluster]);
            }
            if (data.hasOwnProperty('staticClusters')) {
                obj['staticClusters'] = ApiClient.convertToType(data['staticClusters'], [StaticCluster]);
            }
            if (data.hasOwnProperty('versionInfo')) {
                obj['versionInfo'] = ApiClient.convertToType(data['versionInfo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClustersConfigDump</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClustersConfigDump</code>.
     */
    static validateJSON(data) {
        if (data['dynamicActiveClusters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dynamicActiveClusters'])) {
                throw new Error("Expected the field `dynamicActiveClusters` to be an array in the JSON data but got " + data['dynamicActiveClusters']);
            }
            // validate the optional field `dynamicActiveClusters` (array)
            for (const item of data['dynamicActiveClusters']) {
                DynamicCluster.validateJSON(item);
            };
        }
        if (data['dynamicWarmingClusters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dynamicWarmingClusters'])) {
                throw new Error("Expected the field `dynamicWarmingClusters` to be an array in the JSON data but got " + data['dynamicWarmingClusters']);
            }
            // validate the optional field `dynamicWarmingClusters` (array)
            for (const item of data['dynamicWarmingClusters']) {
                DynamicCluster.validateJSON(item);
            };
        }
        if (data['staticClusters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staticClusters'])) {
                throw new Error("Expected the field `staticClusters` to be an array in the JSON data but got " + data['staticClusters']);
            }
            // validate the optional field `staticClusters` (array)
            for (const item of data['staticClusters']) {
                StaticCluster.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['versionInfo'] && !(typeof data['versionInfo'] === 'string' || data['versionInfo'] instanceof String)) {
            throw new Error("Expected the field `versionInfo` to be a primitive type in the JSON string but got " + data['versionInfo']);
        }

        return true;
    }


}



/**
 * The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.
 * @member {Array.<module:model/DynamicCluster>} dynamicActiveClusters
 */
ClustersConfigDump.prototype['dynamicActiveClusters'] = undefined;

/**
 * The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.
 * @member {Array.<module:model/DynamicCluster>} dynamicWarmingClusters
 */
ClustersConfigDump.prototype['dynamicWarmingClusters'] = undefined;

/**
 * The statically loaded cluster configs.
 * @member {Array.<module:model/StaticCluster>} staticClusters
 */
ClustersConfigDump.prototype['staticClusters'] = undefined;

/**
 * This is the :ref:`version_info ` in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be \"\".
 * @member {String} versionInfo
 */
ClustersConfigDump.prototype['versionInfo'] = undefined;






export default ClustersConfigDump;

