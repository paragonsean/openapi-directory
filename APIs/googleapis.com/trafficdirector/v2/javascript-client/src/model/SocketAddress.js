/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SocketAddress model module.
 * @module model/SocketAddress
 * @version v2
 */
class SocketAddress {
    /**
     * Constructs a new <code>SocketAddress</code>.
     * [#next-free-field: 7]
     * @alias module:model/SocketAddress
     */
    constructor() { 
        
        SocketAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SocketAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SocketAddress} obj Optional instance to populate.
     * @return {module:model/SocketAddress} The populated <code>SocketAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SocketAddress();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('ipv4Compat')) {
                obj['ipv4Compat'] = ApiClient.convertToType(data['ipv4Compat'], 'Boolean');
            }
            if (data.hasOwnProperty('namedPort')) {
                obj['namedPort'] = ApiClient.convertToType(data['namedPort'], 'String');
            }
            if (data.hasOwnProperty('portValue')) {
                obj['portValue'] = ApiClient.convertToType(data['portValue'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('resolverName')) {
                obj['resolverName'] = ApiClient.convertToType(data['resolverName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SocketAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SocketAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['namedPort'] && !(typeof data['namedPort'] === 'string' || data['namedPort'] instanceof String)) {
            throw new Error("Expected the field `namedPort` to be a primitive type in the JSON string but got " + data['namedPort']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['resolverName'] && !(typeof data['resolverName'] === 'string' || data['resolverName'] instanceof String)) {
            throw new Error("Expected the field `resolverName` to be a primitive type in the JSON string but got " + data['resolverName']);
        }

        return true;
    }


}



/**
 * The address for this socket. :ref:`Listeners ` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch `.] When used within an upstream :ref:`BindConfig `, the address controls the source address of outbound connections. For :ref:`clusters `, the cluster type determines whether the address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized via :ref:`resolver_name `.
 * @member {String} address
 */
SocketAddress.prototype['address'] = undefined;

/**
 * When binding to an IPv6 address above, this enables `IPv4 compatibility `_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:``.
 * @member {Boolean} ipv4Compat
 */
SocketAddress.prototype['ipv4Compat'] = undefined;

/**
 * This is only valid if :ref:`resolver_name ` is specified below and the named resolver is capable of named port resolution.
 * @member {String} namedPort
 */
SocketAddress.prototype['namedPort'] = undefined;

/**
 * @member {Number} portValue
 */
SocketAddress.prototype['portValue'] = undefined;

/**
 * @member {module:model/SocketAddress.ProtocolEnum} protocol
 */
SocketAddress.prototype['protocol'] = undefined;

/**
 * The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime.
 * @member {String} resolverName
 */
SocketAddress.prototype['resolverName'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
SocketAddress['ProtocolEnum'] = {

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP"
};



export default SocketAddress;

