/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SemanticVersion model module.
 * @module model/SemanticVersion
 * @version v2
 */
class SemanticVersion {
    /**
     * Constructs a new <code>SemanticVersion</code>.
     * Envoy uses SemVer (https://semver.org/). Major/minor versions indicate expected behaviors and APIs, the patch version field is used only for security fixes and can be generally ignored.
     * @alias module:model/SemanticVersion
     */
    constructor() { 
        
        SemanticVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SemanticVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SemanticVersion} obj Optional instance to populate.
     * @return {module:model/SemanticVersion} The populated <code>SemanticVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SemanticVersion();

            if (data.hasOwnProperty('majorNumber')) {
                obj['majorNumber'] = ApiClient.convertToType(data['majorNumber'], 'Number');
            }
            if (data.hasOwnProperty('minorNumber')) {
                obj['minorNumber'] = ApiClient.convertToType(data['minorNumber'], 'Number');
            }
            if (data.hasOwnProperty('patch')) {
                obj['patch'] = ApiClient.convertToType(data['patch'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SemanticVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SemanticVersion</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {Number} majorNumber
 */
SemanticVersion.prototype['majorNumber'] = undefined;

/**
 * @member {Number} minorNumber
 */
SemanticVersion.prototype['minorNumber'] = undefined;

/**
 * @member {Number} patch
 */
SemanticVersion.prototype['patch'] = undefined;






export default SemanticVersion;

