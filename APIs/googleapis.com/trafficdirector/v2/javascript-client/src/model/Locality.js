/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Locality model module.
 * @module model/Locality
 * @version v2
 */
class Locality {
    /**
     * Constructs a new <code>Locality</code>.
     * Identifies location of where either Envoy runs or where upstream hosts run.
     * @alias module:model/Locality
     */
    constructor() { 
        
        Locality.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Locality</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Locality} obj Optional instance to populate.
     * @return {module:model/Locality} The populated <code>Locality</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Locality();

            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('subZone')) {
                obj['subZone'] = ApiClient.convertToType(data['subZone'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Locality</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Locality</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['subZone'] && !(typeof data['subZone'] === 'string' || data['subZone'] instanceof String)) {
            throw new Error("Expected the field `subZone` to be a primitive type in the JSON string but got " + data['subZone']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * Region this :ref:`zone ` belongs to.
 * @member {String} region
 */
Locality.prototype['region'] = undefined;

/**
 * When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently.
 * @member {String} subZone
 */
Locality.prototype['subZone'] = undefined;

/**
 * Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data `, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) `_ on AWS, `Zone `_ on GCP, etc.
 * @member {String} zone
 */
Locality.prototype['zone'] = undefined;






export default Locality;

