/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildVersion from './BuildVersion';

/**
 * The Extension model module.
 * @module model/Extension
 * @version v2
 */
class Extension {
    /**
     * Constructs a new <code>Extension</code>.
     * Version and identification for an Envoy extension. [#next-free-field: 6]
     * @alias module:model/Extension
     */
    constructor() { 
        
        Extension.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Extension</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Extension} obj Optional instance to populate.
     * @return {module:model/Extension} The populated <code>Extension</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Extension();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('typeDescriptor')) {
                obj['typeDescriptor'] = ApiClient.convertToType(data['typeDescriptor'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = BuildVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Extension</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Extension</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['typeDescriptor'] && !(typeof data['typeDescriptor'] === 'string' || data['typeDescriptor'] instanceof String)) {
            throw new Error("Expected the field `typeDescriptor` to be a primitive type in the JSON string but got " + data['typeDescriptor']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          BuildVersion.validateJSON(data['version']);
        }

        return true;
    }


}



/**
 * Category of the extension. Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\" for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from acme.com vendor. [#comment:
 * @member {String} category
 */
Extension.prototype['category'] = undefined;

/**
 * Indicates that the extension is present but was disabled via dynamic configuration.
 * @member {Boolean} disabled
 */
Extension.prototype['disabled'] = undefined;

/**
 * This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.
 * @member {String} name
 */
Extension.prototype['name'] = undefined;

/**
 * [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:
 * @member {String} typeDescriptor
 */
Extension.prototype['typeDescriptor'] = undefined;

/**
 * @member {module:model/BuildVersion} version
 */
Extension.prototype['version'] = undefined;






export default Extension;

