/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DynamicListener from './DynamicListener';
import StaticListener from './StaticListener';

/**
 * The ListenersConfigDump model module.
 * @module model/ListenersConfigDump
 * @version v2
 */
class ListenersConfigDump {
    /**
     * Constructs a new <code>ListenersConfigDump</code>.
     * Envoy&#39;s listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response.
     * @alias module:model/ListenersConfigDump
     */
    constructor() { 
        
        ListenersConfigDump.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListenersConfigDump</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListenersConfigDump} obj Optional instance to populate.
     * @return {module:model/ListenersConfigDump} The populated <code>ListenersConfigDump</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListenersConfigDump();

            if (data.hasOwnProperty('dynamicListeners')) {
                obj['dynamicListeners'] = ApiClient.convertToType(data['dynamicListeners'], [DynamicListener]);
            }
            if (data.hasOwnProperty('staticListeners')) {
                obj['staticListeners'] = ApiClient.convertToType(data['staticListeners'], [StaticListener]);
            }
            if (data.hasOwnProperty('versionInfo')) {
                obj['versionInfo'] = ApiClient.convertToType(data['versionInfo'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListenersConfigDump</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListenersConfigDump</code>.
     */
    static validateJSON(data) {
        if (data['dynamicListeners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dynamicListeners'])) {
                throw new Error("Expected the field `dynamicListeners` to be an array in the JSON data but got " + data['dynamicListeners']);
            }
            // validate the optional field `dynamicListeners` (array)
            for (const item of data['dynamicListeners']) {
                DynamicListener.validateJSON(item);
            };
        }
        if (data['staticListeners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['staticListeners'])) {
                throw new Error("Expected the field `staticListeners` to be an array in the JSON data but got " + data['staticListeners']);
            }
            // validate the optional field `staticListeners` (array)
            for (const item of data['staticListeners']) {
                StaticListener.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['versionInfo'] && !(typeof data['versionInfo'] === 'string' || data['versionInfo'] instanceof String)) {
            throw new Error("Expected the field `versionInfo` to be a primitive type in the JSON string but got " + data['versionInfo']);
        }

        return true;
    }


}



/**
 * State for any warming, active, or draining listeners.
 * @member {Array.<module:model/DynamicListener>} dynamicListeners
 */
ListenersConfigDump.prototype['dynamicListeners'] = undefined;

/**
 * The statically loaded listener configs.
 * @member {Array.<module:model/StaticListener>} staticListeners
 */
ListenersConfigDump.prototype['staticListeners'] = undefined;

/**
 * This is the :ref:`version_info ` in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be \"\".
 * @member {String} versionInfo
 */
ListenersConfigDump.prototype['versionInfo'] = undefined;






export default ListenersConfigDump;

