/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegexMatcher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the way to match a string. [#next-free-field: 7]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StringMatcher {
  public static final String SERIALIZED_NAME_EXACT = "exact";
  @SerializedName(SERIALIZED_NAME_EXACT)
  private String exact;

  public static final String SERIALIZED_NAME_IGNORE_CASE = "ignoreCase";
  @SerializedName(SERIALIZED_NAME_IGNORE_CASE)
  private Boolean ignoreCase;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_REGEX = "regex";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REGEX)
  private String regex;

  public static final String SERIALIZED_NAME_SAFE_REGEX = "safeRegex";
  @SerializedName(SERIALIZED_NAME_SAFE_REGEX)
  private RegexMatcher safeRegex;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public StringMatcher() {
  }

  public StringMatcher exact(String exact) {
    this.exact = exact;
    return this;
  }

  /**
   * The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.
   * @return exact
   */
  @javax.annotation.Nullable
  public String getExact() {
    return exact;
  }

  public void setExact(String exact) {
    this.exact = exact;
  }


  public StringMatcher ignoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
    return this;
  }

  /**
   * If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.
   * @return ignoreCase
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreCase() {
    return ignoreCase;
  }

  public void setIgnoreCase(Boolean ignoreCase) {
    this.ignoreCase = ignoreCase;
  }


  public StringMatcher prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

  /**
   * The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*
   * @return prefix
   */
  @javax.annotation.Nullable
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }


  @Deprecated
  public StringMatcher regex(String regex) {
    this.regex = regex;
    return this;
  }

  /**
   * The input string must match the regular expression specified here. The regex grammar is defined &#x60;here &#x60;_. Examples: * The regex &#x60;&#x60;\\d{3}&#x60;&#x60; matches the value *123* * The regex &#x60;&#x60;\\d{3}&#x60;&#x60; does not match the value *1234* * The regex &#x60;&#x60;\\d{3}&#x60;&#x60; does not match the value *123.456* .. attention:: This field has been deprecated in favor of &#x60;safe_regex&#x60; as it is not safe for use with untrusted input in all cases.
   * @return regex
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getRegex() {
    return regex;
  }

  @Deprecated
  public void setRegex(String regex) {
    this.regex = regex;
  }


  public StringMatcher safeRegex(RegexMatcher safeRegex) {
    this.safeRegex = safeRegex;
    return this;
  }

  /**
   * Get safeRegex
   * @return safeRegex
   */
  @javax.annotation.Nullable
  public RegexMatcher getSafeRegex() {
    return safeRegex;
  }

  public void setSafeRegex(RegexMatcher safeRegex) {
    this.safeRegex = safeRegex;
  }


  public StringMatcher suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

  /**
   * The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*
   * @return suffix
   */
  @javax.annotation.Nullable
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringMatcher stringMatcher = (StringMatcher) o;
    return Objects.equals(this.exact, stringMatcher.exact) &&
        Objects.equals(this.ignoreCase, stringMatcher.ignoreCase) &&
        Objects.equals(this.prefix, stringMatcher.prefix) &&
        Objects.equals(this.regex, stringMatcher.regex) &&
        Objects.equals(this.safeRegex, stringMatcher.safeRegex) &&
        Objects.equals(this.suffix, stringMatcher.suffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exact, ignoreCase, prefix, regex, safeRegex, suffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringMatcher {\n");
    sb.append("    exact: ").append(toIndentedString(exact)).append("\n");
    sb.append("    ignoreCase: ").append(toIndentedString(ignoreCase)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    regex: ").append(toIndentedString(regex)).append("\n");
    sb.append("    safeRegex: ").append(toIndentedString(safeRegex)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exact");
    openapiFields.add("ignoreCase");
    openapiFields.add("prefix");
    openapiFields.add("regex");
    openapiFields.add("safeRegex");
    openapiFields.add("suffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StringMatcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StringMatcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StringMatcher is not found in the empty JSON string", StringMatcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StringMatcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StringMatcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exact") != null && !jsonObj.get("exact").isJsonNull()) && !jsonObj.get("exact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exact").toString()));
      }
      if ((jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) && !jsonObj.get("prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prefix").toString()));
      }
      if ((jsonObj.get("regex") != null && !jsonObj.get("regex").isJsonNull()) && !jsonObj.get("regex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `regex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("regex").toString()));
      }
      // validate the optional field `safeRegex`
      if (jsonObj.get("safeRegex") != null && !jsonObj.get("safeRegex").isJsonNull()) {
        RegexMatcher.validateJsonElement(jsonObj.get("safeRegex"));
      }
      if ((jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) && !jsonObj.get("suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StringMatcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StringMatcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StringMatcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StringMatcher.class));

       return (TypeAdapter<T>) new TypeAdapter<StringMatcher>() {
           @Override
           public void write(JsonWriter out, StringMatcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StringMatcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StringMatcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StringMatcher
   * @throws IOException if the JSON string is invalid with respect to StringMatcher
   */
  public static StringMatcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StringMatcher.class);
  }

  /**
   * Convert an instance of StringMatcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

