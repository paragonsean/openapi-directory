/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicCluster;
import org.openapitools.client.model.StaticCluster;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Envoy&#39;s cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClustersConfigDump {
  public static final String SERIALIZED_NAME_DYNAMIC_ACTIVE_CLUSTERS = "dynamicActiveClusters";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_ACTIVE_CLUSTERS)
  private List<DynamicCluster> dynamicActiveClusters = new ArrayList<>();

  public static final String SERIALIZED_NAME_DYNAMIC_WARMING_CLUSTERS = "dynamicWarmingClusters";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_WARMING_CLUSTERS)
  private List<DynamicCluster> dynamicWarmingClusters = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_CLUSTERS = "staticClusters";
  @SerializedName(SERIALIZED_NAME_STATIC_CLUSTERS)
  private List<StaticCluster> staticClusters = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private String versionInfo;

  public ClustersConfigDump() {
  }

  public ClustersConfigDump dynamicActiveClusters(List<DynamicCluster> dynamicActiveClusters) {
    this.dynamicActiveClusters = dynamicActiveClusters;
    return this;
  }

  public ClustersConfigDump addDynamicActiveClustersItem(DynamicCluster dynamicActiveClustersItem) {
    if (this.dynamicActiveClusters == null) {
      this.dynamicActiveClusters = new ArrayList<>();
    }
    this.dynamicActiveClusters.add(dynamicActiveClustersItem);
    return this;
  }

  /**
   * The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.
   * @return dynamicActiveClusters
   */
  @javax.annotation.Nullable
  public List<DynamicCluster> getDynamicActiveClusters() {
    return dynamicActiveClusters;
  }

  public void setDynamicActiveClusters(List<DynamicCluster> dynamicActiveClusters) {
    this.dynamicActiveClusters = dynamicActiveClusters;
  }


  public ClustersConfigDump dynamicWarmingClusters(List<DynamicCluster> dynamicWarmingClusters) {
    this.dynamicWarmingClusters = dynamicWarmingClusters;
    return this;
  }

  public ClustersConfigDump addDynamicWarmingClustersItem(DynamicCluster dynamicWarmingClustersItem) {
    if (this.dynamicWarmingClusters == null) {
      this.dynamicWarmingClusters = new ArrayList<>();
    }
    this.dynamicWarmingClusters.add(dynamicWarmingClustersItem);
    return this;
  }

  /**
   * The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.
   * @return dynamicWarmingClusters
   */
  @javax.annotation.Nullable
  public List<DynamicCluster> getDynamicWarmingClusters() {
    return dynamicWarmingClusters;
  }

  public void setDynamicWarmingClusters(List<DynamicCluster> dynamicWarmingClusters) {
    this.dynamicWarmingClusters = dynamicWarmingClusters;
  }


  public ClustersConfigDump staticClusters(List<StaticCluster> staticClusters) {
    this.staticClusters = staticClusters;
    return this;
  }

  public ClustersConfigDump addStaticClustersItem(StaticCluster staticClustersItem) {
    if (this.staticClusters == null) {
      this.staticClusters = new ArrayList<>();
    }
    this.staticClusters.add(staticClustersItem);
    return this;
  }

  /**
   * The statically loaded cluster configs.
   * @return staticClusters
   */
  @javax.annotation.Nullable
  public List<StaticCluster> getStaticClusters() {
    return staticClusters;
  }

  public void setStaticClusters(List<StaticCluster> staticClusters) {
    this.staticClusters = staticClusters;
  }


  public ClustersConfigDump versionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * This is the :ref:&#x60;version_info &#x60; in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be \&quot;\&quot;.
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public String getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClustersConfigDump clustersConfigDump = (ClustersConfigDump) o;
    return Objects.equals(this.dynamicActiveClusters, clustersConfigDump.dynamicActiveClusters) &&
        Objects.equals(this.dynamicWarmingClusters, clustersConfigDump.dynamicWarmingClusters) &&
        Objects.equals(this.staticClusters, clustersConfigDump.staticClusters) &&
        Objects.equals(this.versionInfo, clustersConfigDump.versionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicActiveClusters, dynamicWarmingClusters, staticClusters, versionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClustersConfigDump {\n");
    sb.append("    dynamicActiveClusters: ").append(toIndentedString(dynamicActiveClusters)).append("\n");
    sb.append("    dynamicWarmingClusters: ").append(toIndentedString(dynamicWarmingClusters)).append("\n");
    sb.append("    staticClusters: ").append(toIndentedString(staticClusters)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicActiveClusters");
    openapiFields.add("dynamicWarmingClusters");
    openapiFields.add("staticClusters");
    openapiFields.add("versionInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClustersConfigDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClustersConfigDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClustersConfigDump is not found in the empty JSON string", ClustersConfigDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClustersConfigDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClustersConfigDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicActiveClusters") != null && !jsonObj.get("dynamicActiveClusters").isJsonNull()) {
        JsonArray jsonArraydynamicActiveClusters = jsonObj.getAsJsonArray("dynamicActiveClusters");
        if (jsonArraydynamicActiveClusters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicActiveClusters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicActiveClusters` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicActiveClusters").toString()));
          }

          // validate the optional field `dynamicActiveClusters` (array)
          for (int i = 0; i < jsonArraydynamicActiveClusters.size(); i++) {
            DynamicCluster.validateJsonElement(jsonArraydynamicActiveClusters.get(i));
          };
        }
      }
      if (jsonObj.get("dynamicWarmingClusters") != null && !jsonObj.get("dynamicWarmingClusters").isJsonNull()) {
        JsonArray jsonArraydynamicWarmingClusters = jsonObj.getAsJsonArray("dynamicWarmingClusters");
        if (jsonArraydynamicWarmingClusters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicWarmingClusters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicWarmingClusters` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicWarmingClusters").toString()));
          }

          // validate the optional field `dynamicWarmingClusters` (array)
          for (int i = 0; i < jsonArraydynamicWarmingClusters.size(); i++) {
            DynamicCluster.validateJsonElement(jsonArraydynamicWarmingClusters.get(i));
          };
        }
      }
      if (jsonObj.get("staticClusters") != null && !jsonObj.get("staticClusters").isJsonNull()) {
        JsonArray jsonArraystaticClusters = jsonObj.getAsJsonArray("staticClusters");
        if (jsonArraystaticClusters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staticClusters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staticClusters` to be an array in the JSON string but got `%s`", jsonObj.get("staticClusters").toString()));
          }

          // validate the optional field `staticClusters` (array)
          for (int i = 0; i < jsonArraystaticClusters.size(); i++) {
            StaticCluster.validateJsonElement(jsonArraystaticClusters.get(i));
          };
        }
      }
      if ((jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) && !jsonObj.get("versionInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClustersConfigDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClustersConfigDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClustersConfigDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClustersConfigDump.class));

       return (TypeAdapter<T>) new TypeAdapter<ClustersConfigDump>() {
           @Override
           public void write(JsonWriter out, ClustersConfigDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClustersConfigDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClustersConfigDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClustersConfigDump
   * @throws IOException if the JSON string is invalid with respect to ClustersConfigDump
   */
  public static ClustersConfigDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClustersConfigDump.class);
  }

  /**
   * Convert an instance of ClustersConfigDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

