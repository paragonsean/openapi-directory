/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicRouteConfig;
import org.openapitools.client.model.StaticRouteConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Envoy&#39;s RDS implementation fills this message with all currently loaded routes, as described by their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration or defined inline while configuring listeners are separated from those configured dynamically via RDS. Route configuration information can be used to recreate an Envoy configuration by populating all routes as static routes or by returning them in RDS responses.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutesConfigDump {
  public static final String SERIALIZED_NAME_DYNAMIC_ROUTE_CONFIGS = "dynamicRouteConfigs";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_ROUTE_CONFIGS)
  private List<DynamicRouteConfig> dynamicRouteConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_ROUTE_CONFIGS = "staticRouteConfigs";
  @SerializedName(SERIALIZED_NAME_STATIC_ROUTE_CONFIGS)
  private List<StaticRouteConfig> staticRouteConfigs = new ArrayList<>();

  public RoutesConfigDump() {
  }

  public RoutesConfigDump dynamicRouteConfigs(List<DynamicRouteConfig> dynamicRouteConfigs) {
    this.dynamicRouteConfigs = dynamicRouteConfigs;
    return this;
  }

  public RoutesConfigDump addDynamicRouteConfigsItem(DynamicRouteConfig dynamicRouteConfigsItem) {
    if (this.dynamicRouteConfigs == null) {
      this.dynamicRouteConfigs = new ArrayList<>();
    }
    this.dynamicRouteConfigs.add(dynamicRouteConfigsItem);
    return this;
  }

  /**
   * The dynamically loaded route configs.
   * @return dynamicRouteConfigs
   */
  @javax.annotation.Nullable
  public List<DynamicRouteConfig> getDynamicRouteConfigs() {
    return dynamicRouteConfigs;
  }

  public void setDynamicRouteConfigs(List<DynamicRouteConfig> dynamicRouteConfigs) {
    this.dynamicRouteConfigs = dynamicRouteConfigs;
  }


  public RoutesConfigDump staticRouteConfigs(List<StaticRouteConfig> staticRouteConfigs) {
    this.staticRouteConfigs = staticRouteConfigs;
    return this;
  }

  public RoutesConfigDump addStaticRouteConfigsItem(StaticRouteConfig staticRouteConfigsItem) {
    if (this.staticRouteConfigs == null) {
      this.staticRouteConfigs = new ArrayList<>();
    }
    this.staticRouteConfigs.add(staticRouteConfigsItem);
    return this;
  }

  /**
   * The statically loaded route configs.
   * @return staticRouteConfigs
   */
  @javax.annotation.Nullable
  public List<StaticRouteConfig> getStaticRouteConfigs() {
    return staticRouteConfigs;
  }

  public void setStaticRouteConfigs(List<StaticRouteConfig> staticRouteConfigs) {
    this.staticRouteConfigs = staticRouteConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutesConfigDump routesConfigDump = (RoutesConfigDump) o;
    return Objects.equals(this.dynamicRouteConfigs, routesConfigDump.dynamicRouteConfigs) &&
        Objects.equals(this.staticRouteConfigs, routesConfigDump.staticRouteConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicRouteConfigs, staticRouteConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutesConfigDump {\n");
    sb.append("    dynamicRouteConfigs: ").append(toIndentedString(dynamicRouteConfigs)).append("\n");
    sb.append("    staticRouteConfigs: ").append(toIndentedString(staticRouteConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicRouteConfigs");
    openapiFields.add("staticRouteConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutesConfigDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutesConfigDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutesConfigDump is not found in the empty JSON string", RoutesConfigDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutesConfigDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutesConfigDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicRouteConfigs") != null && !jsonObj.get("dynamicRouteConfigs").isJsonNull()) {
        JsonArray jsonArraydynamicRouteConfigs = jsonObj.getAsJsonArray("dynamicRouteConfigs");
        if (jsonArraydynamicRouteConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicRouteConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicRouteConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicRouteConfigs").toString()));
          }

          // validate the optional field `dynamicRouteConfigs` (array)
          for (int i = 0; i < jsonArraydynamicRouteConfigs.size(); i++) {
            DynamicRouteConfig.validateJsonElement(jsonArraydynamicRouteConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("staticRouteConfigs") != null && !jsonObj.get("staticRouteConfigs").isJsonNull()) {
        JsonArray jsonArraystaticRouteConfigs = jsonObj.getAsJsonArray("staticRouteConfigs");
        if (jsonArraystaticRouteConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staticRouteConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staticRouteConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("staticRouteConfigs").toString()));
          }

          // validate the optional field `staticRouteConfigs` (array)
          for (int i = 0; i < jsonArraystaticRouteConfigs.size(); i++) {
            StaticRouteConfig.validateJsonElement(jsonArraystaticRouteConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutesConfigDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutesConfigDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutesConfigDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutesConfigDump.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutesConfigDump>() {
           @Override
           public void write(JsonWriter out, RoutesConfigDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutesConfigDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutesConfigDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutesConfigDump
   * @throws IOException if the JSON string is invalid with respect to RoutesConfigDump
   */
  public static RoutesConfigDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutesConfigDump.class);
  }

  /**
   * Convert an instance of RoutesConfigDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

