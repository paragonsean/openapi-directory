/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicScopedRouteConfigs;
import org.openapitools.client.model.InlineScopedRouteConfigs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Envoy&#39;s scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScopedRoutesConfigDump {
  public static final String SERIALIZED_NAME_DYNAMIC_SCOPED_ROUTE_CONFIGS = "dynamicScopedRouteConfigs";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SCOPED_ROUTE_CONFIGS)
  private List<DynamicScopedRouteConfigs> dynamicScopedRouteConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_INLINE_SCOPED_ROUTE_CONFIGS = "inlineScopedRouteConfigs";
  @SerializedName(SERIALIZED_NAME_INLINE_SCOPED_ROUTE_CONFIGS)
  private List<InlineScopedRouteConfigs> inlineScopedRouteConfigs = new ArrayList<>();

  public ScopedRoutesConfigDump() {
  }

  public ScopedRoutesConfigDump dynamicScopedRouteConfigs(List<DynamicScopedRouteConfigs> dynamicScopedRouteConfigs) {
    this.dynamicScopedRouteConfigs = dynamicScopedRouteConfigs;
    return this;
  }

  public ScopedRoutesConfigDump addDynamicScopedRouteConfigsItem(DynamicScopedRouteConfigs dynamicScopedRouteConfigsItem) {
    if (this.dynamicScopedRouteConfigs == null) {
      this.dynamicScopedRouteConfigs = new ArrayList<>();
    }
    this.dynamicScopedRouteConfigs.add(dynamicScopedRouteConfigsItem);
    return this;
  }

  /**
   * The dynamically loaded scoped route configs.
   * @return dynamicScopedRouteConfigs
   */
  @javax.annotation.Nullable
  public List<DynamicScopedRouteConfigs> getDynamicScopedRouteConfigs() {
    return dynamicScopedRouteConfigs;
  }

  public void setDynamicScopedRouteConfigs(List<DynamicScopedRouteConfigs> dynamicScopedRouteConfigs) {
    this.dynamicScopedRouteConfigs = dynamicScopedRouteConfigs;
  }


  public ScopedRoutesConfigDump inlineScopedRouteConfigs(List<InlineScopedRouteConfigs> inlineScopedRouteConfigs) {
    this.inlineScopedRouteConfigs = inlineScopedRouteConfigs;
    return this;
  }

  public ScopedRoutesConfigDump addInlineScopedRouteConfigsItem(InlineScopedRouteConfigs inlineScopedRouteConfigsItem) {
    if (this.inlineScopedRouteConfigs == null) {
      this.inlineScopedRouteConfigs = new ArrayList<>();
    }
    this.inlineScopedRouteConfigs.add(inlineScopedRouteConfigsItem);
    return this;
  }

  /**
   * The statically loaded scoped route configs.
   * @return inlineScopedRouteConfigs
   */
  @javax.annotation.Nullable
  public List<InlineScopedRouteConfigs> getInlineScopedRouteConfigs() {
    return inlineScopedRouteConfigs;
  }

  public void setInlineScopedRouteConfigs(List<InlineScopedRouteConfigs> inlineScopedRouteConfigs) {
    this.inlineScopedRouteConfigs = inlineScopedRouteConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScopedRoutesConfigDump scopedRoutesConfigDump = (ScopedRoutesConfigDump) o;
    return Objects.equals(this.dynamicScopedRouteConfigs, scopedRoutesConfigDump.dynamicScopedRouteConfigs) &&
        Objects.equals(this.inlineScopedRouteConfigs, scopedRoutesConfigDump.inlineScopedRouteConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicScopedRouteConfigs, inlineScopedRouteConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScopedRoutesConfigDump {\n");
    sb.append("    dynamicScopedRouteConfigs: ").append(toIndentedString(dynamicScopedRouteConfigs)).append("\n");
    sb.append("    inlineScopedRouteConfigs: ").append(toIndentedString(inlineScopedRouteConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicScopedRouteConfigs");
    openapiFields.add("inlineScopedRouteConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScopedRoutesConfigDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScopedRoutesConfigDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScopedRoutesConfigDump is not found in the empty JSON string", ScopedRoutesConfigDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScopedRoutesConfigDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScopedRoutesConfigDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicScopedRouteConfigs") != null && !jsonObj.get("dynamicScopedRouteConfigs").isJsonNull()) {
        JsonArray jsonArraydynamicScopedRouteConfigs = jsonObj.getAsJsonArray("dynamicScopedRouteConfigs");
        if (jsonArraydynamicScopedRouteConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicScopedRouteConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicScopedRouteConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicScopedRouteConfigs").toString()));
          }

          // validate the optional field `dynamicScopedRouteConfigs` (array)
          for (int i = 0; i < jsonArraydynamicScopedRouteConfigs.size(); i++) {
            DynamicScopedRouteConfigs.validateJsonElement(jsonArraydynamicScopedRouteConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("inlineScopedRouteConfigs") != null && !jsonObj.get("inlineScopedRouteConfigs").isJsonNull()) {
        JsonArray jsonArrayinlineScopedRouteConfigs = jsonObj.getAsJsonArray("inlineScopedRouteConfigs");
        if (jsonArrayinlineScopedRouteConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inlineScopedRouteConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inlineScopedRouteConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("inlineScopedRouteConfigs").toString()));
          }

          // validate the optional field `inlineScopedRouteConfigs` (array)
          for (int i = 0; i < jsonArrayinlineScopedRouteConfigs.size(); i++) {
            InlineScopedRouteConfigs.validateJsonElement(jsonArrayinlineScopedRouteConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScopedRoutesConfigDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScopedRoutesConfigDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScopedRoutesConfigDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScopedRoutesConfigDump.class));

       return (TypeAdapter<T>) new TypeAdapter<ScopedRoutesConfigDump>() {
           @Override
           public void write(JsonWriter out, ScopedRoutesConfigDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScopedRoutesConfigDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScopedRoutesConfigDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScopedRoutesConfigDump
   * @throws IOException if the JSON string is invalid with respect to ScopedRoutesConfigDump
   */
  public static ScopedRoutesConfigDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScopedRoutesConfigDump.class);
  }

  /**
   * Convert an instance of ScopedRoutesConfigDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

