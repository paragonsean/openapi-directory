/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DoubleMatcher;
import org.openapitools.client.model.ListMatcher;
import org.openapitools.client.model.StringMatcher;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 7]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValueMatcher {
  public static final String SERIALIZED_NAME_BOOL_MATCH = "boolMatch";
  @SerializedName(SERIALIZED_NAME_BOOL_MATCH)
  private Boolean boolMatch;

  public static final String SERIALIZED_NAME_DOUBLE_MATCH = "doubleMatch";
  @SerializedName(SERIALIZED_NAME_DOUBLE_MATCH)
  private DoubleMatcher doubleMatch;

  public static final String SERIALIZED_NAME_LIST_MATCH = "listMatch";
  @SerializedName(SERIALIZED_NAME_LIST_MATCH)
  private ListMatcher listMatch;

  public static final String SERIALIZED_NAME_NULL_MATCH = "nullMatch";
  @SerializedName(SERIALIZED_NAME_NULL_MATCH)
  private Object nullMatch;

  public static final String SERIALIZED_NAME_PRESENT_MATCH = "presentMatch";
  @SerializedName(SERIALIZED_NAME_PRESENT_MATCH)
  private Boolean presentMatch;

  public static final String SERIALIZED_NAME_STRING_MATCH = "stringMatch";
  @SerializedName(SERIALIZED_NAME_STRING_MATCH)
  private StringMatcher stringMatch;

  public ValueMatcher() {
  }

  public ValueMatcher boolMatch(Boolean boolMatch) {
    this.boolMatch = boolMatch;
    return this;
  }

  /**
   * If specified, a match occurs if and only if the target value is a bool value and is equal to this field.
   * @return boolMatch
   */
  @javax.annotation.Nullable
  public Boolean getBoolMatch() {
    return boolMatch;
  }

  public void setBoolMatch(Boolean boolMatch) {
    this.boolMatch = boolMatch;
  }


  public ValueMatcher doubleMatch(DoubleMatcher doubleMatch) {
    this.doubleMatch = doubleMatch;
    return this;
  }

  /**
   * Get doubleMatch
   * @return doubleMatch
   */
  @javax.annotation.Nullable
  public DoubleMatcher getDoubleMatch() {
    return doubleMatch;
  }

  public void setDoubleMatch(DoubleMatcher doubleMatch) {
    this.doubleMatch = doubleMatch;
  }


  public ValueMatcher listMatch(ListMatcher listMatch) {
    this.listMatch = listMatch;
    return this;
  }

  /**
   * Get listMatch
   * @return listMatch
   */
  @javax.annotation.Nullable
  public ListMatcher getListMatch() {
    return listMatch;
  }

  public void setListMatch(ListMatcher listMatch) {
    this.listMatch = listMatch;
  }


  public ValueMatcher nullMatch(Object nullMatch) {
    this.nullMatch = nullMatch;
    return this;
  }

  /**
   * NullMatch is an empty message to specify a null value.
   * @return nullMatch
   */
  @javax.annotation.Nullable
  public Object getNullMatch() {
    return nullMatch;
  }

  public void setNullMatch(Object nullMatch) {
    this.nullMatch = nullMatch;
  }


  public ValueMatcher presentMatch(Boolean presentMatch) {
    this.presentMatch = presentMatch;
    return this;
  }

  /**
   * If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.
   * @return presentMatch
   */
  @javax.annotation.Nullable
  public Boolean getPresentMatch() {
    return presentMatch;
  }

  public void setPresentMatch(Boolean presentMatch) {
    this.presentMatch = presentMatch;
  }


  public ValueMatcher stringMatch(StringMatcher stringMatch) {
    this.stringMatch = stringMatch;
    return this;
  }

  /**
   * Get stringMatch
   * @return stringMatch
   */
  @javax.annotation.Nullable
  public StringMatcher getStringMatch() {
    return stringMatch;
  }

  public void setStringMatch(StringMatcher stringMatch) {
    this.stringMatch = stringMatch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValueMatcher valueMatcher = (ValueMatcher) o;
    return Objects.equals(this.boolMatch, valueMatcher.boolMatch) &&
        Objects.equals(this.doubleMatch, valueMatcher.doubleMatch) &&
        Objects.equals(this.listMatch, valueMatcher.listMatch) &&
        Objects.equals(this.nullMatch, valueMatcher.nullMatch) &&
        Objects.equals(this.presentMatch, valueMatcher.presentMatch) &&
        Objects.equals(this.stringMatch, valueMatcher.stringMatch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolMatch, doubleMatch, listMatch, nullMatch, presentMatch, stringMatch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValueMatcher {\n");
    sb.append("    boolMatch: ").append(toIndentedString(boolMatch)).append("\n");
    sb.append("    doubleMatch: ").append(toIndentedString(doubleMatch)).append("\n");
    sb.append("    listMatch: ").append(toIndentedString(listMatch)).append("\n");
    sb.append("    nullMatch: ").append(toIndentedString(nullMatch)).append("\n");
    sb.append("    presentMatch: ").append(toIndentedString(presentMatch)).append("\n");
    sb.append("    stringMatch: ").append(toIndentedString(stringMatch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolMatch");
    openapiFields.add("doubleMatch");
    openapiFields.add("listMatch");
    openapiFields.add("nullMatch");
    openapiFields.add("presentMatch");
    openapiFields.add("stringMatch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValueMatcher
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValueMatcher.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValueMatcher is not found in the empty JSON string", ValueMatcher.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValueMatcher.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValueMatcher` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `doubleMatch`
      if (jsonObj.get("doubleMatch") != null && !jsonObj.get("doubleMatch").isJsonNull()) {
        DoubleMatcher.validateJsonElement(jsonObj.get("doubleMatch"));
      }
      // validate the optional field `listMatch`
      if (jsonObj.get("listMatch") != null && !jsonObj.get("listMatch").isJsonNull()) {
        ListMatcher.validateJsonElement(jsonObj.get("listMatch"));
      }
      // validate the optional field `stringMatch`
      if (jsonObj.get("stringMatch") != null && !jsonObj.get("stringMatch").isJsonNull()) {
        StringMatcher.validateJsonElement(jsonObj.get("stringMatch"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValueMatcher.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValueMatcher' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValueMatcher> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValueMatcher.class));

       return (TypeAdapter<T>) new TypeAdapter<ValueMatcher>() {
           @Override
           public void write(JsonWriter out, ValueMatcher value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValueMatcher read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValueMatcher given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValueMatcher
   * @throws IOException if the JSON string is invalid with respect to ValueMatcher
   */
  public static ValueMatcher fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValueMatcher.class);
  }

  /**
   * Convert an instance of ValueMatcher to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

