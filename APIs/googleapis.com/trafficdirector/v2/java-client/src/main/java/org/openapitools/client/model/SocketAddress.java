/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [#next-free-field: 7]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SocketAddress {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_IPV4_COMPAT = "ipv4Compat";
  @SerializedName(SERIALIZED_NAME_IPV4_COMPAT)
  private Boolean ipv4Compat;

  public static final String SERIALIZED_NAME_NAMED_PORT = "namedPort";
  @SerializedName(SERIALIZED_NAME_NAMED_PORT)
  private String namedPort;

  public static final String SERIALIZED_NAME_PORT_VALUE = "portValue";
  @SerializedName(SERIALIZED_NAME_PORT_VALUE)
  private Integer portValue;

  /**
   * Gets or Sets protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    TCP("TCP"),
    
    UDP("UDP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_RESOLVER_NAME = "resolverName";
  @SerializedName(SERIALIZED_NAME_RESOLVER_NAME)
  private String resolverName;

  public SocketAddress() {
  }

  public SocketAddress address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The address for this socket. :ref:&#x60;Listeners &#x60; will bind to the address. An empty address is not allowed. Specify &#x60;&#x60;0.0.0.0&#x60;&#x60; or &#x60;&#x60;::&#x60;&#x60; to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:&#x60;FilterChainMatch &#x60;.] When used within an upstream :ref:&#x60;BindConfig &#x60;, the address controls the source address of outbound connections. For :ref:&#x60;clusters &#x60;, the cluster type determines whether the address must be an IP (*STATIC* or *EDS* clusters) or a hostname resolved by DNS (*STRICT_DNS* or *LOGICAL_DNS* clusters). Address resolution can be customized via :ref:&#x60;resolver_name &#x60;.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public SocketAddress ipv4Compat(Boolean ipv4Compat) {
    this.ipv4Compat = ipv4Compat;
    return this;
  }

  /**
   * When binding to an IPv6 address above, this enables &#x60;IPv4 compatibility &#x60;_. Binding to &#x60;&#x60;::&#x60;&#x60; will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as &#x60;&#x60;::FFFF:&#x60;&#x60;.
   * @return ipv4Compat
   */
  @javax.annotation.Nullable
  public Boolean getIpv4Compat() {
    return ipv4Compat;
  }

  public void setIpv4Compat(Boolean ipv4Compat) {
    this.ipv4Compat = ipv4Compat;
  }


  public SocketAddress namedPort(String namedPort) {
    this.namedPort = namedPort;
    return this;
  }

  /**
   * This is only valid if :ref:&#x60;resolver_name &#x60; is specified below and the named resolver is capable of named port resolution.
   * @return namedPort
   */
  @javax.annotation.Nullable
  public String getNamedPort() {
    return namedPort;
  }

  public void setNamedPort(String namedPort) {
    this.namedPort = namedPort;
  }


  public SocketAddress portValue(Integer portValue) {
    this.portValue = portValue;
    return this;
  }

  /**
   * Get portValue
   * @return portValue
   */
  @javax.annotation.Nullable
  public Integer getPortValue() {
    return portValue;
  }

  public void setPortValue(Integer portValue) {
    this.portValue = portValue;
  }


  public SocketAddress protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public SocketAddress resolverName(String resolverName) {
    this.resolverName = resolverName;
    return this;
  }

  /**
   * The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with *STRICT_DNS* or *LOGICAL_DNS* will generate an error at runtime.
   * @return resolverName
   */
  @javax.annotation.Nullable
  public String getResolverName() {
    return resolverName;
  }

  public void setResolverName(String resolverName) {
    this.resolverName = resolverName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SocketAddress socketAddress = (SocketAddress) o;
    return Objects.equals(this.address, socketAddress.address) &&
        Objects.equals(this.ipv4Compat, socketAddress.ipv4Compat) &&
        Objects.equals(this.namedPort, socketAddress.namedPort) &&
        Objects.equals(this.portValue, socketAddress.portValue) &&
        Objects.equals(this.protocol, socketAddress.protocol) &&
        Objects.equals(this.resolverName, socketAddress.resolverName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, ipv4Compat, namedPort, portValue, protocol, resolverName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SocketAddress {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    ipv4Compat: ").append(toIndentedString(ipv4Compat)).append("\n");
    sb.append("    namedPort: ").append(toIndentedString(namedPort)).append("\n");
    sb.append("    portValue: ").append(toIndentedString(portValue)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    resolverName: ").append(toIndentedString(resolverName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("ipv4Compat");
    openapiFields.add("namedPort");
    openapiFields.add("portValue");
    openapiFields.add("protocol");
    openapiFields.add("resolverName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SocketAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SocketAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SocketAddress is not found in the empty JSON string", SocketAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SocketAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SocketAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("namedPort") != null && !jsonObj.get("namedPort").isJsonNull()) && !jsonObj.get("namedPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namedPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namedPort").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("resolverName") != null && !jsonObj.get("resolverName").isJsonNull()) && !jsonObj.get("resolverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolverName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SocketAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SocketAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SocketAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SocketAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<SocketAddress>() {
           @Override
           public void write(JsonWriter out, SocketAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SocketAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SocketAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SocketAddress
   * @throws IOException if the JSON string is invalid with respect to SocketAddress
   */
  public static SocketAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SocketAddress.class);
  }

  /**
   * Convert an instance of SocketAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

