/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicListener;
import org.openapitools.client.model.StaticListener;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Envoy&#39;s listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:32.510769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListenersConfigDump {
  public static final String SERIALIZED_NAME_DYNAMIC_LISTENERS = "dynamicListeners";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_LISTENERS)
  private List<DynamicListener> dynamicListeners = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_LISTENERS = "staticListeners";
  @SerializedName(SERIALIZED_NAME_STATIC_LISTENERS)
  private List<StaticListener> staticListeners = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private String versionInfo;

  public ListenersConfigDump() {
  }

  public ListenersConfigDump dynamicListeners(List<DynamicListener> dynamicListeners) {
    this.dynamicListeners = dynamicListeners;
    return this;
  }

  public ListenersConfigDump addDynamicListenersItem(DynamicListener dynamicListenersItem) {
    if (this.dynamicListeners == null) {
      this.dynamicListeners = new ArrayList<>();
    }
    this.dynamicListeners.add(dynamicListenersItem);
    return this;
  }

  /**
   * State for any warming, active, or draining listeners.
   * @return dynamicListeners
   */
  @javax.annotation.Nullable
  public List<DynamicListener> getDynamicListeners() {
    return dynamicListeners;
  }

  public void setDynamicListeners(List<DynamicListener> dynamicListeners) {
    this.dynamicListeners = dynamicListeners;
  }


  public ListenersConfigDump staticListeners(List<StaticListener> staticListeners) {
    this.staticListeners = staticListeners;
    return this;
  }

  public ListenersConfigDump addStaticListenersItem(StaticListener staticListenersItem) {
    if (this.staticListeners == null) {
      this.staticListeners = new ArrayList<>();
    }
    this.staticListeners.add(staticListenersItem);
    return this;
  }

  /**
   * The statically loaded listener configs.
   * @return staticListeners
   */
  @javax.annotation.Nullable
  public List<StaticListener> getStaticListeners() {
    return staticListeners;
  }

  public void setStaticListeners(List<StaticListener> staticListeners) {
    this.staticListeners = staticListeners;
  }


  public ListenersConfigDump versionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * This is the :ref:&#x60;version_info &#x60; in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be \&quot;\&quot;.
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public String getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListenersConfigDump listenersConfigDump = (ListenersConfigDump) o;
    return Objects.equals(this.dynamicListeners, listenersConfigDump.dynamicListeners) &&
        Objects.equals(this.staticListeners, listenersConfigDump.staticListeners) &&
        Objects.equals(this.versionInfo, listenersConfigDump.versionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicListeners, staticListeners, versionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListenersConfigDump {\n");
    sb.append("    dynamicListeners: ").append(toIndentedString(dynamicListeners)).append("\n");
    sb.append("    staticListeners: ").append(toIndentedString(staticListeners)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicListeners");
    openapiFields.add("staticListeners");
    openapiFields.add("versionInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListenersConfigDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListenersConfigDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListenersConfigDump is not found in the empty JSON string", ListenersConfigDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListenersConfigDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListenersConfigDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicListeners") != null && !jsonObj.get("dynamicListeners").isJsonNull()) {
        JsonArray jsonArraydynamicListeners = jsonObj.getAsJsonArray("dynamicListeners");
        if (jsonArraydynamicListeners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicListeners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicListeners` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicListeners").toString()));
          }

          // validate the optional field `dynamicListeners` (array)
          for (int i = 0; i < jsonArraydynamicListeners.size(); i++) {
            DynamicListener.validateJsonElement(jsonArraydynamicListeners.get(i));
          };
        }
      }
      if (jsonObj.get("staticListeners") != null && !jsonObj.get("staticListeners").isJsonNull()) {
        JsonArray jsonArraystaticListeners = jsonObj.getAsJsonArray("staticListeners");
        if (jsonArraystaticListeners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staticListeners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staticListeners` to be an array in the JSON string but got `%s`", jsonObj.get("staticListeners").toString()));
          }

          // validate the optional field `staticListeners` (array)
          for (int i = 0; i < jsonArraystaticListeners.size(); i++) {
            StaticListener.validateJsonElement(jsonArraystaticListeners.get(i));
          };
        }
      }
      if ((jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) && !jsonObj.get("versionInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListenersConfigDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListenersConfigDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListenersConfigDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListenersConfigDump.class));

       return (TypeAdapter<T>) new TypeAdapter<ListenersConfigDump>() {
           @Override
           public void write(JsonWriter out, ListenersConfigDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListenersConfigDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListenersConfigDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListenersConfigDump
   * @throws IOException if the JSON string is invalid with respect to ListenersConfigDump
   */
  public static ListenersConfigDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListenersConfigDump.class);
  }

  /**
   * Convert an instance of ListenersConfigDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

