/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenericXdsConfig from './GenericXdsConfig';
import Node from './Node';
import PerXdsConfig from './PerXdsConfig';

/**
 * The ClientConfig model module.
 * @module model/ClientConfig
 * @version v3
 */
class ClientConfig {
    /**
     * Constructs a new <code>ClientConfig</code>.
     * All xds configs for a particular client.
     * @alias module:model/ClientConfig
     */
    constructor() { 
        
        ClientConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClientConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClientConfig} obj Optional instance to populate.
     * @return {module:model/ClientConfig} The populated <code>ClientConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClientConfig();

            if (data.hasOwnProperty('clientScope')) {
                obj['clientScope'] = ApiClient.convertToType(data['clientScope'], 'String');
            }
            if (data.hasOwnProperty('genericXdsConfigs')) {
                obj['genericXdsConfigs'] = ApiClient.convertToType(data['genericXdsConfigs'], [GenericXdsConfig]);
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = Node.constructFromObject(data['node']);
            }
            if (data.hasOwnProperty('xdsConfig')) {
                obj['xdsConfig'] = ApiClient.convertToType(data['xdsConfig'], [PerXdsConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClientConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClientConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientScope'] && !(typeof data['clientScope'] === 'string' || data['clientScope'] instanceof String)) {
            throw new Error("Expected the field `clientScope` to be a primitive type in the JSON string but got " + data['clientScope']);
        }
        if (data['genericXdsConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['genericXdsConfigs'])) {
                throw new Error("Expected the field `genericXdsConfigs` to be an array in the JSON data but got " + data['genericXdsConfigs']);
            }
            // validate the optional field `genericXdsConfigs` (array)
            for (const item of data['genericXdsConfigs']) {
                GenericXdsConfig.validateJSON(item);
            };
        }
        // validate the optional field `node`
        if (data['node']) { // data not null
          Node.validateJSON(data['node']);
        }
        if (data['xdsConfig']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['xdsConfig'])) {
                throw new Error("Expected the field `xdsConfig` to be an array in the JSON data but got " + data['xdsConfig']);
            }
            // validate the optional field `xdsConfig` (array)
            for (const item of data['xdsConfig']) {
                PerXdsConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * For xDS clients, the scope in which the data is used. For example, gRPC indicates the data plane target or that the data is associated with gRPC server(s).
 * @member {String} clientScope
 */
ClientConfig.prototype['clientScope'] = undefined;

/**
 * Represents generic xDS config and the exact config structure depends on the type URL (like Cluster if it is CDS)
 * @member {Array.<module:model/GenericXdsConfig>} genericXdsConfigs
 */
ClientConfig.prototype['genericXdsConfigs'] = undefined;

/**
 * @member {module:model/Node} node
 */
ClientConfig.prototype['node'] = undefined;

/**
 * This field is deprecated in favor of generic_xds_configs which is much simpler and uniform in structure.
 * @member {Array.<module:model/PerXdsConfig>} xdsConfig
 */
ClientConfig.prototype['xdsConfig'] = undefined;






export default ClientConfig;

