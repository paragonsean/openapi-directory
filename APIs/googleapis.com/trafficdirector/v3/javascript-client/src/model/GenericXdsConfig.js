/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateFailureState from './UpdateFailureState';

/**
 * The GenericXdsConfig model module.
 * @module model/GenericXdsConfig
 * @version v3
 */
class GenericXdsConfig {
    /**
     * Constructs a new <code>GenericXdsConfig</code>.
     * GenericXdsConfig is used to specify the config status and the dump of any xDS resource identified by their type URL. It is the generalized version of the now deprecated ListenersConfigDump, ClustersConfigDump etc [#next-free-field: 10]
     * @alias module:model/GenericXdsConfig
     */
    constructor() { 
        
        GenericXdsConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GenericXdsConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenericXdsConfig} obj Optional instance to populate.
     * @return {module:model/GenericXdsConfig} The populated <code>GenericXdsConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenericXdsConfig();

            if (data.hasOwnProperty('clientStatus')) {
                obj['clientStatus'] = ApiClient.convertToType(data['clientStatus'], 'String');
            }
            if (data.hasOwnProperty('configStatus')) {
                obj['configStatus'] = ApiClient.convertToType(data['configStatus'], 'String');
            }
            if (data.hasOwnProperty('errorState')) {
                obj['errorState'] = UpdateFailureState.constructFromObject(data['errorState']);
            }
            if (data.hasOwnProperty('isStaticResource')) {
                obj['isStaticResource'] = ApiClient.convertToType(data['isStaticResource'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('typeUrl')) {
                obj['typeUrl'] = ApiClient.convertToType(data['typeUrl'], 'String');
            }
            if (data.hasOwnProperty('versionInfo')) {
                obj['versionInfo'] = ApiClient.convertToType(data['versionInfo'], 'String');
            }
            if (data.hasOwnProperty('xdsConfig')) {
                obj['xdsConfig'] = ApiClient.convertToType(data['xdsConfig'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenericXdsConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenericXdsConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientStatus'] && !(typeof data['clientStatus'] === 'string' || data['clientStatus'] instanceof String)) {
            throw new Error("Expected the field `clientStatus` to be a primitive type in the JSON string but got " + data['clientStatus']);
        }
        // ensure the json data is a string
        if (data['configStatus'] && !(typeof data['configStatus'] === 'string' || data['configStatus'] instanceof String)) {
            throw new Error("Expected the field `configStatus` to be a primitive type in the JSON string but got " + data['configStatus']);
        }
        // validate the optional field `errorState`
        if (data['errorState']) { // data not null
          UpdateFailureState.validateJSON(data['errorState']);
        }
        // ensure the json data is a string
        if (data['lastUpdated'] && !(typeof data['lastUpdated'] === 'string' || data['lastUpdated'] instanceof String)) {
            throw new Error("Expected the field `lastUpdated` to be a primitive type in the JSON string but got " + data['lastUpdated']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['typeUrl'] && !(typeof data['typeUrl'] === 'string' || data['typeUrl'] instanceof String)) {
            throw new Error("Expected the field `typeUrl` to be a primitive type in the JSON string but got " + data['typeUrl']);
        }
        // ensure the json data is a string
        if (data['versionInfo'] && !(typeof data['versionInfo'] === 'string' || data['versionInfo'] instanceof String)) {
            throw new Error("Expected the field `versionInfo` to be a primitive type in the JSON string but got " + data['versionInfo']);
        }

        return true;
    }


}



/**
 * Per xDS resource status from the view of a xDS client
 * @member {module:model/GenericXdsConfig.ClientStatusEnum} clientStatus
 */
GenericXdsConfig.prototype['clientStatus'] = undefined;

/**
 * Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.
 * @member {module:model/GenericXdsConfig.ConfigStatusEnum} configStatus
 */
GenericXdsConfig.prototype['configStatus'] = undefined;

/**
 * @member {module:model/UpdateFailureState} errorState
 */
GenericXdsConfig.prototype['errorState'] = undefined;

/**
 * Is static resource is true if it is specified in the config supplied through the file at the startup.
 * @member {Boolean} isStaticResource
 */
GenericXdsConfig.prototype['isStaticResource'] = undefined;

/**
 * Timestamp when the xDS resource was last updated
 * @member {String} lastUpdated
 */
GenericXdsConfig.prototype['lastUpdated'] = undefined;

/**
 * Name of the xDS resource
 * @member {String} name
 */
GenericXdsConfig.prototype['name'] = undefined;

/**
 * Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
 * @member {String} typeUrl
 */
GenericXdsConfig.prototype['typeUrl'] = undefined;

/**
 * This is the :ref:`version_info ` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \"\"
 * @member {String} versionInfo
 */
GenericXdsConfig.prototype['versionInfo'] = undefined;

/**
 * The xDS resource config. Actual content depends on the type
 * @member {Object.<String, Object>} xdsConfig
 */
GenericXdsConfig.prototype['xdsConfig'] = undefined;





/**
 * Allowed values for the <code>clientStatus</code> property.
 * @enum {String}
 * @readonly
 */
GenericXdsConfig['ClientStatusEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "REQUESTED"
     * @const
     */
    "REQUESTED": "REQUESTED",

    /**
     * value: "DOES_NOT_EXIST"
     * @const
     */
    "DOES_NOT_EXIST": "DOES_NOT_EXIST",

    /**
     * value: "ACKED"
     * @const
     */
    "ACKED": "ACKED",

    /**
     * value: "NACKED"
     * @const
     */
    "NACKED": "NACKED"
};


/**
 * Allowed values for the <code>configStatus</code> property.
 * @enum {String}
 * @readonly
 */
GenericXdsConfig['ConfigStatusEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "SYNCED"
     * @const
     */
    "SYNCED": "SYNCED",

    /**
     * value: "NOT_SENT"
     * @const
     */
    "NOT_SENT": "NOT_SENT",

    /**
     * value: "STALE"
     * @const
     */
    "STALE": "STALE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default GenericXdsConfig;

