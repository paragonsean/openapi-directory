/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClustersConfigDump from './ClustersConfigDump';
import EndpointsConfigDump from './EndpointsConfigDump';
import ListenersConfigDump from './ListenersConfigDump';
import RoutesConfigDump from './RoutesConfigDump';
import ScopedRoutesConfigDump from './ScopedRoutesConfigDump';

/**
 * The PerXdsConfig model module.
 * @module model/PerXdsConfig
 * @version v3
 */
class PerXdsConfig {
    /**
     * Constructs a new <code>PerXdsConfig</code>.
     * Detailed config (per xDS) with status. [#next-free-field: 8]
     * @alias module:model/PerXdsConfig
     */
    constructor() { 
        
        PerXdsConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PerXdsConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PerXdsConfig} obj Optional instance to populate.
     * @return {module:model/PerXdsConfig} The populated <code>PerXdsConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PerXdsConfig();

            if (data.hasOwnProperty('clientStatus')) {
                obj['clientStatus'] = ApiClient.convertToType(data['clientStatus'], 'String');
            }
            if (data.hasOwnProperty('clusterConfig')) {
                obj['clusterConfig'] = ClustersConfigDump.constructFromObject(data['clusterConfig']);
            }
            if (data.hasOwnProperty('endpointConfig')) {
                obj['endpointConfig'] = EndpointsConfigDump.constructFromObject(data['endpointConfig']);
            }
            if (data.hasOwnProperty('listenerConfig')) {
                obj['listenerConfig'] = ListenersConfigDump.constructFromObject(data['listenerConfig']);
            }
            if (data.hasOwnProperty('routeConfig')) {
                obj['routeConfig'] = RoutesConfigDump.constructFromObject(data['routeConfig']);
            }
            if (data.hasOwnProperty('scopedRouteConfig')) {
                obj['scopedRouteConfig'] = ScopedRoutesConfigDump.constructFromObject(data['scopedRouteConfig']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PerXdsConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PerXdsConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientStatus'] && !(typeof data['clientStatus'] === 'string' || data['clientStatus'] instanceof String)) {
            throw new Error("Expected the field `clientStatus` to be a primitive type in the JSON string but got " + data['clientStatus']);
        }
        // validate the optional field `clusterConfig`
        if (data['clusterConfig']) { // data not null
          ClustersConfigDump.validateJSON(data['clusterConfig']);
        }
        // validate the optional field `endpointConfig`
        if (data['endpointConfig']) { // data not null
          EndpointsConfigDump.validateJSON(data['endpointConfig']);
        }
        // validate the optional field `listenerConfig`
        if (data['listenerConfig']) { // data not null
          ListenersConfigDump.validateJSON(data['listenerConfig']);
        }
        // validate the optional field `routeConfig`
        if (data['routeConfig']) { // data not null
          RoutesConfigDump.validateJSON(data['routeConfig']);
        }
        // validate the optional field `scopedRouteConfig`
        if (data['scopedRouteConfig']) { // data not null
          ScopedRoutesConfigDump.validateJSON(data['scopedRouteConfig']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:`ClientResourceStatus ` for per-resource config status instead.
 * @member {module:model/PerXdsConfig.ClientStatusEnum} clientStatus
 */
PerXdsConfig.prototype['clientStatus'] = undefined;

/**
 * @member {module:model/ClustersConfigDump} clusterConfig
 */
PerXdsConfig.prototype['clusterConfig'] = undefined;

/**
 * @member {module:model/EndpointsConfigDump} endpointConfig
 */
PerXdsConfig.prototype['endpointConfig'] = undefined;

/**
 * @member {module:model/ListenersConfigDump} listenerConfig
 */
PerXdsConfig.prototype['listenerConfig'] = undefined;

/**
 * @member {module:model/RoutesConfigDump} routeConfig
 */
PerXdsConfig.prototype['routeConfig'] = undefined;

/**
 * @member {module:model/ScopedRoutesConfigDump} scopedRouteConfig
 */
PerXdsConfig.prototype['scopedRouteConfig'] = undefined;

/**
 * Config status generated by management servers. Will not be present if the CSDS server is an xDS client.
 * @member {module:model/PerXdsConfig.StatusEnum} status
 */
PerXdsConfig.prototype['status'] = undefined;





/**
 * Allowed values for the <code>clientStatus</code> property.
 * @enum {String}
 * @readonly
 */
PerXdsConfig['ClientStatusEnum'] = {

    /**
     * value: "CLIENT_UNKNOWN"
     * @const
     */
    "UNKNOWN": "CLIENT_UNKNOWN",

    /**
     * value: "CLIENT_REQUESTED"
     * @const
     */
    "REQUESTED": "CLIENT_REQUESTED",

    /**
     * value: "CLIENT_ACKED"
     * @const
     */
    "ACKED": "CLIENT_ACKED",

    /**
     * value: "CLIENT_NACKED"
     * @const
     */
    "NACKED": "CLIENT_NACKED"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PerXdsConfig['StatusEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "SYNCED"
     * @const
     */
    "SYNCED": "SYNCED",

    /**
     * value: "NOT_SENT"
     * @const
     */
    "NOT_SENT": "NOT_SENT",

    /**
     * value: "STALE"
     * @const
     */
    "STALE": "STALE",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default PerXdsConfig;

