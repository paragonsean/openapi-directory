/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PathSegment from './PathSegment';
import ValueMatcher from './ValueMatcher';

/**
 * The StructMatcher model module.
 * @module model/StructMatcher
 * @version v3
 */
class StructMatcher {
    /**
     * Constructs a new <code>StructMatcher</code>.
     * StructMatcher provides a general interface to check if a given value is matched in google.protobuf.Struct. It uses &#x60;&#x60;path&#x60;&#x60; to retrieve the value from the struct and then check if it&#39;s matched to the specified value. For example, for the following Struct: .. code-block:: yaml fields: a: struct_value: fields: b: struct_value: fields: c: string_value: pro t: list_value: values: - string_value: m - string_value: n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \&quot;pro\&quot; from the Metadata which is matched to the specified prefix match. .. code-block:: yaml path: - key: a - key: b - key: c value: string_match: prefix: pr The following StructMatcher is matched as the code will match one of the string values in the list at the path [a, t]. .. code-block:: yaml path: - key: a - key: t value: list_match: one_of: string_match: exact: m An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
     * @alias module:model/StructMatcher
     */
    constructor() { 
        
        StructMatcher.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StructMatcher</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StructMatcher} obj Optional instance to populate.
     * @return {module:model/StructMatcher} The populated <code>StructMatcher</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StructMatcher();

            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], [PathSegment]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ValueMatcher.constructFromObject(data['value']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StructMatcher</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StructMatcher</code>.
     */
    static validateJSON(data) {
        if (data['path']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['path'])) {
                throw new Error("Expected the field `path` to be an array in the JSON data but got " + data['path']);
            }
            // validate the optional field `path` (array)
            for (const item of data['path']) {
                PathSegment.validateJSON(item);
            };
        }
        // validate the optional field `value`
        if (data['value']) { // data not null
          ValueMatcher.validateJSON(data['value']);
        }

        return true;
    }


}



/**
 * The path to retrieve the Value from the Struct.
 * @member {Array.<module:model/PathSegment>} path
 */
StructMatcher.prototype['path'] = undefined;

/**
 * @member {module:model/ValueMatcher} value
 */
StructMatcher.prototype['value'] = undefined;






export default StructMatcher;

