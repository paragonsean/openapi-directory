/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContextParams.h
 *
 * Additional parameters that can be used to select resource variants. These include any global context parameters, per-resource type client feature capabilities and per-resource type functional attributes. All per-resource type attributes will be &#x60;xds.resource.&#x60; prefixed and some of these are documented below: &#x60;xds.resource.listening_address&#x60;: The value is \&quot;IP:port\&quot; (e.g. \&quot;10.1.1.3:8080\&quot;) which is the listening address of a Listener. Used in a Listener resource query.
 */

#ifndef OAIContextParams_H
#define OAIContextParams_H

#include <QJsonObject>

#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContextParams : public OAIObject {
public:
    OAIContextParams();
    OAIContextParams(QString json);
    ~OAIContextParams() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getParams() const;
    void setParams(const QMap<QString, QString> &params);
    bool is_params_Set() const;
    bool is_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_params;
    bool m_params_isSet;
    bool m_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContextParams)

#endif // OAIContextParams_H
