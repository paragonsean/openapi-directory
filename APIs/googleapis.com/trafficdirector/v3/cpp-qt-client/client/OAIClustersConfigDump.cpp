/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClustersConfigDump.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClustersConfigDump::OAIClustersConfigDump(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClustersConfigDump::OAIClustersConfigDump() {
    this->initializeModel();
}

OAIClustersConfigDump::~OAIClustersConfigDump() {}

void OAIClustersConfigDump::initializeModel() {

    m_dynamic_active_clusters_isSet = false;
    m_dynamic_active_clusters_isValid = false;

    m_dynamic_warming_clusters_isSet = false;
    m_dynamic_warming_clusters_isValid = false;

    m_static_clusters_isSet = false;
    m_static_clusters_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;
}

void OAIClustersConfigDump::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClustersConfigDump::fromJsonObject(QJsonObject json) {

    m_dynamic_active_clusters_isValid = ::OpenAPI::fromJsonValue(m_dynamic_active_clusters, json[QString("dynamicActiveClusters")]);
    m_dynamic_active_clusters_isSet = !json[QString("dynamicActiveClusters")].isNull() && m_dynamic_active_clusters_isValid;

    m_dynamic_warming_clusters_isValid = ::OpenAPI::fromJsonValue(m_dynamic_warming_clusters, json[QString("dynamicWarmingClusters")]);
    m_dynamic_warming_clusters_isSet = !json[QString("dynamicWarmingClusters")].isNull() && m_dynamic_warming_clusters_isValid;

    m_static_clusters_isValid = ::OpenAPI::fromJsonValue(m_static_clusters, json[QString("staticClusters")]);
    m_static_clusters_isSet = !json[QString("staticClusters")].isNull() && m_static_clusters_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;
}

QString OAIClustersConfigDump::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClustersConfigDump::asJsonObject() const {
    QJsonObject obj;
    if (m_dynamic_active_clusters.size() > 0) {
        obj.insert(QString("dynamicActiveClusters"), ::OpenAPI::toJsonValue(m_dynamic_active_clusters));
    }
    if (m_dynamic_warming_clusters.size() > 0) {
        obj.insert(QString("dynamicWarmingClusters"), ::OpenAPI::toJsonValue(m_dynamic_warming_clusters));
    }
    if (m_static_clusters.size() > 0) {
        obj.insert(QString("staticClusters"), ::OpenAPI::toJsonValue(m_static_clusters));
    }
    if (m_version_info_isSet) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    return obj;
}

QList<OAIDynamicCluster> OAIClustersConfigDump::getDynamicActiveClusters() const {
    return m_dynamic_active_clusters;
}
void OAIClustersConfigDump::setDynamicActiveClusters(const QList<OAIDynamicCluster> &dynamic_active_clusters) {
    m_dynamic_active_clusters = dynamic_active_clusters;
    m_dynamic_active_clusters_isSet = true;
}

bool OAIClustersConfigDump::is_dynamic_active_clusters_Set() const{
    return m_dynamic_active_clusters_isSet;
}

bool OAIClustersConfigDump::is_dynamic_active_clusters_Valid() const{
    return m_dynamic_active_clusters_isValid;
}

QList<OAIDynamicCluster> OAIClustersConfigDump::getDynamicWarmingClusters() const {
    return m_dynamic_warming_clusters;
}
void OAIClustersConfigDump::setDynamicWarmingClusters(const QList<OAIDynamicCluster> &dynamic_warming_clusters) {
    m_dynamic_warming_clusters = dynamic_warming_clusters;
    m_dynamic_warming_clusters_isSet = true;
}

bool OAIClustersConfigDump::is_dynamic_warming_clusters_Set() const{
    return m_dynamic_warming_clusters_isSet;
}

bool OAIClustersConfigDump::is_dynamic_warming_clusters_Valid() const{
    return m_dynamic_warming_clusters_isValid;
}

QList<OAIStaticCluster> OAIClustersConfigDump::getStaticClusters() const {
    return m_static_clusters;
}
void OAIClustersConfigDump::setStaticClusters(const QList<OAIStaticCluster> &static_clusters) {
    m_static_clusters = static_clusters;
    m_static_clusters_isSet = true;
}

bool OAIClustersConfigDump::is_static_clusters_Set() const{
    return m_static_clusters_isSet;
}

bool OAIClustersConfigDump::is_static_clusters_Valid() const{
    return m_static_clusters_isValid;
}

QString OAIClustersConfigDump::getVersionInfo() const {
    return m_version_info;
}
void OAIClustersConfigDump::setVersionInfo(const QString &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIClustersConfigDump::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIClustersConfigDump::is_version_info_Valid() const{
    return m_version_info_isValid;
}

bool OAIClustersConfigDump::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dynamic_active_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_warming_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_clusters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClustersConfigDump::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
