/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISocketAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISocketAddress::OAISocketAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISocketAddress::OAISocketAddress() {
    this->initializeModel();
}

OAISocketAddress::~OAISocketAddress() {}

void OAISocketAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_ipv4_compat_isSet = false;
    m_ipv4_compat_isValid = false;

    m_named_port_isSet = false;
    m_named_port_isValid = false;

    m_port_value_isSet = false;
    m_port_value_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_resolver_name_isSet = false;
    m_resolver_name_isValid = false;
}

void OAISocketAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISocketAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_ipv4_compat_isValid = ::OpenAPI::fromJsonValue(m_ipv4_compat, json[QString("ipv4Compat")]);
    m_ipv4_compat_isSet = !json[QString("ipv4Compat")].isNull() && m_ipv4_compat_isValid;

    m_named_port_isValid = ::OpenAPI::fromJsonValue(m_named_port, json[QString("namedPort")]);
    m_named_port_isSet = !json[QString("namedPort")].isNull() && m_named_port_isValid;

    m_port_value_isValid = ::OpenAPI::fromJsonValue(m_port_value, json[QString("portValue")]);
    m_port_value_isSet = !json[QString("portValue")].isNull() && m_port_value_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_resolver_name_isValid = ::OpenAPI::fromJsonValue(m_resolver_name, json[QString("resolverName")]);
    m_resolver_name_isSet = !json[QString("resolverName")].isNull() && m_resolver_name_isValid;
}

QString OAISocketAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISocketAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_ipv4_compat_isSet) {
        obj.insert(QString("ipv4Compat"), ::OpenAPI::toJsonValue(m_ipv4_compat));
    }
    if (m_named_port_isSet) {
        obj.insert(QString("namedPort"), ::OpenAPI::toJsonValue(m_named_port));
    }
    if (m_port_value_isSet) {
        obj.insert(QString("portValue"), ::OpenAPI::toJsonValue(m_port_value));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_resolver_name_isSet) {
        obj.insert(QString("resolverName"), ::OpenAPI::toJsonValue(m_resolver_name));
    }
    return obj;
}

QString OAISocketAddress::getAddress() const {
    return m_address;
}
void OAISocketAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAISocketAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAISocketAddress::is_address_Valid() const{
    return m_address_isValid;
}

bool OAISocketAddress::isIpv4Compat() const {
    return m_ipv4_compat;
}
void OAISocketAddress::setIpv4Compat(const bool &ipv4_compat) {
    m_ipv4_compat = ipv4_compat;
    m_ipv4_compat_isSet = true;
}

bool OAISocketAddress::is_ipv4_compat_Set() const{
    return m_ipv4_compat_isSet;
}

bool OAISocketAddress::is_ipv4_compat_Valid() const{
    return m_ipv4_compat_isValid;
}

QString OAISocketAddress::getNamedPort() const {
    return m_named_port;
}
void OAISocketAddress::setNamedPort(const QString &named_port) {
    m_named_port = named_port;
    m_named_port_isSet = true;
}

bool OAISocketAddress::is_named_port_Set() const{
    return m_named_port_isSet;
}

bool OAISocketAddress::is_named_port_Valid() const{
    return m_named_port_isValid;
}

qint32 OAISocketAddress::getPortValue() const {
    return m_port_value;
}
void OAISocketAddress::setPortValue(const qint32 &port_value) {
    m_port_value = port_value;
    m_port_value_isSet = true;
}

bool OAISocketAddress::is_port_value_Set() const{
    return m_port_value_isSet;
}

bool OAISocketAddress::is_port_value_Valid() const{
    return m_port_value_isValid;
}

QString OAISocketAddress::getProtocol() const {
    return m_protocol;
}
void OAISocketAddress::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISocketAddress::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISocketAddress::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAISocketAddress::getResolverName() const {
    return m_resolver_name;
}
void OAISocketAddress::setResolverName(const QString &resolver_name) {
    m_resolver_name = resolver_name;
    m_resolver_name_isSet = true;
}

bool OAISocketAddress::is_resolver_name_Set() const{
    return m_resolver_name_isSet;
}

bool OAISocketAddress::is_resolver_name_Valid() const{
    return m_resolver_name_isValid;
}

bool OAISocketAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_compat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_named_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolver_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISocketAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
