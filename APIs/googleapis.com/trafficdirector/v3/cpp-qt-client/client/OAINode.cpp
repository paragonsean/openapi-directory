/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_client_features_isSet = false;
    m_client_features_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_dynamic_parameters_isSet = false;
    m_dynamic_parameters_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_listening_addresses_isSet = false;
    m_listening_addresses_isValid = false;

    m_locality_isSet = false;
    m_locality_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_user_agent_build_version_isSet = false;
    m_user_agent_build_version_isValid = false;

    m_user_agent_name_isSet = false;
    m_user_agent_name_isValid = false;

    m_user_agent_version_isSet = false;
    m_user_agent_version_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_client_features_isValid = ::OpenAPI::fromJsonValue(m_client_features, json[QString("clientFeatures")]);
    m_client_features_isSet = !json[QString("clientFeatures")].isNull() && m_client_features_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_dynamic_parameters_isValid = ::OpenAPI::fromJsonValue(m_dynamic_parameters, json[QString("dynamicParameters")]);
    m_dynamic_parameters_isSet = !json[QString("dynamicParameters")].isNull() && m_dynamic_parameters_isValid;

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("extensions")]);
    m_extensions_isSet = !json[QString("extensions")].isNull() && m_extensions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_listening_addresses_isValid = ::OpenAPI::fromJsonValue(m_listening_addresses, json[QString("listeningAddresses")]);
    m_listening_addresses_isSet = !json[QString("listeningAddresses")].isNull() && m_listening_addresses_isValid;

    m_locality_isValid = ::OpenAPI::fromJsonValue(m_locality, json[QString("locality")]);
    m_locality_isSet = !json[QString("locality")].isNull() && m_locality_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_user_agent_build_version_isValid = ::OpenAPI::fromJsonValue(m_user_agent_build_version, json[QString("userAgentBuildVersion")]);
    m_user_agent_build_version_isSet = !json[QString("userAgentBuildVersion")].isNull() && m_user_agent_build_version_isValid;

    m_user_agent_name_isValid = ::OpenAPI::fromJsonValue(m_user_agent_name, json[QString("userAgentName")]);
    m_user_agent_name_isSet = !json[QString("userAgentName")].isNull() && m_user_agent_name_isValid;

    m_user_agent_version_isValid = ::OpenAPI::fromJsonValue(m_user_agent_version, json[QString("userAgentVersion")]);
    m_user_agent_version_isSet = !json[QString("userAgentVersion")].isNull() && m_user_agent_version_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_client_features.size() > 0) {
        obj.insert(QString("clientFeatures"), ::OpenAPI::toJsonValue(m_client_features));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_dynamic_parameters.size() > 0) {
        obj.insert(QString("dynamicParameters"), ::OpenAPI::toJsonValue(m_dynamic_parameters));
    }
    if (m_extensions.size() > 0) {
        obj.insert(QString("extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_listening_addresses.size() > 0) {
        obj.insert(QString("listeningAddresses"), ::OpenAPI::toJsonValue(m_listening_addresses));
    }
    if (m_locality.isSet()) {
        obj.insert(QString("locality"), ::OpenAPI::toJsonValue(m_locality));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_user_agent_build_version.isSet()) {
        obj.insert(QString("userAgentBuildVersion"), ::OpenAPI::toJsonValue(m_user_agent_build_version));
    }
    if (m_user_agent_name_isSet) {
        obj.insert(QString("userAgentName"), ::OpenAPI::toJsonValue(m_user_agent_name));
    }
    if (m_user_agent_version_isSet) {
        obj.insert(QString("userAgentVersion"), ::OpenAPI::toJsonValue(m_user_agent_version));
    }
    return obj;
}

QList<QString> OAINode::getClientFeatures() const {
    return m_client_features;
}
void OAINode::setClientFeatures(const QList<QString> &client_features) {
    m_client_features = client_features;
    m_client_features_isSet = true;
}

bool OAINode::is_client_features_Set() const{
    return m_client_features_isSet;
}

bool OAINode::is_client_features_Valid() const{
    return m_client_features_isValid;
}

QString OAINode::getCluster() const {
    return m_cluster;
}
void OAINode::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAINode::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAINode::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QMap<QString, OAIContextParams> OAINode::getDynamicParameters() const {
    return m_dynamic_parameters;
}
void OAINode::setDynamicParameters(const QMap<QString, OAIContextParams> &dynamic_parameters) {
    m_dynamic_parameters = dynamic_parameters;
    m_dynamic_parameters_isSet = true;
}

bool OAINode::is_dynamic_parameters_Set() const{
    return m_dynamic_parameters_isSet;
}

bool OAINode::is_dynamic_parameters_Valid() const{
    return m_dynamic_parameters_isValid;
}

QList<OAIExtension> OAINode::getExtensions() const {
    return m_extensions;
}
void OAINode::setExtensions(const QList<OAIExtension> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAINode::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAINode::is_extensions_Valid() const{
    return m_extensions_isValid;
}

QString OAINode::getId() const {
    return m_id;
}
void OAINode::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINode::is_id_Set() const{
    return m_id_isSet;
}

bool OAINode::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIAddress> OAINode::getListeningAddresses() const {
    return m_listening_addresses;
}
void OAINode::setListeningAddresses(const QList<OAIAddress> &listening_addresses) {
    m_listening_addresses = listening_addresses;
    m_listening_addresses_isSet = true;
}

bool OAINode::is_listening_addresses_Set() const{
    return m_listening_addresses_isSet;
}

bool OAINode::is_listening_addresses_Valid() const{
    return m_listening_addresses_isValid;
}

OAILocality OAINode::getLocality() const {
    return m_locality;
}
void OAINode::setLocality(const OAILocality &locality) {
    m_locality = locality;
    m_locality_isSet = true;
}

bool OAINode::is_locality_Set() const{
    return m_locality_isSet;
}

bool OAINode::is_locality_Valid() const{
    return m_locality_isValid;
}

QMap<QString, QJsonValue> OAINode::getMetadata() const {
    return m_metadata;
}
void OAINode::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAINode::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAINode::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIBuildVersion OAINode::getUserAgentBuildVersion() const {
    return m_user_agent_build_version;
}
void OAINode::setUserAgentBuildVersion(const OAIBuildVersion &user_agent_build_version) {
    m_user_agent_build_version = user_agent_build_version;
    m_user_agent_build_version_isSet = true;
}

bool OAINode::is_user_agent_build_version_Set() const{
    return m_user_agent_build_version_isSet;
}

bool OAINode::is_user_agent_build_version_Valid() const{
    return m_user_agent_build_version_isValid;
}

QString OAINode::getUserAgentName() const {
    return m_user_agent_name;
}
void OAINode::setUserAgentName(const QString &user_agent_name) {
    m_user_agent_name = user_agent_name;
    m_user_agent_name_isSet = true;
}

bool OAINode::is_user_agent_name_Set() const{
    return m_user_agent_name_isSet;
}

bool OAINode::is_user_agent_name_Valid() const{
    return m_user_agent_name_isValid;
}

QString OAINode::getUserAgentVersion() const {
    return m_user_agent_version;
}
void OAINode::setUserAgentVersion(const QString &user_agent_version) {
    m_user_agent_version = user_agent_version;
    m_user_agent_version_isSet = true;
}

bool OAINode::is_user_agent_version_Set() const{
    return m_user_agent_version_isSet;
}

bool OAINode::is_user_agent_version_Valid() const{
    return m_user_agent_version_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_listening_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_build_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
