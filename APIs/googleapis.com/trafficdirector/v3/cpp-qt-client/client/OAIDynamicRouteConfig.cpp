/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicRouteConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicRouteConfig::OAIDynamicRouteConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicRouteConfig::OAIDynamicRouteConfig() {
    this->initializeModel();
}

OAIDynamicRouteConfig::~OAIDynamicRouteConfig() {}

void OAIDynamicRouteConfig::initializeModel() {

    m_client_status_isSet = false;
    m_client_status_isValid = false;

    m_error_state_isSet = false;
    m_error_state_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_route_config_isSet = false;
    m_route_config_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;
}

void OAIDynamicRouteConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicRouteConfig::fromJsonObject(QJsonObject json) {

    m_client_status_isValid = ::OpenAPI::fromJsonValue(m_client_status, json[QString("clientStatus")]);
    m_client_status_isSet = !json[QString("clientStatus")].isNull() && m_client_status_isValid;

    m_error_state_isValid = ::OpenAPI::fromJsonValue(m_error_state, json[QString("errorState")]);
    m_error_state_isSet = !json[QString("errorState")].isNull() && m_error_state_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_route_config_isValid = ::OpenAPI::fromJsonValue(m_route_config, json[QString("routeConfig")]);
    m_route_config_isSet = !json[QString("routeConfig")].isNull() && m_route_config_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;
}

QString OAIDynamicRouteConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicRouteConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_status_isSet) {
        obj.insert(QString("clientStatus"), ::OpenAPI::toJsonValue(m_client_status));
    }
    if (m_error_state.isSet()) {
        obj.insert(QString("errorState"), ::OpenAPI::toJsonValue(m_error_state));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_route_config.size() > 0) {
        obj.insert(QString("routeConfig"), ::OpenAPI::toJsonValue(m_route_config));
    }
    if (m_version_info_isSet) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    return obj;
}

QString OAIDynamicRouteConfig::getClientStatus() const {
    return m_client_status;
}
void OAIDynamicRouteConfig::setClientStatus(const QString &client_status) {
    m_client_status = client_status;
    m_client_status_isSet = true;
}

bool OAIDynamicRouteConfig::is_client_status_Set() const{
    return m_client_status_isSet;
}

bool OAIDynamicRouteConfig::is_client_status_Valid() const{
    return m_client_status_isValid;
}

OAIUpdateFailureState OAIDynamicRouteConfig::getErrorState() const {
    return m_error_state;
}
void OAIDynamicRouteConfig::setErrorState(const OAIUpdateFailureState &error_state) {
    m_error_state = error_state;
    m_error_state_isSet = true;
}

bool OAIDynamicRouteConfig::is_error_state_Set() const{
    return m_error_state_isSet;
}

bool OAIDynamicRouteConfig::is_error_state_Valid() const{
    return m_error_state_isValid;
}

QString OAIDynamicRouteConfig::getLastUpdated() const {
    return m_last_updated;
}
void OAIDynamicRouteConfig::setLastUpdated(const QString &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDynamicRouteConfig::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDynamicRouteConfig::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QMap<QString, QJsonValue> OAIDynamicRouteConfig::getRouteConfig() const {
    return m_route_config;
}
void OAIDynamicRouteConfig::setRouteConfig(const QMap<QString, QJsonValue> &route_config) {
    m_route_config = route_config;
    m_route_config_isSet = true;
}

bool OAIDynamicRouteConfig::is_route_config_Set() const{
    return m_route_config_isSet;
}

bool OAIDynamicRouteConfig::is_route_config_Valid() const{
    return m_route_config_isValid;
}

QString OAIDynamicRouteConfig::getVersionInfo() const {
    return m_version_info;
}
void OAIDynamicRouteConfig::setVersionInfo(const QString &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIDynamicRouteConfig::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIDynamicRouteConfig::is_version_info_Valid() const{
    return m_version_info_isValid;
}

bool OAIDynamicRouteConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicRouteConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
