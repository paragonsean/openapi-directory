/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClientConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClientConfig::OAIClientConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClientConfig::OAIClientConfig() {
    this->initializeModel();
}

OAIClientConfig::~OAIClientConfig() {}

void OAIClientConfig::initializeModel() {

    m_client_scope_isSet = false;
    m_client_scope_isValid = false;

    m_generic_xds_configs_isSet = false;
    m_generic_xds_configs_isValid = false;

    m_node_isSet = false;
    m_node_isValid = false;

    m_xds_config_isSet = false;
    m_xds_config_isValid = false;
}

void OAIClientConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClientConfig::fromJsonObject(QJsonObject json) {

    m_client_scope_isValid = ::OpenAPI::fromJsonValue(m_client_scope, json[QString("clientScope")]);
    m_client_scope_isSet = !json[QString("clientScope")].isNull() && m_client_scope_isValid;

    m_generic_xds_configs_isValid = ::OpenAPI::fromJsonValue(m_generic_xds_configs, json[QString("genericXdsConfigs")]);
    m_generic_xds_configs_isSet = !json[QString("genericXdsConfigs")].isNull() && m_generic_xds_configs_isValid;

    m_node_isValid = ::OpenAPI::fromJsonValue(m_node, json[QString("node")]);
    m_node_isSet = !json[QString("node")].isNull() && m_node_isValid;

    m_xds_config_isValid = ::OpenAPI::fromJsonValue(m_xds_config, json[QString("xdsConfig")]);
    m_xds_config_isSet = !json[QString("xdsConfig")].isNull() && m_xds_config_isValid;
}

QString OAIClientConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClientConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_scope_isSet) {
        obj.insert(QString("clientScope"), ::OpenAPI::toJsonValue(m_client_scope));
    }
    if (m_generic_xds_configs.size() > 0) {
        obj.insert(QString("genericXdsConfigs"), ::OpenAPI::toJsonValue(m_generic_xds_configs));
    }
    if (m_node.isSet()) {
        obj.insert(QString("node"), ::OpenAPI::toJsonValue(m_node));
    }
    if (m_xds_config.size() > 0) {
        obj.insert(QString("xdsConfig"), ::OpenAPI::toJsonValue(m_xds_config));
    }
    return obj;
}

QString OAIClientConfig::getClientScope() const {
    return m_client_scope;
}
void OAIClientConfig::setClientScope(const QString &client_scope) {
    m_client_scope = client_scope;
    m_client_scope_isSet = true;
}

bool OAIClientConfig::is_client_scope_Set() const{
    return m_client_scope_isSet;
}

bool OAIClientConfig::is_client_scope_Valid() const{
    return m_client_scope_isValid;
}

QList<OAIGenericXdsConfig> OAIClientConfig::getGenericXdsConfigs() const {
    return m_generic_xds_configs;
}
void OAIClientConfig::setGenericXdsConfigs(const QList<OAIGenericXdsConfig> &generic_xds_configs) {
    m_generic_xds_configs = generic_xds_configs;
    m_generic_xds_configs_isSet = true;
}

bool OAIClientConfig::is_generic_xds_configs_Set() const{
    return m_generic_xds_configs_isSet;
}

bool OAIClientConfig::is_generic_xds_configs_Valid() const{
    return m_generic_xds_configs_isValid;
}

OAINode OAIClientConfig::getNode() const {
    return m_node;
}
void OAIClientConfig::setNode(const OAINode &node) {
    m_node = node;
    m_node_isSet = true;
}

bool OAIClientConfig::is_node_Set() const{
    return m_node_isSet;
}

bool OAIClientConfig::is_node_Valid() const{
    return m_node_isValid;
}

QList<OAIPerXdsConfig> OAIClientConfig::getXdsConfig() const {
    return m_xds_config;
}
void OAIClientConfig::setXdsConfig(const QList<OAIPerXdsConfig> &xds_config) {
    m_xds_config = xds_config;
    m_xds_config_isSet = true;
}

bool OAIClientConfig::is_xds_config_Set() const{
    return m_xds_config_isSet;
}

bool OAIClientConfig::is_xds_config_Valid() const{
    return m_xds_config_isValid;
}

bool OAIClientConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_xds_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xds_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClientConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
