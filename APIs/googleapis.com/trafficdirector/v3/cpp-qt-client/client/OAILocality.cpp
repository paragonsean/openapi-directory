/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocality.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocality::OAILocality(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocality::OAILocality() {
    this->initializeModel();
}

OAILocality::~OAILocality() {}

void OAILocality::initializeModel() {

    m_region_isSet = false;
    m_region_isValid = false;

    m_sub_zone_isSet = false;
    m_sub_zone_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAILocality::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocality::fromJsonObject(QJsonObject json) {

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_sub_zone_isValid = ::OpenAPI::fromJsonValue(m_sub_zone, json[QString("subZone")]);
    m_sub_zone_isSet = !json[QString("subZone")].isNull() && m_sub_zone_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAILocality::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocality::asJsonObject() const {
    QJsonObject obj;
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_sub_zone_isSet) {
        obj.insert(QString("subZone"), ::OpenAPI::toJsonValue(m_sub_zone));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAILocality::getRegion() const {
    return m_region;
}
void OAILocality::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAILocality::is_region_Set() const{
    return m_region_isSet;
}

bool OAILocality::is_region_Valid() const{
    return m_region_isValid;
}

QString OAILocality::getSubZone() const {
    return m_sub_zone;
}
void OAILocality::setSubZone(const QString &sub_zone) {
    m_sub_zone = sub_zone;
    m_sub_zone_isSet = true;
}

bool OAILocality::is_sub_zone_Set() const{
    return m_sub_zone_isSet;
}

bool OAILocality::is_sub_zone_Valid() const{
    return m_sub_zone_isValid;
}

QString OAILocality::getZone() const {
    return m_zone;
}
void OAILocality::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAILocality::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAILocality::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAILocality::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocality::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
