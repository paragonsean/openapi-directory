/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerXdsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerXdsConfig::OAIPerXdsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerXdsConfig::OAIPerXdsConfig() {
    this->initializeModel();
}

OAIPerXdsConfig::~OAIPerXdsConfig() {}

void OAIPerXdsConfig::initializeModel() {

    m_client_status_isSet = false;
    m_client_status_isValid = false;

    m_cluster_config_isSet = false;
    m_cluster_config_isValid = false;

    m_endpoint_config_isSet = false;
    m_endpoint_config_isValid = false;

    m_listener_config_isSet = false;
    m_listener_config_isValid = false;

    m_route_config_isSet = false;
    m_route_config_isValid = false;

    m_scoped_route_config_isSet = false;
    m_scoped_route_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPerXdsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerXdsConfig::fromJsonObject(QJsonObject json) {

    m_client_status_isValid = ::OpenAPI::fromJsonValue(m_client_status, json[QString("clientStatus")]);
    m_client_status_isSet = !json[QString("clientStatus")].isNull() && m_client_status_isValid;

    m_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_cluster_config, json[QString("clusterConfig")]);
    m_cluster_config_isSet = !json[QString("clusterConfig")].isNull() && m_cluster_config_isValid;

    m_endpoint_config_isValid = ::OpenAPI::fromJsonValue(m_endpoint_config, json[QString("endpointConfig")]);
    m_endpoint_config_isSet = !json[QString("endpointConfig")].isNull() && m_endpoint_config_isValid;

    m_listener_config_isValid = ::OpenAPI::fromJsonValue(m_listener_config, json[QString("listenerConfig")]);
    m_listener_config_isSet = !json[QString("listenerConfig")].isNull() && m_listener_config_isValid;

    m_route_config_isValid = ::OpenAPI::fromJsonValue(m_route_config, json[QString("routeConfig")]);
    m_route_config_isSet = !json[QString("routeConfig")].isNull() && m_route_config_isValid;

    m_scoped_route_config_isValid = ::OpenAPI::fromJsonValue(m_scoped_route_config, json[QString("scopedRouteConfig")]);
    m_scoped_route_config_isSet = !json[QString("scopedRouteConfig")].isNull() && m_scoped_route_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPerXdsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerXdsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_status_isSet) {
        obj.insert(QString("clientStatus"), ::OpenAPI::toJsonValue(m_client_status));
    }
    if (m_cluster_config.isSet()) {
        obj.insert(QString("clusterConfig"), ::OpenAPI::toJsonValue(m_cluster_config));
    }
    if (m_endpoint_config.isSet()) {
        obj.insert(QString("endpointConfig"), ::OpenAPI::toJsonValue(m_endpoint_config));
    }
    if (m_listener_config.isSet()) {
        obj.insert(QString("listenerConfig"), ::OpenAPI::toJsonValue(m_listener_config));
    }
    if (m_route_config.isSet()) {
        obj.insert(QString("routeConfig"), ::OpenAPI::toJsonValue(m_route_config));
    }
    if (m_scoped_route_config.isSet()) {
        obj.insert(QString("scopedRouteConfig"), ::OpenAPI::toJsonValue(m_scoped_route_config));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPerXdsConfig::getClientStatus() const {
    return m_client_status;
}
void OAIPerXdsConfig::setClientStatus(const QString &client_status) {
    m_client_status = client_status;
    m_client_status_isSet = true;
}

bool OAIPerXdsConfig::is_client_status_Set() const{
    return m_client_status_isSet;
}

bool OAIPerXdsConfig::is_client_status_Valid() const{
    return m_client_status_isValid;
}

OAIClustersConfigDump OAIPerXdsConfig::getClusterConfig() const {
    return m_cluster_config;
}
void OAIPerXdsConfig::setClusterConfig(const OAIClustersConfigDump &cluster_config) {
    m_cluster_config = cluster_config;
    m_cluster_config_isSet = true;
}

bool OAIPerXdsConfig::is_cluster_config_Set() const{
    return m_cluster_config_isSet;
}

bool OAIPerXdsConfig::is_cluster_config_Valid() const{
    return m_cluster_config_isValid;
}

OAIEndpointsConfigDump OAIPerXdsConfig::getEndpointConfig() const {
    return m_endpoint_config;
}
void OAIPerXdsConfig::setEndpointConfig(const OAIEndpointsConfigDump &endpoint_config) {
    m_endpoint_config = endpoint_config;
    m_endpoint_config_isSet = true;
}

bool OAIPerXdsConfig::is_endpoint_config_Set() const{
    return m_endpoint_config_isSet;
}

bool OAIPerXdsConfig::is_endpoint_config_Valid() const{
    return m_endpoint_config_isValid;
}

OAIListenersConfigDump OAIPerXdsConfig::getListenerConfig() const {
    return m_listener_config;
}
void OAIPerXdsConfig::setListenerConfig(const OAIListenersConfigDump &listener_config) {
    m_listener_config = listener_config;
    m_listener_config_isSet = true;
}

bool OAIPerXdsConfig::is_listener_config_Set() const{
    return m_listener_config_isSet;
}

bool OAIPerXdsConfig::is_listener_config_Valid() const{
    return m_listener_config_isValid;
}

OAIRoutesConfigDump OAIPerXdsConfig::getRouteConfig() const {
    return m_route_config;
}
void OAIPerXdsConfig::setRouteConfig(const OAIRoutesConfigDump &route_config) {
    m_route_config = route_config;
    m_route_config_isSet = true;
}

bool OAIPerXdsConfig::is_route_config_Set() const{
    return m_route_config_isSet;
}

bool OAIPerXdsConfig::is_route_config_Valid() const{
    return m_route_config_isValid;
}

OAIScopedRoutesConfigDump OAIPerXdsConfig::getScopedRouteConfig() const {
    return m_scoped_route_config;
}
void OAIPerXdsConfig::setScopedRouteConfig(const OAIScopedRoutesConfigDump &scoped_route_config) {
    m_scoped_route_config = scoped_route_config;
    m_scoped_route_config_isSet = true;
}

bool OAIPerXdsConfig::is_scoped_route_config_Set() const{
    return m_scoped_route_config_isSet;
}

bool OAIPerXdsConfig::is_scoped_route_config_Valid() const{
    return m_scoped_route_config_isValid;
}

QString OAIPerXdsConfig::getStatus() const {
    return m_status;
}
void OAIPerXdsConfig::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPerXdsConfig::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPerXdsConfig::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPerXdsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_listener_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoped_route_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerXdsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
