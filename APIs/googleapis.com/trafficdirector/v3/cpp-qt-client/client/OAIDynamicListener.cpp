/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDynamicListener.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDynamicListener::OAIDynamicListener(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDynamicListener::OAIDynamicListener() {
    this->initializeModel();
}

OAIDynamicListener::~OAIDynamicListener() {}

void OAIDynamicListener::initializeModel() {

    m_active_state_isSet = false;
    m_active_state_isValid = false;

    m_client_status_isSet = false;
    m_client_status_isValid = false;

    m_draining_state_isSet = false;
    m_draining_state_isValid = false;

    m_error_state_isSet = false;
    m_error_state_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_warming_state_isSet = false;
    m_warming_state_isValid = false;
}

void OAIDynamicListener::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDynamicListener::fromJsonObject(QJsonObject json) {

    m_active_state_isValid = ::OpenAPI::fromJsonValue(m_active_state, json[QString("activeState")]);
    m_active_state_isSet = !json[QString("activeState")].isNull() && m_active_state_isValid;

    m_client_status_isValid = ::OpenAPI::fromJsonValue(m_client_status, json[QString("clientStatus")]);
    m_client_status_isSet = !json[QString("clientStatus")].isNull() && m_client_status_isValid;

    m_draining_state_isValid = ::OpenAPI::fromJsonValue(m_draining_state, json[QString("drainingState")]);
    m_draining_state_isSet = !json[QString("drainingState")].isNull() && m_draining_state_isValid;

    m_error_state_isValid = ::OpenAPI::fromJsonValue(m_error_state, json[QString("errorState")]);
    m_error_state_isSet = !json[QString("errorState")].isNull() && m_error_state_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_warming_state_isValid = ::OpenAPI::fromJsonValue(m_warming_state, json[QString("warmingState")]);
    m_warming_state_isSet = !json[QString("warmingState")].isNull() && m_warming_state_isValid;
}

QString OAIDynamicListener::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDynamicListener::asJsonObject() const {
    QJsonObject obj;
    if (m_active_state.isSet()) {
        obj.insert(QString("activeState"), ::OpenAPI::toJsonValue(m_active_state));
    }
    if (m_client_status_isSet) {
        obj.insert(QString("clientStatus"), ::OpenAPI::toJsonValue(m_client_status));
    }
    if (m_draining_state.isSet()) {
        obj.insert(QString("drainingState"), ::OpenAPI::toJsonValue(m_draining_state));
    }
    if (m_error_state.isSet()) {
        obj.insert(QString("errorState"), ::OpenAPI::toJsonValue(m_error_state));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_warming_state.isSet()) {
        obj.insert(QString("warmingState"), ::OpenAPI::toJsonValue(m_warming_state));
    }
    return obj;
}

OAIDynamicListenerState OAIDynamicListener::getActiveState() const {
    return m_active_state;
}
void OAIDynamicListener::setActiveState(const OAIDynamicListenerState &active_state) {
    m_active_state = active_state;
    m_active_state_isSet = true;
}

bool OAIDynamicListener::is_active_state_Set() const{
    return m_active_state_isSet;
}

bool OAIDynamicListener::is_active_state_Valid() const{
    return m_active_state_isValid;
}

QString OAIDynamicListener::getClientStatus() const {
    return m_client_status;
}
void OAIDynamicListener::setClientStatus(const QString &client_status) {
    m_client_status = client_status;
    m_client_status_isSet = true;
}

bool OAIDynamicListener::is_client_status_Set() const{
    return m_client_status_isSet;
}

bool OAIDynamicListener::is_client_status_Valid() const{
    return m_client_status_isValid;
}

OAIDynamicListenerState OAIDynamicListener::getDrainingState() const {
    return m_draining_state;
}
void OAIDynamicListener::setDrainingState(const OAIDynamicListenerState &draining_state) {
    m_draining_state = draining_state;
    m_draining_state_isSet = true;
}

bool OAIDynamicListener::is_draining_state_Set() const{
    return m_draining_state_isSet;
}

bool OAIDynamicListener::is_draining_state_Valid() const{
    return m_draining_state_isValid;
}

OAIUpdateFailureState OAIDynamicListener::getErrorState() const {
    return m_error_state;
}
void OAIDynamicListener::setErrorState(const OAIUpdateFailureState &error_state) {
    m_error_state = error_state;
    m_error_state_isSet = true;
}

bool OAIDynamicListener::is_error_state_Set() const{
    return m_error_state_isSet;
}

bool OAIDynamicListener::is_error_state_Valid() const{
    return m_error_state_isValid;
}

QString OAIDynamicListener::getName() const {
    return m_name;
}
void OAIDynamicListener::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDynamicListener::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDynamicListener::is_name_Valid() const{
    return m_name_isValid;
}

OAIDynamicListenerState OAIDynamicListener::getWarmingState() const {
    return m_warming_state;
}
void OAIDynamicListener::setWarmingState(const OAIDynamicListenerState &warming_state) {
    m_warming_state = warming_state;
    m_warming_state_isSet = true;
}

bool OAIDynamicListener::is_warming_state_Set() const{
    return m_warming_state_isSet;
}

bool OAIDynamicListener::is_warming_state_Valid() const{
    return m_warming_state_isValid;
}

bool OAIDynamicListener::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draining_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warming_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDynamicListener::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
