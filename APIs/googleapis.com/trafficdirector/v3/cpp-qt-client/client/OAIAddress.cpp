/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress::OAIAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress::OAIAddress() {
    this->initializeModel();
}

OAIAddress::~OAIAddress() {}

void OAIAddress::initializeModel() {

    m_envoy_internal_address_isSet = false;
    m_envoy_internal_address_isValid = false;

    m_pipe_isSet = false;
    m_pipe_isValid = false;

    m_socket_address_isSet = false;
    m_socket_address_isValid = false;
}

void OAIAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress::fromJsonObject(QJsonObject json) {

    m_envoy_internal_address_isValid = ::OpenAPI::fromJsonValue(m_envoy_internal_address, json[QString("envoyInternalAddress")]);
    m_envoy_internal_address_isSet = !json[QString("envoyInternalAddress")].isNull() && m_envoy_internal_address_isValid;

    m_pipe_isValid = ::OpenAPI::fromJsonValue(m_pipe, json[QString("pipe")]);
    m_pipe_isSet = !json[QString("pipe")].isNull() && m_pipe_isValid;

    m_socket_address_isValid = ::OpenAPI::fromJsonValue(m_socket_address, json[QString("socketAddress")]);
    m_socket_address_isSet = !json[QString("socketAddress")].isNull() && m_socket_address_isValid;
}

QString OAIAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_envoy_internal_address.isSet()) {
        obj.insert(QString("envoyInternalAddress"), ::OpenAPI::toJsonValue(m_envoy_internal_address));
    }
    if (m_pipe.isSet()) {
        obj.insert(QString("pipe"), ::OpenAPI::toJsonValue(m_pipe));
    }
    if (m_socket_address.isSet()) {
        obj.insert(QString("socketAddress"), ::OpenAPI::toJsonValue(m_socket_address));
    }
    return obj;
}

OAIEnvoyInternalAddress OAIAddress::getEnvoyInternalAddress() const {
    return m_envoy_internal_address;
}
void OAIAddress::setEnvoyInternalAddress(const OAIEnvoyInternalAddress &envoy_internal_address) {
    m_envoy_internal_address = envoy_internal_address;
    m_envoy_internal_address_isSet = true;
}

bool OAIAddress::is_envoy_internal_address_Set() const{
    return m_envoy_internal_address_isSet;
}

bool OAIAddress::is_envoy_internal_address_Valid() const{
    return m_envoy_internal_address_isValid;
}

OAIPipe OAIAddress::getPipe() const {
    return m_pipe;
}
void OAIAddress::setPipe(const OAIPipe &pipe) {
    m_pipe = pipe;
    m_pipe_isSet = true;
}

bool OAIAddress::is_pipe_Set() const{
    return m_pipe_isSet;
}

bool OAIAddress::is_pipe_Valid() const{
    return m_pipe_isValid;
}

OAISocketAddress OAIAddress::getSocketAddress() const {
    return m_socket_address;
}
void OAIAddress::setSocketAddress(const OAISocketAddress &socket_address) {
    m_socket_address = socket_address;
    m_socket_address_isSet = true;
}

bool OAIAddress::is_socket_address_Set() const{
    return m_socket_address_isSet;
}

bool OAIAddress::is_socket_address_Valid() const{
    return m_socket_address_isValid;
}

bool OAIAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_envoy_internal_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pipe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_socket_address.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
