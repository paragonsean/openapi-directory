/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegexMatcher.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegexMatcher::OAIRegexMatcher(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegexMatcher::OAIRegexMatcher() {
    this->initializeModel();
}

OAIRegexMatcher::~OAIRegexMatcher() {}

void OAIRegexMatcher::initializeModel() {

    m_google_re2_isSet = false;
    m_google_re2_isValid = false;

    m_regex_isSet = false;
    m_regex_isValid = false;
}

void OAIRegexMatcher::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegexMatcher::fromJsonObject(QJsonObject json) {

    m_google_re2_isValid = ::OpenAPI::fromJsonValue(m_google_re2, json[QString("googleRe2")]);
    m_google_re2_isSet = !json[QString("googleRe2")].isNull() && m_google_re2_isValid;

    m_regex_isValid = ::OpenAPI::fromJsonValue(m_regex, json[QString("regex")]);
    m_regex_isSet = !json[QString("regex")].isNull() && m_regex_isValid;
}

QString OAIRegexMatcher::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegexMatcher::asJsonObject() const {
    QJsonObject obj;
    if (m_google_re2.isSet()) {
        obj.insert(QString("googleRe2"), ::OpenAPI::toJsonValue(m_google_re2));
    }
    if (m_regex_isSet) {
        obj.insert(QString("regex"), ::OpenAPI::toJsonValue(m_regex));
    }
    return obj;
}

OAIGoogleRE2 OAIRegexMatcher::getGoogleRe2() const {
    return m_google_re2;
}
void OAIRegexMatcher::setGoogleRe2(const OAIGoogleRE2 &google_re2) {
    m_google_re2 = google_re2;
    m_google_re2_isSet = true;
}

bool OAIRegexMatcher::is_google_re2_Set() const{
    return m_google_re2_isSet;
}

bool OAIRegexMatcher::is_google_re2_Valid() const{
    return m_google_re2_isValid;
}

QString OAIRegexMatcher::getRegex() const {
    return m_regex;
}
void OAIRegexMatcher::setRegex(const QString &regex) {
    m_regex = regex;
    m_regex_isSet = true;
}

bool OAIRegexMatcher::is_regex_Set() const{
    return m_regex_isSet;
}

bool OAIRegexMatcher::is_regex_Valid() const{
    return m_regex_isValid;
}

bool OAIRegexMatcher::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_google_re2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_regex_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegexMatcher::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
