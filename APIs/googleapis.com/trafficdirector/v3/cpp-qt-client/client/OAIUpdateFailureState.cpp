/**
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFailureState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFailureState::OAIUpdateFailureState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFailureState::OAIUpdateFailureState() {
    this->initializeModel();
}

OAIUpdateFailureState::~OAIUpdateFailureState() {}

void OAIUpdateFailureState::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_failed_configuration_isSet = false;
    m_failed_configuration_isValid = false;

    m_last_update_attempt_isSet = false;
    m_last_update_attempt_isValid = false;

    m_version_info_isSet = false;
    m_version_info_isValid = false;
}

void OAIUpdateFailureState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFailureState::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_failed_configuration_isValid = ::OpenAPI::fromJsonValue(m_failed_configuration, json[QString("failedConfiguration")]);
    m_failed_configuration_isSet = !json[QString("failedConfiguration")].isNull() && m_failed_configuration_isValid;

    m_last_update_attempt_isValid = ::OpenAPI::fromJsonValue(m_last_update_attempt, json[QString("lastUpdateAttempt")]);
    m_last_update_attempt_isSet = !json[QString("lastUpdateAttempt")].isNull() && m_last_update_attempt_isValid;

    m_version_info_isValid = ::OpenAPI::fromJsonValue(m_version_info, json[QString("versionInfo")]);
    m_version_info_isSet = !json[QString("versionInfo")].isNull() && m_version_info_isValid;
}

QString OAIUpdateFailureState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFailureState::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_failed_configuration.size() > 0) {
        obj.insert(QString("failedConfiguration"), ::OpenAPI::toJsonValue(m_failed_configuration));
    }
    if (m_last_update_attempt_isSet) {
        obj.insert(QString("lastUpdateAttempt"), ::OpenAPI::toJsonValue(m_last_update_attempt));
    }
    if (m_version_info_isSet) {
        obj.insert(QString("versionInfo"), ::OpenAPI::toJsonValue(m_version_info));
    }
    return obj;
}

QString OAIUpdateFailureState::getDetails() const {
    return m_details;
}
void OAIUpdateFailureState::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIUpdateFailureState::is_details_Set() const{
    return m_details_isSet;
}

bool OAIUpdateFailureState::is_details_Valid() const{
    return m_details_isValid;
}

QMap<QString, QJsonValue> OAIUpdateFailureState::getFailedConfiguration() const {
    return m_failed_configuration;
}
void OAIUpdateFailureState::setFailedConfiguration(const QMap<QString, QJsonValue> &failed_configuration) {
    m_failed_configuration = failed_configuration;
    m_failed_configuration_isSet = true;
}

bool OAIUpdateFailureState::is_failed_configuration_Set() const{
    return m_failed_configuration_isSet;
}

bool OAIUpdateFailureState::is_failed_configuration_Valid() const{
    return m_failed_configuration_isValid;
}

QString OAIUpdateFailureState::getLastUpdateAttempt() const {
    return m_last_update_attempt;
}
void OAIUpdateFailureState::setLastUpdateAttempt(const QString &last_update_attempt) {
    m_last_update_attempt = last_update_attempt;
    m_last_update_attempt_isSet = true;
}

bool OAIUpdateFailureState::is_last_update_attempt_Set() const{
    return m_last_update_attempt_isSet;
}

bool OAIUpdateFailureState::is_last_update_attempt_Valid() const{
    return m_last_update_attempt_isValid;
}

QString OAIUpdateFailureState::getVersionInfo() const {
    return m_version_info;
}
void OAIUpdateFailureState::setVersionInfo(const QString &version_info) {
    m_version_info = version_info;
    m_version_info_isSet = true;
}

bool OAIUpdateFailureState::is_version_info_Set() const{
    return m_version_info_isSet;
}

bool OAIUpdateFailureState::is_version_info_Valid() const{
    return m_version_info_isValid;
}

bool OAIUpdateFailureState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_attempt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFailureState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
