# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_version import BuildVersion
from openapi_server import util


class Extension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, disabled: bool=None, name: str=None, type_descriptor: str=None, type_urls: List[str]=None, version: BuildVersion=None):
        """Extension - a model defined in OpenAPI

        :param category: The category of this Extension.
        :param disabled: The disabled of this Extension.
        :param name: The name of this Extension.
        :param type_descriptor: The type_descriptor of this Extension.
        :param type_urls: The type_urls of this Extension.
        :param version: The version of this Extension.
        """
        self.openapi_types = {
            'category': str,
            'disabled': bool,
            'name': str,
            'type_descriptor': str,
            'type_urls': List[str],
            'version': BuildVersion
        }

        self.attribute_map = {
            'category': 'category',
            'disabled': 'disabled',
            'name': 'name',
            'type_descriptor': 'typeDescriptor',
            'type_urls': 'typeUrls',
            'version': 'version'
        }

        self._category = category
        self._disabled = disabled
        self._name = name
        self._type_descriptor = type_descriptor
        self._type_urls = type_urls
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Extension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Extension of this Extension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Extension.

        Category of the extension. Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\" for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from acme.com vendor. [#comment:

        :return: The category of this Extension.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Extension.

        Category of the extension. Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\" for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from acme.com vendor. [#comment:

        :param category: The category of this Extension.
        :type category: str
        """

        self._category = category

    @property
    def disabled(self):
        """Gets the disabled of this Extension.

        Indicates that the extension is present but was disabled via dynamic configuration.

        :return: The disabled of this Extension.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Extension.

        Indicates that the extension is present but was disabled via dynamic configuration.

        :param disabled: The disabled of this Extension.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def name(self):
        """Gets the name of this Extension.

        This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.

        :return: The name of this Extension.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Extension.

        This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.

        :param name: The name of this Extension.
        :type name: str
        """

        self._name = name

    @property
    def type_descriptor(self):
        """Gets the type_descriptor of this Extension.

        [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:

        :return: The type_descriptor of this Extension.
        :rtype: str
        """
        return self._type_descriptor

    @type_descriptor.setter
    def type_descriptor(self, type_descriptor):
        """Sets the type_descriptor of this Extension.

        [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:

        :param type_descriptor: The type_descriptor of this Extension.
        :type type_descriptor: str
        """

        self._type_descriptor = type_descriptor

    @property
    def type_urls(self):
        """Gets the type_urls of this Extension.

        Type URLs of extension configuration protos.

        :return: The type_urls of this Extension.
        :rtype: List[str]
        """
        return self._type_urls

    @type_urls.setter
    def type_urls(self, type_urls):
        """Sets the type_urls of this Extension.

        Type URLs of extension configuration protos.

        :param type_urls: The type_urls of this Extension.
        :type type_urls: List[str]
        """

        self._type_urls = type_urls

    @property
    def version(self):
        """Gets the version of this Extension.


        :return: The version of this Extension.
        :rtype: BuildVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Extension.


        :param version: The version of this Extension.
        :type version: BuildVersion
        """

        self._version = version
