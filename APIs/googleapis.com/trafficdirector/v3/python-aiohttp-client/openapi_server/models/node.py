# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.build_version import BuildVersion
from openapi_server.models.context_params import ContextParams
from openapi_server.models.extension import Extension
from openapi_server.models.locality import Locality
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_features: List[str]=None, cluster: str=None, dynamic_parameters: Dict[str, ContextParams]=None, extensions: List[Extension]=None, id: str=None, listening_addresses: List[Address]=None, locality: Locality=None, metadata: Dict[str, object]=None, user_agent_build_version: BuildVersion=None, user_agent_name: str=None, user_agent_version: str=None):
        """Node - a model defined in OpenAPI

        :param client_features: The client_features of this Node.
        :param cluster: The cluster of this Node.
        :param dynamic_parameters: The dynamic_parameters of this Node.
        :param extensions: The extensions of this Node.
        :param id: The id of this Node.
        :param listening_addresses: The listening_addresses of this Node.
        :param locality: The locality of this Node.
        :param metadata: The metadata of this Node.
        :param user_agent_build_version: The user_agent_build_version of this Node.
        :param user_agent_name: The user_agent_name of this Node.
        :param user_agent_version: The user_agent_version of this Node.
        """
        self.openapi_types = {
            'client_features': List[str],
            'cluster': str,
            'dynamic_parameters': Dict[str, ContextParams],
            'extensions': List[Extension],
            'id': str,
            'listening_addresses': List[Address],
            'locality': Locality,
            'metadata': Dict[str, object],
            'user_agent_build_version': BuildVersion,
            'user_agent_name': str,
            'user_agent_version': str
        }

        self.attribute_map = {
            'client_features': 'clientFeatures',
            'cluster': 'cluster',
            'dynamic_parameters': 'dynamicParameters',
            'extensions': 'extensions',
            'id': 'id',
            'listening_addresses': 'listeningAddresses',
            'locality': 'locality',
            'metadata': 'metadata',
            'user_agent_build_version': 'userAgentBuildVersion',
            'user_agent_name': 'userAgentName',
            'user_agent_version': 'userAgentVersion'
        }

        self._client_features = client_features
        self._cluster = cluster
        self._dynamic_parameters = dynamic_parameters
        self._extensions = extensions
        self._id = id
        self._listening_addresses = listening_addresses
        self._locality = locality
        self._metadata = metadata
        self._user_agent_build_version = user_agent_build_version
        self._user_agent_name = user_agent_name
        self._user_agent_version = user_agent_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_features(self):
        """Gets the client_features of this Node.

        Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example ``com.acme.feature``. See :ref:`the list of features ` that xDS client may support.

        :return: The client_features of this Node.
        :rtype: List[str]
        """
        return self._client_features

    @client_features.setter
    def client_features(self, client_features):
        """Sets the client_features of this Node.

        Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example ``com.acme.feature``. See :ref:`the list of features ` that xDS client may support.

        :param client_features: The client_features of this Node.
        :type client_features: List[str]
        """

        self._client_features = client_features

    @property
    def cluster(self):
        """Gets the cluster of this Node.

        Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.

        :return: The cluster of this Node.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Node.

        Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.

        :param cluster: The cluster of this Node.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def dynamic_parameters(self):
        """Gets the dynamic_parameters of this Node.

        Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike other fields in this message). For example, the xDS client may have a shard identifier that changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic parameter then appears in this field during future discovery requests.

        :return: The dynamic_parameters of this Node.
        :rtype: Dict[str, ContextParams]
        """
        return self._dynamic_parameters

    @dynamic_parameters.setter
    def dynamic_parameters(self, dynamic_parameters):
        """Sets the dynamic_parameters of this Node.

        Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike other fields in this message). For example, the xDS client may have a shard identifier that changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic parameter then appears in this field during future discovery requests.

        :param dynamic_parameters: The dynamic_parameters of this Node.
        :type dynamic_parameters: Dict[str, ContextParams]
        """

        self._dynamic_parameters = dynamic_parameters

    @property
    def extensions(self):
        """Gets the extensions of this Node.

        List of extensions and their versions supported by the node.

        :return: The extensions of this Node.
        :rtype: List[Extension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Node.

        List of extensions and their versions supported by the node.

        :param extensions: The extensions of this Node.
        :type extensions: List[Extension]
        """

        self._extensions = extensions

    @property
    def id(self):
        """Gets the id of this Node.

        An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.

        :return: The id of this Node.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.

        :param id: The id of this Node.
        :type id: str
        """

        self._id = id

    @property
    def listening_addresses(self):
        """Gets the listening_addresses of this Node.

        Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.

        :return: The listening_addresses of this Node.
        :rtype: List[Address]
        """
        return self._listening_addresses

    @listening_addresses.setter
    def listening_addresses(self, listening_addresses):
        """Sets the listening_addresses of this Node.

        Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.

        :param listening_addresses: The listening_addresses of this Node.
        :type listening_addresses: List[Address]
        """

        self._listening_addresses = listening_addresses

    @property
    def locality(self):
        """Gets the locality of this Node.


        :return: The locality of this Node.
        :rtype: Locality
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this Node.


        :param locality: The locality of this Node.
        :type locality: Locality
        """

        self._locality = locality

    @property
    def metadata(self):
        """Gets the metadata of this Node.

        Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.

        :return: The metadata of this Node.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Node.

        Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.

        :param metadata: The metadata of this Node.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def user_agent_build_version(self):
        """Gets the user_agent_build_version of this Node.


        :return: The user_agent_build_version of this Node.
        :rtype: BuildVersion
        """
        return self._user_agent_build_version

    @user_agent_build_version.setter
    def user_agent_build_version(self, user_agent_build_version):
        """Sets the user_agent_build_version of this Node.


        :param user_agent_build_version: The user_agent_build_version of this Node.
        :type user_agent_build_version: BuildVersion
        """

        self._user_agent_build_version = user_agent_build_version

    @property
    def user_agent_name(self):
        """Gets the user_agent_name of this Node.

        Free-form string that identifies the entity requesting config. E.g. \"envoy\" or \"grpc\"

        :return: The user_agent_name of this Node.
        :rtype: str
        """
        return self._user_agent_name

    @user_agent_name.setter
    def user_agent_name(self, user_agent_name):
        """Sets the user_agent_name of this Node.

        Free-form string that identifies the entity requesting config. E.g. \"envoy\" or \"grpc\"

        :param user_agent_name: The user_agent_name of this Node.
        :type user_agent_name: str
        """

        self._user_agent_name = user_agent_name

    @property
    def user_agent_version(self):
        """Gets the user_agent_version of this Node.

        Free-form string that identifies the version of the entity requesting config. E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\"

        :return: The user_agent_version of this Node.
        :rtype: str
        """
        return self._user_agent_version

    @user_agent_version.setter
    def user_agent_version(self, user_agent_version):
        """Sets the user_agent_version of this Node.

        Free-form string that identifies the version of the entity requesting config. E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\"

        :param user_agent_version: The user_agent_version of this Node.
        :type user_agent_version: str
        """

        self._user_agent_version = user_agent_version
