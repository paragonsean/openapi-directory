# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_failure_state import UpdateFailureState
from openapi_server import util


class GenericXdsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_status: str=None, config_status: str=None, error_state: UpdateFailureState=None, is_static_resource: bool=None, last_updated: str=None, name: str=None, type_url: str=None, version_info: str=None, xds_config: Dict[str, object]=None):
        """GenericXdsConfig - a model defined in OpenAPI

        :param client_status: The client_status of this GenericXdsConfig.
        :param config_status: The config_status of this GenericXdsConfig.
        :param error_state: The error_state of this GenericXdsConfig.
        :param is_static_resource: The is_static_resource of this GenericXdsConfig.
        :param last_updated: The last_updated of this GenericXdsConfig.
        :param name: The name of this GenericXdsConfig.
        :param type_url: The type_url of this GenericXdsConfig.
        :param version_info: The version_info of this GenericXdsConfig.
        :param xds_config: The xds_config of this GenericXdsConfig.
        """
        self.openapi_types = {
            'client_status': str,
            'config_status': str,
            'error_state': UpdateFailureState,
            'is_static_resource': bool,
            'last_updated': str,
            'name': str,
            'type_url': str,
            'version_info': str,
            'xds_config': Dict[str, object]
        }

        self.attribute_map = {
            'client_status': 'clientStatus',
            'config_status': 'configStatus',
            'error_state': 'errorState',
            'is_static_resource': 'isStaticResource',
            'last_updated': 'lastUpdated',
            'name': 'name',
            'type_url': 'typeUrl',
            'version_info': 'versionInfo',
            'xds_config': 'xdsConfig'
        }

        self._client_status = client_status
        self._config_status = config_status
        self._error_state = error_state
        self._is_static_resource = is_static_resource
        self._last_updated = last_updated
        self._name = name
        self._type_url = type_url
        self._version_info = version_info
        self._xds_config = xds_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericXdsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericXdsConfig of this GenericXdsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_status(self):
        """Gets the client_status of this GenericXdsConfig.

        Per xDS resource status from the view of a xDS client

        :return: The client_status of this GenericXdsConfig.
        :rtype: str
        """
        return self._client_status

    @client_status.setter
    def client_status(self, client_status):
        """Sets the client_status of this GenericXdsConfig.

        Per xDS resource status from the view of a xDS client

        :param client_status: The client_status of this GenericXdsConfig.
        :type client_status: str
        """
        allowed_values = ["UNKNOWN", "REQUESTED", "DOES_NOT_EXIST", "ACKED", "NACKED"]  # noqa: E501
        if client_status not in allowed_values:
            raise ValueError(
                "Invalid value for `client_status` ({0}), must be one of {1}"
                .format(client_status, allowed_values)
            )

        self._client_status = client_status

    @property
    def config_status(self):
        """Gets the config_status of this GenericXdsConfig.

        Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.

        :return: The config_status of this GenericXdsConfig.
        :rtype: str
        """
        return self._config_status

    @config_status.setter
    def config_status(self, config_status):
        """Sets the config_status of this GenericXdsConfig.

        Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.

        :param config_status: The config_status of this GenericXdsConfig.
        :type config_status: str
        """
        allowed_values = ["UNKNOWN", "SYNCED", "NOT_SENT", "STALE", "ERROR"]  # noqa: E501
        if config_status not in allowed_values:
            raise ValueError(
                "Invalid value for `config_status` ({0}), must be one of {1}"
                .format(config_status, allowed_values)
            )

        self._config_status = config_status

    @property
    def error_state(self):
        """Gets the error_state of this GenericXdsConfig.


        :return: The error_state of this GenericXdsConfig.
        :rtype: UpdateFailureState
        """
        return self._error_state

    @error_state.setter
    def error_state(self, error_state):
        """Sets the error_state of this GenericXdsConfig.


        :param error_state: The error_state of this GenericXdsConfig.
        :type error_state: UpdateFailureState
        """

        self._error_state = error_state

    @property
    def is_static_resource(self):
        """Gets the is_static_resource of this GenericXdsConfig.

        Is static resource is true if it is specified in the config supplied through the file at the startup.

        :return: The is_static_resource of this GenericXdsConfig.
        :rtype: bool
        """
        return self._is_static_resource

    @is_static_resource.setter
    def is_static_resource(self, is_static_resource):
        """Sets the is_static_resource of this GenericXdsConfig.

        Is static resource is true if it is specified in the config supplied through the file at the startup.

        :param is_static_resource: The is_static_resource of this GenericXdsConfig.
        :type is_static_resource: bool
        """

        self._is_static_resource = is_static_resource

    @property
    def last_updated(self):
        """Gets the last_updated of this GenericXdsConfig.

        Timestamp when the xDS resource was last updated

        :return: The last_updated of this GenericXdsConfig.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GenericXdsConfig.

        Timestamp when the xDS resource was last updated

        :param last_updated: The last_updated of this GenericXdsConfig.
        :type last_updated: str
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this GenericXdsConfig.

        Name of the xDS resource

        :return: The name of this GenericXdsConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenericXdsConfig.

        Name of the xDS resource

        :param name: The name of this GenericXdsConfig.
        :type name: str
        """

        self._name = name

    @property
    def type_url(self):
        """Gets the type_url of this GenericXdsConfig.

        Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.

        :return: The type_url of this GenericXdsConfig.
        :rtype: str
        """
        return self._type_url

    @type_url.setter
    def type_url(self, type_url):
        """Sets the type_url of this GenericXdsConfig.

        Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.

        :param type_url: The type_url of this GenericXdsConfig.
        :type type_url: str
        """

        self._type_url = type_url

    @property
    def version_info(self):
        """Gets the version_info of this GenericXdsConfig.

        This is the :ref:`version_info ` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \"\"

        :return: The version_info of this GenericXdsConfig.
        :rtype: str
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this GenericXdsConfig.

        This is the :ref:`version_info ` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \"\"

        :param version_info: The version_info of this GenericXdsConfig.
        :type version_info: str
        """

        self._version_info = version_info

    @property
    def xds_config(self):
        """Gets the xds_config of this GenericXdsConfig.

        The xDS resource config. Actual content depends on the type

        :return: The xds_config of this GenericXdsConfig.
        :rtype: Dict[str, object]
        """
        return self._xds_config

    @xds_config.setter
    def xds_config(self, xds_config):
        """Sets the xds_config of this GenericXdsConfig.

        The xDS resource config. Actual content depends on the type

        :param xds_config: The xds_config of this GenericXdsConfig.
        :type xds_config: Dict[str, object]
        """

        self._xds_config = xds_config
