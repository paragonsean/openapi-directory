# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clusters_config_dump import ClustersConfigDump
from openapi_server.models.endpoints_config_dump import EndpointsConfigDump
from openapi_server.models.listeners_config_dump import ListenersConfigDump
from openapi_server.models.routes_config_dump import RoutesConfigDump
from openapi_server.models.scoped_routes_config_dump import ScopedRoutesConfigDump
from openapi_server import util


class PerXdsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_status: str=None, cluster_config: ClustersConfigDump=None, endpoint_config: EndpointsConfigDump=None, listener_config: ListenersConfigDump=None, route_config: RoutesConfigDump=None, scoped_route_config: ScopedRoutesConfigDump=None, status: str=None):
        """PerXdsConfig - a model defined in OpenAPI

        :param client_status: The client_status of this PerXdsConfig.
        :param cluster_config: The cluster_config of this PerXdsConfig.
        :param endpoint_config: The endpoint_config of this PerXdsConfig.
        :param listener_config: The listener_config of this PerXdsConfig.
        :param route_config: The route_config of this PerXdsConfig.
        :param scoped_route_config: The scoped_route_config of this PerXdsConfig.
        :param status: The status of this PerXdsConfig.
        """
        self.openapi_types = {
            'client_status': str,
            'cluster_config': ClustersConfigDump,
            'endpoint_config': EndpointsConfigDump,
            'listener_config': ListenersConfigDump,
            'route_config': RoutesConfigDump,
            'scoped_route_config': ScopedRoutesConfigDump,
            'status': str
        }

        self.attribute_map = {
            'client_status': 'clientStatus',
            'cluster_config': 'clusterConfig',
            'endpoint_config': 'endpointConfig',
            'listener_config': 'listenerConfig',
            'route_config': 'routeConfig',
            'scoped_route_config': 'scopedRouteConfig',
            'status': 'status'
        }

        self._client_status = client_status
        self._cluster_config = cluster_config
        self._endpoint_config = endpoint_config
        self._listener_config = listener_config
        self._route_config = route_config
        self._scoped_route_config = scoped_route_config
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerXdsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerXdsConfig of this PerXdsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_status(self):
        """Gets the client_status of this PerXdsConfig.

        Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:`ClientResourceStatus ` for per-resource config status instead.

        :return: The client_status of this PerXdsConfig.
        :rtype: str
        """
        return self._client_status

    @client_status.setter
    def client_status(self, client_status):
        """Sets the client_status of this PerXdsConfig.

        Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:`ClientResourceStatus ` for per-resource config status instead.

        :param client_status: The client_status of this PerXdsConfig.
        :type client_status: str
        """
        allowed_values = ["CLIENT_UNKNOWN", "CLIENT_REQUESTED", "CLIENT_ACKED", "CLIENT_NACKED"]  # noqa: E501
        if client_status not in allowed_values:
            raise ValueError(
                "Invalid value for `client_status` ({0}), must be one of {1}"
                .format(client_status, allowed_values)
            )

        self._client_status = client_status

    @property
    def cluster_config(self):
        """Gets the cluster_config of this PerXdsConfig.


        :return: The cluster_config of this PerXdsConfig.
        :rtype: ClustersConfigDump
        """
        return self._cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):
        """Sets the cluster_config of this PerXdsConfig.


        :param cluster_config: The cluster_config of this PerXdsConfig.
        :type cluster_config: ClustersConfigDump
        """

        self._cluster_config = cluster_config

    @property
    def endpoint_config(self):
        """Gets the endpoint_config of this PerXdsConfig.


        :return: The endpoint_config of this PerXdsConfig.
        :rtype: EndpointsConfigDump
        """
        return self._endpoint_config

    @endpoint_config.setter
    def endpoint_config(self, endpoint_config):
        """Sets the endpoint_config of this PerXdsConfig.


        :param endpoint_config: The endpoint_config of this PerXdsConfig.
        :type endpoint_config: EndpointsConfigDump
        """

        self._endpoint_config = endpoint_config

    @property
    def listener_config(self):
        """Gets the listener_config of this PerXdsConfig.


        :return: The listener_config of this PerXdsConfig.
        :rtype: ListenersConfigDump
        """
        return self._listener_config

    @listener_config.setter
    def listener_config(self, listener_config):
        """Sets the listener_config of this PerXdsConfig.


        :param listener_config: The listener_config of this PerXdsConfig.
        :type listener_config: ListenersConfigDump
        """

        self._listener_config = listener_config

    @property
    def route_config(self):
        """Gets the route_config of this PerXdsConfig.


        :return: The route_config of this PerXdsConfig.
        :rtype: RoutesConfigDump
        """
        return self._route_config

    @route_config.setter
    def route_config(self, route_config):
        """Sets the route_config of this PerXdsConfig.


        :param route_config: The route_config of this PerXdsConfig.
        :type route_config: RoutesConfigDump
        """

        self._route_config = route_config

    @property
    def scoped_route_config(self):
        """Gets the scoped_route_config of this PerXdsConfig.


        :return: The scoped_route_config of this PerXdsConfig.
        :rtype: ScopedRoutesConfigDump
        """
        return self._scoped_route_config

    @scoped_route_config.setter
    def scoped_route_config(self, scoped_route_config):
        """Sets the scoped_route_config of this PerXdsConfig.


        :param scoped_route_config: The scoped_route_config of this PerXdsConfig.
        :type scoped_route_config: ScopedRoutesConfigDump
        """

        self._scoped_route_config = scoped_route_config

    @property
    def status(self):
        """Gets the status of this PerXdsConfig.

        Config status generated by management servers. Will not be present if the CSDS server is an xDS client.

        :return: The status of this PerXdsConfig.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PerXdsConfig.

        Config status generated by management servers. Will not be present if the CSDS server is an xDS client.

        :param status: The status of this PerXdsConfig.
        :type status: str
        """
        allowed_values = ["UNKNOWN", "SYNCED", "NOT_SENT", "STALE", "ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
