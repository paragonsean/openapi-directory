# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dynamic_listener import DynamicListener
from openapi_server.models.static_listener import StaticListener
from openapi_server import util


class ListenersConfigDump(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dynamic_listeners: List[DynamicListener]=None, static_listeners: List[StaticListener]=None, version_info: str=None):
        """ListenersConfigDump - a model defined in OpenAPI

        :param dynamic_listeners: The dynamic_listeners of this ListenersConfigDump.
        :param static_listeners: The static_listeners of this ListenersConfigDump.
        :param version_info: The version_info of this ListenersConfigDump.
        """
        self.openapi_types = {
            'dynamic_listeners': List[DynamicListener],
            'static_listeners': List[StaticListener],
            'version_info': str
        }

        self.attribute_map = {
            'dynamic_listeners': 'dynamicListeners',
            'static_listeners': 'staticListeners',
            'version_info': 'versionInfo'
        }

        self._dynamic_listeners = dynamic_listeners
        self._static_listeners = static_listeners
        self._version_info = version_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListenersConfigDump':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListenersConfigDump of this ListenersConfigDump.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dynamic_listeners(self):
        """Gets the dynamic_listeners of this ListenersConfigDump.

        State for any warming, active, or draining listeners.

        :return: The dynamic_listeners of this ListenersConfigDump.
        :rtype: List[DynamicListener]
        """
        return self._dynamic_listeners

    @dynamic_listeners.setter
    def dynamic_listeners(self, dynamic_listeners):
        """Sets the dynamic_listeners of this ListenersConfigDump.

        State for any warming, active, or draining listeners.

        :param dynamic_listeners: The dynamic_listeners of this ListenersConfigDump.
        :type dynamic_listeners: List[DynamicListener]
        """

        self._dynamic_listeners = dynamic_listeners

    @property
    def static_listeners(self):
        """Gets the static_listeners of this ListenersConfigDump.

        The statically loaded listener configs.

        :return: The static_listeners of this ListenersConfigDump.
        :rtype: List[StaticListener]
        """
        return self._static_listeners

    @static_listeners.setter
    def static_listeners(self, static_listeners):
        """Sets the static_listeners of this ListenersConfigDump.

        The statically loaded listener configs.

        :param static_listeners: The static_listeners of this ListenersConfigDump.
        :type static_listeners: List[StaticListener]
        """

        self._static_listeners = static_listeners

    @property
    def version_info(self):
        """Gets the version_info of this ListenersConfigDump.

        This is the :ref:`version_info ` in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be \"\".

        :return: The version_info of this ListenersConfigDump.
        :rtype: str
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info):
        """Sets the version_info of this ListenersConfigDump.

        This is the :ref:`version_info ` in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be \"\".

        :param version_info: The version_info of this ListenersConfigDump.
        :type version_info: str
        """

        self._version_info = version_info
