# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvoyInternalAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_id: str=None, server_listener_name: str=None):
        """EnvoyInternalAddress - a model defined in OpenAPI

        :param endpoint_id: The endpoint_id of this EnvoyInternalAddress.
        :param server_listener_name: The server_listener_name of this EnvoyInternalAddress.
        """
        self.openapi_types = {
            'endpoint_id': str,
            'server_listener_name': str
        }

        self.attribute_map = {
            'endpoint_id': 'endpointId',
            'server_listener_name': 'serverListenerName'
        }

        self._endpoint_id = endpoint_id
        self._server_listener_name = server_listener_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvoyInternalAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvoyInternalAddress of this EnvoyInternalAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this EnvoyInternalAddress.

        Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener.

        :return: The endpoint_id of this EnvoyInternalAddress.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this EnvoyInternalAddress.

        Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener.

        :param endpoint_id: The endpoint_id of this EnvoyInternalAddress.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def server_listener_name(self):
        """Gets the server_listener_name of this EnvoyInternalAddress.

        Specifies the :ref:`name ` of the internal listener.

        :return: The server_listener_name of this EnvoyInternalAddress.
        :rtype: str
        """
        return self._server_listener_name

    @server_listener_name.setter
    def server_listener_name(self, server_listener_name):
        """Sets the server_listener_name of this EnvoyInternalAddress.

        Specifies the :ref:`name ` of the internal listener.

        :param server_listener_name: The server_listener_name of this EnvoyInternalAddress.
        :type server_listener_name: str
        """

        self._server_listener_name = server_listener_name
