# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.semantic_version import SemanticVersion
from openapi_server import util


class BuildVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, object]=None, version: SemanticVersion=None):
        """BuildVersion - a model defined in OpenAPI

        :param metadata: The metadata of this BuildVersion.
        :param version: The version of this BuildVersion.
        """
        self.openapi_types = {
            'metadata': Dict[str, object],
            'version': SemanticVersion
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'version': 'version'
        }

        self._metadata = metadata
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BuildVersion of this BuildVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this BuildVersion.

        Free-form build information. Envoy defines several well known keys in the source/common/version/version.h file

        :return: The metadata of this BuildVersion.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BuildVersion.

        Free-form build information. Envoy defines several well known keys in the source/common/version/version.h file

        :param metadata: The metadata of this BuildVersion.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def version(self):
        """Gets the version of this BuildVersion.


        :return: The version of this BuildVersion.
        :rtype: SemanticVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BuildVersion.


        :param version: The version of this BuildVersion.
        :type version: SemanticVersion
        """

        self._version = version
