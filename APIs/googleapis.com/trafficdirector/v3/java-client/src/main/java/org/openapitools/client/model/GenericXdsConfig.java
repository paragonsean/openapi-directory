/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.UpdateFailureState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenericXdsConfig is used to specify the config status and the dump of any xDS resource identified by their type URL. It is the generalized version of the now deprecated ListenersConfigDump, ClustersConfigDump etc [#next-free-field: 10]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericXdsConfig {
  /**
   * Per xDS resource status from the view of a xDS client
   */
  @JsonAdapter(ClientStatusEnum.Adapter.class)
  public enum ClientStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    REQUESTED("REQUESTED"),
    
    DOES_NOT_EXIST("DOES_NOT_EXIST"),
    
    ACKED("ACKED"),
    
    NACKED("NACKED");

    private String value;

    ClientStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientStatusEnum fromValue(String value) {
      for (ClientStatusEnum b : ClientStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_STATUS = "clientStatus";
  @SerializedName(SERIALIZED_NAME_CLIENT_STATUS)
  private ClientStatusEnum clientStatus;

  /**
   * Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.
   */
  @JsonAdapter(ConfigStatusEnum.Adapter.class)
  public enum ConfigStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    SYNCED("SYNCED"),
    
    NOT_SENT("NOT_SENT"),
    
    STALE("STALE"),
    
    ERROR("ERROR");

    private String value;

    ConfigStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConfigStatusEnum fromValue(String value) {
      for (ConfigStatusEnum b : ConfigStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConfigStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConfigStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConfigStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConfigStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConfigStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONFIG_STATUS = "configStatus";
  @SerializedName(SERIALIZED_NAME_CONFIG_STATUS)
  private ConfigStatusEnum configStatus;

  public static final String SERIALIZED_NAME_ERROR_STATE = "errorState";
  @SerializedName(SERIALIZED_NAME_ERROR_STATE)
  private UpdateFailureState errorState;

  public static final String SERIALIZED_NAME_IS_STATIC_RESOURCE = "isStaticResource";
  @SerializedName(SERIALIZED_NAME_IS_STATIC_RESOURCE)
  private Boolean isStaticResource;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE_URL = "typeUrl";
  @SerializedName(SERIALIZED_NAME_TYPE_URL)
  private String typeUrl;

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private String versionInfo;

  public static final String SERIALIZED_NAME_XDS_CONFIG = "xdsConfig";
  @SerializedName(SERIALIZED_NAME_XDS_CONFIG)
  private Map<String, Object> xdsConfig = new HashMap<>();

  public GenericXdsConfig() {
  }

  public GenericXdsConfig clientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
    return this;
  }

  /**
   * Per xDS resource status from the view of a xDS client
   * @return clientStatus
   */
  @javax.annotation.Nullable
  public ClientStatusEnum getClientStatus() {
    return clientStatus;
  }

  public void setClientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
  }


  public GenericXdsConfig configStatus(ConfigStatusEnum configStatus) {
    this.configStatus = configStatus;
    return this;
  }

  /**
   * Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.
   * @return configStatus
   */
  @javax.annotation.Nullable
  public ConfigStatusEnum getConfigStatus() {
    return configStatus;
  }

  public void setConfigStatus(ConfigStatusEnum configStatus) {
    this.configStatus = configStatus;
  }


  public GenericXdsConfig errorState(UpdateFailureState errorState) {
    this.errorState = errorState;
    return this;
  }

  /**
   * Get errorState
   * @return errorState
   */
  @javax.annotation.Nullable
  public UpdateFailureState getErrorState() {
    return errorState;
  }

  public void setErrorState(UpdateFailureState errorState) {
    this.errorState = errorState;
  }


  public GenericXdsConfig isStaticResource(Boolean isStaticResource) {
    this.isStaticResource = isStaticResource;
    return this;
  }

  /**
   * Is static resource is true if it is specified in the config supplied through the file at the startup.
   * @return isStaticResource
   */
  @javax.annotation.Nullable
  public Boolean getIsStaticResource() {
    return isStaticResource;
  }

  public void setIsStaticResource(Boolean isStaticResource) {
    this.isStaticResource = isStaticResource;
  }


  public GenericXdsConfig lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Timestamp when the xDS resource was last updated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public GenericXdsConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the xDS resource
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GenericXdsConfig typeUrl(String typeUrl) {
    this.typeUrl = typeUrl;
    return this;
  }

  /**
   * Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
   * @return typeUrl
   */
  @javax.annotation.Nullable
  public String getTypeUrl() {
    return typeUrl;
  }

  public void setTypeUrl(String typeUrl) {
    this.typeUrl = typeUrl;
  }


  public GenericXdsConfig versionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * This is the :ref:&#x60;version_info &#x60; in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \&quot;\&quot;
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public String getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
  }


  public GenericXdsConfig xdsConfig(Map<String, Object> xdsConfig) {
    this.xdsConfig = xdsConfig;
    return this;
  }

  public GenericXdsConfig putXdsConfigItem(String key, Object xdsConfigItem) {
    if (this.xdsConfig == null) {
      this.xdsConfig = new HashMap<>();
    }
    this.xdsConfig.put(key, xdsConfigItem);
    return this;
  }

  /**
   * The xDS resource config. Actual content depends on the type
   * @return xdsConfig
   */
  @javax.annotation.Nullable
  public Map<String, Object> getXdsConfig() {
    return xdsConfig;
  }

  public void setXdsConfig(Map<String, Object> xdsConfig) {
    this.xdsConfig = xdsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericXdsConfig genericXdsConfig = (GenericXdsConfig) o;
    return Objects.equals(this.clientStatus, genericXdsConfig.clientStatus) &&
        Objects.equals(this.configStatus, genericXdsConfig.configStatus) &&
        Objects.equals(this.errorState, genericXdsConfig.errorState) &&
        Objects.equals(this.isStaticResource, genericXdsConfig.isStaticResource) &&
        Objects.equals(this.lastUpdated, genericXdsConfig.lastUpdated) &&
        Objects.equals(this.name, genericXdsConfig.name) &&
        Objects.equals(this.typeUrl, genericXdsConfig.typeUrl) &&
        Objects.equals(this.versionInfo, genericXdsConfig.versionInfo) &&
        Objects.equals(this.xdsConfig, genericXdsConfig.xdsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientStatus, configStatus, errorState, isStaticResource, lastUpdated, name, typeUrl, versionInfo, xdsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericXdsConfig {\n");
    sb.append("    clientStatus: ").append(toIndentedString(clientStatus)).append("\n");
    sb.append("    configStatus: ").append(toIndentedString(configStatus)).append("\n");
    sb.append("    errorState: ").append(toIndentedString(errorState)).append("\n");
    sb.append("    isStaticResource: ").append(toIndentedString(isStaticResource)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeUrl: ").append(toIndentedString(typeUrl)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("    xdsConfig: ").append(toIndentedString(xdsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientStatus");
    openapiFields.add("configStatus");
    openapiFields.add("errorState");
    openapiFields.add("isStaticResource");
    openapiFields.add("lastUpdated");
    openapiFields.add("name");
    openapiFields.add("typeUrl");
    openapiFields.add("versionInfo");
    openapiFields.add("xdsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericXdsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericXdsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericXdsConfig is not found in the empty JSON string", GenericXdsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericXdsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericXdsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) && !jsonObj.get("clientStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientStatus").toString()));
      }
      // validate the optional field `clientStatus`
      if (jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) {
        ClientStatusEnum.validateJsonElement(jsonObj.get("clientStatus"));
      }
      if ((jsonObj.get("configStatus") != null && !jsonObj.get("configStatus").isJsonNull()) && !jsonObj.get("configStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configStatus").toString()));
      }
      // validate the optional field `configStatus`
      if (jsonObj.get("configStatus") != null && !jsonObj.get("configStatus").isJsonNull()) {
        ConfigStatusEnum.validateJsonElement(jsonObj.get("configStatus"));
      }
      // validate the optional field `errorState`
      if (jsonObj.get("errorState") != null && !jsonObj.get("errorState").isJsonNull()) {
        UpdateFailureState.validateJsonElement(jsonObj.get("errorState"));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("typeUrl") != null && !jsonObj.get("typeUrl").isJsonNull()) && !jsonObj.get("typeUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeUrl").toString()));
      }
      if ((jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) && !jsonObj.get("versionInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericXdsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericXdsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericXdsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericXdsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericXdsConfig>() {
           @Override
           public void write(JsonWriter out, GenericXdsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericXdsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericXdsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericXdsConfig
   * @throws IOException if the JSON string is invalid with respect to GenericXdsConfig
   */
  public static GenericXdsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericXdsConfig.class);
  }

  /**
   * Convert an instance of GenericXdsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

