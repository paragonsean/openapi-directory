/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BuildVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Version and identification for an Envoy extension. [#next-free-field: 7]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Extension {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE_DESCRIPTOR = "typeDescriptor";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TYPE_DESCRIPTOR)
  private String typeDescriptor;

  public static final String SERIALIZED_NAME_TYPE_URLS = "typeUrls";
  @SerializedName(SERIALIZED_NAME_TYPE_URLS)
  private List<String> typeUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private BuildVersion version;

  public Extension() {
  }

  public Extension category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Category of the extension. Extension category names use reverse DNS notation. For instance \&quot;envoy.filters.listener\&quot; for Envoy&#39;s built-in listener filters or \&quot;com.acme.filters.http\&quot; for HTTP filters from acme.com vendor. [#comment:
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public Extension disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Indicates that the extension is present but was disabled via dynamic configuration.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Extension name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Deprecated
  public Extension typeDescriptor(String typeDescriptor) {
    this.typeDescriptor = typeDescriptor;
    return this;
  }

  /**
   * [#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:
   * @return typeDescriptor
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTypeDescriptor() {
    return typeDescriptor;
  }

  @Deprecated
  public void setTypeDescriptor(String typeDescriptor) {
    this.typeDescriptor = typeDescriptor;
  }


  public Extension typeUrls(List<String> typeUrls) {
    this.typeUrls = typeUrls;
    return this;
  }

  public Extension addTypeUrlsItem(String typeUrlsItem) {
    if (this.typeUrls == null) {
      this.typeUrls = new ArrayList<>();
    }
    this.typeUrls.add(typeUrlsItem);
    return this;
  }

  /**
   * Type URLs of extension configuration protos.
   * @return typeUrls
   */
  @javax.annotation.Nullable
  public List<String> getTypeUrls() {
    return typeUrls;
  }

  public void setTypeUrls(List<String> typeUrls) {
    this.typeUrls = typeUrls;
  }


  public Extension version(BuildVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public BuildVersion getVersion() {
    return version;
  }

  public void setVersion(BuildVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Extension extension = (Extension) o;
    return Objects.equals(this.category, extension.category) &&
        Objects.equals(this.disabled, extension.disabled) &&
        Objects.equals(this.name, extension.name) &&
        Objects.equals(this.typeDescriptor, extension.typeDescriptor) &&
        Objects.equals(this.typeUrls, extension.typeUrls) &&
        Objects.equals(this.version, extension.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, disabled, name, typeDescriptor, typeUrls, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Extension {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typeDescriptor: ").append(toIndentedString(typeDescriptor)).append("\n");
    sb.append("    typeUrls: ").append(toIndentedString(typeUrls)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("disabled");
    openapiFields.add("name");
    openapiFields.add("typeDescriptor");
    openapiFields.add("typeUrls");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Extension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Extension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Extension is not found in the empty JSON string", Extension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Extension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Extension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("typeDescriptor") != null && !jsonObj.get("typeDescriptor").isJsonNull()) && !jsonObj.get("typeDescriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeDescriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeDescriptor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("typeUrls") != null && !jsonObj.get("typeUrls").isJsonNull() && !jsonObj.get("typeUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeUrls` to be an array in the JSON string but got `%s`", jsonObj.get("typeUrls").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        BuildVersion.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Extension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Extension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Extension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Extension.class));

       return (TypeAdapter<T>) new TypeAdapter<Extension>() {
           @Override
           public void write(JsonWriter out, Extension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Extension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Extension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Extension
   * @throws IOException if the JSON string is invalid with respect to Extension
   */
  public static Extension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Extension.class);
  }

  /**
   * Convert an instance of Extension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

