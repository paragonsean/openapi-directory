/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DynamicEndpointConfig;
import org.openapitools.client.model.StaticEndpointConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Envoy&#39;s admin fill this message with all currently known endpoints. Endpoint configuration information can be used to recreate an Envoy configuration by populating all endpoints as static endpoints or by returning them in an EDS response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointsConfigDump {
  public static final String SERIALIZED_NAME_DYNAMIC_ENDPOINT_CONFIGS = "dynamicEndpointConfigs";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_ENDPOINT_CONFIGS)
  private List<DynamicEndpointConfig> dynamicEndpointConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATIC_ENDPOINT_CONFIGS = "staticEndpointConfigs";
  @SerializedName(SERIALIZED_NAME_STATIC_ENDPOINT_CONFIGS)
  private List<StaticEndpointConfig> staticEndpointConfigs = new ArrayList<>();

  public EndpointsConfigDump() {
  }

  public EndpointsConfigDump dynamicEndpointConfigs(List<DynamicEndpointConfig> dynamicEndpointConfigs) {
    this.dynamicEndpointConfigs = dynamicEndpointConfigs;
    return this;
  }

  public EndpointsConfigDump addDynamicEndpointConfigsItem(DynamicEndpointConfig dynamicEndpointConfigsItem) {
    if (this.dynamicEndpointConfigs == null) {
      this.dynamicEndpointConfigs = new ArrayList<>();
    }
    this.dynamicEndpointConfigs.add(dynamicEndpointConfigsItem);
    return this;
  }

  /**
   * The dynamically loaded endpoint configs.
   * @return dynamicEndpointConfigs
   */
  @javax.annotation.Nullable
  public List<DynamicEndpointConfig> getDynamicEndpointConfigs() {
    return dynamicEndpointConfigs;
  }

  public void setDynamicEndpointConfigs(List<DynamicEndpointConfig> dynamicEndpointConfigs) {
    this.dynamicEndpointConfigs = dynamicEndpointConfigs;
  }


  public EndpointsConfigDump staticEndpointConfigs(List<StaticEndpointConfig> staticEndpointConfigs) {
    this.staticEndpointConfigs = staticEndpointConfigs;
    return this;
  }

  public EndpointsConfigDump addStaticEndpointConfigsItem(StaticEndpointConfig staticEndpointConfigsItem) {
    if (this.staticEndpointConfigs == null) {
      this.staticEndpointConfigs = new ArrayList<>();
    }
    this.staticEndpointConfigs.add(staticEndpointConfigsItem);
    return this;
  }

  /**
   * The statically loaded endpoint configs.
   * @return staticEndpointConfigs
   */
  @javax.annotation.Nullable
  public List<StaticEndpointConfig> getStaticEndpointConfigs() {
    return staticEndpointConfigs;
  }

  public void setStaticEndpointConfigs(List<StaticEndpointConfig> staticEndpointConfigs) {
    this.staticEndpointConfigs = staticEndpointConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointsConfigDump endpointsConfigDump = (EndpointsConfigDump) o;
    return Objects.equals(this.dynamicEndpointConfigs, endpointsConfigDump.dynamicEndpointConfigs) &&
        Objects.equals(this.staticEndpointConfigs, endpointsConfigDump.staticEndpointConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dynamicEndpointConfigs, staticEndpointConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointsConfigDump {\n");
    sb.append("    dynamicEndpointConfigs: ").append(toIndentedString(dynamicEndpointConfigs)).append("\n");
    sb.append("    staticEndpointConfigs: ").append(toIndentedString(staticEndpointConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dynamicEndpointConfigs");
    openapiFields.add("staticEndpointConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointsConfigDump
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointsConfigDump.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointsConfigDump is not found in the empty JSON string", EndpointsConfigDump.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointsConfigDump.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointsConfigDump` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("dynamicEndpointConfigs") != null && !jsonObj.get("dynamicEndpointConfigs").isJsonNull()) {
        JsonArray jsonArraydynamicEndpointConfigs = jsonObj.getAsJsonArray("dynamicEndpointConfigs");
        if (jsonArraydynamicEndpointConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dynamicEndpointConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dynamicEndpointConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("dynamicEndpointConfigs").toString()));
          }

          // validate the optional field `dynamicEndpointConfigs` (array)
          for (int i = 0; i < jsonArraydynamicEndpointConfigs.size(); i++) {
            DynamicEndpointConfig.validateJsonElement(jsonArraydynamicEndpointConfigs.get(i));
          };
        }
      }
      if (jsonObj.get("staticEndpointConfigs") != null && !jsonObj.get("staticEndpointConfigs").isJsonNull()) {
        JsonArray jsonArraystaticEndpointConfigs = jsonObj.getAsJsonArray("staticEndpointConfigs");
        if (jsonArraystaticEndpointConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("staticEndpointConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `staticEndpointConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("staticEndpointConfigs").toString()));
          }

          // validate the optional field `staticEndpointConfigs` (array)
          for (int i = 0; i < jsonArraystaticEndpointConfigs.size(); i++) {
            StaticEndpointConfig.validateJsonElement(jsonArraystaticEndpointConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointsConfigDump.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointsConfigDump' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointsConfigDump> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointsConfigDump.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointsConfigDump>() {
           @Override
           public void write(JsonWriter out, EndpointsConfigDump value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointsConfigDump read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointsConfigDump given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointsConfigDump
   * @throws IOException if the JSON string is invalid with respect to EndpointsConfigDump
   */
  public static EndpointsConfigDump fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointsConfigDump.class);
  }

  /**
   * Convert an instance of EndpointsConfigDump to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

