/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.UpdateFailureState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * [#next-free-field: 7]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DynamicScopedRouteConfigs {
  /**
   * The client status of this resource. [#not-implemented-hide:]
   */
  @JsonAdapter(ClientStatusEnum.Adapter.class)
  public enum ClientStatusEnum {
    UNKNOWN("UNKNOWN"),
    
    REQUESTED("REQUESTED"),
    
    DOES_NOT_EXIST("DOES_NOT_EXIST"),
    
    ACKED("ACKED"),
    
    NACKED("NACKED");

    private String value;

    ClientStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientStatusEnum fromValue(String value) {
      for (ClientStatusEnum b : ClientStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_STATUS = "clientStatus";
  @SerializedName(SERIALIZED_NAME_CLIENT_STATUS)
  private ClientStatusEnum clientStatus;

  public static final String SERIALIZED_NAME_ERROR_STATE = "errorState";
  @SerializedName(SERIALIZED_NAME_ERROR_STATE)
  private UpdateFailureState errorState;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCOPED_ROUTE_CONFIGS = "scopedRouteConfigs";
  @SerializedName(SERIALIZED_NAME_SCOPED_ROUTE_CONFIGS)
  private List<Map<String, Object>> scopedRouteConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION_INFO = "versionInfo";
  @SerializedName(SERIALIZED_NAME_VERSION_INFO)
  private String versionInfo;

  public DynamicScopedRouteConfigs() {
  }

  public DynamicScopedRouteConfigs clientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
    return this;
  }

  /**
   * The client status of this resource. [#not-implemented-hide:]
   * @return clientStatus
   */
  @javax.annotation.Nullable
  public ClientStatusEnum getClientStatus() {
    return clientStatus;
  }

  public void setClientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
  }


  public DynamicScopedRouteConfigs errorState(UpdateFailureState errorState) {
    this.errorState = errorState;
    return this;
  }

  /**
   * Get errorState
   * @return errorState
   */
  @javax.annotation.Nullable
  public UpdateFailureState getErrorState() {
    return errorState;
  }

  public void setErrorState(UpdateFailureState errorState) {
    this.errorState = errorState;
  }


  public DynamicScopedRouteConfigs lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The timestamp when the scoped route config set was last updated.
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public DynamicScopedRouteConfigs name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name assigned to the scoped route configurations.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DynamicScopedRouteConfigs scopedRouteConfigs(List<Map<String, Object>> scopedRouteConfigs) {
    this.scopedRouteConfigs = scopedRouteConfigs;
    return this;
  }

  public DynamicScopedRouteConfigs addScopedRouteConfigsItem(Map<String, Object> scopedRouteConfigsItem) {
    if (this.scopedRouteConfigs == null) {
      this.scopedRouteConfigs = new ArrayList<>();
    }
    this.scopedRouteConfigs.add(scopedRouteConfigsItem);
    return this;
  }

  /**
   * The scoped route configurations.
   * @return scopedRouteConfigs
   */
  @javax.annotation.Nullable
  public List<Map<String, Object>> getScopedRouteConfigs() {
    return scopedRouteConfigs;
  }

  public void setScopedRouteConfigs(List<Map<String, Object>> scopedRouteConfigs) {
    this.scopedRouteConfigs = scopedRouteConfigs;
  }


  public DynamicScopedRouteConfigs versionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
    return this;
  }

  /**
   * This is the per-resource version information. This version is currently taken from the :ref:&#x60;version_info &#x60; field at the time that the scoped routes configuration was loaded.
   * @return versionInfo
   */
  @javax.annotation.Nullable
  public String getVersionInfo() {
    return versionInfo;
  }

  public void setVersionInfo(String versionInfo) {
    this.versionInfo = versionInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DynamicScopedRouteConfigs dynamicScopedRouteConfigs = (DynamicScopedRouteConfigs) o;
    return Objects.equals(this.clientStatus, dynamicScopedRouteConfigs.clientStatus) &&
        Objects.equals(this.errorState, dynamicScopedRouteConfigs.errorState) &&
        Objects.equals(this.lastUpdated, dynamicScopedRouteConfigs.lastUpdated) &&
        Objects.equals(this.name, dynamicScopedRouteConfigs.name) &&
        Objects.equals(this.scopedRouteConfigs, dynamicScopedRouteConfigs.scopedRouteConfigs) &&
        Objects.equals(this.versionInfo, dynamicScopedRouteConfigs.versionInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientStatus, errorState, lastUpdated, name, scopedRouteConfigs, versionInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DynamicScopedRouteConfigs {\n");
    sb.append("    clientStatus: ").append(toIndentedString(clientStatus)).append("\n");
    sb.append("    errorState: ").append(toIndentedString(errorState)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scopedRouteConfigs: ").append(toIndentedString(scopedRouteConfigs)).append("\n");
    sb.append("    versionInfo: ").append(toIndentedString(versionInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientStatus");
    openapiFields.add("errorState");
    openapiFields.add("lastUpdated");
    openapiFields.add("name");
    openapiFields.add("scopedRouteConfigs");
    openapiFields.add("versionInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DynamicScopedRouteConfigs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DynamicScopedRouteConfigs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DynamicScopedRouteConfigs is not found in the empty JSON string", DynamicScopedRouteConfigs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DynamicScopedRouteConfigs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DynamicScopedRouteConfigs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) && !jsonObj.get("clientStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientStatus").toString()));
      }
      // validate the optional field `clientStatus`
      if (jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) {
        ClientStatusEnum.validateJsonElement(jsonObj.get("clientStatus"));
      }
      // validate the optional field `errorState`
      if (jsonObj.get("errorState") != null && !jsonObj.get("errorState").isJsonNull()) {
        UpdateFailureState.validateJsonElement(jsonObj.get("errorState"));
      }
      if ((jsonObj.get("lastUpdated") != null && !jsonObj.get("lastUpdated").isJsonNull()) && !jsonObj.get("lastUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUpdated").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("scopedRouteConfigs") != null && !jsonObj.get("scopedRouteConfigs").isJsonNull() && !jsonObj.get("scopedRouteConfigs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopedRouteConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("scopedRouteConfigs").toString()));
      }
      if ((jsonObj.get("versionInfo") != null && !jsonObj.get("versionInfo").isJsonNull()) && !jsonObj.get("versionInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionInfo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DynamicScopedRouteConfigs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DynamicScopedRouteConfigs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DynamicScopedRouteConfigs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DynamicScopedRouteConfigs.class));

       return (TypeAdapter<T>) new TypeAdapter<DynamicScopedRouteConfigs>() {
           @Override
           public void write(JsonWriter out, DynamicScopedRouteConfigs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DynamicScopedRouteConfigs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DynamicScopedRouteConfigs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DynamicScopedRouteConfigs
   * @throws IOException if the JSON string is invalid with respect to DynamicScopedRouteConfigs
   */
  public static DynamicScopedRouteConfigs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DynamicScopedRouteConfigs.class);
  }

  /**
   * Convert an instance of DynamicScopedRouteConfigs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

