/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BuildVersion;
import org.openapitools.client.model.ContextParams;
import org.openapitools.client.model.Extension;
import org.openapitools.client.model.Locality;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 13]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Node {
  public static final String SERIALIZED_NAME_CLIENT_FEATURES = "clientFeatures";
  @SerializedName(SERIALIZED_NAME_CLIENT_FEATURES)
  private List<String> clientFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_DYNAMIC_PARAMETERS = "dynamicParameters";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_PARAMETERS)
  private Map<String, ContextParams> dynamicParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTENSIONS = "extensions";
  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<Extension> extensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LISTENING_ADDRESSES = "listeningAddresses";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LISTENING_ADDRESSES)
  private List<Address> listeningAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCALITY = "locality";
  @SerializedName(SERIALIZED_NAME_LOCALITY)
  private Locality locality;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_USER_AGENT_BUILD_VERSION = "userAgentBuildVersion";
  @SerializedName(SERIALIZED_NAME_USER_AGENT_BUILD_VERSION)
  private BuildVersion userAgentBuildVersion;

  public static final String SERIALIZED_NAME_USER_AGENT_NAME = "userAgentName";
  @SerializedName(SERIALIZED_NAME_USER_AGENT_NAME)
  private String userAgentName;

  public static final String SERIALIZED_NAME_USER_AGENT_VERSION = "userAgentVersion";
  @SerializedName(SERIALIZED_NAME_USER_AGENT_VERSION)
  private String userAgentVersion;

  public Node() {
  }

  public Node clientFeatures(List<String> clientFeatures) {
    this.clientFeatures = clientFeatures;
    return this;
  }

  public Node addClientFeaturesItem(String clientFeaturesItem) {
    if (this.clientFeatures == null) {
      this.clientFeatures = new ArrayList<>();
    }
    this.clientFeatures.add(clientFeaturesItem);
    return this;
  }

  /**
   * Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example &#x60;&#x60;com.acme.feature&#x60;&#x60;. See :ref:&#x60;the list of features &#x60; that xDS client may support.
   * @return clientFeatures
   */
  @javax.annotation.Nullable
  public List<String> getClientFeatures() {
    return clientFeatures;
  }

  public void setClientFeatures(List<String> clientFeatures) {
    this.clientFeatures = clientFeatures;
  }


  public Node cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:&#x60;statsd &#x60;, :ref:&#x60;health check cluster verification &#x60;, :ref:&#x60;runtime override directory &#x60;, :ref:&#x60;user agent addition &#x60;, :ref:&#x60;HTTP global rate limiting &#x60;, :ref:&#x60;CDS &#x60;, and :ref:&#x60;HTTP tracing &#x60;, either in this message or via :option:&#x60;--service-cluster&#x60;.
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public Node dynamicParameters(Map<String, ContextParams> dynamicParameters) {
    this.dynamicParameters = dynamicParameters;
    return this;
  }

  public Node putDynamicParametersItem(String key, ContextParams dynamicParametersItem) {
    if (this.dynamicParameters == null) {
      this.dynamicParameters = new HashMap<>();
    }
    this.dynamicParameters.put(key, dynamicParametersItem);
    return this;
  }

  /**
   * Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike other fields in this message). For example, the xDS client may have a shard identifier that changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the dynamic context on the Server::Instance&#39;s LocalInfo context provider. The shard ID dynamic parameter then appears in this field during future discovery requests.
   * @return dynamicParameters
   */
  @javax.annotation.Nullable
  public Map<String, ContextParams> getDynamicParameters() {
    return dynamicParameters;
  }

  public void setDynamicParameters(Map<String, ContextParams> dynamicParameters) {
    this.dynamicParameters = dynamicParameters;
  }


  public Node extensions(List<Extension> extensions) {
    this.extensions = extensions;
    return this;
  }

  public Node addExtensionsItem(Extension extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new ArrayList<>();
    }
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * List of extensions and their versions supported by the node.
   * @return extensions
   */
  @javax.annotation.Nullable
  public List<Extension> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<Extension> extensions) {
    this.extensions = extensions;
  }


  public Node id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:&#x60;statsd &#x60;, :ref:&#x60;CDS &#x60;, and :ref:&#x60;HTTP tracing &#x60;, either in this message or via :option:&#x60;--service-node&#x60;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  @Deprecated
  public Node listeningAddresses(List<Address> listeningAddresses) {
    this.listeningAddresses = listeningAddresses;
    return this;
  }

  public Node addListeningAddressesItem(Address listeningAddressesItem) {
    if (this.listeningAddresses == null) {
      this.listeningAddresses = new ArrayList<>();
    }
    this.listeningAddresses.add(listeningAddressesItem);
    return this;
  }

  /**
   * Known listening ports on the node as a generic hint to the management server for filtering :ref:&#x60;listeners &#x60; to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress &#x60;&#x60;(0.0.0.0,80)&#x60;&#x60;. The field is optional and just a hint.
   * @return listeningAddresses
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<Address> getListeningAddresses() {
    return listeningAddresses;
  }

  @Deprecated
  public void setListeningAddresses(List<Address> listeningAddresses) {
    this.listeningAddresses = listeningAddresses;
  }


  public Node locality(Locality locality) {
    this.locality = locality;
    return this;
  }

  /**
   * Get locality
   * @return locality
   */
  @javax.annotation.Nullable
  public Locality getLocality() {
    return locality;
  }

  public void setLocality(Locality locality) {
    this.locality = locality;
  }


  public Node metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Node putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public Node userAgentBuildVersion(BuildVersion userAgentBuildVersion) {
    this.userAgentBuildVersion = userAgentBuildVersion;
    return this;
  }

  /**
   * Get userAgentBuildVersion
   * @return userAgentBuildVersion
   */
  @javax.annotation.Nullable
  public BuildVersion getUserAgentBuildVersion() {
    return userAgentBuildVersion;
  }

  public void setUserAgentBuildVersion(BuildVersion userAgentBuildVersion) {
    this.userAgentBuildVersion = userAgentBuildVersion;
  }


  public Node userAgentName(String userAgentName) {
    this.userAgentName = userAgentName;
    return this;
  }

  /**
   * Free-form string that identifies the entity requesting config. E.g. \&quot;envoy\&quot; or \&quot;grpc\&quot;
   * @return userAgentName
   */
  @javax.annotation.Nullable
  public String getUserAgentName() {
    return userAgentName;
  }

  public void setUserAgentName(String userAgentName) {
    this.userAgentName = userAgentName;
  }


  public Node userAgentVersion(String userAgentVersion) {
    this.userAgentVersion = userAgentVersion;
    return this;
  }

  /**
   * Free-form string that identifies the version of the entity requesting config. E.g. \&quot;1.12.2\&quot; or \&quot;abcd1234\&quot;, or \&quot;SpecialEnvoyBuild\&quot;
   * @return userAgentVersion
   */
  @javax.annotation.Nullable
  public String getUserAgentVersion() {
    return userAgentVersion;
  }

  public void setUserAgentVersion(String userAgentVersion) {
    this.userAgentVersion = userAgentVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.clientFeatures, node.clientFeatures) &&
        Objects.equals(this.cluster, node.cluster) &&
        Objects.equals(this.dynamicParameters, node.dynamicParameters) &&
        Objects.equals(this.extensions, node.extensions) &&
        Objects.equals(this.id, node.id) &&
        Objects.equals(this.listeningAddresses, node.listeningAddresses) &&
        Objects.equals(this.locality, node.locality) &&
        Objects.equals(this.metadata, node.metadata) &&
        Objects.equals(this.userAgentBuildVersion, node.userAgentBuildVersion) &&
        Objects.equals(this.userAgentName, node.userAgentName) &&
        Objects.equals(this.userAgentVersion, node.userAgentVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientFeatures, cluster, dynamicParameters, extensions, id, listeningAddresses, locality, metadata, userAgentBuildVersion, userAgentName, userAgentVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    clientFeatures: ").append(toIndentedString(clientFeatures)).append("\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    dynamicParameters: ").append(toIndentedString(dynamicParameters)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    listeningAddresses: ").append(toIndentedString(listeningAddresses)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    userAgentBuildVersion: ").append(toIndentedString(userAgentBuildVersion)).append("\n");
    sb.append("    userAgentName: ").append(toIndentedString(userAgentName)).append("\n");
    sb.append("    userAgentVersion: ").append(toIndentedString(userAgentVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientFeatures");
    openapiFields.add("cluster");
    openapiFields.add("dynamicParameters");
    openapiFields.add("extensions");
    openapiFields.add("id");
    openapiFields.add("listeningAddresses");
    openapiFields.add("locality");
    openapiFields.add("metadata");
    openapiFields.add("userAgentBuildVersion");
    openapiFields.add("userAgentName");
    openapiFields.add("userAgentVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Node
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Node.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Node is not found in the empty JSON string", Node.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Node.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Node` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientFeatures") != null && !jsonObj.get("clientFeatures").isJsonNull() && !jsonObj.get("clientFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("clientFeatures").toString()));
      }
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if (jsonObj.get("extensions") != null && !jsonObj.get("extensions").isJsonNull()) {
        JsonArray jsonArrayextensions = jsonObj.getAsJsonArray("extensions");
        if (jsonArrayextensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extensions` to be an array in the JSON string but got `%s`", jsonObj.get("extensions").toString()));
          }

          // validate the optional field `extensions` (array)
          for (int i = 0; i < jsonArrayextensions.size(); i++) {
            Extension.validateJsonElement(jsonArrayextensions.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("listeningAddresses") != null && !jsonObj.get("listeningAddresses").isJsonNull()) {
        JsonArray jsonArraylisteningAddresses = jsonObj.getAsJsonArray("listeningAddresses");
        if (jsonArraylisteningAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listeningAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listeningAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("listeningAddresses").toString()));
          }

          // validate the optional field `listeningAddresses` (array)
          for (int i = 0; i < jsonArraylisteningAddresses.size(); i++) {
            Address.validateJsonElement(jsonArraylisteningAddresses.get(i));
          };
        }
      }
      // validate the optional field `locality`
      if (jsonObj.get("locality") != null && !jsonObj.get("locality").isJsonNull()) {
        Locality.validateJsonElement(jsonObj.get("locality"));
      }
      // validate the optional field `userAgentBuildVersion`
      if (jsonObj.get("userAgentBuildVersion") != null && !jsonObj.get("userAgentBuildVersion").isJsonNull()) {
        BuildVersion.validateJsonElement(jsonObj.get("userAgentBuildVersion"));
      }
      if ((jsonObj.get("userAgentName") != null && !jsonObj.get("userAgentName").isJsonNull()) && !jsonObj.get("userAgentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgentName").toString()));
      }
      if ((jsonObj.get("userAgentVersion") != null && !jsonObj.get("userAgentVersion").isJsonNull()) && !jsonObj.get("userAgentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgentVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Node.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Node' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Node> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Node.class));

       return (TypeAdapter<T>) new TypeAdapter<Node>() {
           @Override
           public void write(JsonWriter out, Node value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Node read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Node given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Node
   * @throws IOException if the JSON string is invalid with respect to Node
   */
  public static Node fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Node.class);
  }

  /**
   * Convert an instance of Node to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

