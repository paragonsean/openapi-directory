/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClustersConfigDump;
import org.openapitools.client.model.EndpointsConfigDump;
import org.openapitools.client.model.ListenersConfigDump;
import org.openapitools.client.model.RoutesConfigDump;
import org.openapitools.client.model.ScopedRoutesConfigDump;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detailed config (per xDS) with status. [#next-free-field: 8]
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerXdsConfig {
  /**
   * Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:&#x60;ClientResourceStatus &#x60; for per-resource config status instead.
   */
  @JsonAdapter(ClientStatusEnum.Adapter.class)
  public enum ClientStatusEnum {
    UNKNOWN("CLIENT_UNKNOWN"),
    
    REQUESTED("CLIENT_REQUESTED"),
    
    ACKED("CLIENT_ACKED"),
    
    NACKED("CLIENT_NACKED");

    private String value;

    ClientStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientStatusEnum fromValue(String value) {
      for (ClientStatusEnum b : ClientStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_STATUS = "clientStatus";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CLIENT_STATUS)
  private ClientStatusEnum clientStatus;

  public static final String SERIALIZED_NAME_CLUSTER_CONFIG = "clusterConfig";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CONFIG)
  private ClustersConfigDump clusterConfig;

  public static final String SERIALIZED_NAME_ENDPOINT_CONFIG = "endpointConfig";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_CONFIG)
  private EndpointsConfigDump endpointConfig;

  public static final String SERIALIZED_NAME_LISTENER_CONFIG = "listenerConfig";
  @SerializedName(SERIALIZED_NAME_LISTENER_CONFIG)
  private ListenersConfigDump listenerConfig;

  public static final String SERIALIZED_NAME_ROUTE_CONFIG = "routeConfig";
  @SerializedName(SERIALIZED_NAME_ROUTE_CONFIG)
  private RoutesConfigDump routeConfig;

  public static final String SERIALIZED_NAME_SCOPED_ROUTE_CONFIG = "scopedRouteConfig";
  @SerializedName(SERIALIZED_NAME_SCOPED_ROUTE_CONFIG)
  private ScopedRoutesConfigDump scopedRouteConfig;

  /**
   * Config status generated by management servers. Will not be present if the CSDS server is an xDS client.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("UNKNOWN"),
    
    SYNCED("SYNCED"),
    
    NOT_SENT("NOT_SENT"),
    
    STALE("STALE"),
    
    ERROR("ERROR");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public PerXdsConfig() {
  }

  @Deprecated
  public PerXdsConfig clientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
    return this;
  }

  /**
   * Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:&#x60;ClientResourceStatus &#x60; for per-resource config status instead.
   * @return clientStatus
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public ClientStatusEnum getClientStatus() {
    return clientStatus;
  }

  @Deprecated
  public void setClientStatus(ClientStatusEnum clientStatus) {
    this.clientStatus = clientStatus;
  }


  public PerXdsConfig clusterConfig(ClustersConfigDump clusterConfig) {
    this.clusterConfig = clusterConfig;
    return this;
  }

  /**
   * Get clusterConfig
   * @return clusterConfig
   */
  @javax.annotation.Nullable
  public ClustersConfigDump getClusterConfig() {
    return clusterConfig;
  }

  public void setClusterConfig(ClustersConfigDump clusterConfig) {
    this.clusterConfig = clusterConfig;
  }


  public PerXdsConfig endpointConfig(EndpointsConfigDump endpointConfig) {
    this.endpointConfig = endpointConfig;
    return this;
  }

  /**
   * Get endpointConfig
   * @return endpointConfig
   */
  @javax.annotation.Nullable
  public EndpointsConfigDump getEndpointConfig() {
    return endpointConfig;
  }

  public void setEndpointConfig(EndpointsConfigDump endpointConfig) {
    this.endpointConfig = endpointConfig;
  }


  public PerXdsConfig listenerConfig(ListenersConfigDump listenerConfig) {
    this.listenerConfig = listenerConfig;
    return this;
  }

  /**
   * Get listenerConfig
   * @return listenerConfig
   */
  @javax.annotation.Nullable
  public ListenersConfigDump getListenerConfig() {
    return listenerConfig;
  }

  public void setListenerConfig(ListenersConfigDump listenerConfig) {
    this.listenerConfig = listenerConfig;
  }


  public PerXdsConfig routeConfig(RoutesConfigDump routeConfig) {
    this.routeConfig = routeConfig;
    return this;
  }

  /**
   * Get routeConfig
   * @return routeConfig
   */
  @javax.annotation.Nullable
  public RoutesConfigDump getRouteConfig() {
    return routeConfig;
  }

  public void setRouteConfig(RoutesConfigDump routeConfig) {
    this.routeConfig = routeConfig;
  }


  public PerXdsConfig scopedRouteConfig(ScopedRoutesConfigDump scopedRouteConfig) {
    this.scopedRouteConfig = scopedRouteConfig;
    return this;
  }

  /**
   * Get scopedRouteConfig
   * @return scopedRouteConfig
   */
  @javax.annotation.Nullable
  public ScopedRoutesConfigDump getScopedRouteConfig() {
    return scopedRouteConfig;
  }

  public void setScopedRouteConfig(ScopedRoutesConfigDump scopedRouteConfig) {
    this.scopedRouteConfig = scopedRouteConfig;
  }


  public PerXdsConfig status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Config status generated by management servers. Will not be present if the CSDS server is an xDS client.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerXdsConfig perXdsConfig = (PerXdsConfig) o;
    return Objects.equals(this.clientStatus, perXdsConfig.clientStatus) &&
        Objects.equals(this.clusterConfig, perXdsConfig.clusterConfig) &&
        Objects.equals(this.endpointConfig, perXdsConfig.endpointConfig) &&
        Objects.equals(this.listenerConfig, perXdsConfig.listenerConfig) &&
        Objects.equals(this.routeConfig, perXdsConfig.routeConfig) &&
        Objects.equals(this.scopedRouteConfig, perXdsConfig.scopedRouteConfig) &&
        Objects.equals(this.status, perXdsConfig.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientStatus, clusterConfig, endpointConfig, listenerConfig, routeConfig, scopedRouteConfig, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerXdsConfig {\n");
    sb.append("    clientStatus: ").append(toIndentedString(clientStatus)).append("\n");
    sb.append("    clusterConfig: ").append(toIndentedString(clusterConfig)).append("\n");
    sb.append("    endpointConfig: ").append(toIndentedString(endpointConfig)).append("\n");
    sb.append("    listenerConfig: ").append(toIndentedString(listenerConfig)).append("\n");
    sb.append("    routeConfig: ").append(toIndentedString(routeConfig)).append("\n");
    sb.append("    scopedRouteConfig: ").append(toIndentedString(scopedRouteConfig)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientStatus");
    openapiFields.add("clusterConfig");
    openapiFields.add("endpointConfig");
    openapiFields.add("listenerConfig");
    openapiFields.add("routeConfig");
    openapiFields.add("scopedRouteConfig");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerXdsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerXdsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerXdsConfig is not found in the empty JSON string", PerXdsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerXdsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerXdsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) && !jsonObj.get("clientStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientStatus").toString()));
      }
      // validate the optional field `clientStatus`
      if (jsonObj.get("clientStatus") != null && !jsonObj.get("clientStatus").isJsonNull()) {
        ClientStatusEnum.validateJsonElement(jsonObj.get("clientStatus"));
      }
      // validate the optional field `clusterConfig`
      if (jsonObj.get("clusterConfig") != null && !jsonObj.get("clusterConfig").isJsonNull()) {
        ClustersConfigDump.validateJsonElement(jsonObj.get("clusterConfig"));
      }
      // validate the optional field `endpointConfig`
      if (jsonObj.get("endpointConfig") != null && !jsonObj.get("endpointConfig").isJsonNull()) {
        EndpointsConfigDump.validateJsonElement(jsonObj.get("endpointConfig"));
      }
      // validate the optional field `listenerConfig`
      if (jsonObj.get("listenerConfig") != null && !jsonObj.get("listenerConfig").isJsonNull()) {
        ListenersConfigDump.validateJsonElement(jsonObj.get("listenerConfig"));
      }
      // validate the optional field `routeConfig`
      if (jsonObj.get("routeConfig") != null && !jsonObj.get("routeConfig").isJsonNull()) {
        RoutesConfigDump.validateJsonElement(jsonObj.get("routeConfig"));
      }
      // validate the optional field `scopedRouteConfig`
      if (jsonObj.get("scopedRouteConfig") != null && !jsonObj.get("scopedRouteConfig").isJsonNull()) {
        ScopedRoutesConfigDump.validateJsonElement(jsonObj.get("scopedRouteConfig"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerXdsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerXdsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerXdsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerXdsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PerXdsConfig>() {
           @Override
           public void write(JsonWriter out, PerXdsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerXdsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerXdsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerXdsConfig
   * @throws IOException if the JSON string is invalid with respect to PerXdsConfig
   */
  public static PerXdsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerXdsConfig.class);
  }

  /**
   * Convert an instance of PerXdsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

