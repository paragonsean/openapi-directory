/*
 * Traffic Director API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The address represents an envoy internal listener. [#comment: 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:31.211238-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnvoyInternalAddress {
  public static final String SERIALIZED_NAME_ENDPOINT_ID = "endpointId";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  private String endpointId;

  public static final String SERIALIZED_NAME_SERVER_LISTENER_NAME = "serverListenerName";
  @SerializedName(SERIALIZED_NAME_SERVER_LISTENER_NAME)
  private String serverListenerName;

  public EnvoyInternalAddress() {
  }

  public EnvoyInternalAddress endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener.
   * @return endpointId
   */
  @javax.annotation.Nullable
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }


  public EnvoyInternalAddress serverListenerName(String serverListenerName) {
    this.serverListenerName = serverListenerName;
    return this;
  }

  /**
   * Specifies the :ref:&#x60;name &#x60; of the internal listener.
   * @return serverListenerName
   */
  @javax.annotation.Nullable
  public String getServerListenerName() {
    return serverListenerName;
  }

  public void setServerListenerName(String serverListenerName) {
    this.serverListenerName = serverListenerName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnvoyInternalAddress envoyInternalAddress = (EnvoyInternalAddress) o;
    return Objects.equals(this.endpointId, envoyInternalAddress.endpointId) &&
        Objects.equals(this.serverListenerName, envoyInternalAddress.serverListenerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointId, serverListenerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnvoyInternalAddress {\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    serverListenerName: ").append(toIndentedString(serverListenerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointId");
    openapiFields.add("serverListenerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnvoyInternalAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnvoyInternalAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnvoyInternalAddress is not found in the empty JSON string", EnvoyInternalAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnvoyInternalAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnvoyInternalAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointId") != null && !jsonObj.get("endpointId").isJsonNull()) && !jsonObj.get("endpointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointId").toString()));
      }
      if ((jsonObj.get("serverListenerName") != null && !jsonObj.get("serverListenerName").isJsonNull()) && !jsonObj.get("serverListenerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverListenerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverListenerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnvoyInternalAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnvoyInternalAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnvoyInternalAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnvoyInternalAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<EnvoyInternalAddress>() {
           @Override
           public void write(JsonWriter out, EnvoyInternalAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnvoyInternalAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnvoyInternalAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnvoyInternalAddress
   * @throws IOException if the JSON string is invalid with respect to EnvoyInternalAddress
   */
  public static EnvoyInternalAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnvoyInternalAddress.class);
  }

  /**
   * Convert an instance of EnvoyInternalAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

