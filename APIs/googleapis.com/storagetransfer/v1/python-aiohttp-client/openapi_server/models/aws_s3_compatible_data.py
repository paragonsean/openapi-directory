# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_compatible_metadata import S3CompatibleMetadata
from openapi_server import util


class AwsS3CompatibleData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, endpoint: str=None, path: str=None, region: str=None, s3_metadata: S3CompatibleMetadata=None):
        """AwsS3CompatibleData - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this AwsS3CompatibleData.
        :param endpoint: The endpoint of this AwsS3CompatibleData.
        :param path: The path of this AwsS3CompatibleData.
        :param region: The region of this AwsS3CompatibleData.
        :param s3_metadata: The s3_metadata of this AwsS3CompatibleData.
        """
        self.openapi_types = {
            'bucket_name': str,
            'endpoint': str,
            'path': str,
            'region': str,
            's3_metadata': S3CompatibleMetadata
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'endpoint': 'endpoint',
            'path': 'path',
            'region': 'region',
            's3_metadata': 's3Metadata'
        }

        self._bucket_name = bucket_name
        self._endpoint = endpoint
        self._path = path
        self._region = region
        self._s3_metadata = s3_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsS3CompatibleData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsS3CompatibleData of this AwsS3CompatibleData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this AwsS3CompatibleData.

        Required. Specifies the name of the bucket.

        :return: The bucket_name of this AwsS3CompatibleData.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this AwsS3CompatibleData.

        Required. Specifies the name of the bucket.

        :param bucket_name: The bucket_name of this AwsS3CompatibleData.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def endpoint(self):
        """Gets the endpoint of this AwsS3CompatibleData.

        Required. Specifies the endpoint of the storage service.

        :return: The endpoint of this AwsS3CompatibleData.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this AwsS3CompatibleData.

        Required. Specifies the endpoint of the storage service.

        :param endpoint: The endpoint of this AwsS3CompatibleData.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def path(self):
        """Gets the path of this AwsS3CompatibleData.

        Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :return: The path of this AwsS3CompatibleData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AwsS3CompatibleData.

        Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :param path: The path of this AwsS3CompatibleData.
        :type path: str
        """

        self._path = path

    @property
    def region(self):
        """Gets the region of this AwsS3CompatibleData.

        Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.

        :return: The region of this AwsS3CompatibleData.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsS3CompatibleData.

        Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.

        :param region: The region of this AwsS3CompatibleData.
        :type region: str
        """

        self._region = region

    @property
    def s3_metadata(self):
        """Gets the s3_metadata of this AwsS3CompatibleData.


        :return: The s3_metadata of this AwsS3CompatibleData.
        :rtype: S3CompatibleMetadata
        """
        return self._s3_metadata

    @s3_metadata.setter
    def s3_metadata(self, s3_metadata):
        """Sets the s3_metadata of this AwsS3CompatibleData.


        :param s3_metadata: The s3_metadata of this AwsS3CompatibleData.
        :type s3_metadata: S3CompatibleMetadata
        """

        self._s3_metadata = s3_metadata
