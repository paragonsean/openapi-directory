# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_credentials import AzureCredentials
from openapi_server import util


class AzureBlobStorageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_credentials: AzureCredentials=None, container: str=None, credentials_secret: str=None, path: str=None, storage_account: str=None):
        """AzureBlobStorageData - a model defined in OpenAPI

        :param azure_credentials: The azure_credentials of this AzureBlobStorageData.
        :param container: The container of this AzureBlobStorageData.
        :param credentials_secret: The credentials_secret of this AzureBlobStorageData.
        :param path: The path of this AzureBlobStorageData.
        :param storage_account: The storage_account of this AzureBlobStorageData.
        """
        self.openapi_types = {
            'azure_credentials': AzureCredentials,
            'container': str,
            'credentials_secret': str,
            'path': str,
            'storage_account': str
        }

        self.attribute_map = {
            'azure_credentials': 'azureCredentials',
            'container': 'container',
            'credentials_secret': 'credentialsSecret',
            'path': 'path',
            'storage_account': 'storageAccount'
        }

        self._azure_credentials = azure_credentials
        self._container = container
        self._credentials_secret = credentials_secret
        self._path = path
        self._storage_account = storage_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AzureBlobStorageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AzureBlobStorageData of this AzureBlobStorageData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_credentials(self):
        """Gets the azure_credentials of this AzureBlobStorageData.


        :return: The azure_credentials of this AzureBlobStorageData.
        :rtype: AzureCredentials
        """
        return self._azure_credentials

    @azure_credentials.setter
    def azure_credentials(self, azure_credentials):
        """Sets the azure_credentials of this AzureBlobStorageData.


        :param azure_credentials: The azure_credentials of this AzureBlobStorageData.
        :type azure_credentials: AzureCredentials
        """

        self._azure_credentials = azure_credentials

    @property
    def container(self):
        """Gets the container of this AzureBlobStorageData.

        Required. The container to transfer from the Azure Storage account.

        :return: The container of this AzureBlobStorageData.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this AzureBlobStorageData.

        Required. The container to transfer from the Azure Storage account.

        :param container: The container of this AzureBlobStorageData.
        :type container: str
        """

        self._container = container

    @property
    def credentials_secret(self):
        """Gets the credentials_secret of this AzureBlobStorageData.

        Optional. The Resource name of a secret in Secret Manager. The Azure SAS token must be stored in Secret Manager in JSON format: { \"sas_token\" : \"SAS_TOKEN\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Microsoft Azure Blob Storage] (https://cloud.google.com/storage-transfer/docs/source-microsoft-azure#secret_manager) for more information. If `credentials_secret` is specified, do not specify azure_credentials. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`

        :return: The credentials_secret of this AzureBlobStorageData.
        :rtype: str
        """
        return self._credentials_secret

    @credentials_secret.setter
    def credentials_secret(self, credentials_secret):
        """Sets the credentials_secret of this AzureBlobStorageData.

        Optional. The Resource name of a secret in Secret Manager. The Azure SAS token must be stored in Secret Manager in JSON format: { \"sas_token\" : \"SAS_TOKEN\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Microsoft Azure Blob Storage] (https://cloud.google.com/storage-transfer/docs/source-microsoft-azure#secret_manager) for more information. If `credentials_secret` is specified, do not specify azure_credentials. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`

        :param credentials_secret: The credentials_secret of this AzureBlobStorageData.
        :type credentials_secret: str
        """

        self._credentials_secret = credentials_secret

    @property
    def path(self):
        """Gets the path of this AzureBlobStorageData.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :return: The path of this AzureBlobStorageData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AzureBlobStorageData.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :param path: The path of this AzureBlobStorageData.
        :type path: str
        """

        self._path = path

    @property
    def storage_account(self):
        """Gets the storage_account of this AzureBlobStorageData.

        Required. The name of the Azure Storage account.

        :return: The storage_account of this AzureBlobStorageData.
        :rtype: str
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this AzureBlobStorageData.

        Required. The name of the Azure Storage account.

        :param storage_account: The storage_account of this AzureBlobStorageData.
        :type storage_account: str
        """

        self._storage_account = storage_account
