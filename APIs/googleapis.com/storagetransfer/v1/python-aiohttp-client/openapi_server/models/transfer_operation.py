# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_summary import ErrorSummary
from openapi_server.models.logging_config import LoggingConfig
from openapi_server.models.notification_config import NotificationConfig
from openapi_server.models.transfer_counters import TransferCounters
from openapi_server.models.transfer_spec import TransferSpec
from openapi_server import util


class TransferOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, counters: TransferCounters=None, end_time: str=None, error_breakdowns: List[ErrorSummary]=None, logging_config: LoggingConfig=None, name: str=None, notification_config: NotificationConfig=None, project_id: str=None, start_time: str=None, status: str=None, transfer_job_name: str=None, transfer_spec: TransferSpec=None):
        """TransferOperation - a model defined in OpenAPI

        :param counters: The counters of this TransferOperation.
        :param end_time: The end_time of this TransferOperation.
        :param error_breakdowns: The error_breakdowns of this TransferOperation.
        :param logging_config: The logging_config of this TransferOperation.
        :param name: The name of this TransferOperation.
        :param notification_config: The notification_config of this TransferOperation.
        :param project_id: The project_id of this TransferOperation.
        :param start_time: The start_time of this TransferOperation.
        :param status: The status of this TransferOperation.
        :param transfer_job_name: The transfer_job_name of this TransferOperation.
        :param transfer_spec: The transfer_spec of this TransferOperation.
        """
        self.openapi_types = {
            'counters': TransferCounters,
            'end_time': str,
            'error_breakdowns': List[ErrorSummary],
            'logging_config': LoggingConfig,
            'name': str,
            'notification_config': NotificationConfig,
            'project_id': str,
            'start_time': str,
            'status': str,
            'transfer_job_name': str,
            'transfer_spec': TransferSpec
        }

        self.attribute_map = {
            'counters': 'counters',
            'end_time': 'endTime',
            'error_breakdowns': 'errorBreakdowns',
            'logging_config': 'loggingConfig',
            'name': 'name',
            'notification_config': 'notificationConfig',
            'project_id': 'projectId',
            'start_time': 'startTime',
            'status': 'status',
            'transfer_job_name': 'transferJobName',
            'transfer_spec': 'transferSpec'
        }

        self._counters = counters
        self._end_time = end_time
        self._error_breakdowns = error_breakdowns
        self._logging_config = logging_config
        self._name = name
        self._notification_config = notification_config
        self._project_id = project_id
        self._start_time = start_time
        self._status = status
        self._transfer_job_name = transfer_job_name
        self._transfer_spec = transfer_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferOperation of this TransferOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def counters(self):
        """Gets the counters of this TransferOperation.


        :return: The counters of this TransferOperation.
        :rtype: TransferCounters
        """
        return self._counters

    @counters.setter
    def counters(self, counters):
        """Sets the counters of this TransferOperation.


        :param counters: The counters of this TransferOperation.
        :type counters: TransferCounters
        """

        self._counters = counters

    @property
    def end_time(self):
        """Gets the end_time of this TransferOperation.

        End time of this transfer execution.

        :return: The end_time of this TransferOperation.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TransferOperation.

        End time of this transfer execution.

        :param end_time: The end_time of this TransferOperation.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error_breakdowns(self):
        """Gets the error_breakdowns of this TransferOperation.

        Summarizes errors encountered with sample error log entries.

        :return: The error_breakdowns of this TransferOperation.
        :rtype: List[ErrorSummary]
        """
        return self._error_breakdowns

    @error_breakdowns.setter
    def error_breakdowns(self, error_breakdowns):
        """Sets the error_breakdowns of this TransferOperation.

        Summarizes errors encountered with sample error log entries.

        :param error_breakdowns: The error_breakdowns of this TransferOperation.
        :type error_breakdowns: List[ErrorSummary]
        """

        self._error_breakdowns = error_breakdowns

    @property
    def logging_config(self):
        """Gets the logging_config of this TransferOperation.


        :return: The logging_config of this TransferOperation.
        :rtype: LoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this TransferOperation.


        :param logging_config: The logging_config of this TransferOperation.
        :type logging_config: LoggingConfig
        """

        self._logging_config = logging_config

    @property
    def name(self):
        """Gets the name of this TransferOperation.

        A globally unique ID assigned by the system.

        :return: The name of this TransferOperation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransferOperation.

        A globally unique ID assigned by the system.

        :param name: The name of this TransferOperation.
        :type name: str
        """

        self._name = name

    @property
    def notification_config(self):
        """Gets the notification_config of this TransferOperation.


        :return: The notification_config of this TransferOperation.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this TransferOperation.


        :param notification_config: The notification_config of this TransferOperation.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def project_id(self):
        """Gets the project_id of this TransferOperation.

        The ID of the Google Cloud project that owns the operation.

        :return: The project_id of this TransferOperation.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TransferOperation.

        The ID of the Google Cloud project that owns the operation.

        :param project_id: The project_id of this TransferOperation.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def start_time(self):
        """Gets the start_time of this TransferOperation.

        Start time of this transfer execution.

        :return: The start_time of this TransferOperation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TransferOperation.

        Start time of this transfer execution.

        :param start_time: The start_time of this TransferOperation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TransferOperation.

        Status of the transfer operation.

        :return: The status of this TransferOperation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransferOperation.

        Status of the transfer operation.

        :param status: The status of this TransferOperation.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "IN_PROGRESS", "PAUSED", "SUCCESS", "FAILED", "ABORTED", "QUEUED", "SUSPENDING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transfer_job_name(self):
        """Gets the transfer_job_name of this TransferOperation.

        The name of the transfer job that triggers this transfer operation.

        :return: The transfer_job_name of this TransferOperation.
        :rtype: str
        """
        return self._transfer_job_name

    @transfer_job_name.setter
    def transfer_job_name(self, transfer_job_name):
        """Sets the transfer_job_name of this TransferOperation.

        The name of the transfer job that triggers this transfer operation.

        :param transfer_job_name: The transfer_job_name of this TransferOperation.
        :type transfer_job_name: str
        """

        self._transfer_job_name = transfer_job_name

    @property
    def transfer_spec(self):
        """Gets the transfer_spec of this TransferOperation.


        :return: The transfer_spec of this TransferOperation.
        :rtype: TransferSpec
        """
        return self._transfer_spec

    @transfer_spec.setter
    def transfer_spec(self, transfer_spec):
        """Sets the transfer_spec of this TransferOperation.


        :param transfer_spec: The transfer_spec of this TransferOperation.
        :type transfer_spec: TransferSpec
        """

        self._transfer_spec = transfer_spec
