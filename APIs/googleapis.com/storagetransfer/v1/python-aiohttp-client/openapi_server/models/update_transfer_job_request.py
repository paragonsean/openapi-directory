# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transfer_job import TransferJob
from openapi_server import util


class UpdateTransferJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, transfer_job: TransferJob=None, update_transfer_job_field_mask: str=None):
        """UpdateTransferJobRequest - a model defined in OpenAPI

        :param project_id: The project_id of this UpdateTransferJobRequest.
        :param transfer_job: The transfer_job of this UpdateTransferJobRequest.
        :param update_transfer_job_field_mask: The update_transfer_job_field_mask of this UpdateTransferJobRequest.
        """
        self.openapi_types = {
            'project_id': str,
            'transfer_job': TransferJob,
            'update_transfer_job_field_mask': str
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'transfer_job': 'transferJob',
            'update_transfer_job_field_mask': 'updateTransferJobFieldMask'
        }

        self._project_id = project_id
        self._transfer_job = transfer_job
        self._update_transfer_job_field_mask = update_transfer_job_field_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTransferJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTransferJobRequest of this UpdateTransferJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this UpdateTransferJobRequest.

        Required. The ID of the Google Cloud project that owns the job.

        :return: The project_id of this UpdateTransferJobRequest.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UpdateTransferJobRequest.

        Required. The ID of the Google Cloud project that owns the job.

        :param project_id: The project_id of this UpdateTransferJobRequest.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def transfer_job(self):
        """Gets the transfer_job of this UpdateTransferJobRequest.


        :return: The transfer_job of this UpdateTransferJobRequest.
        :rtype: TransferJob
        """
        return self._transfer_job

    @transfer_job.setter
    def transfer_job(self, transfer_job):
        """Sets the transfer_job of this UpdateTransferJobRequest.


        :param transfer_job: The transfer_job of this UpdateTransferJobRequest.
        :type transfer_job: TransferJob
        """

        self._transfer_job = transfer_job

    @property
    def update_transfer_job_field_mask(self):
        """Gets the update_transfer_job_field_mask of this UpdateTransferJobRequest.

        The field mask of the fields in `transferJob` that are to be updated in this request. Fields in `transferJob` that can be updated are: description, transfer_spec, notification_config, logging_config, and status. To update the `transfer_spec` of the job, a complete transfer specification must be provided. An incomplete specification missing any required fields is rejected with the error INVALID_ARGUMENT.

        :return: The update_transfer_job_field_mask of this UpdateTransferJobRequest.
        :rtype: str
        """
        return self._update_transfer_job_field_mask

    @update_transfer_job_field_mask.setter
    def update_transfer_job_field_mask(self, update_transfer_job_field_mask):
        """Sets the update_transfer_job_field_mask of this UpdateTransferJobRequest.

        The field mask of the fields in `transferJob` that are to be updated in this request. Fields in `transferJob` that can be updated are: description, transfer_spec, notification_config, logging_config, and status. To update the `transfer_spec` of the job, a complete transfer specification must be provided. An incomplete specification missing any required fields is rejected with the error INVALID_ARGUMENT.

        :param update_transfer_job_field_mask: The update_transfer_job_field_mask of this UpdateTransferJobRequest.
        :type update_transfer_job_field_mask: str
        """

        self._update_transfer_job_field_mask = update_transfer_job_field_mask
