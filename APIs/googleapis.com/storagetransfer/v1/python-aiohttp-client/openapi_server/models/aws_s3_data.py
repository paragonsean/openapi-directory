# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aws_access_key import AwsAccessKey
from openapi_server import util


class AwsS3Data(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_access_key: AwsAccessKey=None, bucket_name: str=None, cloudfront_domain: str=None, credentials_secret: str=None, path: str=None, role_arn: str=None):
        """AwsS3Data - a model defined in OpenAPI

        :param aws_access_key: The aws_access_key of this AwsS3Data.
        :param bucket_name: The bucket_name of this AwsS3Data.
        :param cloudfront_domain: The cloudfront_domain of this AwsS3Data.
        :param credentials_secret: The credentials_secret of this AwsS3Data.
        :param path: The path of this AwsS3Data.
        :param role_arn: The role_arn of this AwsS3Data.
        """
        self.openapi_types = {
            'aws_access_key': AwsAccessKey,
            'bucket_name': str,
            'cloudfront_domain': str,
            'credentials_secret': str,
            'path': str,
            'role_arn': str
        }

        self.attribute_map = {
            'aws_access_key': 'awsAccessKey',
            'bucket_name': 'bucketName',
            'cloudfront_domain': 'cloudfrontDomain',
            'credentials_secret': 'credentialsSecret',
            'path': 'path',
            'role_arn': 'roleArn'
        }

        self._aws_access_key = aws_access_key
        self._bucket_name = bucket_name
        self._cloudfront_domain = cloudfront_domain
        self._credentials_secret = credentials_secret
        self._path = path
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AwsS3Data':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AwsS3Data of this AwsS3Data.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_access_key(self):
        """Gets the aws_access_key of this AwsS3Data.


        :return: The aws_access_key of this AwsS3Data.
        :rtype: AwsAccessKey
        """
        return self._aws_access_key

    @aws_access_key.setter
    def aws_access_key(self, aws_access_key):
        """Sets the aws_access_key of this AwsS3Data.


        :param aws_access_key: The aws_access_key of this AwsS3Data.
        :type aws_access_key: AwsAccessKey
        """

        self._aws_access_key = aws_access_key

    @property
    def bucket_name(self):
        """Gets the bucket_name of this AwsS3Data.

        Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).

        :return: The bucket_name of this AwsS3Data.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this AwsS3Data.

        Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).

        :param bucket_name: The bucket_name of this AwsS3Data.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def cloudfront_domain(self):
        """Gets the cloudfront_domain of this AwsS3Data.

        Optional. Cloudfront domain name pointing to this bucket (as origin), to use when fetching. Format: `https://{id}.cloudfront.net` or any valid custom domain `https://...`

        :return: The cloudfront_domain of this AwsS3Data.
        :rtype: str
        """
        return self._cloudfront_domain

    @cloudfront_domain.setter
    def cloudfront_domain(self, cloudfront_domain):
        """Sets the cloudfront_domain of this AwsS3Data.

        Optional. Cloudfront domain name pointing to this bucket (as origin), to use when fetching. Format: `https://{id}.cloudfront.net` or any valid custom domain `https://...`

        :param cloudfront_domain: The cloudfront_domain of this AwsS3Data.
        :type cloudfront_domain: str
        """

        self._cloudfront_domain = cloudfront_domain

    @property
    def credentials_secret(self):
        """Gets the credentials_secret of this AwsS3Data.

        Optional. The Resource name of a secret in Secret Manager. AWS credentials must be stored in Secret Manager in JSON format: { \"access_key_id\": \"ACCESS_KEY_ID\", \"secret_access_key\": \"SECRET_ACCESS_KEY\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Amazon S3] (https://cloud.google.com/storage-transfer/docs/source-amazon-s3#secret_manager) for more information. If `credentials_secret` is specified, do not specify role_arn or aws_access_key. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`

        :return: The credentials_secret of this AwsS3Data.
        :rtype: str
        """
        return self._credentials_secret

    @credentials_secret.setter
    def credentials_secret(self, credentials_secret):
        """Sets the credentials_secret of this AwsS3Data.

        Optional. The Resource name of a secret in Secret Manager. AWS credentials must be stored in Secret Manager in JSON format: { \"access_key_id\": \"ACCESS_KEY_ID\", \"secret_access_key\": \"SECRET_ACCESS_KEY\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Amazon S3] (https://cloud.google.com/storage-transfer/docs/source-amazon-s3#secret_manager) for more information. If `credentials_secret` is specified, do not specify role_arn or aws_access_key. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`

        :param credentials_secret: The credentials_secret of this AwsS3Data.
        :type credentials_secret: str
        """

        self._credentials_secret = credentials_secret

    @property
    def path(self):
        """Gets the path of this AwsS3Data.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :return: The path of this AwsS3Data.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AwsS3Data.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.

        :param path: The path of this AwsS3Data.
        :type path: str
        """

        self._path = path

    @property
    def role_arn(self):
        """Gets the role_arn of this AwsS3Data.

        The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.

        :return: The role_arn of this AwsS3Data.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AwsS3Data.

        The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.

        :param role_arn: The role_arn of this AwsS3Data.
        :type role_arn: str
        """

        self._role_arn = role_arn
