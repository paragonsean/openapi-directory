# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_types: List[str]=None, payload_format: str=None, pubsub_topic: str=None):
        """NotificationConfig - a model defined in OpenAPI

        :param event_types: The event_types of this NotificationConfig.
        :param payload_format: The payload_format of this NotificationConfig.
        :param pubsub_topic: The pubsub_topic of this NotificationConfig.
        """
        self.openapi_types = {
            'event_types': List[str],
            'payload_format': str,
            'pubsub_topic': str
        }

        self.attribute_map = {
            'event_types': 'eventTypes',
            'payload_format': 'payloadFormat',
            'pubsub_topic': 'pubsubTopic'
        }

        self._event_types = event_types
        self._payload_format = payload_format
        self._pubsub_topic = pubsub_topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationConfig of this NotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_types(self):
        """Gets the event_types of this NotificationConfig.

        Event types for which a notification is desired. If empty, send notifications for all event types.

        :return: The event_types of this NotificationConfig.
        :rtype: List[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this NotificationConfig.

        Event types for which a notification is desired. If empty, send notifications for all event types.

        :param event_types: The event_types of this NotificationConfig.
        :type event_types: List[str]
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "TRANSFER_OPERATION_SUCCESS", "TRANSFER_OPERATION_FAILED", "TRANSFER_OPERATION_ABORTED"]  # noqa: E501
        if not set(event_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `event_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(event_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._event_types = event_types

    @property
    def payload_format(self):
        """Gets the payload_format of this NotificationConfig.

        Required. The desired format of the notification message payloads.

        :return: The payload_format of this NotificationConfig.
        :rtype: str
        """
        return self._payload_format

    @payload_format.setter
    def payload_format(self, payload_format):
        """Sets the payload_format of this NotificationConfig.

        Required. The desired format of the notification message payloads.

        :param payload_format: The payload_format of this NotificationConfig.
        :type payload_format: str
        """
        allowed_values = ["PAYLOAD_FORMAT_UNSPECIFIED", "NONE", "JSON"]  # noqa: E501
        if payload_format not in allowed_values:
            raise ValueError(
                "Invalid value for `payload_format` ({0}), must be one of {1}"
                .format(payload_format, allowed_values)
            )

        self._payload_format = payload_format

    @property
    def pubsub_topic(self):
        """Gets the pubsub_topic of this NotificationConfig.

        Required. The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.

        :return: The pubsub_topic of this NotificationConfig.
        :rtype: str
        """
        return self._pubsub_topic

    @pubsub_topic.setter
    def pubsub_topic(self, pubsub_topic):
        """Sets the pubsub_topic of this NotificationConfig.

        Required. The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.

        :param pubsub_topic: The pubsub_topic of this NotificationConfig.
        :type pubsub_topic: str
        """

        self._pubsub_topic = pubsub_topic
