# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransferCounters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_copied_to_sink: str=None, bytes_deleted_from_sink: str=None, bytes_deleted_from_source: str=None, bytes_failed_to_delete_from_sink: str=None, bytes_found_from_source: str=None, bytes_found_only_from_sink: str=None, bytes_from_source_failed: str=None, bytes_from_source_skipped_by_sync: str=None, directories_failed_to_list_from_source: str=None, directories_found_from_source: str=None, directories_successfully_listed_from_source: str=None, intermediate_objects_cleaned_up: str=None, intermediate_objects_failed_cleaned_up: str=None, objects_copied_to_sink: str=None, objects_deleted_from_sink: str=None, objects_deleted_from_source: str=None, objects_failed_to_delete_from_sink: str=None, objects_found_from_source: str=None, objects_found_only_from_sink: str=None, objects_from_source_failed: str=None, objects_from_source_skipped_by_sync: str=None):
        """TransferCounters - a model defined in OpenAPI

        :param bytes_copied_to_sink: The bytes_copied_to_sink of this TransferCounters.
        :param bytes_deleted_from_sink: The bytes_deleted_from_sink of this TransferCounters.
        :param bytes_deleted_from_source: The bytes_deleted_from_source of this TransferCounters.
        :param bytes_failed_to_delete_from_sink: The bytes_failed_to_delete_from_sink of this TransferCounters.
        :param bytes_found_from_source: The bytes_found_from_source of this TransferCounters.
        :param bytes_found_only_from_sink: The bytes_found_only_from_sink of this TransferCounters.
        :param bytes_from_source_failed: The bytes_from_source_failed of this TransferCounters.
        :param bytes_from_source_skipped_by_sync: The bytes_from_source_skipped_by_sync of this TransferCounters.
        :param directories_failed_to_list_from_source: The directories_failed_to_list_from_source of this TransferCounters.
        :param directories_found_from_source: The directories_found_from_source of this TransferCounters.
        :param directories_successfully_listed_from_source: The directories_successfully_listed_from_source of this TransferCounters.
        :param intermediate_objects_cleaned_up: The intermediate_objects_cleaned_up of this TransferCounters.
        :param intermediate_objects_failed_cleaned_up: The intermediate_objects_failed_cleaned_up of this TransferCounters.
        :param objects_copied_to_sink: The objects_copied_to_sink of this TransferCounters.
        :param objects_deleted_from_sink: The objects_deleted_from_sink of this TransferCounters.
        :param objects_deleted_from_source: The objects_deleted_from_source of this TransferCounters.
        :param objects_failed_to_delete_from_sink: The objects_failed_to_delete_from_sink of this TransferCounters.
        :param objects_found_from_source: The objects_found_from_source of this TransferCounters.
        :param objects_found_only_from_sink: The objects_found_only_from_sink of this TransferCounters.
        :param objects_from_source_failed: The objects_from_source_failed of this TransferCounters.
        :param objects_from_source_skipped_by_sync: The objects_from_source_skipped_by_sync of this TransferCounters.
        """
        self.openapi_types = {
            'bytes_copied_to_sink': str,
            'bytes_deleted_from_sink': str,
            'bytes_deleted_from_source': str,
            'bytes_failed_to_delete_from_sink': str,
            'bytes_found_from_source': str,
            'bytes_found_only_from_sink': str,
            'bytes_from_source_failed': str,
            'bytes_from_source_skipped_by_sync': str,
            'directories_failed_to_list_from_source': str,
            'directories_found_from_source': str,
            'directories_successfully_listed_from_source': str,
            'intermediate_objects_cleaned_up': str,
            'intermediate_objects_failed_cleaned_up': str,
            'objects_copied_to_sink': str,
            'objects_deleted_from_sink': str,
            'objects_deleted_from_source': str,
            'objects_failed_to_delete_from_sink': str,
            'objects_found_from_source': str,
            'objects_found_only_from_sink': str,
            'objects_from_source_failed': str,
            'objects_from_source_skipped_by_sync': str
        }

        self.attribute_map = {
            'bytes_copied_to_sink': 'bytesCopiedToSink',
            'bytes_deleted_from_sink': 'bytesDeletedFromSink',
            'bytes_deleted_from_source': 'bytesDeletedFromSource',
            'bytes_failed_to_delete_from_sink': 'bytesFailedToDeleteFromSink',
            'bytes_found_from_source': 'bytesFoundFromSource',
            'bytes_found_only_from_sink': 'bytesFoundOnlyFromSink',
            'bytes_from_source_failed': 'bytesFromSourceFailed',
            'bytes_from_source_skipped_by_sync': 'bytesFromSourceSkippedBySync',
            'directories_failed_to_list_from_source': 'directoriesFailedToListFromSource',
            'directories_found_from_source': 'directoriesFoundFromSource',
            'directories_successfully_listed_from_source': 'directoriesSuccessfullyListedFromSource',
            'intermediate_objects_cleaned_up': 'intermediateObjectsCleanedUp',
            'intermediate_objects_failed_cleaned_up': 'intermediateObjectsFailedCleanedUp',
            'objects_copied_to_sink': 'objectsCopiedToSink',
            'objects_deleted_from_sink': 'objectsDeletedFromSink',
            'objects_deleted_from_source': 'objectsDeletedFromSource',
            'objects_failed_to_delete_from_sink': 'objectsFailedToDeleteFromSink',
            'objects_found_from_source': 'objectsFoundFromSource',
            'objects_found_only_from_sink': 'objectsFoundOnlyFromSink',
            'objects_from_source_failed': 'objectsFromSourceFailed',
            'objects_from_source_skipped_by_sync': 'objectsFromSourceSkippedBySync'
        }

        self._bytes_copied_to_sink = bytes_copied_to_sink
        self._bytes_deleted_from_sink = bytes_deleted_from_sink
        self._bytes_deleted_from_source = bytes_deleted_from_source
        self._bytes_failed_to_delete_from_sink = bytes_failed_to_delete_from_sink
        self._bytes_found_from_source = bytes_found_from_source
        self._bytes_found_only_from_sink = bytes_found_only_from_sink
        self._bytes_from_source_failed = bytes_from_source_failed
        self._bytes_from_source_skipped_by_sync = bytes_from_source_skipped_by_sync
        self._directories_failed_to_list_from_source = directories_failed_to_list_from_source
        self._directories_found_from_source = directories_found_from_source
        self._directories_successfully_listed_from_source = directories_successfully_listed_from_source
        self._intermediate_objects_cleaned_up = intermediate_objects_cleaned_up
        self._intermediate_objects_failed_cleaned_up = intermediate_objects_failed_cleaned_up
        self._objects_copied_to_sink = objects_copied_to_sink
        self._objects_deleted_from_sink = objects_deleted_from_sink
        self._objects_deleted_from_source = objects_deleted_from_source
        self._objects_failed_to_delete_from_sink = objects_failed_to_delete_from_sink
        self._objects_found_from_source = objects_found_from_source
        self._objects_found_only_from_sink = objects_found_only_from_sink
        self._objects_from_source_failed = objects_from_source_failed
        self._objects_from_source_skipped_by_sync = objects_from_source_skipped_by_sync

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferCounters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferCounters of this TransferCounters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_copied_to_sink(self):
        """Gets the bytes_copied_to_sink of this TransferCounters.

        Bytes that are copied to the data sink.

        :return: The bytes_copied_to_sink of this TransferCounters.
        :rtype: str
        """
        return self._bytes_copied_to_sink

    @bytes_copied_to_sink.setter
    def bytes_copied_to_sink(self, bytes_copied_to_sink):
        """Sets the bytes_copied_to_sink of this TransferCounters.

        Bytes that are copied to the data sink.

        :param bytes_copied_to_sink: The bytes_copied_to_sink of this TransferCounters.
        :type bytes_copied_to_sink: str
        """

        self._bytes_copied_to_sink = bytes_copied_to_sink

    @property
    def bytes_deleted_from_sink(self):
        """Gets the bytes_deleted_from_sink of this TransferCounters.

        Bytes that are deleted from the data sink.

        :return: The bytes_deleted_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._bytes_deleted_from_sink

    @bytes_deleted_from_sink.setter
    def bytes_deleted_from_sink(self, bytes_deleted_from_sink):
        """Sets the bytes_deleted_from_sink of this TransferCounters.

        Bytes that are deleted from the data sink.

        :param bytes_deleted_from_sink: The bytes_deleted_from_sink of this TransferCounters.
        :type bytes_deleted_from_sink: str
        """

        self._bytes_deleted_from_sink = bytes_deleted_from_sink

    @property
    def bytes_deleted_from_source(self):
        """Gets the bytes_deleted_from_source of this TransferCounters.

        Bytes that are deleted from the data source.

        :return: The bytes_deleted_from_source of this TransferCounters.
        :rtype: str
        """
        return self._bytes_deleted_from_source

    @bytes_deleted_from_source.setter
    def bytes_deleted_from_source(self, bytes_deleted_from_source):
        """Sets the bytes_deleted_from_source of this TransferCounters.

        Bytes that are deleted from the data source.

        :param bytes_deleted_from_source: The bytes_deleted_from_source of this TransferCounters.
        :type bytes_deleted_from_source: str
        """

        self._bytes_deleted_from_source = bytes_deleted_from_source

    @property
    def bytes_failed_to_delete_from_sink(self):
        """Gets the bytes_failed_to_delete_from_sink of this TransferCounters.

        Bytes that failed to be deleted from the data sink.

        :return: The bytes_failed_to_delete_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._bytes_failed_to_delete_from_sink

    @bytes_failed_to_delete_from_sink.setter
    def bytes_failed_to_delete_from_sink(self, bytes_failed_to_delete_from_sink):
        """Sets the bytes_failed_to_delete_from_sink of this TransferCounters.

        Bytes that failed to be deleted from the data sink.

        :param bytes_failed_to_delete_from_sink: The bytes_failed_to_delete_from_sink of this TransferCounters.
        :type bytes_failed_to_delete_from_sink: str
        """

        self._bytes_failed_to_delete_from_sink = bytes_failed_to_delete_from_sink

    @property
    def bytes_found_from_source(self):
        """Gets the bytes_found_from_source of this TransferCounters.

        Bytes found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.

        :return: The bytes_found_from_source of this TransferCounters.
        :rtype: str
        """
        return self._bytes_found_from_source

    @bytes_found_from_source.setter
    def bytes_found_from_source(self, bytes_found_from_source):
        """Sets the bytes_found_from_source of this TransferCounters.

        Bytes found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.

        :param bytes_found_from_source: The bytes_found_from_source of this TransferCounters.
        :type bytes_found_from_source: str
        """

        self._bytes_found_from_source = bytes_found_from_source

    @property
    def bytes_found_only_from_sink(self):
        """Gets the bytes_found_only_from_sink of this TransferCounters.

        Bytes found only in the data sink that are scheduled to be deleted.

        :return: The bytes_found_only_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._bytes_found_only_from_sink

    @bytes_found_only_from_sink.setter
    def bytes_found_only_from_sink(self, bytes_found_only_from_sink):
        """Sets the bytes_found_only_from_sink of this TransferCounters.

        Bytes found only in the data sink that are scheduled to be deleted.

        :param bytes_found_only_from_sink: The bytes_found_only_from_sink of this TransferCounters.
        :type bytes_found_only_from_sink: str
        """

        self._bytes_found_only_from_sink = bytes_found_only_from_sink

    @property
    def bytes_from_source_failed(self):
        """Gets the bytes_from_source_failed of this TransferCounters.

        Bytes in the data source that failed to be transferred or that failed to be deleted after being transferred.

        :return: The bytes_from_source_failed of this TransferCounters.
        :rtype: str
        """
        return self._bytes_from_source_failed

    @bytes_from_source_failed.setter
    def bytes_from_source_failed(self, bytes_from_source_failed):
        """Sets the bytes_from_source_failed of this TransferCounters.

        Bytes in the data source that failed to be transferred or that failed to be deleted after being transferred.

        :param bytes_from_source_failed: The bytes_from_source_failed of this TransferCounters.
        :type bytes_from_source_failed: str
        """

        self._bytes_from_source_failed = bytes_from_source_failed

    @property
    def bytes_from_source_skipped_by_sync(self):
        """Gets the bytes_from_source_skipped_by_sync of this TransferCounters.

        Bytes in the data source that are not transferred because they already exist in the data sink.

        :return: The bytes_from_source_skipped_by_sync of this TransferCounters.
        :rtype: str
        """
        return self._bytes_from_source_skipped_by_sync

    @bytes_from_source_skipped_by_sync.setter
    def bytes_from_source_skipped_by_sync(self, bytes_from_source_skipped_by_sync):
        """Sets the bytes_from_source_skipped_by_sync of this TransferCounters.

        Bytes in the data source that are not transferred because they already exist in the data sink.

        :param bytes_from_source_skipped_by_sync: The bytes_from_source_skipped_by_sync of this TransferCounters.
        :type bytes_from_source_skipped_by_sync: str
        """

        self._bytes_from_source_skipped_by_sync = bytes_from_source_skipped_by_sync

    @property
    def directories_failed_to_list_from_source(self):
        """Gets the directories_failed_to_list_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of listing failures for each directory found at the source. Potential failures when listing a directory include permission failure or block failure. If listing a directory fails, no files in the directory are transferred.

        :return: The directories_failed_to_list_from_source of this TransferCounters.
        :rtype: str
        """
        return self._directories_failed_to_list_from_source

    @directories_failed_to_list_from_source.setter
    def directories_failed_to_list_from_source(self, directories_failed_to_list_from_source):
        """Sets the directories_failed_to_list_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of listing failures for each directory found at the source. Potential failures when listing a directory include permission failure or block failure. If listing a directory fails, no files in the directory are transferred.

        :param directories_failed_to_list_from_source: The directories_failed_to_list_from_source of this TransferCounters.
        :type directories_failed_to_list_from_source: str
        """

        self._directories_failed_to_list_from_source = directories_failed_to_list_from_source

    @property
    def directories_found_from_source(self):
        """Gets the directories_found_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of directories found while listing. For example, if the root directory of the transfer is `base/` and there are two other directories, `a/` and `b/` under this directory, the count after listing `base/`, `base/a/` and `base/b/` is 3.

        :return: The directories_found_from_source of this TransferCounters.
        :rtype: str
        """
        return self._directories_found_from_source

    @directories_found_from_source.setter
    def directories_found_from_source(self, directories_found_from_source):
        """Sets the directories_found_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of directories found while listing. For example, if the root directory of the transfer is `base/` and there are two other directories, `a/` and `b/` under this directory, the count after listing `base/`, `base/a/` and `base/b/` is 3.

        :param directories_found_from_source: The directories_found_from_source of this TransferCounters.
        :type directories_found_from_source: str
        """

        self._directories_found_from_source = directories_found_from_source

    @property
    def directories_successfully_listed_from_source(self):
        """Gets the directories_successfully_listed_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of successful listings for each directory found at the source.

        :return: The directories_successfully_listed_from_source of this TransferCounters.
        :rtype: str
        """
        return self._directories_successfully_listed_from_source

    @directories_successfully_listed_from_source.setter
    def directories_successfully_listed_from_source(self, directories_successfully_listed_from_source):
        """Sets the directories_successfully_listed_from_source of this TransferCounters.

        For transfers involving PosixFilesystem only. Number of successful listings for each directory found at the source.

        :param directories_successfully_listed_from_source: The directories_successfully_listed_from_source of this TransferCounters.
        :type directories_successfully_listed_from_source: str
        """

        self._directories_successfully_listed_from_source = directories_successfully_listed_from_source

    @property
    def intermediate_objects_cleaned_up(self):
        """Gets the intermediate_objects_cleaned_up of this TransferCounters.

        Number of successfully cleaned up intermediate objects.

        :return: The intermediate_objects_cleaned_up of this TransferCounters.
        :rtype: str
        """
        return self._intermediate_objects_cleaned_up

    @intermediate_objects_cleaned_up.setter
    def intermediate_objects_cleaned_up(self, intermediate_objects_cleaned_up):
        """Sets the intermediate_objects_cleaned_up of this TransferCounters.

        Number of successfully cleaned up intermediate objects.

        :param intermediate_objects_cleaned_up: The intermediate_objects_cleaned_up of this TransferCounters.
        :type intermediate_objects_cleaned_up: str
        """

        self._intermediate_objects_cleaned_up = intermediate_objects_cleaned_up

    @property
    def intermediate_objects_failed_cleaned_up(self):
        """Gets the intermediate_objects_failed_cleaned_up of this TransferCounters.

        Number of intermediate objects failed cleaned up.

        :return: The intermediate_objects_failed_cleaned_up of this TransferCounters.
        :rtype: str
        """
        return self._intermediate_objects_failed_cleaned_up

    @intermediate_objects_failed_cleaned_up.setter
    def intermediate_objects_failed_cleaned_up(self, intermediate_objects_failed_cleaned_up):
        """Sets the intermediate_objects_failed_cleaned_up of this TransferCounters.

        Number of intermediate objects failed cleaned up.

        :param intermediate_objects_failed_cleaned_up: The intermediate_objects_failed_cleaned_up of this TransferCounters.
        :type intermediate_objects_failed_cleaned_up: str
        """

        self._intermediate_objects_failed_cleaned_up = intermediate_objects_failed_cleaned_up

    @property
    def objects_copied_to_sink(self):
        """Gets the objects_copied_to_sink of this TransferCounters.

        Objects that are copied to the data sink.

        :return: The objects_copied_to_sink of this TransferCounters.
        :rtype: str
        """
        return self._objects_copied_to_sink

    @objects_copied_to_sink.setter
    def objects_copied_to_sink(self, objects_copied_to_sink):
        """Sets the objects_copied_to_sink of this TransferCounters.

        Objects that are copied to the data sink.

        :param objects_copied_to_sink: The objects_copied_to_sink of this TransferCounters.
        :type objects_copied_to_sink: str
        """

        self._objects_copied_to_sink = objects_copied_to_sink

    @property
    def objects_deleted_from_sink(self):
        """Gets the objects_deleted_from_sink of this TransferCounters.

        Objects that are deleted from the data sink.

        :return: The objects_deleted_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._objects_deleted_from_sink

    @objects_deleted_from_sink.setter
    def objects_deleted_from_sink(self, objects_deleted_from_sink):
        """Sets the objects_deleted_from_sink of this TransferCounters.

        Objects that are deleted from the data sink.

        :param objects_deleted_from_sink: The objects_deleted_from_sink of this TransferCounters.
        :type objects_deleted_from_sink: str
        """

        self._objects_deleted_from_sink = objects_deleted_from_sink

    @property
    def objects_deleted_from_source(self):
        """Gets the objects_deleted_from_source of this TransferCounters.

        Objects that are deleted from the data source.

        :return: The objects_deleted_from_source of this TransferCounters.
        :rtype: str
        """
        return self._objects_deleted_from_source

    @objects_deleted_from_source.setter
    def objects_deleted_from_source(self, objects_deleted_from_source):
        """Sets the objects_deleted_from_source of this TransferCounters.

        Objects that are deleted from the data source.

        :param objects_deleted_from_source: The objects_deleted_from_source of this TransferCounters.
        :type objects_deleted_from_source: str
        """

        self._objects_deleted_from_source = objects_deleted_from_source

    @property
    def objects_failed_to_delete_from_sink(self):
        """Gets the objects_failed_to_delete_from_sink of this TransferCounters.

        Objects that failed to be deleted from the data sink.

        :return: The objects_failed_to_delete_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._objects_failed_to_delete_from_sink

    @objects_failed_to_delete_from_sink.setter
    def objects_failed_to_delete_from_sink(self, objects_failed_to_delete_from_sink):
        """Sets the objects_failed_to_delete_from_sink of this TransferCounters.

        Objects that failed to be deleted from the data sink.

        :param objects_failed_to_delete_from_sink: The objects_failed_to_delete_from_sink of this TransferCounters.
        :type objects_failed_to_delete_from_sink: str
        """

        self._objects_failed_to_delete_from_sink = objects_failed_to_delete_from_sink

    @property
    def objects_found_from_source(self):
        """Gets the objects_found_from_source of this TransferCounters.

        Objects found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.

        :return: The objects_found_from_source of this TransferCounters.
        :rtype: str
        """
        return self._objects_found_from_source

    @objects_found_from_source.setter
    def objects_found_from_source(self, objects_found_from_source):
        """Sets the objects_found_from_source of this TransferCounters.

        Objects found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.

        :param objects_found_from_source: The objects_found_from_source of this TransferCounters.
        :type objects_found_from_source: str
        """

        self._objects_found_from_source = objects_found_from_source

    @property
    def objects_found_only_from_sink(self):
        """Gets the objects_found_only_from_sink of this TransferCounters.

        Objects found only in the data sink that are scheduled to be deleted.

        :return: The objects_found_only_from_sink of this TransferCounters.
        :rtype: str
        """
        return self._objects_found_only_from_sink

    @objects_found_only_from_sink.setter
    def objects_found_only_from_sink(self, objects_found_only_from_sink):
        """Sets the objects_found_only_from_sink of this TransferCounters.

        Objects found only in the data sink that are scheduled to be deleted.

        :param objects_found_only_from_sink: The objects_found_only_from_sink of this TransferCounters.
        :type objects_found_only_from_sink: str
        """

        self._objects_found_only_from_sink = objects_found_only_from_sink

    @property
    def objects_from_source_failed(self):
        """Gets the objects_from_source_failed of this TransferCounters.

        Objects in the data source that failed to be transferred or that failed to be deleted after being transferred.

        :return: The objects_from_source_failed of this TransferCounters.
        :rtype: str
        """
        return self._objects_from_source_failed

    @objects_from_source_failed.setter
    def objects_from_source_failed(self, objects_from_source_failed):
        """Sets the objects_from_source_failed of this TransferCounters.

        Objects in the data source that failed to be transferred or that failed to be deleted after being transferred.

        :param objects_from_source_failed: The objects_from_source_failed of this TransferCounters.
        :type objects_from_source_failed: str
        """

        self._objects_from_source_failed = objects_from_source_failed

    @property
    def objects_from_source_skipped_by_sync(self):
        """Gets the objects_from_source_skipped_by_sync of this TransferCounters.

        Objects in the data source that are not transferred because they already exist in the data sink.

        :return: The objects_from_source_skipped_by_sync of this TransferCounters.
        :rtype: str
        """
        return self._objects_from_source_skipped_by_sync

    @objects_from_source_skipped_by_sync.setter
    def objects_from_source_skipped_by_sync(self, objects_from_source_skipped_by_sync):
        """Sets the objects_from_source_skipped_by_sync of this TransferCounters.

        Objects in the data source that are not transferred because they already exist in the data sink.

        :param objects_from_source_skipped_by_sync: The objects_from_source_skipped_by_sync of this TransferCounters.
        :type objects_from_source_skipped_by_sync: str
        """

        self._objects_from_source_skipped_by_sync = objects_from_source_skipped_by_sync
