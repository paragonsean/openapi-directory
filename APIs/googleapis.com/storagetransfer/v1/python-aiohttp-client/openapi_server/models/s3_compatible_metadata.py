# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3CompatibleMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_method: str=None, list_api: str=None, protocol: str=None, request_model: str=None):
        """S3CompatibleMetadata - a model defined in OpenAPI

        :param auth_method: The auth_method of this S3CompatibleMetadata.
        :param list_api: The list_api of this S3CompatibleMetadata.
        :param protocol: The protocol of this S3CompatibleMetadata.
        :param request_model: The request_model of this S3CompatibleMetadata.
        """
        self.openapi_types = {
            'auth_method': str,
            'list_api': str,
            'protocol': str,
            'request_model': str
        }

        self.attribute_map = {
            'auth_method': 'authMethod',
            'list_api': 'listApi',
            'protocol': 'protocol',
            'request_model': 'requestModel'
        }

        self._auth_method = auth_method
        self._list_api = list_api
        self._protocol = protocol
        self._request_model = request_model

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3CompatibleMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3CompatibleMetadata of this S3CompatibleMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_method(self):
        """Gets the auth_method of this S3CompatibleMetadata.

        Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.

        :return: The auth_method of this S3CompatibleMetadata.
        :rtype: str
        """
        return self._auth_method

    @auth_method.setter
    def auth_method(self, auth_method):
        """Sets the auth_method of this S3CompatibleMetadata.

        Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.

        :param auth_method: The auth_method of this S3CompatibleMetadata.
        :type auth_method: str
        """
        allowed_values = ["AUTH_METHOD_UNSPECIFIED", "AUTH_METHOD_AWS_SIGNATURE_V4", "AUTH_METHOD_AWS_SIGNATURE_V2"]  # noqa: E501
        if auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_method` ({0}), must be one of {1}"
                .format(auth_method, allowed_values)
            )

        self._auth_method = auth_method

    @property
    def list_api(self):
        """Gets the list_api of this S3CompatibleMetadata.

        The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.

        :return: The list_api of this S3CompatibleMetadata.
        :rtype: str
        """
        return self._list_api

    @list_api.setter
    def list_api(self, list_api):
        """Sets the list_api of this S3CompatibleMetadata.

        The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.

        :param list_api: The list_api of this S3CompatibleMetadata.
        :type list_api: str
        """
        allowed_values = ["LIST_API_UNSPECIFIED", "LIST_OBJECTS_V2", "LIST_OBJECTS"]  # noqa: E501
        if list_api not in allowed_values:
            raise ValueError(
                "Invalid value for `list_api` ({0}), must be one of {1}"
                .format(list_api, allowed_values)
            )

        self._list_api = list_api

    @property
    def protocol(self):
        """Gets the protocol of this S3CompatibleMetadata.

        Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.

        :return: The protocol of this S3CompatibleMetadata.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this S3CompatibleMetadata.

        Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.

        :param protocol: The protocol of this S3CompatibleMetadata.
        :type protocol: str
        """
        allowed_values = ["NETWORK_PROTOCOL_UNSPECIFIED", "NETWORK_PROTOCOL_HTTPS", "NETWORK_PROTOCOL_HTTP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def request_model(self):
        """Gets the request_model of this S3CompatibleMetadata.

        Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.

        :return: The request_model of this S3CompatibleMetadata.
        :rtype: str
        """
        return self._request_model

    @request_model.setter
    def request_model(self, request_model):
        """Sets the request_model of this S3CompatibleMetadata.

        Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.

        :param request_model: The request_model of this S3CompatibleMetadata.
        :type request_model: str
        """
        allowed_values = ["REQUEST_MODEL_UNSPECIFIED", "REQUEST_MODEL_VIRTUAL_HOSTED_STYLE", "REQUEST_MODEL_PATH_STYLE"]  # noqa: E501
        if request_model not in allowed_values:
            raise ValueError(
                "Invalid value for `request_model` ({0}), must be one of {1}"
                .format(request_model, allowed_values)
            )

        self._request_model = request_model
