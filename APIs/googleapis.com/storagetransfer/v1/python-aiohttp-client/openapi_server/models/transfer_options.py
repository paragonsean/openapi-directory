# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata_options import MetadataOptions
from openapi_server import util


class TransferOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_objects_from_source_after_transfer: bool=None, delete_objects_unique_in_sink: bool=None, metadata_options: MetadataOptions=None, overwrite_objects_already_existing_in_sink: bool=None, overwrite_when: str=None):
        """TransferOptions - a model defined in OpenAPI

        :param delete_objects_from_source_after_transfer: The delete_objects_from_source_after_transfer of this TransferOptions.
        :param delete_objects_unique_in_sink: The delete_objects_unique_in_sink of this TransferOptions.
        :param metadata_options: The metadata_options of this TransferOptions.
        :param overwrite_objects_already_existing_in_sink: The overwrite_objects_already_existing_in_sink of this TransferOptions.
        :param overwrite_when: The overwrite_when of this TransferOptions.
        """
        self.openapi_types = {
            'delete_objects_from_source_after_transfer': bool,
            'delete_objects_unique_in_sink': bool,
            'metadata_options': MetadataOptions,
            'overwrite_objects_already_existing_in_sink': bool,
            'overwrite_when': str
        }

        self.attribute_map = {
            'delete_objects_from_source_after_transfer': 'deleteObjectsFromSourceAfterTransfer',
            'delete_objects_unique_in_sink': 'deleteObjectsUniqueInSink',
            'metadata_options': 'metadataOptions',
            'overwrite_objects_already_existing_in_sink': 'overwriteObjectsAlreadyExistingInSink',
            'overwrite_when': 'overwriteWhen'
        }

        self._delete_objects_from_source_after_transfer = delete_objects_from_source_after_transfer
        self._delete_objects_unique_in_sink = delete_objects_unique_in_sink
        self._metadata_options = metadata_options
        self._overwrite_objects_already_existing_in_sink = overwrite_objects_already_existing_in_sink
        self._overwrite_when = overwrite_when

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferOptions of this TransferOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_objects_from_source_after_transfer(self):
        """Gets the delete_objects_from_source_after_transfer of this TransferOptions.

        Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.

        :return: The delete_objects_from_source_after_transfer of this TransferOptions.
        :rtype: bool
        """
        return self._delete_objects_from_source_after_transfer

    @delete_objects_from_source_after_transfer.setter
    def delete_objects_from_source_after_transfer(self, delete_objects_from_source_after_transfer):
        """Sets the delete_objects_from_source_after_transfer of this TransferOptions.

        Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.

        :param delete_objects_from_source_after_transfer: The delete_objects_from_source_after_transfer of this TransferOptions.
        :type delete_objects_from_source_after_transfer: bool
        """

        self._delete_objects_from_source_after_transfer = delete_objects_from_source_after_transfer

    @property
    def delete_objects_unique_in_sink(self):
        """Gets the delete_objects_unique_in_sink of this TransferOptions.

        Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.

        :return: The delete_objects_unique_in_sink of this TransferOptions.
        :rtype: bool
        """
        return self._delete_objects_unique_in_sink

    @delete_objects_unique_in_sink.setter
    def delete_objects_unique_in_sink(self, delete_objects_unique_in_sink):
        """Sets the delete_objects_unique_in_sink of this TransferOptions.

        Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.

        :param delete_objects_unique_in_sink: The delete_objects_unique_in_sink of this TransferOptions.
        :type delete_objects_unique_in_sink: bool
        """

        self._delete_objects_unique_in_sink = delete_objects_unique_in_sink

    @property
    def metadata_options(self):
        """Gets the metadata_options of this TransferOptions.


        :return: The metadata_options of this TransferOptions.
        :rtype: MetadataOptions
        """
        return self._metadata_options

    @metadata_options.setter
    def metadata_options(self, metadata_options):
        """Sets the metadata_options of this TransferOptions.


        :param metadata_options: The metadata_options of this TransferOptions.
        :type metadata_options: MetadataOptions
        """

        self._metadata_options = metadata_options

    @property
    def overwrite_objects_already_existing_in_sink(self):
        """Gets the overwrite_objects_already_existing_in_sink of this TransferOptions.

        When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.

        :return: The overwrite_objects_already_existing_in_sink of this TransferOptions.
        :rtype: bool
        """
        return self._overwrite_objects_already_existing_in_sink

    @overwrite_objects_already_existing_in_sink.setter
    def overwrite_objects_already_existing_in_sink(self, overwrite_objects_already_existing_in_sink):
        """Sets the overwrite_objects_already_existing_in_sink of this TransferOptions.

        When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.

        :param overwrite_objects_already_existing_in_sink: The overwrite_objects_already_existing_in_sink of this TransferOptions.
        :type overwrite_objects_already_existing_in_sink: bool
        """

        self._overwrite_objects_already_existing_in_sink = overwrite_objects_already_existing_in_sink

    @property
    def overwrite_when(self):
        """Gets the overwrite_when of this TransferOptions.

        When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.

        :return: The overwrite_when of this TransferOptions.
        :rtype: str
        """
        return self._overwrite_when

    @overwrite_when.setter
    def overwrite_when(self, overwrite_when):
        """Sets the overwrite_when of this TransferOptions.

        When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.

        :param overwrite_when: The overwrite_when of this TransferOptions.
        :type overwrite_when: str
        """
        allowed_values = ["OVERWRITE_WHEN_UNSPECIFIED", "DIFFERENT", "NEVER", "ALWAYS"]  # noqa: E501
        if overwrite_when not in allowed_values:
            raise ValueError(
                "Invalid value for `overwrite_when` ({0}), must be one of {1}"
                .format(overwrite_when, allowed_values)
            )

        self._overwrite_when = overwrite_when
