# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bandwidth_limit import BandwidthLimit
from openapi_server import util


class AgentPool(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_limit: BandwidthLimit=None, display_name: str=None, name: str=None, state: str=None):
        """AgentPool - a model defined in OpenAPI

        :param bandwidth_limit: The bandwidth_limit of this AgentPool.
        :param display_name: The display_name of this AgentPool.
        :param name: The name of this AgentPool.
        :param state: The state of this AgentPool.
        """
        self.openapi_types = {
            'bandwidth_limit': BandwidthLimit,
            'display_name': str,
            'name': str,
            'state': str
        }

        self.attribute_map = {
            'bandwidth_limit': 'bandwidthLimit',
            'display_name': 'displayName',
            'name': 'name',
            'state': 'state'
        }

        self._bandwidth_limit = bandwidth_limit
        self._display_name = display_name
        self._name = name
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentPool':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentPool of this AgentPool.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_limit(self):
        """Gets the bandwidth_limit of this AgentPool.


        :return: The bandwidth_limit of this AgentPool.
        :rtype: BandwidthLimit
        """
        return self._bandwidth_limit

    @bandwidth_limit.setter
    def bandwidth_limit(self, bandwidth_limit):
        """Sets the bandwidth_limit of this AgentPool.


        :param bandwidth_limit: The bandwidth_limit of this AgentPool.
        :type bandwidth_limit: BandwidthLimit
        """

        self._bandwidth_limit = bandwidth_limit

    @property
    def display_name(self):
        """Gets the display_name of this AgentPool.

        Specifies the client-specified AgentPool description.

        :return: The display_name of this AgentPool.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AgentPool.

        Specifies the client-specified AgentPool description.

        :param display_name: The display_name of this AgentPool.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this AgentPool.

        Required. Specifies a unique string that identifies the agent pool. Format: `projects/{project_id}/agentPools/{agent_pool_id}`

        :return: The name of this AgentPool.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgentPool.

        Required. Specifies a unique string that identifies the agent pool. Format: `projects/{project_id}/agentPools/{agent_pool_id}`

        :param name: The name of this AgentPool.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this AgentPool.

        Output only. Specifies the state of the AgentPool.

        :return: The state of this AgentPool.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this AgentPool.

        Output only. Specifies the state of the AgentPool.

        :param state: The state of this AgentPool.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "CREATED", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
