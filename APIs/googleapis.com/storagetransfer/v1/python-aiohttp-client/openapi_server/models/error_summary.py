# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_log_entry import ErrorLogEntry
from openapi_server import util


class ErrorSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_code: str=None, error_count: str=None, error_log_entries: List[ErrorLogEntry]=None):
        """ErrorSummary - a model defined in OpenAPI

        :param error_code: The error_code of this ErrorSummary.
        :param error_count: The error_count of this ErrorSummary.
        :param error_log_entries: The error_log_entries of this ErrorSummary.
        """
        self.openapi_types = {
            'error_code': str,
            'error_count': str,
            'error_log_entries': List[ErrorLogEntry]
        }

        self.attribute_map = {
            'error_code': 'errorCode',
            'error_count': 'errorCount',
            'error_log_entries': 'errorLogEntries'
        }

        self._error_code = error_code
        self._error_count = error_count
        self._error_log_entries = error_log_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorSummary of this ErrorSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_code(self):
        """Gets the error_code of this ErrorSummary.

        Required.

        :return: The error_code of this ErrorSummary.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ErrorSummary.

        Required.

        :param error_code: The error_code of this ErrorSummary.
        :type error_code: str
        """
        allowed_values = ["OK", "CANCELLED", "UNKNOWN", "INVALID_ARGUMENT", "DEADLINE_EXCEEDED", "NOT_FOUND", "ALREADY_EXISTS", "PERMISSION_DENIED", "UNAUTHENTICATED", "RESOURCE_EXHAUSTED", "FAILED_PRECONDITION", "ABORTED", "OUT_OF_RANGE", "UNIMPLEMENTED", "INTERNAL", "UNAVAILABLE", "DATA_LOSS"]  # noqa: E501
        if error_code not in allowed_values:
            raise ValueError(
                "Invalid value for `error_code` ({0}), must be one of {1}"
                .format(error_code, allowed_values)
            )

        self._error_code = error_code

    @property
    def error_count(self):
        """Gets the error_count of this ErrorSummary.

        Required. Count of this type of error.

        :return: The error_count of this ErrorSummary.
        :rtype: str
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ErrorSummary.

        Required. Count of this type of error.

        :param error_count: The error_count of this ErrorSummary.
        :type error_count: str
        """

        self._error_count = error_count

    @property
    def error_log_entries(self):
        """Gets the error_log_entries of this ErrorSummary.

        Error samples. At most 5 error log entries are recorded for a given error code for a single transfer operation.

        :return: The error_log_entries of this ErrorSummary.
        :rtype: List[ErrorLogEntry]
        """
        return self._error_log_entries

    @error_log_entries.setter
    def error_log_entries(self, error_log_entries):
        """Sets the error_log_entries of this ErrorSummary.

        Error samples. At most 5 error log entries are recorded for a given error code for a single transfer operation.

        :param error_log_entries: The error_log_entries of this ErrorSummary.
        :type error_log_entries: List[ErrorLogEntry]
        """

        self._error_log_entries = error_log_entries
