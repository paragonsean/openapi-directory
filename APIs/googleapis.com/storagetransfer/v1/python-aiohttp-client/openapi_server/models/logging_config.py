# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoggingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_onprem_gcs_transfer_logs: bool=None, log_action_states: List[str]=None, log_actions: List[str]=None):
        """LoggingConfig - a model defined in OpenAPI

        :param enable_onprem_gcs_transfer_logs: The enable_onprem_gcs_transfer_logs of this LoggingConfig.
        :param log_action_states: The log_action_states of this LoggingConfig.
        :param log_actions: The log_actions of this LoggingConfig.
        """
        self.openapi_types = {
            'enable_onprem_gcs_transfer_logs': bool,
            'log_action_states': List[str],
            'log_actions': List[str]
        }

        self.attribute_map = {
            'enable_onprem_gcs_transfer_logs': 'enableOnpremGcsTransferLogs',
            'log_action_states': 'logActionStates',
            'log_actions': 'logActions'
        }

        self._enable_onprem_gcs_transfer_logs = enable_onprem_gcs_transfer_logs
        self._log_action_states = log_action_states
        self._log_actions = log_actions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoggingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoggingConfig of this LoggingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_onprem_gcs_transfer_logs(self):
        """Gets the enable_onprem_gcs_transfer_logs of this LoggingConfig.

        For transfers with a PosixFilesystem source, this option enables the Cloud Storage transfer logs for this transfer.

        :return: The enable_onprem_gcs_transfer_logs of this LoggingConfig.
        :rtype: bool
        """
        return self._enable_onprem_gcs_transfer_logs

    @enable_onprem_gcs_transfer_logs.setter
    def enable_onprem_gcs_transfer_logs(self, enable_onprem_gcs_transfer_logs):
        """Sets the enable_onprem_gcs_transfer_logs of this LoggingConfig.

        For transfers with a PosixFilesystem source, this option enables the Cloud Storage transfer logs for this transfer.

        :param enable_onprem_gcs_transfer_logs: The enable_onprem_gcs_transfer_logs of this LoggingConfig.
        :type enable_onprem_gcs_transfer_logs: bool
        """

        self._enable_onprem_gcs_transfer_logs = enable_onprem_gcs_transfer_logs

    @property
    def log_action_states(self):
        """Gets the log_action_states of this LoggingConfig.

        States in which `log_actions` are logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.

        :return: The log_action_states of this LoggingConfig.
        :rtype: List[str]
        """
        return self._log_action_states

    @log_action_states.setter
    def log_action_states(self, log_action_states):
        """Sets the log_action_states of this LoggingConfig.

        States in which `log_actions` are logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.

        :param log_action_states: The log_action_states of this LoggingConfig.
        :type log_action_states: List[str]
        """
        allowed_values = ["LOGGABLE_ACTION_STATE_UNSPECIFIED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if not set(log_action_states).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `log_action_states` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(log_action_states) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._log_action_states = log_action_states

    @property
    def log_actions(self):
        """Gets the log_actions of this LoggingConfig.

        Specifies the actions to be logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.

        :return: The log_actions of this LoggingConfig.
        :rtype: List[str]
        """
        return self._log_actions

    @log_actions.setter
    def log_actions(self, log_actions):
        """Sets the log_actions of this LoggingConfig.

        Specifies the actions to be logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.

        :param log_actions: The log_actions of this LoggingConfig.
        :type log_actions: List[str]
        """
        allowed_values = ["LOGGABLE_ACTION_UNSPECIFIED", "FIND", "DELETE", "COPY"]  # noqa: E501
        if not set(log_actions).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `log_actions` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(log_actions) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._log_actions = log_actions
