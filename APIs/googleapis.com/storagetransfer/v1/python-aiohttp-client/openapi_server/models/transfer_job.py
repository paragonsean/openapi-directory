# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_stream import EventStream
from openapi_server.models.logging_config import LoggingConfig
from openapi_server.models.notification_config import NotificationConfig
from openapi_server.models.schedule import Schedule
from openapi_server.models.transfer_spec import TransferSpec
from openapi_server import util


class TransferJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: str=None, deletion_time: str=None, description: str=None, event_stream: EventStream=None, last_modification_time: str=None, latest_operation_name: str=None, logging_config: LoggingConfig=None, name: str=None, notification_config: NotificationConfig=None, project_id: str=None, schedule: Schedule=None, status: str=None, transfer_spec: TransferSpec=None):
        """TransferJob - a model defined in OpenAPI

        :param creation_time: The creation_time of this TransferJob.
        :param deletion_time: The deletion_time of this TransferJob.
        :param description: The description of this TransferJob.
        :param event_stream: The event_stream of this TransferJob.
        :param last_modification_time: The last_modification_time of this TransferJob.
        :param latest_operation_name: The latest_operation_name of this TransferJob.
        :param logging_config: The logging_config of this TransferJob.
        :param name: The name of this TransferJob.
        :param notification_config: The notification_config of this TransferJob.
        :param project_id: The project_id of this TransferJob.
        :param schedule: The schedule of this TransferJob.
        :param status: The status of this TransferJob.
        :param transfer_spec: The transfer_spec of this TransferJob.
        """
        self.openapi_types = {
            'creation_time': str,
            'deletion_time': str,
            'description': str,
            'event_stream': EventStream,
            'last_modification_time': str,
            'latest_operation_name': str,
            'logging_config': LoggingConfig,
            'name': str,
            'notification_config': NotificationConfig,
            'project_id': str,
            'schedule': Schedule,
            'status': str,
            'transfer_spec': TransferSpec
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'deletion_time': 'deletionTime',
            'description': 'description',
            'event_stream': 'eventStream',
            'last_modification_time': 'lastModificationTime',
            'latest_operation_name': 'latestOperationName',
            'logging_config': 'loggingConfig',
            'name': 'name',
            'notification_config': 'notificationConfig',
            'project_id': 'projectId',
            'schedule': 'schedule',
            'status': 'status',
            'transfer_spec': 'transferSpec'
        }

        self._creation_time = creation_time
        self._deletion_time = deletion_time
        self._description = description
        self._event_stream = event_stream
        self._last_modification_time = last_modification_time
        self._latest_operation_name = latest_operation_name
        self._logging_config = logging_config
        self._name = name
        self._notification_config = notification_config
        self._project_id = project_id
        self._schedule = schedule
        self._status = status
        self._transfer_spec = transfer_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferJob of this TransferJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this TransferJob.

        Output only. The time that the transfer job was created.

        :return: The creation_time of this TransferJob.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TransferJob.

        Output only. The time that the transfer job was created.

        :param creation_time: The creation_time of this TransferJob.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def deletion_time(self):
        """Gets the deletion_time of this TransferJob.

        Output only. The time that the transfer job was deleted.

        :return: The deletion_time of this TransferJob.
        :rtype: str
        """
        return self._deletion_time

    @deletion_time.setter
    def deletion_time(self, deletion_time):
        """Sets the deletion_time of this TransferJob.

        Output only. The time that the transfer job was deleted.

        :param deletion_time: The deletion_time of this TransferJob.
        :type deletion_time: str
        """

        self._deletion_time = deletion_time

    @property
    def description(self):
        """Gets the description of this TransferJob.

        A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.

        :return: The description of this TransferJob.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransferJob.

        A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.

        :param description: The description of this TransferJob.
        :type description: str
        """

        self._description = description

    @property
    def event_stream(self):
        """Gets the event_stream of this TransferJob.


        :return: The event_stream of this TransferJob.
        :rtype: EventStream
        """
        return self._event_stream

    @event_stream.setter
    def event_stream(self, event_stream):
        """Sets the event_stream of this TransferJob.


        :param event_stream: The event_stream of this TransferJob.
        :type event_stream: EventStream
        """

        self._event_stream = event_stream

    @property
    def last_modification_time(self):
        """Gets the last_modification_time of this TransferJob.

        Output only. The time that the transfer job was last modified.

        :return: The last_modification_time of this TransferJob.
        :rtype: str
        """
        return self._last_modification_time

    @last_modification_time.setter
    def last_modification_time(self, last_modification_time):
        """Sets the last_modification_time of this TransferJob.

        Output only. The time that the transfer job was last modified.

        :param last_modification_time: The last_modification_time of this TransferJob.
        :type last_modification_time: str
        """

        self._last_modification_time = last_modification_time

    @property
    def latest_operation_name(self):
        """Gets the latest_operation_name of this TransferJob.

        The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.

        :return: The latest_operation_name of this TransferJob.
        :rtype: str
        """
        return self._latest_operation_name

    @latest_operation_name.setter
    def latest_operation_name(self, latest_operation_name):
        """Sets the latest_operation_name of this TransferJob.

        The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.

        :param latest_operation_name: The latest_operation_name of this TransferJob.
        :type latest_operation_name: str
        """

        self._latest_operation_name = latest_operation_name

    @property
    def logging_config(self):
        """Gets the logging_config of this TransferJob.


        :return: The logging_config of this TransferJob.
        :rtype: LoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this TransferJob.


        :param logging_config: The logging_config of this TransferJob.
        :type logging_config: LoggingConfig
        """

        self._logging_config = logging_config

    @property
    def name(self):
        """Gets the name of this TransferJob.

        A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with `\"transferJobs/\"` prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with `transferJobs/OPI` specifically. For all other transfer types, this name must not start with `transferJobs/OPI`. Non-PosixFilesystem example: `\"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` PosixFilesystem example: `\"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.

        :return: The name of this TransferJob.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransferJob.

        A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with `\"transferJobs/\"` prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with `transferJobs/OPI` specifically. For all other transfer types, this name must not start with `transferJobs/OPI`. Non-PosixFilesystem example: `\"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` PosixFilesystem example: `\"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.

        :param name: The name of this TransferJob.
        :type name: str
        """

        self._name = name

    @property
    def notification_config(self):
        """Gets the notification_config of this TransferJob.


        :return: The notification_config of this TransferJob.
        :rtype: NotificationConfig
        """
        return self._notification_config

    @notification_config.setter
    def notification_config(self, notification_config):
        """Sets the notification_config of this TransferJob.


        :param notification_config: The notification_config of this TransferJob.
        :type notification_config: NotificationConfig
        """

        self._notification_config = notification_config

    @property
    def project_id(self):
        """Gets the project_id of this TransferJob.

        The ID of the Google Cloud project that owns the job.

        :return: The project_id of this TransferJob.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TransferJob.

        The ID of the Google Cloud project that owns the job.

        :param project_id: The project_id of this TransferJob.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def schedule(self):
        """Gets the schedule of this TransferJob.


        :return: The schedule of this TransferJob.
        :rtype: Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this TransferJob.


        :param schedule: The schedule of this TransferJob.
        :type schedule: Schedule
        """

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this TransferJob.

        Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.

        :return: The status of this TransferJob.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransferJob.

        Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.

        :param status: The status of this TransferJob.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "ENABLED", "DISABLED", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transfer_spec(self):
        """Gets the transfer_spec of this TransferJob.


        :return: The transfer_spec of this TransferJob.
        :rtype: TransferSpec
        """
        return self._transfer_spec

    @transfer_spec.setter
    def transfer_spec(self, transfer_spec):
        """Sets the transfer_spec of this TransferJob.


        :param transfer_spec: The transfer_spec of this TransferJob.
        :type transfer_spec: TransferSpec
        """

        self._transfer_spec = transfer_spec
