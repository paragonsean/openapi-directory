# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ObjectConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude_prefixes: List[str]=None, include_prefixes: List[str]=None, last_modified_before: str=None, last_modified_since: str=None, max_time_elapsed_since_last_modification: str=None, min_time_elapsed_since_last_modification: str=None):
        """ObjectConditions - a model defined in OpenAPI

        :param exclude_prefixes: The exclude_prefixes of this ObjectConditions.
        :param include_prefixes: The include_prefixes of this ObjectConditions.
        :param last_modified_before: The last_modified_before of this ObjectConditions.
        :param last_modified_since: The last_modified_since of this ObjectConditions.
        :param max_time_elapsed_since_last_modification: The max_time_elapsed_since_last_modification of this ObjectConditions.
        :param min_time_elapsed_since_last_modification: The min_time_elapsed_since_last_modification of this ObjectConditions.
        """
        self.openapi_types = {
            'exclude_prefixes': List[str],
            'include_prefixes': List[str],
            'last_modified_before': str,
            'last_modified_since': str,
            'max_time_elapsed_since_last_modification': str,
            'min_time_elapsed_since_last_modification': str
        }

        self.attribute_map = {
            'exclude_prefixes': 'excludePrefixes',
            'include_prefixes': 'includePrefixes',
            'last_modified_before': 'lastModifiedBefore',
            'last_modified_since': 'lastModifiedSince',
            'max_time_elapsed_since_last_modification': 'maxTimeElapsedSinceLastModification',
            'min_time_elapsed_since_last_modification': 'minTimeElapsedSinceLastModification'
        }

        self._exclude_prefixes = exclude_prefixes
        self._include_prefixes = include_prefixes
        self._last_modified_before = last_modified_before
        self._last_modified_since = last_modified_since
        self._max_time_elapsed_since_last_modification = max_time_elapsed_since_last_modification
        self._min_time_elapsed_since_last_modification = min_time_elapsed_since_last_modification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ObjectConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ObjectConditions of this ObjectConditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude_prefixes(self):
        """Gets the exclude_prefixes of this ObjectConditions.

        If you specify `exclude_prefixes`, Storage Transfer Service uses the items in the `exclude_prefixes` array to determine which objects to exclude from a transfer. Objects must not start with one of the matching `exclude_prefixes` for inclusion in a transfer. The following are requirements of `exclude_prefixes`: * Each exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each exclude-prefix must omit the leading slash. For example, to exclude the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the exclude-prefix as `logs/y=2015/requests.gz`. * None of the exclude-prefix values can be empty, if specified. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If include_prefixes is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `exclude_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).

        :return: The exclude_prefixes of this ObjectConditions.
        :rtype: List[str]
        """
        return self._exclude_prefixes

    @exclude_prefixes.setter
    def exclude_prefixes(self, exclude_prefixes):
        """Sets the exclude_prefixes of this ObjectConditions.

        If you specify `exclude_prefixes`, Storage Transfer Service uses the items in the `exclude_prefixes` array to determine which objects to exclude from a transfer. Objects must not start with one of the matching `exclude_prefixes` for inclusion in a transfer. The following are requirements of `exclude_prefixes`: * Each exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each exclude-prefix must omit the leading slash. For example, to exclude the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the exclude-prefix as `logs/y=2015/requests.gz`. * None of the exclude-prefix values can be empty, if specified. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If include_prefixes is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `exclude_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).

        :param exclude_prefixes: The exclude_prefixes of this ObjectConditions.
        :type exclude_prefixes: List[str]
        """

        self._exclude_prefixes = exclude_prefixes

    @property
    def include_prefixes(self):
        """Gets the include_prefixes of this ObjectConditions.

        If you specify `include_prefixes`, Storage Transfer Service uses the items in the `include_prefixes` array to determine which objects to include in a transfer. Objects must start with one of the matching `include_prefixes` for inclusion in the transfer. If exclude_prefixes is specified, objects must not start with any of the `exclude_prefixes` specified for inclusion in the transfer. The following are requirements of `include_prefixes`: * Each include-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix must omit the leading slash. For example, to include the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include-prefix as `logs/y=2015/requests.gz`. * None of the include-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. The max size of `include_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).

        :return: The include_prefixes of this ObjectConditions.
        :rtype: List[str]
        """
        return self._include_prefixes

    @include_prefixes.setter
    def include_prefixes(self, include_prefixes):
        """Sets the include_prefixes of this ObjectConditions.

        If you specify `include_prefixes`, Storage Transfer Service uses the items in the `include_prefixes` array to determine which objects to include in a transfer. Objects must start with one of the matching `include_prefixes` for inclusion in the transfer. If exclude_prefixes is specified, objects must not start with any of the `exclude_prefixes` specified for inclusion in the transfer. The following are requirements of `include_prefixes`: * Each include-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix must omit the leading slash. For example, to include the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include-prefix as `logs/y=2015/requests.gz`. * None of the include-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. The max size of `include_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).

        :param include_prefixes: The include_prefixes of this ObjectConditions.
        :type include_prefixes: List[str]
        """

        self._include_prefixes = include_prefixes

    @property
    def last_modified_before(self):
        """Gets the last_modified_before of this ObjectConditions.

        If specified, only objects with a \"last modification time\" before this timestamp and objects that don't have a \"last modification time\" are transferred.

        :return: The last_modified_before of this ObjectConditions.
        :rtype: str
        """
        return self._last_modified_before

    @last_modified_before.setter
    def last_modified_before(self, last_modified_before):
        """Sets the last_modified_before of this ObjectConditions.

        If specified, only objects with a \"last modification time\" before this timestamp and objects that don't have a \"last modification time\" are transferred.

        :param last_modified_before: The last_modified_before of this ObjectConditions.
        :type last_modified_before: str
        """

        self._last_modified_before = last_modified_before

    @property
    def last_modified_since(self):
        """Gets the last_modified_since of this ObjectConditions.

        If specified, only objects with a \"last modification time\" on or after this timestamp and objects that don't have a \"last modification time\" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day

        :return: The last_modified_since of this ObjectConditions.
        :rtype: str
        """
        return self._last_modified_since

    @last_modified_since.setter
    def last_modified_since(self, last_modified_since):
        """Sets the last_modified_since of this ObjectConditions.

        If specified, only objects with a \"last modification time\" on or after this timestamp and objects that don't have a \"last modification time\" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day

        :param last_modified_since: The last_modified_since of this ObjectConditions.
        :type last_modified_since: str
        """

        self._last_modified_since = last_modified_since

    @property
    def max_time_elapsed_since_last_modification(self):
        """Gets the max_time_elapsed_since_last_modification of this ObjectConditions.

        Ensures that objects are not transferred if a specific maximum time has elapsed since the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation`and the \"last modification time\" of the object is less than the value of max_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.

        :return: The max_time_elapsed_since_last_modification of this ObjectConditions.
        :rtype: str
        """
        return self._max_time_elapsed_since_last_modification

    @max_time_elapsed_since_last_modification.setter
    def max_time_elapsed_since_last_modification(self, max_time_elapsed_since_last_modification):
        """Sets the max_time_elapsed_since_last_modification of this ObjectConditions.

        Ensures that objects are not transferred if a specific maximum time has elapsed since the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation`and the \"last modification time\" of the object is less than the value of max_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.

        :param max_time_elapsed_since_last_modification: The max_time_elapsed_since_last_modification of this ObjectConditions.
        :type max_time_elapsed_since_last_modification: str
        """

        self._max_time_elapsed_since_last_modification = max_time_elapsed_since_last_modification

    @property
    def min_time_elapsed_since_last_modification(self):
        """Gets the min_time_elapsed_since_last_modification of this ObjectConditions.

        Ensures that objects are not transferred until a specific minimum time has elapsed after the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation` and the \"last modification time\" of the object is equal to or greater than the value of min_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.

        :return: The min_time_elapsed_since_last_modification of this ObjectConditions.
        :rtype: str
        """
        return self._min_time_elapsed_since_last_modification

    @min_time_elapsed_since_last_modification.setter
    def min_time_elapsed_since_last_modification(self, min_time_elapsed_since_last_modification):
        """Sets the min_time_elapsed_since_last_modification of this ObjectConditions.

        Ensures that objects are not transferred until a specific minimum time has elapsed after the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation` and the \"last modification time\" of the object is equal to or greater than the value of min_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.

        :param min_time_elapsed_since_last_modification: The min_time_elapsed_since_last_modification of this ObjectConditions.
        :type min_time_elapsed_since_last_modification: str
        """

        self._min_time_elapsed_since_last_modification = min_time_elapsed_since_last_modification
