# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MetadataOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: str=None, gid: str=None, kms_key: str=None, mode: str=None, storage_class: str=None, symlink: str=None, temporary_hold: str=None, time_created: str=None, uid: str=None):
        """MetadataOptions - a model defined in OpenAPI

        :param acl: The acl of this MetadataOptions.
        :param gid: The gid of this MetadataOptions.
        :param kms_key: The kms_key of this MetadataOptions.
        :param mode: The mode of this MetadataOptions.
        :param storage_class: The storage_class of this MetadataOptions.
        :param symlink: The symlink of this MetadataOptions.
        :param temporary_hold: The temporary_hold of this MetadataOptions.
        :param time_created: The time_created of this MetadataOptions.
        :param uid: The uid of this MetadataOptions.
        """
        self.openapi_types = {
            'acl': str,
            'gid': str,
            'kms_key': str,
            'mode': str,
            'storage_class': str,
            'symlink': str,
            'temporary_hold': str,
            'time_created': str,
            'uid': str
        }

        self.attribute_map = {
            'acl': 'acl',
            'gid': 'gid',
            'kms_key': 'kmsKey',
            'mode': 'mode',
            'storage_class': 'storageClass',
            'symlink': 'symlink',
            'temporary_hold': 'temporaryHold',
            'time_created': 'timeCreated',
            'uid': 'uid'
        }

        self._acl = acl
        self._gid = gid
        self._kms_key = kms_key
        self._mode = mode
        self._storage_class = storage_class
        self._symlink = symlink
        self._temporary_hold = temporary_hold
        self._time_created = time_created
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetadataOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetadataOptions of this MetadataOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this MetadataOptions.

        Specifies how each object's ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.

        :return: The acl of this MetadataOptions.
        :rtype: str
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this MetadataOptions.

        Specifies how each object's ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.

        :param acl: The acl of this MetadataOptions.
        :type acl: str
        """
        allowed_values = ["ACL_UNSPECIFIED", "ACL_DESTINATION_BUCKET_DEFAULT", "ACL_PRESERVE"]  # noqa: E501
        if acl not in allowed_values:
            raise ValueError(
                "Invalid value for `acl` ({0}), must be one of {1}"
                .format(acl, allowed_values)
            )

        self._acl = acl

    @property
    def gid(self):
        """Gets the gid of this MetadataOptions.

        Specifies how each file's POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :return: The gid of this MetadataOptions.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this MetadataOptions.

        Specifies how each file's POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :param gid: The gid of this MetadataOptions.
        :type gid: str
        """
        allowed_values = ["GID_UNSPECIFIED", "GID_SKIP", "GID_NUMBER"]  # noqa: E501
        if gid not in allowed_values:
            raise ValueError(
                "Invalid value for `gid` ({0}), must be one of {1}"
                .format(gid, allowed_values)
            )

        self._gid = gid

    @property
    def kms_key(self):
        """Gets the kms_key of this MetadataOptions.

        Specifies how each object's Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.

        :return: The kms_key of this MetadataOptions.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this MetadataOptions.

        Specifies how each object's Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.

        :param kms_key: The kms_key of this MetadataOptions.
        :type kms_key: str
        """
        allowed_values = ["KMS_KEY_UNSPECIFIED", "KMS_KEY_DESTINATION_BUCKET_DEFAULT", "KMS_KEY_PRESERVE"]  # noqa: E501
        if kms_key not in allowed_values:
            raise ValueError(
                "Invalid value for `kms_key` ({0}), must be one of {1}"
                .format(kms_key, allowed_values)
            )

        self._kms_key = kms_key

    @property
    def mode(self):
        """Gets the mode of this MetadataOptions.

        Specifies how each file's mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :return: The mode of this MetadataOptions.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MetadataOptions.

        Specifies how each file's mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :param mode: The mode of this MetadataOptions.
        :type mode: str
        """
        allowed_values = ["MODE_UNSPECIFIED", "MODE_SKIP", "MODE_PRESERVE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def storage_class(self):
        """Gets the storage_class of this MetadataOptions.

        Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.

        :return: The storage_class of this MetadataOptions.
        :rtype: str
        """
        return self._storage_class

    @storage_class.setter
    def storage_class(self, storage_class):
        """Sets the storage_class of this MetadataOptions.

        Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.

        :param storage_class: The storage_class of this MetadataOptions.
        :type storage_class: str
        """
        allowed_values = ["STORAGE_CLASS_UNSPECIFIED", "STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT", "STORAGE_CLASS_PRESERVE", "STORAGE_CLASS_STANDARD", "STORAGE_CLASS_NEARLINE", "STORAGE_CLASS_COLDLINE", "STORAGE_CLASS_ARCHIVE"]  # noqa: E501
        if storage_class not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_class` ({0}), must be one of {1}"
                .format(storage_class, allowed_values)
            )

        self._storage_class = storage_class

    @property
    def symlink(self):
        """Gets the symlink of this MetadataOptions.

        Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :return: The symlink of this MetadataOptions.
        :rtype: str
        """
        return self._symlink

    @symlink.setter
    def symlink(self, symlink):
        """Sets the symlink of this MetadataOptions.

        Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :param symlink: The symlink of this MetadataOptions.
        :type symlink: str
        """
        allowed_values = ["SYMLINK_UNSPECIFIED", "SYMLINK_SKIP", "SYMLINK_PRESERVE"]  # noqa: E501
        if symlink not in allowed_values:
            raise ValueError(
                "Invalid value for `symlink` ({0}), must be one of {1}"
                .format(symlink, allowed_values)
            )

        self._symlink = symlink

    @property
    def temporary_hold(self):
        """Gets the temporary_hold of this MetadataOptions.

        Specifies how each object's temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.

        :return: The temporary_hold of this MetadataOptions.
        :rtype: str
        """
        return self._temporary_hold

    @temporary_hold.setter
    def temporary_hold(self, temporary_hold):
        """Sets the temporary_hold of this MetadataOptions.

        Specifies how each object's temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.

        :param temporary_hold: The temporary_hold of this MetadataOptions.
        :type temporary_hold: str
        """
        allowed_values = ["TEMPORARY_HOLD_UNSPECIFIED", "TEMPORARY_HOLD_SKIP", "TEMPORARY_HOLD_PRESERVE"]  # noqa: E501
        if temporary_hold not in allowed_values:
            raise ValueError(
                "Invalid value for `temporary_hold` ({0}), must be one of {1}"
                .format(temporary_hold, allowed_values)
            )

        self._temporary_hold = temporary_hold

    @property
    def time_created(self):
        """Gets the time_created of this MetadataOptions.

        Specifies how each object's `timeCreated` metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.

        :return: The time_created of this MetadataOptions.
        :rtype: str
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this MetadataOptions.

        Specifies how each object's `timeCreated` metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.

        :param time_created: The time_created of this MetadataOptions.
        :type time_created: str
        """
        allowed_values = ["TIME_CREATED_UNSPECIFIED", "TIME_CREATED_SKIP", "TIME_CREATED_PRESERVE_AS_CUSTOM_TIME"]  # noqa: E501
        if time_created not in allowed_values:
            raise ValueError(
                "Invalid value for `time_created` ({0}), must be one of {1}"
                .format(time_created, allowed_values)
            )

        self._time_created = time_created

    @property
    def uid(self):
        """Gets the uid of this MetadataOptions.

        Specifies how each file's POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :return: The uid of this MetadataOptions.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this MetadataOptions.

        Specifies how each file's POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.

        :param uid: The uid of this MetadataOptions.
        :type uid: str
        """
        allowed_values = ["UID_UNSPECIFIED", "UID_SKIP", "UID_NUMBER"]  # noqa: E501
        if uid not in allowed_values:
            raise ValueError(
                "Invalid value for `uid` ({0}), must be one of {1}"
                .format(uid, allowed_values)
            )

        self._uid = uid
