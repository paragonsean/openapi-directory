# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GcsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, managed_folder_transfer_enabled: bool=None, path: str=None):
        """GcsData - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this GcsData.
        :param managed_folder_transfer_enabled: The managed_folder_transfer_enabled of this GcsData.
        :param path: The path of this GcsData.
        """
        self.openapi_types = {
            'bucket_name': str,
            'managed_folder_transfer_enabled': bool,
            'path': str
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'managed_folder_transfer_enabled': 'managedFolderTransferEnabled',
            'path': 'path'
        }

        self._bucket_name = bucket_name
        self._managed_folder_transfer_enabled = managed_folder_transfer_enabled
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GcsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GcsData of this GcsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this GcsData.

        Required. Cloud Storage bucket name. Must meet [Bucket Name Requirements](/storage/docs/naming#requirements).

        :return: The bucket_name of this GcsData.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this GcsData.

        Required. Cloud Storage bucket name. Must meet [Bucket Name Requirements](/storage/docs/naming#requirements).

        :param bucket_name: The bucket_name of this GcsData.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def managed_folder_transfer_enabled(self):
        """Gets the managed_folder_transfer_enabled of this GcsData.

        Transfer managed folders is in public preview. This option is only applicable to the Cloud Storage source bucket. If set to true: - The source managed folder will be transferred to the destination bucket - The destination managed folder will always be overwritten, other OVERWRITE options will not be supported

        :return: The managed_folder_transfer_enabled of this GcsData.
        :rtype: bool
        """
        return self._managed_folder_transfer_enabled

    @managed_folder_transfer_enabled.setter
    def managed_folder_transfer_enabled(self, managed_folder_transfer_enabled):
        """Sets the managed_folder_transfer_enabled of this GcsData.

        Transfer managed folders is in public preview. This option is only applicable to the Cloud Storage source bucket. If set to true: - The source managed folder will be transferred to the destination bucket - The destination managed folder will always be overwritten, other OVERWRITE options will not be supported

        :param managed_folder_transfer_enabled: The managed_folder_transfer_enabled of this GcsData.
        :type managed_folder_transfer_enabled: bool
        """

        self._managed_folder_transfer_enabled = managed_folder_transfer_enabled

    @property
    def path(self):
        """Gets the path of this GcsData.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'. The root path value must meet [Object Name Requirements](/storage/docs/naming#objectnames).

        :return: The path of this GcsData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GcsData.

        Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'. The root path value must meet [Object Name Requirements](/storage/docs/naming#objectnames).

        :param path: The path of this GcsData.
        :type path: str
        """

        self._path = path
