/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferOptions::OAITransferOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferOptions::OAITransferOptions() {
    this->initializeModel();
}

OAITransferOptions::~OAITransferOptions() {}

void OAITransferOptions::initializeModel() {

    m_delete_objects_from_source_after_transfer_isSet = false;
    m_delete_objects_from_source_after_transfer_isValid = false;

    m_delete_objects_unique_in_sink_isSet = false;
    m_delete_objects_unique_in_sink_isValid = false;

    m_metadata_options_isSet = false;
    m_metadata_options_isValid = false;

    m_overwrite_objects_already_existing_in_sink_isSet = false;
    m_overwrite_objects_already_existing_in_sink_isValid = false;

    m_overwrite_when_isSet = false;
    m_overwrite_when_isValid = false;
}

void OAITransferOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferOptions::fromJsonObject(QJsonObject json) {

    m_delete_objects_from_source_after_transfer_isValid = ::OpenAPI::fromJsonValue(m_delete_objects_from_source_after_transfer, json[QString("deleteObjectsFromSourceAfterTransfer")]);
    m_delete_objects_from_source_after_transfer_isSet = !json[QString("deleteObjectsFromSourceAfterTransfer")].isNull() && m_delete_objects_from_source_after_transfer_isValid;

    m_delete_objects_unique_in_sink_isValid = ::OpenAPI::fromJsonValue(m_delete_objects_unique_in_sink, json[QString("deleteObjectsUniqueInSink")]);
    m_delete_objects_unique_in_sink_isSet = !json[QString("deleteObjectsUniqueInSink")].isNull() && m_delete_objects_unique_in_sink_isValid;

    m_metadata_options_isValid = ::OpenAPI::fromJsonValue(m_metadata_options, json[QString("metadataOptions")]);
    m_metadata_options_isSet = !json[QString("metadataOptions")].isNull() && m_metadata_options_isValid;

    m_overwrite_objects_already_existing_in_sink_isValid = ::OpenAPI::fromJsonValue(m_overwrite_objects_already_existing_in_sink, json[QString("overwriteObjectsAlreadyExistingInSink")]);
    m_overwrite_objects_already_existing_in_sink_isSet = !json[QString("overwriteObjectsAlreadyExistingInSink")].isNull() && m_overwrite_objects_already_existing_in_sink_isValid;

    m_overwrite_when_isValid = ::OpenAPI::fromJsonValue(m_overwrite_when, json[QString("overwriteWhen")]);
    m_overwrite_when_isSet = !json[QString("overwriteWhen")].isNull() && m_overwrite_when_isValid;
}

QString OAITransferOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_objects_from_source_after_transfer_isSet) {
        obj.insert(QString("deleteObjectsFromSourceAfterTransfer"), ::OpenAPI::toJsonValue(m_delete_objects_from_source_after_transfer));
    }
    if (m_delete_objects_unique_in_sink_isSet) {
        obj.insert(QString("deleteObjectsUniqueInSink"), ::OpenAPI::toJsonValue(m_delete_objects_unique_in_sink));
    }
    if (m_metadata_options.isSet()) {
        obj.insert(QString("metadataOptions"), ::OpenAPI::toJsonValue(m_metadata_options));
    }
    if (m_overwrite_objects_already_existing_in_sink_isSet) {
        obj.insert(QString("overwriteObjectsAlreadyExistingInSink"), ::OpenAPI::toJsonValue(m_overwrite_objects_already_existing_in_sink));
    }
    if (m_overwrite_when_isSet) {
        obj.insert(QString("overwriteWhen"), ::OpenAPI::toJsonValue(m_overwrite_when));
    }
    return obj;
}

bool OAITransferOptions::isDeleteObjectsFromSourceAfterTransfer() const {
    return m_delete_objects_from_source_after_transfer;
}
void OAITransferOptions::setDeleteObjectsFromSourceAfterTransfer(const bool &delete_objects_from_source_after_transfer) {
    m_delete_objects_from_source_after_transfer = delete_objects_from_source_after_transfer;
    m_delete_objects_from_source_after_transfer_isSet = true;
}

bool OAITransferOptions::is_delete_objects_from_source_after_transfer_Set() const{
    return m_delete_objects_from_source_after_transfer_isSet;
}

bool OAITransferOptions::is_delete_objects_from_source_after_transfer_Valid() const{
    return m_delete_objects_from_source_after_transfer_isValid;
}

bool OAITransferOptions::isDeleteObjectsUniqueInSink() const {
    return m_delete_objects_unique_in_sink;
}
void OAITransferOptions::setDeleteObjectsUniqueInSink(const bool &delete_objects_unique_in_sink) {
    m_delete_objects_unique_in_sink = delete_objects_unique_in_sink;
    m_delete_objects_unique_in_sink_isSet = true;
}

bool OAITransferOptions::is_delete_objects_unique_in_sink_Set() const{
    return m_delete_objects_unique_in_sink_isSet;
}

bool OAITransferOptions::is_delete_objects_unique_in_sink_Valid() const{
    return m_delete_objects_unique_in_sink_isValid;
}

OAIMetadataOptions OAITransferOptions::getMetadataOptions() const {
    return m_metadata_options;
}
void OAITransferOptions::setMetadataOptions(const OAIMetadataOptions &metadata_options) {
    m_metadata_options = metadata_options;
    m_metadata_options_isSet = true;
}

bool OAITransferOptions::is_metadata_options_Set() const{
    return m_metadata_options_isSet;
}

bool OAITransferOptions::is_metadata_options_Valid() const{
    return m_metadata_options_isValid;
}

bool OAITransferOptions::isOverwriteObjectsAlreadyExistingInSink() const {
    return m_overwrite_objects_already_existing_in_sink;
}
void OAITransferOptions::setOverwriteObjectsAlreadyExistingInSink(const bool &overwrite_objects_already_existing_in_sink) {
    m_overwrite_objects_already_existing_in_sink = overwrite_objects_already_existing_in_sink;
    m_overwrite_objects_already_existing_in_sink_isSet = true;
}

bool OAITransferOptions::is_overwrite_objects_already_existing_in_sink_Set() const{
    return m_overwrite_objects_already_existing_in_sink_isSet;
}

bool OAITransferOptions::is_overwrite_objects_already_existing_in_sink_Valid() const{
    return m_overwrite_objects_already_existing_in_sink_isValid;
}

QString OAITransferOptions::getOverwriteWhen() const {
    return m_overwrite_when;
}
void OAITransferOptions::setOverwriteWhen(const QString &overwrite_when) {
    m_overwrite_when = overwrite_when;
    m_overwrite_when_isSet = true;
}

bool OAITransferOptions::is_overwrite_when_Set() const{
    return m_overwrite_when_isSet;
}

bool OAITransferOptions::is_overwrite_when_Valid() const{
    return m_overwrite_when_isValid;
}

bool OAITransferOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_objects_from_source_after_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_objects_unique_in_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_objects_already_existing_in_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_when_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
