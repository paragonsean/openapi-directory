/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureBlobStorageData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureBlobStorageData::OAIAzureBlobStorageData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureBlobStorageData::OAIAzureBlobStorageData() {
    this->initializeModel();
}

OAIAzureBlobStorageData::~OAIAzureBlobStorageData() {}

void OAIAzureBlobStorageData::initializeModel() {

    m_azure_credentials_isSet = false;
    m_azure_credentials_isValid = false;

    m_container_isSet = false;
    m_container_isValid = false;

    m_credentials_secret_isSet = false;
    m_credentials_secret_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;
}

void OAIAzureBlobStorageData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureBlobStorageData::fromJsonObject(QJsonObject json) {

    m_azure_credentials_isValid = ::OpenAPI::fromJsonValue(m_azure_credentials, json[QString("azureCredentials")]);
    m_azure_credentials_isSet = !json[QString("azureCredentials")].isNull() && m_azure_credentials_isValid;

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_credentials_secret_isValid = ::OpenAPI::fromJsonValue(m_credentials_secret, json[QString("credentialsSecret")]);
    m_credentials_secret_isSet = !json[QString("credentialsSecret")].isNull() && m_credentials_secret_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;
}

QString OAIAzureBlobStorageData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureBlobStorageData::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_credentials.isSet()) {
        obj.insert(QString("azureCredentials"), ::OpenAPI::toJsonValue(m_azure_credentials));
    }
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_credentials_secret_isSet) {
        obj.insert(QString("credentialsSecret"), ::OpenAPI::toJsonValue(m_credentials_secret));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_storage_account_isSet) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    return obj;
}

OAIAzureCredentials OAIAzureBlobStorageData::getAzureCredentials() const {
    return m_azure_credentials;
}
void OAIAzureBlobStorageData::setAzureCredentials(const OAIAzureCredentials &azure_credentials) {
    m_azure_credentials = azure_credentials;
    m_azure_credentials_isSet = true;
}

bool OAIAzureBlobStorageData::is_azure_credentials_Set() const{
    return m_azure_credentials_isSet;
}

bool OAIAzureBlobStorageData::is_azure_credentials_Valid() const{
    return m_azure_credentials_isValid;
}

QString OAIAzureBlobStorageData::getContainer() const {
    return m_container;
}
void OAIAzureBlobStorageData::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIAzureBlobStorageData::is_container_Set() const{
    return m_container_isSet;
}

bool OAIAzureBlobStorageData::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIAzureBlobStorageData::getCredentialsSecret() const {
    return m_credentials_secret;
}
void OAIAzureBlobStorageData::setCredentialsSecret(const QString &credentials_secret) {
    m_credentials_secret = credentials_secret;
    m_credentials_secret_isSet = true;
}

bool OAIAzureBlobStorageData::is_credentials_secret_Set() const{
    return m_credentials_secret_isSet;
}

bool OAIAzureBlobStorageData::is_credentials_secret_Valid() const{
    return m_credentials_secret_isValid;
}

QString OAIAzureBlobStorageData::getPath() const {
    return m_path;
}
void OAIAzureBlobStorageData::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAzureBlobStorageData::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAzureBlobStorageData::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAzureBlobStorageData::getStorageAccount() const {
    return m_storage_account;
}
void OAIAzureBlobStorageData::setStorageAccount(const QString &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIAzureBlobStorageData::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIAzureBlobStorageData::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

bool OAIAzureBlobStorageData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureBlobStorageData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
