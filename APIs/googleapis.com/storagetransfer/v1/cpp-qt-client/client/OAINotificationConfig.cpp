/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationConfig::OAINotificationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationConfig::OAINotificationConfig() {
    this->initializeModel();
}

OAINotificationConfig::~OAINotificationConfig() {}

void OAINotificationConfig::initializeModel() {

    m_event_types_isSet = false;
    m_event_types_isValid = false;

    m_payload_format_isSet = false;
    m_payload_format_isValid = false;

    m_pubsub_topic_isSet = false;
    m_pubsub_topic_isValid = false;
}

void OAINotificationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationConfig::fromJsonObject(QJsonObject json) {

    m_event_types_isValid = ::OpenAPI::fromJsonValue(m_event_types, json[QString("eventTypes")]);
    m_event_types_isSet = !json[QString("eventTypes")].isNull() && m_event_types_isValid;

    m_payload_format_isValid = ::OpenAPI::fromJsonValue(m_payload_format, json[QString("payloadFormat")]);
    m_payload_format_isSet = !json[QString("payloadFormat")].isNull() && m_payload_format_isValid;

    m_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_pubsub_topic, json[QString("pubsubTopic")]);
    m_pubsub_topic_isSet = !json[QString("pubsubTopic")].isNull() && m_pubsub_topic_isValid;
}

QString OAINotificationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_event_types.size() > 0) {
        obj.insert(QString("eventTypes"), ::OpenAPI::toJsonValue(m_event_types));
    }
    if (m_payload_format_isSet) {
        obj.insert(QString("payloadFormat"), ::OpenAPI::toJsonValue(m_payload_format));
    }
    if (m_pubsub_topic_isSet) {
        obj.insert(QString("pubsubTopic"), ::OpenAPI::toJsonValue(m_pubsub_topic));
    }
    return obj;
}

QList<QString> OAINotificationConfig::getEventTypes() const {
    return m_event_types;
}
void OAINotificationConfig::setEventTypes(const QList<QString> &event_types) {
    m_event_types = event_types;
    m_event_types_isSet = true;
}

bool OAINotificationConfig::is_event_types_Set() const{
    return m_event_types_isSet;
}

bool OAINotificationConfig::is_event_types_Valid() const{
    return m_event_types_isValid;
}

QString OAINotificationConfig::getPayloadFormat() const {
    return m_payload_format;
}
void OAINotificationConfig::setPayloadFormat(const QString &payload_format) {
    m_payload_format = payload_format;
    m_payload_format_isSet = true;
}

bool OAINotificationConfig::is_payload_format_Set() const{
    return m_payload_format_isSet;
}

bool OAINotificationConfig::is_payload_format_Valid() const{
    return m_payload_format_isValid;
}

QString OAINotificationConfig::getPubsubTopic() const {
    return m_pubsub_topic;
}
void OAINotificationConfig::setPubsubTopic(const QString &pubsub_topic) {
    m_pubsub_topic = pubsub_topic;
    m_pubsub_topic_isSet = true;
}

bool OAINotificationConfig::is_pubsub_topic_Set() const{
    return m_pubsub_topic_isSet;
}

bool OAINotificationConfig::is_pubsub_topic_Valid() const{
    return m_pubsub_topic_isValid;
}

bool OAINotificationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pubsub_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
