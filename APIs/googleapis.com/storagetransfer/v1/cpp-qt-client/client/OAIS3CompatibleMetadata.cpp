/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3CompatibleMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3CompatibleMetadata::OAIS3CompatibleMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3CompatibleMetadata::OAIS3CompatibleMetadata() {
    this->initializeModel();
}

OAIS3CompatibleMetadata::~OAIS3CompatibleMetadata() {}

void OAIS3CompatibleMetadata::initializeModel() {

    m_auth_method_isSet = false;
    m_auth_method_isValid = false;

    m_list_api_isSet = false;
    m_list_api_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_request_model_isSet = false;
    m_request_model_isValid = false;
}

void OAIS3CompatibleMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3CompatibleMetadata::fromJsonObject(QJsonObject json) {

    m_auth_method_isValid = ::OpenAPI::fromJsonValue(m_auth_method, json[QString("authMethod")]);
    m_auth_method_isSet = !json[QString("authMethod")].isNull() && m_auth_method_isValid;

    m_list_api_isValid = ::OpenAPI::fromJsonValue(m_list_api, json[QString("listApi")]);
    m_list_api_isSet = !json[QString("listApi")].isNull() && m_list_api_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_request_model_isValid = ::OpenAPI::fromJsonValue(m_request_model, json[QString("requestModel")]);
    m_request_model_isSet = !json[QString("requestModel")].isNull() && m_request_model_isValid;
}

QString OAIS3CompatibleMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3CompatibleMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_method_isSet) {
        obj.insert(QString("authMethod"), ::OpenAPI::toJsonValue(m_auth_method));
    }
    if (m_list_api_isSet) {
        obj.insert(QString("listApi"), ::OpenAPI::toJsonValue(m_list_api));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_request_model_isSet) {
        obj.insert(QString("requestModel"), ::OpenAPI::toJsonValue(m_request_model));
    }
    return obj;
}

QString OAIS3CompatibleMetadata::getAuthMethod() const {
    return m_auth_method;
}
void OAIS3CompatibleMetadata::setAuthMethod(const QString &auth_method) {
    m_auth_method = auth_method;
    m_auth_method_isSet = true;
}

bool OAIS3CompatibleMetadata::is_auth_method_Set() const{
    return m_auth_method_isSet;
}

bool OAIS3CompatibleMetadata::is_auth_method_Valid() const{
    return m_auth_method_isValid;
}

QString OAIS3CompatibleMetadata::getListApi() const {
    return m_list_api;
}
void OAIS3CompatibleMetadata::setListApi(const QString &list_api) {
    m_list_api = list_api;
    m_list_api_isSet = true;
}

bool OAIS3CompatibleMetadata::is_list_api_Set() const{
    return m_list_api_isSet;
}

bool OAIS3CompatibleMetadata::is_list_api_Valid() const{
    return m_list_api_isValid;
}

QString OAIS3CompatibleMetadata::getProtocol() const {
    return m_protocol;
}
void OAIS3CompatibleMetadata::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIS3CompatibleMetadata::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIS3CompatibleMetadata::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIS3CompatibleMetadata::getRequestModel() const {
    return m_request_model;
}
void OAIS3CompatibleMetadata::setRequestModel(const QString &request_model) {
    m_request_model = request_model;
    m_request_model_isSet = true;
}

bool OAIS3CompatibleMetadata::is_request_model_Set() const{
    return m_request_model_isSet;
}

bool OAIS3CompatibleMetadata::is_request_model_Valid() const{
    return m_request_model_isValid;
}

bool OAIS3CompatibleMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_api_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3CompatibleMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
