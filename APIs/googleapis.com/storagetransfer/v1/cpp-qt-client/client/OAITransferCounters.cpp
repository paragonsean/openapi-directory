/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferCounters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferCounters::OAITransferCounters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferCounters::OAITransferCounters() {
    this->initializeModel();
}

OAITransferCounters::~OAITransferCounters() {}

void OAITransferCounters::initializeModel() {

    m_bytes_copied_to_sink_isSet = false;
    m_bytes_copied_to_sink_isValid = false;

    m_bytes_deleted_from_sink_isSet = false;
    m_bytes_deleted_from_sink_isValid = false;

    m_bytes_deleted_from_source_isSet = false;
    m_bytes_deleted_from_source_isValid = false;

    m_bytes_failed_to_delete_from_sink_isSet = false;
    m_bytes_failed_to_delete_from_sink_isValid = false;

    m_bytes_found_from_source_isSet = false;
    m_bytes_found_from_source_isValid = false;

    m_bytes_found_only_from_sink_isSet = false;
    m_bytes_found_only_from_sink_isValid = false;

    m_bytes_from_source_failed_isSet = false;
    m_bytes_from_source_failed_isValid = false;

    m_bytes_from_source_skipped_by_sync_isSet = false;
    m_bytes_from_source_skipped_by_sync_isValid = false;

    m_directories_failed_to_list_from_source_isSet = false;
    m_directories_failed_to_list_from_source_isValid = false;

    m_directories_found_from_source_isSet = false;
    m_directories_found_from_source_isValid = false;

    m_directories_successfully_listed_from_source_isSet = false;
    m_directories_successfully_listed_from_source_isValid = false;

    m_intermediate_objects_cleaned_up_isSet = false;
    m_intermediate_objects_cleaned_up_isValid = false;

    m_intermediate_objects_failed_cleaned_up_isSet = false;
    m_intermediate_objects_failed_cleaned_up_isValid = false;

    m_objects_copied_to_sink_isSet = false;
    m_objects_copied_to_sink_isValid = false;

    m_objects_deleted_from_sink_isSet = false;
    m_objects_deleted_from_sink_isValid = false;

    m_objects_deleted_from_source_isSet = false;
    m_objects_deleted_from_source_isValid = false;

    m_objects_failed_to_delete_from_sink_isSet = false;
    m_objects_failed_to_delete_from_sink_isValid = false;

    m_objects_found_from_source_isSet = false;
    m_objects_found_from_source_isValid = false;

    m_objects_found_only_from_sink_isSet = false;
    m_objects_found_only_from_sink_isValid = false;

    m_objects_from_source_failed_isSet = false;
    m_objects_from_source_failed_isValid = false;

    m_objects_from_source_skipped_by_sync_isSet = false;
    m_objects_from_source_skipped_by_sync_isValid = false;
}

void OAITransferCounters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferCounters::fromJsonObject(QJsonObject json) {

    m_bytes_copied_to_sink_isValid = ::OpenAPI::fromJsonValue(m_bytes_copied_to_sink, json[QString("bytesCopiedToSink")]);
    m_bytes_copied_to_sink_isSet = !json[QString("bytesCopiedToSink")].isNull() && m_bytes_copied_to_sink_isValid;

    m_bytes_deleted_from_sink_isValid = ::OpenAPI::fromJsonValue(m_bytes_deleted_from_sink, json[QString("bytesDeletedFromSink")]);
    m_bytes_deleted_from_sink_isSet = !json[QString("bytesDeletedFromSink")].isNull() && m_bytes_deleted_from_sink_isValid;

    m_bytes_deleted_from_source_isValid = ::OpenAPI::fromJsonValue(m_bytes_deleted_from_source, json[QString("bytesDeletedFromSource")]);
    m_bytes_deleted_from_source_isSet = !json[QString("bytesDeletedFromSource")].isNull() && m_bytes_deleted_from_source_isValid;

    m_bytes_failed_to_delete_from_sink_isValid = ::OpenAPI::fromJsonValue(m_bytes_failed_to_delete_from_sink, json[QString("bytesFailedToDeleteFromSink")]);
    m_bytes_failed_to_delete_from_sink_isSet = !json[QString("bytesFailedToDeleteFromSink")].isNull() && m_bytes_failed_to_delete_from_sink_isValid;

    m_bytes_found_from_source_isValid = ::OpenAPI::fromJsonValue(m_bytes_found_from_source, json[QString("bytesFoundFromSource")]);
    m_bytes_found_from_source_isSet = !json[QString("bytesFoundFromSource")].isNull() && m_bytes_found_from_source_isValid;

    m_bytes_found_only_from_sink_isValid = ::OpenAPI::fromJsonValue(m_bytes_found_only_from_sink, json[QString("bytesFoundOnlyFromSink")]);
    m_bytes_found_only_from_sink_isSet = !json[QString("bytesFoundOnlyFromSink")].isNull() && m_bytes_found_only_from_sink_isValid;

    m_bytes_from_source_failed_isValid = ::OpenAPI::fromJsonValue(m_bytes_from_source_failed, json[QString("bytesFromSourceFailed")]);
    m_bytes_from_source_failed_isSet = !json[QString("bytesFromSourceFailed")].isNull() && m_bytes_from_source_failed_isValid;

    m_bytes_from_source_skipped_by_sync_isValid = ::OpenAPI::fromJsonValue(m_bytes_from_source_skipped_by_sync, json[QString("bytesFromSourceSkippedBySync")]);
    m_bytes_from_source_skipped_by_sync_isSet = !json[QString("bytesFromSourceSkippedBySync")].isNull() && m_bytes_from_source_skipped_by_sync_isValid;

    m_directories_failed_to_list_from_source_isValid = ::OpenAPI::fromJsonValue(m_directories_failed_to_list_from_source, json[QString("directoriesFailedToListFromSource")]);
    m_directories_failed_to_list_from_source_isSet = !json[QString("directoriesFailedToListFromSource")].isNull() && m_directories_failed_to_list_from_source_isValid;

    m_directories_found_from_source_isValid = ::OpenAPI::fromJsonValue(m_directories_found_from_source, json[QString("directoriesFoundFromSource")]);
    m_directories_found_from_source_isSet = !json[QString("directoriesFoundFromSource")].isNull() && m_directories_found_from_source_isValid;

    m_directories_successfully_listed_from_source_isValid = ::OpenAPI::fromJsonValue(m_directories_successfully_listed_from_source, json[QString("directoriesSuccessfullyListedFromSource")]);
    m_directories_successfully_listed_from_source_isSet = !json[QString("directoriesSuccessfullyListedFromSource")].isNull() && m_directories_successfully_listed_from_source_isValid;

    m_intermediate_objects_cleaned_up_isValid = ::OpenAPI::fromJsonValue(m_intermediate_objects_cleaned_up, json[QString("intermediateObjectsCleanedUp")]);
    m_intermediate_objects_cleaned_up_isSet = !json[QString("intermediateObjectsCleanedUp")].isNull() && m_intermediate_objects_cleaned_up_isValid;

    m_intermediate_objects_failed_cleaned_up_isValid = ::OpenAPI::fromJsonValue(m_intermediate_objects_failed_cleaned_up, json[QString("intermediateObjectsFailedCleanedUp")]);
    m_intermediate_objects_failed_cleaned_up_isSet = !json[QString("intermediateObjectsFailedCleanedUp")].isNull() && m_intermediate_objects_failed_cleaned_up_isValid;

    m_objects_copied_to_sink_isValid = ::OpenAPI::fromJsonValue(m_objects_copied_to_sink, json[QString("objectsCopiedToSink")]);
    m_objects_copied_to_sink_isSet = !json[QString("objectsCopiedToSink")].isNull() && m_objects_copied_to_sink_isValid;

    m_objects_deleted_from_sink_isValid = ::OpenAPI::fromJsonValue(m_objects_deleted_from_sink, json[QString("objectsDeletedFromSink")]);
    m_objects_deleted_from_sink_isSet = !json[QString("objectsDeletedFromSink")].isNull() && m_objects_deleted_from_sink_isValid;

    m_objects_deleted_from_source_isValid = ::OpenAPI::fromJsonValue(m_objects_deleted_from_source, json[QString("objectsDeletedFromSource")]);
    m_objects_deleted_from_source_isSet = !json[QString("objectsDeletedFromSource")].isNull() && m_objects_deleted_from_source_isValid;

    m_objects_failed_to_delete_from_sink_isValid = ::OpenAPI::fromJsonValue(m_objects_failed_to_delete_from_sink, json[QString("objectsFailedToDeleteFromSink")]);
    m_objects_failed_to_delete_from_sink_isSet = !json[QString("objectsFailedToDeleteFromSink")].isNull() && m_objects_failed_to_delete_from_sink_isValid;

    m_objects_found_from_source_isValid = ::OpenAPI::fromJsonValue(m_objects_found_from_source, json[QString("objectsFoundFromSource")]);
    m_objects_found_from_source_isSet = !json[QString("objectsFoundFromSource")].isNull() && m_objects_found_from_source_isValid;

    m_objects_found_only_from_sink_isValid = ::OpenAPI::fromJsonValue(m_objects_found_only_from_sink, json[QString("objectsFoundOnlyFromSink")]);
    m_objects_found_only_from_sink_isSet = !json[QString("objectsFoundOnlyFromSink")].isNull() && m_objects_found_only_from_sink_isValid;

    m_objects_from_source_failed_isValid = ::OpenAPI::fromJsonValue(m_objects_from_source_failed, json[QString("objectsFromSourceFailed")]);
    m_objects_from_source_failed_isSet = !json[QString("objectsFromSourceFailed")].isNull() && m_objects_from_source_failed_isValid;

    m_objects_from_source_skipped_by_sync_isValid = ::OpenAPI::fromJsonValue(m_objects_from_source_skipped_by_sync, json[QString("objectsFromSourceSkippedBySync")]);
    m_objects_from_source_skipped_by_sync_isSet = !json[QString("objectsFromSourceSkippedBySync")].isNull() && m_objects_from_source_skipped_by_sync_isValid;
}

QString OAITransferCounters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferCounters::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_copied_to_sink_isSet) {
        obj.insert(QString("bytesCopiedToSink"), ::OpenAPI::toJsonValue(m_bytes_copied_to_sink));
    }
    if (m_bytes_deleted_from_sink_isSet) {
        obj.insert(QString("bytesDeletedFromSink"), ::OpenAPI::toJsonValue(m_bytes_deleted_from_sink));
    }
    if (m_bytes_deleted_from_source_isSet) {
        obj.insert(QString("bytesDeletedFromSource"), ::OpenAPI::toJsonValue(m_bytes_deleted_from_source));
    }
    if (m_bytes_failed_to_delete_from_sink_isSet) {
        obj.insert(QString("bytesFailedToDeleteFromSink"), ::OpenAPI::toJsonValue(m_bytes_failed_to_delete_from_sink));
    }
    if (m_bytes_found_from_source_isSet) {
        obj.insert(QString("bytesFoundFromSource"), ::OpenAPI::toJsonValue(m_bytes_found_from_source));
    }
    if (m_bytes_found_only_from_sink_isSet) {
        obj.insert(QString("bytesFoundOnlyFromSink"), ::OpenAPI::toJsonValue(m_bytes_found_only_from_sink));
    }
    if (m_bytes_from_source_failed_isSet) {
        obj.insert(QString("bytesFromSourceFailed"), ::OpenAPI::toJsonValue(m_bytes_from_source_failed));
    }
    if (m_bytes_from_source_skipped_by_sync_isSet) {
        obj.insert(QString("bytesFromSourceSkippedBySync"), ::OpenAPI::toJsonValue(m_bytes_from_source_skipped_by_sync));
    }
    if (m_directories_failed_to_list_from_source_isSet) {
        obj.insert(QString("directoriesFailedToListFromSource"), ::OpenAPI::toJsonValue(m_directories_failed_to_list_from_source));
    }
    if (m_directories_found_from_source_isSet) {
        obj.insert(QString("directoriesFoundFromSource"), ::OpenAPI::toJsonValue(m_directories_found_from_source));
    }
    if (m_directories_successfully_listed_from_source_isSet) {
        obj.insert(QString("directoriesSuccessfullyListedFromSource"), ::OpenAPI::toJsonValue(m_directories_successfully_listed_from_source));
    }
    if (m_intermediate_objects_cleaned_up_isSet) {
        obj.insert(QString("intermediateObjectsCleanedUp"), ::OpenAPI::toJsonValue(m_intermediate_objects_cleaned_up));
    }
    if (m_intermediate_objects_failed_cleaned_up_isSet) {
        obj.insert(QString("intermediateObjectsFailedCleanedUp"), ::OpenAPI::toJsonValue(m_intermediate_objects_failed_cleaned_up));
    }
    if (m_objects_copied_to_sink_isSet) {
        obj.insert(QString("objectsCopiedToSink"), ::OpenAPI::toJsonValue(m_objects_copied_to_sink));
    }
    if (m_objects_deleted_from_sink_isSet) {
        obj.insert(QString("objectsDeletedFromSink"), ::OpenAPI::toJsonValue(m_objects_deleted_from_sink));
    }
    if (m_objects_deleted_from_source_isSet) {
        obj.insert(QString("objectsDeletedFromSource"), ::OpenAPI::toJsonValue(m_objects_deleted_from_source));
    }
    if (m_objects_failed_to_delete_from_sink_isSet) {
        obj.insert(QString("objectsFailedToDeleteFromSink"), ::OpenAPI::toJsonValue(m_objects_failed_to_delete_from_sink));
    }
    if (m_objects_found_from_source_isSet) {
        obj.insert(QString("objectsFoundFromSource"), ::OpenAPI::toJsonValue(m_objects_found_from_source));
    }
    if (m_objects_found_only_from_sink_isSet) {
        obj.insert(QString("objectsFoundOnlyFromSink"), ::OpenAPI::toJsonValue(m_objects_found_only_from_sink));
    }
    if (m_objects_from_source_failed_isSet) {
        obj.insert(QString("objectsFromSourceFailed"), ::OpenAPI::toJsonValue(m_objects_from_source_failed));
    }
    if (m_objects_from_source_skipped_by_sync_isSet) {
        obj.insert(QString("objectsFromSourceSkippedBySync"), ::OpenAPI::toJsonValue(m_objects_from_source_skipped_by_sync));
    }
    return obj;
}

QString OAITransferCounters::getBytesCopiedToSink() const {
    return m_bytes_copied_to_sink;
}
void OAITransferCounters::setBytesCopiedToSink(const QString &bytes_copied_to_sink) {
    m_bytes_copied_to_sink = bytes_copied_to_sink;
    m_bytes_copied_to_sink_isSet = true;
}

bool OAITransferCounters::is_bytes_copied_to_sink_Set() const{
    return m_bytes_copied_to_sink_isSet;
}

bool OAITransferCounters::is_bytes_copied_to_sink_Valid() const{
    return m_bytes_copied_to_sink_isValid;
}

QString OAITransferCounters::getBytesDeletedFromSink() const {
    return m_bytes_deleted_from_sink;
}
void OAITransferCounters::setBytesDeletedFromSink(const QString &bytes_deleted_from_sink) {
    m_bytes_deleted_from_sink = bytes_deleted_from_sink;
    m_bytes_deleted_from_sink_isSet = true;
}

bool OAITransferCounters::is_bytes_deleted_from_sink_Set() const{
    return m_bytes_deleted_from_sink_isSet;
}

bool OAITransferCounters::is_bytes_deleted_from_sink_Valid() const{
    return m_bytes_deleted_from_sink_isValid;
}

QString OAITransferCounters::getBytesDeletedFromSource() const {
    return m_bytes_deleted_from_source;
}
void OAITransferCounters::setBytesDeletedFromSource(const QString &bytes_deleted_from_source) {
    m_bytes_deleted_from_source = bytes_deleted_from_source;
    m_bytes_deleted_from_source_isSet = true;
}

bool OAITransferCounters::is_bytes_deleted_from_source_Set() const{
    return m_bytes_deleted_from_source_isSet;
}

bool OAITransferCounters::is_bytes_deleted_from_source_Valid() const{
    return m_bytes_deleted_from_source_isValid;
}

QString OAITransferCounters::getBytesFailedToDeleteFromSink() const {
    return m_bytes_failed_to_delete_from_sink;
}
void OAITransferCounters::setBytesFailedToDeleteFromSink(const QString &bytes_failed_to_delete_from_sink) {
    m_bytes_failed_to_delete_from_sink = bytes_failed_to_delete_from_sink;
    m_bytes_failed_to_delete_from_sink_isSet = true;
}

bool OAITransferCounters::is_bytes_failed_to_delete_from_sink_Set() const{
    return m_bytes_failed_to_delete_from_sink_isSet;
}

bool OAITransferCounters::is_bytes_failed_to_delete_from_sink_Valid() const{
    return m_bytes_failed_to_delete_from_sink_isValid;
}

QString OAITransferCounters::getBytesFoundFromSource() const {
    return m_bytes_found_from_source;
}
void OAITransferCounters::setBytesFoundFromSource(const QString &bytes_found_from_source) {
    m_bytes_found_from_source = bytes_found_from_source;
    m_bytes_found_from_source_isSet = true;
}

bool OAITransferCounters::is_bytes_found_from_source_Set() const{
    return m_bytes_found_from_source_isSet;
}

bool OAITransferCounters::is_bytes_found_from_source_Valid() const{
    return m_bytes_found_from_source_isValid;
}

QString OAITransferCounters::getBytesFoundOnlyFromSink() const {
    return m_bytes_found_only_from_sink;
}
void OAITransferCounters::setBytesFoundOnlyFromSink(const QString &bytes_found_only_from_sink) {
    m_bytes_found_only_from_sink = bytes_found_only_from_sink;
    m_bytes_found_only_from_sink_isSet = true;
}

bool OAITransferCounters::is_bytes_found_only_from_sink_Set() const{
    return m_bytes_found_only_from_sink_isSet;
}

bool OAITransferCounters::is_bytes_found_only_from_sink_Valid() const{
    return m_bytes_found_only_from_sink_isValid;
}

QString OAITransferCounters::getBytesFromSourceFailed() const {
    return m_bytes_from_source_failed;
}
void OAITransferCounters::setBytesFromSourceFailed(const QString &bytes_from_source_failed) {
    m_bytes_from_source_failed = bytes_from_source_failed;
    m_bytes_from_source_failed_isSet = true;
}

bool OAITransferCounters::is_bytes_from_source_failed_Set() const{
    return m_bytes_from_source_failed_isSet;
}

bool OAITransferCounters::is_bytes_from_source_failed_Valid() const{
    return m_bytes_from_source_failed_isValid;
}

QString OAITransferCounters::getBytesFromSourceSkippedBySync() const {
    return m_bytes_from_source_skipped_by_sync;
}
void OAITransferCounters::setBytesFromSourceSkippedBySync(const QString &bytes_from_source_skipped_by_sync) {
    m_bytes_from_source_skipped_by_sync = bytes_from_source_skipped_by_sync;
    m_bytes_from_source_skipped_by_sync_isSet = true;
}

bool OAITransferCounters::is_bytes_from_source_skipped_by_sync_Set() const{
    return m_bytes_from_source_skipped_by_sync_isSet;
}

bool OAITransferCounters::is_bytes_from_source_skipped_by_sync_Valid() const{
    return m_bytes_from_source_skipped_by_sync_isValid;
}

QString OAITransferCounters::getDirectoriesFailedToListFromSource() const {
    return m_directories_failed_to_list_from_source;
}
void OAITransferCounters::setDirectoriesFailedToListFromSource(const QString &directories_failed_to_list_from_source) {
    m_directories_failed_to_list_from_source = directories_failed_to_list_from_source;
    m_directories_failed_to_list_from_source_isSet = true;
}

bool OAITransferCounters::is_directories_failed_to_list_from_source_Set() const{
    return m_directories_failed_to_list_from_source_isSet;
}

bool OAITransferCounters::is_directories_failed_to_list_from_source_Valid() const{
    return m_directories_failed_to_list_from_source_isValid;
}

QString OAITransferCounters::getDirectoriesFoundFromSource() const {
    return m_directories_found_from_source;
}
void OAITransferCounters::setDirectoriesFoundFromSource(const QString &directories_found_from_source) {
    m_directories_found_from_source = directories_found_from_source;
    m_directories_found_from_source_isSet = true;
}

bool OAITransferCounters::is_directories_found_from_source_Set() const{
    return m_directories_found_from_source_isSet;
}

bool OAITransferCounters::is_directories_found_from_source_Valid() const{
    return m_directories_found_from_source_isValid;
}

QString OAITransferCounters::getDirectoriesSuccessfullyListedFromSource() const {
    return m_directories_successfully_listed_from_source;
}
void OAITransferCounters::setDirectoriesSuccessfullyListedFromSource(const QString &directories_successfully_listed_from_source) {
    m_directories_successfully_listed_from_source = directories_successfully_listed_from_source;
    m_directories_successfully_listed_from_source_isSet = true;
}

bool OAITransferCounters::is_directories_successfully_listed_from_source_Set() const{
    return m_directories_successfully_listed_from_source_isSet;
}

bool OAITransferCounters::is_directories_successfully_listed_from_source_Valid() const{
    return m_directories_successfully_listed_from_source_isValid;
}

QString OAITransferCounters::getIntermediateObjectsCleanedUp() const {
    return m_intermediate_objects_cleaned_up;
}
void OAITransferCounters::setIntermediateObjectsCleanedUp(const QString &intermediate_objects_cleaned_up) {
    m_intermediate_objects_cleaned_up = intermediate_objects_cleaned_up;
    m_intermediate_objects_cleaned_up_isSet = true;
}

bool OAITransferCounters::is_intermediate_objects_cleaned_up_Set() const{
    return m_intermediate_objects_cleaned_up_isSet;
}

bool OAITransferCounters::is_intermediate_objects_cleaned_up_Valid() const{
    return m_intermediate_objects_cleaned_up_isValid;
}

QString OAITransferCounters::getIntermediateObjectsFailedCleanedUp() const {
    return m_intermediate_objects_failed_cleaned_up;
}
void OAITransferCounters::setIntermediateObjectsFailedCleanedUp(const QString &intermediate_objects_failed_cleaned_up) {
    m_intermediate_objects_failed_cleaned_up = intermediate_objects_failed_cleaned_up;
    m_intermediate_objects_failed_cleaned_up_isSet = true;
}

bool OAITransferCounters::is_intermediate_objects_failed_cleaned_up_Set() const{
    return m_intermediate_objects_failed_cleaned_up_isSet;
}

bool OAITransferCounters::is_intermediate_objects_failed_cleaned_up_Valid() const{
    return m_intermediate_objects_failed_cleaned_up_isValid;
}

QString OAITransferCounters::getObjectsCopiedToSink() const {
    return m_objects_copied_to_sink;
}
void OAITransferCounters::setObjectsCopiedToSink(const QString &objects_copied_to_sink) {
    m_objects_copied_to_sink = objects_copied_to_sink;
    m_objects_copied_to_sink_isSet = true;
}

bool OAITransferCounters::is_objects_copied_to_sink_Set() const{
    return m_objects_copied_to_sink_isSet;
}

bool OAITransferCounters::is_objects_copied_to_sink_Valid() const{
    return m_objects_copied_to_sink_isValid;
}

QString OAITransferCounters::getObjectsDeletedFromSink() const {
    return m_objects_deleted_from_sink;
}
void OAITransferCounters::setObjectsDeletedFromSink(const QString &objects_deleted_from_sink) {
    m_objects_deleted_from_sink = objects_deleted_from_sink;
    m_objects_deleted_from_sink_isSet = true;
}

bool OAITransferCounters::is_objects_deleted_from_sink_Set() const{
    return m_objects_deleted_from_sink_isSet;
}

bool OAITransferCounters::is_objects_deleted_from_sink_Valid() const{
    return m_objects_deleted_from_sink_isValid;
}

QString OAITransferCounters::getObjectsDeletedFromSource() const {
    return m_objects_deleted_from_source;
}
void OAITransferCounters::setObjectsDeletedFromSource(const QString &objects_deleted_from_source) {
    m_objects_deleted_from_source = objects_deleted_from_source;
    m_objects_deleted_from_source_isSet = true;
}

bool OAITransferCounters::is_objects_deleted_from_source_Set() const{
    return m_objects_deleted_from_source_isSet;
}

bool OAITransferCounters::is_objects_deleted_from_source_Valid() const{
    return m_objects_deleted_from_source_isValid;
}

QString OAITransferCounters::getObjectsFailedToDeleteFromSink() const {
    return m_objects_failed_to_delete_from_sink;
}
void OAITransferCounters::setObjectsFailedToDeleteFromSink(const QString &objects_failed_to_delete_from_sink) {
    m_objects_failed_to_delete_from_sink = objects_failed_to_delete_from_sink;
    m_objects_failed_to_delete_from_sink_isSet = true;
}

bool OAITransferCounters::is_objects_failed_to_delete_from_sink_Set() const{
    return m_objects_failed_to_delete_from_sink_isSet;
}

bool OAITransferCounters::is_objects_failed_to_delete_from_sink_Valid() const{
    return m_objects_failed_to_delete_from_sink_isValid;
}

QString OAITransferCounters::getObjectsFoundFromSource() const {
    return m_objects_found_from_source;
}
void OAITransferCounters::setObjectsFoundFromSource(const QString &objects_found_from_source) {
    m_objects_found_from_source = objects_found_from_source;
    m_objects_found_from_source_isSet = true;
}

bool OAITransferCounters::is_objects_found_from_source_Set() const{
    return m_objects_found_from_source_isSet;
}

bool OAITransferCounters::is_objects_found_from_source_Valid() const{
    return m_objects_found_from_source_isValid;
}

QString OAITransferCounters::getObjectsFoundOnlyFromSink() const {
    return m_objects_found_only_from_sink;
}
void OAITransferCounters::setObjectsFoundOnlyFromSink(const QString &objects_found_only_from_sink) {
    m_objects_found_only_from_sink = objects_found_only_from_sink;
    m_objects_found_only_from_sink_isSet = true;
}

bool OAITransferCounters::is_objects_found_only_from_sink_Set() const{
    return m_objects_found_only_from_sink_isSet;
}

bool OAITransferCounters::is_objects_found_only_from_sink_Valid() const{
    return m_objects_found_only_from_sink_isValid;
}

QString OAITransferCounters::getObjectsFromSourceFailed() const {
    return m_objects_from_source_failed;
}
void OAITransferCounters::setObjectsFromSourceFailed(const QString &objects_from_source_failed) {
    m_objects_from_source_failed = objects_from_source_failed;
    m_objects_from_source_failed_isSet = true;
}

bool OAITransferCounters::is_objects_from_source_failed_Set() const{
    return m_objects_from_source_failed_isSet;
}

bool OAITransferCounters::is_objects_from_source_failed_Valid() const{
    return m_objects_from_source_failed_isValid;
}

QString OAITransferCounters::getObjectsFromSourceSkippedBySync() const {
    return m_objects_from_source_skipped_by_sync;
}
void OAITransferCounters::setObjectsFromSourceSkippedBySync(const QString &objects_from_source_skipped_by_sync) {
    m_objects_from_source_skipped_by_sync = objects_from_source_skipped_by_sync;
    m_objects_from_source_skipped_by_sync_isSet = true;
}

bool OAITransferCounters::is_objects_from_source_skipped_by_sync_Set() const{
    return m_objects_from_source_skipped_by_sync_isSet;
}

bool OAITransferCounters::is_objects_from_source_skipped_by_sync_Valid() const{
    return m_objects_from_source_skipped_by_sync_isValid;
}

bool OAITransferCounters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_copied_to_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_deleted_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_deleted_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_failed_to_delete_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_found_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_found_only_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_from_source_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_from_source_skipped_by_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directories_failed_to_list_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directories_found_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directories_successfully_listed_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_objects_cleaned_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_objects_failed_cleaned_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_copied_to_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_deleted_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_deleted_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_failed_to_delete_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_found_from_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_found_only_from_sink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_from_source_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_from_source_skipped_by_sync_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferCounters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
