/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgentPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgentPool::OAIAgentPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgentPool::OAIAgentPool() {
    this->initializeModel();
}

OAIAgentPool::~OAIAgentPool() {}

void OAIAgentPool::initializeModel() {

    m_bandwidth_limit_isSet = false;
    m_bandwidth_limit_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIAgentPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgentPool::fromJsonObject(QJsonObject json) {

    m_bandwidth_limit_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_limit, json[QString("bandwidthLimit")]);
    m_bandwidth_limit_isSet = !json[QString("bandwidthLimit")].isNull() && m_bandwidth_limit_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIAgentPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgentPool::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_limit.isSet()) {
        obj.insert(QString("bandwidthLimit"), ::OpenAPI::toJsonValue(m_bandwidth_limit));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIBandwidthLimit OAIAgentPool::getBandwidthLimit() const {
    return m_bandwidth_limit;
}
void OAIAgentPool::setBandwidthLimit(const OAIBandwidthLimit &bandwidth_limit) {
    m_bandwidth_limit = bandwidth_limit;
    m_bandwidth_limit_isSet = true;
}

bool OAIAgentPool::is_bandwidth_limit_Set() const{
    return m_bandwidth_limit_isSet;
}

bool OAIAgentPool::is_bandwidth_limit_Valid() const{
    return m_bandwidth_limit_isValid;
}

QString OAIAgentPool::getDisplayName() const {
    return m_display_name;
}
void OAIAgentPool::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAgentPool::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAgentPool::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAgentPool::getName() const {
    return m_name;
}
void OAIAgentPool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAgentPool::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAgentPool::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAgentPool::getState() const {
    return m_state;
}
void OAIAgentPool::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAgentPool::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAgentPool::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIAgentPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_limit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgentPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
