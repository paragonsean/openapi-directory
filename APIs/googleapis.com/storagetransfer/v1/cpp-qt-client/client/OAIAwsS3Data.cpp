/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsS3Data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsS3Data::OAIAwsS3Data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsS3Data::OAIAwsS3Data() {
    this->initializeModel();
}

OAIAwsS3Data::~OAIAwsS3Data() {}

void OAIAwsS3Data::initializeModel() {

    m_aws_access_key_isSet = false;
    m_aws_access_key_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_cloudfront_domain_isSet = false;
    m_cloudfront_domain_isValid = false;

    m_credentials_secret_isSet = false;
    m_credentials_secret_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAIAwsS3Data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsS3Data::fromJsonObject(QJsonObject json) {

    m_aws_access_key_isValid = ::OpenAPI::fromJsonValue(m_aws_access_key, json[QString("awsAccessKey")]);
    m_aws_access_key_isSet = !json[QString("awsAccessKey")].isNull() && m_aws_access_key_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_cloudfront_domain_isValid = ::OpenAPI::fromJsonValue(m_cloudfront_domain, json[QString("cloudfrontDomain")]);
    m_cloudfront_domain_isSet = !json[QString("cloudfrontDomain")].isNull() && m_cloudfront_domain_isValid;

    m_credentials_secret_isValid = ::OpenAPI::fromJsonValue(m_credentials_secret, json[QString("credentialsSecret")]);
    m_credentials_secret_isSet = !json[QString("credentialsSecret")].isNull() && m_credentials_secret_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("roleArn")]);
    m_role_arn_isSet = !json[QString("roleArn")].isNull() && m_role_arn_isValid;
}

QString OAIAwsS3Data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsS3Data::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_access_key.isSet()) {
        obj.insert(QString("awsAccessKey"), ::OpenAPI::toJsonValue(m_aws_access_key));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_cloudfront_domain_isSet) {
        obj.insert(QString("cloudfrontDomain"), ::OpenAPI::toJsonValue(m_cloudfront_domain));
    }
    if (m_credentials_secret_isSet) {
        obj.insert(QString("credentialsSecret"), ::OpenAPI::toJsonValue(m_credentials_secret));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("roleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

OAIAwsAccessKey OAIAwsS3Data::getAwsAccessKey() const {
    return m_aws_access_key;
}
void OAIAwsS3Data::setAwsAccessKey(const OAIAwsAccessKey &aws_access_key) {
    m_aws_access_key = aws_access_key;
    m_aws_access_key_isSet = true;
}

bool OAIAwsS3Data::is_aws_access_key_Set() const{
    return m_aws_access_key_isSet;
}

bool OAIAwsS3Data::is_aws_access_key_Valid() const{
    return m_aws_access_key_isValid;
}

QString OAIAwsS3Data::getBucketName() const {
    return m_bucket_name;
}
void OAIAwsS3Data::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIAwsS3Data::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIAwsS3Data::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIAwsS3Data::getCloudfrontDomain() const {
    return m_cloudfront_domain;
}
void OAIAwsS3Data::setCloudfrontDomain(const QString &cloudfront_domain) {
    m_cloudfront_domain = cloudfront_domain;
    m_cloudfront_domain_isSet = true;
}

bool OAIAwsS3Data::is_cloudfront_domain_Set() const{
    return m_cloudfront_domain_isSet;
}

bool OAIAwsS3Data::is_cloudfront_domain_Valid() const{
    return m_cloudfront_domain_isValid;
}

QString OAIAwsS3Data::getCredentialsSecret() const {
    return m_credentials_secret;
}
void OAIAwsS3Data::setCredentialsSecret(const QString &credentials_secret) {
    m_credentials_secret = credentials_secret;
    m_credentials_secret_isSet = true;
}

bool OAIAwsS3Data::is_credentials_secret_Set() const{
    return m_credentials_secret_isSet;
}

bool OAIAwsS3Data::is_credentials_secret_Valid() const{
    return m_credentials_secret_isValid;
}

QString OAIAwsS3Data::getPath() const {
    return m_path;
}
void OAIAwsS3Data::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAwsS3Data::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAwsS3Data::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAwsS3Data::getRoleArn() const {
    return m_role_arn;
}
void OAIAwsS3Data::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIAwsS3Data::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIAwsS3Data::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIAwsS3Data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_access_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloudfront_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsS3Data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
