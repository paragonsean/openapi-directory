/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleServiceAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleServiceAccount::OAIGoogleServiceAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleServiceAccount::OAIGoogleServiceAccount() {
    this->initializeModel();
}

OAIGoogleServiceAccount::~OAIGoogleServiceAccount() {}

void OAIGoogleServiceAccount::initializeModel() {

    m_account_email_isSet = false;
    m_account_email_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;
}

void OAIGoogleServiceAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleServiceAccount::fromJsonObject(QJsonObject json) {

    m_account_email_isValid = ::OpenAPI::fromJsonValue(m_account_email, json[QString("accountEmail")]);
    m_account_email_isSet = !json[QString("accountEmail")].isNull() && m_account_email_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;
}

QString OAIGoogleServiceAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleServiceAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_email_isSet) {
        obj.insert(QString("accountEmail"), ::OpenAPI::toJsonValue(m_account_email));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    return obj;
}

QString OAIGoogleServiceAccount::getAccountEmail() const {
    return m_account_email;
}
void OAIGoogleServiceAccount::setAccountEmail(const QString &account_email) {
    m_account_email = account_email;
    m_account_email_isSet = true;
}

bool OAIGoogleServiceAccount::is_account_email_Set() const{
    return m_account_email_isSet;
}

bool OAIGoogleServiceAccount::is_account_email_Valid() const{
    return m_account_email_isValid;
}

QString OAIGoogleServiceAccount::getSubjectId() const {
    return m_subject_id;
}
void OAIGoogleServiceAccount::setSubjectId(const QString &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIGoogleServiceAccount::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIGoogleServiceAccount::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

bool OAIGoogleServiceAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleServiceAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
