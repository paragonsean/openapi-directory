/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferSpec::OAITransferSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferSpec::OAITransferSpec() {
    this->initializeModel();
}

OAITransferSpec::~OAITransferSpec() {}

void OAITransferSpec::initializeModel() {

    m_aws_s3_compatible_data_source_isSet = false;
    m_aws_s3_compatible_data_source_isValid = false;

    m_aws_s3_data_source_isSet = false;
    m_aws_s3_data_source_isValid = false;

    m_azure_blob_storage_data_source_isSet = false;
    m_azure_blob_storage_data_source_isValid = false;

    m_gcs_data_sink_isSet = false;
    m_gcs_data_sink_isValid = false;

    m_gcs_data_source_isSet = false;
    m_gcs_data_source_isValid = false;

    m_gcs_intermediate_data_location_isSet = false;
    m_gcs_intermediate_data_location_isValid = false;

    m_hdfs_data_source_isSet = false;
    m_hdfs_data_source_isValid = false;

    m_http_data_source_isSet = false;
    m_http_data_source_isValid = false;

    m_object_conditions_isSet = false;
    m_object_conditions_isValid = false;

    m_posix_data_sink_isSet = false;
    m_posix_data_sink_isValid = false;

    m_posix_data_source_isSet = false;
    m_posix_data_source_isValid = false;

    m_sink_agent_pool_name_isSet = false;
    m_sink_agent_pool_name_isValid = false;

    m_source_agent_pool_name_isSet = false;
    m_source_agent_pool_name_isValid = false;

    m_transfer_manifest_isSet = false;
    m_transfer_manifest_isValid = false;

    m_transfer_options_isSet = false;
    m_transfer_options_isValid = false;
}

void OAITransferSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferSpec::fromJsonObject(QJsonObject json) {

    m_aws_s3_compatible_data_source_isValid = ::OpenAPI::fromJsonValue(m_aws_s3_compatible_data_source, json[QString("awsS3CompatibleDataSource")]);
    m_aws_s3_compatible_data_source_isSet = !json[QString("awsS3CompatibleDataSource")].isNull() && m_aws_s3_compatible_data_source_isValid;

    m_aws_s3_data_source_isValid = ::OpenAPI::fromJsonValue(m_aws_s3_data_source, json[QString("awsS3DataSource")]);
    m_aws_s3_data_source_isSet = !json[QString("awsS3DataSource")].isNull() && m_aws_s3_data_source_isValid;

    m_azure_blob_storage_data_source_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_storage_data_source, json[QString("azureBlobStorageDataSource")]);
    m_azure_blob_storage_data_source_isSet = !json[QString("azureBlobStorageDataSource")].isNull() && m_azure_blob_storage_data_source_isValid;

    m_gcs_data_sink_isValid = ::OpenAPI::fromJsonValue(m_gcs_data_sink, json[QString("gcsDataSink")]);
    m_gcs_data_sink_isSet = !json[QString("gcsDataSink")].isNull() && m_gcs_data_sink_isValid;

    m_gcs_data_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_data_source, json[QString("gcsDataSource")]);
    m_gcs_data_source_isSet = !json[QString("gcsDataSource")].isNull() && m_gcs_data_source_isValid;

    m_gcs_intermediate_data_location_isValid = ::OpenAPI::fromJsonValue(m_gcs_intermediate_data_location, json[QString("gcsIntermediateDataLocation")]);
    m_gcs_intermediate_data_location_isSet = !json[QString("gcsIntermediateDataLocation")].isNull() && m_gcs_intermediate_data_location_isValid;

    m_hdfs_data_source_isValid = ::OpenAPI::fromJsonValue(m_hdfs_data_source, json[QString("hdfsDataSource")]);
    m_hdfs_data_source_isSet = !json[QString("hdfsDataSource")].isNull() && m_hdfs_data_source_isValid;

    m_http_data_source_isValid = ::OpenAPI::fromJsonValue(m_http_data_source, json[QString("httpDataSource")]);
    m_http_data_source_isSet = !json[QString("httpDataSource")].isNull() && m_http_data_source_isValid;

    m_object_conditions_isValid = ::OpenAPI::fromJsonValue(m_object_conditions, json[QString("objectConditions")]);
    m_object_conditions_isSet = !json[QString("objectConditions")].isNull() && m_object_conditions_isValid;

    m_posix_data_sink_isValid = ::OpenAPI::fromJsonValue(m_posix_data_sink, json[QString("posixDataSink")]);
    m_posix_data_sink_isSet = !json[QString("posixDataSink")].isNull() && m_posix_data_sink_isValid;

    m_posix_data_source_isValid = ::OpenAPI::fromJsonValue(m_posix_data_source, json[QString("posixDataSource")]);
    m_posix_data_source_isSet = !json[QString("posixDataSource")].isNull() && m_posix_data_source_isValid;

    m_sink_agent_pool_name_isValid = ::OpenAPI::fromJsonValue(m_sink_agent_pool_name, json[QString("sinkAgentPoolName")]);
    m_sink_agent_pool_name_isSet = !json[QString("sinkAgentPoolName")].isNull() && m_sink_agent_pool_name_isValid;

    m_source_agent_pool_name_isValid = ::OpenAPI::fromJsonValue(m_source_agent_pool_name, json[QString("sourceAgentPoolName")]);
    m_source_agent_pool_name_isSet = !json[QString("sourceAgentPoolName")].isNull() && m_source_agent_pool_name_isValid;

    m_transfer_manifest_isValid = ::OpenAPI::fromJsonValue(m_transfer_manifest, json[QString("transferManifest")]);
    m_transfer_manifest_isSet = !json[QString("transferManifest")].isNull() && m_transfer_manifest_isValid;

    m_transfer_options_isValid = ::OpenAPI::fromJsonValue(m_transfer_options, json[QString("transferOptions")]);
    m_transfer_options_isSet = !json[QString("transferOptions")].isNull() && m_transfer_options_isValid;
}

QString OAITransferSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_s3_compatible_data_source.isSet()) {
        obj.insert(QString("awsS3CompatibleDataSource"), ::OpenAPI::toJsonValue(m_aws_s3_compatible_data_source));
    }
    if (m_aws_s3_data_source.isSet()) {
        obj.insert(QString("awsS3DataSource"), ::OpenAPI::toJsonValue(m_aws_s3_data_source));
    }
    if (m_azure_blob_storage_data_source.isSet()) {
        obj.insert(QString("azureBlobStorageDataSource"), ::OpenAPI::toJsonValue(m_azure_blob_storage_data_source));
    }
    if (m_gcs_data_sink.isSet()) {
        obj.insert(QString("gcsDataSink"), ::OpenAPI::toJsonValue(m_gcs_data_sink));
    }
    if (m_gcs_data_source.isSet()) {
        obj.insert(QString("gcsDataSource"), ::OpenAPI::toJsonValue(m_gcs_data_source));
    }
    if (m_gcs_intermediate_data_location.isSet()) {
        obj.insert(QString("gcsIntermediateDataLocation"), ::OpenAPI::toJsonValue(m_gcs_intermediate_data_location));
    }
    if (m_hdfs_data_source.isSet()) {
        obj.insert(QString("hdfsDataSource"), ::OpenAPI::toJsonValue(m_hdfs_data_source));
    }
    if (m_http_data_source.isSet()) {
        obj.insert(QString("httpDataSource"), ::OpenAPI::toJsonValue(m_http_data_source));
    }
    if (m_object_conditions.isSet()) {
        obj.insert(QString("objectConditions"), ::OpenAPI::toJsonValue(m_object_conditions));
    }
    if (m_posix_data_sink.isSet()) {
        obj.insert(QString("posixDataSink"), ::OpenAPI::toJsonValue(m_posix_data_sink));
    }
    if (m_posix_data_source.isSet()) {
        obj.insert(QString("posixDataSource"), ::OpenAPI::toJsonValue(m_posix_data_source));
    }
    if (m_sink_agent_pool_name_isSet) {
        obj.insert(QString("sinkAgentPoolName"), ::OpenAPI::toJsonValue(m_sink_agent_pool_name));
    }
    if (m_source_agent_pool_name_isSet) {
        obj.insert(QString("sourceAgentPoolName"), ::OpenAPI::toJsonValue(m_source_agent_pool_name));
    }
    if (m_transfer_manifest.isSet()) {
        obj.insert(QString("transferManifest"), ::OpenAPI::toJsonValue(m_transfer_manifest));
    }
    if (m_transfer_options.isSet()) {
        obj.insert(QString("transferOptions"), ::OpenAPI::toJsonValue(m_transfer_options));
    }
    return obj;
}

OAIAwsS3CompatibleData OAITransferSpec::getAwsS3CompatibleDataSource() const {
    return m_aws_s3_compatible_data_source;
}
void OAITransferSpec::setAwsS3CompatibleDataSource(const OAIAwsS3CompatibleData &aws_s3_compatible_data_source) {
    m_aws_s3_compatible_data_source = aws_s3_compatible_data_source;
    m_aws_s3_compatible_data_source_isSet = true;
}

bool OAITransferSpec::is_aws_s3_compatible_data_source_Set() const{
    return m_aws_s3_compatible_data_source_isSet;
}

bool OAITransferSpec::is_aws_s3_compatible_data_source_Valid() const{
    return m_aws_s3_compatible_data_source_isValid;
}

OAIAwsS3Data OAITransferSpec::getAwsS3DataSource() const {
    return m_aws_s3_data_source;
}
void OAITransferSpec::setAwsS3DataSource(const OAIAwsS3Data &aws_s3_data_source) {
    m_aws_s3_data_source = aws_s3_data_source;
    m_aws_s3_data_source_isSet = true;
}

bool OAITransferSpec::is_aws_s3_data_source_Set() const{
    return m_aws_s3_data_source_isSet;
}

bool OAITransferSpec::is_aws_s3_data_source_Valid() const{
    return m_aws_s3_data_source_isValid;
}

OAIAzureBlobStorageData OAITransferSpec::getAzureBlobStorageDataSource() const {
    return m_azure_blob_storage_data_source;
}
void OAITransferSpec::setAzureBlobStorageDataSource(const OAIAzureBlobStorageData &azure_blob_storage_data_source) {
    m_azure_blob_storage_data_source = azure_blob_storage_data_source;
    m_azure_blob_storage_data_source_isSet = true;
}

bool OAITransferSpec::is_azure_blob_storage_data_source_Set() const{
    return m_azure_blob_storage_data_source_isSet;
}

bool OAITransferSpec::is_azure_blob_storage_data_source_Valid() const{
    return m_azure_blob_storage_data_source_isValid;
}

OAIGcsData OAITransferSpec::getGcsDataSink() const {
    return m_gcs_data_sink;
}
void OAITransferSpec::setGcsDataSink(const OAIGcsData &gcs_data_sink) {
    m_gcs_data_sink = gcs_data_sink;
    m_gcs_data_sink_isSet = true;
}

bool OAITransferSpec::is_gcs_data_sink_Set() const{
    return m_gcs_data_sink_isSet;
}

bool OAITransferSpec::is_gcs_data_sink_Valid() const{
    return m_gcs_data_sink_isValid;
}

OAIGcsData OAITransferSpec::getGcsDataSource() const {
    return m_gcs_data_source;
}
void OAITransferSpec::setGcsDataSource(const OAIGcsData &gcs_data_source) {
    m_gcs_data_source = gcs_data_source;
    m_gcs_data_source_isSet = true;
}

bool OAITransferSpec::is_gcs_data_source_Set() const{
    return m_gcs_data_source_isSet;
}

bool OAITransferSpec::is_gcs_data_source_Valid() const{
    return m_gcs_data_source_isValid;
}

OAIGcsData OAITransferSpec::getGcsIntermediateDataLocation() const {
    return m_gcs_intermediate_data_location;
}
void OAITransferSpec::setGcsIntermediateDataLocation(const OAIGcsData &gcs_intermediate_data_location) {
    m_gcs_intermediate_data_location = gcs_intermediate_data_location;
    m_gcs_intermediate_data_location_isSet = true;
}

bool OAITransferSpec::is_gcs_intermediate_data_location_Set() const{
    return m_gcs_intermediate_data_location_isSet;
}

bool OAITransferSpec::is_gcs_intermediate_data_location_Valid() const{
    return m_gcs_intermediate_data_location_isValid;
}

OAIHdfsData OAITransferSpec::getHdfsDataSource() const {
    return m_hdfs_data_source;
}
void OAITransferSpec::setHdfsDataSource(const OAIHdfsData &hdfs_data_source) {
    m_hdfs_data_source = hdfs_data_source;
    m_hdfs_data_source_isSet = true;
}

bool OAITransferSpec::is_hdfs_data_source_Set() const{
    return m_hdfs_data_source_isSet;
}

bool OAITransferSpec::is_hdfs_data_source_Valid() const{
    return m_hdfs_data_source_isValid;
}

OAIHttpData OAITransferSpec::getHttpDataSource() const {
    return m_http_data_source;
}
void OAITransferSpec::setHttpDataSource(const OAIHttpData &http_data_source) {
    m_http_data_source = http_data_source;
    m_http_data_source_isSet = true;
}

bool OAITransferSpec::is_http_data_source_Set() const{
    return m_http_data_source_isSet;
}

bool OAITransferSpec::is_http_data_source_Valid() const{
    return m_http_data_source_isValid;
}

OAIObjectConditions OAITransferSpec::getObjectConditions() const {
    return m_object_conditions;
}
void OAITransferSpec::setObjectConditions(const OAIObjectConditions &object_conditions) {
    m_object_conditions = object_conditions;
    m_object_conditions_isSet = true;
}

bool OAITransferSpec::is_object_conditions_Set() const{
    return m_object_conditions_isSet;
}

bool OAITransferSpec::is_object_conditions_Valid() const{
    return m_object_conditions_isValid;
}

OAIPosixFilesystem OAITransferSpec::getPosixDataSink() const {
    return m_posix_data_sink;
}
void OAITransferSpec::setPosixDataSink(const OAIPosixFilesystem &posix_data_sink) {
    m_posix_data_sink = posix_data_sink;
    m_posix_data_sink_isSet = true;
}

bool OAITransferSpec::is_posix_data_sink_Set() const{
    return m_posix_data_sink_isSet;
}

bool OAITransferSpec::is_posix_data_sink_Valid() const{
    return m_posix_data_sink_isValid;
}

OAIPosixFilesystem OAITransferSpec::getPosixDataSource() const {
    return m_posix_data_source;
}
void OAITransferSpec::setPosixDataSource(const OAIPosixFilesystem &posix_data_source) {
    m_posix_data_source = posix_data_source;
    m_posix_data_source_isSet = true;
}

bool OAITransferSpec::is_posix_data_source_Set() const{
    return m_posix_data_source_isSet;
}

bool OAITransferSpec::is_posix_data_source_Valid() const{
    return m_posix_data_source_isValid;
}

QString OAITransferSpec::getSinkAgentPoolName() const {
    return m_sink_agent_pool_name;
}
void OAITransferSpec::setSinkAgentPoolName(const QString &sink_agent_pool_name) {
    m_sink_agent_pool_name = sink_agent_pool_name;
    m_sink_agent_pool_name_isSet = true;
}

bool OAITransferSpec::is_sink_agent_pool_name_Set() const{
    return m_sink_agent_pool_name_isSet;
}

bool OAITransferSpec::is_sink_agent_pool_name_Valid() const{
    return m_sink_agent_pool_name_isValid;
}

QString OAITransferSpec::getSourceAgentPoolName() const {
    return m_source_agent_pool_name;
}
void OAITransferSpec::setSourceAgentPoolName(const QString &source_agent_pool_name) {
    m_source_agent_pool_name = source_agent_pool_name;
    m_source_agent_pool_name_isSet = true;
}

bool OAITransferSpec::is_source_agent_pool_name_Set() const{
    return m_source_agent_pool_name_isSet;
}

bool OAITransferSpec::is_source_agent_pool_name_Valid() const{
    return m_source_agent_pool_name_isValid;
}

OAITransferManifest OAITransferSpec::getTransferManifest() const {
    return m_transfer_manifest;
}
void OAITransferSpec::setTransferManifest(const OAITransferManifest &transfer_manifest) {
    m_transfer_manifest = transfer_manifest;
    m_transfer_manifest_isSet = true;
}

bool OAITransferSpec::is_transfer_manifest_Set() const{
    return m_transfer_manifest_isSet;
}

bool OAITransferSpec::is_transfer_manifest_Valid() const{
    return m_transfer_manifest_isValid;
}

OAITransferOptions OAITransferSpec::getTransferOptions() const {
    return m_transfer_options;
}
void OAITransferSpec::setTransferOptions(const OAITransferOptions &transfer_options) {
    m_transfer_options = transfer_options;
    m_transfer_options_isSet = true;
}

bool OAITransferSpec::is_transfer_options_Set() const{
    return m_transfer_options_isSet;
}

bool OAITransferSpec::is_transfer_options_Valid() const{
    return m_transfer_options_isValid;
}

bool OAITransferSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_s3_compatible_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_s3_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_blob_storage_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_data_sink.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_intermediate_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hdfs_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_data_sink.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_posix_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_agent_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_agent_pool_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_manifest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
