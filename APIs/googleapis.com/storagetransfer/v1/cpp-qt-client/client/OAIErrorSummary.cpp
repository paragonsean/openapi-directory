/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorSummary::OAIErrorSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorSummary::OAIErrorSummary() {
    this->initializeModel();
}

OAIErrorSummary::~OAIErrorSummary() {}

void OAIErrorSummary::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_error_log_entries_isSet = false;
    m_error_log_entries_isValid = false;
}

void OAIErrorSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorSummary::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_error_log_entries_isValid = ::OpenAPI::fromJsonValue(m_error_log_entries, json[QString("errorLogEntries")]);
    m_error_log_entries_isSet = !json[QString("errorLogEntries")].isNull() && m_error_log_entries_isValid;
}

QString OAIErrorSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_error_log_entries.size() > 0) {
        obj.insert(QString("errorLogEntries"), ::OpenAPI::toJsonValue(m_error_log_entries));
    }
    return obj;
}

QString OAIErrorSummary::getErrorCode() const {
    return m_error_code;
}
void OAIErrorSummary::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIErrorSummary::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIErrorSummary::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIErrorSummary::getErrorCount() const {
    return m_error_count;
}
void OAIErrorSummary::setErrorCount(const QString &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIErrorSummary::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIErrorSummary::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QList<OAIErrorLogEntry> OAIErrorSummary::getErrorLogEntries() const {
    return m_error_log_entries;
}
void OAIErrorSummary::setErrorLogEntries(const QList<OAIErrorLogEntry> &error_log_entries) {
    m_error_log_entries = error_log_entries;
    m_error_log_entries_isSet = true;
}

bool OAIErrorSummary::is_error_log_entries_Set() const{
    return m_error_log_entries_isSet;
}

bool OAIErrorSummary::is_error_log_entries_Valid() const{
    return m_error_log_entries_isValid;
}

bool OAIErrorSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_log_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
