/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferJob::OAITransferJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferJob::OAITransferJob() {
    this->initializeModel();
}

OAITransferJob::~OAITransferJob() {}

void OAITransferJob::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_deletion_time_isSet = false;
    m_deletion_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_stream_isSet = false;
    m_event_stream_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_latest_operation_name_isSet = false;
    m_latest_operation_name_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transfer_spec_isSet = false;
    m_transfer_spec_isValid = false;
}

void OAITransferJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferJob::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_deletion_time_isValid = ::OpenAPI::fromJsonValue(m_deletion_time, json[QString("deletionTime")]);
    m_deletion_time_isSet = !json[QString("deletionTime")].isNull() && m_deletion_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_stream_isValid = ::OpenAPI::fromJsonValue(m_event_stream, json[QString("eventStream")]);
    m_event_stream_isSet = !json[QString("eventStream")].isNull() && m_event_stream_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("lastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("lastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_latest_operation_name_isValid = ::OpenAPI::fromJsonValue(m_latest_operation_name, json[QString("latestOperationName")]);
    m_latest_operation_name_isSet = !json[QString("latestOperationName")].isNull() && m_latest_operation_name_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transfer_spec_isValid = ::OpenAPI::fromJsonValue(m_transfer_spec, json[QString("transferSpec")]);
    m_transfer_spec_isSet = !json[QString("transferSpec")].isNull() && m_transfer_spec_isValid;
}

QString OAITransferJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferJob::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_deletion_time_isSet) {
        obj.insert(QString("deletionTime"), ::OpenAPI::toJsonValue(m_deletion_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_stream.isSet()) {
        obj.insert(QString("eventStream"), ::OpenAPI::toJsonValue(m_event_stream));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("lastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_latest_operation_name_isSet) {
        obj.insert(QString("latestOperationName"), ::OpenAPI::toJsonValue(m_latest_operation_name));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transfer_spec.isSet()) {
        obj.insert(QString("transferSpec"), ::OpenAPI::toJsonValue(m_transfer_spec));
    }
    return obj;
}

QString OAITransferJob::getCreationTime() const {
    return m_creation_time;
}
void OAITransferJob::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAITransferJob::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAITransferJob::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAITransferJob::getDeletionTime() const {
    return m_deletion_time;
}
void OAITransferJob::setDeletionTime(const QString &deletion_time) {
    m_deletion_time = deletion_time;
    m_deletion_time_isSet = true;
}

bool OAITransferJob::is_deletion_time_Set() const{
    return m_deletion_time_isSet;
}

bool OAITransferJob::is_deletion_time_Valid() const{
    return m_deletion_time_isValid;
}

QString OAITransferJob::getDescription() const {
    return m_description;
}
void OAITransferJob::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransferJob::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransferJob::is_description_Valid() const{
    return m_description_isValid;
}

OAIEventStream OAITransferJob::getEventStream() const {
    return m_event_stream;
}
void OAITransferJob::setEventStream(const OAIEventStream &event_stream) {
    m_event_stream = event_stream;
    m_event_stream_isSet = true;
}

bool OAITransferJob::is_event_stream_Set() const{
    return m_event_stream_isSet;
}

bool OAITransferJob::is_event_stream_Valid() const{
    return m_event_stream_isValid;
}

QString OAITransferJob::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAITransferJob::setLastModificationTime(const QString &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAITransferJob::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAITransferJob::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

QString OAITransferJob::getLatestOperationName() const {
    return m_latest_operation_name;
}
void OAITransferJob::setLatestOperationName(const QString &latest_operation_name) {
    m_latest_operation_name = latest_operation_name;
    m_latest_operation_name_isSet = true;
}

bool OAITransferJob::is_latest_operation_name_Set() const{
    return m_latest_operation_name_isSet;
}

bool OAITransferJob::is_latest_operation_name_Valid() const{
    return m_latest_operation_name_isValid;
}

OAILoggingConfig OAITransferJob::getLoggingConfig() const {
    return m_logging_config;
}
void OAITransferJob::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAITransferJob::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAITransferJob::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAITransferJob::getName() const {
    return m_name;
}
void OAITransferJob::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransferJob::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransferJob::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationConfig OAITransferJob::getNotificationConfig() const {
    return m_notification_config;
}
void OAITransferJob::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAITransferJob::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAITransferJob::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

QString OAITransferJob::getProjectId() const {
    return m_project_id;
}
void OAITransferJob::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITransferJob::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITransferJob::is_project_id_Valid() const{
    return m_project_id_isValid;
}

OAISchedule OAITransferJob::getSchedule() const {
    return m_schedule;
}
void OAITransferJob::setSchedule(const OAISchedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAITransferJob::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAITransferJob::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAITransferJob::getStatus() const {
    return m_status;
}
void OAITransferJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransferJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransferJob::is_status_Valid() const{
    return m_status_isValid;
}

OAITransferSpec OAITransferJob::getTransferSpec() const {
    return m_transfer_spec;
}
void OAITransferJob::setTransferSpec(const OAITransferSpec &transfer_spec) {
    m_transfer_spec = transfer_spec;
    m_transfer_spec_isSet = true;
}

bool OAITransferJob::is_transfer_spec_Set() const{
    return m_transfer_spec_isSet;
}

bool OAITransferJob::is_transfer_spec_Valid() const{
    return m_transfer_spec_isValid;
}

bool OAITransferJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stream.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
