/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventStream.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventStream::OAIEventStream(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventStream::OAIEventStream() {
    this->initializeModel();
}

OAIEventStream::~OAIEventStream() {}

void OAIEventStream::initializeModel() {

    m_event_stream_expiration_time_isSet = false;
    m_event_stream_expiration_time_isValid = false;

    m_event_stream_start_time_isSet = false;
    m_event_stream_start_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIEventStream::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventStream::fromJsonObject(QJsonObject json) {

    m_event_stream_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_event_stream_expiration_time, json[QString("eventStreamExpirationTime")]);
    m_event_stream_expiration_time_isSet = !json[QString("eventStreamExpirationTime")].isNull() && m_event_stream_expiration_time_isValid;

    m_event_stream_start_time_isValid = ::OpenAPI::fromJsonValue(m_event_stream_start_time, json[QString("eventStreamStartTime")]);
    m_event_stream_start_time_isSet = !json[QString("eventStreamStartTime")].isNull() && m_event_stream_start_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIEventStream::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventStream::asJsonObject() const {
    QJsonObject obj;
    if (m_event_stream_expiration_time_isSet) {
        obj.insert(QString("eventStreamExpirationTime"), ::OpenAPI::toJsonValue(m_event_stream_expiration_time));
    }
    if (m_event_stream_start_time_isSet) {
        obj.insert(QString("eventStreamStartTime"), ::OpenAPI::toJsonValue(m_event_stream_start_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIEventStream::getEventStreamExpirationTime() const {
    return m_event_stream_expiration_time;
}
void OAIEventStream::setEventStreamExpirationTime(const QString &event_stream_expiration_time) {
    m_event_stream_expiration_time = event_stream_expiration_time;
    m_event_stream_expiration_time_isSet = true;
}

bool OAIEventStream::is_event_stream_expiration_time_Set() const{
    return m_event_stream_expiration_time_isSet;
}

bool OAIEventStream::is_event_stream_expiration_time_Valid() const{
    return m_event_stream_expiration_time_isValid;
}

QString OAIEventStream::getEventStreamStartTime() const {
    return m_event_stream_start_time;
}
void OAIEventStream::setEventStreamStartTime(const QString &event_stream_start_time) {
    m_event_stream_start_time = event_stream_start_time;
    m_event_stream_start_time_isSet = true;
}

bool OAIEventStream::is_event_stream_start_time_Set() const{
    return m_event_stream_start_time_isSet;
}

bool OAIEventStream::is_event_stream_start_time_Valid() const{
    return m_event_stream_start_time_isValid;
}

QString OAIEventStream::getName() const {
    return m_name;
}
void OAIEventStream::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventStream::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventStream::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEventStream::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_stream_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_stream_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventStream::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
