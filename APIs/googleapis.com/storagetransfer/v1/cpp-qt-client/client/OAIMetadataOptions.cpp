/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadataOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadataOptions::OAIMetadataOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadataOptions::OAIMetadataOptions() {
    this->initializeModel();
}

OAIMetadataOptions::~OAIMetadataOptions() {}

void OAIMetadataOptions::initializeModel() {

    m_acl_isSet = false;
    m_acl_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_storage_class_isSet = false;
    m_storage_class_isValid = false;

    m_symlink_isSet = false;
    m_symlink_isValid = false;

    m_temporary_hold_isSet = false;
    m_temporary_hold_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIMetadataOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadataOptions::fromJsonObject(QJsonObject json) {

    m_acl_isValid = ::OpenAPI::fromJsonValue(m_acl, json[QString("acl")]);
    m_acl_isSet = !json[QString("acl")].isNull() && m_acl_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("kmsKey")]);
    m_kms_key_isSet = !json[QString("kmsKey")].isNull() && m_kms_key_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_storage_class_isValid = ::OpenAPI::fromJsonValue(m_storage_class, json[QString("storageClass")]);
    m_storage_class_isSet = !json[QString("storageClass")].isNull() && m_storage_class_isValid;

    m_symlink_isValid = ::OpenAPI::fromJsonValue(m_symlink, json[QString("symlink")]);
    m_symlink_isSet = !json[QString("symlink")].isNull() && m_symlink_isValid;

    m_temporary_hold_isValid = ::OpenAPI::fromJsonValue(m_temporary_hold, json[QString("temporaryHold")]);
    m_temporary_hold_isSet = !json[QString("temporaryHold")].isNull() && m_temporary_hold_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIMetadataOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadataOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_isSet) {
        obj.insert(QString("acl"), ::OpenAPI::toJsonValue(m_acl));
    }
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("kmsKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_storage_class_isSet) {
        obj.insert(QString("storageClass"), ::OpenAPI::toJsonValue(m_storage_class));
    }
    if (m_symlink_isSet) {
        obj.insert(QString("symlink"), ::OpenAPI::toJsonValue(m_symlink));
    }
    if (m_temporary_hold_isSet) {
        obj.insert(QString("temporaryHold"), ::OpenAPI::toJsonValue(m_temporary_hold));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIMetadataOptions::getAcl() const {
    return m_acl;
}
void OAIMetadataOptions::setAcl(const QString &acl) {
    m_acl = acl;
    m_acl_isSet = true;
}

bool OAIMetadataOptions::is_acl_Set() const{
    return m_acl_isSet;
}

bool OAIMetadataOptions::is_acl_Valid() const{
    return m_acl_isValid;
}

QString OAIMetadataOptions::getGid() const {
    return m_gid;
}
void OAIMetadataOptions::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIMetadataOptions::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIMetadataOptions::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIMetadataOptions::getKmsKey() const {
    return m_kms_key;
}
void OAIMetadataOptions::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAIMetadataOptions::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAIMetadataOptions::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QString OAIMetadataOptions::getMode() const {
    return m_mode;
}
void OAIMetadataOptions::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIMetadataOptions::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIMetadataOptions::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIMetadataOptions::getStorageClass() const {
    return m_storage_class;
}
void OAIMetadataOptions::setStorageClass(const QString &storage_class) {
    m_storage_class = storage_class;
    m_storage_class_isSet = true;
}

bool OAIMetadataOptions::is_storage_class_Set() const{
    return m_storage_class_isSet;
}

bool OAIMetadataOptions::is_storage_class_Valid() const{
    return m_storage_class_isValid;
}

QString OAIMetadataOptions::getSymlink() const {
    return m_symlink;
}
void OAIMetadataOptions::setSymlink(const QString &symlink) {
    m_symlink = symlink;
    m_symlink_isSet = true;
}

bool OAIMetadataOptions::is_symlink_Set() const{
    return m_symlink_isSet;
}

bool OAIMetadataOptions::is_symlink_Valid() const{
    return m_symlink_isValid;
}

QString OAIMetadataOptions::getTemporaryHold() const {
    return m_temporary_hold;
}
void OAIMetadataOptions::setTemporaryHold(const QString &temporary_hold) {
    m_temporary_hold = temporary_hold;
    m_temporary_hold_isSet = true;
}

bool OAIMetadataOptions::is_temporary_hold_Set() const{
    return m_temporary_hold_isSet;
}

bool OAIMetadataOptions::is_temporary_hold_Valid() const{
    return m_temporary_hold_isValid;
}

QString OAIMetadataOptions::getTimeCreated() const {
    return m_time_created;
}
void OAIMetadataOptions::setTimeCreated(const QString &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIMetadataOptions::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIMetadataOptions::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QString OAIMetadataOptions::getUid() const {
    return m_uid;
}
void OAIMetadataOptions::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIMetadataOptions::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIMetadataOptions::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIMetadataOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_symlink_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_temporary_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadataOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
