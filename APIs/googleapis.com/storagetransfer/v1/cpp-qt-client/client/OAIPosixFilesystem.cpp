/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosixFilesystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosixFilesystem::OAIPosixFilesystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosixFilesystem::OAIPosixFilesystem() {
    this->initializeModel();
}

OAIPosixFilesystem::~OAIPosixFilesystem() {}

void OAIPosixFilesystem::initializeModel() {

    m_root_directory_isSet = false;
    m_root_directory_isValid = false;
}

void OAIPosixFilesystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosixFilesystem::fromJsonObject(QJsonObject json) {

    m_root_directory_isValid = ::OpenAPI::fromJsonValue(m_root_directory, json[QString("rootDirectory")]);
    m_root_directory_isSet = !json[QString("rootDirectory")].isNull() && m_root_directory_isValid;
}

QString OAIPosixFilesystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosixFilesystem::asJsonObject() const {
    QJsonObject obj;
    if (m_root_directory_isSet) {
        obj.insert(QString("rootDirectory"), ::OpenAPI::toJsonValue(m_root_directory));
    }
    return obj;
}

QString OAIPosixFilesystem::getRootDirectory() const {
    return m_root_directory;
}
void OAIPosixFilesystem::setRootDirectory(const QString &root_directory) {
    m_root_directory = root_directory;
    m_root_directory_isSet = true;
}

bool OAIPosixFilesystem::is_root_directory_Set() const{
    return m_root_directory_isSet;
}

bool OAIPosixFilesystem::is_root_directory_Valid() const{
    return m_root_directory_isValid;
}

bool OAIPosixFilesystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_root_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosixFilesystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
