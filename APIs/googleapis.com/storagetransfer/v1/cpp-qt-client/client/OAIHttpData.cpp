/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpData::OAIHttpData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpData::OAIHttpData() {
    this->initializeModel();
}

OAIHttpData::~OAIHttpData() {}

void OAIHttpData::initializeModel() {

    m_list_url_isSet = false;
    m_list_url_isValid = false;
}

void OAIHttpData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpData::fromJsonObject(QJsonObject json) {

    m_list_url_isValid = ::OpenAPI::fromJsonValue(m_list_url, json[QString("listUrl")]);
    m_list_url_isSet = !json[QString("listUrl")].isNull() && m_list_url_isValid;
}

QString OAIHttpData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpData::asJsonObject() const {
    QJsonObject obj;
    if (m_list_url_isSet) {
        obj.insert(QString("listUrl"), ::OpenAPI::toJsonValue(m_list_url));
    }
    return obj;
}

QString OAIHttpData::getListUrl() const {
    return m_list_url;
}
void OAIHttpData::setListUrl(const QString &list_url) {
    m_list_url = list_url;
    m_list_url_isSet = true;
}

bool OAIHttpData::is_list_url_Set() const{
    return m_list_url_isSet;
}

bool OAIHttpData::is_list_url_Valid() const{
    return m_list_url_isValid;
}

bool OAIHttpData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
