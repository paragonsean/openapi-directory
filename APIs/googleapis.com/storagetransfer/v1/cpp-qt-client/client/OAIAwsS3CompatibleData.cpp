/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAwsS3CompatibleData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAwsS3CompatibleData::OAIAwsS3CompatibleData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAwsS3CompatibleData::OAIAwsS3CompatibleData() {
    this->initializeModel();
}

OAIAwsS3CompatibleData::~OAIAwsS3CompatibleData() {}

void OAIAwsS3CompatibleData::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_s3_metadata_isSet = false;
    m_s3_metadata_isValid = false;
}

void OAIAwsS3CompatibleData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAwsS3CompatibleData::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_s3_metadata_isValid = ::OpenAPI::fromJsonValue(m_s3_metadata, json[QString("s3Metadata")]);
    m_s3_metadata_isSet = !json[QString("s3Metadata")].isNull() && m_s3_metadata_isValid;
}

QString OAIAwsS3CompatibleData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAwsS3CompatibleData::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_s3_metadata.isSet()) {
        obj.insert(QString("s3Metadata"), ::OpenAPI::toJsonValue(m_s3_metadata));
    }
    return obj;
}

QString OAIAwsS3CompatibleData::getBucketName() const {
    return m_bucket_name;
}
void OAIAwsS3CompatibleData::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIAwsS3CompatibleData::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIAwsS3CompatibleData::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIAwsS3CompatibleData::getEndpoint() const {
    return m_endpoint;
}
void OAIAwsS3CompatibleData::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIAwsS3CompatibleData::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIAwsS3CompatibleData::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIAwsS3CompatibleData::getPath() const {
    return m_path;
}
void OAIAwsS3CompatibleData::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIAwsS3CompatibleData::is_path_Set() const{
    return m_path_isSet;
}

bool OAIAwsS3CompatibleData::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIAwsS3CompatibleData::getRegion() const {
    return m_region;
}
void OAIAwsS3CompatibleData::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAwsS3CompatibleData::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAwsS3CompatibleData::is_region_Valid() const{
    return m_region_isValid;
}

OAIS3CompatibleMetadata OAIAwsS3CompatibleData::getS3Metadata() const {
    return m_s3_metadata;
}
void OAIAwsS3CompatibleData::setS3Metadata(const OAIS3CompatibleMetadata &s3_metadata) {
    m_s3_metadata = s3_metadata;
    m_s3_metadata_isSet = true;
}

bool OAIAwsS3CompatibleData::is_s3_metadata_Set() const{
    return m_s3_metadata_isSet;
}

bool OAIAwsS3CompatibleData::is_s3_metadata_Valid() const{
    return m_s3_metadata_isValid;
}

bool OAIAwsS3CompatibleData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAwsS3CompatibleData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
