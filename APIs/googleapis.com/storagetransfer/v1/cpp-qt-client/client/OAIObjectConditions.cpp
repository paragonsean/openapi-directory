/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIObjectConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIObjectConditions::OAIObjectConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIObjectConditions::OAIObjectConditions() {
    this->initializeModel();
}

OAIObjectConditions::~OAIObjectConditions() {}

void OAIObjectConditions::initializeModel() {

    m_exclude_prefixes_isSet = false;
    m_exclude_prefixes_isValid = false;

    m_include_prefixes_isSet = false;
    m_include_prefixes_isValid = false;

    m_last_modified_before_isSet = false;
    m_last_modified_before_isValid = false;

    m_last_modified_since_isSet = false;
    m_last_modified_since_isValid = false;

    m_max_time_elapsed_since_last_modification_isSet = false;
    m_max_time_elapsed_since_last_modification_isValid = false;

    m_min_time_elapsed_since_last_modification_isSet = false;
    m_min_time_elapsed_since_last_modification_isValid = false;
}

void OAIObjectConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIObjectConditions::fromJsonObject(QJsonObject json) {

    m_exclude_prefixes_isValid = ::OpenAPI::fromJsonValue(m_exclude_prefixes, json[QString("excludePrefixes")]);
    m_exclude_prefixes_isSet = !json[QString("excludePrefixes")].isNull() && m_exclude_prefixes_isValid;

    m_include_prefixes_isValid = ::OpenAPI::fromJsonValue(m_include_prefixes, json[QString("includePrefixes")]);
    m_include_prefixes_isSet = !json[QString("includePrefixes")].isNull() && m_include_prefixes_isValid;

    m_last_modified_before_isValid = ::OpenAPI::fromJsonValue(m_last_modified_before, json[QString("lastModifiedBefore")]);
    m_last_modified_before_isSet = !json[QString("lastModifiedBefore")].isNull() && m_last_modified_before_isValid;

    m_last_modified_since_isValid = ::OpenAPI::fromJsonValue(m_last_modified_since, json[QString("lastModifiedSince")]);
    m_last_modified_since_isSet = !json[QString("lastModifiedSince")].isNull() && m_last_modified_since_isValid;

    m_max_time_elapsed_since_last_modification_isValid = ::OpenAPI::fromJsonValue(m_max_time_elapsed_since_last_modification, json[QString("maxTimeElapsedSinceLastModification")]);
    m_max_time_elapsed_since_last_modification_isSet = !json[QString("maxTimeElapsedSinceLastModification")].isNull() && m_max_time_elapsed_since_last_modification_isValid;

    m_min_time_elapsed_since_last_modification_isValid = ::OpenAPI::fromJsonValue(m_min_time_elapsed_since_last_modification, json[QString("minTimeElapsedSinceLastModification")]);
    m_min_time_elapsed_since_last_modification_isSet = !json[QString("minTimeElapsedSinceLastModification")].isNull() && m_min_time_elapsed_since_last_modification_isValid;
}

QString OAIObjectConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIObjectConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_prefixes.size() > 0) {
        obj.insert(QString("excludePrefixes"), ::OpenAPI::toJsonValue(m_exclude_prefixes));
    }
    if (m_include_prefixes.size() > 0) {
        obj.insert(QString("includePrefixes"), ::OpenAPI::toJsonValue(m_include_prefixes));
    }
    if (m_last_modified_before_isSet) {
        obj.insert(QString("lastModifiedBefore"), ::OpenAPI::toJsonValue(m_last_modified_before));
    }
    if (m_last_modified_since_isSet) {
        obj.insert(QString("lastModifiedSince"), ::OpenAPI::toJsonValue(m_last_modified_since));
    }
    if (m_max_time_elapsed_since_last_modification_isSet) {
        obj.insert(QString("maxTimeElapsedSinceLastModification"), ::OpenAPI::toJsonValue(m_max_time_elapsed_since_last_modification));
    }
    if (m_min_time_elapsed_since_last_modification_isSet) {
        obj.insert(QString("minTimeElapsedSinceLastModification"), ::OpenAPI::toJsonValue(m_min_time_elapsed_since_last_modification));
    }
    return obj;
}

QList<QString> OAIObjectConditions::getExcludePrefixes() const {
    return m_exclude_prefixes;
}
void OAIObjectConditions::setExcludePrefixes(const QList<QString> &exclude_prefixes) {
    m_exclude_prefixes = exclude_prefixes;
    m_exclude_prefixes_isSet = true;
}

bool OAIObjectConditions::is_exclude_prefixes_Set() const{
    return m_exclude_prefixes_isSet;
}

bool OAIObjectConditions::is_exclude_prefixes_Valid() const{
    return m_exclude_prefixes_isValid;
}

QList<QString> OAIObjectConditions::getIncludePrefixes() const {
    return m_include_prefixes;
}
void OAIObjectConditions::setIncludePrefixes(const QList<QString> &include_prefixes) {
    m_include_prefixes = include_prefixes;
    m_include_prefixes_isSet = true;
}

bool OAIObjectConditions::is_include_prefixes_Set() const{
    return m_include_prefixes_isSet;
}

bool OAIObjectConditions::is_include_prefixes_Valid() const{
    return m_include_prefixes_isValid;
}

QString OAIObjectConditions::getLastModifiedBefore() const {
    return m_last_modified_before;
}
void OAIObjectConditions::setLastModifiedBefore(const QString &last_modified_before) {
    m_last_modified_before = last_modified_before;
    m_last_modified_before_isSet = true;
}

bool OAIObjectConditions::is_last_modified_before_Set() const{
    return m_last_modified_before_isSet;
}

bool OAIObjectConditions::is_last_modified_before_Valid() const{
    return m_last_modified_before_isValid;
}

QString OAIObjectConditions::getLastModifiedSince() const {
    return m_last_modified_since;
}
void OAIObjectConditions::setLastModifiedSince(const QString &last_modified_since) {
    m_last_modified_since = last_modified_since;
    m_last_modified_since_isSet = true;
}

bool OAIObjectConditions::is_last_modified_since_Set() const{
    return m_last_modified_since_isSet;
}

bool OAIObjectConditions::is_last_modified_since_Valid() const{
    return m_last_modified_since_isValid;
}

QString OAIObjectConditions::getMaxTimeElapsedSinceLastModification() const {
    return m_max_time_elapsed_since_last_modification;
}
void OAIObjectConditions::setMaxTimeElapsedSinceLastModification(const QString &max_time_elapsed_since_last_modification) {
    m_max_time_elapsed_since_last_modification = max_time_elapsed_since_last_modification;
    m_max_time_elapsed_since_last_modification_isSet = true;
}

bool OAIObjectConditions::is_max_time_elapsed_since_last_modification_Set() const{
    return m_max_time_elapsed_since_last_modification_isSet;
}

bool OAIObjectConditions::is_max_time_elapsed_since_last_modification_Valid() const{
    return m_max_time_elapsed_since_last_modification_isValid;
}

QString OAIObjectConditions::getMinTimeElapsedSinceLastModification() const {
    return m_min_time_elapsed_since_last_modification;
}
void OAIObjectConditions::setMinTimeElapsedSinceLastModification(const QString &min_time_elapsed_since_last_modification) {
    m_min_time_elapsed_since_last_modification = min_time_elapsed_since_last_modification;
    m_min_time_elapsed_since_last_modification_isSet = true;
}

bool OAIObjectConditions::is_min_time_elapsed_since_last_modification_Set() const{
    return m_min_time_elapsed_since_last_modification_isSet;
}

bool OAIObjectConditions::is_min_time_elapsed_since_last_modification_Valid() const{
    return m_min_time_elapsed_since_last_modification_isValid;
}

bool OAIObjectConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_since_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_time_elapsed_since_last_modification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_time_elapsed_since_last_modification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIObjectConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
