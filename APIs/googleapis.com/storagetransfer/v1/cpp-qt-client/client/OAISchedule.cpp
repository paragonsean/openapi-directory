/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchedule::OAISchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchedule::OAISchedule() {
    this->initializeModel();
}

OAISchedule::~OAISchedule() {}

void OAISchedule::initializeModel() {

    m_end_time_of_day_isSet = false;
    m_end_time_of_day_isValid = false;

    m_repeat_interval_isSet = false;
    m_repeat_interval_isValid = false;

    m_schedule_end_date_isSet = false;
    m_schedule_end_date_isValid = false;

    m_schedule_start_date_isSet = false;
    m_schedule_start_date_isValid = false;

    m_start_time_of_day_isSet = false;
    m_start_time_of_day_isValid = false;
}

void OAISchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchedule::fromJsonObject(QJsonObject json) {

    m_end_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_end_time_of_day, json[QString("endTimeOfDay")]);
    m_end_time_of_day_isSet = !json[QString("endTimeOfDay")].isNull() && m_end_time_of_day_isValid;

    m_repeat_interval_isValid = ::OpenAPI::fromJsonValue(m_repeat_interval, json[QString("repeatInterval")]);
    m_repeat_interval_isSet = !json[QString("repeatInterval")].isNull() && m_repeat_interval_isValid;

    m_schedule_end_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_end_date, json[QString("scheduleEndDate")]);
    m_schedule_end_date_isSet = !json[QString("scheduleEndDate")].isNull() && m_schedule_end_date_isValid;

    m_schedule_start_date_isValid = ::OpenAPI::fromJsonValue(m_schedule_start_date, json[QString("scheduleStartDate")]);
    m_schedule_start_date_isSet = !json[QString("scheduleStartDate")].isNull() && m_schedule_start_date_isValid;

    m_start_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_start_time_of_day, json[QString("startTimeOfDay")]);
    m_start_time_of_day_isSet = !json[QString("startTimeOfDay")].isNull() && m_start_time_of_day_isValid;
}

QString OAISchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_of_day.isSet()) {
        obj.insert(QString("endTimeOfDay"), ::OpenAPI::toJsonValue(m_end_time_of_day));
    }
    if (m_repeat_interval_isSet) {
        obj.insert(QString("repeatInterval"), ::OpenAPI::toJsonValue(m_repeat_interval));
    }
    if (m_schedule_end_date.isSet()) {
        obj.insert(QString("scheduleEndDate"), ::OpenAPI::toJsonValue(m_schedule_end_date));
    }
    if (m_schedule_start_date.isSet()) {
        obj.insert(QString("scheduleStartDate"), ::OpenAPI::toJsonValue(m_schedule_start_date));
    }
    if (m_start_time_of_day.isSet()) {
        obj.insert(QString("startTimeOfDay"), ::OpenAPI::toJsonValue(m_start_time_of_day));
    }
    return obj;
}

OAITimeOfDay OAISchedule::getEndTimeOfDay() const {
    return m_end_time_of_day;
}
void OAISchedule::setEndTimeOfDay(const OAITimeOfDay &end_time_of_day) {
    m_end_time_of_day = end_time_of_day;
    m_end_time_of_day_isSet = true;
}

bool OAISchedule::is_end_time_of_day_Set() const{
    return m_end_time_of_day_isSet;
}

bool OAISchedule::is_end_time_of_day_Valid() const{
    return m_end_time_of_day_isValid;
}

QString OAISchedule::getRepeatInterval() const {
    return m_repeat_interval;
}
void OAISchedule::setRepeatInterval(const QString &repeat_interval) {
    m_repeat_interval = repeat_interval;
    m_repeat_interval_isSet = true;
}

bool OAISchedule::is_repeat_interval_Set() const{
    return m_repeat_interval_isSet;
}

bool OAISchedule::is_repeat_interval_Valid() const{
    return m_repeat_interval_isValid;
}

OAIDate OAISchedule::getScheduleEndDate() const {
    return m_schedule_end_date;
}
void OAISchedule::setScheduleEndDate(const OAIDate &schedule_end_date) {
    m_schedule_end_date = schedule_end_date;
    m_schedule_end_date_isSet = true;
}

bool OAISchedule::is_schedule_end_date_Set() const{
    return m_schedule_end_date_isSet;
}

bool OAISchedule::is_schedule_end_date_Valid() const{
    return m_schedule_end_date_isValid;
}

OAIDate OAISchedule::getScheduleStartDate() const {
    return m_schedule_start_date;
}
void OAISchedule::setScheduleStartDate(const OAIDate &schedule_start_date) {
    m_schedule_start_date = schedule_start_date;
    m_schedule_start_date_isSet = true;
}

bool OAISchedule::is_schedule_start_date_Set() const{
    return m_schedule_start_date_isSet;
}

bool OAISchedule::is_schedule_start_date_Valid() const{
    return m_schedule_start_date_isValid;
}

OAITimeOfDay OAISchedule::getStartTimeOfDay() const {
    return m_start_time_of_day;
}
void OAISchedule::setStartTimeOfDay(const OAITimeOfDay &start_time_of_day) {
    m_start_time_of_day = start_time_of_day;
    m_start_time_of_day_isSet = true;
}

bool OAISchedule::is_start_time_of_day_Set() const{
    return m_start_time_of_day_isSet;
}

bool OAISchedule::is_start_time_of_day_Valid() const{
    return m_start_time_of_day_isValid;
}

bool OAISchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_of_day.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeat_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_of_day.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
