/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferOperation::OAITransferOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferOperation::OAITransferOperation() {
    this->initializeModel();
}

OAITransferOperation::~OAITransferOperation() {}

void OAITransferOperation::initializeModel() {

    m_counters_isSet = false;
    m_counters_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_breakdowns_isSet = false;
    m_error_breakdowns_isValid = false;

    m_logging_config_isSet = false;
    m_logging_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_config_isSet = false;
    m_notification_config_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transfer_job_name_isSet = false;
    m_transfer_job_name_isValid = false;

    m_transfer_spec_isSet = false;
    m_transfer_spec_isValid = false;
}

void OAITransferOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferOperation::fromJsonObject(QJsonObject json) {

    m_counters_isValid = ::OpenAPI::fromJsonValue(m_counters, json[QString("counters")]);
    m_counters_isSet = !json[QString("counters")].isNull() && m_counters_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_breakdowns_isValid = ::OpenAPI::fromJsonValue(m_error_breakdowns, json[QString("errorBreakdowns")]);
    m_error_breakdowns_isSet = !json[QString("errorBreakdowns")].isNull() && m_error_breakdowns_isValid;

    m_logging_config_isValid = ::OpenAPI::fromJsonValue(m_logging_config, json[QString("loggingConfig")]);
    m_logging_config_isSet = !json[QString("loggingConfig")].isNull() && m_logging_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_config_isValid = ::OpenAPI::fromJsonValue(m_notification_config, json[QString("notificationConfig")]);
    m_notification_config_isSet = !json[QString("notificationConfig")].isNull() && m_notification_config_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transfer_job_name_isValid = ::OpenAPI::fromJsonValue(m_transfer_job_name, json[QString("transferJobName")]);
    m_transfer_job_name_isSet = !json[QString("transferJobName")].isNull() && m_transfer_job_name_isValid;

    m_transfer_spec_isValid = ::OpenAPI::fromJsonValue(m_transfer_spec, json[QString("transferSpec")]);
    m_transfer_spec_isSet = !json[QString("transferSpec")].isNull() && m_transfer_spec_isValid;
}

QString OAITransferOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_counters.isSet()) {
        obj.insert(QString("counters"), ::OpenAPI::toJsonValue(m_counters));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_breakdowns.size() > 0) {
        obj.insert(QString("errorBreakdowns"), ::OpenAPI::toJsonValue(m_error_breakdowns));
    }
    if (m_logging_config.isSet()) {
        obj.insert(QString("loggingConfig"), ::OpenAPI::toJsonValue(m_logging_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_config.isSet()) {
        obj.insert(QString("notificationConfig"), ::OpenAPI::toJsonValue(m_notification_config));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transfer_job_name_isSet) {
        obj.insert(QString("transferJobName"), ::OpenAPI::toJsonValue(m_transfer_job_name));
    }
    if (m_transfer_spec.isSet()) {
        obj.insert(QString("transferSpec"), ::OpenAPI::toJsonValue(m_transfer_spec));
    }
    return obj;
}

OAITransferCounters OAITransferOperation::getCounters() const {
    return m_counters;
}
void OAITransferOperation::setCounters(const OAITransferCounters &counters) {
    m_counters = counters;
    m_counters_isSet = true;
}

bool OAITransferOperation::is_counters_Set() const{
    return m_counters_isSet;
}

bool OAITransferOperation::is_counters_Valid() const{
    return m_counters_isValid;
}

QString OAITransferOperation::getEndTime() const {
    return m_end_time;
}
void OAITransferOperation::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITransferOperation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITransferOperation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<OAIErrorSummary> OAITransferOperation::getErrorBreakdowns() const {
    return m_error_breakdowns;
}
void OAITransferOperation::setErrorBreakdowns(const QList<OAIErrorSummary> &error_breakdowns) {
    m_error_breakdowns = error_breakdowns;
    m_error_breakdowns_isSet = true;
}

bool OAITransferOperation::is_error_breakdowns_Set() const{
    return m_error_breakdowns_isSet;
}

bool OAITransferOperation::is_error_breakdowns_Valid() const{
    return m_error_breakdowns_isValid;
}

OAILoggingConfig OAITransferOperation::getLoggingConfig() const {
    return m_logging_config;
}
void OAITransferOperation::setLoggingConfig(const OAILoggingConfig &logging_config) {
    m_logging_config = logging_config;
    m_logging_config_isSet = true;
}

bool OAITransferOperation::is_logging_config_Set() const{
    return m_logging_config_isSet;
}

bool OAITransferOperation::is_logging_config_Valid() const{
    return m_logging_config_isValid;
}

QString OAITransferOperation::getName() const {
    return m_name;
}
void OAITransferOperation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITransferOperation::is_name_Set() const{
    return m_name_isSet;
}

bool OAITransferOperation::is_name_Valid() const{
    return m_name_isValid;
}

OAINotificationConfig OAITransferOperation::getNotificationConfig() const {
    return m_notification_config;
}
void OAITransferOperation::setNotificationConfig(const OAINotificationConfig &notification_config) {
    m_notification_config = notification_config;
    m_notification_config_isSet = true;
}

bool OAITransferOperation::is_notification_config_Set() const{
    return m_notification_config_isSet;
}

bool OAITransferOperation::is_notification_config_Valid() const{
    return m_notification_config_isValid;
}

QString OAITransferOperation::getProjectId() const {
    return m_project_id;
}
void OAITransferOperation::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAITransferOperation::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAITransferOperation::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAITransferOperation::getStartTime() const {
    return m_start_time;
}
void OAITransferOperation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITransferOperation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITransferOperation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAITransferOperation::getStatus() const {
    return m_status;
}
void OAITransferOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransferOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransferOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITransferOperation::getTransferJobName() const {
    return m_transfer_job_name;
}
void OAITransferOperation::setTransferJobName(const QString &transfer_job_name) {
    m_transfer_job_name = transfer_job_name;
    m_transfer_job_name_isSet = true;
}

bool OAITransferOperation::is_transfer_job_name_Set() const{
    return m_transfer_job_name_isSet;
}

bool OAITransferOperation::is_transfer_job_name_Valid() const{
    return m_transfer_job_name_isValid;
}

OAITransferSpec OAITransferOperation::getTransferSpec() const {
    return m_transfer_spec;
}
void OAITransferOperation::setTransferSpec(const OAITransferSpec &transfer_spec) {
    m_transfer_spec = transfer_spec;
    m_transfer_spec_isSet = true;
}

bool OAITransferOperation::is_transfer_spec_Set() const{
    return m_transfer_spec_isSet;
}

bool OAITransferOperation::is_transfer_spec_Valid() const{
    return m_transfer_spec_isValid;
}

bool OAITransferOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_counters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_breakdowns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
