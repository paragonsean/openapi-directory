/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGcsData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGcsData::OAIGcsData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGcsData::OAIGcsData() {
    this->initializeModel();
}

OAIGcsData::~OAIGcsData() {}

void OAIGcsData::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_managed_folder_transfer_enabled_isSet = false;
    m_managed_folder_transfer_enabled_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;
}

void OAIGcsData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGcsData::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_managed_folder_transfer_enabled_isValid = ::OpenAPI::fromJsonValue(m_managed_folder_transfer_enabled, json[QString("managedFolderTransferEnabled")]);
    m_managed_folder_transfer_enabled_isSet = !json[QString("managedFolderTransferEnabled")].isNull() && m_managed_folder_transfer_enabled_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;
}

QString OAIGcsData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGcsData::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_managed_folder_transfer_enabled_isSet) {
        obj.insert(QString("managedFolderTransferEnabled"), ::OpenAPI::toJsonValue(m_managed_folder_transfer_enabled));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    return obj;
}

QString OAIGcsData::getBucketName() const {
    return m_bucket_name;
}
void OAIGcsData::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIGcsData::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIGcsData::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

bool OAIGcsData::isManagedFolderTransferEnabled() const {
    return m_managed_folder_transfer_enabled;
}
void OAIGcsData::setManagedFolderTransferEnabled(const bool &managed_folder_transfer_enabled) {
    m_managed_folder_transfer_enabled = managed_folder_transfer_enabled;
    m_managed_folder_transfer_enabled_isSet = true;
}

bool OAIGcsData::is_managed_folder_transfer_enabled_Set() const{
    return m_managed_folder_transfer_enabled_isSet;
}

bool OAIGcsData::is_managed_folder_transfer_enabled_Valid() const{
    return m_managed_folder_transfer_enabled_isValid;
}

QString OAIGcsData::getPath() const {
    return m_path;
}
void OAIGcsData::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGcsData::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGcsData::is_path_Valid() const{
    return m_path_isValid;
}

bool OAIGcsData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_folder_transfer_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGcsData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
