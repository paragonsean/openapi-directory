/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MetadataOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransferOptions define the actions to be performed on objects in a transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferOptions {
  public static final String SERIALIZED_NAME_DELETE_OBJECTS_FROM_SOURCE_AFTER_TRANSFER = "deleteObjectsFromSourceAfterTransfer";
  @SerializedName(SERIALIZED_NAME_DELETE_OBJECTS_FROM_SOURCE_AFTER_TRANSFER)
  private Boolean deleteObjectsFromSourceAfterTransfer;

  public static final String SERIALIZED_NAME_DELETE_OBJECTS_UNIQUE_IN_SINK = "deleteObjectsUniqueInSink";
  @SerializedName(SERIALIZED_NAME_DELETE_OBJECTS_UNIQUE_IN_SINK)
  private Boolean deleteObjectsUniqueInSink;

  public static final String SERIALIZED_NAME_METADATA_OPTIONS = "metadataOptions";
  @SerializedName(SERIALIZED_NAME_METADATA_OPTIONS)
  private MetadataOptions metadataOptions;

  public static final String SERIALIZED_NAME_OVERWRITE_OBJECTS_ALREADY_EXISTING_IN_SINK = "overwriteObjectsAlreadyExistingInSink";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_OBJECTS_ALREADY_EXISTING_IN_SINK)
  private Boolean overwriteObjectsAlreadyExistingInSink;

  /**
   * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
   */
  @JsonAdapter(OverwriteWhenEnum.Adapter.class)
  public enum OverwriteWhenEnum {
    OVERWRITE_WHEN_UNSPECIFIED("OVERWRITE_WHEN_UNSPECIFIED"),
    
    DIFFERENT("DIFFERENT"),
    
    NEVER("NEVER"),
    
    ALWAYS("ALWAYS");

    private String value;

    OverwriteWhenEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverwriteWhenEnum fromValue(String value) {
      for (OverwriteWhenEnum b : OverwriteWhenEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverwriteWhenEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverwriteWhenEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverwriteWhenEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverwriteWhenEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OverwriteWhenEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OVERWRITE_WHEN = "overwriteWhen";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_WHEN)
  private OverwriteWhenEnum overwriteWhen;

  public TransferOptions() {
  }

  public TransferOptions deleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
    this.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
    return this;
  }

  /**
   * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
   * @return deleteObjectsFromSourceAfterTransfer
   */
  @javax.annotation.Nullable
  public Boolean getDeleteObjectsFromSourceAfterTransfer() {
    return deleteObjectsFromSourceAfterTransfer;
  }

  public void setDeleteObjectsFromSourceAfterTransfer(Boolean deleteObjectsFromSourceAfterTransfer) {
    this.deleteObjectsFromSourceAfterTransfer = deleteObjectsFromSourceAfterTransfer;
  }


  public TransferOptions deleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
    this.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
    return this;
  }

  /**
   * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
   * @return deleteObjectsUniqueInSink
   */
  @javax.annotation.Nullable
  public Boolean getDeleteObjectsUniqueInSink() {
    return deleteObjectsUniqueInSink;
  }

  public void setDeleteObjectsUniqueInSink(Boolean deleteObjectsUniqueInSink) {
    this.deleteObjectsUniqueInSink = deleteObjectsUniqueInSink;
  }


  public TransferOptions metadataOptions(MetadataOptions metadataOptions) {
    this.metadataOptions = metadataOptions;
    return this;
  }

  /**
   * Get metadataOptions
   * @return metadataOptions
   */
  @javax.annotation.Nullable
  public MetadataOptions getMetadataOptions() {
    return metadataOptions;
  }

  public void setMetadataOptions(MetadataOptions metadataOptions) {
    this.metadataOptions = metadataOptions;
  }


  public TransferOptions overwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
    this.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
    return this;
  }

  /**
   * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
   * @return overwriteObjectsAlreadyExistingInSink
   */
  @javax.annotation.Nullable
  public Boolean getOverwriteObjectsAlreadyExistingInSink() {
    return overwriteObjectsAlreadyExistingInSink;
  }

  public void setOverwriteObjectsAlreadyExistingInSink(Boolean overwriteObjectsAlreadyExistingInSink) {
    this.overwriteObjectsAlreadyExistingInSink = overwriteObjectsAlreadyExistingInSink;
  }


  public TransferOptions overwriteWhen(OverwriteWhenEnum overwriteWhen) {
    this.overwriteWhen = overwriteWhen;
    return this;
  }

  /**
   * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
   * @return overwriteWhen
   */
  @javax.annotation.Nullable
  public OverwriteWhenEnum getOverwriteWhen() {
    return overwriteWhen;
  }

  public void setOverwriteWhen(OverwriteWhenEnum overwriteWhen) {
    this.overwriteWhen = overwriteWhen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferOptions transferOptions = (TransferOptions) o;
    return Objects.equals(this.deleteObjectsFromSourceAfterTransfer, transferOptions.deleteObjectsFromSourceAfterTransfer) &&
        Objects.equals(this.deleteObjectsUniqueInSink, transferOptions.deleteObjectsUniqueInSink) &&
        Objects.equals(this.metadataOptions, transferOptions.metadataOptions) &&
        Objects.equals(this.overwriteObjectsAlreadyExistingInSink, transferOptions.overwriteObjectsAlreadyExistingInSink) &&
        Objects.equals(this.overwriteWhen, transferOptions.overwriteWhen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deleteObjectsFromSourceAfterTransfer, deleteObjectsUniqueInSink, metadataOptions, overwriteObjectsAlreadyExistingInSink, overwriteWhen);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferOptions {\n");
    sb.append("    deleteObjectsFromSourceAfterTransfer: ").append(toIndentedString(deleteObjectsFromSourceAfterTransfer)).append("\n");
    sb.append("    deleteObjectsUniqueInSink: ").append(toIndentedString(deleteObjectsUniqueInSink)).append("\n");
    sb.append("    metadataOptions: ").append(toIndentedString(metadataOptions)).append("\n");
    sb.append("    overwriteObjectsAlreadyExistingInSink: ").append(toIndentedString(overwriteObjectsAlreadyExistingInSink)).append("\n");
    sb.append("    overwriteWhen: ").append(toIndentedString(overwriteWhen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deleteObjectsFromSourceAfterTransfer");
    openapiFields.add("deleteObjectsUniqueInSink");
    openapiFields.add("metadataOptions");
    openapiFields.add("overwriteObjectsAlreadyExistingInSink");
    openapiFields.add("overwriteWhen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferOptions is not found in the empty JSON string", TransferOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `metadataOptions`
      if (jsonObj.get("metadataOptions") != null && !jsonObj.get("metadataOptions").isJsonNull()) {
        MetadataOptions.validateJsonElement(jsonObj.get("metadataOptions"));
      }
      if ((jsonObj.get("overwriteWhen") != null && !jsonObj.get("overwriteWhen").isJsonNull()) && !jsonObj.get("overwriteWhen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overwriteWhen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overwriteWhen").toString()));
      }
      // validate the optional field `overwriteWhen`
      if (jsonObj.get("overwriteWhen") != null && !jsonObj.get("overwriteWhen").isJsonNull()) {
        OverwriteWhenEnum.validateJsonElement(jsonObj.get("overwriteWhen"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferOptions>() {
           @Override
           public void write(JsonWriter out, TransferOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferOptions
   * @throws IOException if the JSON string is invalid with respect to TransferOptions
   */
  public static TransferOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferOptions.class);
  }

  /**
   * Convert an instance of TransferOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

