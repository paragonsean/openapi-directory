/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import org.openapitools.client.model.TimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transfers can be scheduled to recur or to run just once.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Schedule {
  public static final String SERIALIZED_NAME_END_TIME_OF_DAY = "endTimeOfDay";
  @SerializedName(SERIALIZED_NAME_END_TIME_OF_DAY)
  private TimeOfDay endTimeOfDay;

  public static final String SERIALIZED_NAME_REPEAT_INTERVAL = "repeatInterval";
  @SerializedName(SERIALIZED_NAME_REPEAT_INTERVAL)
  private String repeatInterval;

  public static final String SERIALIZED_NAME_SCHEDULE_END_DATE = "scheduleEndDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_END_DATE)
  private Date scheduleEndDate;

  public static final String SERIALIZED_NAME_SCHEDULE_START_DATE = "scheduleStartDate";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_START_DATE)
  private Date scheduleStartDate;

  public static final String SERIALIZED_NAME_START_TIME_OF_DAY = "startTimeOfDay";
  @SerializedName(SERIALIZED_NAME_START_TIME_OF_DAY)
  private TimeOfDay startTimeOfDay;

  public Schedule() {
  }

  public Schedule endTimeOfDay(TimeOfDay endTimeOfDay) {
    this.endTimeOfDay = endTimeOfDay;
    return this;
  }

  /**
   * Get endTimeOfDay
   * @return endTimeOfDay
   */
  @javax.annotation.Nullable
  public TimeOfDay getEndTimeOfDay() {
    return endTimeOfDay;
  }

  public void setEndTimeOfDay(TimeOfDay endTimeOfDay) {
    this.endTimeOfDay = endTimeOfDay;
  }


  public Schedule repeatInterval(String repeatInterval) {
    this.repeatInterval = repeatInterval;
    return this;
  }

  /**
   * Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.
   * @return repeatInterval
   */
  @javax.annotation.Nullable
  public String getRepeatInterval() {
    return repeatInterval;
  }

  public void setRepeatInterval(String repeatInterval) {
    this.repeatInterval = repeatInterval;
  }


  public Schedule scheduleEndDate(Date scheduleEndDate) {
    this.scheduleEndDate = scheduleEndDate;
    return this;
  }

  /**
   * Get scheduleEndDate
   * @return scheduleEndDate
   */
  @javax.annotation.Nullable
  public Date getScheduleEndDate() {
    return scheduleEndDate;
  }

  public void setScheduleEndDate(Date scheduleEndDate) {
    this.scheduleEndDate = scheduleEndDate;
  }


  public Schedule scheduleStartDate(Date scheduleStartDate) {
    this.scheduleStartDate = scheduleStartDate;
    return this;
  }

  /**
   * Get scheduleStartDate
   * @return scheduleStartDate
   */
  @javax.annotation.Nullable
  public Date getScheduleStartDate() {
    return scheduleStartDate;
  }

  public void setScheduleStartDate(Date scheduleStartDate) {
    this.scheduleStartDate = scheduleStartDate;
  }


  public Schedule startTimeOfDay(TimeOfDay startTimeOfDay) {
    this.startTimeOfDay = startTimeOfDay;
    return this;
  }

  /**
   * Get startTimeOfDay
   * @return startTimeOfDay
   */
  @javax.annotation.Nullable
  public TimeOfDay getStartTimeOfDay() {
    return startTimeOfDay;
  }

  public void setStartTimeOfDay(TimeOfDay startTimeOfDay) {
    this.startTimeOfDay = startTimeOfDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedule schedule = (Schedule) o;
    return Objects.equals(this.endTimeOfDay, schedule.endTimeOfDay) &&
        Objects.equals(this.repeatInterval, schedule.repeatInterval) &&
        Objects.equals(this.scheduleEndDate, schedule.scheduleEndDate) &&
        Objects.equals(this.scheduleStartDate, schedule.scheduleStartDate) &&
        Objects.equals(this.startTimeOfDay, schedule.startTimeOfDay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeOfDay, repeatInterval, scheduleEndDate, scheduleStartDate, startTimeOfDay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedule {\n");
    sb.append("    endTimeOfDay: ").append(toIndentedString(endTimeOfDay)).append("\n");
    sb.append("    repeatInterval: ").append(toIndentedString(repeatInterval)).append("\n");
    sb.append("    scheduleEndDate: ").append(toIndentedString(scheduleEndDate)).append("\n");
    sb.append("    scheduleStartDate: ").append(toIndentedString(scheduleStartDate)).append("\n");
    sb.append("    startTimeOfDay: ").append(toIndentedString(startTimeOfDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeOfDay");
    openapiFields.add("repeatInterval");
    openapiFields.add("scheduleEndDate");
    openapiFields.add("scheduleStartDate");
    openapiFields.add("startTimeOfDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Schedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedule is not found in the empty JSON string", Schedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `endTimeOfDay`
      if (jsonObj.get("endTimeOfDay") != null && !jsonObj.get("endTimeOfDay").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("endTimeOfDay"));
      }
      if ((jsonObj.get("repeatInterval") != null && !jsonObj.get("repeatInterval").isJsonNull()) && !jsonObj.get("repeatInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repeatInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repeatInterval").toString()));
      }
      // validate the optional field `scheduleEndDate`
      if (jsonObj.get("scheduleEndDate") != null && !jsonObj.get("scheduleEndDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("scheduleEndDate"));
      }
      // validate the optional field `scheduleStartDate`
      if (jsonObj.get("scheduleStartDate") != null && !jsonObj.get("scheduleStartDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("scheduleStartDate"));
      }
      // validate the optional field `startTimeOfDay`
      if (jsonObj.get("startTimeOfDay") != null && !jsonObj.get("startTimeOfDay").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("startTimeOfDay"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedule.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedule>() {
           @Override
           public void write(JsonWriter out, Schedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Schedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Schedule
   * @throws IOException if the JSON string is invalid with respect to Schedule
   */
  public static Schedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedule.class);
  }

  /**
   * Convert an instance of Schedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

