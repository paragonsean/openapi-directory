/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AwsS3CompatibleData;
import org.openapitools.client.model.AwsS3Data;
import org.openapitools.client.model.AzureBlobStorageData;
import org.openapitools.client.model.GcsData;
import org.openapitools.client.model.HdfsData;
import org.openapitools.client.model.HttpData;
import org.openapitools.client.model.ObjectConditions;
import org.openapitools.client.model.PosixFilesystem;
import org.openapitools.client.model.TransferManifest;
import org.openapitools.client.model.TransferOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for running a transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferSpec {
  public static final String SERIALIZED_NAME_AWS_S3_COMPATIBLE_DATA_SOURCE = "awsS3CompatibleDataSource";
  @SerializedName(SERIALIZED_NAME_AWS_S3_COMPATIBLE_DATA_SOURCE)
  private AwsS3CompatibleData awsS3CompatibleDataSource;

  public static final String SERIALIZED_NAME_AWS_S3_DATA_SOURCE = "awsS3DataSource";
  @SerializedName(SERIALIZED_NAME_AWS_S3_DATA_SOURCE)
  private AwsS3Data awsS3DataSource;

  public static final String SERIALIZED_NAME_AZURE_BLOB_STORAGE_DATA_SOURCE = "azureBlobStorageDataSource";
  @SerializedName(SERIALIZED_NAME_AZURE_BLOB_STORAGE_DATA_SOURCE)
  private AzureBlobStorageData azureBlobStorageDataSource;

  public static final String SERIALIZED_NAME_GCS_DATA_SINK = "gcsDataSink";
  @SerializedName(SERIALIZED_NAME_GCS_DATA_SINK)
  private GcsData gcsDataSink;

  public static final String SERIALIZED_NAME_GCS_DATA_SOURCE = "gcsDataSource";
  @SerializedName(SERIALIZED_NAME_GCS_DATA_SOURCE)
  private GcsData gcsDataSource;

  public static final String SERIALIZED_NAME_GCS_INTERMEDIATE_DATA_LOCATION = "gcsIntermediateDataLocation";
  @SerializedName(SERIALIZED_NAME_GCS_INTERMEDIATE_DATA_LOCATION)
  private GcsData gcsIntermediateDataLocation;

  public static final String SERIALIZED_NAME_HDFS_DATA_SOURCE = "hdfsDataSource";
  @SerializedName(SERIALIZED_NAME_HDFS_DATA_SOURCE)
  private HdfsData hdfsDataSource;

  public static final String SERIALIZED_NAME_HTTP_DATA_SOURCE = "httpDataSource";
  @SerializedName(SERIALIZED_NAME_HTTP_DATA_SOURCE)
  private HttpData httpDataSource;

  public static final String SERIALIZED_NAME_OBJECT_CONDITIONS = "objectConditions";
  @SerializedName(SERIALIZED_NAME_OBJECT_CONDITIONS)
  private ObjectConditions objectConditions;

  public static final String SERIALIZED_NAME_POSIX_DATA_SINK = "posixDataSink";
  @SerializedName(SERIALIZED_NAME_POSIX_DATA_SINK)
  private PosixFilesystem posixDataSink;

  public static final String SERIALIZED_NAME_POSIX_DATA_SOURCE = "posixDataSource";
  @SerializedName(SERIALIZED_NAME_POSIX_DATA_SOURCE)
  private PosixFilesystem posixDataSource;

  public static final String SERIALIZED_NAME_SINK_AGENT_POOL_NAME = "sinkAgentPoolName";
  @SerializedName(SERIALIZED_NAME_SINK_AGENT_POOL_NAME)
  private String sinkAgentPoolName;

  public static final String SERIALIZED_NAME_SOURCE_AGENT_POOL_NAME = "sourceAgentPoolName";
  @SerializedName(SERIALIZED_NAME_SOURCE_AGENT_POOL_NAME)
  private String sourceAgentPoolName;

  public static final String SERIALIZED_NAME_TRANSFER_MANIFEST = "transferManifest";
  @SerializedName(SERIALIZED_NAME_TRANSFER_MANIFEST)
  private TransferManifest transferManifest;

  public static final String SERIALIZED_NAME_TRANSFER_OPTIONS = "transferOptions";
  @SerializedName(SERIALIZED_NAME_TRANSFER_OPTIONS)
  private TransferOptions transferOptions;

  public TransferSpec() {
  }

  public TransferSpec awsS3CompatibleDataSource(AwsS3CompatibleData awsS3CompatibleDataSource) {
    this.awsS3CompatibleDataSource = awsS3CompatibleDataSource;
    return this;
  }

  /**
   * Get awsS3CompatibleDataSource
   * @return awsS3CompatibleDataSource
   */
  @javax.annotation.Nullable
  public AwsS3CompatibleData getAwsS3CompatibleDataSource() {
    return awsS3CompatibleDataSource;
  }

  public void setAwsS3CompatibleDataSource(AwsS3CompatibleData awsS3CompatibleDataSource) {
    this.awsS3CompatibleDataSource = awsS3CompatibleDataSource;
  }


  public TransferSpec awsS3DataSource(AwsS3Data awsS3DataSource) {
    this.awsS3DataSource = awsS3DataSource;
    return this;
  }

  /**
   * Get awsS3DataSource
   * @return awsS3DataSource
   */
  @javax.annotation.Nullable
  public AwsS3Data getAwsS3DataSource() {
    return awsS3DataSource;
  }

  public void setAwsS3DataSource(AwsS3Data awsS3DataSource) {
    this.awsS3DataSource = awsS3DataSource;
  }


  public TransferSpec azureBlobStorageDataSource(AzureBlobStorageData azureBlobStorageDataSource) {
    this.azureBlobStorageDataSource = azureBlobStorageDataSource;
    return this;
  }

  /**
   * Get azureBlobStorageDataSource
   * @return azureBlobStorageDataSource
   */
  @javax.annotation.Nullable
  public AzureBlobStorageData getAzureBlobStorageDataSource() {
    return azureBlobStorageDataSource;
  }

  public void setAzureBlobStorageDataSource(AzureBlobStorageData azureBlobStorageDataSource) {
    this.azureBlobStorageDataSource = azureBlobStorageDataSource;
  }


  public TransferSpec gcsDataSink(GcsData gcsDataSink) {
    this.gcsDataSink = gcsDataSink;
    return this;
  }

  /**
   * Get gcsDataSink
   * @return gcsDataSink
   */
  @javax.annotation.Nullable
  public GcsData getGcsDataSink() {
    return gcsDataSink;
  }

  public void setGcsDataSink(GcsData gcsDataSink) {
    this.gcsDataSink = gcsDataSink;
  }


  public TransferSpec gcsDataSource(GcsData gcsDataSource) {
    this.gcsDataSource = gcsDataSource;
    return this;
  }

  /**
   * Get gcsDataSource
   * @return gcsDataSource
   */
  @javax.annotation.Nullable
  public GcsData getGcsDataSource() {
    return gcsDataSource;
  }

  public void setGcsDataSource(GcsData gcsDataSource) {
    this.gcsDataSource = gcsDataSource;
  }


  public TransferSpec gcsIntermediateDataLocation(GcsData gcsIntermediateDataLocation) {
    this.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
    return this;
  }

  /**
   * Get gcsIntermediateDataLocation
   * @return gcsIntermediateDataLocation
   */
  @javax.annotation.Nullable
  public GcsData getGcsIntermediateDataLocation() {
    return gcsIntermediateDataLocation;
  }

  public void setGcsIntermediateDataLocation(GcsData gcsIntermediateDataLocation) {
    this.gcsIntermediateDataLocation = gcsIntermediateDataLocation;
  }


  public TransferSpec hdfsDataSource(HdfsData hdfsDataSource) {
    this.hdfsDataSource = hdfsDataSource;
    return this;
  }

  /**
   * Get hdfsDataSource
   * @return hdfsDataSource
   */
  @javax.annotation.Nullable
  public HdfsData getHdfsDataSource() {
    return hdfsDataSource;
  }

  public void setHdfsDataSource(HdfsData hdfsDataSource) {
    this.hdfsDataSource = hdfsDataSource;
  }


  public TransferSpec httpDataSource(HttpData httpDataSource) {
    this.httpDataSource = httpDataSource;
    return this;
  }

  /**
   * Get httpDataSource
   * @return httpDataSource
   */
  @javax.annotation.Nullable
  public HttpData getHttpDataSource() {
    return httpDataSource;
  }

  public void setHttpDataSource(HttpData httpDataSource) {
    this.httpDataSource = httpDataSource;
  }


  public TransferSpec objectConditions(ObjectConditions objectConditions) {
    this.objectConditions = objectConditions;
    return this;
  }

  /**
   * Get objectConditions
   * @return objectConditions
   */
  @javax.annotation.Nullable
  public ObjectConditions getObjectConditions() {
    return objectConditions;
  }

  public void setObjectConditions(ObjectConditions objectConditions) {
    this.objectConditions = objectConditions;
  }


  public TransferSpec posixDataSink(PosixFilesystem posixDataSink) {
    this.posixDataSink = posixDataSink;
    return this;
  }

  /**
   * Get posixDataSink
   * @return posixDataSink
   */
  @javax.annotation.Nullable
  public PosixFilesystem getPosixDataSink() {
    return posixDataSink;
  }

  public void setPosixDataSink(PosixFilesystem posixDataSink) {
    this.posixDataSink = posixDataSink;
  }


  public TransferSpec posixDataSource(PosixFilesystem posixDataSource) {
    this.posixDataSource = posixDataSource;
    return this;
  }

  /**
   * Get posixDataSource
   * @return posixDataSource
   */
  @javax.annotation.Nullable
  public PosixFilesystem getPosixDataSource() {
    return posixDataSource;
  }

  public void setPosixDataSource(PosixFilesystem posixDataSource) {
    this.posixDataSource = posixDataSource;
  }


  public TransferSpec sinkAgentPoolName(String sinkAgentPoolName) {
    this.sinkAgentPoolName = sinkAgentPoolName;
    return this;
  }

  /**
   * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
   * @return sinkAgentPoolName
   */
  @javax.annotation.Nullable
  public String getSinkAgentPoolName() {
    return sinkAgentPoolName;
  }

  public void setSinkAgentPoolName(String sinkAgentPoolName) {
    this.sinkAgentPoolName = sinkAgentPoolName;
  }


  public TransferSpec sourceAgentPoolName(String sourceAgentPoolName) {
    this.sourceAgentPoolName = sourceAgentPoolName;
    return this;
  }

  /**
   * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
   * @return sourceAgentPoolName
   */
  @javax.annotation.Nullable
  public String getSourceAgentPoolName() {
    return sourceAgentPoolName;
  }

  public void setSourceAgentPoolName(String sourceAgentPoolName) {
    this.sourceAgentPoolName = sourceAgentPoolName;
  }


  public TransferSpec transferManifest(TransferManifest transferManifest) {
    this.transferManifest = transferManifest;
    return this;
  }

  /**
   * Get transferManifest
   * @return transferManifest
   */
  @javax.annotation.Nullable
  public TransferManifest getTransferManifest() {
    return transferManifest;
  }

  public void setTransferManifest(TransferManifest transferManifest) {
    this.transferManifest = transferManifest;
  }


  public TransferSpec transferOptions(TransferOptions transferOptions) {
    this.transferOptions = transferOptions;
    return this;
  }

  /**
   * Get transferOptions
   * @return transferOptions
   */
  @javax.annotation.Nullable
  public TransferOptions getTransferOptions() {
    return transferOptions;
  }

  public void setTransferOptions(TransferOptions transferOptions) {
    this.transferOptions = transferOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferSpec transferSpec = (TransferSpec) o;
    return Objects.equals(this.awsS3CompatibleDataSource, transferSpec.awsS3CompatibleDataSource) &&
        Objects.equals(this.awsS3DataSource, transferSpec.awsS3DataSource) &&
        Objects.equals(this.azureBlobStorageDataSource, transferSpec.azureBlobStorageDataSource) &&
        Objects.equals(this.gcsDataSink, transferSpec.gcsDataSink) &&
        Objects.equals(this.gcsDataSource, transferSpec.gcsDataSource) &&
        Objects.equals(this.gcsIntermediateDataLocation, transferSpec.gcsIntermediateDataLocation) &&
        Objects.equals(this.hdfsDataSource, transferSpec.hdfsDataSource) &&
        Objects.equals(this.httpDataSource, transferSpec.httpDataSource) &&
        Objects.equals(this.objectConditions, transferSpec.objectConditions) &&
        Objects.equals(this.posixDataSink, transferSpec.posixDataSink) &&
        Objects.equals(this.posixDataSource, transferSpec.posixDataSource) &&
        Objects.equals(this.sinkAgentPoolName, transferSpec.sinkAgentPoolName) &&
        Objects.equals(this.sourceAgentPoolName, transferSpec.sourceAgentPoolName) &&
        Objects.equals(this.transferManifest, transferSpec.transferManifest) &&
        Objects.equals(this.transferOptions, transferSpec.transferOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsS3CompatibleDataSource, awsS3DataSource, azureBlobStorageDataSource, gcsDataSink, gcsDataSource, gcsIntermediateDataLocation, hdfsDataSource, httpDataSource, objectConditions, posixDataSink, posixDataSource, sinkAgentPoolName, sourceAgentPoolName, transferManifest, transferOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferSpec {\n");
    sb.append("    awsS3CompatibleDataSource: ").append(toIndentedString(awsS3CompatibleDataSource)).append("\n");
    sb.append("    awsS3DataSource: ").append(toIndentedString(awsS3DataSource)).append("\n");
    sb.append("    azureBlobStorageDataSource: ").append(toIndentedString(azureBlobStorageDataSource)).append("\n");
    sb.append("    gcsDataSink: ").append(toIndentedString(gcsDataSink)).append("\n");
    sb.append("    gcsDataSource: ").append(toIndentedString(gcsDataSource)).append("\n");
    sb.append("    gcsIntermediateDataLocation: ").append(toIndentedString(gcsIntermediateDataLocation)).append("\n");
    sb.append("    hdfsDataSource: ").append(toIndentedString(hdfsDataSource)).append("\n");
    sb.append("    httpDataSource: ").append(toIndentedString(httpDataSource)).append("\n");
    sb.append("    objectConditions: ").append(toIndentedString(objectConditions)).append("\n");
    sb.append("    posixDataSink: ").append(toIndentedString(posixDataSink)).append("\n");
    sb.append("    posixDataSource: ").append(toIndentedString(posixDataSource)).append("\n");
    sb.append("    sinkAgentPoolName: ").append(toIndentedString(sinkAgentPoolName)).append("\n");
    sb.append("    sourceAgentPoolName: ").append(toIndentedString(sourceAgentPoolName)).append("\n");
    sb.append("    transferManifest: ").append(toIndentedString(transferManifest)).append("\n");
    sb.append("    transferOptions: ").append(toIndentedString(transferOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsS3CompatibleDataSource");
    openapiFields.add("awsS3DataSource");
    openapiFields.add("azureBlobStorageDataSource");
    openapiFields.add("gcsDataSink");
    openapiFields.add("gcsDataSource");
    openapiFields.add("gcsIntermediateDataLocation");
    openapiFields.add("hdfsDataSource");
    openapiFields.add("httpDataSource");
    openapiFields.add("objectConditions");
    openapiFields.add("posixDataSink");
    openapiFields.add("posixDataSource");
    openapiFields.add("sinkAgentPoolName");
    openapiFields.add("sourceAgentPoolName");
    openapiFields.add("transferManifest");
    openapiFields.add("transferOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferSpec is not found in the empty JSON string", TransferSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awsS3CompatibleDataSource`
      if (jsonObj.get("awsS3CompatibleDataSource") != null && !jsonObj.get("awsS3CompatibleDataSource").isJsonNull()) {
        AwsS3CompatibleData.validateJsonElement(jsonObj.get("awsS3CompatibleDataSource"));
      }
      // validate the optional field `awsS3DataSource`
      if (jsonObj.get("awsS3DataSource") != null && !jsonObj.get("awsS3DataSource").isJsonNull()) {
        AwsS3Data.validateJsonElement(jsonObj.get("awsS3DataSource"));
      }
      // validate the optional field `azureBlobStorageDataSource`
      if (jsonObj.get("azureBlobStorageDataSource") != null && !jsonObj.get("azureBlobStorageDataSource").isJsonNull()) {
        AzureBlobStorageData.validateJsonElement(jsonObj.get("azureBlobStorageDataSource"));
      }
      // validate the optional field `gcsDataSink`
      if (jsonObj.get("gcsDataSink") != null && !jsonObj.get("gcsDataSink").isJsonNull()) {
        GcsData.validateJsonElement(jsonObj.get("gcsDataSink"));
      }
      // validate the optional field `gcsDataSource`
      if (jsonObj.get("gcsDataSource") != null && !jsonObj.get("gcsDataSource").isJsonNull()) {
        GcsData.validateJsonElement(jsonObj.get("gcsDataSource"));
      }
      // validate the optional field `gcsIntermediateDataLocation`
      if (jsonObj.get("gcsIntermediateDataLocation") != null && !jsonObj.get("gcsIntermediateDataLocation").isJsonNull()) {
        GcsData.validateJsonElement(jsonObj.get("gcsIntermediateDataLocation"));
      }
      // validate the optional field `hdfsDataSource`
      if (jsonObj.get("hdfsDataSource") != null && !jsonObj.get("hdfsDataSource").isJsonNull()) {
        HdfsData.validateJsonElement(jsonObj.get("hdfsDataSource"));
      }
      // validate the optional field `httpDataSource`
      if (jsonObj.get("httpDataSource") != null && !jsonObj.get("httpDataSource").isJsonNull()) {
        HttpData.validateJsonElement(jsonObj.get("httpDataSource"));
      }
      // validate the optional field `objectConditions`
      if (jsonObj.get("objectConditions") != null && !jsonObj.get("objectConditions").isJsonNull()) {
        ObjectConditions.validateJsonElement(jsonObj.get("objectConditions"));
      }
      // validate the optional field `posixDataSink`
      if (jsonObj.get("posixDataSink") != null && !jsonObj.get("posixDataSink").isJsonNull()) {
        PosixFilesystem.validateJsonElement(jsonObj.get("posixDataSink"));
      }
      // validate the optional field `posixDataSource`
      if (jsonObj.get("posixDataSource") != null && !jsonObj.get("posixDataSource").isJsonNull()) {
        PosixFilesystem.validateJsonElement(jsonObj.get("posixDataSource"));
      }
      if ((jsonObj.get("sinkAgentPoolName") != null && !jsonObj.get("sinkAgentPoolName").isJsonNull()) && !jsonObj.get("sinkAgentPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sinkAgentPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sinkAgentPoolName").toString()));
      }
      if ((jsonObj.get("sourceAgentPoolName") != null && !jsonObj.get("sourceAgentPoolName").isJsonNull()) && !jsonObj.get("sourceAgentPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceAgentPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceAgentPoolName").toString()));
      }
      // validate the optional field `transferManifest`
      if (jsonObj.get("transferManifest") != null && !jsonObj.get("transferManifest").isJsonNull()) {
        TransferManifest.validateJsonElement(jsonObj.get("transferManifest"));
      }
      // validate the optional field `transferOptions`
      if (jsonObj.get("transferOptions") != null && !jsonObj.get("transferOptions").isJsonNull()) {
        TransferOptions.validateJsonElement(jsonObj.get("transferOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferSpec>() {
           @Override
           public void write(JsonWriter out, TransferSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferSpec
   * @throws IOException if the JSON string is invalid with respect to TransferSpec
   */
  public static TransferSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferSpec.class);
  }

  /**
   * Convert an instance of TransferSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

