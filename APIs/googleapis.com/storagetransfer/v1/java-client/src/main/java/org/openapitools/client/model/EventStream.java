/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventStream {
  public static final String SERIALIZED_NAME_EVENT_STREAM_EXPIRATION_TIME = "eventStreamExpirationTime";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_EXPIRATION_TIME)
  private String eventStreamExpirationTime;

  public static final String SERIALIZED_NAME_EVENT_STREAM_START_TIME = "eventStreamStartTime";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM_START_TIME)
  private String eventStreamStartTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public EventStream() {
  }

  public EventStream eventStreamExpirationTime(String eventStreamExpirationTime) {
    this.eventStreamExpirationTime = eventStreamExpirationTime;
    return this;
  }

  /**
   * Specifies the data and time at which Storage Transfer Service stops listening for events from this stream. After this time, any transfers in progress will complete, but no new transfers are initiated.
   * @return eventStreamExpirationTime
   */
  @javax.annotation.Nullable
  public String getEventStreamExpirationTime() {
    return eventStreamExpirationTime;
  }

  public void setEventStreamExpirationTime(String eventStreamExpirationTime) {
    this.eventStreamExpirationTime = eventStreamExpirationTime;
  }


  public EventStream eventStreamStartTime(String eventStreamStartTime) {
    this.eventStreamStartTime = eventStreamStartTime;
    return this;
  }

  /**
   * Specifies the date and time that Storage Transfer Service starts listening for events from this stream. If no start time is specified or start time is in the past, Storage Transfer Service starts listening immediately.
   * @return eventStreamStartTime
   */
  @javax.annotation.Nullable
  public String getEventStreamStartTime() {
    return eventStreamStartTime;
  }

  public void setEventStreamStartTime(String eventStreamStartTime) {
    this.eventStreamStartTime = eventStreamStartTime;
  }


  public EventStream name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. Specifies a unique name of the resource such as AWS SQS ARN in the form &#39;arn:aws:sqs:region:account_id:queue_name&#39;, or Pub/Sub subscription resource name in the form &#39;projects/{project}/subscriptions/{sub}&#39;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventStream eventStream = (EventStream) o;
    return Objects.equals(this.eventStreamExpirationTime, eventStream.eventStreamExpirationTime) &&
        Objects.equals(this.eventStreamStartTime, eventStream.eventStreamStartTime) &&
        Objects.equals(this.name, eventStream.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventStreamExpirationTime, eventStreamStartTime, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventStream {\n");
    sb.append("    eventStreamExpirationTime: ").append(toIndentedString(eventStreamExpirationTime)).append("\n");
    sb.append("    eventStreamStartTime: ").append(toIndentedString(eventStreamStartTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventStreamExpirationTime");
    openapiFields.add("eventStreamStartTime");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventStream
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventStream.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventStream is not found in the empty JSON string", EventStream.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventStream.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventStream` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("eventStreamExpirationTime") != null && !jsonObj.get("eventStreamExpirationTime").isJsonNull()) && !jsonObj.get("eventStreamExpirationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventStreamExpirationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventStreamExpirationTime").toString()));
      }
      if ((jsonObj.get("eventStreamStartTime") != null && !jsonObj.get("eventStreamStartTime").isJsonNull()) && !jsonObj.get("eventStreamStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventStreamStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventStreamStartTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventStream.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventStream' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventStream> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventStream.class));

       return (TypeAdapter<T>) new TypeAdapter<EventStream>() {
           @Override
           public void write(JsonWriter out, EventStream value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventStream read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventStream given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventStream
   * @throws IOException if the JSON string is invalid with respect to EventStream
   */
  public static EventStream fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventStream.class);
  }

  /**
   * Convert an instance of EventStream to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

