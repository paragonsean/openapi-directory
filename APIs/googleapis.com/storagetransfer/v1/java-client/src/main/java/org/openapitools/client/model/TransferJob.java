/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventStream;
import org.openapitools.client.model.LoggingConfig;
import org.openapitools.client.model.NotificationConfig;
import org.openapitools.client.model.Schedule;
import org.openapitools.client.model.TransferSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This resource represents the configuration of a transfer job that runs periodically.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferJob {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DELETION_TIME = "deletionTime";
  @SerializedName(SERIALIZED_NAME_DELETION_TIME)
  private String deletionTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVENT_STREAM = "eventStream";
  @SerializedName(SERIALIZED_NAME_EVENT_STREAM)
  private EventStream eventStream;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "lastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private String lastModificationTime;

  public static final String SERIALIZED_NAME_LATEST_OPERATION_NAME = "latestOperationName";
  @SerializedName(SERIALIZED_NAME_LATEST_OPERATION_NAME)
  private String latestOperationName;

  public static final String SERIALIZED_NAME_LOGGING_CONFIG = "loggingConfig";
  @SerializedName(SERIALIZED_NAME_LOGGING_CONFIG)
  private LoggingConfig loggingConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_CONFIG = "notificationConfig";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_CONFIG)
  private NotificationConfig notificationConfig;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  /**
   * Status of the job. This value MUST be specified for &#x60;CreateTransferJobRequests&#x60;. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),
    
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRANSFER_SPEC = "transferSpec";
  @SerializedName(SERIALIZED_NAME_TRANSFER_SPEC)
  private TransferSpec transferSpec;

  public TransferJob() {
  }

  public TransferJob(
     String creationTime, 
     String deletionTime, 
     String lastModificationTime
  ) {
    this();
    this.creationTime = creationTime;
    this.deletionTime = deletionTime;
    this.lastModificationTime = lastModificationTime;
  }

  /**
   * Output only. The time that the transfer job was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }



  /**
   * Output only. The time that the transfer job was deleted.
   * @return deletionTime
   */
  @javax.annotation.Nullable
  public String getDeletionTime() {
    return deletionTime;
  }



  public TransferJob description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TransferJob eventStream(EventStream eventStream) {
    this.eventStream = eventStream;
    return this;
  }

  /**
   * Get eventStream
   * @return eventStream
   */
  @javax.annotation.Nullable
  public EventStream getEventStream() {
    return eventStream;
  }

  public void setEventStream(EventStream eventStream) {
    this.eventStream = eventStream;
  }


  /**
   * Output only. The time that the transfer job was last modified.
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public String getLastModificationTime() {
    return lastModificationTime;
  }



  public TransferJob latestOperationName(String latestOperationName) {
    this.latestOperationName = latestOperationName;
    return this;
  }

  /**
   * The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.
   * @return latestOperationName
   */
  @javax.annotation.Nullable
  public String getLatestOperationName() {
    return latestOperationName;
  }

  public void setLatestOperationName(String latestOperationName) {
    this.latestOperationName = latestOperationName;
  }


  public TransferJob loggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
    return this;
  }

  /**
   * Get loggingConfig
   * @return loggingConfig
   */
  @javax.annotation.Nullable
  public LoggingConfig getLoggingConfig() {
    return loggingConfig;
  }

  public void setLoggingConfig(LoggingConfig loggingConfig) {
    this.loggingConfig = loggingConfig;
  }


  public TransferJob name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with &#x60;\&quot;transferJobs/\&quot;&#x60; prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with &#x60;transferJobs/OPI&#x60; specifically. For all other transfer types, this name must not start with &#x60;transferJobs/OPI&#x60;. Non-PosixFilesystem example: &#x60;\&quot;transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$\&quot;&#x60; PosixFilesystem example: &#x60;\&quot;transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$\&quot;&#x60; Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TransferJob notificationConfig(NotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
    return this;
  }

  /**
   * Get notificationConfig
   * @return notificationConfig
   */
  @javax.annotation.Nullable
  public NotificationConfig getNotificationConfig() {
    return notificationConfig;
  }

  public void setNotificationConfig(NotificationConfig notificationConfig) {
    this.notificationConfig = notificationConfig;
  }


  public TransferJob projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * The ID of the Google Cloud project that owns the job.
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public TransferJob schedule(Schedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public Schedule getSchedule() {
    return schedule;
  }

  public void setSchedule(Schedule schedule) {
    this.schedule = schedule;
  }


  public TransferJob status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the job. This value MUST be specified for &#x60;CreateTransferJobRequests&#x60;. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public TransferJob transferSpec(TransferSpec transferSpec) {
    this.transferSpec = transferSpec;
    return this;
  }

  /**
   * Get transferSpec
   * @return transferSpec
   */
  @javax.annotation.Nullable
  public TransferSpec getTransferSpec() {
    return transferSpec;
  }

  public void setTransferSpec(TransferSpec transferSpec) {
    this.transferSpec = transferSpec;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferJob transferJob = (TransferJob) o;
    return Objects.equals(this.creationTime, transferJob.creationTime) &&
        Objects.equals(this.deletionTime, transferJob.deletionTime) &&
        Objects.equals(this.description, transferJob.description) &&
        Objects.equals(this.eventStream, transferJob.eventStream) &&
        Objects.equals(this.lastModificationTime, transferJob.lastModificationTime) &&
        Objects.equals(this.latestOperationName, transferJob.latestOperationName) &&
        Objects.equals(this.loggingConfig, transferJob.loggingConfig) &&
        Objects.equals(this.name, transferJob.name) &&
        Objects.equals(this.notificationConfig, transferJob.notificationConfig) &&
        Objects.equals(this.projectId, transferJob.projectId) &&
        Objects.equals(this.schedule, transferJob.schedule) &&
        Objects.equals(this.status, transferJob.status) &&
        Objects.equals(this.transferSpec, transferJob.transferSpec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, deletionTime, description, eventStream, lastModificationTime, latestOperationName, loggingConfig, name, notificationConfig, projectId, schedule, status, transferSpec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferJob {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    deletionTime: ").append(toIndentedString(deletionTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventStream: ").append(toIndentedString(eventStream)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("    latestOperationName: ").append(toIndentedString(latestOperationName)).append("\n");
    sb.append("    loggingConfig: ").append(toIndentedString(loggingConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationConfig: ").append(toIndentedString(notificationConfig)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transferSpec: ").append(toIndentedString(transferSpec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("deletionTime");
    openapiFields.add("description");
    openapiFields.add("eventStream");
    openapiFields.add("lastModificationTime");
    openapiFields.add("latestOperationName");
    openapiFields.add("loggingConfig");
    openapiFields.add("name");
    openapiFields.add("notificationConfig");
    openapiFields.add("projectId");
    openapiFields.add("schedule");
    openapiFields.add("status");
    openapiFields.add("transferSpec");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransferJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransferJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransferJob is not found in the empty JSON string", TransferJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransferJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransferJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("deletionTime") != null && !jsonObj.get("deletionTime").isJsonNull()) && !jsonObj.get("deletionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletionTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `eventStream`
      if (jsonObj.get("eventStream") != null && !jsonObj.get("eventStream").isJsonNull()) {
        EventStream.validateJsonElement(jsonObj.get("eventStream"));
      }
      if ((jsonObj.get("lastModificationTime") != null && !jsonObj.get("lastModificationTime").isJsonNull()) && !jsonObj.get("lastModificationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModificationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModificationTime").toString()));
      }
      if ((jsonObj.get("latestOperationName") != null && !jsonObj.get("latestOperationName").isJsonNull()) && !jsonObj.get("latestOperationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latestOperationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latestOperationName").toString()));
      }
      // validate the optional field `loggingConfig`
      if (jsonObj.get("loggingConfig") != null && !jsonObj.get("loggingConfig").isJsonNull()) {
        LoggingConfig.validateJsonElement(jsonObj.get("loggingConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `notificationConfig`
      if (jsonObj.get("notificationConfig") != null && !jsonObj.get("notificationConfig").isJsonNull()) {
        NotificationConfig.validateJsonElement(jsonObj.get("notificationConfig"));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        Schedule.validateJsonElement(jsonObj.get("schedule"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `transferSpec`
      if (jsonObj.get("transferSpec") != null && !jsonObj.get("transferSpec").isJsonNull()) {
        TransferSpec.validateJsonElement(jsonObj.get("transferSpec"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransferJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransferJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransferJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransferJob.class));

       return (TypeAdapter<T>) new TypeAdapter<TransferJob>() {
           @Override
           public void write(JsonWriter out, TransferJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransferJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransferJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransferJob
   * @throws IOException if the JSON string is invalid with respect to TransferJob
   */
  public static TransferJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransferJob.class);
  }

  /**
   * Convert an instance of TransferJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

