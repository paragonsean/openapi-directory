/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * S3CompatibleMetadata contains the metadata fields that apply to the basic types of S3-compatible data providers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3CompatibleMetadata {
  /**
   * Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.
   */
  @JsonAdapter(AuthMethodEnum.Adapter.class)
  public enum AuthMethodEnum {
    UNSPECIFIED("AUTH_METHOD_UNSPECIFIED"),
    
    AWS_SIGNATURE_V4("AUTH_METHOD_AWS_SIGNATURE_V4"),
    
    AWS_SIGNATURE_V2("AUTH_METHOD_AWS_SIGNATURE_V2");

    private String value;

    AuthMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthMethodEnum fromValue(String value) {
      for (AuthMethodEnum b : AuthMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_METHOD = "authMethod";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD)
  private AuthMethodEnum authMethod;

  /**
   * The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.
   */
  @JsonAdapter(ListApiEnum.Adapter.class)
  public enum ListApiEnum {
    API_UNSPECIFIED("LIST_API_UNSPECIFIED"),
    
    OBJECTS_V2("LIST_OBJECTS_V2"),
    
    OBJECTS("LIST_OBJECTS");

    private String value;

    ListApiEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ListApiEnum fromValue(String value) {
      for (ListApiEnum b : ListApiEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ListApiEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ListApiEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ListApiEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ListApiEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ListApiEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LIST_API = "listApi";
  @SerializedName(SERIALIZED_NAME_LIST_API)
  private ListApiEnum listApi;

  /**
   * Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    UNSPECIFIED("NETWORK_PROTOCOL_UNSPECIFIED"),
    
    HTTPS("NETWORK_PROTOCOL_HTTPS"),
    
    HTTP("NETWORK_PROTOCOL_HTTP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  /**
   * Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.
   */
  @JsonAdapter(RequestModelEnum.Adapter.class)
  public enum RequestModelEnum {
    UNSPECIFIED("REQUEST_MODEL_UNSPECIFIED"),
    
    VIRTUAL_HOSTED_STYLE("REQUEST_MODEL_VIRTUAL_HOSTED_STYLE"),
    
    PATH_STYLE("REQUEST_MODEL_PATH_STYLE");

    private String value;

    RequestModelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestModelEnum fromValue(String value) {
      for (RequestModelEnum b : RequestModelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestModelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestModelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestModelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestModelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RequestModelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_MODEL = "requestModel";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODEL)
  private RequestModelEnum requestModel;

  public S3CompatibleMetadata() {
  }

  public S3CompatibleMetadata authMethod(AuthMethodEnum authMethod) {
    this.authMethod = authMethod;
    return this;
  }

  /**
   * Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.
   * @return authMethod
   */
  @javax.annotation.Nullable
  public AuthMethodEnum getAuthMethod() {
    return authMethod;
  }

  public void setAuthMethod(AuthMethodEnum authMethod) {
    this.authMethod = authMethod;
  }


  public S3CompatibleMetadata listApi(ListApiEnum listApi) {
    this.listApi = listApi;
    return this;
  }

  /**
   * The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.
   * @return listApi
   */
  @javax.annotation.Nullable
  public ListApiEnum getListApi() {
    return listApi;
  }

  public void setListApi(ListApiEnum listApi) {
    this.listApi = listApi;
  }


  public S3CompatibleMetadata protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public S3CompatibleMetadata requestModel(RequestModelEnum requestModel) {
    this.requestModel = requestModel;
    return this;
  }

  /**
   * Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.
   * @return requestModel
   */
  @javax.annotation.Nullable
  public RequestModelEnum getRequestModel() {
    return requestModel;
  }

  public void setRequestModel(RequestModelEnum requestModel) {
    this.requestModel = requestModel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3CompatibleMetadata s3CompatibleMetadata = (S3CompatibleMetadata) o;
    return Objects.equals(this.authMethod, s3CompatibleMetadata.authMethod) &&
        Objects.equals(this.listApi, s3CompatibleMetadata.listApi) &&
        Objects.equals(this.protocol, s3CompatibleMetadata.protocol) &&
        Objects.equals(this.requestModel, s3CompatibleMetadata.requestModel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMethod, listApi, protocol, requestModel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3CompatibleMetadata {\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("    listApi: ").append(toIndentedString(listApi)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    requestModel: ").append(toIndentedString(requestModel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMethod");
    openapiFields.add("listApi");
    openapiFields.add("protocol");
    openapiFields.add("requestModel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3CompatibleMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3CompatibleMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3CompatibleMetadata is not found in the empty JSON string", S3CompatibleMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3CompatibleMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3CompatibleMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authMethod") != null && !jsonObj.get("authMethod").isJsonNull()) && !jsonObj.get("authMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authMethod").toString()));
      }
      // validate the optional field `authMethod`
      if (jsonObj.get("authMethod") != null && !jsonObj.get("authMethod").isJsonNull()) {
        AuthMethodEnum.validateJsonElement(jsonObj.get("authMethod"));
      }
      if ((jsonObj.get("listApi") != null && !jsonObj.get("listApi").isJsonNull()) && !jsonObj.get("listApi").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listApi` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listApi").toString()));
      }
      // validate the optional field `listApi`
      if (jsonObj.get("listApi") != null && !jsonObj.get("listApi").isJsonNull()) {
        ListApiEnum.validateJsonElement(jsonObj.get("listApi"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("requestModel") != null && !jsonObj.get("requestModel").isJsonNull()) && !jsonObj.get("requestModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestModel").toString()));
      }
      // validate the optional field `requestModel`
      if (jsonObj.get("requestModel") != null && !jsonObj.get("requestModel").isJsonNull()) {
        RequestModelEnum.validateJsonElement(jsonObj.get("requestModel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3CompatibleMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3CompatibleMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3CompatibleMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3CompatibleMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<S3CompatibleMetadata>() {
           @Override
           public void write(JsonWriter out, S3CompatibleMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3CompatibleMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3CompatibleMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3CompatibleMetadata
   * @throws IOException if the JSON string is invalid with respect to S3CompatibleMetadata
   */
  public static S3CompatibleMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3CompatibleMetadata.class);
  }

  /**
   * Convert an instance of S3CompatibleMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

