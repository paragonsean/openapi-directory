/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the metadata options for running a transfer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetadataOptions {
  /**
   * Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
   */
  @JsonAdapter(AclEnum.Adapter.class)
  public enum AclEnum {
    UNSPECIFIED("ACL_UNSPECIFIED"),
    
    DESTINATION_BUCKET_DEFAULT("ACL_DESTINATION_BUCKET_DEFAULT"),
    
    PRESERVE("ACL_PRESERVE");

    private String value;

    AclEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AclEnum fromValue(String value) {
      for (AclEnum b : AclEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AclEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AclEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AclEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AclEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AclEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACL = "acl";
  @SerializedName(SERIALIZED_NAME_ACL)
  private AclEnum acl;

  /**
   * Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   */
  @JsonAdapter(GidEnum.Adapter.class)
  public enum GidEnum {
    UNSPECIFIED("GID_UNSPECIFIED"),
    
    SKIP("GID_SKIP"),
    
    NUMBER("GID_NUMBER");

    private String value;

    GidEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GidEnum fromValue(String value) {
      for (GidEnum b : GidEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GidEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GidEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GidEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GidEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GidEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private GidEnum gid;

  /**
   * Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
   */
  @JsonAdapter(KmsKeyEnum.Adapter.class)
  public enum KmsKeyEnum {
    UNSPECIFIED("KMS_KEY_UNSPECIFIED"),
    
    DESTINATION_BUCKET_DEFAULT("KMS_KEY_DESTINATION_BUCKET_DEFAULT"),
    
    PRESERVE("KMS_KEY_PRESERVE");

    private String value;

    KmsKeyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KmsKeyEnum fromValue(String value) {
      for (KmsKeyEnum b : KmsKeyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KmsKeyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KmsKeyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KmsKeyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KmsKeyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KmsKeyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KMS_KEY = "kmsKey";
  @SerializedName(SERIALIZED_NAME_KMS_KEY)
  private KmsKeyEnum kmsKey;

  /**
   * Specifies how each file&#39;s mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    UNSPECIFIED("MODE_UNSPECIFIED"),
    
    SKIP("MODE_SKIP"),
    
    PRESERVE("MODE_PRESERVE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  /**
   * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
   */
  @JsonAdapter(StorageClassEnum.Adapter.class)
  public enum StorageClassEnum {
    UNSPECIFIED("STORAGE_CLASS_UNSPECIFIED"),
    
    DESTINATION_BUCKET_DEFAULT("STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT"),
    
    PRESERVE("STORAGE_CLASS_PRESERVE"),
    
    STANDARD("STORAGE_CLASS_STANDARD"),
    
    NEARLINE("STORAGE_CLASS_NEARLINE"),
    
    COLDLINE("STORAGE_CLASS_COLDLINE"),
    
    ARCHIVE("STORAGE_CLASS_ARCHIVE");

    private String value;

    StorageClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageClassEnum fromValue(String value) {
      for (StorageClassEnum b : StorageClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageClassEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageClassEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storageClass";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  private StorageClassEnum storageClass;

  /**
   * Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   */
  @JsonAdapter(SymlinkEnum.Adapter.class)
  public enum SymlinkEnum {
    UNSPECIFIED("SYMLINK_UNSPECIFIED"),
    
    SKIP("SYMLINK_SKIP"),
    
    PRESERVE("SYMLINK_PRESERVE");

    private String value;

    SymlinkEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SymlinkEnum fromValue(String value) {
      for (SymlinkEnum b : SymlinkEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SymlinkEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SymlinkEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SymlinkEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SymlinkEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SymlinkEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYMLINK = "symlink";
  @SerializedName(SERIALIZED_NAME_SYMLINK)
  private SymlinkEnum symlink;

  /**
   * Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
   */
  @JsonAdapter(TemporaryHoldEnum.Adapter.class)
  public enum TemporaryHoldEnum {
    UNSPECIFIED("TEMPORARY_HOLD_UNSPECIFIED"),
    
    SKIP("TEMPORARY_HOLD_SKIP"),
    
    PRESERVE("TEMPORARY_HOLD_PRESERVE");

    private String value;

    TemporaryHoldEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemporaryHoldEnum fromValue(String value) {
      for (TemporaryHoldEnum b : TemporaryHoldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemporaryHoldEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemporaryHoldEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemporaryHoldEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TemporaryHoldEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TemporaryHoldEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEMPORARY_HOLD = "temporaryHold";
  @SerializedName(SERIALIZED_NAME_TEMPORARY_HOLD)
  private TemporaryHoldEnum temporaryHold;

  /**
   * Specifies how each object&#39;s &#x60;timeCreated&#x60; metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.
   */
  @JsonAdapter(TimeCreatedEnum.Adapter.class)
  public enum TimeCreatedEnum {
    UNSPECIFIED("TIME_CREATED_UNSPECIFIED"),
    
    SKIP("TIME_CREATED_SKIP"),
    
    PRESERVE_AS_CUSTOM_TIME("TIME_CREATED_PRESERVE_AS_CUSTOM_TIME");

    private String value;

    TimeCreatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeCreatedEnum fromValue(String value) {
      for (TimeCreatedEnum b : TimeCreatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeCreatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeCreatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeCreatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeCreatedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeCreatedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private TimeCreatedEnum timeCreated;

  /**
   * Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   */
  @JsonAdapter(UidEnum.Adapter.class)
  public enum UidEnum {
    UNSPECIFIED("UID_UNSPECIFIED"),
    
    SKIP("UID_SKIP"),
    
    NUMBER("UID_NUMBER");

    private String value;

    UidEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UidEnum fromValue(String value) {
      for (UidEnum b : UidEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UidEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UidEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UidEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UidEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UidEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private UidEnum uid;

  public MetadataOptions() {
  }

  public MetadataOptions acl(AclEnum acl) {
    this.acl = acl;
    return this;
  }

  /**
   * Specifies how each object&#39;s ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
   * @return acl
   */
  @javax.annotation.Nullable
  public AclEnum getAcl() {
    return acl;
  }

  public void setAcl(AclEnum acl) {
    this.acl = acl;
  }


  public MetadataOptions gid(GidEnum gid) {
    this.gid = gid;
    return this;
  }

  /**
   * Specifies how each file&#39;s POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   * @return gid
   */
  @javax.annotation.Nullable
  public GidEnum getGid() {
    return gid;
  }

  public void setGid(GidEnum gid) {
    this.gid = gid;
  }


  public MetadataOptions kmsKey(KmsKeyEnum kmsKey) {
    this.kmsKey = kmsKey;
    return this;
  }

  /**
   * Specifies how each object&#39;s Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
   * @return kmsKey
   */
  @javax.annotation.Nullable
  public KmsKeyEnum getKmsKey() {
    return kmsKey;
  }

  public void setKmsKey(KmsKeyEnum kmsKey) {
    this.kmsKey = kmsKey;
  }


  public MetadataOptions mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Specifies how each file&#39;s mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public MetadataOptions storageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public StorageClassEnum getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(StorageClassEnum storageClass) {
    this.storageClass = storageClass;
  }


  public MetadataOptions symlink(SymlinkEnum symlink) {
    this.symlink = symlink;
    return this;
  }

  /**
   * Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   * @return symlink
   */
  @javax.annotation.Nullable
  public SymlinkEnum getSymlink() {
    return symlink;
  }

  public void setSymlink(SymlinkEnum symlink) {
    this.symlink = symlink;
  }


  public MetadataOptions temporaryHold(TemporaryHoldEnum temporaryHold) {
    this.temporaryHold = temporaryHold;
    return this;
  }

  /**
   * Specifies how each object&#39;s temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
   * @return temporaryHold
   */
  @javax.annotation.Nullable
  public TemporaryHoldEnum getTemporaryHold() {
    return temporaryHold;
  }

  public void setTemporaryHold(TemporaryHoldEnum temporaryHold) {
    this.temporaryHold = temporaryHold;
  }


  public MetadataOptions timeCreated(TimeCreatedEnum timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  /**
   * Specifies how each object&#39;s &#x60;timeCreated&#x60; metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public TimeCreatedEnum getTimeCreated() {
    return timeCreated;
  }

  public void setTimeCreated(TimeCreatedEnum timeCreated) {
    this.timeCreated = timeCreated;
  }


  public MetadataOptions uid(UidEnum uid) {
    this.uid = uid;
    return this;
  }

  /**
   * Specifies how each file&#39;s POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
   * @return uid
   */
  @javax.annotation.Nullable
  public UidEnum getUid() {
    return uid;
  }

  public void setUid(UidEnum uid) {
    this.uid = uid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetadataOptions metadataOptions = (MetadataOptions) o;
    return Objects.equals(this.acl, metadataOptions.acl) &&
        Objects.equals(this.gid, metadataOptions.gid) &&
        Objects.equals(this.kmsKey, metadataOptions.kmsKey) &&
        Objects.equals(this.mode, metadataOptions.mode) &&
        Objects.equals(this.storageClass, metadataOptions.storageClass) &&
        Objects.equals(this.symlink, metadataOptions.symlink) &&
        Objects.equals(this.temporaryHold, metadataOptions.temporaryHold) &&
        Objects.equals(this.timeCreated, metadataOptions.timeCreated) &&
        Objects.equals(this.uid, metadataOptions.uid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acl, gid, kmsKey, mode, storageClass, symlink, temporaryHold, timeCreated, uid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetadataOptions {\n");
    sb.append("    acl: ").append(toIndentedString(acl)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    kmsKey: ").append(toIndentedString(kmsKey)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    symlink: ").append(toIndentedString(symlink)).append("\n");
    sb.append("    temporaryHold: ").append(toIndentedString(temporaryHold)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acl");
    openapiFields.add("gid");
    openapiFields.add("kmsKey");
    openapiFields.add("mode");
    openapiFields.add("storageClass");
    openapiFields.add("symlink");
    openapiFields.add("temporaryHold");
    openapiFields.add("timeCreated");
    openapiFields.add("uid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetadataOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetadataOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetadataOptions is not found in the empty JSON string", MetadataOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetadataOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetadataOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acl") != null && !jsonObj.get("acl").isJsonNull()) && !jsonObj.get("acl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acl").toString()));
      }
      // validate the optional field `acl`
      if (jsonObj.get("acl") != null && !jsonObj.get("acl").isJsonNull()) {
        AclEnum.validateJsonElement(jsonObj.get("acl"));
      }
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      // validate the optional field `gid`
      if (jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) {
        GidEnum.validateJsonElement(jsonObj.get("gid"));
      }
      if ((jsonObj.get("kmsKey") != null && !jsonObj.get("kmsKey").isJsonNull()) && !jsonObj.get("kmsKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKey").toString()));
      }
      // validate the optional field `kmsKey`
      if (jsonObj.get("kmsKey") != null && !jsonObj.get("kmsKey").isJsonNull()) {
        KmsKeyEnum.validateJsonElement(jsonObj.get("kmsKey"));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      if ((jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) && !jsonObj.get("storageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageClass").toString()));
      }
      // validate the optional field `storageClass`
      if (jsonObj.get("storageClass") != null && !jsonObj.get("storageClass").isJsonNull()) {
        StorageClassEnum.validateJsonElement(jsonObj.get("storageClass"));
      }
      if ((jsonObj.get("symlink") != null && !jsonObj.get("symlink").isJsonNull()) && !jsonObj.get("symlink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symlink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symlink").toString()));
      }
      // validate the optional field `symlink`
      if (jsonObj.get("symlink") != null && !jsonObj.get("symlink").isJsonNull()) {
        SymlinkEnum.validateJsonElement(jsonObj.get("symlink"));
      }
      if ((jsonObj.get("temporaryHold") != null && !jsonObj.get("temporaryHold").isJsonNull()) && !jsonObj.get("temporaryHold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `temporaryHold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("temporaryHold").toString()));
      }
      // validate the optional field `temporaryHold`
      if (jsonObj.get("temporaryHold") != null && !jsonObj.get("temporaryHold").isJsonNull()) {
        TemporaryHoldEnum.validateJsonElement(jsonObj.get("temporaryHold"));
      }
      if ((jsonObj.get("timeCreated") != null && !jsonObj.get("timeCreated").isJsonNull()) && !jsonObj.get("timeCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeCreated").toString()));
      }
      // validate the optional field `timeCreated`
      if (jsonObj.get("timeCreated") != null && !jsonObj.get("timeCreated").isJsonNull()) {
        TimeCreatedEnum.validateJsonElement(jsonObj.get("timeCreated"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      // validate the optional field `uid`
      if (jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) {
        UidEnum.validateJsonElement(jsonObj.get("uid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetadataOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetadataOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetadataOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetadataOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<MetadataOptions>() {
           @Override
           public void write(JsonWriter out, MetadataOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetadataOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetadataOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetadataOptions
   * @throws IOException if the JSON string is invalid with respect to MetadataOptions
   */
  public static MetadataOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetadataOptions.class);
  }

  /**
   * Convert an instance of MetadataOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

