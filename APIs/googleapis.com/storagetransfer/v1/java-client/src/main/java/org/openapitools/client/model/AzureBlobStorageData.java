/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AzureCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs&#39;s name is the [Azure Blob Storage blob&#39;s key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AzureBlobStorageData {
  public static final String SERIALIZED_NAME_AZURE_CREDENTIALS = "azureCredentials";
  @SerializedName(SERIALIZED_NAME_AZURE_CREDENTIALS)
  private AzureCredentials azureCredentials;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_CREDENTIALS_SECRET = "credentialsSecret";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_SECRET)
  private String credentialsSecret;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storageAccount";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private String storageAccount;

  public AzureBlobStorageData() {
  }

  public AzureBlobStorageData azureCredentials(AzureCredentials azureCredentials) {
    this.azureCredentials = azureCredentials;
    return this;
  }

  /**
   * Get azureCredentials
   * @return azureCredentials
   */
  @javax.annotation.Nullable
  public AzureCredentials getAzureCredentials() {
    return azureCredentials;
  }

  public void setAzureCredentials(AzureCredentials azureCredentials) {
    this.azureCredentials = azureCredentials;
  }


  public AzureBlobStorageData container(String container) {
    this.container = container;
    return this;
  }

  /**
   * Required. The container to transfer from the Azure Storage account.
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  public AzureBlobStorageData credentialsSecret(String credentialsSecret) {
    this.credentialsSecret = credentialsSecret;
    return this;
  }

  /**
   * Optional. The Resource name of a secret in Secret Manager. The Azure SAS token must be stored in Secret Manager in JSON format: { \&quot;sas_token\&quot; : \&quot;SAS_TOKEN\&quot; } GoogleServiceAccount must be granted &#x60;roles/secretmanager.secretAccessor&#x60; for the resource. See [Configure access to a source: Microsoft Azure Blob Storage] (https://cloud.google.com/storage-transfer/docs/source-microsoft-azure#secret_manager) for more information. If &#x60;credentials_secret&#x60; is specified, do not specify azure_credentials. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: &#x60;projects/{project_number}/secrets/{secret_name}&#x60;
   * @return credentialsSecret
   */
  @javax.annotation.Nullable
  public String getCredentialsSecret() {
    return credentialsSecret;
  }

  public void setCredentialsSecret(String credentialsSecret) {
    this.credentialsSecret = credentialsSecret;
  }


  public AzureBlobStorageData path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Root path to transfer objects. Must be an empty string or full path name that ends with a &#39;/&#39;. This field is treated as an object prefix. As such, it should generally not begin with a &#39;/&#39;.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public AzureBlobStorageData storageAccount(String storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  /**
   * Required. The name of the Azure Storage account.
   * @return storageAccount
   */
  @javax.annotation.Nullable
  public String getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(String storageAccount) {
    this.storageAccount = storageAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AzureBlobStorageData azureBlobStorageData = (AzureBlobStorageData) o;
    return Objects.equals(this.azureCredentials, azureBlobStorageData.azureCredentials) &&
        Objects.equals(this.container, azureBlobStorageData.container) &&
        Objects.equals(this.credentialsSecret, azureBlobStorageData.credentialsSecret) &&
        Objects.equals(this.path, azureBlobStorageData.path) &&
        Objects.equals(this.storageAccount, azureBlobStorageData.storageAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureCredentials, container, credentialsSecret, path, storageAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AzureBlobStorageData {\n");
    sb.append("    azureCredentials: ").append(toIndentedString(azureCredentials)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    credentialsSecret: ").append(toIndentedString(credentialsSecret)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureCredentials");
    openapiFields.add("container");
    openapiFields.add("credentialsSecret");
    openapiFields.add("path");
    openapiFields.add("storageAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AzureBlobStorageData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AzureBlobStorageData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AzureBlobStorageData is not found in the empty JSON string", AzureBlobStorageData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AzureBlobStorageData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AzureBlobStorageData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `azureCredentials`
      if (jsonObj.get("azureCredentials") != null && !jsonObj.get("azureCredentials").isJsonNull()) {
        AzureCredentials.validateJsonElement(jsonObj.get("azureCredentials"));
      }
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("credentialsSecret") != null && !jsonObj.get("credentialsSecret").isJsonNull()) && !jsonObj.get("credentialsSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialsSecret").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("storageAccount") != null && !jsonObj.get("storageAccount").isJsonNull()) && !jsonObj.get("storageAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AzureBlobStorageData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AzureBlobStorageData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AzureBlobStorageData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AzureBlobStorageData.class));

       return (TypeAdapter<T>) new TypeAdapter<AzureBlobStorageData>() {
           @Override
           public void write(JsonWriter out, AzureBlobStorageData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AzureBlobStorageData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AzureBlobStorageData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AzureBlobStorageData
   * @throws IOException if the JSON string is invalid with respect to AzureBlobStorageData
   */
  public static AzureBlobStorageData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AzureBlobStorageData.class);
  }

  /**
   * Convert an instance of AzureBlobStorageData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

