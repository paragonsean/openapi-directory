/*
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conditions that determine which objects are transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The \&quot;last modification time\&quot; refers to the time of the last change to the object&#39;s content or metadata â€” specifically, this is the &#x60;updated&#x60; property of Cloud Storage objects, the &#x60;LastModified&#x60; field of S3 objects, and the &#x60;Last-Modified&#x60; header of Azure blobs. Transfers with a PosixFilesystem source or destination don&#39;t support &#x60;ObjectConditions&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:42.883779-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ObjectConditions {
  public static final String SERIALIZED_NAME_EXCLUDE_PREFIXES = "excludePrefixes";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PREFIXES)
  private List<String> excludePrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDE_PREFIXES = "includePrefixes";
  @SerializedName(SERIALIZED_NAME_INCLUDE_PREFIXES)
  private List<String> includePrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_MODIFIED_BEFORE = "lastModifiedBefore";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_BEFORE)
  private String lastModifiedBefore;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_SINCE = "lastModifiedSince";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_SINCE)
  private String lastModifiedSince;

  public static final String SERIALIZED_NAME_MAX_TIME_ELAPSED_SINCE_LAST_MODIFICATION = "maxTimeElapsedSinceLastModification";
  @SerializedName(SERIALIZED_NAME_MAX_TIME_ELAPSED_SINCE_LAST_MODIFICATION)
  private String maxTimeElapsedSinceLastModification;

  public static final String SERIALIZED_NAME_MIN_TIME_ELAPSED_SINCE_LAST_MODIFICATION = "minTimeElapsedSinceLastModification";
  @SerializedName(SERIALIZED_NAME_MIN_TIME_ELAPSED_SINCE_LAST_MODIFICATION)
  private String minTimeElapsedSinceLastModification;

  public ObjectConditions() {
  }

  public ObjectConditions excludePrefixes(List<String> excludePrefixes) {
    this.excludePrefixes = excludePrefixes;
    return this;
  }

  public ObjectConditions addExcludePrefixesItem(String excludePrefixesItem) {
    if (this.excludePrefixes == null) {
      this.excludePrefixes = new ArrayList<>();
    }
    this.excludePrefixes.add(excludePrefixesItem);
    return this;
  }

  /**
   * If you specify &#x60;exclude_prefixes&#x60;, Storage Transfer Service uses the items in the &#x60;exclude_prefixes&#x60; array to determine which objects to exclude from a transfer. Objects must not start with one of the matching &#x60;exclude_prefixes&#x60; for inclusion in a transfer. The following are requirements of &#x60;exclude_prefixes&#x60;: * Each exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each exclude-prefix must omit the leading slash. For example, to exclude the object &#x60;s3://my-aws-bucket/logs/y&#x3D;2015/requests.gz&#x60;, specify the exclude-prefix as &#x60;logs/y&#x3D;2015/requests.gz&#x60;. * None of the exclude-prefix values can be empty, if specified. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If include_prefixes is specified, then each exclude-prefix must start with the value of a path explicitly included by &#x60;include_prefixes&#x60;. The max size of &#x60;exclude_prefixes&#x60; is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
   * @return excludePrefixes
   */
  @javax.annotation.Nullable
  public List<String> getExcludePrefixes() {
    return excludePrefixes;
  }

  public void setExcludePrefixes(List<String> excludePrefixes) {
    this.excludePrefixes = excludePrefixes;
  }


  public ObjectConditions includePrefixes(List<String> includePrefixes) {
    this.includePrefixes = includePrefixes;
    return this;
  }

  public ObjectConditions addIncludePrefixesItem(String includePrefixesItem) {
    if (this.includePrefixes == null) {
      this.includePrefixes = new ArrayList<>();
    }
    this.includePrefixes.add(includePrefixesItem);
    return this;
  }

  /**
   * If you specify &#x60;include_prefixes&#x60;, Storage Transfer Service uses the items in the &#x60;include_prefixes&#x60; array to determine which objects to include in a transfer. Objects must start with one of the matching &#x60;include_prefixes&#x60; for inclusion in the transfer. If exclude_prefixes is specified, objects must not start with any of the &#x60;exclude_prefixes&#x60; specified for inclusion in the transfer. The following are requirements of &#x60;include_prefixes&#x60;: * Each include-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix must omit the leading slash. For example, to include the object &#x60;s3://my-aws-bucket/logs/y&#x3D;2015/requests.gz&#x60;, specify the include-prefix as &#x60;logs/y&#x3D;2015/requests.gz&#x60;. * None of the include-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. The max size of &#x60;include_prefixes&#x60; is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
   * @return includePrefixes
   */
  @javax.annotation.Nullable
  public List<String> getIncludePrefixes() {
    return includePrefixes;
  }

  public void setIncludePrefixes(List<String> includePrefixes) {
    this.includePrefixes = includePrefixes;
  }


  public ObjectConditions lastModifiedBefore(String lastModifiedBefore) {
    this.lastModifiedBefore = lastModifiedBefore;
    return this;
  }

  /**
   * If specified, only objects with a \&quot;last modification time\&quot; before this timestamp and objects that don&#39;t have a \&quot;last modification time\&quot; are transferred.
   * @return lastModifiedBefore
   */
  @javax.annotation.Nullable
  public String getLastModifiedBefore() {
    return lastModifiedBefore;
  }

  public void setLastModifiedBefore(String lastModifiedBefore) {
    this.lastModifiedBefore = lastModifiedBefore;
  }


  public ObjectConditions lastModifiedSince(String lastModifiedSince) {
    this.lastModifiedSince = lastModifiedSince;
    return this;
  }

  /**
   * If specified, only objects with a \&quot;last modification time\&quot; on or after this timestamp and objects that don&#39;t have a \&quot;last modification time\&quot; are transferred. The &#x60;last_modified_since&#x60; and &#x60;last_modified_before&#x60; fields can be used together for chunked data processing. For example, consider a script that processes each day&#39;s worth of data at a time. For that you&#39;d set each of the fields as follows: * &#x60;last_modified_since&#x60; to the start of the day * &#x60;last_modified_before&#x60; to the end of the day
   * @return lastModifiedSince
   */
  @javax.annotation.Nullable
  public String getLastModifiedSince() {
    return lastModifiedSince;
  }

  public void setLastModifiedSince(String lastModifiedSince) {
    this.lastModifiedSince = lastModifiedSince;
  }


  public ObjectConditions maxTimeElapsedSinceLastModification(String maxTimeElapsedSinceLastModification) {
    this.maxTimeElapsedSinceLastModification = maxTimeElapsedSinceLastModification;
    return this;
  }

  /**
   * Ensures that objects are not transferred if a specific maximum time has elapsed since the \&quot;last modification time\&quot;. When a TransferOperation begins, objects with a \&quot;last modification time\&quot; are transferred only if the elapsed time between the start_time of the &#x60;TransferOperation&#x60;and the \&quot;last modification time\&quot; of the object is less than the value of max_time_elapsed_since_last_modification&#x60;. Objects that do not have a \&quot;last modification time\&quot; are also transferred.
   * @return maxTimeElapsedSinceLastModification
   */
  @javax.annotation.Nullable
  public String getMaxTimeElapsedSinceLastModification() {
    return maxTimeElapsedSinceLastModification;
  }

  public void setMaxTimeElapsedSinceLastModification(String maxTimeElapsedSinceLastModification) {
    this.maxTimeElapsedSinceLastModification = maxTimeElapsedSinceLastModification;
  }


  public ObjectConditions minTimeElapsedSinceLastModification(String minTimeElapsedSinceLastModification) {
    this.minTimeElapsedSinceLastModification = minTimeElapsedSinceLastModification;
    return this;
  }

  /**
   * Ensures that objects are not transferred until a specific minimum time has elapsed after the \&quot;last modification time\&quot;. When a TransferOperation begins, objects with a \&quot;last modification time\&quot; are transferred only if the elapsed time between the start_time of the &#x60;TransferOperation&#x60; and the \&quot;last modification time\&quot; of the object is equal to or greater than the value of min_time_elapsed_since_last_modification&#x60;. Objects that do not have a \&quot;last modification time\&quot; are also transferred.
   * @return minTimeElapsedSinceLastModification
   */
  @javax.annotation.Nullable
  public String getMinTimeElapsedSinceLastModification() {
    return minTimeElapsedSinceLastModification;
  }

  public void setMinTimeElapsedSinceLastModification(String minTimeElapsedSinceLastModification) {
    this.minTimeElapsedSinceLastModification = minTimeElapsedSinceLastModification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectConditions objectConditions = (ObjectConditions) o;
    return Objects.equals(this.excludePrefixes, objectConditions.excludePrefixes) &&
        Objects.equals(this.includePrefixes, objectConditions.includePrefixes) &&
        Objects.equals(this.lastModifiedBefore, objectConditions.lastModifiedBefore) &&
        Objects.equals(this.lastModifiedSince, objectConditions.lastModifiedSince) &&
        Objects.equals(this.maxTimeElapsedSinceLastModification, objectConditions.maxTimeElapsedSinceLastModification) &&
        Objects.equals(this.minTimeElapsedSinceLastModification, objectConditions.minTimeElapsedSinceLastModification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(excludePrefixes, includePrefixes, lastModifiedBefore, lastModifiedSince, maxTimeElapsedSinceLastModification, minTimeElapsedSinceLastModification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectConditions {\n");
    sb.append("    excludePrefixes: ").append(toIndentedString(excludePrefixes)).append("\n");
    sb.append("    includePrefixes: ").append(toIndentedString(includePrefixes)).append("\n");
    sb.append("    lastModifiedBefore: ").append(toIndentedString(lastModifiedBefore)).append("\n");
    sb.append("    lastModifiedSince: ").append(toIndentedString(lastModifiedSince)).append("\n");
    sb.append("    maxTimeElapsedSinceLastModification: ").append(toIndentedString(maxTimeElapsedSinceLastModification)).append("\n");
    sb.append("    minTimeElapsedSinceLastModification: ").append(toIndentedString(minTimeElapsedSinceLastModification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("excludePrefixes");
    openapiFields.add("includePrefixes");
    openapiFields.add("lastModifiedBefore");
    openapiFields.add("lastModifiedSince");
    openapiFields.add("maxTimeElapsedSinceLastModification");
    openapiFields.add("minTimeElapsedSinceLastModification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ObjectConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ObjectConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjectConditions is not found in the empty JSON string", ObjectConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ObjectConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjectConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludePrefixes") != null && !jsonObj.get("excludePrefixes").isJsonNull() && !jsonObj.get("excludePrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludePrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("excludePrefixes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includePrefixes") != null && !jsonObj.get("includePrefixes").isJsonNull() && !jsonObj.get("includePrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includePrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("includePrefixes").toString()));
      }
      if ((jsonObj.get("lastModifiedBefore") != null && !jsonObj.get("lastModifiedBefore").isJsonNull()) && !jsonObj.get("lastModifiedBefore").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedBefore` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedBefore").toString()));
      }
      if ((jsonObj.get("lastModifiedSince") != null && !jsonObj.get("lastModifiedSince").isJsonNull()) && !jsonObj.get("lastModifiedSince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedSince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedSince").toString()));
      }
      if ((jsonObj.get("maxTimeElapsedSinceLastModification") != null && !jsonObj.get("maxTimeElapsedSinceLastModification").isJsonNull()) && !jsonObj.get("maxTimeElapsedSinceLastModification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxTimeElapsedSinceLastModification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxTimeElapsedSinceLastModification").toString()));
      }
      if ((jsonObj.get("minTimeElapsedSinceLastModification") != null && !jsonObj.get("minTimeElapsedSinceLastModification").isJsonNull()) && !jsonObj.get("minTimeElapsedSinceLastModification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTimeElapsedSinceLastModification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTimeElapsedSinceLastModification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjectConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjectConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjectConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjectConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjectConditions>() {
           @Override
           public void write(JsonWriter out, ObjectConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjectConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ObjectConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ObjectConditions
   * @throws IOException if the JSON string is invalid with respect to ObjectConditions
   */
  public static ObjectConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjectConditions.class);
  }

  /**
   * Convert an instance of ObjectConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

