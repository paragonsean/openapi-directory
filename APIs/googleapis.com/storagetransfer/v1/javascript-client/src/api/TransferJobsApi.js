/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListTransferJobsResponse from '../model/ListTransferJobsResponse';
import Operation from '../model/Operation';
import RunTransferJobRequest from '../model/RunTransferJobRequest';
import TransferJob from '../model/TransferJob';
import UpdateTransferJobRequest from '../model/UpdateTransferJobRequest';

/**
* TransferJobs service.
* @module api/TransferJobsApi
* @version v1
*/
export default class TransferJobsApi {

    /**
    * Constructs a new TransferJobsApi. 
    * @alias module:api/TransferJobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storagetransferTransferJobsCreate operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a transfer job that runs periodically.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TransferJob} [transferJob] 
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferJob}
     */
    storagetransferTransferJobsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['transferJob'];

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferJob;
      return this.apiClient.callApi(
        '/v1/transferJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storagetransferTransferJobsDelete operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a transfer job. Deleting a transfer job sets its status to DELETED.
     * @param {String} jobName Required. The job to delete.
     * @param {String} projectId Required. The ID of the Google Cloud project that owns the job.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    storagetransferTransferJobsDelete(jobName, projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling storagetransferTransferJobsDelete");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storagetransferTransferJobsDelete");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{jobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storagetransferTransferJobsGet operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a transfer job.
     * @param {String} jobName Required. The job to get.
     * @param {String} projectId Required. The ID of the Google Cloud project that owns the job.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferJob}
     */
    storagetransferTransferJobsGet(jobName, projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling storagetransferTransferJobsGet");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling storagetransferTransferJobsGet");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransferJob;
      return this.apiClient.callApi(
        '/v1/{jobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storagetransferTransferJobsList operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTransferJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists transfer jobs.
     * @param {String} filter Required. A list of query parameters specified as JSON text in the form of: `{\"projectId\":\"my_project_id\", \"jobNames\":[\"jobid1\",\"jobid2\",...], \"jobStatuses\":[\"status1\",\"status2\",...]}` Since `jobNames` and `jobStatuses` support multiple values, their values must be specified with array notation. `projectId` is required. `jobNames` and `jobStatuses` are optional. The valid values for `jobStatuses` are case-insensitive: ENABLED, DISABLED, and DELETED.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The list page size. The max allowed value is 256.
     * @param {String} [pageToken] The list page token.
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTransferJobsResponse}
     */
    storagetransferTransferJobsList(filter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling storagetransferTransferJobsList");
      }

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': filter,
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransferJobsResponse;
      return this.apiClient.callApi(
        '/v1/transferJobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storagetransferTransferJobsPatch operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferJob} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a transfer job. Updating a job's transfer spec does not affect transfer operations that are running already. **Note:** The job's status field can be modified using this RPC (for example, to set a job's status to DELETED, DISABLED, or ENABLED).
     * @param {String} jobName Required. The name of job to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/UpdateTransferJobRequest} [updateTransferJobRequest] 
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferJob}
     */
    storagetransferTransferJobsPatch(jobName, opts, callback) {
      opts = opts || {};
      let postBody = opts['updateTransferJobRequest'];
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling storagetransferTransferJobsPatch");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransferJob;
      return this.apiClient.callApi(
        '/v1/{jobName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storagetransferTransferJobsRun operation.
     * @callback module:api/TransferJobsApi~storagetransferTransferJobsRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new operation for the specified transfer job. A `TransferJob` has a maximum of one active `TransferOperation`. If this method is called while a `TransferOperation` is active, an error is returned.
     * @param {String} jobName Required. The name of the transfer job.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RunTransferJobRequest} [runTransferJobRequest] 
     * @param {module:api/TransferJobsApi~storagetransferTransferJobsRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    storagetransferTransferJobsRun(jobName, opts, callback) {
      opts = opts || {};
      let postBody = opts['runTransferJobRequest'];
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling storagetransferTransferJobsRun");
      }

      let pathParams = {
        'jobName': jobName
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/v1/{jobName}:run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
