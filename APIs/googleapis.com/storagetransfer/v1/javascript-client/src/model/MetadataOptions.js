/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetadataOptions model module.
 * @module model/MetadataOptions
 * @version v1
 */
class MetadataOptions {
    /**
     * Constructs a new <code>MetadataOptions</code>.
     * Specifies the metadata options for running a transfer.
     * @alias module:model/MetadataOptions
     */
    constructor() { 
        
        MetadataOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetadataOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetadataOptions} obj Optional instance to populate.
     * @return {module:model/MetadataOptions} The populated <code>MetadataOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetadataOptions();

            if (data.hasOwnProperty('acl')) {
                obj['acl'] = ApiClient.convertToType(data['acl'], 'String');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('kmsKey')) {
                obj['kmsKey'] = ApiClient.convertToType(data['kmsKey'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('storageClass')) {
                obj['storageClass'] = ApiClient.convertToType(data['storageClass'], 'String');
            }
            if (data.hasOwnProperty('symlink')) {
                obj['symlink'] = ApiClient.convertToType(data['symlink'], 'String');
            }
            if (data.hasOwnProperty('temporaryHold')) {
                obj['temporaryHold'] = ApiClient.convertToType(data['temporaryHold'], 'String');
            }
            if (data.hasOwnProperty('timeCreated')) {
                obj['timeCreated'] = ApiClient.convertToType(data['timeCreated'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetadataOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetadataOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['acl'] && !(typeof data['acl'] === 'string' || data['acl'] instanceof String)) {
            throw new Error("Expected the field `acl` to be a primitive type in the JSON string but got " + data['acl']);
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['kmsKey'] && !(typeof data['kmsKey'] === 'string' || data['kmsKey'] instanceof String)) {
            throw new Error("Expected the field `kmsKey` to be a primitive type in the JSON string but got " + data['kmsKey']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['storageClass'] && !(typeof data['storageClass'] === 'string' || data['storageClass'] instanceof String)) {
            throw new Error("Expected the field `storageClass` to be a primitive type in the JSON string but got " + data['storageClass']);
        }
        // ensure the json data is a string
        if (data['symlink'] && !(typeof data['symlink'] === 'string' || data['symlink'] instanceof String)) {
            throw new Error("Expected the field `symlink` to be a primitive type in the JSON string but got " + data['symlink']);
        }
        // ensure the json data is a string
        if (data['temporaryHold'] && !(typeof data['temporaryHold'] === 'string' || data['temporaryHold'] instanceof String)) {
            throw new Error("Expected the field `temporaryHold` to be a primitive type in the JSON string but got " + data['temporaryHold']);
        }
        // ensure the json data is a string
        if (data['timeCreated'] && !(typeof data['timeCreated'] === 'string' || data['timeCreated'] instanceof String)) {
            throw new Error("Expected the field `timeCreated` to be a primitive type in the JSON string but got " + data['timeCreated']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }

        return true;
    }


}



/**
 * Specifies how each object's ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.
 * @member {module:model/MetadataOptions.AclEnum} acl
 */
MetadataOptions.prototype['acl'] = undefined;

/**
 * Specifies how each file's POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
 * @member {module:model/MetadataOptions.GidEnum} gid
 */
MetadataOptions.prototype['gid'] = undefined;

/**
 * Specifies how each object's Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.
 * @member {module:model/MetadataOptions.KmsKeyEnum} kmsKey
 */
MetadataOptions.prototype['kmsKey'] = undefined;

/**
 * Specifies how each file's mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
 * @member {module:model/MetadataOptions.ModeEnum} mode
 */
MetadataOptions.prototype['mode'] = undefined;

/**
 * Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
 * @member {module:model/MetadataOptions.StorageClassEnum} storageClass
 */
MetadataOptions.prototype['storageClass'] = undefined;

/**
 * Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
 * @member {module:model/MetadataOptions.SymlinkEnum} symlink
 */
MetadataOptions.prototype['symlink'] = undefined;

/**
 * Specifies how each object's temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.
 * @member {module:model/MetadataOptions.TemporaryHoldEnum} temporaryHold
 */
MetadataOptions.prototype['temporaryHold'] = undefined;

/**
 * Specifies how each object's `timeCreated` metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.
 * @member {module:model/MetadataOptions.TimeCreatedEnum} timeCreated
 */
MetadataOptions.prototype['timeCreated'] = undefined;

/**
 * Specifies how each file's POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.
 * @member {module:model/MetadataOptions.UidEnum} uid
 */
MetadataOptions.prototype['uid'] = undefined;





/**
 * Allowed values for the <code>acl</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['AclEnum'] = {

    /**
     * value: "ACL_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "ACL_UNSPECIFIED",

    /**
     * value: "ACL_DESTINATION_BUCKET_DEFAULT"
     * @const
     */
    "DESTINATION_BUCKET_DEFAULT": "ACL_DESTINATION_BUCKET_DEFAULT",

    /**
     * value: "ACL_PRESERVE"
     * @const
     */
    "PRESERVE": "ACL_PRESERVE"
};


/**
 * Allowed values for the <code>gid</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['GidEnum'] = {

    /**
     * value: "GID_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "GID_UNSPECIFIED",

    /**
     * value: "GID_SKIP"
     * @const
     */
    "SKIP": "GID_SKIP",

    /**
     * value: "GID_NUMBER"
     * @const
     */
    "NUMBER": "GID_NUMBER"
};


/**
 * Allowed values for the <code>kmsKey</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['KmsKeyEnum'] = {

    /**
     * value: "KMS_KEY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "KMS_KEY_UNSPECIFIED",

    /**
     * value: "KMS_KEY_DESTINATION_BUCKET_DEFAULT"
     * @const
     */
    "DESTINATION_BUCKET_DEFAULT": "KMS_KEY_DESTINATION_BUCKET_DEFAULT",

    /**
     * value: "KMS_KEY_PRESERVE"
     * @const
     */
    "PRESERVE": "KMS_KEY_PRESERVE"
};


/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['ModeEnum'] = {

    /**
     * value: "MODE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "MODE_UNSPECIFIED",

    /**
     * value: "MODE_SKIP"
     * @const
     */
    "SKIP": "MODE_SKIP",

    /**
     * value: "MODE_PRESERVE"
     * @const
     */
    "PRESERVE": "MODE_PRESERVE"
};


/**
 * Allowed values for the <code>storageClass</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['StorageClassEnum'] = {

    /**
     * value: "STORAGE_CLASS_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "STORAGE_CLASS_UNSPECIFIED",

    /**
     * value: "STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT"
     * @const
     */
    "DESTINATION_BUCKET_DEFAULT": "STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT",

    /**
     * value: "STORAGE_CLASS_PRESERVE"
     * @const
     */
    "PRESERVE": "STORAGE_CLASS_PRESERVE",

    /**
     * value: "STORAGE_CLASS_STANDARD"
     * @const
     */
    "STANDARD": "STORAGE_CLASS_STANDARD",

    /**
     * value: "STORAGE_CLASS_NEARLINE"
     * @const
     */
    "NEARLINE": "STORAGE_CLASS_NEARLINE",

    /**
     * value: "STORAGE_CLASS_COLDLINE"
     * @const
     */
    "COLDLINE": "STORAGE_CLASS_COLDLINE",

    /**
     * value: "STORAGE_CLASS_ARCHIVE"
     * @const
     */
    "ARCHIVE": "STORAGE_CLASS_ARCHIVE"
};


/**
 * Allowed values for the <code>symlink</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['SymlinkEnum'] = {

    /**
     * value: "SYMLINK_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "SYMLINK_UNSPECIFIED",

    /**
     * value: "SYMLINK_SKIP"
     * @const
     */
    "SKIP": "SYMLINK_SKIP",

    /**
     * value: "SYMLINK_PRESERVE"
     * @const
     */
    "PRESERVE": "SYMLINK_PRESERVE"
};


/**
 * Allowed values for the <code>temporaryHold</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['TemporaryHoldEnum'] = {

    /**
     * value: "TEMPORARY_HOLD_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TEMPORARY_HOLD_UNSPECIFIED",

    /**
     * value: "TEMPORARY_HOLD_SKIP"
     * @const
     */
    "SKIP": "TEMPORARY_HOLD_SKIP",

    /**
     * value: "TEMPORARY_HOLD_PRESERVE"
     * @const
     */
    "PRESERVE": "TEMPORARY_HOLD_PRESERVE"
};


/**
 * Allowed values for the <code>timeCreated</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['TimeCreatedEnum'] = {

    /**
     * value: "TIME_CREATED_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "TIME_CREATED_UNSPECIFIED",

    /**
     * value: "TIME_CREATED_SKIP"
     * @const
     */
    "SKIP": "TIME_CREATED_SKIP",

    /**
     * value: "TIME_CREATED_PRESERVE_AS_CUSTOM_TIME"
     * @const
     */
    "PRESERVE_AS_CUSTOM_TIME": "TIME_CREATED_PRESERVE_AS_CUSTOM_TIME"
};


/**
 * Allowed values for the <code>uid</code> property.
 * @enum {String}
 * @readonly
 */
MetadataOptions['UidEnum'] = {

    /**
     * value: "UID_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UID_UNSPECIFIED",

    /**
     * value: "UID_SKIP"
     * @const
     */
    "SKIP": "UID_SKIP",

    /**
     * value: "UID_NUMBER"
     * @const
     */
    "NUMBER": "UID_NUMBER"
};



export default MetadataOptions;

