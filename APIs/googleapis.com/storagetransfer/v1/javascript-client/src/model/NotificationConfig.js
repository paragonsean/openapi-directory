/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationConfig model module.
 * @module model/NotificationConfig
 * @version v1
 */
class NotificationConfig {
    /**
     * Constructs a new <code>NotificationConfig</code>.
     * Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following &#x60;PubsubMessage.attributes&#x60;: * &#x60;\&quot;eventType\&quot;&#x60;: one of the EventType values * &#x60;\&quot;payloadFormat\&quot;&#x60;: one of the PayloadFormat values * &#x60;\&quot;projectId\&quot;&#x60;: the project_id of the &#x60;TransferOperation&#x60; * &#x60;\&quot;transferJobName\&quot;&#x60;: the transfer_job_name of the &#x60;TransferOperation&#x60; * &#x60;\&quot;transferOperationName\&quot;&#x60;: the name of the &#x60;TransferOperation&#x60; The &#x60;PubsubMessage.data&#x60; contains a TransferOperation resource formatted according to the specified &#x60;PayloadFormat&#x60;.
     * @alias module:model/NotificationConfig
     */
    constructor() { 
        
        NotificationConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotificationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationConfig} obj Optional instance to populate.
     * @return {module:model/NotificationConfig} The populated <code>NotificationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationConfig();

            if (data.hasOwnProperty('eventTypes')) {
                obj['eventTypes'] = ApiClient.convertToType(data['eventTypes'], ['String']);
            }
            if (data.hasOwnProperty('payloadFormat')) {
                obj['payloadFormat'] = ApiClient.convertToType(data['payloadFormat'], 'String');
            }
            if (data.hasOwnProperty('pubsubTopic')) {
                obj['pubsubTopic'] = ApiClient.convertToType(data['pubsubTopic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypes'])) {
            throw new Error("Expected the field `eventTypes` to be an array in the JSON data but got " + data['eventTypes']);
        }
        // ensure the json data is a string
        if (data['payloadFormat'] && !(typeof data['payloadFormat'] === 'string' || data['payloadFormat'] instanceof String)) {
            throw new Error("Expected the field `payloadFormat` to be a primitive type in the JSON string but got " + data['payloadFormat']);
        }
        // ensure the json data is a string
        if (data['pubsubTopic'] && !(typeof data['pubsubTopic'] === 'string' || data['pubsubTopic'] instanceof String)) {
            throw new Error("Expected the field `pubsubTopic` to be a primitive type in the JSON string but got " + data['pubsubTopic']);
        }

        return true;
    }


}



/**
 * Event types for which a notification is desired. If empty, send notifications for all event types.
 * @member {Array.<module:model/NotificationConfig.EventTypesEnum>} eventTypes
 */
NotificationConfig.prototype['eventTypes'] = undefined;

/**
 * Required. The desired format of the notification message payloads.
 * @member {module:model/NotificationConfig.PayloadFormatEnum} payloadFormat
 */
NotificationConfig.prototype['payloadFormat'] = undefined;

/**
 * Required. The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.
 * @member {String} pubsubTopic
 */
NotificationConfig.prototype['pubsubTopic'] = undefined;





/**
 * Allowed values for the <code>eventTypes</code> property.
 * @enum {String}
 * @readonly
 */
NotificationConfig['EventTypesEnum'] = {

    /**
     * value: "EVENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_TYPE_UNSPECIFIED": "EVENT_TYPE_UNSPECIFIED",

    /**
     * value: "TRANSFER_OPERATION_SUCCESS"
     * @const
     */
    "TRANSFER_OPERATION_SUCCESS": "TRANSFER_OPERATION_SUCCESS",

    /**
     * value: "TRANSFER_OPERATION_FAILED"
     * @const
     */
    "TRANSFER_OPERATION_FAILED": "TRANSFER_OPERATION_FAILED",

    /**
     * value: "TRANSFER_OPERATION_ABORTED"
     * @const
     */
    "TRANSFER_OPERATION_ABORTED": "TRANSFER_OPERATION_ABORTED"
};


/**
 * Allowed values for the <code>payloadFormat</code> property.
 * @enum {String}
 * @readonly
 */
NotificationConfig['PayloadFormatEnum'] = {

    /**
     * value: "PAYLOAD_FORMAT_UNSPECIFIED"
     * @const
     */
    "PAYLOAD_FORMAT_UNSPECIFIED": "PAYLOAD_FORMAT_UNSPECIFIED",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON"
};



export default NotificationConfig;

