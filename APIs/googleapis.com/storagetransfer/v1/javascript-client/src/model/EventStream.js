/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventStream model module.
 * @module model/EventStream
 * @version v1
 */
class EventStream {
    /**
     * Constructs a new <code>EventStream</code>.
     * Specifies the Event-driven transfer options. Event-driven transfers listen to an event stream to transfer updated files.
     * @alias module:model/EventStream
     */
    constructor() { 
        
        EventStream.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventStream</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventStream} obj Optional instance to populate.
     * @return {module:model/EventStream} The populated <code>EventStream</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventStream();

            if (data.hasOwnProperty('eventStreamExpirationTime')) {
                obj['eventStreamExpirationTime'] = ApiClient.convertToType(data['eventStreamExpirationTime'], 'String');
            }
            if (data.hasOwnProperty('eventStreamStartTime')) {
                obj['eventStreamStartTime'] = ApiClient.convertToType(data['eventStreamStartTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventStream</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventStream</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventStreamExpirationTime'] && !(typeof data['eventStreamExpirationTime'] === 'string' || data['eventStreamExpirationTime'] instanceof String)) {
            throw new Error("Expected the field `eventStreamExpirationTime` to be a primitive type in the JSON string but got " + data['eventStreamExpirationTime']);
        }
        // ensure the json data is a string
        if (data['eventStreamStartTime'] && !(typeof data['eventStreamStartTime'] === 'string' || data['eventStreamStartTime'] instanceof String)) {
            throw new Error("Expected the field `eventStreamStartTime` to be a primitive type in the JSON string but got " + data['eventStreamStartTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Specifies the data and time at which Storage Transfer Service stops listening for events from this stream. After this time, any transfers in progress will complete, but no new transfers are initiated.
 * @member {String} eventStreamExpirationTime
 */
EventStream.prototype['eventStreamExpirationTime'] = undefined;

/**
 * Specifies the date and time that Storage Transfer Service starts listening for events from this stream. If no start time is specified or start time is in the past, Storage Transfer Service starts listening immediately.
 * @member {String} eventStreamStartTime
 */
EventStream.prototype['eventStreamStartTime'] = undefined;

/**
 * Required. Specifies a unique name of the resource such as AWS SQS ARN in the form 'arn:aws:sqs:region:account_id:queue_name', or Pub/Sub subscription resource name in the form 'projects/{project}/subscriptions/{sub}'.
 * @member {String} name
 */
EventStream.prototype['name'] = undefined;






export default EventStream;

