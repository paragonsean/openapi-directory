/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ObjectConditions model module.
 * @module model/ObjectConditions
 * @version v1
 */
class ObjectConditions {
    /**
     * Constructs a new <code>ObjectConditions</code>.
     * Conditions that determine which objects are transferred. Applies only to Cloud Data Sources such as S3, Azure, and Cloud Storage. The \&quot;last modification time\&quot; refers to the time of the last change to the object&#39;s content or metadata â€” specifically, this is the &#x60;updated&#x60; property of Cloud Storage objects, the &#x60;LastModified&#x60; field of S3 objects, and the &#x60;Last-Modified&#x60; header of Azure blobs. Transfers with a PosixFilesystem source or destination don&#39;t support &#x60;ObjectConditions&#x60;.
     * @alias module:model/ObjectConditions
     */
    constructor() { 
        
        ObjectConditions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ObjectConditions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ObjectConditions} obj Optional instance to populate.
     * @return {module:model/ObjectConditions} The populated <code>ObjectConditions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ObjectConditions();

            if (data.hasOwnProperty('excludePrefixes')) {
                obj['excludePrefixes'] = ApiClient.convertToType(data['excludePrefixes'], ['String']);
            }
            if (data.hasOwnProperty('includePrefixes')) {
                obj['includePrefixes'] = ApiClient.convertToType(data['includePrefixes'], ['String']);
            }
            if (data.hasOwnProperty('lastModifiedBefore')) {
                obj['lastModifiedBefore'] = ApiClient.convertToType(data['lastModifiedBefore'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedSince')) {
                obj['lastModifiedSince'] = ApiClient.convertToType(data['lastModifiedSince'], 'String');
            }
            if (data.hasOwnProperty('maxTimeElapsedSinceLastModification')) {
                obj['maxTimeElapsedSinceLastModification'] = ApiClient.convertToType(data['maxTimeElapsedSinceLastModification'], 'String');
            }
            if (data.hasOwnProperty('minTimeElapsedSinceLastModification')) {
                obj['minTimeElapsedSinceLastModification'] = ApiClient.convertToType(data['minTimeElapsedSinceLastModification'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ObjectConditions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ObjectConditions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['excludePrefixes'])) {
            throw new Error("Expected the field `excludePrefixes` to be an array in the JSON data but got " + data['excludePrefixes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includePrefixes'])) {
            throw new Error("Expected the field `includePrefixes` to be an array in the JSON data but got " + data['includePrefixes']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBefore'] && !(typeof data['lastModifiedBefore'] === 'string' || data['lastModifiedBefore'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBefore` to be a primitive type in the JSON string but got " + data['lastModifiedBefore']);
        }
        // ensure the json data is a string
        if (data['lastModifiedSince'] && !(typeof data['lastModifiedSince'] === 'string' || data['lastModifiedSince'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedSince` to be a primitive type in the JSON string but got " + data['lastModifiedSince']);
        }
        // ensure the json data is a string
        if (data['maxTimeElapsedSinceLastModification'] && !(typeof data['maxTimeElapsedSinceLastModification'] === 'string' || data['maxTimeElapsedSinceLastModification'] instanceof String)) {
            throw new Error("Expected the field `maxTimeElapsedSinceLastModification` to be a primitive type in the JSON string but got " + data['maxTimeElapsedSinceLastModification']);
        }
        // ensure the json data is a string
        if (data['minTimeElapsedSinceLastModification'] && !(typeof data['minTimeElapsedSinceLastModification'] === 'string' || data['minTimeElapsedSinceLastModification'] instanceof String)) {
            throw new Error("Expected the field `minTimeElapsedSinceLastModification` to be a primitive type in the JSON string but got " + data['minTimeElapsedSinceLastModification']);
        }

        return true;
    }


}



/**
 * If you specify `exclude_prefixes`, Storage Transfer Service uses the items in the `exclude_prefixes` array to determine which objects to exclude from a transfer. Objects must not start with one of the matching `exclude_prefixes` for inclusion in a transfer. The following are requirements of `exclude_prefixes`: * Each exclude-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each exclude-prefix must omit the leading slash. For example, to exclude the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the exclude-prefix as `logs/y=2015/requests.gz`. * None of the exclude-prefix values can be empty, if specified. * Each exclude-prefix must exclude a distinct portion of the object namespace. No exclude-prefix may be a prefix of another exclude-prefix. * If include_prefixes is specified, then each exclude-prefix must start with the value of a path explicitly included by `include_prefixes`. The max size of `exclude_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
 * @member {Array.<String>} excludePrefixes
 */
ObjectConditions.prototype['excludePrefixes'] = undefined;

/**
 * If you specify `include_prefixes`, Storage Transfer Service uses the items in the `include_prefixes` array to determine which objects to include in a transfer. Objects must start with one of the matching `include_prefixes` for inclusion in the transfer. If exclude_prefixes is specified, objects must not start with any of the `exclude_prefixes` specified for inclusion in the transfer. The following are requirements of `include_prefixes`: * Each include-prefix can contain any sequence of Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return or Line Feed characters. Wildcard matching and regular expression matching are not supported. * Each include-prefix must omit the leading slash. For example, to include the object `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the include-prefix as `logs/y=2015/requests.gz`. * None of the include-prefix values can be empty, if specified. * Each include-prefix must include a distinct portion of the object namespace. No include-prefix may be a prefix of another include-prefix. The max size of `include_prefixes` is 1000. For more information, see [Filtering objects from transfers](/storage-transfer/docs/filtering-objects-from-transfers).
 * @member {Array.<String>} includePrefixes
 */
ObjectConditions.prototype['includePrefixes'] = undefined;

/**
 * If specified, only objects with a \"last modification time\" before this timestamp and objects that don't have a \"last modification time\" are transferred.
 * @member {String} lastModifiedBefore
 */
ObjectConditions.prototype['lastModifiedBefore'] = undefined;

/**
 * If specified, only objects with a \"last modification time\" on or after this timestamp and objects that don't have a \"last modification time\" are transferred. The `last_modified_since` and `last_modified_before` fields can be used together for chunked data processing. For example, consider a script that processes each day's worth of data at a time. For that you'd set each of the fields as follows: * `last_modified_since` to the start of the day * `last_modified_before` to the end of the day
 * @member {String} lastModifiedSince
 */
ObjectConditions.prototype['lastModifiedSince'] = undefined;

/**
 * Ensures that objects are not transferred if a specific maximum time has elapsed since the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation`and the \"last modification time\" of the object is less than the value of max_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.
 * @member {String} maxTimeElapsedSinceLastModification
 */
ObjectConditions.prototype['maxTimeElapsedSinceLastModification'] = undefined;

/**
 * Ensures that objects are not transferred until a specific minimum time has elapsed after the \"last modification time\". When a TransferOperation begins, objects with a \"last modification time\" are transferred only if the elapsed time between the start_time of the `TransferOperation` and the \"last modification time\" of the object is equal to or greater than the value of min_time_elapsed_since_last_modification`. Objects that do not have a \"last modification time\" are also transferred.
 * @member {String} minTimeElapsedSinceLastModification
 */
ObjectConditions.prototype['minTimeElapsedSinceLastModification'] = undefined;






export default ObjectConditions;

