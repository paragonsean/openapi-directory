/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpData model module.
 * @module model/HttpData
 * @version v1
 */
class HttpData {
    /**
     * Constructs a new <code>HttpData</code>.
     * An HttpData resource specifies a list of objects on the web to be transferred over HTTP. The information of the objects to be transferred is contained in a file referenced by a URL. The first line in the file must be &#x60;\&quot;TsvHttpData-1.0\&quot;&#x60;, which specifies the format of the file. Subsequent lines specify the information of the list of objects, one object per list entry. Each entry has the following tab-delimited fields: * **HTTP URL** — The location of the object. * **Length** — The size of the object in bytes. * **MD5** — The base64-encoded MD5 hash of the object. For an example of a valid TSV file, see [Transferring data from URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When transferring data based on a URL list, keep the following in mind: * When an object located at &#x60;http(s)://hostname:port/&#x60; is transferred to a data sink, the name of the object at the data sink is &#x60;/&#x60;. * If the specified size of an object does not match the actual size of the object fetched, the object is not transferred. * If the specified MD5 does not match the MD5 computed from the transferred bytes, the object transfer fails. * Ensure that each URL you specify is publicly accessible. For example, in Cloud Storage you can [share an object publicly] (/storage/docs/cloud-console#_sharingdata) and get a link to it. * Storage Transfer Service obeys &#x60;robots.txt&#x60; rules and requires the source HTTP server to support &#x60;Range&#x60; requests and to return a &#x60;Content-Length&#x60; header in each response. * ObjectConditions have no effect when filtering objects to transfer.
     * @alias module:model/HttpData
     */
    constructor() { 
        
        HttpData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpData} obj Optional instance to populate.
     * @return {module:model/HttpData} The populated <code>HttpData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpData();

            if (data.hasOwnProperty('listUrl')) {
                obj['listUrl'] = ApiClient.convertToType(data['listUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['listUrl'] && !(typeof data['listUrl'] === 'string' || data['listUrl'] instanceof String)) {
            throw new Error("Expected the field `listUrl` to be a primitive type in the JSON string but got " + data['listUrl']);
        }

        return true;
    }


}



/**
 * Required. The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
 * @member {String} listUrl
 */
HttpData.prototype['listUrl'] = undefined;






export default HttpData;

