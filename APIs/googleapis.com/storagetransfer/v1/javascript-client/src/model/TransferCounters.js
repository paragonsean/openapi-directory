/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TransferCounters model module.
 * @module model/TransferCounters
 * @version v1
 */
class TransferCounters {
    /**
     * Constructs a new <code>TransferCounters</code>.
     * A collection of counters that report the progress of a transfer operation.
     * @alias module:model/TransferCounters
     */
    constructor() { 
        
        TransferCounters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferCounters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferCounters} obj Optional instance to populate.
     * @return {module:model/TransferCounters} The populated <code>TransferCounters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferCounters();

            if (data.hasOwnProperty('bytesCopiedToSink')) {
                obj['bytesCopiedToSink'] = ApiClient.convertToType(data['bytesCopiedToSink'], 'String');
            }
            if (data.hasOwnProperty('bytesDeletedFromSink')) {
                obj['bytesDeletedFromSink'] = ApiClient.convertToType(data['bytesDeletedFromSink'], 'String');
            }
            if (data.hasOwnProperty('bytesDeletedFromSource')) {
                obj['bytesDeletedFromSource'] = ApiClient.convertToType(data['bytesDeletedFromSource'], 'String');
            }
            if (data.hasOwnProperty('bytesFailedToDeleteFromSink')) {
                obj['bytesFailedToDeleteFromSink'] = ApiClient.convertToType(data['bytesFailedToDeleteFromSink'], 'String');
            }
            if (data.hasOwnProperty('bytesFoundFromSource')) {
                obj['bytesFoundFromSource'] = ApiClient.convertToType(data['bytesFoundFromSource'], 'String');
            }
            if (data.hasOwnProperty('bytesFoundOnlyFromSink')) {
                obj['bytesFoundOnlyFromSink'] = ApiClient.convertToType(data['bytesFoundOnlyFromSink'], 'String');
            }
            if (data.hasOwnProperty('bytesFromSourceFailed')) {
                obj['bytesFromSourceFailed'] = ApiClient.convertToType(data['bytesFromSourceFailed'], 'String');
            }
            if (data.hasOwnProperty('bytesFromSourceSkippedBySync')) {
                obj['bytesFromSourceSkippedBySync'] = ApiClient.convertToType(data['bytesFromSourceSkippedBySync'], 'String');
            }
            if (data.hasOwnProperty('directoriesFailedToListFromSource')) {
                obj['directoriesFailedToListFromSource'] = ApiClient.convertToType(data['directoriesFailedToListFromSource'], 'String');
            }
            if (data.hasOwnProperty('directoriesFoundFromSource')) {
                obj['directoriesFoundFromSource'] = ApiClient.convertToType(data['directoriesFoundFromSource'], 'String');
            }
            if (data.hasOwnProperty('directoriesSuccessfullyListedFromSource')) {
                obj['directoriesSuccessfullyListedFromSource'] = ApiClient.convertToType(data['directoriesSuccessfullyListedFromSource'], 'String');
            }
            if (data.hasOwnProperty('intermediateObjectsCleanedUp')) {
                obj['intermediateObjectsCleanedUp'] = ApiClient.convertToType(data['intermediateObjectsCleanedUp'], 'String');
            }
            if (data.hasOwnProperty('intermediateObjectsFailedCleanedUp')) {
                obj['intermediateObjectsFailedCleanedUp'] = ApiClient.convertToType(data['intermediateObjectsFailedCleanedUp'], 'String');
            }
            if (data.hasOwnProperty('objectsCopiedToSink')) {
                obj['objectsCopiedToSink'] = ApiClient.convertToType(data['objectsCopiedToSink'], 'String');
            }
            if (data.hasOwnProperty('objectsDeletedFromSink')) {
                obj['objectsDeletedFromSink'] = ApiClient.convertToType(data['objectsDeletedFromSink'], 'String');
            }
            if (data.hasOwnProperty('objectsDeletedFromSource')) {
                obj['objectsDeletedFromSource'] = ApiClient.convertToType(data['objectsDeletedFromSource'], 'String');
            }
            if (data.hasOwnProperty('objectsFailedToDeleteFromSink')) {
                obj['objectsFailedToDeleteFromSink'] = ApiClient.convertToType(data['objectsFailedToDeleteFromSink'], 'String');
            }
            if (data.hasOwnProperty('objectsFoundFromSource')) {
                obj['objectsFoundFromSource'] = ApiClient.convertToType(data['objectsFoundFromSource'], 'String');
            }
            if (data.hasOwnProperty('objectsFoundOnlyFromSink')) {
                obj['objectsFoundOnlyFromSink'] = ApiClient.convertToType(data['objectsFoundOnlyFromSink'], 'String');
            }
            if (data.hasOwnProperty('objectsFromSourceFailed')) {
                obj['objectsFromSourceFailed'] = ApiClient.convertToType(data['objectsFromSourceFailed'], 'String');
            }
            if (data.hasOwnProperty('objectsFromSourceSkippedBySync')) {
                obj['objectsFromSourceSkippedBySync'] = ApiClient.convertToType(data['objectsFromSourceSkippedBySync'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferCounters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferCounters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bytesCopiedToSink'] && !(typeof data['bytesCopiedToSink'] === 'string' || data['bytesCopiedToSink'] instanceof String)) {
            throw new Error("Expected the field `bytesCopiedToSink` to be a primitive type in the JSON string but got " + data['bytesCopiedToSink']);
        }
        // ensure the json data is a string
        if (data['bytesDeletedFromSink'] && !(typeof data['bytesDeletedFromSink'] === 'string' || data['bytesDeletedFromSink'] instanceof String)) {
            throw new Error("Expected the field `bytesDeletedFromSink` to be a primitive type in the JSON string but got " + data['bytesDeletedFromSink']);
        }
        // ensure the json data is a string
        if (data['bytesDeletedFromSource'] && !(typeof data['bytesDeletedFromSource'] === 'string' || data['bytesDeletedFromSource'] instanceof String)) {
            throw new Error("Expected the field `bytesDeletedFromSource` to be a primitive type in the JSON string but got " + data['bytesDeletedFromSource']);
        }
        // ensure the json data is a string
        if (data['bytesFailedToDeleteFromSink'] && !(typeof data['bytesFailedToDeleteFromSink'] === 'string' || data['bytesFailedToDeleteFromSink'] instanceof String)) {
            throw new Error("Expected the field `bytesFailedToDeleteFromSink` to be a primitive type in the JSON string but got " + data['bytesFailedToDeleteFromSink']);
        }
        // ensure the json data is a string
        if (data['bytesFoundFromSource'] && !(typeof data['bytesFoundFromSource'] === 'string' || data['bytesFoundFromSource'] instanceof String)) {
            throw new Error("Expected the field `bytesFoundFromSource` to be a primitive type in the JSON string but got " + data['bytesFoundFromSource']);
        }
        // ensure the json data is a string
        if (data['bytesFoundOnlyFromSink'] && !(typeof data['bytesFoundOnlyFromSink'] === 'string' || data['bytesFoundOnlyFromSink'] instanceof String)) {
            throw new Error("Expected the field `bytesFoundOnlyFromSink` to be a primitive type in the JSON string but got " + data['bytesFoundOnlyFromSink']);
        }
        // ensure the json data is a string
        if (data['bytesFromSourceFailed'] && !(typeof data['bytesFromSourceFailed'] === 'string' || data['bytesFromSourceFailed'] instanceof String)) {
            throw new Error("Expected the field `bytesFromSourceFailed` to be a primitive type in the JSON string but got " + data['bytesFromSourceFailed']);
        }
        // ensure the json data is a string
        if (data['bytesFromSourceSkippedBySync'] && !(typeof data['bytesFromSourceSkippedBySync'] === 'string' || data['bytesFromSourceSkippedBySync'] instanceof String)) {
            throw new Error("Expected the field `bytesFromSourceSkippedBySync` to be a primitive type in the JSON string but got " + data['bytesFromSourceSkippedBySync']);
        }
        // ensure the json data is a string
        if (data['directoriesFailedToListFromSource'] && !(typeof data['directoriesFailedToListFromSource'] === 'string' || data['directoriesFailedToListFromSource'] instanceof String)) {
            throw new Error("Expected the field `directoriesFailedToListFromSource` to be a primitive type in the JSON string but got " + data['directoriesFailedToListFromSource']);
        }
        // ensure the json data is a string
        if (data['directoriesFoundFromSource'] && !(typeof data['directoriesFoundFromSource'] === 'string' || data['directoriesFoundFromSource'] instanceof String)) {
            throw new Error("Expected the field `directoriesFoundFromSource` to be a primitive type in the JSON string but got " + data['directoriesFoundFromSource']);
        }
        // ensure the json data is a string
        if (data['directoriesSuccessfullyListedFromSource'] && !(typeof data['directoriesSuccessfullyListedFromSource'] === 'string' || data['directoriesSuccessfullyListedFromSource'] instanceof String)) {
            throw new Error("Expected the field `directoriesSuccessfullyListedFromSource` to be a primitive type in the JSON string but got " + data['directoriesSuccessfullyListedFromSource']);
        }
        // ensure the json data is a string
        if (data['intermediateObjectsCleanedUp'] && !(typeof data['intermediateObjectsCleanedUp'] === 'string' || data['intermediateObjectsCleanedUp'] instanceof String)) {
            throw new Error("Expected the field `intermediateObjectsCleanedUp` to be a primitive type in the JSON string but got " + data['intermediateObjectsCleanedUp']);
        }
        // ensure the json data is a string
        if (data['intermediateObjectsFailedCleanedUp'] && !(typeof data['intermediateObjectsFailedCleanedUp'] === 'string' || data['intermediateObjectsFailedCleanedUp'] instanceof String)) {
            throw new Error("Expected the field `intermediateObjectsFailedCleanedUp` to be a primitive type in the JSON string but got " + data['intermediateObjectsFailedCleanedUp']);
        }
        // ensure the json data is a string
        if (data['objectsCopiedToSink'] && !(typeof data['objectsCopiedToSink'] === 'string' || data['objectsCopiedToSink'] instanceof String)) {
            throw new Error("Expected the field `objectsCopiedToSink` to be a primitive type in the JSON string but got " + data['objectsCopiedToSink']);
        }
        // ensure the json data is a string
        if (data['objectsDeletedFromSink'] && !(typeof data['objectsDeletedFromSink'] === 'string' || data['objectsDeletedFromSink'] instanceof String)) {
            throw new Error("Expected the field `objectsDeletedFromSink` to be a primitive type in the JSON string but got " + data['objectsDeletedFromSink']);
        }
        // ensure the json data is a string
        if (data['objectsDeletedFromSource'] && !(typeof data['objectsDeletedFromSource'] === 'string' || data['objectsDeletedFromSource'] instanceof String)) {
            throw new Error("Expected the field `objectsDeletedFromSource` to be a primitive type in the JSON string but got " + data['objectsDeletedFromSource']);
        }
        // ensure the json data is a string
        if (data['objectsFailedToDeleteFromSink'] && !(typeof data['objectsFailedToDeleteFromSink'] === 'string' || data['objectsFailedToDeleteFromSink'] instanceof String)) {
            throw new Error("Expected the field `objectsFailedToDeleteFromSink` to be a primitive type in the JSON string but got " + data['objectsFailedToDeleteFromSink']);
        }
        // ensure the json data is a string
        if (data['objectsFoundFromSource'] && !(typeof data['objectsFoundFromSource'] === 'string' || data['objectsFoundFromSource'] instanceof String)) {
            throw new Error("Expected the field `objectsFoundFromSource` to be a primitive type in the JSON string but got " + data['objectsFoundFromSource']);
        }
        // ensure the json data is a string
        if (data['objectsFoundOnlyFromSink'] && !(typeof data['objectsFoundOnlyFromSink'] === 'string' || data['objectsFoundOnlyFromSink'] instanceof String)) {
            throw new Error("Expected the field `objectsFoundOnlyFromSink` to be a primitive type in the JSON string but got " + data['objectsFoundOnlyFromSink']);
        }
        // ensure the json data is a string
        if (data['objectsFromSourceFailed'] && !(typeof data['objectsFromSourceFailed'] === 'string' || data['objectsFromSourceFailed'] instanceof String)) {
            throw new Error("Expected the field `objectsFromSourceFailed` to be a primitive type in the JSON string but got " + data['objectsFromSourceFailed']);
        }
        // ensure the json data is a string
        if (data['objectsFromSourceSkippedBySync'] && !(typeof data['objectsFromSourceSkippedBySync'] === 'string' || data['objectsFromSourceSkippedBySync'] instanceof String)) {
            throw new Error("Expected the field `objectsFromSourceSkippedBySync` to be a primitive type in the JSON string but got " + data['objectsFromSourceSkippedBySync']);
        }

        return true;
    }


}



/**
 * Bytes that are copied to the data sink.
 * @member {String} bytesCopiedToSink
 */
TransferCounters.prototype['bytesCopiedToSink'] = undefined;

/**
 * Bytes that are deleted from the data sink.
 * @member {String} bytesDeletedFromSink
 */
TransferCounters.prototype['bytesDeletedFromSink'] = undefined;

/**
 * Bytes that are deleted from the data source.
 * @member {String} bytesDeletedFromSource
 */
TransferCounters.prototype['bytesDeletedFromSource'] = undefined;

/**
 * Bytes that failed to be deleted from the data sink.
 * @member {String} bytesFailedToDeleteFromSink
 */
TransferCounters.prototype['bytesFailedToDeleteFromSink'] = undefined;

/**
 * Bytes found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.
 * @member {String} bytesFoundFromSource
 */
TransferCounters.prototype['bytesFoundFromSource'] = undefined;

/**
 * Bytes found only in the data sink that are scheduled to be deleted.
 * @member {String} bytesFoundOnlyFromSink
 */
TransferCounters.prototype['bytesFoundOnlyFromSink'] = undefined;

/**
 * Bytes in the data source that failed to be transferred or that failed to be deleted after being transferred.
 * @member {String} bytesFromSourceFailed
 */
TransferCounters.prototype['bytesFromSourceFailed'] = undefined;

/**
 * Bytes in the data source that are not transferred because they already exist in the data sink.
 * @member {String} bytesFromSourceSkippedBySync
 */
TransferCounters.prototype['bytesFromSourceSkippedBySync'] = undefined;

/**
 * For transfers involving PosixFilesystem only. Number of listing failures for each directory found at the source. Potential failures when listing a directory include permission failure or block failure. If listing a directory fails, no files in the directory are transferred.
 * @member {String} directoriesFailedToListFromSource
 */
TransferCounters.prototype['directoriesFailedToListFromSource'] = undefined;

/**
 * For transfers involving PosixFilesystem only. Number of directories found while listing. For example, if the root directory of the transfer is `base/` and there are two other directories, `a/` and `b/` under this directory, the count after listing `base/`, `base/a/` and `base/b/` is 3.
 * @member {String} directoriesFoundFromSource
 */
TransferCounters.prototype['directoriesFoundFromSource'] = undefined;

/**
 * For transfers involving PosixFilesystem only. Number of successful listings for each directory found at the source.
 * @member {String} directoriesSuccessfullyListedFromSource
 */
TransferCounters.prototype['directoriesSuccessfullyListedFromSource'] = undefined;

/**
 * Number of successfully cleaned up intermediate objects.
 * @member {String} intermediateObjectsCleanedUp
 */
TransferCounters.prototype['intermediateObjectsCleanedUp'] = undefined;

/**
 * Number of intermediate objects failed cleaned up.
 * @member {String} intermediateObjectsFailedCleanedUp
 */
TransferCounters.prototype['intermediateObjectsFailedCleanedUp'] = undefined;

/**
 * Objects that are copied to the data sink.
 * @member {String} objectsCopiedToSink
 */
TransferCounters.prototype['objectsCopiedToSink'] = undefined;

/**
 * Objects that are deleted from the data sink.
 * @member {String} objectsDeletedFromSink
 */
TransferCounters.prototype['objectsDeletedFromSink'] = undefined;

/**
 * Objects that are deleted from the data source.
 * @member {String} objectsDeletedFromSource
 */
TransferCounters.prototype['objectsDeletedFromSource'] = undefined;

/**
 * Objects that failed to be deleted from the data sink.
 * @member {String} objectsFailedToDeleteFromSink
 */
TransferCounters.prototype['objectsFailedToDeleteFromSink'] = undefined;

/**
 * Objects found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.
 * @member {String} objectsFoundFromSource
 */
TransferCounters.prototype['objectsFoundFromSource'] = undefined;

/**
 * Objects found only in the data sink that are scheduled to be deleted.
 * @member {String} objectsFoundOnlyFromSink
 */
TransferCounters.prototype['objectsFoundOnlyFromSink'] = undefined;

/**
 * Objects in the data source that failed to be transferred or that failed to be deleted after being transferred.
 * @member {String} objectsFromSourceFailed
 */
TransferCounters.prototype['objectsFromSourceFailed'] = undefined;

/**
 * Objects in the data source that are not transferred because they already exist in the data sink.
 * @member {String} objectsFromSourceSkippedBySync
 */
TransferCounters.prototype['objectsFromSourceSkippedBySync'] = undefined;






export default TransferCounters;

