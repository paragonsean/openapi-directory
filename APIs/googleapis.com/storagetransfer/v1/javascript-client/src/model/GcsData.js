/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GcsData model module.
 * @module model/GcsData
 * @version v1
 */
class GcsData {
    /**
     * Constructs a new <code>GcsData</code>.
     * In a GcsData resource, an object&#39;s name is the Cloud Storage object&#39;s name and its \&quot;last modification time\&quot; refers to the object&#39;s &#x60;updated&#x60; property of Cloud Storage objects, which changes when the content or the metadata of the object is updated.
     * @alias module:model/GcsData
     */
    constructor() { 
        
        GcsData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GcsData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GcsData} obj Optional instance to populate.
     * @return {module:model/GcsData} The populated <code>GcsData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GcsData();

            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('managedFolderTransferEnabled')) {
                obj['managedFolderTransferEnabled'] = ApiClient.convertToType(data['managedFolderTransferEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GcsData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GcsData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * Required. Cloud Storage bucket name. Must meet [Bucket Name Requirements](/storage/docs/naming#requirements).
 * @member {String} bucketName
 */
GcsData.prototype['bucketName'] = undefined;

/**
 * Transfer managed folders is in public preview. This option is only applicable to the Cloud Storage source bucket. If set to true: - The source managed folder will be transferred to the destination bucket - The destination managed folder will always be overwritten, other OVERWRITE options will not be supported
 * @member {Boolean} managedFolderTransferEnabled
 */
GcsData.prototype['managedFolderTransferEnabled'] = undefined;

/**
 * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'. The root path value must meet [Object Name Requirements](/storage/docs/naming#objectnames).
 * @member {String} path
 */
GcsData.prototype['path'] = undefined;






export default GcsData;

