/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AwsAccessKey from './AwsAccessKey';

/**
 * The AwsS3Data model module.
 * @module model/AwsS3Data
 * @version v1
 */
class AwsS3Data {
    /**
     * Constructs a new <code>AwsS3Data</code>.
     * An AwsS3Data resource can be a data source, but not a data sink. In an AwsS3Data resource, an object&#39;s name is the S3 object&#39;s key name.
     * @alias module:model/AwsS3Data
     */
    constructor() { 
        
        AwsS3Data.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AwsS3Data</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AwsS3Data} obj Optional instance to populate.
     * @return {module:model/AwsS3Data} The populated <code>AwsS3Data</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AwsS3Data();

            if (data.hasOwnProperty('awsAccessKey')) {
                obj['awsAccessKey'] = AwsAccessKey.constructFromObject(data['awsAccessKey']);
            }
            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('cloudfrontDomain')) {
                obj['cloudfrontDomain'] = ApiClient.convertToType(data['cloudfrontDomain'], 'String');
            }
            if (data.hasOwnProperty('credentialsSecret')) {
                obj['credentialsSecret'] = ApiClient.convertToType(data['credentialsSecret'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('roleArn')) {
                obj['roleArn'] = ApiClient.convertToType(data['roleArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AwsS3Data</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AwsS3Data</code>.
     */
    static validateJSON(data) {
        // validate the optional field `awsAccessKey`
        if (data['awsAccessKey']) { // data not null
          AwsAccessKey.validateJSON(data['awsAccessKey']);
        }
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is a string
        if (data['cloudfrontDomain'] && !(typeof data['cloudfrontDomain'] === 'string' || data['cloudfrontDomain'] instanceof String)) {
            throw new Error("Expected the field `cloudfrontDomain` to be a primitive type in the JSON string but got " + data['cloudfrontDomain']);
        }
        // ensure the json data is a string
        if (data['credentialsSecret'] && !(typeof data['credentialsSecret'] === 'string' || data['credentialsSecret'] instanceof String)) {
            throw new Error("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got " + data['credentialsSecret']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['roleArn'] && !(typeof data['roleArn'] === 'string' || data['roleArn'] instanceof String)) {
            throw new Error("Expected the field `roleArn` to be a primitive type in the JSON string but got " + data['roleArn']);
        }

        return true;
    }


}



/**
 * @member {module:model/AwsAccessKey} awsAccessKey
 */
AwsS3Data.prototype['awsAccessKey'] = undefined;

/**
 * Required. S3 Bucket name (see [Creating a bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
 * @member {String} bucketName
 */
AwsS3Data.prototype['bucketName'] = undefined;

/**
 * Optional. Cloudfront domain name pointing to this bucket (as origin), to use when fetching. Format: `https://{id}.cloudfront.net` or any valid custom domain `https://...`
 * @member {String} cloudfrontDomain
 */
AwsS3Data.prototype['cloudfrontDomain'] = undefined;

/**
 * Optional. The Resource name of a secret in Secret Manager. AWS credentials must be stored in Secret Manager in JSON format: { \"access_key_id\": \"ACCESS_KEY_ID\", \"secret_access_key\": \"SECRET_ACCESS_KEY\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Amazon S3] (https://cloud.google.com/storage-transfer/docs/source-amazon-s3#secret_manager) for more information. If `credentials_secret` is specified, do not specify role_arn or aws_access_key. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`
 * @member {String} credentialsSecret
 */
AwsS3Data.prototype['credentialsSecret'] = undefined;

/**
 * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
 * @member {String} path
 */
AwsS3Data.prototype['path'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the role to support temporary credentials via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a `AssumeRoleWithWebIdentity` call for the provided role using the GoogleServiceAccount for this project.
 * @member {String} roleArn
 */
AwsS3Data.prototype['roleArn'] = undefined;






export default AwsS3Data;

