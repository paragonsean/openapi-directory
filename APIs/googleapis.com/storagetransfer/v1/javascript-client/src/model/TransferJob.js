/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventStream from './EventStream';
import LoggingConfig from './LoggingConfig';
import NotificationConfig from './NotificationConfig';
import Schedule from './Schedule';
import TransferSpec from './TransferSpec';

/**
 * The TransferJob model module.
 * @module model/TransferJob
 * @version v1
 */
class TransferJob {
    /**
     * Constructs a new <code>TransferJob</code>.
     * This resource represents the configuration of a transfer job that runs periodically.
     * @alias module:model/TransferJob
     */
    constructor() { 
        
        TransferJob.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferJob</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferJob} obj Optional instance to populate.
     * @return {module:model/TransferJob} The populated <code>TransferJob</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferJob();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('deletionTime')) {
                obj['deletionTime'] = ApiClient.convertToType(data['deletionTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventStream')) {
                obj['eventStream'] = EventStream.constructFromObject(data['eventStream']);
            }
            if (data.hasOwnProperty('lastModificationTime')) {
                obj['lastModificationTime'] = ApiClient.convertToType(data['lastModificationTime'], 'String');
            }
            if (data.hasOwnProperty('latestOperationName')) {
                obj['latestOperationName'] = ApiClient.convertToType(data['latestOperationName'], 'String');
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = LoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationConfig')) {
                obj['notificationConfig'] = NotificationConfig.constructFromObject(data['notificationConfig']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = Schedule.constructFromObject(data['schedule']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transferSpec')) {
                obj['transferSpec'] = TransferSpec.constructFromObject(data['transferSpec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferJob</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferJob</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['deletionTime'] && !(typeof data['deletionTime'] === 'string' || data['deletionTime'] instanceof String)) {
            throw new Error("Expected the field `deletionTime` to be a primitive type in the JSON string but got " + data['deletionTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `eventStream`
        if (data['eventStream']) { // data not null
          EventStream.validateJSON(data['eventStream']);
        }
        // ensure the json data is a string
        if (data['lastModificationTime'] && !(typeof data['lastModificationTime'] === 'string' || data['lastModificationTime'] instanceof String)) {
            throw new Error("Expected the field `lastModificationTime` to be a primitive type in the JSON string but got " + data['lastModificationTime']);
        }
        // ensure the json data is a string
        if (data['latestOperationName'] && !(typeof data['latestOperationName'] === 'string' || data['latestOperationName'] instanceof String)) {
            throw new Error("Expected the field `latestOperationName` to be a primitive type in the JSON string but got " + data['latestOperationName']);
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          LoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notificationConfig`
        if (data['notificationConfig']) { // data not null
          NotificationConfig.validateJSON(data['notificationConfig']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `schedule`
        if (data['schedule']) { // data not null
          Schedule.validateJSON(data['schedule']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `transferSpec`
        if (data['transferSpec']) { // data not null
          TransferSpec.validateJSON(data['transferSpec']);
        }

        return true;
    }


}



/**
 * Output only. The time that the transfer job was created.
 * @member {String} creationTime
 */
TransferJob.prototype['creationTime'] = undefined;

/**
 * Output only. The time that the transfer job was deleted.
 * @member {String} deletionTime
 */
TransferJob.prototype['deletionTime'] = undefined;

/**
 * A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.
 * @member {String} description
 */
TransferJob.prototype['description'] = undefined;

/**
 * @member {module:model/EventStream} eventStream
 */
TransferJob.prototype['eventStream'] = undefined;

/**
 * Output only. The time that the transfer job was last modified.
 * @member {String} lastModificationTime
 */
TransferJob.prototype['lastModificationTime'] = undefined;

/**
 * The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.
 * @member {String} latestOperationName
 */
TransferJob.prototype['latestOperationName'] = undefined;

/**
 * @member {module:model/LoggingConfig} loggingConfig
 */
TransferJob.prototype['loggingConfig'] = undefined;

/**
 * A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with `\"transferJobs/\"` prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with `transferJobs/OPI` specifically. For all other transfer types, this name must not start with `transferJobs/OPI`. Non-PosixFilesystem example: `\"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` PosixFilesystem example: `\"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.
 * @member {String} name
 */
TransferJob.prototype['name'] = undefined;

/**
 * @member {module:model/NotificationConfig} notificationConfig
 */
TransferJob.prototype['notificationConfig'] = undefined;

/**
 * The ID of the Google Cloud project that owns the job.
 * @member {String} projectId
 */
TransferJob.prototype['projectId'] = undefined;

/**
 * @member {module:model/Schedule} schedule
 */
TransferJob.prototype['schedule'] = undefined;

/**
 * Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
 * @member {module:model/TransferJob.StatusEnum} status
 */
TransferJob.prototype['status'] = undefined;

/**
 * @member {module:model/TransferSpec} transferSpec
 */
TransferJob.prototype['transferSpec'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TransferJob['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "ENABLED"
     * @const
     */
    "ENABLED": "ENABLED",

    /**
     * value: "DISABLED"
     * @const
     */
    "DISABLED": "DISABLED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default TransferJob;

