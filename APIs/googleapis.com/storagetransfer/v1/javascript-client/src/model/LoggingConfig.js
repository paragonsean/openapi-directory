/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoggingConfig model module.
 * @module model/LoggingConfig
 * @version v1
 */
class LoggingConfig {
    /**
     * Constructs a new <code>LoggingConfig</code>.
     * Specifies the logging behavior for transfer operations. For cloud-to-cloud transfers, logs are sent to Cloud Logging. See [Read transfer logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for details. For transfers to or from a POSIX file system, logs are stored in the Cloud Storage bucket that is the source or sink of the transfer. See [Managing Transfer for on-premises jobs] (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs) for details.
     * @alias module:model/LoggingConfig
     */
    constructor() { 
        
        LoggingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoggingConfig} obj Optional instance to populate.
     * @return {module:model/LoggingConfig} The populated <code>LoggingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingConfig();

            if (data.hasOwnProperty('enableOnpremGcsTransferLogs')) {
                obj['enableOnpremGcsTransferLogs'] = ApiClient.convertToType(data['enableOnpremGcsTransferLogs'], 'Boolean');
            }
            if (data.hasOwnProperty('logActionStates')) {
                obj['logActionStates'] = ApiClient.convertToType(data['logActionStates'], ['String']);
            }
            if (data.hasOwnProperty('logActions')) {
                obj['logActions'] = ApiClient.convertToType(data['logActions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoggingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoggingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['logActionStates'])) {
            throw new Error("Expected the field `logActionStates` to be an array in the JSON data but got " + data['logActionStates']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['logActions'])) {
            throw new Error("Expected the field `logActions` to be an array in the JSON data but got " + data['logActions']);
        }

        return true;
    }


}



/**
 * For transfers with a PosixFilesystem source, this option enables the Cloud Storage transfer logs for this transfer.
 * @member {Boolean} enableOnpremGcsTransferLogs
 */
LoggingConfig.prototype['enableOnpremGcsTransferLogs'] = undefined;

/**
 * States in which `log_actions` are logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.
 * @member {Array.<module:model/LoggingConfig.LogActionStatesEnum>} logActionStates
 */
LoggingConfig.prototype['logActionStates'] = undefined;

/**
 * Specifies the actions to be logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.
 * @member {Array.<module:model/LoggingConfig.LogActionsEnum>} logActions
 */
LoggingConfig.prototype['logActions'] = undefined;





/**
 * Allowed values for the <code>logActionStates</code> property.
 * @enum {String}
 * @readonly
 */
LoggingConfig['LogActionStatesEnum'] = {

    /**
     * value: "LOGGABLE_ACTION_STATE_UNSPECIFIED"
     * @const
     */
    "LOGGABLE_ACTION_STATE_UNSPECIFIED": "LOGGABLE_ACTION_STATE_UNSPECIFIED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};


/**
 * Allowed values for the <code>logActions</code> property.
 * @enum {String}
 * @readonly
 */
LoggingConfig['LogActionsEnum'] = {

    /**
     * value: "LOGGABLE_ACTION_UNSPECIFIED"
     * @const
     */
    "LOGGABLE_ACTION_UNSPECIFIED": "LOGGABLE_ACTION_UNSPECIFIED",

    /**
     * value: "FIND"
     * @const
     */
    "FIND": "FIND",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "COPY"
     * @const
     */
    "COPY": "COPY"
};



export default LoggingConfig;

