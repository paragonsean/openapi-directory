/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureCredentials from './AzureCredentials';

/**
 * The AzureBlobStorageData model module.
 * @module model/AzureBlobStorageData
 * @version v1
 */
class AzureBlobStorageData {
    /**
     * Constructs a new <code>AzureBlobStorageData</code>.
     * An AzureBlobStorageData resource can be a data source, but not a data sink. An AzureBlobStorageData resource represents one Azure container. The storage account determines the [Azure endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints). In an AzureBlobStorageData resource, a blobs&#39;s name is the [Azure Blob Storage blob&#39;s key name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
     * @alias module:model/AzureBlobStorageData
     */
    constructor() { 
        
        AzureBlobStorageData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AzureBlobStorageData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureBlobStorageData} obj Optional instance to populate.
     * @return {module:model/AzureBlobStorageData} The populated <code>AzureBlobStorageData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureBlobStorageData();

            if (data.hasOwnProperty('azureCredentials')) {
                obj['azureCredentials'] = AzureCredentials.constructFromObject(data['azureCredentials']);
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('credentialsSecret')) {
                obj['credentialsSecret'] = ApiClient.convertToType(data['credentialsSecret'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('storageAccount')) {
                obj['storageAccount'] = ApiClient.convertToType(data['storageAccount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureBlobStorageData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureBlobStorageData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `azureCredentials`
        if (data['azureCredentials']) { // data not null
          AzureCredentials.validateJSON(data['azureCredentials']);
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['credentialsSecret'] && !(typeof data['credentialsSecret'] === 'string' || data['credentialsSecret'] instanceof String)) {
            throw new Error("Expected the field `credentialsSecret` to be a primitive type in the JSON string but got " + data['credentialsSecret']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['storageAccount'] && !(typeof data['storageAccount'] === 'string' || data['storageAccount'] instanceof String)) {
            throw new Error("Expected the field `storageAccount` to be a primitive type in the JSON string but got " + data['storageAccount']);
        }

        return true;
    }


}



/**
 * @member {module:model/AzureCredentials} azureCredentials
 */
AzureBlobStorageData.prototype['azureCredentials'] = undefined;

/**
 * Required. The container to transfer from the Azure Storage account.
 * @member {String} container
 */
AzureBlobStorageData.prototype['container'] = undefined;

/**
 * Optional. The Resource name of a secret in Secret Manager. The Azure SAS token must be stored in Secret Manager in JSON format: { \"sas_token\" : \"SAS_TOKEN\" } GoogleServiceAccount must be granted `roles/secretmanager.secretAccessor` for the resource. See [Configure access to a source: Microsoft Azure Blob Storage] (https://cloud.google.com/storage-transfer/docs/source-microsoft-azure#secret_manager) for more information. If `credentials_secret` is specified, do not specify azure_credentials. This feature is in [preview](https://cloud.google.com/terms/service-terms#1). Format: `projects/{project_number}/secrets/{secret_name}`
 * @member {String} credentialsSecret
 */
AzureBlobStorageData.prototype['credentialsSecret'] = undefined;

/**
 * Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
 * @member {String} path
 */
AzureBlobStorageData.prototype['path'] = undefined;

/**
 * Required. The name of the Azure Storage account.
 * @member {String} storageAccount
 */
AzureBlobStorageData.prototype['storageAccount'] = undefined;






export default AzureBlobStorageData;

