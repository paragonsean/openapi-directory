/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3CompatibleMetadata from './S3CompatibleMetadata';

/**
 * The AwsS3CompatibleData model module.
 * @module model/AwsS3CompatibleData
 * @version v1
 */
class AwsS3CompatibleData {
    /**
     * Constructs a new <code>AwsS3CompatibleData</code>.
     * An AwsS3CompatibleData resource.
     * @alias module:model/AwsS3CompatibleData
     */
    constructor() { 
        
        AwsS3CompatibleData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AwsS3CompatibleData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AwsS3CompatibleData} obj Optional instance to populate.
     * @return {module:model/AwsS3CompatibleData} The populated <code>AwsS3CompatibleData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AwsS3CompatibleData();

            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('s3Metadata')) {
                obj['s3Metadata'] = S3CompatibleMetadata.constructFromObject(data['s3Metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AwsS3CompatibleData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AwsS3CompatibleData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // validate the optional field `s3Metadata`
        if (data['s3Metadata']) { // data not null
          S3CompatibleMetadata.validateJSON(data['s3Metadata']);
        }

        return true;
    }


}



/**
 * Required. Specifies the name of the bucket.
 * @member {String} bucketName
 */
AwsS3CompatibleData.prototype['bucketName'] = undefined;

/**
 * Required. Specifies the endpoint of the storage service.
 * @member {String} endpoint
 */
AwsS3CompatibleData.prototype['endpoint'] = undefined;

/**
 * Specifies the root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
 * @member {String} path
 */
AwsS3CompatibleData.prototype['path'] = undefined;

/**
 * Specifies the region to sign requests with. This can be left blank if requests should be signed with an empty region.
 * @member {String} region
 */
AwsS3CompatibleData.prototype['region'] = undefined;

/**
 * @member {module:model/S3CompatibleMetadata} s3Metadata
 */
AwsS3CompatibleData.prototype['s3Metadata'] = undefined;






export default AwsS3CompatibleData;

