/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransferJob from './TransferJob';

/**
 * The UpdateTransferJobRequest model module.
 * @module model/UpdateTransferJobRequest
 * @version v1
 */
class UpdateTransferJobRequest {
    /**
     * Constructs a new <code>UpdateTransferJobRequest</code>.
     * Request passed to UpdateTransferJob.
     * @alias module:model/UpdateTransferJobRequest
     */
    constructor() { 
        
        UpdateTransferJobRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateTransferJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTransferJobRequest} obj Optional instance to populate.
     * @return {module:model/UpdateTransferJobRequest} The populated <code>UpdateTransferJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTransferJobRequest();

            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('transferJob')) {
                obj['transferJob'] = TransferJob.constructFromObject(data['transferJob']);
            }
            if (data.hasOwnProperty('updateTransferJobFieldMask')) {
                obj['updateTransferJobFieldMask'] = ApiClient.convertToType(data['updateTransferJobFieldMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateTransferJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateTransferJobRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // validate the optional field `transferJob`
        if (data['transferJob']) { // data not null
          TransferJob.validateJSON(data['transferJob']);
        }
        // ensure the json data is a string
        if (data['updateTransferJobFieldMask'] && !(typeof data['updateTransferJobFieldMask'] === 'string' || data['updateTransferJobFieldMask'] instanceof String)) {
            throw new Error("Expected the field `updateTransferJobFieldMask` to be a primitive type in the JSON string but got " + data['updateTransferJobFieldMask']);
        }

        return true;
    }


}



/**
 * Required. The ID of the Google Cloud project that owns the job.
 * @member {String} projectId
 */
UpdateTransferJobRequest.prototype['projectId'] = undefined;

/**
 * @member {module:model/TransferJob} transferJob
 */
UpdateTransferJobRequest.prototype['transferJob'] = undefined;

/**
 * The field mask of the fields in `transferJob` that are to be updated in this request. Fields in `transferJob` that can be updated are: description, transfer_spec, notification_config, logging_config, and status. To update the `transfer_spec` of the job, a complete transfer specification must be provided. An incomplete specification missing any required fields is rejected with the error INVALID_ARGUMENT.
 * @member {String} updateTransferJobFieldMask
 */
UpdateTransferJobRequest.prototype['updateTransferJobFieldMask'] = undefined;






export default UpdateTransferJobRequest;

