/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorLogEntry from './ErrorLogEntry';

/**
 * The ErrorSummary model module.
 * @module model/ErrorSummary
 * @version v1
 */
class ErrorSummary {
    /**
     * Constructs a new <code>ErrorSummary</code>.
     * A summary of errors by error code, plus a count and sample error log entries.
     * @alias module:model/ErrorSummary
     */
    constructor() { 
        
        ErrorSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorSummary} obj Optional instance to populate.
     * @return {module:model/ErrorSummary} The populated <code>ErrorSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorSummary();

            if (data.hasOwnProperty('errorCode')) {
                obj['errorCode'] = ApiClient.convertToType(data['errorCode'], 'String');
            }
            if (data.hasOwnProperty('errorCount')) {
                obj['errorCount'] = ApiClient.convertToType(data['errorCount'], 'String');
            }
            if (data.hasOwnProperty('errorLogEntries')) {
                obj['errorLogEntries'] = ApiClient.convertToType(data['errorLogEntries'], [ErrorLogEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['errorCode'] && !(typeof data['errorCode'] === 'string' || data['errorCode'] instanceof String)) {
            throw new Error("Expected the field `errorCode` to be a primitive type in the JSON string but got " + data['errorCode']);
        }
        // ensure the json data is a string
        if (data['errorCount'] && !(typeof data['errorCount'] === 'string' || data['errorCount'] instanceof String)) {
            throw new Error("Expected the field `errorCount` to be a primitive type in the JSON string but got " + data['errorCount']);
        }
        if (data['errorLogEntries']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorLogEntries'])) {
                throw new Error("Expected the field `errorLogEntries` to be an array in the JSON data but got " + data['errorLogEntries']);
            }
            // validate the optional field `errorLogEntries` (array)
            for (const item of data['errorLogEntries']) {
                ErrorLogEntry.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Required.
 * @member {module:model/ErrorSummary.ErrorCodeEnum} errorCode
 */
ErrorSummary.prototype['errorCode'] = undefined;

/**
 * Required. Count of this type of error.
 * @member {String} errorCount
 */
ErrorSummary.prototype['errorCount'] = undefined;

/**
 * Error samples. At most 5 error log entries are recorded for a given error code for a single transfer operation.
 * @member {Array.<module:model/ErrorLogEntry>} errorLogEntries
 */
ErrorSummary.prototype['errorLogEntries'] = undefined;





/**
 * Allowed values for the <code>errorCode</code> property.
 * @enum {String}
 * @readonly
 */
ErrorSummary['ErrorCodeEnum'] = {

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "INVALID_ARGUMENT"
     * @const
     */
    "INVALID_ARGUMENT": "INVALID_ARGUMENT",

    /**
     * value: "DEADLINE_EXCEEDED"
     * @const
     */
    "DEADLINE_EXCEEDED": "DEADLINE_EXCEEDED",

    /**
     * value: "NOT_FOUND"
     * @const
     */
    "NOT_FOUND": "NOT_FOUND",

    /**
     * value: "ALREADY_EXISTS"
     * @const
     */
    "ALREADY_EXISTS": "ALREADY_EXISTS",

    /**
     * value: "PERMISSION_DENIED"
     * @const
     */
    "PERMISSION_DENIED": "PERMISSION_DENIED",

    /**
     * value: "UNAUTHENTICATED"
     * @const
     */
    "UNAUTHENTICATED": "UNAUTHENTICATED",

    /**
     * value: "RESOURCE_EXHAUSTED"
     * @const
     */
    "RESOURCE_EXHAUSTED": "RESOURCE_EXHAUSTED",

    /**
     * value: "FAILED_PRECONDITION"
     * @const
     */
    "FAILED_PRECONDITION": "FAILED_PRECONDITION",

    /**
     * value: "ABORTED"
     * @const
     */
    "ABORTED": "ABORTED",

    /**
     * value: "OUT_OF_RANGE"
     * @const
     */
    "OUT_OF_RANGE": "OUT_OF_RANGE",

    /**
     * value: "UNIMPLEMENTED"
     * @const
     */
    "UNIMPLEMENTED": "UNIMPLEMENTED",

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL",

    /**
     * value: "UNAVAILABLE"
     * @const
     */
    "UNAVAILABLE": "UNAVAILABLE",

    /**
     * value: "DATA_LOSS"
     * @const
     */
    "DATA_LOSS": "DATA_LOSS"
};



export default ErrorSummary;

