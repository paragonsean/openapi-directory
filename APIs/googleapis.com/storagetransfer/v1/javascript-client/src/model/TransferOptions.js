/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetadataOptions from './MetadataOptions';

/**
 * The TransferOptions model module.
 * @module model/TransferOptions
 * @version v1
 */
class TransferOptions {
    /**
     * Constructs a new <code>TransferOptions</code>.
     * TransferOptions define the actions to be performed on objects in a transfer.
     * @alias module:model/TransferOptions
     */
    constructor() { 
        
        TransferOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferOptions} obj Optional instance to populate.
     * @return {module:model/TransferOptions} The populated <code>TransferOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferOptions();

            if (data.hasOwnProperty('deleteObjectsFromSourceAfterTransfer')) {
                obj['deleteObjectsFromSourceAfterTransfer'] = ApiClient.convertToType(data['deleteObjectsFromSourceAfterTransfer'], 'Boolean');
            }
            if (data.hasOwnProperty('deleteObjectsUniqueInSink')) {
                obj['deleteObjectsUniqueInSink'] = ApiClient.convertToType(data['deleteObjectsUniqueInSink'], 'Boolean');
            }
            if (data.hasOwnProperty('metadataOptions')) {
                obj['metadataOptions'] = MetadataOptions.constructFromObject(data['metadataOptions']);
            }
            if (data.hasOwnProperty('overwriteObjectsAlreadyExistingInSink')) {
                obj['overwriteObjectsAlreadyExistingInSink'] = ApiClient.convertToType(data['overwriteObjectsAlreadyExistingInSink'], 'Boolean');
            }
            if (data.hasOwnProperty('overwriteWhen')) {
                obj['overwriteWhen'] = ApiClient.convertToType(data['overwriteWhen'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `metadataOptions`
        if (data['metadataOptions']) { // data not null
          MetadataOptions.validateJSON(data['metadataOptions']);
        }
        // ensure the json data is a string
        if (data['overwriteWhen'] && !(typeof data['overwriteWhen'] === 'string' || data['overwriteWhen'] instanceof String)) {
            throw new Error("Expected the field `overwriteWhen` to be a primitive type in the JSON string but got " + data['overwriteWhen']);
        }

        return true;
    }


}



/**
 * Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.
 * @member {Boolean} deleteObjectsFromSourceAfterTransfer
 */
TransferOptions.prototype['deleteObjectsFromSourceAfterTransfer'] = undefined;

/**
 * Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.
 * @member {Boolean} deleteObjectsUniqueInSink
 */
TransferOptions.prototype['deleteObjectsUniqueInSink'] = undefined;

/**
 * @member {module:model/MetadataOptions} metadataOptions
 */
TransferOptions.prototype['metadataOptions'] = undefined;

/**
 * When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.
 * @member {Boolean} overwriteObjectsAlreadyExistingInSink
 */
TransferOptions.prototype['overwriteObjectsAlreadyExistingInSink'] = undefined;

/**
 * When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.
 * @member {module:model/TransferOptions.OverwriteWhenEnum} overwriteWhen
 */
TransferOptions.prototype['overwriteWhen'] = undefined;





/**
 * Allowed values for the <code>overwriteWhen</code> property.
 * @enum {String}
 * @readonly
 */
TransferOptions['OverwriteWhenEnum'] = {

    /**
     * value: "OVERWRITE_WHEN_UNSPECIFIED"
     * @const
     */
    "OVERWRITE_WHEN_UNSPECIFIED": "OVERWRITE_WHEN_UNSPECIFIED",

    /**
     * value: "DIFFERENT"
     * @const
     */
    "DIFFERENT": "DIFFERENT",

    /**
     * value: "NEVER"
     * @const
     */
    "NEVER": "NEVER",

    /**
     * value: "ALWAYS"
     * @const
     */
    "ALWAYS": "ALWAYS"
};



export default TransferOptions;

