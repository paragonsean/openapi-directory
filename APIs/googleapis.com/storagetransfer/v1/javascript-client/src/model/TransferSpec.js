/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AwsS3CompatibleData from './AwsS3CompatibleData';
import AwsS3Data from './AwsS3Data';
import AzureBlobStorageData from './AzureBlobStorageData';
import GcsData from './GcsData';
import HdfsData from './HdfsData';
import HttpData from './HttpData';
import ObjectConditions from './ObjectConditions';
import PosixFilesystem from './PosixFilesystem';
import TransferManifest from './TransferManifest';
import TransferOptions from './TransferOptions';

/**
 * The TransferSpec model module.
 * @module model/TransferSpec
 * @version v1
 */
class TransferSpec {
    /**
     * Constructs a new <code>TransferSpec</code>.
     * Configuration for running a transfer.
     * @alias module:model/TransferSpec
     */
    constructor() { 
        
        TransferSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferSpec} obj Optional instance to populate.
     * @return {module:model/TransferSpec} The populated <code>TransferSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferSpec();

            if (data.hasOwnProperty('awsS3CompatibleDataSource')) {
                obj['awsS3CompatibleDataSource'] = AwsS3CompatibleData.constructFromObject(data['awsS3CompatibleDataSource']);
            }
            if (data.hasOwnProperty('awsS3DataSource')) {
                obj['awsS3DataSource'] = AwsS3Data.constructFromObject(data['awsS3DataSource']);
            }
            if (data.hasOwnProperty('azureBlobStorageDataSource')) {
                obj['azureBlobStorageDataSource'] = AzureBlobStorageData.constructFromObject(data['azureBlobStorageDataSource']);
            }
            if (data.hasOwnProperty('gcsDataSink')) {
                obj['gcsDataSink'] = GcsData.constructFromObject(data['gcsDataSink']);
            }
            if (data.hasOwnProperty('gcsDataSource')) {
                obj['gcsDataSource'] = GcsData.constructFromObject(data['gcsDataSource']);
            }
            if (data.hasOwnProperty('gcsIntermediateDataLocation')) {
                obj['gcsIntermediateDataLocation'] = GcsData.constructFromObject(data['gcsIntermediateDataLocation']);
            }
            if (data.hasOwnProperty('hdfsDataSource')) {
                obj['hdfsDataSource'] = HdfsData.constructFromObject(data['hdfsDataSource']);
            }
            if (data.hasOwnProperty('httpDataSource')) {
                obj['httpDataSource'] = HttpData.constructFromObject(data['httpDataSource']);
            }
            if (data.hasOwnProperty('objectConditions')) {
                obj['objectConditions'] = ObjectConditions.constructFromObject(data['objectConditions']);
            }
            if (data.hasOwnProperty('posixDataSink')) {
                obj['posixDataSink'] = PosixFilesystem.constructFromObject(data['posixDataSink']);
            }
            if (data.hasOwnProperty('posixDataSource')) {
                obj['posixDataSource'] = PosixFilesystem.constructFromObject(data['posixDataSource']);
            }
            if (data.hasOwnProperty('sinkAgentPoolName')) {
                obj['sinkAgentPoolName'] = ApiClient.convertToType(data['sinkAgentPoolName'], 'String');
            }
            if (data.hasOwnProperty('sourceAgentPoolName')) {
                obj['sourceAgentPoolName'] = ApiClient.convertToType(data['sourceAgentPoolName'], 'String');
            }
            if (data.hasOwnProperty('transferManifest')) {
                obj['transferManifest'] = TransferManifest.constructFromObject(data['transferManifest']);
            }
            if (data.hasOwnProperty('transferOptions')) {
                obj['transferOptions'] = TransferOptions.constructFromObject(data['transferOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `awsS3CompatibleDataSource`
        if (data['awsS3CompatibleDataSource']) { // data not null
          AwsS3CompatibleData.validateJSON(data['awsS3CompatibleDataSource']);
        }
        // validate the optional field `awsS3DataSource`
        if (data['awsS3DataSource']) { // data not null
          AwsS3Data.validateJSON(data['awsS3DataSource']);
        }
        // validate the optional field `azureBlobStorageDataSource`
        if (data['azureBlobStorageDataSource']) { // data not null
          AzureBlobStorageData.validateJSON(data['azureBlobStorageDataSource']);
        }
        // validate the optional field `gcsDataSink`
        if (data['gcsDataSink']) { // data not null
          GcsData.validateJSON(data['gcsDataSink']);
        }
        // validate the optional field `gcsDataSource`
        if (data['gcsDataSource']) { // data not null
          GcsData.validateJSON(data['gcsDataSource']);
        }
        // validate the optional field `gcsIntermediateDataLocation`
        if (data['gcsIntermediateDataLocation']) { // data not null
          GcsData.validateJSON(data['gcsIntermediateDataLocation']);
        }
        // validate the optional field `hdfsDataSource`
        if (data['hdfsDataSource']) { // data not null
          HdfsData.validateJSON(data['hdfsDataSource']);
        }
        // validate the optional field `httpDataSource`
        if (data['httpDataSource']) { // data not null
          HttpData.validateJSON(data['httpDataSource']);
        }
        // validate the optional field `objectConditions`
        if (data['objectConditions']) { // data not null
          ObjectConditions.validateJSON(data['objectConditions']);
        }
        // validate the optional field `posixDataSink`
        if (data['posixDataSink']) { // data not null
          PosixFilesystem.validateJSON(data['posixDataSink']);
        }
        // validate the optional field `posixDataSource`
        if (data['posixDataSource']) { // data not null
          PosixFilesystem.validateJSON(data['posixDataSource']);
        }
        // ensure the json data is a string
        if (data['sinkAgentPoolName'] && !(typeof data['sinkAgentPoolName'] === 'string' || data['sinkAgentPoolName'] instanceof String)) {
            throw new Error("Expected the field `sinkAgentPoolName` to be a primitive type in the JSON string but got " + data['sinkAgentPoolName']);
        }
        // ensure the json data is a string
        if (data['sourceAgentPoolName'] && !(typeof data['sourceAgentPoolName'] === 'string' || data['sourceAgentPoolName'] instanceof String)) {
            throw new Error("Expected the field `sourceAgentPoolName` to be a primitive type in the JSON string but got " + data['sourceAgentPoolName']);
        }
        // validate the optional field `transferManifest`
        if (data['transferManifest']) { // data not null
          TransferManifest.validateJSON(data['transferManifest']);
        }
        // validate the optional field `transferOptions`
        if (data['transferOptions']) { // data not null
          TransferOptions.validateJSON(data['transferOptions']);
        }

        return true;
    }


}



/**
 * @member {module:model/AwsS3CompatibleData} awsS3CompatibleDataSource
 */
TransferSpec.prototype['awsS3CompatibleDataSource'] = undefined;

/**
 * @member {module:model/AwsS3Data} awsS3DataSource
 */
TransferSpec.prototype['awsS3DataSource'] = undefined;

/**
 * @member {module:model/AzureBlobStorageData} azureBlobStorageDataSource
 */
TransferSpec.prototype['azureBlobStorageDataSource'] = undefined;

/**
 * @member {module:model/GcsData} gcsDataSink
 */
TransferSpec.prototype['gcsDataSink'] = undefined;

/**
 * @member {module:model/GcsData} gcsDataSource
 */
TransferSpec.prototype['gcsDataSource'] = undefined;

/**
 * @member {module:model/GcsData} gcsIntermediateDataLocation
 */
TransferSpec.prototype['gcsIntermediateDataLocation'] = undefined;

/**
 * @member {module:model/HdfsData} hdfsDataSource
 */
TransferSpec.prototype['hdfsDataSource'] = undefined;

/**
 * @member {module:model/HttpData} httpDataSource
 */
TransferSpec.prototype['httpDataSource'] = undefined;

/**
 * @member {module:model/ObjectConditions} objectConditions
 */
TransferSpec.prototype['objectConditions'] = undefined;

/**
 * @member {module:model/PosixFilesystem} posixDataSink
 */
TransferSpec.prototype['posixDataSink'] = undefined;

/**
 * @member {module:model/PosixFilesystem} posixDataSource
 */
TransferSpec.prototype['posixDataSource'] = undefined;

/**
 * Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.
 * @member {String} sinkAgentPoolName
 */
TransferSpec.prototype['sinkAgentPoolName'] = undefined;

/**
 * Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.
 * @member {String} sourceAgentPoolName
 */
TransferSpec.prototype['sourceAgentPoolName'] = undefined;

/**
 * @member {module:model/TransferManifest} transferManifest
 */
TransferSpec.prototype['transferManifest'] = undefined;

/**
 * @member {module:model/TransferOptions} transferOptions
 */
TransferSpec.prototype['transferOptions'] = undefined;






export default TransferSpec;

