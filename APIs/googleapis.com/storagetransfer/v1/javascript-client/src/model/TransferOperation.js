/**
 * Storage Transfer API
 * Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorSummary from './ErrorSummary';
import LoggingConfig from './LoggingConfig';
import NotificationConfig from './NotificationConfig';
import TransferCounters from './TransferCounters';
import TransferSpec from './TransferSpec';

/**
 * The TransferOperation model module.
 * @module model/TransferOperation
 * @version v1
 */
class TransferOperation {
    /**
     * Constructs a new <code>TransferOperation</code>.
     * A description of the execution of a transfer.
     * @alias module:model/TransferOperation
     */
    constructor() { 
        
        TransferOperation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransferOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferOperation} obj Optional instance to populate.
     * @return {module:model/TransferOperation} The populated <code>TransferOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransferOperation();

            if (data.hasOwnProperty('counters')) {
                obj['counters'] = TransferCounters.constructFromObject(data['counters']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('errorBreakdowns')) {
                obj['errorBreakdowns'] = ApiClient.convertToType(data['errorBreakdowns'], [ErrorSummary]);
            }
            if (data.hasOwnProperty('loggingConfig')) {
                obj['loggingConfig'] = LoggingConfig.constructFromObject(data['loggingConfig']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notificationConfig')) {
                obj['notificationConfig'] = NotificationConfig.constructFromObject(data['notificationConfig']);
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transferJobName')) {
                obj['transferJobName'] = ApiClient.convertToType(data['transferJobName'], 'String');
            }
            if (data.hasOwnProperty('transferSpec')) {
                obj['transferSpec'] = TransferSpec.constructFromObject(data['transferSpec']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransferOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransferOperation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `counters`
        if (data['counters']) { // data not null
          TransferCounters.validateJSON(data['counters']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        if (data['errorBreakdowns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorBreakdowns'])) {
                throw new Error("Expected the field `errorBreakdowns` to be an array in the JSON data but got " + data['errorBreakdowns']);
            }
            // validate the optional field `errorBreakdowns` (array)
            for (const item of data['errorBreakdowns']) {
                ErrorSummary.validateJSON(item);
            };
        }
        // validate the optional field `loggingConfig`
        if (data['loggingConfig']) { // data not null
          LoggingConfig.validateJSON(data['loggingConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `notificationConfig`
        if (data['notificationConfig']) { // data not null
          NotificationConfig.validateJSON(data['notificationConfig']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transferJobName'] && !(typeof data['transferJobName'] === 'string' || data['transferJobName'] instanceof String)) {
            throw new Error("Expected the field `transferJobName` to be a primitive type in the JSON string but got " + data['transferJobName']);
        }
        // validate the optional field `transferSpec`
        if (data['transferSpec']) { // data not null
          TransferSpec.validateJSON(data['transferSpec']);
        }

        return true;
    }


}



/**
 * @member {module:model/TransferCounters} counters
 */
TransferOperation.prototype['counters'] = undefined;

/**
 * End time of this transfer execution.
 * @member {String} endTime
 */
TransferOperation.prototype['endTime'] = undefined;

/**
 * Summarizes errors encountered with sample error log entries.
 * @member {Array.<module:model/ErrorSummary>} errorBreakdowns
 */
TransferOperation.prototype['errorBreakdowns'] = undefined;

/**
 * @member {module:model/LoggingConfig} loggingConfig
 */
TransferOperation.prototype['loggingConfig'] = undefined;

/**
 * A globally unique ID assigned by the system.
 * @member {String} name
 */
TransferOperation.prototype['name'] = undefined;

/**
 * @member {module:model/NotificationConfig} notificationConfig
 */
TransferOperation.prototype['notificationConfig'] = undefined;

/**
 * The ID of the Google Cloud project that owns the operation.
 * @member {String} projectId
 */
TransferOperation.prototype['projectId'] = undefined;

/**
 * Start time of this transfer execution.
 * @member {String} startTime
 */
TransferOperation.prototype['startTime'] = undefined;

/**
 * Status of the transfer operation.
 * @member {module:model/TransferOperation.StatusEnum} status
 */
TransferOperation.prototype['status'] = undefined;

/**
 * The name of the transfer job that triggers this transfer operation.
 * @member {String} transferJobName
 */
TransferOperation.prototype['transferJobName'] = undefined;

/**
 * @member {module:model/TransferSpec} transferSpec
 */
TransferOperation.prototype['transferSpec'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TransferOperation['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "IN_PROGRESS"
     * @const
     */
    "IN_PROGRESS": "IN_PROGRESS",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED",

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "ABORTED"
     * @const
     */
    "ABORTED": "ABORTED",

    /**
     * value: "QUEUED"
     * @const
     */
    "QUEUED": "QUEUED",

    /**
     * value: "SUSPENDING"
     * @const
     */
    "SUSPENDING": "SUSPENDING"
};



export default TransferOperation;

