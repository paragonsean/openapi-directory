/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription_transferInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription_transferInfo::OAISubscription_transferInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription_transferInfo::OAISubscription_transferInfo() {
    this->initializeModel();
}

OAISubscription_transferInfo::~OAISubscription_transferInfo() {}

void OAISubscription_transferInfo::initializeModel() {

    m_current_legacy_sku_id_isSet = false;
    m_current_legacy_sku_id_isValid = false;

    m_minimum_transferable_seats_isSet = false;
    m_minimum_transferable_seats_isValid = false;

    m_transferability_expiration_time_isSet = false;
    m_transferability_expiration_time_isValid = false;
}

void OAISubscription_transferInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription_transferInfo::fromJsonObject(QJsonObject json) {

    m_current_legacy_sku_id_isValid = ::OpenAPI::fromJsonValue(m_current_legacy_sku_id, json[QString("currentLegacySkuId")]);
    m_current_legacy_sku_id_isSet = !json[QString("currentLegacySkuId")].isNull() && m_current_legacy_sku_id_isValid;

    m_minimum_transferable_seats_isValid = ::OpenAPI::fromJsonValue(m_minimum_transferable_seats, json[QString("minimumTransferableSeats")]);
    m_minimum_transferable_seats_isSet = !json[QString("minimumTransferableSeats")].isNull() && m_minimum_transferable_seats_isValid;

    m_transferability_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_transferability_expiration_time, json[QString("transferabilityExpirationTime")]);
    m_transferability_expiration_time_isSet = !json[QString("transferabilityExpirationTime")].isNull() && m_transferability_expiration_time_isValid;
}

QString OAISubscription_transferInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription_transferInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_legacy_sku_id_isSet) {
        obj.insert(QString("currentLegacySkuId"), ::OpenAPI::toJsonValue(m_current_legacy_sku_id));
    }
    if (m_minimum_transferable_seats_isSet) {
        obj.insert(QString("minimumTransferableSeats"), ::OpenAPI::toJsonValue(m_minimum_transferable_seats));
    }
    if (m_transferability_expiration_time_isSet) {
        obj.insert(QString("transferabilityExpirationTime"), ::OpenAPI::toJsonValue(m_transferability_expiration_time));
    }
    return obj;
}

QString OAISubscription_transferInfo::getCurrentLegacySkuId() const {
    return m_current_legacy_sku_id;
}
void OAISubscription_transferInfo::setCurrentLegacySkuId(const QString &current_legacy_sku_id) {
    m_current_legacy_sku_id = current_legacy_sku_id;
    m_current_legacy_sku_id_isSet = true;
}

bool OAISubscription_transferInfo::is_current_legacy_sku_id_Set() const{
    return m_current_legacy_sku_id_isSet;
}

bool OAISubscription_transferInfo::is_current_legacy_sku_id_Valid() const{
    return m_current_legacy_sku_id_isValid;
}

qint32 OAISubscription_transferInfo::getMinimumTransferableSeats() const {
    return m_minimum_transferable_seats;
}
void OAISubscription_transferInfo::setMinimumTransferableSeats(const qint32 &minimum_transferable_seats) {
    m_minimum_transferable_seats = minimum_transferable_seats;
    m_minimum_transferable_seats_isSet = true;
}

bool OAISubscription_transferInfo::is_minimum_transferable_seats_Set() const{
    return m_minimum_transferable_seats_isSet;
}

bool OAISubscription_transferInfo::is_minimum_transferable_seats_Valid() const{
    return m_minimum_transferable_seats_isValid;
}

QString OAISubscription_transferInfo::getTransferabilityExpirationTime() const {
    return m_transferability_expiration_time;
}
void OAISubscription_transferInfo::setTransferabilityExpirationTime(const QString &transferability_expiration_time) {
    m_transferability_expiration_time = transferability_expiration_time;
    m_transferability_expiration_time_isSet = true;
}

bool OAISubscription_transferInfo::is_transferability_expiration_time_Set() const{
    return m_transferability_expiration_time_isSet;
}

bool OAISubscription_transferInfo::is_transferability_expiration_time_Valid() const{
    return m_transferability_expiration_time_isValid;
}

bool OAISubscription_transferInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_legacy_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_transferable_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transferability_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription_transferInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
