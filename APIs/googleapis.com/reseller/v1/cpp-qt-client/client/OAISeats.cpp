/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeats::OAISeats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeats::OAISeats() {
    this->initializeModel();
}

OAISeats::~OAISeats() {}

void OAISeats::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_licensed_number_of_seats_isSet = false;
    m_licensed_number_of_seats_isValid = false;

    m_maximum_number_of_seats_isSet = false;
    m_maximum_number_of_seats_isValid = false;

    m_number_of_seats_isSet = false;
    m_number_of_seats_isValid = false;
}

void OAISeats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeats::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_licensed_number_of_seats_isValid = ::OpenAPI::fromJsonValue(m_licensed_number_of_seats, json[QString("licensedNumberOfSeats")]);
    m_licensed_number_of_seats_isSet = !json[QString("licensedNumberOfSeats")].isNull() && m_licensed_number_of_seats_isValid;

    m_maximum_number_of_seats_isValid = ::OpenAPI::fromJsonValue(m_maximum_number_of_seats, json[QString("maximumNumberOfSeats")]);
    m_maximum_number_of_seats_isSet = !json[QString("maximumNumberOfSeats")].isNull() && m_maximum_number_of_seats_isValid;

    m_number_of_seats_isValid = ::OpenAPI::fromJsonValue(m_number_of_seats, json[QString("numberOfSeats")]);
    m_number_of_seats_isSet = !json[QString("numberOfSeats")].isNull() && m_number_of_seats_isValid;
}

QString OAISeats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeats::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_licensed_number_of_seats_isSet) {
        obj.insert(QString("licensedNumberOfSeats"), ::OpenAPI::toJsonValue(m_licensed_number_of_seats));
    }
    if (m_maximum_number_of_seats_isSet) {
        obj.insert(QString("maximumNumberOfSeats"), ::OpenAPI::toJsonValue(m_maximum_number_of_seats));
    }
    if (m_number_of_seats_isSet) {
        obj.insert(QString("numberOfSeats"), ::OpenAPI::toJsonValue(m_number_of_seats));
    }
    return obj;
}

QString OAISeats::getKind() const {
    return m_kind;
}
void OAISeats::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISeats::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISeats::is_kind_Valid() const{
    return m_kind_isValid;
}

qint32 OAISeats::getLicensedNumberOfSeats() const {
    return m_licensed_number_of_seats;
}
void OAISeats::setLicensedNumberOfSeats(const qint32 &licensed_number_of_seats) {
    m_licensed_number_of_seats = licensed_number_of_seats;
    m_licensed_number_of_seats_isSet = true;
}

bool OAISeats::is_licensed_number_of_seats_Set() const{
    return m_licensed_number_of_seats_isSet;
}

bool OAISeats::is_licensed_number_of_seats_Valid() const{
    return m_licensed_number_of_seats_isValid;
}

qint32 OAISeats::getMaximumNumberOfSeats() const {
    return m_maximum_number_of_seats;
}
void OAISeats::setMaximumNumberOfSeats(const qint32 &maximum_number_of_seats) {
    m_maximum_number_of_seats = maximum_number_of_seats;
    m_maximum_number_of_seats_isSet = true;
}

bool OAISeats::is_maximum_number_of_seats_Set() const{
    return m_maximum_number_of_seats_isSet;
}

bool OAISeats::is_maximum_number_of_seats_Valid() const{
    return m_maximum_number_of_seats_isValid;
}

qint32 OAISeats::getNumberOfSeats() const {
    return m_number_of_seats;
}
void OAISeats::setNumberOfSeats(const qint32 &number_of_seats) {
    m_number_of_seats = number_of_seats;
    m_number_of_seats_isSet = true;
}

bool OAISeats::is_number_of_seats_Set() const{
    return m_number_of_seats_isSet;
}

bool OAISeats::is_number_of_seats_Valid() const{
    return m_number_of_seats_isValid;
}

bool OAISeats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensed_number_of_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_number_of_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_seats_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
