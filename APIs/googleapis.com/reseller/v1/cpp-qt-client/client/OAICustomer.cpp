/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomer::OAICustomer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomer::OAICustomer() {
    this->initializeModel();
}

OAICustomer::~OAICustomer() {}

void OAICustomer::initializeModel() {

    m_alternate_email_isSet = false;
    m_alternate_email_isValid = false;

    m_customer_domain_isSet = false;
    m_customer_domain_isValid = false;

    m_customer_domain_verified_isSet = false;
    m_customer_domain_verified_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_customer_type_isSet = false;
    m_customer_type_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_postal_address_isSet = false;
    m_postal_address_isValid = false;

    m_primary_admin_isSet = false;
    m_primary_admin_isValid = false;

    m_resource_ui_url_isSet = false;
    m_resource_ui_url_isValid = false;
}

void OAICustomer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomer::fromJsonObject(QJsonObject json) {

    m_alternate_email_isValid = ::OpenAPI::fromJsonValue(m_alternate_email, json[QString("alternateEmail")]);
    m_alternate_email_isSet = !json[QString("alternateEmail")].isNull() && m_alternate_email_isValid;

    m_customer_domain_isValid = ::OpenAPI::fromJsonValue(m_customer_domain, json[QString("customerDomain")]);
    m_customer_domain_isSet = !json[QString("customerDomain")].isNull() && m_customer_domain_isValid;

    m_customer_domain_verified_isValid = ::OpenAPI::fromJsonValue(m_customer_domain_verified, json[QString("customerDomainVerified")]);
    m_customer_domain_verified_isSet = !json[QString("customerDomainVerified")].isNull() && m_customer_domain_verified_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_customer_type_isValid = ::OpenAPI::fromJsonValue(m_customer_type, json[QString("customerType")]);
    m_customer_type_isSet = !json[QString("customerType")].isNull() && m_customer_type_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_postal_address_isValid = ::OpenAPI::fromJsonValue(m_postal_address, json[QString("postalAddress")]);
    m_postal_address_isSet = !json[QString("postalAddress")].isNull() && m_postal_address_isValid;

    m_primary_admin_isValid = ::OpenAPI::fromJsonValue(m_primary_admin, json[QString("primaryAdmin")]);
    m_primary_admin_isSet = !json[QString("primaryAdmin")].isNull() && m_primary_admin_isValid;

    m_resource_ui_url_isValid = ::OpenAPI::fromJsonValue(m_resource_ui_url, json[QString("resourceUiUrl")]);
    m_resource_ui_url_isSet = !json[QString("resourceUiUrl")].isNull() && m_resource_ui_url_isValid;
}

QString OAICustomer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomer::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_email_isSet) {
        obj.insert(QString("alternateEmail"), ::OpenAPI::toJsonValue(m_alternate_email));
    }
    if (m_customer_domain_isSet) {
        obj.insert(QString("customerDomain"), ::OpenAPI::toJsonValue(m_customer_domain));
    }
    if (m_customer_domain_verified_isSet) {
        obj.insert(QString("customerDomainVerified"), ::OpenAPI::toJsonValue(m_customer_domain_verified));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_customer_type_isSet) {
        obj.insert(QString("customerType"), ::OpenAPI::toJsonValue(m_customer_type));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_postal_address.isSet()) {
        obj.insert(QString("postalAddress"), ::OpenAPI::toJsonValue(m_postal_address));
    }
    if (m_primary_admin.isSet()) {
        obj.insert(QString("primaryAdmin"), ::OpenAPI::toJsonValue(m_primary_admin));
    }
    if (m_resource_ui_url_isSet) {
        obj.insert(QString("resourceUiUrl"), ::OpenAPI::toJsonValue(m_resource_ui_url));
    }
    return obj;
}

QString OAICustomer::getAlternateEmail() const {
    return m_alternate_email;
}
void OAICustomer::setAlternateEmail(const QString &alternate_email) {
    m_alternate_email = alternate_email;
    m_alternate_email_isSet = true;
}

bool OAICustomer::is_alternate_email_Set() const{
    return m_alternate_email_isSet;
}

bool OAICustomer::is_alternate_email_Valid() const{
    return m_alternate_email_isValid;
}

QString OAICustomer::getCustomerDomain() const {
    return m_customer_domain;
}
void OAICustomer::setCustomerDomain(const QString &customer_domain) {
    m_customer_domain = customer_domain;
    m_customer_domain_isSet = true;
}

bool OAICustomer::is_customer_domain_Set() const{
    return m_customer_domain_isSet;
}

bool OAICustomer::is_customer_domain_Valid() const{
    return m_customer_domain_isValid;
}

bool OAICustomer::isCustomerDomainVerified() const {
    return m_customer_domain_verified;
}
void OAICustomer::setCustomerDomainVerified(const bool &customer_domain_verified) {
    m_customer_domain_verified = customer_domain_verified;
    m_customer_domain_verified_isSet = true;
}

bool OAICustomer::is_customer_domain_verified_Set() const{
    return m_customer_domain_verified_isSet;
}

bool OAICustomer::is_customer_domain_verified_Valid() const{
    return m_customer_domain_verified_isValid;
}

QString OAICustomer::getCustomerId() const {
    return m_customer_id;
}
void OAICustomer::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAICustomer::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAICustomer::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAICustomer::getCustomerType() const {
    return m_customer_type;
}
void OAICustomer::setCustomerType(const QString &customer_type) {
    m_customer_type = customer_type;
    m_customer_type_isSet = true;
}

bool OAICustomer::is_customer_type_Set() const{
    return m_customer_type_isSet;
}

bool OAICustomer::is_customer_type_Valid() const{
    return m_customer_type_isValid;
}

QString OAICustomer::getKind() const {
    return m_kind;
}
void OAICustomer::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICustomer::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICustomer::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICustomer::getPhoneNumber() const {
    return m_phone_number;
}
void OAICustomer::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICustomer::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICustomer::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

OAIAddress OAICustomer::getPostalAddress() const {
    return m_postal_address;
}
void OAICustomer::setPostalAddress(const OAIAddress &postal_address) {
    m_postal_address = postal_address;
    m_postal_address_isSet = true;
}

bool OAICustomer::is_postal_address_Set() const{
    return m_postal_address_isSet;
}

bool OAICustomer::is_postal_address_Valid() const{
    return m_postal_address_isValid;
}

OAIPrimaryAdmin OAICustomer::getPrimaryAdmin() const {
    return m_primary_admin;
}
void OAICustomer::setPrimaryAdmin(const OAIPrimaryAdmin &primary_admin) {
    m_primary_admin = primary_admin;
    m_primary_admin_isSet = true;
}

bool OAICustomer::is_primary_admin_Set() const{
    return m_primary_admin_isSet;
}

bool OAICustomer::is_primary_admin_Valid() const{
    return m_primary_admin_isValid;
}

QString OAICustomer::getResourceUiUrl() const {
    return m_resource_ui_url;
}
void OAICustomer::setResourceUiUrl(const QString &resource_ui_url) {
    m_resource_ui_url = resource_ui_url;
    m_resource_ui_url_isSet = true;
}

bool OAICustomer::is_resource_ui_url_Set() const{
    return m_resource_ui_url_isSet;
}

bool OAICustomer::is_resource_ui_url_Valid() const{
    return m_resource_ui_url_isValid;
}

bool OAICustomer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_domain_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_admin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ui_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
