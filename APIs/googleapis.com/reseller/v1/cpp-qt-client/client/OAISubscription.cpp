/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_billing_method_isSet = false;
    m_billing_method_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_customer_domain_isSet = false;
    m_customer_domain_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_deal_code_isSet = false;
    m_deal_code_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_purchase_order_id_isSet = false;
    m_purchase_order_id_isValid = false;

    m_renewal_settings_isSet = false;
    m_renewal_settings_isValid = false;

    m_resource_ui_url_isSet = false;
    m_resource_ui_url_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_suspension_reasons_isSet = false;
    m_suspension_reasons_isValid = false;

    m_transfer_info_isSet = false;
    m_transfer_info_isValid = false;

    m_trial_settings_isSet = false;
    m_trial_settings_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_billing_method_isValid = ::OpenAPI::fromJsonValue(m_billing_method, json[QString("billingMethod")]);
    m_billing_method_isSet = !json[QString("billingMethod")].isNull() && m_billing_method_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_customer_domain_isValid = ::OpenAPI::fromJsonValue(m_customer_domain, json[QString("customerDomain")]);
    m_customer_domain_isSet = !json[QString("customerDomain")].isNull() && m_customer_domain_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_deal_code_isValid = ::OpenAPI::fromJsonValue(m_deal_code, json[QString("dealCode")]);
    m_deal_code_isSet = !json[QString("dealCode")].isNull() && m_deal_code_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_purchase_order_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_order_id, json[QString("purchaseOrderId")]);
    m_purchase_order_id_isSet = !json[QString("purchaseOrderId")].isNull() && m_purchase_order_id_isValid;

    m_renewal_settings_isValid = ::OpenAPI::fromJsonValue(m_renewal_settings, json[QString("renewalSettings")]);
    m_renewal_settings_isSet = !json[QString("renewalSettings")].isNull() && m_renewal_settings_isValid;

    m_resource_ui_url_isValid = ::OpenAPI::fromJsonValue(m_resource_ui_url, json[QString("resourceUiUrl")]);
    m_resource_ui_url_isSet = !json[QString("resourceUiUrl")].isNull() && m_resource_ui_url_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_suspension_reasons_isValid = ::OpenAPI::fromJsonValue(m_suspension_reasons, json[QString("suspensionReasons")]);
    m_suspension_reasons_isSet = !json[QString("suspensionReasons")].isNull() && m_suspension_reasons_isValid;

    m_transfer_info_isValid = ::OpenAPI::fromJsonValue(m_transfer_info, json[QString("transferInfo")]);
    m_transfer_info_isSet = !json[QString("transferInfo")].isNull() && m_transfer_info_isValid;

    m_trial_settings_isValid = ::OpenAPI::fromJsonValue(m_trial_settings, json[QString("trialSettings")]);
    m_trial_settings_isSet = !json[QString("trialSettings")].isNull() && m_trial_settings_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_method_isSet) {
        obj.insert(QString("billingMethod"), ::OpenAPI::toJsonValue(m_billing_method));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_customer_domain_isSet) {
        obj.insert(QString("customerDomain"), ::OpenAPI::toJsonValue(m_customer_domain));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_deal_code_isSet) {
        obj.insert(QString("dealCode"), ::OpenAPI::toJsonValue(m_deal_code));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_plan.isSet()) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_purchase_order_id_isSet) {
        obj.insert(QString("purchaseOrderId"), ::OpenAPI::toJsonValue(m_purchase_order_id));
    }
    if (m_renewal_settings.isSet()) {
        obj.insert(QString("renewalSettings"), ::OpenAPI::toJsonValue(m_renewal_settings));
    }
    if (m_resource_ui_url_isSet) {
        obj.insert(QString("resourceUiUrl"), ::OpenAPI::toJsonValue(m_resource_ui_url));
    }
    if (m_seats.isSet()) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_suspension_reasons.size() > 0) {
        obj.insert(QString("suspensionReasons"), ::OpenAPI::toJsonValue(m_suspension_reasons));
    }
    if (m_transfer_info.isSet()) {
        obj.insert(QString("transferInfo"), ::OpenAPI::toJsonValue(m_transfer_info));
    }
    if (m_trial_settings.isSet()) {
        obj.insert(QString("trialSettings"), ::OpenAPI::toJsonValue(m_trial_settings));
    }
    return obj;
}

QString OAISubscription::getBillingMethod() const {
    return m_billing_method;
}
void OAISubscription::setBillingMethod(const QString &billing_method) {
    m_billing_method = billing_method;
    m_billing_method_isSet = true;
}

bool OAISubscription::is_billing_method_Set() const{
    return m_billing_method_isSet;
}

bool OAISubscription::is_billing_method_Valid() const{
    return m_billing_method_isValid;
}

QString OAISubscription::getCreationTime() const {
    return m_creation_time;
}
void OAISubscription::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISubscription::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISubscription::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISubscription::getCustomerDomain() const {
    return m_customer_domain;
}
void OAISubscription::setCustomerDomain(const QString &customer_domain) {
    m_customer_domain = customer_domain;
    m_customer_domain_isSet = true;
}

bool OAISubscription::is_customer_domain_Set() const{
    return m_customer_domain_isSet;
}

bool OAISubscription::is_customer_domain_Valid() const{
    return m_customer_domain_isValid;
}

QString OAISubscription::getCustomerId() const {
    return m_customer_id;
}
void OAISubscription::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAISubscription::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAISubscription::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAISubscription::getDealCode() const {
    return m_deal_code;
}
void OAISubscription::setDealCode(const QString &deal_code) {
    m_deal_code = deal_code;
    m_deal_code_isSet = true;
}

bool OAISubscription::is_deal_code_Set() const{
    return m_deal_code_isSet;
}

bool OAISubscription::is_deal_code_Valid() const{
    return m_deal_code_isValid;
}

QString OAISubscription::getKind() const {
    return m_kind;
}
void OAISubscription::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISubscription::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISubscription::is_kind_Valid() const{
    return m_kind_isValid;
}

OAISubscription_plan OAISubscription::getPlan() const {
    return m_plan;
}
void OAISubscription::setPlan(const OAISubscription_plan &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISubscription::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISubscription::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAISubscription::getPurchaseOrderId() const {
    return m_purchase_order_id;
}
void OAISubscription::setPurchaseOrderId(const QString &purchase_order_id) {
    m_purchase_order_id = purchase_order_id;
    m_purchase_order_id_isSet = true;
}

bool OAISubscription::is_purchase_order_id_Set() const{
    return m_purchase_order_id_isSet;
}

bool OAISubscription::is_purchase_order_id_Valid() const{
    return m_purchase_order_id_isValid;
}

OAIRenewalSettings OAISubscription::getRenewalSettings() const {
    return m_renewal_settings;
}
void OAISubscription::setRenewalSettings(const OAIRenewalSettings &renewal_settings) {
    m_renewal_settings = renewal_settings;
    m_renewal_settings_isSet = true;
}

bool OAISubscription::is_renewal_settings_Set() const{
    return m_renewal_settings_isSet;
}

bool OAISubscription::is_renewal_settings_Valid() const{
    return m_renewal_settings_isValid;
}

QString OAISubscription::getResourceUiUrl() const {
    return m_resource_ui_url;
}
void OAISubscription::setResourceUiUrl(const QString &resource_ui_url) {
    m_resource_ui_url = resource_ui_url;
    m_resource_ui_url_isSet = true;
}

bool OAISubscription::is_resource_ui_url_Set() const{
    return m_resource_ui_url_isSet;
}

bool OAISubscription::is_resource_ui_url_Valid() const{
    return m_resource_ui_url_isValid;
}

OAISeats OAISubscription::getSeats() const {
    return m_seats;
}
void OAISubscription::setSeats(const OAISeats &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAISubscription::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAISubscription::is_seats_Valid() const{
    return m_seats_isValid;
}

QString OAISubscription::getSkuId() const {
    return m_sku_id;
}
void OAISubscription::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISubscription::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISubscription::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

QString OAISubscription::getSkuName() const {
    return m_sku_name;
}
void OAISubscription::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAISubscription::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAISubscription::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

QString OAISubscription::getStatus() const {
    return m_status;
}
void OAISubscription::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISubscription::is_status_Set() const{
    return m_status_isSet;
}

bool OAISubscription::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISubscription::getSubscriptionId() const {
    return m_subscription_id;
}
void OAISubscription::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAISubscription::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAISubscription::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QList<QString> OAISubscription::getSuspensionReasons() const {
    return m_suspension_reasons;
}
void OAISubscription::setSuspensionReasons(const QList<QString> &suspension_reasons) {
    m_suspension_reasons = suspension_reasons;
    m_suspension_reasons_isSet = true;
}

bool OAISubscription::is_suspension_reasons_Set() const{
    return m_suspension_reasons_isSet;
}

bool OAISubscription::is_suspension_reasons_Valid() const{
    return m_suspension_reasons_isValid;
}

OAISubscription_transferInfo OAISubscription::getTransferInfo() const {
    return m_transfer_info;
}
void OAISubscription::setTransferInfo(const OAISubscription_transferInfo &transfer_info) {
    m_transfer_info = transfer_info;
    m_transfer_info_isSet = true;
}

bool OAISubscription::is_transfer_info_Set() const{
    return m_transfer_info_isSet;
}

bool OAISubscription::is_transfer_info_Valid() const{
    return m_transfer_info_isValid;
}

OAISubscription_trialSettings OAISubscription::getTrialSettings() const {
    return m_trial_settings;
}
void OAISubscription::setTrialSettings(const OAISubscription_trialSettings &trial_settings) {
    m_trial_settings = trial_settings;
    m_trial_settings_isSet = true;
}

bool OAISubscription::is_trial_settings_Set() const{
    return m_trial_settings_isSet;
}

bool OAISubscription::is_trial_settings_Valid() const{
    return m_trial_settings_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_renewal_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_ui_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
