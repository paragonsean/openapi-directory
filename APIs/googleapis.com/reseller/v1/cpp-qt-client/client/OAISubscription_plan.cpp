/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription_plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription_plan::OAISubscription_plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription_plan::OAISubscription_plan() {
    this->initializeModel();
}

OAISubscription_plan::~OAISubscription_plan() {}

void OAISubscription_plan::initializeModel() {

    m_commitment_interval_isSet = false;
    m_commitment_interval_isValid = false;

    m_is_commitment_plan_isSet = false;
    m_is_commitment_plan_isValid = false;

    m_plan_name_isSet = false;
    m_plan_name_isValid = false;
}

void OAISubscription_plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription_plan::fromJsonObject(QJsonObject json) {

    m_commitment_interval_isValid = ::OpenAPI::fromJsonValue(m_commitment_interval, json[QString("commitmentInterval")]);
    m_commitment_interval_isSet = !json[QString("commitmentInterval")].isNull() && m_commitment_interval_isValid;

    m_is_commitment_plan_isValid = ::OpenAPI::fromJsonValue(m_is_commitment_plan, json[QString("isCommitmentPlan")]);
    m_is_commitment_plan_isSet = !json[QString("isCommitmentPlan")].isNull() && m_is_commitment_plan_isValid;

    m_plan_name_isValid = ::OpenAPI::fromJsonValue(m_plan_name, json[QString("planName")]);
    m_plan_name_isSet = !json[QString("planName")].isNull() && m_plan_name_isValid;
}

QString OAISubscription_plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription_plan::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_interval.isSet()) {
        obj.insert(QString("commitmentInterval"), ::OpenAPI::toJsonValue(m_commitment_interval));
    }
    if (m_is_commitment_plan_isSet) {
        obj.insert(QString("isCommitmentPlan"), ::OpenAPI::toJsonValue(m_is_commitment_plan));
    }
    if (m_plan_name_isSet) {
        obj.insert(QString("planName"), ::OpenAPI::toJsonValue(m_plan_name));
    }
    return obj;
}

OAISubscription_plan_commitmentInterval OAISubscription_plan::getCommitmentInterval() const {
    return m_commitment_interval;
}
void OAISubscription_plan::setCommitmentInterval(const OAISubscription_plan_commitmentInterval &commitment_interval) {
    m_commitment_interval = commitment_interval;
    m_commitment_interval_isSet = true;
}

bool OAISubscription_plan::is_commitment_interval_Set() const{
    return m_commitment_interval_isSet;
}

bool OAISubscription_plan::is_commitment_interval_Valid() const{
    return m_commitment_interval_isValid;
}

bool OAISubscription_plan::isIsCommitmentPlan() const {
    return m_is_commitment_plan;
}
void OAISubscription_plan::setIsCommitmentPlan(const bool &is_commitment_plan) {
    m_is_commitment_plan = is_commitment_plan;
    m_is_commitment_plan_isSet = true;
}

bool OAISubscription_plan::is_is_commitment_plan_Set() const{
    return m_is_commitment_plan_isSet;
}

bool OAISubscription_plan::is_is_commitment_plan_Valid() const{
    return m_is_commitment_plan_isValid;
}

QString OAISubscription_plan::getPlanName() const {
    return m_plan_name;
}
void OAISubscription_plan::setPlanName(const QString &plan_name) {
    m_plan_name = plan_name;
    m_plan_name_isSet = true;
}

bool OAISubscription_plan::is_plan_name_Set() const{
    return m_plan_name_isSet;
}

bool OAISubscription_plan::is_plan_name_Valid() const{
    return m_plan_name_isValid;
}

bool OAISubscription_plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_commitment_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription_plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
