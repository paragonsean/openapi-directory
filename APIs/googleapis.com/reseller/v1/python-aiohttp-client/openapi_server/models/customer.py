# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.primary_admin import PrimaryAdmin
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_email: str=None, customer_domain: str=None, customer_domain_verified: bool=None, customer_id: str=None, customer_type: str=None, kind: str='reseller#customer', phone_number: str=None, postal_address: Address=None, primary_admin: PrimaryAdmin=None, resource_ui_url: str=None):
        """Customer - a model defined in OpenAPI

        :param alternate_email: The alternate_email of this Customer.
        :param customer_domain: The customer_domain of this Customer.
        :param customer_domain_verified: The customer_domain_verified of this Customer.
        :param customer_id: The customer_id of this Customer.
        :param customer_type: The customer_type of this Customer.
        :param kind: The kind of this Customer.
        :param phone_number: The phone_number of this Customer.
        :param postal_address: The postal_address of this Customer.
        :param primary_admin: The primary_admin of this Customer.
        :param resource_ui_url: The resource_ui_url of this Customer.
        """
        self.openapi_types = {
            'alternate_email': str,
            'customer_domain': str,
            'customer_domain_verified': bool,
            'customer_id': str,
            'customer_type': str,
            'kind': str,
            'phone_number': str,
            'postal_address': Address,
            'primary_admin': PrimaryAdmin,
            'resource_ui_url': str
        }

        self.attribute_map = {
            'alternate_email': 'alternateEmail',
            'customer_domain': 'customerDomain',
            'customer_domain_verified': 'customerDomainVerified',
            'customer_id': 'customerId',
            'customer_type': 'customerType',
            'kind': 'kind',
            'phone_number': 'phoneNumber',
            'postal_address': 'postalAddress',
            'primary_admin': 'primaryAdmin',
            'resource_ui_url': 'resourceUiUrl'
        }

        self._alternate_email = alternate_email
        self._customer_domain = customer_domain
        self._customer_domain_verified = customer_domain_verified
        self._customer_id = customer_id
        self._customer_type = customer_type
        self._kind = kind
        self._phone_number = phone_number
        self._postal_address = postal_address
        self._primary_admin = primary_admin
        self._resource_ui_url = resource_ui_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_email(self):
        """Gets the alternate_email of this Customer.

        Like the \"Customer email\" in the reseller tools, this email is the secondary contact used if something happens to the customer's service such as service outage or a security issue. This property is required when creating a new \"domain\" customer and should not use the same domain as `customerDomain`. The `alternateEmail` field is not necessary to create a \"team\" customer.

        :return: The alternate_email of this Customer.
        :rtype: str
        """
        return self._alternate_email

    @alternate_email.setter
    def alternate_email(self, alternate_email):
        """Sets the alternate_email of this Customer.

        Like the \"Customer email\" in the reseller tools, this email is the secondary contact used if something happens to the customer's service such as service outage or a security issue. This property is required when creating a new \"domain\" customer and should not use the same domain as `customerDomain`. The `alternateEmail` field is not necessary to create a \"team\" customer.

        :param alternate_email: The alternate_email of this Customer.
        :type alternate_email: str
        """

        self._alternate_email = alternate_email

    @property
    def customer_domain(self):
        """Gets the customer_domain of this Customer.

        The customer's primary domain name string. `customerDomain` is required when creating a new customer. Do not include the `www` prefix in the domain when adding a customer.

        :return: The customer_domain of this Customer.
        :rtype: str
        """
        return self._customer_domain

    @customer_domain.setter
    def customer_domain(self, customer_domain):
        """Sets the customer_domain of this Customer.

        The customer's primary domain name string. `customerDomain` is required when creating a new customer. Do not include the `www` prefix in the domain when adding a customer.

        :param customer_domain: The customer_domain of this Customer.
        :type customer_domain: str
        """

        self._customer_domain = customer_domain

    @property
    def customer_domain_verified(self):
        """Gets the customer_domain_verified of this Customer.

        Whether the customer's primary domain has been verified.

        :return: The customer_domain_verified of this Customer.
        :rtype: bool
        """
        return self._customer_domain_verified

    @customer_domain_verified.setter
    def customer_domain_verified(self, customer_domain_verified):
        """Sets the customer_domain_verified of this Customer.

        Whether the customer's primary domain has been verified.

        :param customer_domain_verified: The customer_domain_verified of this Customer.
        :type customer_domain_verified: bool
        """

        self._customer_domain_verified = customer_domain_verified

    @property
    def customer_id(self):
        """Gets the customer_id of this Customer.

        This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.

        :return: The customer_id of this Customer.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Customer.

        This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.

        :param customer_id: The customer_id of this Customer.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def customer_type(self):
        """Gets the customer_type of this Customer.

        Identifies the type of the customer. Acceptable values include: * `domain`: Implies a domain-verified customer (default). * `team`: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).

        :return: The customer_type of this Customer.
        :rtype: str
        """
        return self._customer_type

    @customer_type.setter
    def customer_type(self, customer_type):
        """Sets the customer_type of this Customer.

        Identifies the type of the customer. Acceptable values include: * `domain`: Implies a domain-verified customer (default). * `team`: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).

        :param customer_type: The customer_type of this Customer.
        :type customer_type: str
        """
        allowed_values = ["customerTypeUnspecified", "domain", "team"]  # noqa: E501
        if customer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_type` ({0}), must be one of {1}"
                .format(customer_type, allowed_values)
            )

        self._customer_type = customer_type

    @property
    def kind(self):
        """Gets the kind of this Customer.

        Identifies the resource as a customer. Value: `reseller#customer`

        :return: The kind of this Customer.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Customer.

        Identifies the resource as a customer. Value: `reseller#customer`

        :param kind: The kind of this Customer.
        :type kind: str
        """

        self._kind = kind

    @property
    def phone_number(self):
        """Gets the phone_number of this Customer.

        Customer contact phone number. Must start with \"+\" followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, \"123\". This field is silently ignored if invalid.

        :return: The phone_number of this Customer.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Customer.

        Customer contact phone number. Must start with \"+\" followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, \"123\". This field is silently ignored if invalid.

        :param phone_number: The phone_number of this Customer.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def postal_address(self):
        """Gets the postal_address of this Customer.


        :return: The postal_address of this Customer.
        :rtype: Address
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this Customer.


        :param postal_address: The postal_address of this Customer.
        :type postal_address: Address
        """

        self._postal_address = postal_address

    @property
    def primary_admin(self):
        """Gets the primary_admin of this Customer.


        :return: The primary_admin of this Customer.
        :rtype: PrimaryAdmin
        """
        return self._primary_admin

    @primary_admin.setter
    def primary_admin(self, primary_admin):
        """Sets the primary_admin of this Customer.


        :param primary_admin: The primary_admin of this Customer.
        :type primary_admin: PrimaryAdmin
        """

        self._primary_admin = primary_admin

    @property
    def resource_ui_url(self):
        """Gets the resource_ui_url of this Customer.

        URL to customer's Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.

        :return: The resource_ui_url of this Customer.
        :rtype: str
        """
        return self._resource_ui_url

    @resource_ui_url.setter
    def resource_ui_url(self, resource_ui_url):
        """Sets the resource_ui_url of this Customer.

        URL to customer's Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.

        :param resource_ui_url: The resource_ui_url of this Customer.
        :type resource_ui_url: str
        """

        self._resource_ui_url = resource_ui_url
