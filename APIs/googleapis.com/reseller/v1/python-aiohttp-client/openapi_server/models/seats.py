# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Seats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str='subscriptions#seats', licensed_number_of_seats: int=None, maximum_number_of_seats: int=None, number_of_seats: int=None):
        """Seats - a model defined in OpenAPI

        :param kind: The kind of this Seats.
        :param licensed_number_of_seats: The licensed_number_of_seats of this Seats.
        :param maximum_number_of_seats: The maximum_number_of_seats of this Seats.
        :param number_of_seats: The number_of_seats of this Seats.
        """
        self.openapi_types = {
            'kind': str,
            'licensed_number_of_seats': int,
            'maximum_number_of_seats': int,
            'number_of_seats': int
        }

        self.attribute_map = {
            'kind': 'kind',
            'licensed_number_of_seats': 'licensedNumberOfSeats',
            'maximum_number_of_seats': 'maximumNumberOfSeats',
            'number_of_seats': 'numberOfSeats'
        }

        self._kind = kind
        self._licensed_number_of_seats = licensed_number_of_seats
        self._maximum_number_of_seats = maximum_number_of_seats
        self._number_of_seats = number_of_seats

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Seats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Seats of this Seats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this Seats.

        Identifies the resource as a subscription seat setting. Value: `subscriptions#seats`

        :return: The kind of this Seats.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Seats.

        Identifies the resource as a subscription seat setting. Value: `subscriptions#seats`

        :param kind: The kind of this Seats.
        :type kind: str
        """

        self._kind = kind

    @property
    def licensed_number_of_seats(self):
        """Gets the licensed_number_of_seats of this Seats.

        Read-only field containing the current number of users that are assigned a license for the product defined in `skuId`. This field's value is equivalent to the numerical count of users returned by the Enterprise License Manager API method: [`listForProductAndSku`](/admin-sdk/licensing/v1/reference/licenseAssignments/listForProductAndSku).

        :return: The licensed_number_of_seats of this Seats.
        :rtype: int
        """
        return self._licensed_number_of_seats

    @licensed_number_of_seats.setter
    def licensed_number_of_seats(self, licensed_number_of_seats):
        """Sets the licensed_number_of_seats of this Seats.

        Read-only field containing the current number of users that are assigned a license for the product defined in `skuId`. This field's value is equivalent to the numerical count of users returned by the Enterprise License Manager API method: [`listForProductAndSku`](/admin-sdk/licensing/v1/reference/licenseAssignments/listForProductAndSku).

        :param licensed_number_of_seats: The licensed_number_of_seats of this Seats.
        :type licensed_number_of_seats: int
        """

        self._licensed_number_of_seats = licensed_number_of_seats

    @property
    def maximum_number_of_seats(self):
        """Gets the maximum_number_of_seats of this Seats.

        This is a required property and is exclusive to subscriptions with `FLEXIBLE` or `TRIAL` plans. This property sets the maximum number of licensed users allowed on a subscription. This quantity can be increased up to the maximum limit defined in the reseller's contract. The minimum quantity is the current number of users in the customer account. *Note: *G Suite subscriptions automatically assign a license to every user.

        :return: The maximum_number_of_seats of this Seats.
        :rtype: int
        """
        return self._maximum_number_of_seats

    @maximum_number_of_seats.setter
    def maximum_number_of_seats(self, maximum_number_of_seats):
        """Sets the maximum_number_of_seats of this Seats.

        This is a required property and is exclusive to subscriptions with `FLEXIBLE` or `TRIAL` plans. This property sets the maximum number of licensed users allowed on a subscription. This quantity can be increased up to the maximum limit defined in the reseller's contract. The minimum quantity is the current number of users in the customer account. *Note: *G Suite subscriptions automatically assign a license to every user.

        :param maximum_number_of_seats: The maximum_number_of_seats of this Seats.
        :type maximum_number_of_seats: int
        """

        self._maximum_number_of_seats = maximum_number_of_seats

    @property
    def number_of_seats(self):
        """Gets the number_of_seats of this Seats.

        This is a required property and is exclusive to subscriptions with `ANNUAL_MONTHLY_PAY` and `ANNUAL_YEARLY_PAY` plans. This property sets the maximum number of licenses assignable to users on a subscription. The reseller can add more licenses, but once set, the `numberOfSeats` cannot be reduced until renewal. The reseller is invoiced based on the `numberOfSeats` value regardless of how many of these user licenses are assigned. *Note: *Google Workspace subscriptions automatically assign a license to every user.

        :return: The number_of_seats of this Seats.
        :rtype: int
        """
        return self._number_of_seats

    @number_of_seats.setter
    def number_of_seats(self, number_of_seats):
        """Sets the number_of_seats of this Seats.

        This is a required property and is exclusive to subscriptions with `ANNUAL_MONTHLY_PAY` and `ANNUAL_YEARLY_PAY` plans. This property sets the maximum number of licenses assignable to users on a subscription. The reseller can add more licenses, but once set, the `numberOfSeats` cannot be reduced until renewal. The reseller is invoiced based on the `numberOfSeats` value regardless of how many of these user licenses are assigned. *Note: *Google Workspace subscriptions automatically assign a license to every user.

        :param number_of_seats: The number_of_seats of this Seats.
        :type number_of_seats: int
        """

        self._number_of_seats = number_of_seats
