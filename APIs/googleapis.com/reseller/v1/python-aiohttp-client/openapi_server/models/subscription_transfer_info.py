# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionTransferInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_legacy_sku_id: str=None, minimum_transferable_seats: int=None, transferability_expiration_time: str=None):
        """SubscriptionTransferInfo - a model defined in OpenAPI

        :param current_legacy_sku_id: The current_legacy_sku_id of this SubscriptionTransferInfo.
        :param minimum_transferable_seats: The minimum_transferable_seats of this SubscriptionTransferInfo.
        :param transferability_expiration_time: The transferability_expiration_time of this SubscriptionTransferInfo.
        """
        self.openapi_types = {
            'current_legacy_sku_id': str,
            'minimum_transferable_seats': int,
            'transferability_expiration_time': str
        }

        self.attribute_map = {
            'current_legacy_sku_id': 'currentLegacySkuId',
            'minimum_transferable_seats': 'minimumTransferableSeats',
            'transferability_expiration_time': 'transferabilityExpirationTime'
        }

        self._current_legacy_sku_id = current_legacy_sku_id
        self._minimum_transferable_seats = minimum_transferable_seats
        self._transferability_expiration_time = transferability_expiration_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionTransferInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription_transferInfo of this SubscriptionTransferInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_legacy_sku_id(self):
        """Gets the current_legacy_sku_id of this SubscriptionTransferInfo.

        The `skuId` of the current resold subscription. This is populated only when the customer has a subscription with a legacy SKU and the subscription resource is populated with the `skuId` of the SKU recommended for the transfer.

        :return: The current_legacy_sku_id of this SubscriptionTransferInfo.
        :rtype: str
        """
        return self._current_legacy_sku_id

    @current_legacy_sku_id.setter
    def current_legacy_sku_id(self, current_legacy_sku_id):
        """Sets the current_legacy_sku_id of this SubscriptionTransferInfo.

        The `skuId` of the current resold subscription. This is populated only when the customer has a subscription with a legacy SKU and the subscription resource is populated with the `skuId` of the SKU recommended for the transfer.

        :param current_legacy_sku_id: The current_legacy_sku_id of this SubscriptionTransferInfo.
        :type current_legacy_sku_id: str
        """

        self._current_legacy_sku_id = current_legacy_sku_id

    @property
    def minimum_transferable_seats(self):
        """Gets the minimum_transferable_seats of this SubscriptionTransferInfo.

        When inserting a subscription, this is the minimum number of seats listed in the transfer order for this product. For example, if the customer has 20 users, the reseller cannot place a transfer order of 15 seats. The minimum is 20 seats.

        :return: The minimum_transferable_seats of this SubscriptionTransferInfo.
        :rtype: int
        """
        return self._minimum_transferable_seats

    @minimum_transferable_seats.setter
    def minimum_transferable_seats(self, minimum_transferable_seats):
        """Sets the minimum_transferable_seats of this SubscriptionTransferInfo.

        When inserting a subscription, this is the minimum number of seats listed in the transfer order for this product. For example, if the customer has 20 users, the reseller cannot place a transfer order of 15 seats. The minimum is 20 seats.

        :param minimum_transferable_seats: The minimum_transferable_seats of this SubscriptionTransferInfo.
        :type minimum_transferable_seats: int
        """

        self._minimum_transferable_seats = minimum_transferable_seats

    @property
    def transferability_expiration_time(self):
        """Gets the transferability_expiration_time of this SubscriptionTransferInfo.

        The time when transfer token or intent to transfer will expire. The time is in milliseconds using UNIX Epoch format.

        :return: The transferability_expiration_time of this SubscriptionTransferInfo.
        :rtype: str
        """
        return self._transferability_expiration_time

    @transferability_expiration_time.setter
    def transferability_expiration_time(self, transferability_expiration_time):
        """Sets the transferability_expiration_time of this SubscriptionTransferInfo.

        The time when transfer token or intent to transfer will expire. The time is in milliseconds using UNIX Epoch format.

        :param transferability_expiration_time: The transferability_expiration_time of this SubscriptionTransferInfo.
        :type transferability_expiration_time: str
        """

        self._transferability_expiration_time = transferability_expiration_time
