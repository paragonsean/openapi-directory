/*
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.PrimaryAdmin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * When a Google customer&#39;s account is registered with a reseller, the customer&#39;s subscriptions for Google services are managed by this reseller. A customer is described by a primary domain name and a physical address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:56.806136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Customer {
  public static final String SERIALIZED_NAME_ALTERNATE_EMAIL = "alternateEmail";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_EMAIL)
  private String alternateEmail;

  public static final String SERIALIZED_NAME_CUSTOMER_DOMAIN = "customerDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DOMAIN)
  private String customerDomain;

  public static final String SERIALIZED_NAME_CUSTOMER_DOMAIN_VERIFIED = "customerDomainVerified";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DOMAIN_VERIFIED)
  private Boolean customerDomainVerified;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  /**
   * Identifies the type of the customer. Acceptable values include: * &#x60;domain&#x60;: Implies a domain-verified customer (default). * &#x60;team&#x60;: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).
   */
  @JsonAdapter(CustomerTypeEnum.Adapter.class)
  public enum CustomerTypeEnum {
    CUSTOMER_TYPE_UNSPECIFIED("customerTypeUnspecified"),
    
    DOMAIN("domain"),
    
    TEAM("team");

    private String value;

    CustomerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerTypeEnum fromValue(String value) {
      for (CustomerTypeEnum b : CustomerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_TYPE = "customerType";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_TYPE)
  private CustomerTypeEnum customerType;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "reseller#customer";

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_POSTAL_ADDRESS = "postalAddress";
  @SerializedName(SERIALIZED_NAME_POSTAL_ADDRESS)
  private Address postalAddress;

  public static final String SERIALIZED_NAME_PRIMARY_ADMIN = "primaryAdmin";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ADMIN)
  private PrimaryAdmin primaryAdmin;

  public static final String SERIALIZED_NAME_RESOURCE_UI_URL = "resourceUiUrl";
  @SerializedName(SERIALIZED_NAME_RESOURCE_UI_URL)
  private String resourceUiUrl;

  public Customer() {
  }

  public Customer alternateEmail(String alternateEmail) {
    this.alternateEmail = alternateEmail;
    return this;
  }

  /**
   * Like the \&quot;Customer email\&quot; in the reseller tools, this email is the secondary contact used if something happens to the customer&#39;s service such as service outage or a security issue. This property is required when creating a new \&quot;domain\&quot; customer and should not use the same domain as &#x60;customerDomain&#x60;. The &#x60;alternateEmail&#x60; field is not necessary to create a \&quot;team\&quot; customer.
   * @return alternateEmail
   */
  @javax.annotation.Nullable
  public String getAlternateEmail() {
    return alternateEmail;
  }

  public void setAlternateEmail(String alternateEmail) {
    this.alternateEmail = alternateEmail;
  }


  public Customer customerDomain(String customerDomain) {
    this.customerDomain = customerDomain;
    return this;
  }

  /**
   * The customer&#39;s primary domain name string. &#x60;customerDomain&#x60; is required when creating a new customer. Do not include the &#x60;www&#x60; prefix in the domain when adding a customer.
   * @return customerDomain
   */
  @javax.annotation.Nullable
  public String getCustomerDomain() {
    return customerDomain;
  }

  public void setCustomerDomain(String customerDomain) {
    this.customerDomain = customerDomain;
  }


  public Customer customerDomainVerified(Boolean customerDomainVerified) {
    this.customerDomainVerified = customerDomainVerified;
    return this;
  }

  /**
   * Whether the customer&#39;s primary domain has been verified.
   * @return customerDomainVerified
   */
  @javax.annotation.Nullable
  public Boolean getCustomerDomainVerified() {
    return customerDomainVerified;
  }

  public void setCustomerDomainVerified(Boolean customerDomainVerified) {
    this.customerDomainVerified = customerDomainVerified;
  }


  public Customer customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Customer customerType(CustomerTypeEnum customerType) {
    this.customerType = customerType;
    return this;
  }

  /**
   * Identifies the type of the customer. Acceptable values include: * &#x60;domain&#x60;: Implies a domain-verified customer (default). * &#x60;team&#x60;: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).
   * @return customerType
   */
  @javax.annotation.Nullable
  public CustomerTypeEnum getCustomerType() {
    return customerType;
  }

  public void setCustomerType(CustomerTypeEnum customerType) {
    this.customerType = customerType;
  }


  public Customer kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies the resource as a customer. Value: &#x60;reseller#customer&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Customer phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Customer contact phone number. Must start with \&quot;+\&quot; followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, \&quot;123\&quot;. This field is silently ignored if invalid.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public Customer postalAddress(Address postalAddress) {
    this.postalAddress = postalAddress;
    return this;
  }

  /**
   * Get postalAddress
   * @return postalAddress
   */
  @javax.annotation.Nullable
  public Address getPostalAddress() {
    return postalAddress;
  }

  public void setPostalAddress(Address postalAddress) {
    this.postalAddress = postalAddress;
  }


  public Customer primaryAdmin(PrimaryAdmin primaryAdmin) {
    this.primaryAdmin = primaryAdmin;
    return this;
  }

  /**
   * Get primaryAdmin
   * @return primaryAdmin
   */
  @javax.annotation.Nullable
  public PrimaryAdmin getPrimaryAdmin() {
    return primaryAdmin;
  }

  public void setPrimaryAdmin(PrimaryAdmin primaryAdmin) {
    this.primaryAdmin = primaryAdmin;
  }


  public Customer resourceUiUrl(String resourceUiUrl) {
    this.resourceUiUrl = resourceUiUrl;
    return this;
  }

  /**
   * URL to customer&#39;s Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.
   * @return resourceUiUrl
   */
  @javax.annotation.Nullable
  public String getResourceUiUrl() {
    return resourceUiUrl;
  }

  public void setResourceUiUrl(String resourceUiUrl) {
    this.resourceUiUrl = resourceUiUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Customer customer = (Customer) o;
    return Objects.equals(this.alternateEmail, customer.alternateEmail) &&
        Objects.equals(this.customerDomain, customer.customerDomain) &&
        Objects.equals(this.customerDomainVerified, customer.customerDomainVerified) &&
        Objects.equals(this.customerId, customer.customerId) &&
        Objects.equals(this.customerType, customer.customerType) &&
        Objects.equals(this.kind, customer.kind) &&
        Objects.equals(this.phoneNumber, customer.phoneNumber) &&
        Objects.equals(this.postalAddress, customer.postalAddress) &&
        Objects.equals(this.primaryAdmin, customer.primaryAdmin) &&
        Objects.equals(this.resourceUiUrl, customer.resourceUiUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateEmail, customerDomain, customerDomainVerified, customerId, customerType, kind, phoneNumber, postalAddress, primaryAdmin, resourceUiUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Customer {\n");
    sb.append("    alternateEmail: ").append(toIndentedString(alternateEmail)).append("\n");
    sb.append("    customerDomain: ").append(toIndentedString(customerDomain)).append("\n");
    sb.append("    customerDomainVerified: ").append(toIndentedString(customerDomainVerified)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    customerType: ").append(toIndentedString(customerType)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    postalAddress: ").append(toIndentedString(postalAddress)).append("\n");
    sb.append("    primaryAdmin: ").append(toIndentedString(primaryAdmin)).append("\n");
    sb.append("    resourceUiUrl: ").append(toIndentedString(resourceUiUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateEmail");
    openapiFields.add("customerDomain");
    openapiFields.add("customerDomainVerified");
    openapiFields.add("customerId");
    openapiFields.add("customerType");
    openapiFields.add("kind");
    openapiFields.add("phoneNumber");
    openapiFields.add("postalAddress");
    openapiFields.add("primaryAdmin");
    openapiFields.add("resourceUiUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Customer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Customer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Customer is not found in the empty JSON string", Customer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Customer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Customer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateEmail") != null && !jsonObj.get("alternateEmail").isJsonNull()) && !jsonObj.get("alternateEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateEmail").toString()));
      }
      if ((jsonObj.get("customerDomain") != null && !jsonObj.get("customerDomain").isJsonNull()) && !jsonObj.get("customerDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerDomain").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) && !jsonObj.get("customerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerType").toString()));
      }
      // validate the optional field `customerType`
      if (jsonObj.get("customerType") != null && !jsonObj.get("customerType").isJsonNull()) {
        CustomerTypeEnum.validateJsonElement(jsonObj.get("customerType"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      // validate the optional field `postalAddress`
      if (jsonObj.get("postalAddress") != null && !jsonObj.get("postalAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("postalAddress"));
      }
      // validate the optional field `primaryAdmin`
      if (jsonObj.get("primaryAdmin") != null && !jsonObj.get("primaryAdmin").isJsonNull()) {
        PrimaryAdmin.validateJsonElement(jsonObj.get("primaryAdmin"));
      }
      if ((jsonObj.get("resourceUiUrl") != null && !jsonObj.get("resourceUiUrl").isJsonNull()) && !jsonObj.get("resourceUiUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUiUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUiUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Customer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Customer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Customer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Customer.class));

       return (TypeAdapter<T>) new TypeAdapter<Customer>() {
           @Override
           public void write(JsonWriter out, Customer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Customer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Customer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Customer
   * @throws IOException if the JSON string is invalid with respect to Customer
   */
  public static Customer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Customer.class);
  }

  /**
   * Convert an instance of Customer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

