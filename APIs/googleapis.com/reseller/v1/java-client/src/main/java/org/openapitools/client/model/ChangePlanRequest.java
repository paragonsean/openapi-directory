/*
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Seats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for the ChangePlan rpc request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:56.806136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangePlanRequest {
  public static final String SERIALIZED_NAME_DEAL_CODE = "dealCode";
  @SerializedName(SERIALIZED_NAME_DEAL_CODE)
  private String dealCode;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "subscriptions#changePlanRequest";

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_ID = "purchaseOrderId";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_ID)
  private String purchaseOrderId;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private Seats seats;

  public ChangePlanRequest() {
  }

  public ChangePlanRequest dealCode(String dealCode) {
    this.dealCode = dealCode;
    return this;
  }

  /**
   * Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in &#x60;changePlan&#x60; request in order to receive discounted rate. This property is optional. If a deal code has already been added to a subscription, this property may be left empty and the existing discounted rate will still apply (if not empty, only provide the deal code that is already present on the subscription). If a deal code has never been added to a subscription and this property is left blank, regular pricing will apply.
   * @return dealCode
   */
  @javax.annotation.Nullable
  public String getDealCode() {
    return dealCode;
  }

  public void setDealCode(String dealCode) {
    this.dealCode = dealCode;
  }


  public ChangePlanRequest kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies the resource as a subscription change plan request. Value: &#x60;subscriptions#changePlanRequest&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ChangePlanRequest planName(String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * The &#x60;planName&#x60; property is required. This is the name of the subscription&#39;s payment plan. For more information about the Google payment plans, see API concepts. Possible values are: - &#x60;ANNUAL_MONTHLY_PAY&#x60; - The annual commitment plan with monthly payments *Caution: *&#x60;ANNUAL_MONTHLY_PAY&#x60; is returned as &#x60;ANNUAL&#x60; in all API responses. - &#x60;ANNUAL_YEARLY_PAY&#x60; - The annual commitment plan with yearly payments - &#x60;FLEXIBLE&#x60; - The flexible plan - &#x60;TRIAL&#x60; - The 30-day free trial plan 
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(String planName) {
    this.planName = planName;
  }


  public ChangePlanRequest purchaseOrderId(String purchaseOrderId) {
    this.purchaseOrderId = purchaseOrderId;
    return this;
  }

  /**
   * This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a &#x60;purchaseOrderId&#x60; value is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.
   * @return purchaseOrderId
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderId() {
    return purchaseOrderId;
  }

  public void setPurchaseOrderId(String purchaseOrderId) {
    this.purchaseOrderId = purchaseOrderId;
  }


  public ChangePlanRequest seats(Seats seats) {
    this.seats = seats;
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public Seats getSeats() {
    return seats;
  }

  public void setSeats(Seats seats) {
    this.seats = seats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangePlanRequest changePlanRequest = (ChangePlanRequest) o;
    return Objects.equals(this.dealCode, changePlanRequest.dealCode) &&
        Objects.equals(this.kind, changePlanRequest.kind) &&
        Objects.equals(this.planName, changePlanRequest.planName) &&
        Objects.equals(this.purchaseOrderId, changePlanRequest.purchaseOrderId) &&
        Objects.equals(this.seats, changePlanRequest.seats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dealCode, kind, planName, purchaseOrderId, seats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangePlanRequest {\n");
    sb.append("    dealCode: ").append(toIndentedString(dealCode)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("    purchaseOrderId: ").append(toIndentedString(purchaseOrderId)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dealCode");
    openapiFields.add("kind");
    openapiFields.add("planName");
    openapiFields.add("purchaseOrderId");
    openapiFields.add("seats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangePlanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangePlanRequest is not found in the empty JSON string", ChangePlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangePlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangePlanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dealCode") != null && !jsonObj.get("dealCode").isJsonNull()) && !jsonObj.get("dealCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealCode").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull()) && !jsonObj.get("planName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planName").toString()));
      }
      if ((jsonObj.get("purchaseOrderId") != null && !jsonObj.get("purchaseOrderId").isJsonNull()) && !jsonObj.get("purchaseOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderId").toString()));
      }
      // validate the optional field `seats`
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        Seats.validateJsonElement(jsonObj.get("seats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangePlanRequest>() {
           @Override
           public void write(JsonWriter out, ChangePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangePlanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangePlanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangePlanRequest
   * @throws IOException if the JSON string is invalid with respect to ChangePlanRequest
   */
  public static ChangePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangePlanRequest.class);
  }

  /**
   * Convert an instance of ChangePlanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

