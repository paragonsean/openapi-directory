/*
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RenewalSettings;
import org.openapitools.client.model.Seats;
import org.openapitools.client.model.SubscriptionPlan;
import org.openapitools.client.model.SubscriptionTransferInfo;
import org.openapitools.client.model.SubscriptionTrialSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for a subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:56.806136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Subscription {
  public static final String SERIALIZED_NAME_BILLING_METHOD = "billingMethod";
  @SerializedName(SERIALIZED_NAME_BILLING_METHOD)
  private String billingMethod;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_CUSTOMER_DOMAIN = "customerDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_DOMAIN)
  private String customerDomain;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DEAL_CODE = "dealCode";
  @SerializedName(SERIALIZED_NAME_DEAL_CODE)
  private String dealCode;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "reseller#subscription";

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private SubscriptionPlan plan;

  public static final String SERIALIZED_NAME_PURCHASE_ORDER_ID = "purchaseOrderId";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ORDER_ID)
  private String purchaseOrderId;

  public static final String SERIALIZED_NAME_RENEWAL_SETTINGS = "renewalSettings";
  @SerializedName(SERIALIZED_NAME_RENEWAL_SETTINGS)
  private RenewalSettings renewalSettings;

  public static final String SERIALIZED_NAME_RESOURCE_UI_URL = "resourceUiUrl";
  @SerializedName(SERIALIZED_NAME_RESOURCE_UI_URL)
  private String resourceUiUrl;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private Seats seats;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SUSPENSION_REASONS = "suspensionReasons";
  @SerializedName(SERIALIZED_NAME_SUSPENSION_REASONS)
  private List<String> suspensionReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSFER_INFO = "transferInfo";
  @SerializedName(SERIALIZED_NAME_TRANSFER_INFO)
  private SubscriptionTransferInfo transferInfo;

  public static final String SERIALIZED_NAME_TRIAL_SETTINGS = "trialSettings";
  @SerializedName(SERIALIZED_NAME_TRIAL_SETTINGS)
  private SubscriptionTrialSettings trialSettings;

  public Subscription() {
  }

  public Subscription billingMethod(String billingMethod) {
    this.billingMethod = billingMethod;
    return this;
  }

  /**
   * Read-only field that returns the current billing method for a subscription.
   * @return billingMethod
   */
  @javax.annotation.Nullable
  public String getBillingMethod() {
    return billingMethod;
  }

  public void setBillingMethod(String billingMethod) {
    this.billingMethod = billingMethod;
  }


  public Subscription creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The &#x60;creationTime&#x60; property is the date when subscription was created. It is in milliseconds using the Epoch format. See an example Epoch converter.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public Subscription customerDomain(String customerDomain) {
    this.customerDomain = customerDomain;
    return this;
  }

  /**
   * Primary domain name of the customer
   * @return customerDomain
   */
  @javax.annotation.Nullable
  public String getCustomerDomain() {
    return customerDomain;
  }

  public void setCustomerDomain(String customerDomain) {
    this.customerDomain = customerDomain;
  }


  public Subscription customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Subscription dealCode(String dealCode) {
    this.dealCode = dealCode;
    return this;
  }

  /**
   * Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in &#x60;insert&#x60; requests in order to receive discounted rate. This property is optional, regular pricing applies if left empty.
   * @return dealCode
   */
  @javax.annotation.Nullable
  public String getDealCode() {
    return dealCode;
  }

  public void setDealCode(String dealCode) {
    this.dealCode = dealCode;
  }


  public Subscription kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies the resource as a Subscription. Value: &#x60;reseller#subscription&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Subscription plan(SubscriptionPlan plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public SubscriptionPlan getPlan() {
    return plan;
  }

  public void setPlan(SubscriptionPlan plan) {
    this.plan = plan;
  }


  public Subscription purchaseOrderId(String purchaseOrderId) {
    this.purchaseOrderId = purchaseOrderId;
    return this;
  }

  /**
   * This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a &#x60;purchaseOrderId&#x60; value is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.
   * @return purchaseOrderId
   */
  @javax.annotation.Nullable
  public String getPurchaseOrderId() {
    return purchaseOrderId;
  }

  public void setPurchaseOrderId(String purchaseOrderId) {
    this.purchaseOrderId = purchaseOrderId;
  }


  public Subscription renewalSettings(RenewalSettings renewalSettings) {
    this.renewalSettings = renewalSettings;
    return this;
  }

  /**
   * Get renewalSettings
   * @return renewalSettings
   */
  @javax.annotation.Nullable
  public RenewalSettings getRenewalSettings() {
    return renewalSettings;
  }

  public void setRenewalSettings(RenewalSettings renewalSettings) {
    this.renewalSettings = renewalSettings;
  }


  public Subscription resourceUiUrl(String resourceUiUrl) {
    this.resourceUiUrl = resourceUiUrl;
    return this;
  }

  /**
   * URL to customer&#39;s Subscriptions page in the Admin console. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task using the Subscriptions page in the Admin console.
   * @return resourceUiUrl
   */
  @javax.annotation.Nullable
  public String getResourceUiUrl() {
    return resourceUiUrl;
  }

  public void setResourceUiUrl(String resourceUiUrl) {
    this.resourceUiUrl = resourceUiUrl;
  }


  public Subscription seats(Seats seats) {
    this.seats = seats;
    return this;
  }

  /**
   * Get seats
   * @return seats
   */
  @javax.annotation.Nullable
  public Seats getSeats() {
    return seats;
  }

  public void setSeats(Seats seats) {
    this.seats = seats;
  }


  public Subscription skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * A required property. The &#x60;skuId&#x60; is a unique system identifier for a product&#39;s SKU assigned to a customer in the subscription. For products and SKUs available in this version of the API, see Product and SKU IDs.
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }


  public Subscription skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * Read-only external display name for a product&#39;s SKU assigned to a customer in the subscription. SKU names are subject to change at Google&#39;s discretion. For products and SKUs available in this version of the API, see Product and SKU IDs.
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }


  public Subscription status(String status) {
    this.status = status;
    return this;
  }

  /**
   * This is an optional property.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Subscription subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The &#x60;subscriptionId&#x60; is the subscription identifier and is unique for each customer. This is a required property. Since a &#x60;subscriptionId&#x60; changes when a subscription is updated, we recommend not using this ID as a key for persistent data. Use the &#x60;subscriptionId&#x60; as described in retrieve all reseller subscriptions.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public Subscription suspensionReasons(List<String> suspensionReasons) {
    this.suspensionReasons = suspensionReasons;
    return this;
  }

  public Subscription addSuspensionReasonsItem(String suspensionReasonsItem) {
    if (this.suspensionReasons == null) {
      this.suspensionReasons = new ArrayList<>();
    }
    this.suspensionReasons.add(suspensionReasonsItem);
    return this;
  }

  /**
   * Read-only field containing an enumerable of all the current suspension reasons for a subscription. It is possible for a subscription to have many concurrent, overlapping suspension reasons. A subscription&#39;s &#x60;STATUS&#x60; is &#x60;SUSPENDED&#x60; until all pending suspensions are removed. Possible options include: - &#x60;PENDING_TOS_ACCEPTANCE&#x60; - The customer has not logged in and accepted the G Suite Resold Terms of Services. - &#x60;RENEWAL_WITH_TYPE_CANCEL&#x60; - The customer&#39;s commitment ended and their service was cancelled at the end of their term. - &#x60;RESELLER_INITIATED&#x60; - A manual suspension invoked by a Reseller. - &#x60;TRIAL_ENDED&#x60; - The customer&#39;s trial expired without a plan selected. - &#x60;OTHER&#x60; - The customer is suspended for an internal Google reason (e.g. abuse or otherwise). 
   * @return suspensionReasons
   */
  @javax.annotation.Nullable
  public List<String> getSuspensionReasons() {
    return suspensionReasons;
  }

  public void setSuspensionReasons(List<String> suspensionReasons) {
    this.suspensionReasons = suspensionReasons;
  }


  public Subscription transferInfo(SubscriptionTransferInfo transferInfo) {
    this.transferInfo = transferInfo;
    return this;
  }

  /**
   * Get transferInfo
   * @return transferInfo
   */
  @javax.annotation.Nullable
  public SubscriptionTransferInfo getTransferInfo() {
    return transferInfo;
  }

  public void setTransferInfo(SubscriptionTransferInfo transferInfo) {
    this.transferInfo = transferInfo;
  }


  public Subscription trialSettings(SubscriptionTrialSettings trialSettings) {
    this.trialSettings = trialSettings;
    return this;
  }

  /**
   * Get trialSettings
   * @return trialSettings
   */
  @javax.annotation.Nullable
  public SubscriptionTrialSettings getTrialSettings() {
    return trialSettings;
  }

  public void setTrialSettings(SubscriptionTrialSettings trialSettings) {
    this.trialSettings = trialSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Subscription subscription = (Subscription) o;
    return Objects.equals(this.billingMethod, subscription.billingMethod) &&
        Objects.equals(this.creationTime, subscription.creationTime) &&
        Objects.equals(this.customerDomain, subscription.customerDomain) &&
        Objects.equals(this.customerId, subscription.customerId) &&
        Objects.equals(this.dealCode, subscription.dealCode) &&
        Objects.equals(this.kind, subscription.kind) &&
        Objects.equals(this.plan, subscription.plan) &&
        Objects.equals(this.purchaseOrderId, subscription.purchaseOrderId) &&
        Objects.equals(this.renewalSettings, subscription.renewalSettings) &&
        Objects.equals(this.resourceUiUrl, subscription.resourceUiUrl) &&
        Objects.equals(this.seats, subscription.seats) &&
        Objects.equals(this.skuId, subscription.skuId) &&
        Objects.equals(this.skuName, subscription.skuName) &&
        Objects.equals(this.status, subscription.status) &&
        Objects.equals(this.subscriptionId, subscription.subscriptionId) &&
        Objects.equals(this.suspensionReasons, subscription.suspensionReasons) &&
        Objects.equals(this.transferInfo, subscription.transferInfo) &&
        Objects.equals(this.trialSettings, subscription.trialSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingMethod, creationTime, customerDomain, customerId, dealCode, kind, plan, purchaseOrderId, renewalSettings, resourceUiUrl, seats, skuId, skuName, status, subscriptionId, suspensionReasons, transferInfo, trialSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Subscription {\n");
    sb.append("    billingMethod: ").append(toIndentedString(billingMethod)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    customerDomain: ").append(toIndentedString(customerDomain)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    dealCode: ").append(toIndentedString(dealCode)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    purchaseOrderId: ").append(toIndentedString(purchaseOrderId)).append("\n");
    sb.append("    renewalSettings: ").append(toIndentedString(renewalSettings)).append("\n");
    sb.append("    resourceUiUrl: ").append(toIndentedString(resourceUiUrl)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    suspensionReasons: ").append(toIndentedString(suspensionReasons)).append("\n");
    sb.append("    transferInfo: ").append(toIndentedString(transferInfo)).append("\n");
    sb.append("    trialSettings: ").append(toIndentedString(trialSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingMethod");
    openapiFields.add("creationTime");
    openapiFields.add("customerDomain");
    openapiFields.add("customerId");
    openapiFields.add("dealCode");
    openapiFields.add("kind");
    openapiFields.add("plan");
    openapiFields.add("purchaseOrderId");
    openapiFields.add("renewalSettings");
    openapiFields.add("resourceUiUrl");
    openapiFields.add("seats");
    openapiFields.add("skuId");
    openapiFields.add("skuName");
    openapiFields.add("status");
    openapiFields.add("subscriptionId");
    openapiFields.add("suspensionReasons");
    openapiFields.add("transferInfo");
    openapiFields.add("trialSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Subscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Subscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Subscription is not found in the empty JSON string", Subscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Subscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Subscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingMethod") != null && !jsonObj.get("billingMethod").isJsonNull()) && !jsonObj.get("billingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingMethod").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("customerDomain") != null && !jsonObj.get("customerDomain").isJsonNull()) && !jsonObj.get("customerDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerDomain").toString()));
      }
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if ((jsonObj.get("dealCode") != null && !jsonObj.get("dealCode").isJsonNull()) && !jsonObj.get("dealCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealCode").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `plan`
      if (jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) {
        SubscriptionPlan.validateJsonElement(jsonObj.get("plan"));
      }
      if ((jsonObj.get("purchaseOrderId") != null && !jsonObj.get("purchaseOrderId").isJsonNull()) && !jsonObj.get("purchaseOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseOrderId").toString()));
      }
      // validate the optional field `renewalSettings`
      if (jsonObj.get("renewalSettings") != null && !jsonObj.get("renewalSettings").isJsonNull()) {
        RenewalSettings.validateJsonElement(jsonObj.get("renewalSettings"));
      }
      if ((jsonObj.get("resourceUiUrl") != null && !jsonObj.get("resourceUiUrl").isJsonNull()) && !jsonObj.get("resourceUiUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceUiUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceUiUrl").toString()));
      }
      // validate the optional field `seats`
      if (jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) {
        Seats.validateJsonElement(jsonObj.get("seats"));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("suspensionReasons") != null && !jsonObj.get("suspensionReasons").isJsonNull() && !jsonObj.get("suspensionReasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspensionReasons` to be an array in the JSON string but got `%s`", jsonObj.get("suspensionReasons").toString()));
      }
      // validate the optional field `transferInfo`
      if (jsonObj.get("transferInfo") != null && !jsonObj.get("transferInfo").isJsonNull()) {
        SubscriptionTransferInfo.validateJsonElement(jsonObj.get("transferInfo"));
      }
      // validate the optional field `trialSettings`
      if (jsonObj.get("trialSettings") != null && !jsonObj.get("trialSettings").isJsonNull()) {
        SubscriptionTrialSettings.validateJsonElement(jsonObj.get("trialSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Subscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Subscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Subscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Subscription.class));

       return (TypeAdapter<T>) new TypeAdapter<Subscription>() {
           @Override
           public void write(JsonWriter out, Subscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Subscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Subscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Subscription
   * @throws IOException if the JSON string is invalid with respect to Subscription
   */
  public static Subscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Subscription.class);
  }

  /**
   * Convert an instance of Subscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

