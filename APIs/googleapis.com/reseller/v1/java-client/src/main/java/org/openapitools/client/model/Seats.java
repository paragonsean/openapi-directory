/*
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JSON template for subscription seats.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:56.806136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Seats {
  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "subscriptions#seats";

  public static final String SERIALIZED_NAME_LICENSED_NUMBER_OF_SEATS = "licensedNumberOfSeats";
  @SerializedName(SERIALIZED_NAME_LICENSED_NUMBER_OF_SEATS)
  private Integer licensedNumberOfSeats;

  public static final String SERIALIZED_NAME_MAXIMUM_NUMBER_OF_SEATS = "maximumNumberOfSeats";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NUMBER_OF_SEATS)
  private Integer maximumNumberOfSeats;

  public static final String SERIALIZED_NAME_NUMBER_OF_SEATS = "numberOfSeats";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SEATS)
  private Integer numberOfSeats;

  public Seats() {
  }

  public Seats kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies the resource as a subscription seat setting. Value: &#x60;subscriptions#seats&#x60;
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Seats licensedNumberOfSeats(Integer licensedNumberOfSeats) {
    this.licensedNumberOfSeats = licensedNumberOfSeats;
    return this;
  }

  /**
   * Read-only field containing the current number of users that are assigned a license for the product defined in &#x60;skuId&#x60;. This field&#39;s value is equivalent to the numerical count of users returned by the Enterprise License Manager API method: [&#x60;listForProductAndSku&#x60;](/admin-sdk/licensing/v1/reference/licenseAssignments/listForProductAndSku).
   * @return licensedNumberOfSeats
   */
  @javax.annotation.Nullable
  public Integer getLicensedNumberOfSeats() {
    return licensedNumberOfSeats;
  }

  public void setLicensedNumberOfSeats(Integer licensedNumberOfSeats) {
    this.licensedNumberOfSeats = licensedNumberOfSeats;
  }


  public Seats maximumNumberOfSeats(Integer maximumNumberOfSeats) {
    this.maximumNumberOfSeats = maximumNumberOfSeats;
    return this;
  }

  /**
   * This is a required property and is exclusive to subscriptions with &#x60;FLEXIBLE&#x60; or &#x60;TRIAL&#x60; plans. This property sets the maximum number of licensed users allowed on a subscription. This quantity can be increased up to the maximum limit defined in the reseller&#39;s contract. The minimum quantity is the current number of users in the customer account. *Note: *G Suite subscriptions automatically assign a license to every user.
   * @return maximumNumberOfSeats
   */
  @javax.annotation.Nullable
  public Integer getMaximumNumberOfSeats() {
    return maximumNumberOfSeats;
  }

  public void setMaximumNumberOfSeats(Integer maximumNumberOfSeats) {
    this.maximumNumberOfSeats = maximumNumberOfSeats;
  }


  public Seats numberOfSeats(Integer numberOfSeats) {
    this.numberOfSeats = numberOfSeats;
    return this;
  }

  /**
   * This is a required property and is exclusive to subscriptions with &#x60;ANNUAL_MONTHLY_PAY&#x60; and &#x60;ANNUAL_YEARLY_PAY&#x60; plans. This property sets the maximum number of licenses assignable to users on a subscription. The reseller can add more licenses, but once set, the &#x60;numberOfSeats&#x60; cannot be reduced until renewal. The reseller is invoiced based on the &#x60;numberOfSeats&#x60; value regardless of how many of these user licenses are assigned. *Note: *Google Workspace subscriptions automatically assign a license to every user.
   * @return numberOfSeats
   */
  @javax.annotation.Nullable
  public Integer getNumberOfSeats() {
    return numberOfSeats;
  }

  public void setNumberOfSeats(Integer numberOfSeats) {
    this.numberOfSeats = numberOfSeats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Seats seats = (Seats) o;
    return Objects.equals(this.kind, seats.kind) &&
        Objects.equals(this.licensedNumberOfSeats, seats.licensedNumberOfSeats) &&
        Objects.equals(this.maximumNumberOfSeats, seats.maximumNumberOfSeats) &&
        Objects.equals(this.numberOfSeats, seats.numberOfSeats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, licensedNumberOfSeats, maximumNumberOfSeats, numberOfSeats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Seats {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    licensedNumberOfSeats: ").append(toIndentedString(licensedNumberOfSeats)).append("\n");
    sb.append("    maximumNumberOfSeats: ").append(toIndentedString(maximumNumberOfSeats)).append("\n");
    sb.append("    numberOfSeats: ").append(toIndentedString(numberOfSeats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kind");
    openapiFields.add("licensedNumberOfSeats");
    openapiFields.add("maximumNumberOfSeats");
    openapiFields.add("numberOfSeats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Seats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Seats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Seats is not found in the empty JSON string", Seats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Seats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Seats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Seats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Seats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Seats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Seats.class));

       return (TypeAdapter<T>) new TypeAdapter<Seats>() {
           @Override
           public void write(JsonWriter out, Seats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Seats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Seats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Seats
   * @throws IOException if the JSON string is invalid with respect to Seats
   */
  public static Seats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Seats.class);
  }

  /**
   * Convert an instance of Seats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

