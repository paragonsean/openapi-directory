/*
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SubscriptionPlanCommitmentInterval;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The &#x60;plan&#x60; property is required. In this version of the API, the G Suite plans are the flexible plan, annual commitment plan, and the 30-day free trial plan. For more information about the API\&quot;s payment plans, see the API concepts.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:56.806136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionPlan {
  public static final String SERIALIZED_NAME_COMMITMENT_INTERVAL = "commitmentInterval";
  @SerializedName(SERIALIZED_NAME_COMMITMENT_INTERVAL)
  private SubscriptionPlanCommitmentInterval commitmentInterval;

  public static final String SERIALIZED_NAME_IS_COMMITMENT_PLAN = "isCommitmentPlan";
  @SerializedName(SERIALIZED_NAME_IS_COMMITMENT_PLAN)
  private Boolean isCommitmentPlan;

  public static final String SERIALIZED_NAME_PLAN_NAME = "planName";
  @SerializedName(SERIALIZED_NAME_PLAN_NAME)
  private String planName;

  public SubscriptionPlan() {
  }

  public SubscriptionPlan commitmentInterval(SubscriptionPlanCommitmentInterval commitmentInterval) {
    this.commitmentInterval = commitmentInterval;
    return this;
  }

  /**
   * Get commitmentInterval
   * @return commitmentInterval
   */
  @javax.annotation.Nullable
  public SubscriptionPlanCommitmentInterval getCommitmentInterval() {
    return commitmentInterval;
  }

  public void setCommitmentInterval(SubscriptionPlanCommitmentInterval commitmentInterval) {
    this.commitmentInterval = commitmentInterval;
  }


  public SubscriptionPlan isCommitmentPlan(Boolean isCommitmentPlan) {
    this.isCommitmentPlan = isCommitmentPlan;
    return this;
  }

  /**
   * The &#x60;isCommitmentPlan&#x60; property&#39;s boolean value identifies the plan as an annual commitment plan: - &#x60;true&#x60; — The subscription&#39;s plan is an annual commitment plan. - &#x60;false&#x60; — The plan is not an annual commitment plan. 
   * @return isCommitmentPlan
   */
  @javax.annotation.Nullable
  public Boolean getIsCommitmentPlan() {
    return isCommitmentPlan;
  }

  public void setIsCommitmentPlan(Boolean isCommitmentPlan) {
    this.isCommitmentPlan = isCommitmentPlan;
  }


  public SubscriptionPlan planName(String planName) {
    this.planName = planName;
    return this;
  }

  /**
   * The &#x60;planName&#x60; property is required. This is the name of the subscription&#39;s plan. For more information about the Google payment plans, see the API concepts. Possible values are: - &#x60;ANNUAL_MONTHLY_PAY&#x60; — The annual commitment plan with monthly payments. *Caution: *&#x60;ANNUAL_MONTHLY_PAY&#x60; is returned as &#x60;ANNUAL&#x60; in all API responses. - &#x60;ANNUAL_YEARLY_PAY&#x60; — The annual commitment plan with yearly payments - &#x60;FLEXIBLE&#x60; — The flexible plan - &#x60;TRIAL&#x60; — The 30-day free trial plan. A subscription in trial will be suspended after the 30th free day if no payment plan is assigned. Calling &#x60;changePlan&#x60; will assign a payment plan to a trial but will not activate the plan. A trial will automatically begin its assigned payment plan after its 30th free day or immediately after calling &#x60;startPaidService&#x60;. - &#x60;FREE&#x60; — The free plan is exclusive to the Cloud Identity SKU and does not incur any billing. 
   * @return planName
   */
  @javax.annotation.Nullable
  public String getPlanName() {
    return planName;
  }

  public void setPlanName(String planName) {
    this.planName = planName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionPlan subscriptionPlan = (SubscriptionPlan) o;
    return Objects.equals(this.commitmentInterval, subscriptionPlan.commitmentInterval) &&
        Objects.equals(this.isCommitmentPlan, subscriptionPlan.isCommitmentPlan) &&
        Objects.equals(this.planName, subscriptionPlan.planName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitmentInterval, isCommitmentPlan, planName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionPlan {\n");
    sb.append("    commitmentInterval: ").append(toIndentedString(commitmentInterval)).append("\n");
    sb.append("    isCommitmentPlan: ").append(toIndentedString(isCommitmentPlan)).append("\n");
    sb.append("    planName: ").append(toIndentedString(planName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commitmentInterval");
    openapiFields.add("isCommitmentPlan");
    openapiFields.add("planName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionPlan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionPlan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionPlan is not found in the empty JSON string", SubscriptionPlan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionPlan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionPlan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commitmentInterval`
      if (jsonObj.get("commitmentInterval") != null && !jsonObj.get("commitmentInterval").isJsonNull()) {
        SubscriptionPlanCommitmentInterval.validateJsonElement(jsonObj.get("commitmentInterval"));
      }
      if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull()) && !jsonObj.get("planName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `planName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("planName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionPlan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionPlan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionPlan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionPlan.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionPlan>() {
           @Override
           public void write(JsonWriter out, SubscriptionPlan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionPlan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionPlan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionPlan
   * @throws IOException if the JSON string is invalid with respect to SubscriptionPlan
   */
  public static SubscriptionPlan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionPlan.class);
  }

  /**
   * Convert an instance of SubscriptionPlan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

