/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RenewalSettings from './RenewalSettings';
import Seats from './Seats';
import SubscriptionPlan from './SubscriptionPlan';
import SubscriptionTransferInfo from './SubscriptionTransferInfo';
import SubscriptionTrialSettings from './SubscriptionTrialSettings';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version v1
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * JSON template for a subscription.
     * @alias module:model/Subscription
     */
    constructor() { 
        
        Subscription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'reseller#subscription';
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('billingMethod')) {
                obj['billingMethod'] = ApiClient.convertToType(data['billingMethod'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('customerDomain')) {
                obj['customerDomain'] = ApiClient.convertToType(data['customerDomain'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('dealCode')) {
                obj['dealCode'] = ApiClient.convertToType(data['dealCode'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = SubscriptionPlan.constructFromObject(data['plan']);
            }
            if (data.hasOwnProperty('purchaseOrderId')) {
                obj['purchaseOrderId'] = ApiClient.convertToType(data['purchaseOrderId'], 'String');
            }
            if (data.hasOwnProperty('renewalSettings')) {
                obj['renewalSettings'] = RenewalSettings.constructFromObject(data['renewalSettings']);
            }
            if (data.hasOwnProperty('resourceUiUrl')) {
                obj['resourceUiUrl'] = ApiClient.convertToType(data['resourceUiUrl'], 'String');
            }
            if (data.hasOwnProperty('seats')) {
                obj['seats'] = Seats.constructFromObject(data['seats']);
            }
            if (data.hasOwnProperty('skuId')) {
                obj['skuId'] = ApiClient.convertToType(data['skuId'], 'String');
            }
            if (data.hasOwnProperty('skuName')) {
                obj['skuName'] = ApiClient.convertToType(data['skuName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('suspensionReasons')) {
                obj['suspensionReasons'] = ApiClient.convertToType(data['suspensionReasons'], ['String']);
            }
            if (data.hasOwnProperty('transferInfo')) {
                obj['transferInfo'] = SubscriptionTransferInfo.constructFromObject(data['transferInfo']);
            }
            if (data.hasOwnProperty('trialSettings')) {
                obj['trialSettings'] = SubscriptionTrialSettings.constructFromObject(data['trialSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['billingMethod'] && !(typeof data['billingMethod'] === 'string' || data['billingMethod'] instanceof String)) {
            throw new Error("Expected the field `billingMethod` to be a primitive type in the JSON string but got " + data['billingMethod']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['customerDomain'] && !(typeof data['customerDomain'] === 'string' || data['customerDomain'] instanceof String)) {
            throw new Error("Expected the field `customerDomain` to be a primitive type in the JSON string but got " + data['customerDomain']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['dealCode'] && !(typeof data['dealCode'] === 'string' || data['dealCode'] instanceof String)) {
            throw new Error("Expected the field `dealCode` to be a primitive type in the JSON string but got " + data['dealCode']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `plan`
        if (data['plan']) { // data not null
          SubscriptionPlan.validateJSON(data['plan']);
        }
        // ensure the json data is a string
        if (data['purchaseOrderId'] && !(typeof data['purchaseOrderId'] === 'string' || data['purchaseOrderId'] instanceof String)) {
            throw new Error("Expected the field `purchaseOrderId` to be a primitive type in the JSON string but got " + data['purchaseOrderId']);
        }
        // validate the optional field `renewalSettings`
        if (data['renewalSettings']) { // data not null
          RenewalSettings.validateJSON(data['renewalSettings']);
        }
        // ensure the json data is a string
        if (data['resourceUiUrl'] && !(typeof data['resourceUiUrl'] === 'string' || data['resourceUiUrl'] instanceof String)) {
            throw new Error("Expected the field `resourceUiUrl` to be a primitive type in the JSON string but got " + data['resourceUiUrl']);
        }
        // validate the optional field `seats`
        if (data['seats']) { // data not null
          Seats.validateJSON(data['seats']);
        }
        // ensure the json data is a string
        if (data['skuId'] && !(typeof data['skuId'] === 'string' || data['skuId'] instanceof String)) {
            throw new Error("Expected the field `skuId` to be a primitive type in the JSON string but got " + data['skuId']);
        }
        // ensure the json data is a string
        if (data['skuName'] && !(typeof data['skuName'] === 'string' || data['skuName'] instanceof String)) {
            throw new Error("Expected the field `skuName` to be a primitive type in the JSON string but got " + data['skuName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['suspensionReasons'])) {
            throw new Error("Expected the field `suspensionReasons` to be an array in the JSON data but got " + data['suspensionReasons']);
        }
        // validate the optional field `transferInfo`
        if (data['transferInfo']) { // data not null
          SubscriptionTransferInfo.validateJSON(data['transferInfo']);
        }
        // validate the optional field `trialSettings`
        if (data['trialSettings']) { // data not null
          SubscriptionTrialSettings.validateJSON(data['trialSettings']);
        }

        return true;
    }


}



/**
 * Read-only field that returns the current billing method for a subscription.
 * @member {String} billingMethod
 */
Subscription.prototype['billingMethod'] = undefined;

/**
 * The `creationTime` property is the date when subscription was created. It is in milliseconds using the Epoch format. See an example Epoch converter.
 * @member {String} creationTime
 */
Subscription.prototype['creationTime'] = undefined;

/**
 * Primary domain name of the customer
 * @member {String} customerDomain
 */
Subscription.prototype['customerDomain'] = undefined;

/**
 * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.
 * @member {String} customerId
 */
Subscription.prototype['customerId'] = undefined;

/**
 * Google-issued code (100 char max) for discounted pricing on subscription plans. Deal code must be included in `insert` requests in order to receive discounted rate. This property is optional, regular pricing applies if left empty.
 * @member {String} dealCode
 */
Subscription.prototype['dealCode'] = undefined;

/**
 * Identifies the resource as a Subscription. Value: `reseller#subscription`
 * @member {String} kind
 * @default 'reseller#subscription'
 */
Subscription.prototype['kind'] = 'reseller#subscription';

/**
 * @member {module:model/SubscriptionPlan} plan
 */
Subscription.prototype['plan'] = undefined;

/**
 * This is an optional property. This purchase order (PO) information is for resellers to use for their company tracking usage. If a `purchaseOrderId` value is given it appears in the API responses and shows up in the invoice. The property accepts up to 80 plain text characters.
 * @member {String} purchaseOrderId
 */
Subscription.prototype['purchaseOrderId'] = undefined;

/**
 * @member {module:model/RenewalSettings} renewalSettings
 */
Subscription.prototype['renewalSettings'] = undefined;

/**
 * URL to customer's Subscriptions page in the Admin console. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task using the Subscriptions page in the Admin console.
 * @member {String} resourceUiUrl
 */
Subscription.prototype['resourceUiUrl'] = undefined;

/**
 * @member {module:model/Seats} seats
 */
Subscription.prototype['seats'] = undefined;

/**
 * A required property. The `skuId` is a unique system identifier for a product's SKU assigned to a customer in the subscription. For products and SKUs available in this version of the API, see Product and SKU IDs.
 * @member {String} skuId
 */
Subscription.prototype['skuId'] = undefined;

/**
 * Read-only external display name for a product's SKU assigned to a customer in the subscription. SKU names are subject to change at Google's discretion. For products and SKUs available in this version of the API, see Product and SKU IDs.
 * @member {String} skuName
 */
Subscription.prototype['skuName'] = undefined;

/**
 * This is an optional property.
 * @member {String} status
 */
Subscription.prototype['status'] = undefined;

/**
 * The `subscriptionId` is the subscription identifier and is unique for each customer. This is a required property. Since a `subscriptionId` changes when a subscription is updated, we recommend not using this ID as a key for persistent data. Use the `subscriptionId` as described in retrieve all reseller subscriptions.
 * @member {String} subscriptionId
 */
Subscription.prototype['subscriptionId'] = undefined;

/**
 * Read-only field containing an enumerable of all the current suspension reasons for a subscription. It is possible for a subscription to have many concurrent, overlapping suspension reasons. A subscription's `STATUS` is `SUSPENDED` until all pending suspensions are removed. Possible options include: - `PENDING_TOS_ACCEPTANCE` - The customer has not logged in and accepted the G Suite Resold Terms of Services. - `RENEWAL_WITH_TYPE_CANCEL` - The customer's commitment ended and their service was cancelled at the end of their term. - `RESELLER_INITIATED` - A manual suspension invoked by a Reseller. - `TRIAL_ENDED` - The customer's trial expired without a plan selected. - `OTHER` - The customer is suspended for an internal Google reason (e.g. abuse or otherwise). 
 * @member {Array.<String>} suspensionReasons
 */
Subscription.prototype['suspensionReasons'] = undefined;

/**
 * @member {module:model/SubscriptionTransferInfo} transferInfo
 */
Subscription.prototype['transferInfo'] = undefined;

/**
 * @member {module:model/SubscriptionTrialSettings} trialSettings
 */
Subscription.prototype['trialSettings'] = undefined;






export default Subscription;

