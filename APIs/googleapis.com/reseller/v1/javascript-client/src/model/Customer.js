/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import PrimaryAdmin from './PrimaryAdmin';

/**
 * The Customer model module.
 * @module model/Customer
 * @version v1
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * When a Google customer&#39;s account is registered with a reseller, the customer&#39;s subscriptions for Google services are managed by this reseller. A customer is described by a primary domain name and a physical address.
     * @alias module:model/Customer
     */
    constructor() { 
        
        Customer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'reseller#customer';
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('alternateEmail')) {
                obj['alternateEmail'] = ApiClient.convertToType(data['alternateEmail'], 'String');
            }
            if (data.hasOwnProperty('customerDomain')) {
                obj['customerDomain'] = ApiClient.convertToType(data['customerDomain'], 'String');
            }
            if (data.hasOwnProperty('customerDomainVerified')) {
                obj['customerDomainVerified'] = ApiClient.convertToType(data['customerDomainVerified'], 'Boolean');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('customerType')) {
                obj['customerType'] = ApiClient.convertToType(data['customerType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('postalAddress')) {
                obj['postalAddress'] = Address.constructFromObject(data['postalAddress']);
            }
            if (data.hasOwnProperty('primaryAdmin')) {
                obj['primaryAdmin'] = PrimaryAdmin.constructFromObject(data['primaryAdmin']);
            }
            if (data.hasOwnProperty('resourceUiUrl')) {
                obj['resourceUiUrl'] = ApiClient.convertToType(data['resourceUiUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateEmail'] && !(typeof data['alternateEmail'] === 'string' || data['alternateEmail'] instanceof String)) {
            throw new Error("Expected the field `alternateEmail` to be a primitive type in the JSON string but got " + data['alternateEmail']);
        }
        // ensure the json data is a string
        if (data['customerDomain'] && !(typeof data['customerDomain'] === 'string' || data['customerDomain'] instanceof String)) {
            throw new Error("Expected the field `customerDomain` to be a primitive type in the JSON string but got " + data['customerDomain']);
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['customerType'] && !(typeof data['customerType'] === 'string' || data['customerType'] instanceof String)) {
            throw new Error("Expected the field `customerType` to be a primitive type in the JSON string but got " + data['customerType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // validate the optional field `postalAddress`
        if (data['postalAddress']) { // data not null
          Address.validateJSON(data['postalAddress']);
        }
        // validate the optional field `primaryAdmin`
        if (data['primaryAdmin']) { // data not null
          PrimaryAdmin.validateJSON(data['primaryAdmin']);
        }
        // ensure the json data is a string
        if (data['resourceUiUrl'] && !(typeof data['resourceUiUrl'] === 'string' || data['resourceUiUrl'] instanceof String)) {
            throw new Error("Expected the field `resourceUiUrl` to be a primitive type in the JSON string but got " + data['resourceUiUrl']);
        }

        return true;
    }


}



/**
 * Like the \"Customer email\" in the reseller tools, this email is the secondary contact used if something happens to the customer's service such as service outage or a security issue. This property is required when creating a new \"domain\" customer and should not use the same domain as `customerDomain`. The `alternateEmail` field is not necessary to create a \"team\" customer.
 * @member {String} alternateEmail
 */
Customer.prototype['alternateEmail'] = undefined;

/**
 * The customer's primary domain name string. `customerDomain` is required when creating a new customer. Do not include the `www` prefix in the domain when adding a customer.
 * @member {String} customerDomain
 */
Customer.prototype['customerDomain'] = undefined;

/**
 * Whether the customer's primary domain has been verified.
 * @member {Boolean} customerDomainVerified
 */
Customer.prototype['customerDomainVerified'] = undefined;

/**
 * This property will always be returned in a response as the unique identifier generated by Google. In a request, this property can be either the primary domain or the unique identifier generated by Google.
 * @member {String} customerId
 */
Customer.prototype['customerId'] = undefined;

/**
 * Identifies the type of the customer. Acceptable values include: * `domain`: Implies a domain-verified customer (default). * `team`: Implies an email-verified customer. For more information, see [managed teams](https://support.google.com/a/users/answer/9939479).
 * @member {module:model/Customer.CustomerTypeEnum} customerType
 */
Customer.prototype['customerType'] = undefined;

/**
 * Identifies the resource as a customer. Value: `reseller#customer`
 * @member {String} kind
 * @default 'reseller#customer'
 */
Customer.prototype['kind'] = 'reseller#customer';

/**
 * Customer contact phone number. Must start with \"+\" followed by the country code. The rest of the number can be contiguous numbers or respect the phone local format conventions, but it must be a real phone number and not, for example, \"123\". This field is silently ignored if invalid.
 * @member {String} phoneNumber
 */
Customer.prototype['phoneNumber'] = undefined;

/**
 * @member {module:model/Address} postalAddress
 */
Customer.prototype['postalAddress'] = undefined;

/**
 * @member {module:model/PrimaryAdmin} primaryAdmin
 */
Customer.prototype['primaryAdmin'] = undefined;

/**
 * URL to customer's Admin console dashboard. The read-only URL is generated by the API service. This is used if your client application requires the customer to complete a task in the Admin console.
 * @member {String} resourceUiUrl
 */
Customer.prototype['resourceUiUrl'] = undefined;





/**
 * Allowed values for the <code>customerType</code> property.
 * @enum {String}
 * @readonly
 */
Customer['CustomerTypeEnum'] = {

    /**
     * value: "customerTypeUnspecified"
     * @const
     */
    "customerTypeUnspecified": "customerTypeUnspecified",

    /**
     * value: "domain"
     * @const
     */
    "domain": "domain",

    /**
     * value: "team"
     * @const
     */
    "team": "team"
};



export default Customer;

