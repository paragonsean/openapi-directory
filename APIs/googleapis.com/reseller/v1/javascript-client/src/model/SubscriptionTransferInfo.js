/**
 * Google Workspace Reseller API
 * Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SubscriptionTransferInfo model module.
 * @module model/SubscriptionTransferInfo
 * @version v1
 */
class SubscriptionTransferInfo {
    /**
     * Constructs a new <code>SubscriptionTransferInfo</code>.
     * Read-only transfer related information for the subscription. For more information, see retrieve transferable subscriptions for a customer.
     * @alias module:model/SubscriptionTransferInfo
     */
    constructor() { 
        
        SubscriptionTransferInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SubscriptionTransferInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionTransferInfo} obj Optional instance to populate.
     * @return {module:model/SubscriptionTransferInfo} The populated <code>SubscriptionTransferInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionTransferInfo();

            if (data.hasOwnProperty('currentLegacySkuId')) {
                obj['currentLegacySkuId'] = ApiClient.convertToType(data['currentLegacySkuId'], 'String');
            }
            if (data.hasOwnProperty('minimumTransferableSeats')) {
                obj['minimumTransferableSeats'] = ApiClient.convertToType(data['minimumTransferableSeats'], 'Number');
            }
            if (data.hasOwnProperty('transferabilityExpirationTime')) {
                obj['transferabilityExpirationTime'] = ApiClient.convertToType(data['transferabilityExpirationTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionTransferInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionTransferInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currentLegacySkuId'] && !(typeof data['currentLegacySkuId'] === 'string' || data['currentLegacySkuId'] instanceof String)) {
            throw new Error("Expected the field `currentLegacySkuId` to be a primitive type in the JSON string but got " + data['currentLegacySkuId']);
        }
        // ensure the json data is a string
        if (data['transferabilityExpirationTime'] && !(typeof data['transferabilityExpirationTime'] === 'string' || data['transferabilityExpirationTime'] instanceof String)) {
            throw new Error("Expected the field `transferabilityExpirationTime` to be a primitive type in the JSON string but got " + data['transferabilityExpirationTime']);
        }

        return true;
    }


}



/**
 * The `skuId` of the current resold subscription. This is populated only when the customer has a subscription with a legacy SKU and the subscription resource is populated with the `skuId` of the SKU recommended for the transfer.
 * @member {String} currentLegacySkuId
 */
SubscriptionTransferInfo.prototype['currentLegacySkuId'] = undefined;

/**
 * When inserting a subscription, this is the minimum number of seats listed in the transfer order for this product. For example, if the customer has 20 users, the reseller cannot place a transfer order of 15 seats. The minimum is 20 seats.
 * @member {Number} minimumTransferableSeats
 */
SubscriptionTransferInfo.prototype['minimumTransferableSeats'] = undefined;

/**
 * The time when transfer token or intent to transfer will expire. The time is in milliseconds using UNIX Epoch format.
 * @member {String} transferabilityExpirationTime
 */
SubscriptionTransferInfo.prototype['transferabilityExpirationTime'] = undefined;






export default SubscriptionTransferInfo;

