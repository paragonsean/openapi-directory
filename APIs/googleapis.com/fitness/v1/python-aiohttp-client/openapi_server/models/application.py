# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Application(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details_url: str=None, name: str=None, package_name: str=None, version: str=None):
        """Application - a model defined in OpenAPI

        :param details_url: The details_url of this Application.
        :param name: The name of this Application.
        :param package_name: The package_name of this Application.
        :param version: The version of this Application.
        """
        self.openapi_types = {
            'details_url': str,
            'name': str,
            'package_name': str,
            'version': str
        }

        self.attribute_map = {
            'details_url': 'detailsUrl',
            'name': 'name',
            'package_name': 'packageName',
            'version': 'version'
        }

        self._details_url = details_url
        self._name = name
        self._package_name = package_name
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Application':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Application of this Application.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details_url(self):
        """Gets the details_url of this Application.

        An optional URI that can be used to link back to the application.

        :return: The details_url of this Application.
        :rtype: str
        """
        return self._details_url

    @details_url.setter
    def details_url(self, details_url):
        """Sets the details_url of this Application.

        An optional URI that can be used to link back to the application.

        :param details_url: The details_url of this Application.
        :type details_url: str
        """

        self._details_url = details_url

    @property
    def name(self):
        """Gets the name of this Application.

        The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source.

        :return: The name of this Application.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Application.

        The name of this application. This is required for REST clients, but we do not enforce uniqueness of this name. It is provided as a matter of convenience for other developers who would like to identify which REST created an Application or Data Source.

        :param name: The name of this Application.
        :type name: str
        """

        self._name = name

    @property
    def package_name(self):
        """Gets the package_name of this Application.

        Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName.

        :return: The package_name of this Application.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Application.

        Package name for this application. This is used as a unique identifier when created by Android applications, but cannot be specified by REST clients. REST clients will have their developer project number reflected into the Data Source data stream IDs, instead of the packageName.

        :param package_name: The package_name of this Application.
        :type package_name: str
        """

        self._package_name = package_name

    @property
    def version(self):
        """Gets the version of this Application.

        Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data.

        :return: The version of this Application.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Application.

        Version of the application. You should update this field whenever the application changes in a way that affects the computation of the data.

        :param version: The version of this Application.
        :type version: str
        """

        self._version = version
