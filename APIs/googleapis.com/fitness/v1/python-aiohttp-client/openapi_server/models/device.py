# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Device(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manufacturer: str=None, model: str=None, type: str=None, uid: str=None, version: str=None):
        """Device - a model defined in OpenAPI

        :param manufacturer: The manufacturer of this Device.
        :param model: The model of this Device.
        :param type: The type of this Device.
        :param uid: The uid of this Device.
        :param version: The version of this Device.
        """
        self.openapi_types = {
            'manufacturer': str,
            'model': str,
            'type': str,
            'uid': str,
            'version': str
        }

        self.attribute_map = {
            'manufacturer': 'manufacturer',
            'model': 'model',
            'type': 'type',
            'uid': 'uid',
            'version': 'version'
        }

        self._manufacturer = manufacturer
        self._model = model
        self._type = type
        self._uid = uid
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Device':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Device of this Device.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Device.

        Manufacturer of the product/hardware.

        :return: The manufacturer of this Device.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Device.

        Manufacturer of the product/hardware.

        :param manufacturer: The manufacturer of this Device.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this Device.

        End-user visible model name for the device.

        :return: The model of this Device.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Device.

        End-user visible model name for the device.

        :param model: The model of this Device.
        :type model: str
        """

        self._model = model

    @property
    def type(self):
        """Gets the type of this Device.

        A constant representing the type of the device.

        :return: The type of this Device.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Device.

        A constant representing the type of the device.

        :param type: The type of this Device.
        :type type: str
        """
        allowed_values = ["unknown", "phone", "tablet", "watch", "chestStrap", "scale", "headMounted", "smartDisplay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this Device.

        The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form. The obfuscation preserves equality; that is, given two IDs, if id1 == id2, obfuscated(id1) == obfuscated(id2).

        :return: The uid of this Device.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Device.

        The serial number or other unique ID for the hardware. This field is obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the uid field in clear and normal form. The obfuscation preserves equality; that is, given two IDs, if id1 == id2, obfuscated(id1) == obfuscated(id2).

        :param uid: The uid of this Device.
        :type uid: str
        """

        self._uid = uid

    @property
    def version(self):
        """Gets the version of this Device.

        Version string for the device hardware/software.

        :return: The version of this Device.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Device.

        Version string for the device hardware/software.

        :param version: The version of this Device.
        :type version: str
        """

        self._version = version
