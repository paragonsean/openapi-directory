# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_point import DataPoint
from openapi_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_id: str=None, max_end_time_ns: str=None, min_start_time_ns: str=None, next_page_token: str=None, point: List[DataPoint]=None):
        """Dataset - a model defined in OpenAPI

        :param data_source_id: The data_source_id of this Dataset.
        :param max_end_time_ns: The max_end_time_ns of this Dataset.
        :param min_start_time_ns: The min_start_time_ns of this Dataset.
        :param next_page_token: The next_page_token of this Dataset.
        :param point: The point of this Dataset.
        """
        self.openapi_types = {
            'data_source_id': str,
            'max_end_time_ns': str,
            'min_start_time_ns': str,
            'next_page_token': str,
            'point': List[DataPoint]
        }

        self.attribute_map = {
            'data_source_id': 'dataSourceId',
            'max_end_time_ns': 'maxEndTimeNs',
            'min_start_time_ns': 'minStartTimeNs',
            'next_page_token': 'nextPageToken',
            'point': 'point'
        }

        self._data_source_id = data_source_id
        self._max_end_time_ns = max_end_time_ns
        self._min_start_time_ns = min_start_time_ns
        self._next_page_token = next_page_token
        self._point = point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dataset of this Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this Dataset.

        The data stream ID of the data source that created the points in this dataset.

        :return: The data_source_id of this Dataset.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this Dataset.

        The data stream ID of the data source that created the points in this dataset.

        :param data_source_id: The data_source_id of this Dataset.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def max_end_time_ns(self):
        """Gets the max_end_time_ns of this Dataset.

        The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.

        :return: The max_end_time_ns of this Dataset.
        :rtype: str
        """
        return self._max_end_time_ns

    @max_end_time_ns.setter
    def max_end_time_ns(self, max_end_time_ns):
        """Sets the max_end_time_ns of this Dataset.

        The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.

        :param max_end_time_ns: The max_end_time_ns of this Dataset.
        :type max_end_time_ns: str
        """

        self._max_end_time_ns = max_end_time_ns

    @property
    def min_start_time_ns(self):
        """Gets the min_start_time_ns of this Dataset.

        The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.

        :return: The min_start_time_ns of this Dataset.
        :rtype: str
        """
        return self._min_start_time_ns

    @min_start_time_ns.setter
    def min_start_time_ns(self, min_start_time_ns):
        """Sets the min_start_time_ns of this Dataset.

        The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.

        :param min_start_time_ns: The min_start_time_ns of this Dataset.
        :type min_start_time_ns: str
        """

        self._min_start_time_ns = min_start_time_ns

    @property
    def next_page_token(self):
        """Gets the next_page_token of this Dataset.

        This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.

        :return: The next_page_token of this Dataset.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this Dataset.

        This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.

        :param next_page_token: The next_page_token of this Dataset.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def point(self):
        """Gets the point of this Dataset.

        A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.

        :return: The point of this Dataset.
        :rtype: List[DataPoint]
        """
        return self._point

    @point.setter
    def point(self, point):
        """Sets the point of this Dataset.

        A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.

        :param point: The point of this Dataset.
        :type point: List[DataPoint]
        """

        self._point = point
