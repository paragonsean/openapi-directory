# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataTypeField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, format: str=None, name: str=None, optional: bool=None):
        """DataTypeField - a model defined in OpenAPI

        :param format: The format of this DataTypeField.
        :param name: The name of this DataTypeField.
        :param optional: The optional of this DataTypeField.
        """
        self.openapi_types = {
            'format': str,
            'name': str,
            'optional': bool
        }

        self.attribute_map = {
            'format': 'format',
            'name': 'name',
            'optional': 'optional'
        }

        self._format = format
        self._name = name
        self._optional = optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataTypeField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataTypeField of this DataTypeField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def format(self):
        """Gets the format of this DataTypeField.

        The different supported formats for each field in a data type.

        :return: The format of this DataTypeField.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DataTypeField.

        The different supported formats for each field in a data type.

        :param format: The format of this DataTypeField.
        :type format: str
        """
        allowed_values = ["integer", "floatPoint", "string", "map", "integerList", "floatList", "blob"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def name(self):
        """Gets the name of this DataTypeField.

        Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.

        :return: The name of this DataTypeField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataTypeField.

        Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.

        :param name: The name of this DataTypeField.
        :type name: str
        """

        self._name = name

    @property
    def optional(self):
        """Gets the optional of this DataTypeField.


        :return: The optional of this DataTypeField.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this DataTypeField.


        :param optional: The optional of this DataTypeField.
        :type optional: bool
        """

        self._optional = optional
