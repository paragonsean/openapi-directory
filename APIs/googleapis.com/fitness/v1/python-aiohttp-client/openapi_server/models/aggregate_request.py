# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aggregate_by import AggregateBy
from openapi_server.models.bucket_by_activity import BucketByActivity
from openapi_server.models.bucket_by_session import BucketBySession
from openapi_server.models.bucket_by_time import BucketByTime
from openapi_server import util


class AggregateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregate_by: List[AggregateBy]=None, bucket_by_activity_segment: BucketByActivity=None, bucket_by_activity_type: BucketByActivity=None, bucket_by_session: BucketBySession=None, bucket_by_time: BucketByTime=None, end_time_millis: str=None, filtered_data_quality_standard: List[str]=None, start_time_millis: str=None):
        """AggregateRequest - a model defined in OpenAPI

        :param aggregate_by: The aggregate_by of this AggregateRequest.
        :param bucket_by_activity_segment: The bucket_by_activity_segment of this AggregateRequest.
        :param bucket_by_activity_type: The bucket_by_activity_type of this AggregateRequest.
        :param bucket_by_session: The bucket_by_session of this AggregateRequest.
        :param bucket_by_time: The bucket_by_time of this AggregateRequest.
        :param end_time_millis: The end_time_millis of this AggregateRequest.
        :param filtered_data_quality_standard: The filtered_data_quality_standard of this AggregateRequest.
        :param start_time_millis: The start_time_millis of this AggregateRequest.
        """
        self.openapi_types = {
            'aggregate_by': List[AggregateBy],
            'bucket_by_activity_segment': BucketByActivity,
            'bucket_by_activity_type': BucketByActivity,
            'bucket_by_session': BucketBySession,
            'bucket_by_time': BucketByTime,
            'end_time_millis': str,
            'filtered_data_quality_standard': List[str],
            'start_time_millis': str
        }

        self.attribute_map = {
            'aggregate_by': 'aggregateBy',
            'bucket_by_activity_segment': 'bucketByActivitySegment',
            'bucket_by_activity_type': 'bucketByActivityType',
            'bucket_by_session': 'bucketBySession',
            'bucket_by_time': 'bucketByTime',
            'end_time_millis': 'endTimeMillis',
            'filtered_data_quality_standard': 'filteredDataQualityStandard',
            'start_time_millis': 'startTimeMillis'
        }

        self._aggregate_by = aggregate_by
        self._bucket_by_activity_segment = bucket_by_activity_segment
        self._bucket_by_activity_type = bucket_by_activity_type
        self._bucket_by_session = bucket_by_session
        self._bucket_by_time = bucket_by_time
        self._end_time_millis = end_time_millis
        self._filtered_data_quality_standard = filtered_data_quality_standard
        self._start_time_millis = start_time_millis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateRequest of this AggregateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregate_by(self):
        """Gets the aggregate_by of this AggregateRequest.

        The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.

        :return: The aggregate_by of this AggregateRequest.
        :rtype: List[AggregateBy]
        """
        return self._aggregate_by

    @aggregate_by.setter
    def aggregate_by(self, aggregate_by):
        """Sets the aggregate_by of this AggregateRequest.

        The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.

        :param aggregate_by: The aggregate_by of this AggregateRequest.
        :type aggregate_by: List[AggregateBy]
        """

        self._aggregate_by = aggregate_by

    @property
    def bucket_by_activity_segment(self):
        """Gets the bucket_by_activity_segment of this AggregateRequest.


        :return: The bucket_by_activity_segment of this AggregateRequest.
        :rtype: BucketByActivity
        """
        return self._bucket_by_activity_segment

    @bucket_by_activity_segment.setter
    def bucket_by_activity_segment(self, bucket_by_activity_segment):
        """Sets the bucket_by_activity_segment of this AggregateRequest.


        :param bucket_by_activity_segment: The bucket_by_activity_segment of this AggregateRequest.
        :type bucket_by_activity_segment: BucketByActivity
        """

        self._bucket_by_activity_segment = bucket_by_activity_segment

    @property
    def bucket_by_activity_type(self):
        """Gets the bucket_by_activity_type of this AggregateRequest.


        :return: The bucket_by_activity_type of this AggregateRequest.
        :rtype: BucketByActivity
        """
        return self._bucket_by_activity_type

    @bucket_by_activity_type.setter
    def bucket_by_activity_type(self, bucket_by_activity_type):
        """Sets the bucket_by_activity_type of this AggregateRequest.


        :param bucket_by_activity_type: The bucket_by_activity_type of this AggregateRequest.
        :type bucket_by_activity_type: BucketByActivity
        """

        self._bucket_by_activity_type = bucket_by_activity_type

    @property
    def bucket_by_session(self):
        """Gets the bucket_by_session of this AggregateRequest.


        :return: The bucket_by_session of this AggregateRequest.
        :rtype: BucketBySession
        """
        return self._bucket_by_session

    @bucket_by_session.setter
    def bucket_by_session(self, bucket_by_session):
        """Sets the bucket_by_session of this AggregateRequest.


        :param bucket_by_session: The bucket_by_session of this AggregateRequest.
        :type bucket_by_session: BucketBySession
        """

        self._bucket_by_session = bucket_by_session

    @property
    def bucket_by_time(self):
        """Gets the bucket_by_time of this AggregateRequest.


        :return: The bucket_by_time of this AggregateRequest.
        :rtype: BucketByTime
        """
        return self._bucket_by_time

    @bucket_by_time.setter
    def bucket_by_time(self, bucket_by_time):
        """Sets the bucket_by_time of this AggregateRequest.


        :param bucket_by_time: The bucket_by_time of this AggregateRequest.
        :type bucket_by_time: BucketByTime
        """

        self._bucket_by_time = bucket_by_time

    @property
    def end_time_millis(self):
        """Gets the end_time_millis of this AggregateRequest.

        The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive. The maximum allowed difference between start_time_millis // and end_time_millis is 7776000000 (roughly 90 days).

        :return: The end_time_millis of this AggregateRequest.
        :rtype: str
        """
        return self._end_time_millis

    @end_time_millis.setter
    def end_time_millis(self, end_time_millis):
        """Sets the end_time_millis of this AggregateRequest.

        The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive. The maximum allowed difference between start_time_millis // and end_time_millis is 7776000000 (roughly 90 days).

        :param end_time_millis: The end_time_millis of this AggregateRequest.
        :type end_time_millis: str
        """

        self._end_time_millis = end_time_millis

    @property
    def filtered_data_quality_standard(self):
        """Gets the filtered_data_quality_standard of this AggregateRequest.

        DO NOT POPULATE THIS FIELD. It is ignored.

        :return: The filtered_data_quality_standard of this AggregateRequest.
        :rtype: List[str]
        """
        return self._filtered_data_quality_standard

    @filtered_data_quality_standard.setter
    def filtered_data_quality_standard(self, filtered_data_quality_standard):
        """Sets the filtered_data_quality_standard of this AggregateRequest.

        DO NOT POPULATE THIS FIELD. It is ignored.

        :param filtered_data_quality_standard: The filtered_data_quality_standard of this AggregateRequest.
        :type filtered_data_quality_standard: List[str]
        """
        allowed_values = ["dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013"]  # noqa: E501
        if not set(filtered_data_quality_standard).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `filtered_data_quality_standard` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(filtered_data_quality_standard) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._filtered_data_quality_standard = filtered_data_quality_standard

    @property
    def start_time_millis(self):
        """Gets the start_time_millis of this AggregateRequest.

        The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.

        :return: The start_time_millis of this AggregateRequest.
        :rtype: str
        """
        return self._start_time_millis

    @start_time_millis.setter
    def start_time_millis(self, start_time_millis):
        """Sets the start_time_millis of this AggregateRequest.

        The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.

        :param start_time_millis: The start_time_millis of this AggregateRequest.
        :type start_time_millis: str
        """

        self._start_time_millis = start_time_millis
