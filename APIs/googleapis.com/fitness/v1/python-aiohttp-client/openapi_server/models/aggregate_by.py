# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AggregateBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source_id: str=None, data_type_name: str=None):
        """AggregateBy - a model defined in OpenAPI

        :param data_source_id: The data_source_id of this AggregateBy.
        :param data_type_name: The data_type_name of this AggregateBy.
        """
        self.openapi_types = {
            'data_source_id': str,
            'data_type_name': str
        }

        self.attribute_map = {
            'data_source_id': 'dataSourceId',
            'data_type_name': 'dataTypeName'
        }

        self._data_source_id = data_source_id
        self._data_type_name = data_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateBy of this AggregateBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source_id(self):
        """Gets the data_source_id of this AggregateBy.

        A data source ID to aggregate. Only data from the specified data source ID will be included in the aggregation. If specified, this data source must exist; the OAuth scopes in the supplied credentials must grant read access to this data type. The dataset in the response will have the same data source ID. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.

        :return: The data_source_id of this AggregateBy.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this AggregateBy.

        A data source ID to aggregate. Only data from the specified data source ID will be included in the aggregation. If specified, this data source must exist; the OAuth scopes in the supplied credentials must grant read access to this data type. The dataset in the response will have the same data source ID. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.

        :param data_source_id: The data_source_id of this AggregateBy.
        :type data_source_id: str
        """

        self._data_source_id = data_source_id

    @property
    def data_type_name(self):
        """Gets the data_type_name of this AggregateBy.

        The data type to aggregate. All data sources providing this data type will contribute data to the aggregation. The response will contain a single dataset for this data type name. The dataset will have a data source ID of derived::com.google.android.gms:aggregated. If the user has no data for this data type, an empty data set will be returned. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.

        :return: The data_type_name of this AggregateBy.
        :rtype: str
        """
        return self._data_type_name

    @data_type_name.setter
    def data_type_name(self, data_type_name):
        """Sets the data_type_name of this AggregateBy.

        The data type to aggregate. All data sources providing this data type will contribute data to the aggregation. The response will contain a single dataset for this data type name. The dataset will have a data source ID of derived::com.google.android.gms:aggregated. If the user has no data for this data type, an empty data set will be returned. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.

        :param data_type_name: The data_type_name of this AggregateBy.
        :type data_type_name: str
        """

        self._data_type_name = data_type_name
