# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application import Application
from openapi_server.models.data_type import DataType
from openapi_server.models.device import Device
from openapi_server import util


class DataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application: Application=None, data_quality_standard: List[str]=None, data_stream_id: str=None, data_stream_name: str=None, data_type: DataType=None, device: Device=None, name: str=None, type: str=None):
        """DataSource - a model defined in OpenAPI

        :param application: The application of this DataSource.
        :param data_quality_standard: The data_quality_standard of this DataSource.
        :param data_stream_id: The data_stream_id of this DataSource.
        :param data_stream_name: The data_stream_name of this DataSource.
        :param data_type: The data_type of this DataSource.
        :param device: The device of this DataSource.
        :param name: The name of this DataSource.
        :param type: The type of this DataSource.
        """
        self.openapi_types = {
            'application': Application,
            'data_quality_standard': List[str],
            'data_stream_id': str,
            'data_stream_name': str,
            'data_type': DataType,
            'device': Device,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'application': 'application',
            'data_quality_standard': 'dataQualityStandard',
            'data_stream_id': 'dataStreamId',
            'data_stream_name': 'dataStreamName',
            'data_type': 'dataType',
            'device': 'device',
            'name': 'name',
            'type': 'type'
        }

        self._application = application
        self._data_quality_standard = data_quality_standard
        self._data_stream_id = data_stream_id
        self._data_stream_name = data_stream_name
        self._data_type = data_type
        self._device = device
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataSource of this DataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self):
        """Gets the application of this DataSource.


        :return: The application of this DataSource.
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this DataSource.


        :param application: The application of this DataSource.
        :type application: Application
        """

        self._application = application

    @property
    def data_quality_standard(self):
        """Gets the data_quality_standard of this DataSource.

        DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.

        :return: The data_quality_standard of this DataSource.
        :rtype: List[str]
        """
        return self._data_quality_standard

    @data_quality_standard.setter
    def data_quality_standard(self, data_quality_standard):
        """Sets the data_quality_standard of this DataSource.

        DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.

        :param data_quality_standard: The data_quality_standard of this DataSource.
        :type data_quality_standard: List[str]
        """
        allowed_values = ["dataQualityUnknown", "dataQualityBloodPressureEsh2002", "dataQualityBloodPressureEsh2010", "dataQualityBloodPressureAami", "dataQualityBloodPressureBhsAA", "dataQualityBloodPressureBhsAB", "dataQualityBloodPressureBhsBA", "dataQualityBloodPressureBhsBB", "dataQualityBloodGlucoseIso151972003", "dataQualityBloodGlucoseIso151972013"]  # noqa: E501
        if not set(data_quality_standard).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `data_quality_standard` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(data_quality_standard) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._data_quality_standard = data_quality_standard

    @property
    def data_stream_id(self):
        """Gets the data_stream_id of this DataSource.

        A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.

        :return: The data_stream_id of this DataSource.
        :rtype: str
        """
        return self._data_stream_id

    @data_stream_id.setter
    def data_stream_id(self, data_stream_id):
        """Sets the data_stream_id of this DataSource.

        A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.

        :param data_stream_id: The data_stream_id of this DataSource.
        :type data_stream_id: str
        """

        self._data_stream_id = data_stream_id

    @property
    def data_stream_name(self):
        """Gets the data_stream_name of this DataSource.

        The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.

        :return: The data_stream_name of this DataSource.
        :rtype: str
        """
        return self._data_stream_name

    @data_stream_name.setter
    def data_stream_name(self, data_stream_name):
        """Sets the data_stream_name of this DataSource.

        The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.

        :param data_stream_name: The data_stream_name of this DataSource.
        :type data_stream_name: str
        """

        self._data_stream_name = data_stream_name

    @property
    def data_type(self):
        """Gets the data_type of this DataSource.


        :return: The data_type of this DataSource.
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataSource.


        :param data_type: The data_type of this DataSource.
        :type data_type: DataType
        """

        self._data_type = data_type

    @property
    def device(self):
        """Gets the device of this DataSource.


        :return: The device of this DataSource.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DataSource.


        :param device: The device of this DataSource.
        :type device: Device
        """

        self._device = device

    @property
    def name(self):
        """Gets the name of this DataSource.

        An end-user visible name for this data source.

        :return: The name of this DataSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSource.

        An end-user visible name for this data source.

        :param name: The name of this DataSource.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this DataSource.

        A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.

        :return: The type of this DataSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataSource.

        A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.

        :param type: The type of this DataSource.
        :type type: str
        """
        allowed_values = ["raw", "derived"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
