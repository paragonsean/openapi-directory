# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset import Dataset
from openapi_server.models.session import Session
from openapi_server import util


class AggregateBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity: int=None, dataset: List[Dataset]=None, end_time_millis: str=None, session: Session=None, start_time_millis: str=None, type: str=None):
        """AggregateBucket - a model defined in OpenAPI

        :param activity: The activity of this AggregateBucket.
        :param dataset: The dataset of this AggregateBucket.
        :param end_time_millis: The end_time_millis of this AggregateBucket.
        :param session: The session of this AggregateBucket.
        :param start_time_millis: The start_time_millis of this AggregateBucket.
        :param type: The type of this AggregateBucket.
        """
        self.openapi_types = {
            'activity': int,
            'dataset': List[Dataset],
            'end_time_millis': str,
            'session': Session,
            'start_time_millis': str,
            'type': str
        }

        self.attribute_map = {
            'activity': 'activity',
            'dataset': 'dataset',
            'end_time_millis': 'endTimeMillis',
            'session': 'session',
            'start_time_millis': 'startTimeMillis',
            'type': 'type'
        }

        self._activity = activity
        self._dataset = dataset
        self._end_time_millis = end_time_millis
        self._session = session
        self._start_time_millis = start_time_millis
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateBucket of this AggregateBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self):
        """Gets the activity of this AggregateBucket.

        Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT

        :return: The activity of this AggregateBucket.
        :rtype: int
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this AggregateBucket.

        Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT

        :param activity: The activity of this AggregateBucket.
        :type activity: int
        """

        self._activity = activity

    @property
    def dataset(self):
        """Gets the dataset of this AggregateBucket.

        There will be one dataset per AggregateBy in the request.

        :return: The dataset of this AggregateBucket.
        :rtype: List[Dataset]
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this AggregateBucket.

        There will be one dataset per AggregateBy in the request.

        :param dataset: The dataset of this AggregateBucket.
        :type dataset: List[Dataset]
        """

        self._dataset = dataset

    @property
    def end_time_millis(self):
        """Gets the end_time_millis of this AggregateBucket.

        The end time for the aggregated data, in milliseconds since epoch, inclusive.

        :return: The end_time_millis of this AggregateBucket.
        :rtype: str
        """
        return self._end_time_millis

    @end_time_millis.setter
    def end_time_millis(self, end_time_millis):
        """Sets the end_time_millis of this AggregateBucket.

        The end time for the aggregated data, in milliseconds since epoch, inclusive.

        :param end_time_millis: The end_time_millis of this AggregateBucket.
        :type end_time_millis: str
        """

        self._end_time_millis = end_time_millis

    @property
    def session(self):
        """Gets the session of this AggregateBucket.


        :return: The session of this AggregateBucket.
        :rtype: Session
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this AggregateBucket.


        :param session: The session of this AggregateBucket.
        :type session: Session
        """

        self._session = session

    @property
    def start_time_millis(self):
        """Gets the start_time_millis of this AggregateBucket.

        The start time for the aggregated data, in milliseconds since epoch, inclusive.

        :return: The start_time_millis of this AggregateBucket.
        :rtype: str
        """
        return self._start_time_millis

    @start_time_millis.setter
    def start_time_millis(self, start_time_millis):
        """Sets the start_time_millis of this AggregateBucket.

        The start time for the aggregated data, in milliseconds since epoch, inclusive.

        :param start_time_millis: The start_time_millis of this AggregateBucket.
        :type start_time_millis: str
        """

        self._start_time_millis = start_time_millis

    @property
    def type(self):
        """Gets the type of this AggregateBucket.

        The type of a bucket signifies how the data aggregation is performed in the bucket.

        :return: The type of this AggregateBucket.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AggregateBucket.

        The type of a bucket signifies how the data aggregation is performed in the bucket.

        :param type: The type of this AggregateBucket.
        :type type: str
        """
        allowed_values = ["unknown", "time", "session", "activityType", "activitySegment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
