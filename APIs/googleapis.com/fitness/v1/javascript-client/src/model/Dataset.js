/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataPoint from './DataPoint';

/**
 * The Dataset model module.
 * @module model/Dataset
 * @version v1
 */
class Dataset {
    /**
     * Constructs a new <code>Dataset</code>.
     * A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.
     * @alias module:model/Dataset
     */
    constructor() { 
        
        Dataset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dataset} obj Optional instance to populate.
     * @return {module:model/Dataset} The populated <code>Dataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dataset();

            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('maxEndTimeNs')) {
                obj['maxEndTimeNs'] = ApiClient.convertToType(data['maxEndTimeNs'], 'String');
            }
            if (data.hasOwnProperty('minStartTimeNs')) {
                obj['minStartTimeNs'] = ApiClient.convertToType(data['minStartTimeNs'], 'String');
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
            if (data.hasOwnProperty('point')) {
                obj['point'] = ApiClient.convertToType(data['point'], [DataPoint]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dataset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['maxEndTimeNs'] && !(typeof data['maxEndTimeNs'] === 'string' || data['maxEndTimeNs'] instanceof String)) {
            throw new Error("Expected the field `maxEndTimeNs` to be a primitive type in the JSON string but got " + data['maxEndTimeNs']);
        }
        // ensure the json data is a string
        if (data['minStartTimeNs'] && !(typeof data['minStartTimeNs'] === 'string' || data['minStartTimeNs'] instanceof String)) {
            throw new Error("Expected the field `minStartTimeNs` to be a primitive type in the JSON string but got " + data['minStartTimeNs']);
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }
        if (data['point']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['point'])) {
                throw new Error("Expected the field `point` to be an array in the JSON data but got " + data['point']);
            }
            // validate the optional field `point` (array)
            for (const item of data['point']) {
                DataPoint.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The data stream ID of the data source that created the points in this dataset.
 * @member {String} dataSourceId
 */
Dataset.prototype['dataSourceId'] = undefined;

/**
 * The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.
 * @member {String} maxEndTimeNs
 */
Dataset.prototype['maxEndTimeNs'] = undefined;

/**
 * The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.
 * @member {String} minStartTimeNs
 */
Dataset.prototype['minStartTimeNs'] = undefined;

/**
 * This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.
 * @member {String} nextPageToken
 */
Dataset.prototype['nextPageToken'] = undefined;

/**
 * A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.
 * @member {Array.<module:model/DataPoint>} point
 */
Dataset.prototype['point'] = undefined;






export default Dataset;

