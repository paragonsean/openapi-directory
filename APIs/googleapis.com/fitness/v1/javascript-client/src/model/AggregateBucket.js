/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Dataset from './Dataset';
import Session from './Session';

/**
 * The AggregateBucket model module.
 * @module model/AggregateBucket
 * @version v1
 */
class AggregateBucket {
    /**
     * Constructs a new <code>AggregateBucket</code>.
     * @alias module:model/AggregateBucket
     */
    constructor() { 
        
        AggregateBucket.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AggregateBucket</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AggregateBucket} obj Optional instance to populate.
     * @return {module:model/AggregateBucket} The populated <code>AggregateBucket</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AggregateBucket();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'Number');
            }
            if (data.hasOwnProperty('dataset')) {
                obj['dataset'] = ApiClient.convertToType(data['dataset'], [Dataset]);
            }
            if (data.hasOwnProperty('endTimeMillis')) {
                obj['endTimeMillis'] = ApiClient.convertToType(data['endTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = Session.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('startTimeMillis')) {
                obj['startTimeMillis'] = ApiClient.convertToType(data['startTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AggregateBucket</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AggregateBucket</code>.
     */
    static validateJSON(data) {
        if (data['dataset']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataset'])) {
                throw new Error("Expected the field `dataset` to be an array in the JSON data but got " + data['dataset']);
            }
            // validate the optional field `dataset` (array)
            for (const item of data['dataset']) {
                Dataset.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['endTimeMillis'] && !(typeof data['endTimeMillis'] === 'string' || data['endTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `endTimeMillis` to be a primitive type in the JSON string but got " + data['endTimeMillis']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          Session.validateJSON(data['session']);
        }
        // ensure the json data is a string
        if (data['startTimeMillis'] && !(typeof data['startTimeMillis'] === 'string' || data['startTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `startTimeMillis` to be a primitive type in the JSON string but got " + data['startTimeMillis']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT
 * @member {Number} activity
 */
AggregateBucket.prototype['activity'] = undefined;

/**
 * There will be one dataset per AggregateBy in the request.
 * @member {Array.<module:model/Dataset>} dataset
 */
AggregateBucket.prototype['dataset'] = undefined;

/**
 * The end time for the aggregated data, in milliseconds since epoch, inclusive.
 * @member {String} endTimeMillis
 */
AggregateBucket.prototype['endTimeMillis'] = undefined;

/**
 * @member {module:model/Session} session
 */
AggregateBucket.prototype['session'] = undefined;

/**
 * The start time for the aggregated data, in milliseconds since epoch, inclusive.
 * @member {String} startTimeMillis
 */
AggregateBucket.prototype['startTimeMillis'] = undefined;

/**
 * The type of a bucket signifies how the data aggregation is performed in the bucket.
 * @member {module:model/AggregateBucket.TypeEnum} type
 */
AggregateBucket.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AggregateBucket['TypeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "time"
     * @const
     */
    "time": "time",

    /**
     * value: "session"
     * @const
     */
    "session": "session",

    /**
     * value: "activityType"
     * @const
     */
    "activityType": "activityType",

    /**
     * value: "activitySegment"
     * @const
     */
    "activitySegment": "activitySegment"
};



export default AggregateBucket;

