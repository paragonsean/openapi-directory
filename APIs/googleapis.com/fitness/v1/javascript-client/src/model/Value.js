/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ValueMapValEntry from './ValueMapValEntry';

/**
 * The Value model module.
 * @module model/Value
 * @version v1
 */
class Value {
    /**
     * Constructs a new <code>Value</code>.
     * Holder object for the value of a single field in a data point. A field value has a particular format and is only ever set to one of an integer or a floating point value.
     * @alias module:model/Value
     */
    constructor() { 
        
        Value.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Value</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Value} obj Optional instance to populate.
     * @return {module:model/Value} The populated <code>Value</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Value();

            if (data.hasOwnProperty('fpVal')) {
                obj['fpVal'] = ApiClient.convertToType(data['fpVal'], 'Number');
            }
            if (data.hasOwnProperty('intVal')) {
                obj['intVal'] = ApiClient.convertToType(data['intVal'], 'Number');
            }
            if (data.hasOwnProperty('mapVal')) {
                obj['mapVal'] = ApiClient.convertToType(data['mapVal'], [ValueMapValEntry]);
            }
            if (data.hasOwnProperty('stringVal')) {
                obj['stringVal'] = ApiClient.convertToType(data['stringVal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Value</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Value</code>.
     */
    static validateJSON(data) {
        if (data['mapVal']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mapVal'])) {
                throw new Error("Expected the field `mapVal` to be an array in the JSON data but got " + data['mapVal']);
            }
            // validate the optional field `mapVal` (array)
            for (const item of data['mapVal']) {
                ValueMapValEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stringVal'] && !(typeof data['stringVal'] === 'string' || data['stringVal'] instanceof String)) {
            throw new Error("Expected the field `stringVal` to be a primitive type in the JSON string but got " + data['stringVal']);
        }

        return true;
    }


}



/**
 * Floating point value. When this is set, other values must not be set.
 * @member {Number} fpVal
 */
Value.prototype['fpVal'] = undefined;

/**
 * Integer value. When this is set, other values must not be set.
 * @member {Number} intVal
 */
Value.prototype['intVal'] = undefined;

/**
 * Map value. The valid key space and units for the corresponding value of each entry should be documented as part of the data type definition. Keys should be kept small whenever possible. Data streams with large keys and high data frequency may be down sampled.
 * @member {Array.<module:model/ValueMapValEntry>} mapVal
 */
Value.prototype['mapVal'] = undefined;

/**
 * String value. When this is set, other values must not be set. Strings should be kept small whenever possible. Data streams with large string values and high data frequency may be down sampled.
 * @member {String} stringVal
 */
Value.prototype['stringVal'] = undefined;






export default Value;

