/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataPoint from './DataPoint';

/**
 * The ListDataPointChangesResponse model module.
 * @module model/ListDataPointChangesResponse
 * @version v1
 */
class ListDataPointChangesResponse {
    /**
     * Constructs a new <code>ListDataPointChangesResponse</code>.
     * @alias module:model/ListDataPointChangesResponse
     */
    constructor() { 
        
        ListDataPointChangesResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListDataPointChangesResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListDataPointChangesResponse} obj Optional instance to populate.
     * @return {module:model/ListDataPointChangesResponse} The populated <code>ListDataPointChangesResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListDataPointChangesResponse();

            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('deletedDataPoint')) {
                obj['deletedDataPoint'] = ApiClient.convertToType(data['deletedDataPoint'], [DataPoint]);
            }
            if (data.hasOwnProperty('insertedDataPoint')) {
                obj['insertedDataPoint'] = ApiClient.convertToType(data['insertedDataPoint'], [DataPoint]);
            }
            if (data.hasOwnProperty('nextPageToken')) {
                obj['nextPageToken'] = ApiClient.convertToType(data['nextPageToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListDataPointChangesResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListDataPointChangesResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        if (data['deletedDataPoint']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deletedDataPoint'])) {
                throw new Error("Expected the field `deletedDataPoint` to be an array in the JSON data but got " + data['deletedDataPoint']);
            }
            // validate the optional field `deletedDataPoint` (array)
            for (const item of data['deletedDataPoint']) {
                DataPoint.validateJSON(item);
            };
        }
        if (data['insertedDataPoint']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['insertedDataPoint'])) {
                throw new Error("Expected the field `insertedDataPoint` to be an array in the JSON data but got " + data['insertedDataPoint']);
            }
            // validate the optional field `insertedDataPoint` (array)
            for (const item of data['insertedDataPoint']) {
                DataPoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextPageToken'] && !(typeof data['nextPageToken'] === 'string' || data['nextPageToken'] instanceof String)) {
            throw new Error("Expected the field `nextPageToken` to be a primitive type in the JSON string but got " + data['nextPageToken']);
        }

        return true;
    }


}



/**
 * The data stream ID of the data source with data point changes.
 * @member {String} dataSourceId
 */
ListDataPointChangesResponse.prototype['dataSourceId'] = undefined;

/**
 * Deleted data points for the user. Note, for modifications this should be parsed before handling insertions.
 * @member {Array.<module:model/DataPoint>} deletedDataPoint
 */
ListDataPointChangesResponse.prototype['deletedDataPoint'] = undefined;

/**
 * Inserted data points for the user.
 * @member {Array.<module:model/DataPoint>} insertedDataPoint
 */
ListDataPointChangesResponse.prototype['insertedDataPoint'] = undefined;

/**
 * The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.
 * @member {String} nextPageToken
 */
ListDataPointChangesResponse.prototype['nextPageToken'] = undefined;






export default ListDataPointChangesResponse;

