/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataTypeField model module.
 * @module model/DataTypeField
 * @version v1
 */
class DataTypeField {
    /**
     * Constructs a new <code>DataTypeField</code>.
     * In case of multi-dimensional data (such as an accelerometer with x, y, and z axes) each field represents one dimension. Each data type field has a unique name which identifies it. The field also defines the format of the data (int, float, etc.). This message is only instantiated in code and not used for wire comms or stored in any way.
     * @alias module:model/DataTypeField
     */
    constructor() { 
        
        DataTypeField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataTypeField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataTypeField} obj Optional instance to populate.
     * @return {module:model/DataTypeField} The populated <code>DataTypeField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataTypeField();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('optional')) {
                obj['optional'] = ApiClient.convertToType(data['optional'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataTypeField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataTypeField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The different supported formats for each field in a data type.
 * @member {module:model/DataTypeField.FormatEnum} format
 */
DataTypeField.prototype['format'] = undefined;

/**
 * Defines the name and format of data. Unlike data type names, field names are not namespaced, and only need to be unique within the data type.
 * @member {String} name
 */
DataTypeField.prototype['name'] = undefined;

/**
 * @member {Boolean} optional
 */
DataTypeField.prototype['optional'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
DataTypeField['FormatEnum'] = {

    /**
     * value: "integer"
     * @const
     */
    "integer": "integer",

    /**
     * value: "floatPoint"
     * @const
     */
    "floatPoint": "floatPoint",

    /**
     * value: "string"
     * @const
     */
    "string": "string",

    /**
     * value: "map"
     * @const
     */
    "map": "map",

    /**
     * value: "integerList"
     * @const
     */
    "integerList": "integerList",

    /**
     * value: "floatList"
     * @const
     */
    "floatList": "floatList",

    /**
     * value: "blob"
     * @const
     */
    "blob": "blob"
};



export default DataTypeField;

