/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Application from './Application';

/**
 * The Session model module.
 * @module model/Session
 * @version v1
 */
class Session {
    /**
     * Constructs a new <code>Session</code>.
     * Sessions contain metadata, such as a user-friendly name and time interval information.
     * @alias module:model/Session
     */
    constructor() { 
        
        Session.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Session</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Session} obj Optional instance to populate.
     * @return {module:model/Session} The populated <code>Session</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Session();

            if (data.hasOwnProperty('activeTimeMillis')) {
                obj['activeTimeMillis'] = ApiClient.convertToType(data['activeTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('activityType')) {
                obj['activityType'] = ApiClient.convertToType(data['activityType'], 'Number');
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = Application.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('endTimeMillis')) {
                obj['endTimeMillis'] = ApiClient.convertToType(data['endTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modifiedTimeMillis')) {
                obj['modifiedTimeMillis'] = ApiClient.convertToType(data['modifiedTimeMillis'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('startTimeMillis')) {
                obj['startTimeMillis'] = ApiClient.convertToType(data['startTimeMillis'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Session</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Session</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeTimeMillis'] && !(typeof data['activeTimeMillis'] === 'string' || data['activeTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `activeTimeMillis` to be a primitive type in the JSON string but got " + data['activeTimeMillis']);
        }
        // validate the optional field `application`
        if (data['application']) { // data not null
          Application.validateJSON(data['application']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['endTimeMillis'] && !(typeof data['endTimeMillis'] === 'string' || data['endTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `endTimeMillis` to be a primitive type in the JSON string but got " + data['endTimeMillis']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['modifiedTimeMillis'] && !(typeof data['modifiedTimeMillis'] === 'string' || data['modifiedTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `modifiedTimeMillis` to be a primitive type in the JSON string but got " + data['modifiedTimeMillis']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['startTimeMillis'] && !(typeof data['startTimeMillis'] === 'string' || data['startTimeMillis'] instanceof String)) {
            throw new Error("Expected the field `startTimeMillis` to be a primitive type in the JSON string but got " + data['startTimeMillis']);
        }

        return true;
    }


}



/**
 * Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value
 * @member {String} activeTimeMillis
 */
Session.prototype['activeTimeMillis'] = undefined;

/**
 * The type of activity this session represents.
 * @member {Number} activityType
 */
Session.prototype['activityType'] = undefined;

/**
 * @member {module:model/Application} application
 */
Session.prototype['application'] = undefined;

/**
 * A description for this session.
 * @member {String} description
 */
Session.prototype['description'] = undefined;

/**
 * An end time, in milliseconds since epoch, inclusive.
 * @member {String} endTimeMillis
 */
Session.prototype['endTimeMillis'] = undefined;

/**
 * A client-generated identifier that is unique across all sessions owned by this particular user.
 * @member {String} id
 */
Session.prototype['id'] = undefined;

/**
 * A timestamp that indicates when the session was last modified.
 * @member {String} modifiedTimeMillis
 */
Session.prototype['modifiedTimeMillis'] = undefined;

/**
 * A human readable name of the session.
 * @member {String} name
 */
Session.prototype['name'] = undefined;

/**
 * A start time, in milliseconds since epoch, inclusive.
 * @member {String} startTimeMillis
 */
Session.prototype['startTimeMillis'] = undefined;






export default Session;

