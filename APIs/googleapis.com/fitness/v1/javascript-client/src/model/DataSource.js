/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Application from './Application';
import DataType from './DataType';
import Device from './Device';

/**
 * The DataSource model module.
 * @module model/DataSource
 * @version v1
 */
class DataSource {
    /**
     * Constructs a new <code>DataSource</code>.
     * Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.
     * @alias module:model/DataSource
     */
    constructor() { 
        
        DataSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataSource} obj Optional instance to populate.
     * @return {module:model/DataSource} The populated <code>DataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataSource();

            if (data.hasOwnProperty('application')) {
                obj['application'] = Application.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('dataQualityStandard')) {
                obj['dataQualityStandard'] = ApiClient.convertToType(data['dataQualityStandard'], ['String']);
            }
            if (data.hasOwnProperty('dataStreamId')) {
                obj['dataStreamId'] = ApiClient.convertToType(data['dataStreamId'], 'String');
            }
            if (data.hasOwnProperty('dataStreamName')) {
                obj['dataStreamName'] = ApiClient.convertToType(data['dataStreamName'], 'String');
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = DataType.constructFromObject(data['dataType']);
            }
            if (data.hasOwnProperty('device')) {
                obj['device'] = Device.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataSource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `application`
        if (data['application']) { // data not null
          Application.validateJSON(data['application']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dataQualityStandard'])) {
            throw new Error("Expected the field `dataQualityStandard` to be an array in the JSON data but got " + data['dataQualityStandard']);
        }
        // ensure the json data is a string
        if (data['dataStreamId'] && !(typeof data['dataStreamId'] === 'string' || data['dataStreamId'] instanceof String)) {
            throw new Error("Expected the field `dataStreamId` to be a primitive type in the JSON string but got " + data['dataStreamId']);
        }
        // ensure the json data is a string
        if (data['dataStreamName'] && !(typeof data['dataStreamName'] === 'string' || data['dataStreamName'] instanceof String)) {
            throw new Error("Expected the field `dataStreamName` to be a primitive type in the JSON string but got " + data['dataStreamName']);
        }
        // validate the optional field `dataType`
        if (data['dataType']) { // data not null
          DataType.validateJSON(data['dataType']);
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          Device.validateJSON(data['device']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/Application} application
 */
DataSource.prototype['application'] = undefined;

/**
 * DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.
 * @member {Array.<module:model/DataSource.DataQualityStandardEnum>} dataQualityStandard
 */
DataSource.prototype['dataQualityStandard'] = undefined;

/**
 * A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.
 * @member {String} dataStreamId
 */
DataSource.prototype['dataStreamId'] = undefined;

/**
 * The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.
 * @member {String} dataStreamName
 */
DataSource.prototype['dataStreamName'] = undefined;

/**
 * @member {module:model/DataType} dataType
 */
DataSource.prototype['dataType'] = undefined;

/**
 * @member {module:model/Device} device
 */
DataSource.prototype['device'] = undefined;

/**
 * An end-user visible name for this data source.
 * @member {String} name
 */
DataSource.prototype['name'] = undefined;

/**
 * A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.
 * @member {module:model/DataSource.TypeEnum} type
 */
DataSource.prototype['type'] = undefined;





/**
 * Allowed values for the <code>dataQualityStandard</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['DataQualityStandardEnum'] = {

    /**
     * value: "dataQualityUnknown"
     * @const
     */
    "dataQualityUnknown": "dataQualityUnknown",

    /**
     * value: "dataQualityBloodPressureEsh2002"
     * @const
     */
    "dataQualityBloodPressureEsh2002": "dataQualityBloodPressureEsh2002",

    /**
     * value: "dataQualityBloodPressureEsh2010"
     * @const
     */
    "dataQualityBloodPressureEsh2010": "dataQualityBloodPressureEsh2010",

    /**
     * value: "dataQualityBloodPressureAami"
     * @const
     */
    "dataQualityBloodPressureAami": "dataQualityBloodPressureAami",

    /**
     * value: "dataQualityBloodPressureBhsAA"
     * @const
     */
    "dataQualityBloodPressureBhsAA": "dataQualityBloodPressureBhsAA",

    /**
     * value: "dataQualityBloodPressureBhsAB"
     * @const
     */
    "dataQualityBloodPressureBhsAB": "dataQualityBloodPressureBhsAB",

    /**
     * value: "dataQualityBloodPressureBhsBA"
     * @const
     */
    "dataQualityBloodPressureBhsBA": "dataQualityBloodPressureBhsBA",

    /**
     * value: "dataQualityBloodPressureBhsBB"
     * @const
     */
    "dataQualityBloodPressureBhsBB": "dataQualityBloodPressureBhsBB",

    /**
     * value: "dataQualityBloodGlucoseIso151972003"
     * @const
     */
    "dataQualityBloodGlucoseIso151972003": "dataQualityBloodGlucoseIso151972003",

    /**
     * value: "dataQualityBloodGlucoseIso151972013"
     * @const
     */
    "dataQualityBloodGlucoseIso151972013": "dataQualityBloodGlucoseIso151972013"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DataSource['TypeEnum'] = {

    /**
     * value: "raw"
     * @const
     */
    "raw": "raw",

    /**
     * value: "derived"
     * @const
     */
    "derived": "derived"
};



export default DataSource;

