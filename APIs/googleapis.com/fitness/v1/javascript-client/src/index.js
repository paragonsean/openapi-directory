/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AggregateBucket from './model/AggregateBucket';
import AggregateBy from './model/AggregateBy';
import AggregateRequest from './model/AggregateRequest';
import AggregateResponse from './model/AggregateResponse';
import Application from './model/Application';
import BucketByActivity from './model/BucketByActivity';
import BucketBySession from './model/BucketBySession';
import BucketByTime from './model/BucketByTime';
import BucketByTimePeriod from './model/BucketByTimePeriod';
import DataPoint from './model/DataPoint';
import DataSource from './model/DataSource';
import DataType from './model/DataType';
import DataTypeField from './model/DataTypeField';
import Dataset from './model/Dataset';
import Device from './model/Device';
import ListDataPointChangesResponse from './model/ListDataPointChangesResponse';
import ListDataSourcesResponse from './model/ListDataSourcesResponse';
import ListSessionsResponse from './model/ListSessionsResponse';
import MapValue from './model/MapValue';
import Session from './model/Session';
import Value from './model/Value';
import ValueMapValEntry from './model/ValueMapValEntry';
import UsersApi from './api/UsersApi';


/**
* The Fitness API for managing users&#39; fitness tracking data..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var FitnessApi = require('index'); // See note below*.
* var xxxSvc = new FitnessApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new FitnessApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new FitnessApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new FitnessApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AggregateBucket model constructor.
     * @property {module:model/AggregateBucket}
     */
    AggregateBucket,

    /**
     * The AggregateBy model constructor.
     * @property {module:model/AggregateBy}
     */
    AggregateBy,

    /**
     * The AggregateRequest model constructor.
     * @property {module:model/AggregateRequest}
     */
    AggregateRequest,

    /**
     * The AggregateResponse model constructor.
     * @property {module:model/AggregateResponse}
     */
    AggregateResponse,

    /**
     * The Application model constructor.
     * @property {module:model/Application}
     */
    Application,

    /**
     * The BucketByActivity model constructor.
     * @property {module:model/BucketByActivity}
     */
    BucketByActivity,

    /**
     * The BucketBySession model constructor.
     * @property {module:model/BucketBySession}
     */
    BucketBySession,

    /**
     * The BucketByTime model constructor.
     * @property {module:model/BucketByTime}
     */
    BucketByTime,

    /**
     * The BucketByTimePeriod model constructor.
     * @property {module:model/BucketByTimePeriod}
     */
    BucketByTimePeriod,

    /**
     * The DataPoint model constructor.
     * @property {module:model/DataPoint}
     */
    DataPoint,

    /**
     * The DataSource model constructor.
     * @property {module:model/DataSource}
     */
    DataSource,

    /**
     * The DataType model constructor.
     * @property {module:model/DataType}
     */
    DataType,

    /**
     * The DataTypeField model constructor.
     * @property {module:model/DataTypeField}
     */
    DataTypeField,

    /**
     * The Dataset model constructor.
     * @property {module:model/Dataset}
     */
    Dataset,

    /**
     * The Device model constructor.
     * @property {module:model/Device}
     */
    Device,

    /**
     * The ListDataPointChangesResponse model constructor.
     * @property {module:model/ListDataPointChangesResponse}
     */
    ListDataPointChangesResponse,

    /**
     * The ListDataSourcesResponse model constructor.
     * @property {module:model/ListDataSourcesResponse}
     */
    ListDataSourcesResponse,

    /**
     * The ListSessionsResponse model constructor.
     * @property {module:model/ListSessionsResponse}
     */
    ListSessionsResponse,

    /**
     * The MapValue model constructor.
     * @property {module:model/MapValue}
     */
    MapValue,

    /**
     * The Session model constructor.
     * @property {module:model/Session}
     */
    Session,

    /**
     * The Value model constructor.
     * @property {module:model/Value}
     */
    Value,

    /**
     * The ValueMapValEntry model constructor.
     * @property {module:model/ValueMapValEntry}
     */
    ValueMapValEntry,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
