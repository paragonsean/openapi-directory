/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataPoint.h
 *
 * Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type. A data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. Data points always contain one value for each field of the data type.
 */

#ifndef OAIDataPoint_H
#define OAIDataPoint_H

#include <QJsonObject>

#include "OAIValue.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIValue;

class OAIDataPoint : public OAIObject {
public:
    OAIDataPoint();
    OAIDataPoint(QString json);
    ~OAIDataPoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    Q_DECL_DEPRECATED QString getComputationTimeMillis() const;
    Q_DECL_DEPRECATED void setComputationTimeMillis(const QString &computation_time_millis);
    Q_DECL_DEPRECATED bool is_computation_time_millis_Set() const;
    Q_DECL_DEPRECATED bool is_computation_time_millis_Valid() const;

    QString getDataTypeName() const;
    void setDataTypeName(const QString &data_type_name);
    bool is_data_type_name_Set() const;
    bool is_data_type_name_Valid() const;

    QString getEndTimeNanos() const;
    void setEndTimeNanos(const QString &end_time_nanos);
    bool is_end_time_nanos_Set() const;
    bool is_end_time_nanos_Valid() const;

    QString getModifiedTimeMillis() const;
    void setModifiedTimeMillis(const QString &modified_time_millis);
    bool is_modified_time_millis_Set() const;
    bool is_modified_time_millis_Valid() const;

    QString getOriginDataSourceId() const;
    void setOriginDataSourceId(const QString &origin_data_source_id);
    bool is_origin_data_source_id_Set() const;
    bool is_origin_data_source_id_Valid() const;

    QString getRawTimestampNanos() const;
    void setRawTimestampNanos(const QString &raw_timestamp_nanos);
    bool is_raw_timestamp_nanos_Set() const;
    bool is_raw_timestamp_nanos_Valid() const;

    QString getStartTimeNanos() const;
    void setStartTimeNanos(const QString &start_time_nanos);
    bool is_start_time_nanos_Set() const;
    bool is_start_time_nanos_Valid() const;

    QList<OAIValue> getValue() const;
    void setValue(const QList<OAIValue> &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_computation_time_millis;
    bool m_computation_time_millis_isSet;
    bool m_computation_time_millis_isValid;

    QString m_data_type_name;
    bool m_data_type_name_isSet;
    bool m_data_type_name_isValid;

    QString m_end_time_nanos;
    bool m_end_time_nanos_isSet;
    bool m_end_time_nanos_isValid;

    QString m_modified_time_millis;
    bool m_modified_time_millis_isSet;
    bool m_modified_time_millis_isValid;

    QString m_origin_data_source_id;
    bool m_origin_data_source_id_isSet;
    bool m_origin_data_source_id_isValid;

    QString m_raw_timestamp_nanos;
    bool m_raw_timestamp_nanos_isSet;
    bool m_raw_timestamp_nanos_isValid;

    QString m_start_time_nanos;
    bool m_start_time_nanos_isSet;
    bool m_start_time_nanos_isValid;

    QList<OAIValue> m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataPoint)

#endif // OAIDataPoint_H
