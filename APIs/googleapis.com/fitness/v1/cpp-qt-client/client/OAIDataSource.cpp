/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataSource::OAIDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataSource::OAIDataSource() {
    this->initializeModel();
}

OAIDataSource::~OAIDataSource() {}

void OAIDataSource::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_data_quality_standard_isSet = false;
    m_data_quality_standard_isValid = false;

    m_data_stream_id_isSet = false;
    m_data_stream_id_isValid = false;

    m_data_stream_name_isSet = false;
    m_data_stream_name_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataSource::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_data_quality_standard_isValid = ::OpenAPI::fromJsonValue(m_data_quality_standard, json[QString("dataQualityStandard")]);
    m_data_quality_standard_isSet = !json[QString("dataQualityStandard")].isNull() && m_data_quality_standard_isValid;

    m_data_stream_id_isValid = ::OpenAPI::fromJsonValue(m_data_stream_id, json[QString("dataStreamId")]);
    m_data_stream_id_isSet = !json[QString("dataStreamId")].isNull() && m_data_stream_id_isValid;

    m_data_stream_name_isValid = ::OpenAPI::fromJsonValue(m_data_stream_name, json[QString("dataStreamName")]);
    m_data_stream_name_isSet = !json[QString("dataStreamName")].isNull() && m_data_stream_name_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_data_quality_standard.size() > 0) {
        obj.insert(QString("dataQualityStandard"), ::OpenAPI::toJsonValue(m_data_quality_standard));
    }
    if (m_data_stream_id_isSet) {
        obj.insert(QString("dataStreamId"), ::OpenAPI::toJsonValue(m_data_stream_id));
    }
    if (m_data_stream_name_isSet) {
        obj.insert(QString("dataStreamName"), ::OpenAPI::toJsonValue(m_data_stream_name));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIApplication OAIDataSource::getApplication() const {
    return m_application;
}
void OAIDataSource::setApplication(const OAIApplication &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIDataSource::is_application_Set() const{
    return m_application_isSet;
}

bool OAIDataSource::is_application_Valid() const{
    return m_application_isValid;
}

QList<QString> OAIDataSource::getDataQualityStandard() const {
    return m_data_quality_standard;
}
void OAIDataSource::setDataQualityStandard(const QList<QString> &data_quality_standard) {
    m_data_quality_standard = data_quality_standard;
    m_data_quality_standard_isSet = true;
}

bool OAIDataSource::is_data_quality_standard_Set() const{
    return m_data_quality_standard_isSet;
}

bool OAIDataSource::is_data_quality_standard_Valid() const{
    return m_data_quality_standard_isValid;
}

QString OAIDataSource::getDataStreamId() const {
    return m_data_stream_id;
}
void OAIDataSource::setDataStreamId(const QString &data_stream_id) {
    m_data_stream_id = data_stream_id;
    m_data_stream_id_isSet = true;
}

bool OAIDataSource::is_data_stream_id_Set() const{
    return m_data_stream_id_isSet;
}

bool OAIDataSource::is_data_stream_id_Valid() const{
    return m_data_stream_id_isValid;
}

QString OAIDataSource::getDataStreamName() const {
    return m_data_stream_name;
}
void OAIDataSource::setDataStreamName(const QString &data_stream_name) {
    m_data_stream_name = data_stream_name;
    m_data_stream_name_isSet = true;
}

bool OAIDataSource::is_data_stream_name_Set() const{
    return m_data_stream_name_isSet;
}

bool OAIDataSource::is_data_stream_name_Valid() const{
    return m_data_stream_name_isValid;
}

OAIDataType OAIDataSource::getDataType() const {
    return m_data_type;
}
void OAIDataSource::setDataType(const OAIDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIDataSource::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIDataSource::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAIDevice OAIDataSource::getDevice() const {
    return m_device;
}
void OAIDataSource::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDataSource::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDataSource::is_device_Valid() const{
    return m_device_isValid;
}

QString OAIDataSource::getName() const {
    return m_name;
}
void OAIDataSource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataSource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataSource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataSource::getType() const {
    return m_type;
}
void OAIDataSource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataSource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataSource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_quality_standard.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
