/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataPointChangesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataPointChangesResponse::OAIListDataPointChangesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataPointChangesResponse::OAIListDataPointChangesResponse() {
    this->initializeModel();
}

OAIListDataPointChangesResponse::~OAIListDataPointChangesResponse() {}

void OAIListDataPointChangesResponse::initializeModel() {

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_deleted_data_point_isSet = false;
    m_deleted_data_point_isValid = false;

    m_inserted_data_point_isSet = false;
    m_inserted_data_point_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListDataPointChangesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataPointChangesResponse::fromJsonObject(QJsonObject json) {

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_deleted_data_point_isValid = ::OpenAPI::fromJsonValue(m_deleted_data_point, json[QString("deletedDataPoint")]);
    m_deleted_data_point_isSet = !json[QString("deletedDataPoint")].isNull() && m_deleted_data_point_isValid;

    m_inserted_data_point_isValid = ::OpenAPI::fromJsonValue(m_inserted_data_point, json[QString("insertedDataPoint")]);
    m_inserted_data_point_isSet = !json[QString("insertedDataPoint")].isNull() && m_inserted_data_point_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListDataPointChangesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataPointChangesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_deleted_data_point.size() > 0) {
        obj.insert(QString("deletedDataPoint"), ::OpenAPI::toJsonValue(m_deleted_data_point));
    }
    if (m_inserted_data_point.size() > 0) {
        obj.insert(QString("insertedDataPoint"), ::OpenAPI::toJsonValue(m_inserted_data_point));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QString OAIListDataPointChangesResponse::getDataSourceId() const {
    return m_data_source_id;
}
void OAIListDataPointChangesResponse::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIListDataPointChangesResponse::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIListDataPointChangesResponse::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QList<OAIDataPoint> OAIListDataPointChangesResponse::getDeletedDataPoint() const {
    return m_deleted_data_point;
}
void OAIListDataPointChangesResponse::setDeletedDataPoint(const QList<OAIDataPoint> &deleted_data_point) {
    m_deleted_data_point = deleted_data_point;
    m_deleted_data_point_isSet = true;
}

bool OAIListDataPointChangesResponse::is_deleted_data_point_Set() const{
    return m_deleted_data_point_isSet;
}

bool OAIListDataPointChangesResponse::is_deleted_data_point_Valid() const{
    return m_deleted_data_point_isValid;
}

QList<OAIDataPoint> OAIListDataPointChangesResponse::getInsertedDataPoint() const {
    return m_inserted_data_point;
}
void OAIListDataPointChangesResponse::setInsertedDataPoint(const QList<OAIDataPoint> &inserted_data_point) {
    m_inserted_data_point = inserted_data_point;
    m_inserted_data_point_isSet = true;
}

bool OAIListDataPointChangesResponse::is_inserted_data_point_Set() const{
    return m_inserted_data_point_isSet;
}

bool OAIListDataPointChangesResponse::is_inserted_data_point_Valid() const{
    return m_inserted_data_point_isValid;
}

QString OAIListDataPointChangesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListDataPointChangesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListDataPointChangesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListDataPointChangesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListDataPointChangesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_data_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inserted_data_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataPointChangesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
