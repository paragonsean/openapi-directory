/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDataSource.h
 *
 * Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.
 */

#ifndef OAIDataSource_H
#define OAIDataSource_H

#include <QJsonObject>

#include "OAIApplication.h"
#include "OAIDataType.h"
#include "OAIDevice.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplication;
class OAIDataType;
class OAIDevice;

class OAIDataSource : public OAIObject {
public:
    OAIDataSource();
    OAIDataSource(QString json);
    ~OAIDataSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApplication getApplication() const;
    void setApplication(const OAIApplication &application);
    bool is_application_Set() const;
    bool is_application_Valid() const;

    Q_DECL_DEPRECATED QList<QString> getDataQualityStandard() const;
    Q_DECL_DEPRECATED void setDataQualityStandard(const QList<QString> &data_quality_standard);
    Q_DECL_DEPRECATED bool is_data_quality_standard_Set() const;
    Q_DECL_DEPRECATED bool is_data_quality_standard_Valid() const;

    QString getDataStreamId() const;
    void setDataStreamId(const QString &data_stream_id);
    bool is_data_stream_id_Set() const;
    bool is_data_stream_id_Valid() const;

    QString getDataStreamName() const;
    void setDataStreamName(const QString &data_stream_name);
    bool is_data_stream_name_Set() const;
    bool is_data_stream_name_Valid() const;

    OAIDataType getDataType() const;
    void setDataType(const OAIDataType &data_type);
    bool is_data_type_Set() const;
    bool is_data_type_Valid() const;

    OAIDevice getDevice() const;
    void setDevice(const OAIDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    Q_DECL_DEPRECATED QString getName() const;
    Q_DECL_DEPRECATED void setName(const QString &name);
    Q_DECL_DEPRECATED bool is_name_Set() const;
    Q_DECL_DEPRECATED bool is_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApplication m_application;
    bool m_application_isSet;
    bool m_application_isValid;

    QList<QString> m_data_quality_standard;
    bool m_data_quality_standard_isSet;
    bool m_data_quality_standard_isValid;

    QString m_data_stream_id;
    bool m_data_stream_id_isSet;
    bool m_data_stream_id_isValid;

    QString m_data_stream_name;
    bool m_data_stream_name_isSet;
    bool m_data_stream_name_isValid;

    OAIDataType m_data_type;
    bool m_data_type_isSet;
    bool m_data_type_isValid;

    OAIDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDataSource)

#endif // OAIDataSource_H
