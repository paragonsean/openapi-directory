/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataPoint::OAIDataPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataPoint::OAIDataPoint() {
    this->initializeModel();
}

OAIDataPoint::~OAIDataPoint() {}

void OAIDataPoint::initializeModel() {

    m_computation_time_millis_isSet = false;
    m_computation_time_millis_isValid = false;

    m_data_type_name_isSet = false;
    m_data_type_name_isValid = false;

    m_end_time_nanos_isSet = false;
    m_end_time_nanos_isValid = false;

    m_modified_time_millis_isSet = false;
    m_modified_time_millis_isValid = false;

    m_origin_data_source_id_isSet = false;
    m_origin_data_source_id_isValid = false;

    m_raw_timestamp_nanos_isSet = false;
    m_raw_timestamp_nanos_isValid = false;

    m_start_time_nanos_isSet = false;
    m_start_time_nanos_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDataPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataPoint::fromJsonObject(QJsonObject json) {

    m_computation_time_millis_isValid = ::OpenAPI::fromJsonValue(m_computation_time_millis, json[QString("computationTimeMillis")]);
    m_computation_time_millis_isSet = !json[QString("computationTimeMillis")].isNull() && m_computation_time_millis_isValid;

    m_data_type_name_isValid = ::OpenAPI::fromJsonValue(m_data_type_name, json[QString("dataTypeName")]);
    m_data_type_name_isSet = !json[QString("dataTypeName")].isNull() && m_data_type_name_isValid;

    m_end_time_nanos_isValid = ::OpenAPI::fromJsonValue(m_end_time_nanos, json[QString("endTimeNanos")]);
    m_end_time_nanos_isSet = !json[QString("endTimeNanos")].isNull() && m_end_time_nanos_isValid;

    m_modified_time_millis_isValid = ::OpenAPI::fromJsonValue(m_modified_time_millis, json[QString("modifiedTimeMillis")]);
    m_modified_time_millis_isSet = !json[QString("modifiedTimeMillis")].isNull() && m_modified_time_millis_isValid;

    m_origin_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_origin_data_source_id, json[QString("originDataSourceId")]);
    m_origin_data_source_id_isSet = !json[QString("originDataSourceId")].isNull() && m_origin_data_source_id_isValid;

    m_raw_timestamp_nanos_isValid = ::OpenAPI::fromJsonValue(m_raw_timestamp_nanos, json[QString("rawTimestampNanos")]);
    m_raw_timestamp_nanos_isSet = !json[QString("rawTimestampNanos")].isNull() && m_raw_timestamp_nanos_isValid;

    m_start_time_nanos_isValid = ::OpenAPI::fromJsonValue(m_start_time_nanos, json[QString("startTimeNanos")]);
    m_start_time_nanos_isSet = !json[QString("startTimeNanos")].isNull() && m_start_time_nanos_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDataPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_computation_time_millis_isSet) {
        obj.insert(QString("computationTimeMillis"), ::OpenAPI::toJsonValue(m_computation_time_millis));
    }
    if (m_data_type_name_isSet) {
        obj.insert(QString("dataTypeName"), ::OpenAPI::toJsonValue(m_data_type_name));
    }
    if (m_end_time_nanos_isSet) {
        obj.insert(QString("endTimeNanos"), ::OpenAPI::toJsonValue(m_end_time_nanos));
    }
    if (m_modified_time_millis_isSet) {
        obj.insert(QString("modifiedTimeMillis"), ::OpenAPI::toJsonValue(m_modified_time_millis));
    }
    if (m_origin_data_source_id_isSet) {
        obj.insert(QString("originDataSourceId"), ::OpenAPI::toJsonValue(m_origin_data_source_id));
    }
    if (m_raw_timestamp_nanos_isSet) {
        obj.insert(QString("rawTimestampNanos"), ::OpenAPI::toJsonValue(m_raw_timestamp_nanos));
    }
    if (m_start_time_nanos_isSet) {
        obj.insert(QString("startTimeNanos"), ::OpenAPI::toJsonValue(m_start_time_nanos));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDataPoint::getComputationTimeMillis() const {
    return m_computation_time_millis;
}
void OAIDataPoint::setComputationTimeMillis(const QString &computation_time_millis) {
    m_computation_time_millis = computation_time_millis;
    m_computation_time_millis_isSet = true;
}

bool OAIDataPoint::is_computation_time_millis_Set() const{
    return m_computation_time_millis_isSet;
}

bool OAIDataPoint::is_computation_time_millis_Valid() const{
    return m_computation_time_millis_isValid;
}

QString OAIDataPoint::getDataTypeName() const {
    return m_data_type_name;
}
void OAIDataPoint::setDataTypeName(const QString &data_type_name) {
    m_data_type_name = data_type_name;
    m_data_type_name_isSet = true;
}

bool OAIDataPoint::is_data_type_name_Set() const{
    return m_data_type_name_isSet;
}

bool OAIDataPoint::is_data_type_name_Valid() const{
    return m_data_type_name_isValid;
}

QString OAIDataPoint::getEndTimeNanos() const {
    return m_end_time_nanos;
}
void OAIDataPoint::setEndTimeNanos(const QString &end_time_nanos) {
    m_end_time_nanos = end_time_nanos;
    m_end_time_nanos_isSet = true;
}

bool OAIDataPoint::is_end_time_nanos_Set() const{
    return m_end_time_nanos_isSet;
}

bool OAIDataPoint::is_end_time_nanos_Valid() const{
    return m_end_time_nanos_isValid;
}

QString OAIDataPoint::getModifiedTimeMillis() const {
    return m_modified_time_millis;
}
void OAIDataPoint::setModifiedTimeMillis(const QString &modified_time_millis) {
    m_modified_time_millis = modified_time_millis;
    m_modified_time_millis_isSet = true;
}

bool OAIDataPoint::is_modified_time_millis_Set() const{
    return m_modified_time_millis_isSet;
}

bool OAIDataPoint::is_modified_time_millis_Valid() const{
    return m_modified_time_millis_isValid;
}

QString OAIDataPoint::getOriginDataSourceId() const {
    return m_origin_data_source_id;
}
void OAIDataPoint::setOriginDataSourceId(const QString &origin_data_source_id) {
    m_origin_data_source_id = origin_data_source_id;
    m_origin_data_source_id_isSet = true;
}

bool OAIDataPoint::is_origin_data_source_id_Set() const{
    return m_origin_data_source_id_isSet;
}

bool OAIDataPoint::is_origin_data_source_id_Valid() const{
    return m_origin_data_source_id_isValid;
}

QString OAIDataPoint::getRawTimestampNanos() const {
    return m_raw_timestamp_nanos;
}
void OAIDataPoint::setRawTimestampNanos(const QString &raw_timestamp_nanos) {
    m_raw_timestamp_nanos = raw_timestamp_nanos;
    m_raw_timestamp_nanos_isSet = true;
}

bool OAIDataPoint::is_raw_timestamp_nanos_Set() const{
    return m_raw_timestamp_nanos_isSet;
}

bool OAIDataPoint::is_raw_timestamp_nanos_Valid() const{
    return m_raw_timestamp_nanos_isValid;
}

QString OAIDataPoint::getStartTimeNanos() const {
    return m_start_time_nanos;
}
void OAIDataPoint::setStartTimeNanos(const QString &start_time_nanos) {
    m_start_time_nanos = start_time_nanos;
    m_start_time_nanos_isSet = true;
}

bool OAIDataPoint::is_start_time_nanos_Set() const{
    return m_start_time_nanos_isSet;
}

bool OAIDataPoint::is_start_time_nanos_Valid() const{
    return m_start_time_nanos_isValid;
}

QList<OAIValue> OAIDataPoint::getValue() const {
    return m_value;
}
void OAIDataPoint::setValue(const QList<OAIValue> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDataPoint::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDataPoint::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDataPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computation_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_timestamp_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_nanos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
