/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_active_time_millis_isSet = false;
    m_active_time_millis_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;

    m_application_isSet = false;
    m_application_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_time_millis_isSet = false;
    m_end_time_millis_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_modified_time_millis_isSet = false;
    m_modified_time_millis_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_millis_isSet = false;
    m_start_time_millis_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_active_time_millis_isValid = ::OpenAPI::fromJsonValue(m_active_time_millis, json[QString("activeTimeMillis")]);
    m_active_time_millis_isSet = !json[QString("activeTimeMillis")].isNull() && m_active_time_millis_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_end_time_millis_isValid = ::OpenAPI::fromJsonValue(m_end_time_millis, json[QString("endTimeMillis")]);
    m_end_time_millis_isSet = !json[QString("endTimeMillis")].isNull() && m_end_time_millis_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_modified_time_millis_isValid = ::OpenAPI::fromJsonValue(m_modified_time_millis, json[QString("modifiedTimeMillis")]);
    m_modified_time_millis_isSet = !json[QString("modifiedTimeMillis")].isNull() && m_modified_time_millis_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_millis_isValid = ::OpenAPI::fromJsonValue(m_start_time_millis, json[QString("startTimeMillis")]);
    m_start_time_millis_isSet = !json[QString("startTimeMillis")].isNull() && m_start_time_millis_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_active_time_millis_isSet) {
        obj.insert(QString("activeTimeMillis"), ::OpenAPI::toJsonValue(m_active_time_millis));
    }
    if (m_activity_type_isSet) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_time_millis_isSet) {
        obj.insert(QString("endTimeMillis"), ::OpenAPI::toJsonValue(m_end_time_millis));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_modified_time_millis_isSet) {
        obj.insert(QString("modifiedTimeMillis"), ::OpenAPI::toJsonValue(m_modified_time_millis));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_millis_isSet) {
        obj.insert(QString("startTimeMillis"), ::OpenAPI::toJsonValue(m_start_time_millis));
    }
    return obj;
}

QString OAISession::getActiveTimeMillis() const {
    return m_active_time_millis;
}
void OAISession::setActiveTimeMillis(const QString &active_time_millis) {
    m_active_time_millis = active_time_millis;
    m_active_time_millis_isSet = true;
}

bool OAISession::is_active_time_millis_Set() const{
    return m_active_time_millis_isSet;
}

bool OAISession::is_active_time_millis_Valid() const{
    return m_active_time_millis_isValid;
}

qint32 OAISession::getActivityType() const {
    return m_activity_type;
}
void OAISession::setActivityType(const qint32 &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAISession::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAISession::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

OAIApplication OAISession::getApplication() const {
    return m_application;
}
void OAISession::setApplication(const OAIApplication &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAISession::is_application_Set() const{
    return m_application_isSet;
}

bool OAISession::is_application_Valid() const{
    return m_application_isValid;
}

QString OAISession::getDescription() const {
    return m_description;
}
void OAISession::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISession::is_description_Set() const{
    return m_description_isSet;
}

bool OAISession::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISession::getEndTimeMillis() const {
    return m_end_time_millis;
}
void OAISession::setEndTimeMillis(const QString &end_time_millis) {
    m_end_time_millis = end_time_millis;
    m_end_time_millis_isSet = true;
}

bool OAISession::is_end_time_millis_Set() const{
    return m_end_time_millis_isSet;
}

bool OAISession::is_end_time_millis_Valid() const{
    return m_end_time_millis_isValid;
}

QString OAISession::getId() const {
    return m_id;
}
void OAISession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISession::getModifiedTimeMillis() const {
    return m_modified_time_millis;
}
void OAISession::setModifiedTimeMillis(const QString &modified_time_millis) {
    m_modified_time_millis = modified_time_millis;
    m_modified_time_millis_isSet = true;
}

bool OAISession::is_modified_time_millis_Set() const{
    return m_modified_time_millis_isSet;
}

bool OAISession::is_modified_time_millis_Valid() const{
    return m_modified_time_millis_isValid;
}

QString OAISession::getName() const {
    return m_name;
}
void OAISession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISession::is_name_Set() const{
    return m_name_isSet;
}

bool OAISession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISession::getStartTimeMillis() const {
    return m_start_time_millis;
}
void OAISession::setStartTimeMillis(const QString &start_time_millis) {
    m_start_time_millis = start_time_millis;
    m_start_time_millis_isSet = true;
}

bool OAISession::is_start_time_millis_Set() const{
    return m_start_time_millis_isSet;
}

bool OAISession::is_start_time_millis_Valid() const{
    return m_start_time_millis_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
