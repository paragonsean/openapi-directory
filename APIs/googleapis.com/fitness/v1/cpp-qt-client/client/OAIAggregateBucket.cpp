/**
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateBucket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateBucket::OAIAggregateBucket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateBucket::OAIAggregateBucket() {
    this->initializeModel();
}

OAIAggregateBucket::~OAIAggregateBucket() {}

void OAIAggregateBucket::initializeModel() {

    m_activity_isSet = false;
    m_activity_isValid = false;

    m_dataset_isSet = false;
    m_dataset_isValid = false;

    m_end_time_millis_isSet = false;
    m_end_time_millis_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_start_time_millis_isSet = false;
    m_start_time_millis_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAggregateBucket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateBucket::fromJsonObject(QJsonObject json) {

    m_activity_isValid = ::OpenAPI::fromJsonValue(m_activity, json[QString("activity")]);
    m_activity_isSet = !json[QString("activity")].isNull() && m_activity_isValid;

    m_dataset_isValid = ::OpenAPI::fromJsonValue(m_dataset, json[QString("dataset")]);
    m_dataset_isSet = !json[QString("dataset")].isNull() && m_dataset_isValid;

    m_end_time_millis_isValid = ::OpenAPI::fromJsonValue(m_end_time_millis, json[QString("endTimeMillis")]);
    m_end_time_millis_isSet = !json[QString("endTimeMillis")].isNull() && m_end_time_millis_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_start_time_millis_isValid = ::OpenAPI::fromJsonValue(m_start_time_millis, json[QString("startTimeMillis")]);
    m_start_time_millis_isSet = !json[QString("startTimeMillis")].isNull() && m_start_time_millis_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAggregateBucket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateBucket::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_isSet) {
        obj.insert(QString("activity"), ::OpenAPI::toJsonValue(m_activity));
    }
    if (m_dataset.size() > 0) {
        obj.insert(QString("dataset"), ::OpenAPI::toJsonValue(m_dataset));
    }
    if (m_end_time_millis_isSet) {
        obj.insert(QString("endTimeMillis"), ::OpenAPI::toJsonValue(m_end_time_millis));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_start_time_millis_isSet) {
        obj.insert(QString("startTimeMillis"), ::OpenAPI::toJsonValue(m_start_time_millis));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIAggregateBucket::getActivity() const {
    return m_activity;
}
void OAIAggregateBucket::setActivity(const qint32 &activity) {
    m_activity = activity;
    m_activity_isSet = true;
}

bool OAIAggregateBucket::is_activity_Set() const{
    return m_activity_isSet;
}

bool OAIAggregateBucket::is_activity_Valid() const{
    return m_activity_isValid;
}

QList<OAIDataset> OAIAggregateBucket::getDataset() const {
    return m_dataset;
}
void OAIAggregateBucket::setDataset(const QList<OAIDataset> &dataset) {
    m_dataset = dataset;
    m_dataset_isSet = true;
}

bool OAIAggregateBucket::is_dataset_Set() const{
    return m_dataset_isSet;
}

bool OAIAggregateBucket::is_dataset_Valid() const{
    return m_dataset_isValid;
}

QString OAIAggregateBucket::getEndTimeMillis() const {
    return m_end_time_millis;
}
void OAIAggregateBucket::setEndTimeMillis(const QString &end_time_millis) {
    m_end_time_millis = end_time_millis;
    m_end_time_millis_isSet = true;
}

bool OAIAggregateBucket::is_end_time_millis_Set() const{
    return m_end_time_millis_isSet;
}

bool OAIAggregateBucket::is_end_time_millis_Valid() const{
    return m_end_time_millis_isValid;
}

OAISession OAIAggregateBucket::getSession() const {
    return m_session;
}
void OAIAggregateBucket::setSession(const OAISession &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIAggregateBucket::is_session_Set() const{
    return m_session_isSet;
}

bool OAIAggregateBucket::is_session_Valid() const{
    return m_session_isValid;
}

QString OAIAggregateBucket::getStartTimeMillis() const {
    return m_start_time_millis;
}
void OAIAggregateBucket::setStartTimeMillis(const QString &start_time_millis) {
    m_start_time_millis = start_time_millis;
    m_start_time_millis_isSet = true;
}

bool OAIAggregateBucket::is_start_time_millis_Set() const{
    return m_start_time_millis_isSet;
}

bool OAIAggregateBucket::is_start_time_millis_Valid() const{
    return m_start_time_millis_isValid;
}

QString OAIAggregateBucket::getType() const {
    return m_type;
}
void OAIAggregateBucket::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAggregateBucket::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAggregateBucket::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAggregateBucket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateBucket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
