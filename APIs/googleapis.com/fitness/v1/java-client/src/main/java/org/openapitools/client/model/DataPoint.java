/*
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Value;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type. A data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. Data points always contain one value for each field of the data type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:33.798563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataPoint {
  public static final String SERIALIZED_NAME_COMPUTATION_TIME_MILLIS = "computationTimeMillis";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COMPUTATION_TIME_MILLIS)
  private String computationTimeMillis;

  public static final String SERIALIZED_NAME_DATA_TYPE_NAME = "dataTypeName";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE_NAME)
  private String dataTypeName;

  public static final String SERIALIZED_NAME_END_TIME_NANOS = "endTimeNanos";
  @SerializedName(SERIALIZED_NAME_END_TIME_NANOS)
  private String endTimeNanos;

  public static final String SERIALIZED_NAME_MODIFIED_TIME_MILLIS = "modifiedTimeMillis";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME_MILLIS)
  private String modifiedTimeMillis;

  public static final String SERIALIZED_NAME_ORIGIN_DATA_SOURCE_ID = "originDataSourceId";
  @SerializedName(SERIALIZED_NAME_ORIGIN_DATA_SOURCE_ID)
  private String originDataSourceId;

  public static final String SERIALIZED_NAME_RAW_TIMESTAMP_NANOS = "rawTimestampNanos";
  @SerializedName(SERIALIZED_NAME_RAW_TIMESTAMP_NANOS)
  private String rawTimestampNanos;

  public static final String SERIALIZED_NAME_START_TIME_NANOS = "startTimeNanos";
  @SerializedName(SERIALIZED_NAME_START_TIME_NANOS)
  private String startTimeNanos;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private List<Value> value = new ArrayList<>();

  public DataPoint() {
  }

  @Deprecated
  public DataPoint computationTimeMillis(String computationTimeMillis) {
    this.computationTimeMillis = computationTimeMillis;
    return this;
  }

  /**
   * DO NOT USE THIS FIELD. It is ignored, and not stored.
   * @return computationTimeMillis
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getComputationTimeMillis() {
    return computationTimeMillis;
  }

  @Deprecated
  public void setComputationTimeMillis(String computationTimeMillis) {
    this.computationTimeMillis = computationTimeMillis;
  }


  public DataPoint dataTypeName(String dataTypeName) {
    this.dataTypeName = dataTypeName;
    return this;
  }

  /**
   * The data type defining the format of the values in this data point.
   * @return dataTypeName
   */
  @javax.annotation.Nullable
  public String getDataTypeName() {
    return dataTypeName;
  }

  public void setDataTypeName(String dataTypeName) {
    this.dataTypeName = dataTypeName;
  }


  public DataPoint endTimeNanos(String endTimeNanos) {
    this.endTimeNanos = endTimeNanos;
    return this;
  }

  /**
   * The end time of the interval represented by this data point, in nanoseconds since epoch.
   * @return endTimeNanos
   */
  @javax.annotation.Nullable
  public String getEndTimeNanos() {
    return endTimeNanos;
  }

  public void setEndTimeNanos(String endTimeNanos) {
    this.endTimeNanos = endTimeNanos;
  }


  public DataPoint modifiedTimeMillis(String modifiedTimeMillis) {
    this.modifiedTimeMillis = modifiedTimeMillis;
    return this;
  }

  /**
   * Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.
   * @return modifiedTimeMillis
   */
  @javax.annotation.Nullable
  public String getModifiedTimeMillis() {
    return modifiedTimeMillis;
  }

  public void setModifiedTimeMillis(String modifiedTimeMillis) {
    this.modifiedTimeMillis = modifiedTimeMillis;
  }


  public DataPoint originDataSourceId(String originDataSourceId) {
    this.originDataSourceId = originDataSourceId;
    return this;
  }

  /**
   * If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally. WARNING: do not rely on this field for anything other than debugging. The value of this field, if it is set at all, is an implementation detail and is not guaranteed to remain consistent.
   * @return originDataSourceId
   */
  @javax.annotation.Nullable
  public String getOriginDataSourceId() {
    return originDataSourceId;
  }

  public void setOriginDataSourceId(String originDataSourceId) {
    this.originDataSourceId = originDataSourceId;
  }


  public DataPoint rawTimestampNanos(String rawTimestampNanos) {
    this.rawTimestampNanos = rawTimestampNanos;
    return this;
  }

  /**
   * The raw timestamp from the original SensorEvent.
   * @return rawTimestampNanos
   */
  @javax.annotation.Nullable
  public String getRawTimestampNanos() {
    return rawTimestampNanos;
  }

  public void setRawTimestampNanos(String rawTimestampNanos) {
    this.rawTimestampNanos = rawTimestampNanos;
  }


  public DataPoint startTimeNanos(String startTimeNanos) {
    this.startTimeNanos = startTimeNanos;
    return this;
  }

  /**
   * The start time of the interval represented by this data point, in nanoseconds since epoch.
   * @return startTimeNanos
   */
  @javax.annotation.Nullable
  public String getStartTimeNanos() {
    return startTimeNanos;
  }

  public void setStartTimeNanos(String startTimeNanos) {
    this.startTimeNanos = startTimeNanos;
  }


  public DataPoint value(List<Value> value) {
    this.value = value;
    return this;
  }

  public DataPoint addValueItem(Value valueItem) {
    if (this.value == null) {
      this.value = new ArrayList<>();
    }
    this.value.add(valueItem);
    return this;
  }

  /**
   * Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source. Only one of integer and floating point fields will be populated, depending on the format enum value within data source&#39;s type field.
   * @return value
   */
  @javax.annotation.Nullable
  public List<Value> getValue() {
    return value;
  }

  public void setValue(List<Value> value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataPoint dataPoint = (DataPoint) o;
    return Objects.equals(this.computationTimeMillis, dataPoint.computationTimeMillis) &&
        Objects.equals(this.dataTypeName, dataPoint.dataTypeName) &&
        Objects.equals(this.endTimeNanos, dataPoint.endTimeNanos) &&
        Objects.equals(this.modifiedTimeMillis, dataPoint.modifiedTimeMillis) &&
        Objects.equals(this.originDataSourceId, dataPoint.originDataSourceId) &&
        Objects.equals(this.rawTimestampNanos, dataPoint.rawTimestampNanos) &&
        Objects.equals(this.startTimeNanos, dataPoint.startTimeNanos) &&
        Objects.equals(this.value, dataPoint.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computationTimeMillis, dataTypeName, endTimeNanos, modifiedTimeMillis, originDataSourceId, rawTimestampNanos, startTimeNanos, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataPoint {\n");
    sb.append("    computationTimeMillis: ").append(toIndentedString(computationTimeMillis)).append("\n");
    sb.append("    dataTypeName: ").append(toIndentedString(dataTypeName)).append("\n");
    sb.append("    endTimeNanos: ").append(toIndentedString(endTimeNanos)).append("\n");
    sb.append("    modifiedTimeMillis: ").append(toIndentedString(modifiedTimeMillis)).append("\n");
    sb.append("    originDataSourceId: ").append(toIndentedString(originDataSourceId)).append("\n");
    sb.append("    rawTimestampNanos: ").append(toIndentedString(rawTimestampNanos)).append("\n");
    sb.append("    startTimeNanos: ").append(toIndentedString(startTimeNanos)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computationTimeMillis");
    openapiFields.add("dataTypeName");
    openapiFields.add("endTimeNanos");
    openapiFields.add("modifiedTimeMillis");
    openapiFields.add("originDataSourceId");
    openapiFields.add("rawTimestampNanos");
    openapiFields.add("startTimeNanos");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataPoint is not found in the empty JSON string", DataPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computationTimeMillis") != null && !jsonObj.get("computationTimeMillis").isJsonNull()) && !jsonObj.get("computationTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computationTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computationTimeMillis").toString()));
      }
      if ((jsonObj.get("dataTypeName") != null && !jsonObj.get("dataTypeName").isJsonNull()) && !jsonObj.get("dataTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataTypeName").toString()));
      }
      if ((jsonObj.get("endTimeNanos") != null && !jsonObj.get("endTimeNanos").isJsonNull()) && !jsonObj.get("endTimeNanos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeNanos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeNanos").toString()));
      }
      if ((jsonObj.get("modifiedTimeMillis") != null && !jsonObj.get("modifiedTimeMillis").isJsonNull()) && !jsonObj.get("modifiedTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedTimeMillis").toString()));
      }
      if ((jsonObj.get("originDataSourceId") != null && !jsonObj.get("originDataSourceId").isJsonNull()) && !jsonObj.get("originDataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originDataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originDataSourceId").toString()));
      }
      if ((jsonObj.get("rawTimestampNanos") != null && !jsonObj.get("rawTimestampNanos").isJsonNull()) && !jsonObj.get("rawTimestampNanos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawTimestampNanos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawTimestampNanos").toString()));
      }
      if ((jsonObj.get("startTimeNanos") != null && !jsonObj.get("startTimeNanos").isJsonNull()) && !jsonObj.get("startTimeNanos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeNanos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeNanos").toString()));
      }
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        JsonArray jsonArrayvalue = jsonObj.getAsJsonArray("value");
        if (jsonArrayvalue != null) {
          // ensure the json data is an array
          if (!jsonObj.get("value").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `value` to be an array in the JSON string but got `%s`", jsonObj.get("value").toString()));
          }

          // validate the optional field `value` (array)
          for (int i = 0; i < jsonArrayvalue.size(); i++) {
            Value.validateJsonElement(jsonArrayvalue.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<DataPoint>() {
           @Override
           public void write(JsonWriter out, DataPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataPoint
   * @throws IOException if the JSON string is invalid with respect to DataPoint
   */
  public static DataPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataPoint.class);
  }

  /**
   * Convert an instance of DataPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

