/*
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataPoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:33.798563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dataset {
  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_MAX_END_TIME_NS = "maxEndTimeNs";
  @SerializedName(SERIALIZED_NAME_MAX_END_TIME_NS)
  private String maxEndTimeNs;

  public static final String SERIALIZED_NAME_MIN_START_TIME_NS = "minStartTimeNs";
  @SerializedName(SERIALIZED_NAME_MIN_START_TIME_NS)
  private String minStartTimeNs;

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_POINT = "point";
  @SerializedName(SERIALIZED_NAME_POINT)
  private List<DataPoint> point = new ArrayList<>();

  public Dataset() {
  }

  public Dataset dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * The data stream ID of the data source that created the points in this dataset.
   * @return dataSourceId
   */
  @javax.annotation.Nullable
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public Dataset maxEndTimeNs(String maxEndTimeNs) {
    this.maxEndTimeNs = maxEndTimeNs;
    return this;
  }

  /**
   * The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.
   * @return maxEndTimeNs
   */
  @javax.annotation.Nullable
  public String getMaxEndTimeNs() {
    return maxEndTimeNs;
  }

  public void setMaxEndTimeNs(String maxEndTimeNs) {
    this.maxEndTimeNs = maxEndTimeNs;
  }


  public Dataset minStartTimeNs(String minStartTimeNs) {
    this.minStartTimeNs = minStartTimeNs;
    return this;
  }

  /**
   * The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.
   * @return minStartTimeNs
   */
  @javax.annotation.Nullable
  public String getMinStartTimeNs() {
    return minStartTimeNs;
  }

  public void setMinStartTimeNs(String minStartTimeNs) {
    this.minStartTimeNs = minStartTimeNs;
  }


  public Dataset nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public Dataset point(List<DataPoint> point) {
    this.point = point;
    return this;
  }

  public Dataset addPointItem(DataPoint pointItem) {
    if (this.point == null) {
      this.point = new ArrayList<>();
    }
    this.point.add(pointItem);
    return this;
  }

  /**
   * A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.
   * @return point
   */
  @javax.annotation.Nullable
  public List<DataPoint> getPoint() {
    return point;
  }

  public void setPoint(List<DataPoint> point) {
    this.point = point;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.dataSourceId, dataset.dataSourceId) &&
        Objects.equals(this.maxEndTimeNs, dataset.maxEndTimeNs) &&
        Objects.equals(this.minStartTimeNs, dataset.minStartTimeNs) &&
        Objects.equals(this.nextPageToken, dataset.nextPageToken) &&
        Objects.equals(this.point, dataset.point);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSourceId, maxEndTimeNs, minStartTimeNs, nextPageToken, point);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    maxEndTimeNs: ").append(toIndentedString(maxEndTimeNs)).append("\n");
    sb.append("    minStartTimeNs: ").append(toIndentedString(minStartTimeNs)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    point: ").append(toIndentedString(point)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSourceId");
    openapiFields.add("maxEndTimeNs");
    openapiFields.add("minStartTimeNs");
    openapiFields.add("nextPageToken");
    openapiFields.add("point");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dataset is not found in the empty JSON string", Dataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSourceId") != null && !jsonObj.get("dataSourceId").isJsonNull()) && !jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if ((jsonObj.get("maxEndTimeNs") != null && !jsonObj.get("maxEndTimeNs").isJsonNull()) && !jsonObj.get("maxEndTimeNs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxEndTimeNs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxEndTimeNs").toString()));
      }
      if ((jsonObj.get("minStartTimeNs") != null && !jsonObj.get("minStartTimeNs").isJsonNull()) && !jsonObj.get("minStartTimeNs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minStartTimeNs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minStartTimeNs").toString()));
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("point") != null && !jsonObj.get("point").isJsonNull()) {
        JsonArray jsonArraypoint = jsonObj.getAsJsonArray("point");
        if (jsonArraypoint != null) {
          // ensure the json data is an array
          if (!jsonObj.get("point").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `point` to be an array in the JSON string but got `%s`", jsonObj.get("point").toString()));
          }

          // validate the optional field `point` (array)
          for (int i = 0; i < jsonArraypoint.size(); i++) {
            DataPoint.validateJsonElement(jsonArraypoint.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dataset.class));

       return (TypeAdapter<T>) new TypeAdapter<Dataset>() {
           @Override
           public void write(JsonWriter out, Dataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dataset
   * @throws IOException if the JSON string is invalid with respect to Dataset
   */
  public static Dataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dataset.class);
  }

  /**
   * Convert an instance of Dataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

