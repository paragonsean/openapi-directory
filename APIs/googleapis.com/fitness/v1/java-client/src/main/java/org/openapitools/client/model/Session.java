/*
 * Fitness API
 * The Fitness API for managing users' fitness tracking data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Application;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sessions contain metadata, such as a user-friendly name and time interval information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:33.798563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Session {
  public static final String SERIALIZED_NAME_ACTIVE_TIME_MILLIS = "activeTimeMillis";
  @SerializedName(SERIALIZED_NAME_ACTIVE_TIME_MILLIS)
  private String activeTimeMillis;

  public static final String SERIALIZED_NAME_ACTIVITY_TYPE = "activityType";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_TYPE)
  private Integer activityType;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private Application application;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_TIME_MILLIS = "endTimeMillis";
  @SerializedName(SERIALIZED_NAME_END_TIME_MILLIS)
  private String endTimeMillis;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MODIFIED_TIME_MILLIS = "modifiedTimeMillis";
  @SerializedName(SERIALIZED_NAME_MODIFIED_TIME_MILLIS)
  private String modifiedTimeMillis;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_TIME_MILLIS = "startTimeMillis";
  @SerializedName(SERIALIZED_NAME_START_TIME_MILLIS)
  private String startTimeMillis;

  public Session() {
  }

  public Session activeTimeMillis(String activeTimeMillis) {
    this.activeTimeMillis = activeTimeMillis;
    return this;
  }

  /**
   * Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value
   * @return activeTimeMillis
   */
  @javax.annotation.Nullable
  public String getActiveTimeMillis() {
    return activeTimeMillis;
  }

  public void setActiveTimeMillis(String activeTimeMillis) {
    this.activeTimeMillis = activeTimeMillis;
  }


  public Session activityType(Integer activityType) {
    this.activityType = activityType;
    return this;
  }

  /**
   * The type of activity this session represents.
   * @return activityType
   */
  @javax.annotation.Nullable
  public Integer getActivityType() {
    return activityType;
  }

  public void setActivityType(Integer activityType) {
    this.activityType = activityType;
  }


  public Session application(Application application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nullable
  public Application getApplication() {
    return application;
  }

  public void setApplication(Application application) {
    this.application = application;
  }


  public Session description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description for this session.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Session endTimeMillis(String endTimeMillis) {
    this.endTimeMillis = endTimeMillis;
    return this;
  }

  /**
   * An end time, in milliseconds since epoch, inclusive.
   * @return endTimeMillis
   */
  @javax.annotation.Nullable
  public String getEndTimeMillis() {
    return endTimeMillis;
  }

  public void setEndTimeMillis(String endTimeMillis) {
    this.endTimeMillis = endTimeMillis;
  }


  public Session id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A client-generated identifier that is unique across all sessions owned by this particular user.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Session modifiedTimeMillis(String modifiedTimeMillis) {
    this.modifiedTimeMillis = modifiedTimeMillis;
    return this;
  }

  /**
   * A timestamp that indicates when the session was last modified.
   * @return modifiedTimeMillis
   */
  @javax.annotation.Nullable
  public String getModifiedTimeMillis() {
    return modifiedTimeMillis;
  }

  public void setModifiedTimeMillis(String modifiedTimeMillis) {
    this.modifiedTimeMillis = modifiedTimeMillis;
  }


  public Session name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A human readable name of the session.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Session startTimeMillis(String startTimeMillis) {
    this.startTimeMillis = startTimeMillis;
    return this;
  }

  /**
   * A start time, in milliseconds since epoch, inclusive.
   * @return startTimeMillis
   */
  @javax.annotation.Nullable
  public String getStartTimeMillis() {
    return startTimeMillis;
  }

  public void setStartTimeMillis(String startTimeMillis) {
    this.startTimeMillis = startTimeMillis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Session session = (Session) o;
    return Objects.equals(this.activeTimeMillis, session.activeTimeMillis) &&
        Objects.equals(this.activityType, session.activityType) &&
        Objects.equals(this.application, session.application) &&
        Objects.equals(this.description, session.description) &&
        Objects.equals(this.endTimeMillis, session.endTimeMillis) &&
        Objects.equals(this.id, session.id) &&
        Objects.equals(this.modifiedTimeMillis, session.modifiedTimeMillis) &&
        Objects.equals(this.name, session.name) &&
        Objects.equals(this.startTimeMillis, session.startTimeMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeTimeMillis, activityType, application, description, endTimeMillis, id, modifiedTimeMillis, name, startTimeMillis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Session {\n");
    sb.append("    activeTimeMillis: ").append(toIndentedString(activeTimeMillis)).append("\n");
    sb.append("    activityType: ").append(toIndentedString(activityType)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endTimeMillis: ").append(toIndentedString(endTimeMillis)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modifiedTimeMillis: ").append(toIndentedString(modifiedTimeMillis)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startTimeMillis: ").append(toIndentedString(startTimeMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeTimeMillis");
    openapiFields.add("activityType");
    openapiFields.add("application");
    openapiFields.add("description");
    openapiFields.add("endTimeMillis");
    openapiFields.add("id");
    openapiFields.add("modifiedTimeMillis");
    openapiFields.add("name");
    openapiFields.add("startTimeMillis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Session
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Session.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Session is not found in the empty JSON string", Session.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Session.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Session` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeTimeMillis") != null && !jsonObj.get("activeTimeMillis").isJsonNull()) && !jsonObj.get("activeTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeTimeMillis").toString()));
      }
      // validate the optional field `application`
      if (jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) {
        Application.validateJsonElement(jsonObj.get("application"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("endTimeMillis") != null && !jsonObj.get("endTimeMillis").isJsonNull()) && !jsonObj.get("endTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeMillis").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("modifiedTimeMillis") != null && !jsonObj.get("modifiedTimeMillis").isJsonNull()) && !jsonObj.get("modifiedTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedTimeMillis").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("startTimeMillis") != null && !jsonObj.get("startTimeMillis").isJsonNull()) && !jsonObj.get("startTimeMillis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeMillis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeMillis").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Session.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Session' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Session> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Session.class));

       return (TypeAdapter<T>) new TypeAdapter<Session>() {
           @Override
           public void write(JsonWriter out, Session value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Session read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Session given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Session
   * @throws IOException if the JSON string is invalid with respect to Session
   */
  public static Session fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Session.class);
  }

  /**
   * Convert an instance of Session to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

