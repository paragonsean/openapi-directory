/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppIcons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppIcons::OAIAppIcons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppIcons::OAIAppIcons() {
    this->initializeModel();
}

OAIAppIcons::~OAIAppIcons() {}

void OAIAppIcons::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIAppIcons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppIcons::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIAppIcons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppIcons::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIAppIcons::getCategory() const {
    return m_category;
}
void OAIAppIcons::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIAppIcons::is_category_Set() const{
    return m_category_isSet;
}

bool OAIAppIcons::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIAppIcons::getIconUrl() const {
    return m_icon_url;
}
void OAIAppIcons::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIAppIcons::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIAppIcons::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

qint32 OAIAppIcons::getSize() const {
    return m_size;
}
void OAIAppIcons::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAppIcons::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAppIcons::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIAppIcons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppIcons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
