/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDrive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDrive::OAITeamDrive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDrive::OAITeamDrive() {
    this->initializeModel();
}

OAITeamDrive::~OAITeamDrive() {}

void OAITeamDrive::initializeModel() {

    m_background_image_file_isSet = false;
    m_background_image_file_isValid = false;

    m_background_image_link_isSet = false;
    m_background_image_link_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_color_rgb_isSet = false;
    m_color_rgb_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_org_unit_id_isSet = false;
    m_org_unit_id_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;
}

void OAITeamDrive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDrive::fromJsonObject(QJsonObject json) {

    m_background_image_file_isValid = ::OpenAPI::fromJsonValue(m_background_image_file, json[QString("backgroundImageFile")]);
    m_background_image_file_isSet = !json[QString("backgroundImageFile")].isNull() && m_background_image_file_isValid;

    m_background_image_link_isValid = ::OpenAPI::fromJsonValue(m_background_image_link, json[QString("backgroundImageLink")]);
    m_background_image_link_isSet = !json[QString("backgroundImageLink")].isNull() && m_background_image_link_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_color_rgb_isValid = ::OpenAPI::fromJsonValue(m_color_rgb, json[QString("colorRgb")]);
    m_color_rgb_isSet = !json[QString("colorRgb")].isNull() && m_color_rgb_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_org_unit_id_isValid = ::OpenAPI::fromJsonValue(m_org_unit_id, json[QString("orgUnitId")]);
    m_org_unit_id_isSet = !json[QString("orgUnitId")].isNull() && m_org_unit_id_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;
}

QString OAITeamDrive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDrive::asJsonObject() const {
    QJsonObject obj;
    if (m_background_image_file.isSet()) {
        obj.insert(QString("backgroundImageFile"), ::OpenAPI::toJsonValue(m_background_image_file));
    }
    if (m_background_image_link_isSet) {
        obj.insert(QString("backgroundImageLink"), ::OpenAPI::toJsonValue(m_background_image_link));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_color_rgb_isSet) {
        obj.insert(QString("colorRgb"), ::OpenAPI::toJsonValue(m_color_rgb));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_org_unit_id_isSet) {
        obj.insert(QString("orgUnitId"), ::OpenAPI::toJsonValue(m_org_unit_id));
    }
    if (m_restrictions.isSet()) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    return obj;
}

OAITeamDrive_backgroundImageFile OAITeamDrive::getBackgroundImageFile() const {
    return m_background_image_file;
}
void OAITeamDrive::setBackgroundImageFile(const OAITeamDrive_backgroundImageFile &background_image_file) {
    m_background_image_file = background_image_file;
    m_background_image_file_isSet = true;
}

bool OAITeamDrive::is_background_image_file_Set() const{
    return m_background_image_file_isSet;
}

bool OAITeamDrive::is_background_image_file_Valid() const{
    return m_background_image_file_isValid;
}

QString OAITeamDrive::getBackgroundImageLink() const {
    return m_background_image_link;
}
void OAITeamDrive::setBackgroundImageLink(const QString &background_image_link) {
    m_background_image_link = background_image_link;
    m_background_image_link_isSet = true;
}

bool OAITeamDrive::is_background_image_link_Set() const{
    return m_background_image_link_isSet;
}

bool OAITeamDrive::is_background_image_link_Valid() const{
    return m_background_image_link_isValid;
}

OAITeamDrive_capabilities OAITeamDrive::getCapabilities() const {
    return m_capabilities;
}
void OAITeamDrive::setCapabilities(const OAITeamDrive_capabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAITeamDrive::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAITeamDrive::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAITeamDrive::getColorRgb() const {
    return m_color_rgb;
}
void OAITeamDrive::setColorRgb(const QString &color_rgb) {
    m_color_rgb = color_rgb;
    m_color_rgb_isSet = true;
}

bool OAITeamDrive::is_color_rgb_Set() const{
    return m_color_rgb_isSet;
}

bool OAITeamDrive::is_color_rgb_Valid() const{
    return m_color_rgb_isValid;
}

QDateTime OAITeamDrive::getCreatedTime() const {
    return m_created_time;
}
void OAITeamDrive::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAITeamDrive::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAITeamDrive::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAITeamDrive::getId() const {
    return m_id;
}
void OAITeamDrive::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeamDrive::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeamDrive::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITeamDrive::getKind() const {
    return m_kind;
}
void OAITeamDrive::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITeamDrive::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITeamDrive::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAITeamDrive::getName() const {
    return m_name;
}
void OAITeamDrive::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITeamDrive::is_name_Set() const{
    return m_name_isSet;
}

bool OAITeamDrive::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITeamDrive::getOrgUnitId() const {
    return m_org_unit_id;
}
void OAITeamDrive::setOrgUnitId(const QString &org_unit_id) {
    m_org_unit_id = org_unit_id;
    m_org_unit_id_isSet = true;
}

bool OAITeamDrive::is_org_unit_id_Set() const{
    return m_org_unit_id_isSet;
}

bool OAITeamDrive::is_org_unit_id_Valid() const{
    return m_org_unit_id_isValid;
}

OAITeamDrive_restrictions OAITeamDrive::getRestrictions() const {
    return m_restrictions;
}
void OAITeamDrive::setRestrictions(const OAITeamDrive_restrictions &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAITeamDrive::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAITeamDrive::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAITeamDrive::getThemeId() const {
    return m_theme_id;
}
void OAITeamDrive::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAITeamDrive::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAITeamDrive::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAITeamDrive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_image_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_image_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_rgb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_unit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDrive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
