/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_contentHints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_contentHints::OAIFile_contentHints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_contentHints::OAIFile_contentHints() {
    this->initializeModel();
}

OAIFile_contentHints::~OAIFile_contentHints() {}

void OAIFile_contentHints::initializeModel() {

    m_indexable_text_isSet = false;
    m_indexable_text_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIFile_contentHints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_contentHints::fromJsonObject(QJsonObject json) {

    m_indexable_text_isValid = ::OpenAPI::fromJsonValue(m_indexable_text, json[QString("indexableText")]);
    m_indexable_text_isSet = !json[QString("indexableText")].isNull() && m_indexable_text_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIFile_contentHints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_contentHints::asJsonObject() const {
    QJsonObject obj;
    if (m_indexable_text_isSet) {
        obj.insert(QString("indexableText"), ::OpenAPI::toJsonValue(m_indexable_text));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

QString OAIFile_contentHints::getIndexableText() const {
    return m_indexable_text;
}
void OAIFile_contentHints::setIndexableText(const QString &indexable_text) {
    m_indexable_text = indexable_text;
    m_indexable_text_isSet = true;
}

bool OAIFile_contentHints::is_indexable_text_Set() const{
    return m_indexable_text_isSet;
}

bool OAIFile_contentHints::is_indexable_text_Valid() const{
    return m_indexable_text_isValid;
}

OAIFile_contentHints_thumbnail OAIFile_contentHints::getThumbnail() const {
    return m_thumbnail;
}
void OAIFile_contentHints::setThumbnail(const OAIFile_contentHints_thumbnail &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIFile_contentHints::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIFile_contentHints::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIFile_contentHints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_indexable_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_contentHints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
