/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDrive_capabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDrive_capabilities::OAITeamDrive_capabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDrive_capabilities::OAITeamDrive_capabilities() {
    this->initializeModel();
}

OAITeamDrive_capabilities::~OAITeamDrive_capabilities() {}

void OAITeamDrive_capabilities::initializeModel() {

    m_can_add_children_isSet = false;
    m_can_add_children_isValid = false;

    m_can_change_copy_requires_writer_permission_restriction_isSet = false;
    m_can_change_copy_requires_writer_permission_restriction_isValid = false;

    m_can_change_domain_users_only_restriction_isSet = false;
    m_can_change_domain_users_only_restriction_isValid = false;

    m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet = false;
    m_can_change_sharing_folders_requires_organizer_permission_restriction_isValid = false;

    m_can_change_team_drive_background_isSet = false;
    m_can_change_team_drive_background_isValid = false;

    m_can_change_team_members_only_restriction_isSet = false;
    m_can_change_team_members_only_restriction_isValid = false;

    m_can_comment_isSet = false;
    m_can_comment_isValid = false;

    m_can_copy_isSet = false;
    m_can_copy_isValid = false;

    m_can_delete_children_isSet = false;
    m_can_delete_children_isValid = false;

    m_can_delete_team_drive_isSet = false;
    m_can_delete_team_drive_isValid = false;

    m_can_download_isSet = false;
    m_can_download_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_list_children_isSet = false;
    m_can_list_children_isValid = false;

    m_can_manage_members_isSet = false;
    m_can_manage_members_isValid = false;

    m_can_read_revisions_isSet = false;
    m_can_read_revisions_isValid = false;

    m_can_remove_children_isSet = false;
    m_can_remove_children_isValid = false;

    m_can_rename_isSet = false;
    m_can_rename_isValid = false;

    m_can_rename_team_drive_isSet = false;
    m_can_rename_team_drive_isValid = false;

    m_can_reset_team_drive_restrictions_isSet = false;
    m_can_reset_team_drive_restrictions_isValid = false;

    m_can_share_isSet = false;
    m_can_share_isValid = false;

    m_can_trash_children_isSet = false;
    m_can_trash_children_isValid = false;
}

void OAITeamDrive_capabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDrive_capabilities::fromJsonObject(QJsonObject json) {

    m_can_add_children_isValid = ::OpenAPI::fromJsonValue(m_can_add_children, json[QString("canAddChildren")]);
    m_can_add_children_isSet = !json[QString("canAddChildren")].isNull() && m_can_add_children_isValid;

    m_can_change_copy_requires_writer_permission_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_change_copy_requires_writer_permission_restriction, json[QString("canChangeCopyRequiresWriterPermissionRestriction")]);
    m_can_change_copy_requires_writer_permission_restriction_isSet = !json[QString("canChangeCopyRequiresWriterPermissionRestriction")].isNull() && m_can_change_copy_requires_writer_permission_restriction_isValid;

    m_can_change_domain_users_only_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_change_domain_users_only_restriction, json[QString("canChangeDomainUsersOnlyRestriction")]);
    m_can_change_domain_users_only_restriction_isSet = !json[QString("canChangeDomainUsersOnlyRestriction")].isNull() && m_can_change_domain_users_only_restriction_isValid;

    m_can_change_sharing_folders_requires_organizer_permission_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_change_sharing_folders_requires_organizer_permission_restriction, json[QString("canChangeSharingFoldersRequiresOrganizerPermissionRestriction")]);
    m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet = !json[QString("canChangeSharingFoldersRequiresOrganizerPermissionRestriction")].isNull() && m_can_change_sharing_folders_requires_organizer_permission_restriction_isValid;

    m_can_change_team_drive_background_isValid = ::OpenAPI::fromJsonValue(m_can_change_team_drive_background, json[QString("canChangeTeamDriveBackground")]);
    m_can_change_team_drive_background_isSet = !json[QString("canChangeTeamDriveBackground")].isNull() && m_can_change_team_drive_background_isValid;

    m_can_change_team_members_only_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_change_team_members_only_restriction, json[QString("canChangeTeamMembersOnlyRestriction")]);
    m_can_change_team_members_only_restriction_isSet = !json[QString("canChangeTeamMembersOnlyRestriction")].isNull() && m_can_change_team_members_only_restriction_isValid;

    m_can_comment_isValid = ::OpenAPI::fromJsonValue(m_can_comment, json[QString("canComment")]);
    m_can_comment_isSet = !json[QString("canComment")].isNull() && m_can_comment_isValid;

    m_can_copy_isValid = ::OpenAPI::fromJsonValue(m_can_copy, json[QString("canCopy")]);
    m_can_copy_isSet = !json[QString("canCopy")].isNull() && m_can_copy_isValid;

    m_can_delete_children_isValid = ::OpenAPI::fromJsonValue(m_can_delete_children, json[QString("canDeleteChildren")]);
    m_can_delete_children_isSet = !json[QString("canDeleteChildren")].isNull() && m_can_delete_children_isValid;

    m_can_delete_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_delete_team_drive, json[QString("canDeleteTeamDrive")]);
    m_can_delete_team_drive_isSet = !json[QString("canDeleteTeamDrive")].isNull() && m_can_delete_team_drive_isValid;

    m_can_download_isValid = ::OpenAPI::fromJsonValue(m_can_download, json[QString("canDownload")]);
    m_can_download_isSet = !json[QString("canDownload")].isNull() && m_can_download_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("canEdit")]);
    m_can_edit_isSet = !json[QString("canEdit")].isNull() && m_can_edit_isValid;

    m_can_list_children_isValid = ::OpenAPI::fromJsonValue(m_can_list_children, json[QString("canListChildren")]);
    m_can_list_children_isSet = !json[QString("canListChildren")].isNull() && m_can_list_children_isValid;

    m_can_manage_members_isValid = ::OpenAPI::fromJsonValue(m_can_manage_members, json[QString("canManageMembers")]);
    m_can_manage_members_isSet = !json[QString("canManageMembers")].isNull() && m_can_manage_members_isValid;

    m_can_read_revisions_isValid = ::OpenAPI::fromJsonValue(m_can_read_revisions, json[QString("canReadRevisions")]);
    m_can_read_revisions_isSet = !json[QString("canReadRevisions")].isNull() && m_can_read_revisions_isValid;

    m_can_remove_children_isValid = ::OpenAPI::fromJsonValue(m_can_remove_children, json[QString("canRemoveChildren")]);
    m_can_remove_children_isSet = !json[QString("canRemoveChildren")].isNull() && m_can_remove_children_isValid;

    m_can_rename_isValid = ::OpenAPI::fromJsonValue(m_can_rename, json[QString("canRename")]);
    m_can_rename_isSet = !json[QString("canRename")].isNull() && m_can_rename_isValid;

    m_can_rename_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_rename_team_drive, json[QString("canRenameTeamDrive")]);
    m_can_rename_team_drive_isSet = !json[QString("canRenameTeamDrive")].isNull() && m_can_rename_team_drive_isValid;

    m_can_reset_team_drive_restrictions_isValid = ::OpenAPI::fromJsonValue(m_can_reset_team_drive_restrictions, json[QString("canResetTeamDriveRestrictions")]);
    m_can_reset_team_drive_restrictions_isSet = !json[QString("canResetTeamDriveRestrictions")].isNull() && m_can_reset_team_drive_restrictions_isValid;

    m_can_share_isValid = ::OpenAPI::fromJsonValue(m_can_share, json[QString("canShare")]);
    m_can_share_isSet = !json[QString("canShare")].isNull() && m_can_share_isValid;

    m_can_trash_children_isValid = ::OpenAPI::fromJsonValue(m_can_trash_children, json[QString("canTrashChildren")]);
    m_can_trash_children_isSet = !json[QString("canTrashChildren")].isNull() && m_can_trash_children_isValid;
}

QString OAITeamDrive_capabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDrive_capabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_can_add_children_isSet) {
        obj.insert(QString("canAddChildren"), ::OpenAPI::toJsonValue(m_can_add_children));
    }
    if (m_can_change_copy_requires_writer_permission_restriction_isSet) {
        obj.insert(QString("canChangeCopyRequiresWriterPermissionRestriction"), ::OpenAPI::toJsonValue(m_can_change_copy_requires_writer_permission_restriction));
    }
    if (m_can_change_domain_users_only_restriction_isSet) {
        obj.insert(QString("canChangeDomainUsersOnlyRestriction"), ::OpenAPI::toJsonValue(m_can_change_domain_users_only_restriction));
    }
    if (m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet) {
        obj.insert(QString("canChangeSharingFoldersRequiresOrganizerPermissionRestriction"), ::OpenAPI::toJsonValue(m_can_change_sharing_folders_requires_organizer_permission_restriction));
    }
    if (m_can_change_team_drive_background_isSet) {
        obj.insert(QString("canChangeTeamDriveBackground"), ::OpenAPI::toJsonValue(m_can_change_team_drive_background));
    }
    if (m_can_change_team_members_only_restriction_isSet) {
        obj.insert(QString("canChangeTeamMembersOnlyRestriction"), ::OpenAPI::toJsonValue(m_can_change_team_members_only_restriction));
    }
    if (m_can_comment_isSet) {
        obj.insert(QString("canComment"), ::OpenAPI::toJsonValue(m_can_comment));
    }
    if (m_can_copy_isSet) {
        obj.insert(QString("canCopy"), ::OpenAPI::toJsonValue(m_can_copy));
    }
    if (m_can_delete_children_isSet) {
        obj.insert(QString("canDeleteChildren"), ::OpenAPI::toJsonValue(m_can_delete_children));
    }
    if (m_can_delete_team_drive_isSet) {
        obj.insert(QString("canDeleteTeamDrive"), ::OpenAPI::toJsonValue(m_can_delete_team_drive));
    }
    if (m_can_download_isSet) {
        obj.insert(QString("canDownload"), ::OpenAPI::toJsonValue(m_can_download));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("canEdit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_list_children_isSet) {
        obj.insert(QString("canListChildren"), ::OpenAPI::toJsonValue(m_can_list_children));
    }
    if (m_can_manage_members_isSet) {
        obj.insert(QString("canManageMembers"), ::OpenAPI::toJsonValue(m_can_manage_members));
    }
    if (m_can_read_revisions_isSet) {
        obj.insert(QString("canReadRevisions"), ::OpenAPI::toJsonValue(m_can_read_revisions));
    }
    if (m_can_remove_children_isSet) {
        obj.insert(QString("canRemoveChildren"), ::OpenAPI::toJsonValue(m_can_remove_children));
    }
    if (m_can_rename_isSet) {
        obj.insert(QString("canRename"), ::OpenAPI::toJsonValue(m_can_rename));
    }
    if (m_can_rename_team_drive_isSet) {
        obj.insert(QString("canRenameTeamDrive"), ::OpenAPI::toJsonValue(m_can_rename_team_drive));
    }
    if (m_can_reset_team_drive_restrictions_isSet) {
        obj.insert(QString("canResetTeamDriveRestrictions"), ::OpenAPI::toJsonValue(m_can_reset_team_drive_restrictions));
    }
    if (m_can_share_isSet) {
        obj.insert(QString("canShare"), ::OpenAPI::toJsonValue(m_can_share));
    }
    if (m_can_trash_children_isSet) {
        obj.insert(QString("canTrashChildren"), ::OpenAPI::toJsonValue(m_can_trash_children));
    }
    return obj;
}

bool OAITeamDrive_capabilities::isCanAddChildren() const {
    return m_can_add_children;
}
void OAITeamDrive_capabilities::setCanAddChildren(const bool &can_add_children) {
    m_can_add_children = can_add_children;
    m_can_add_children_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_add_children_Set() const{
    return m_can_add_children_isSet;
}

bool OAITeamDrive_capabilities::is_can_add_children_Valid() const{
    return m_can_add_children_isValid;
}

bool OAITeamDrive_capabilities::isCanChangeCopyRequiresWriterPermissionRestriction() const {
    return m_can_change_copy_requires_writer_permission_restriction;
}
void OAITeamDrive_capabilities::setCanChangeCopyRequiresWriterPermissionRestriction(const bool &can_change_copy_requires_writer_permission_restriction) {
    m_can_change_copy_requires_writer_permission_restriction = can_change_copy_requires_writer_permission_restriction;
    m_can_change_copy_requires_writer_permission_restriction_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_change_copy_requires_writer_permission_restriction_Set() const{
    return m_can_change_copy_requires_writer_permission_restriction_isSet;
}

bool OAITeamDrive_capabilities::is_can_change_copy_requires_writer_permission_restriction_Valid() const{
    return m_can_change_copy_requires_writer_permission_restriction_isValid;
}

bool OAITeamDrive_capabilities::isCanChangeDomainUsersOnlyRestriction() const {
    return m_can_change_domain_users_only_restriction;
}
void OAITeamDrive_capabilities::setCanChangeDomainUsersOnlyRestriction(const bool &can_change_domain_users_only_restriction) {
    m_can_change_domain_users_only_restriction = can_change_domain_users_only_restriction;
    m_can_change_domain_users_only_restriction_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_change_domain_users_only_restriction_Set() const{
    return m_can_change_domain_users_only_restriction_isSet;
}

bool OAITeamDrive_capabilities::is_can_change_domain_users_only_restriction_Valid() const{
    return m_can_change_domain_users_only_restriction_isValid;
}

bool OAITeamDrive_capabilities::isCanChangeSharingFoldersRequiresOrganizerPermissionRestriction() const {
    return m_can_change_sharing_folders_requires_organizer_permission_restriction;
}
void OAITeamDrive_capabilities::setCanChangeSharingFoldersRequiresOrganizerPermissionRestriction(const bool &can_change_sharing_folders_requires_organizer_permission_restriction) {
    m_can_change_sharing_folders_requires_organizer_permission_restriction = can_change_sharing_folders_requires_organizer_permission_restriction;
    m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_change_sharing_folders_requires_organizer_permission_restriction_Set() const{
    return m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet;
}

bool OAITeamDrive_capabilities::is_can_change_sharing_folders_requires_organizer_permission_restriction_Valid() const{
    return m_can_change_sharing_folders_requires_organizer_permission_restriction_isValid;
}

bool OAITeamDrive_capabilities::isCanChangeTeamDriveBackground() const {
    return m_can_change_team_drive_background;
}
void OAITeamDrive_capabilities::setCanChangeTeamDriveBackground(const bool &can_change_team_drive_background) {
    m_can_change_team_drive_background = can_change_team_drive_background;
    m_can_change_team_drive_background_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_change_team_drive_background_Set() const{
    return m_can_change_team_drive_background_isSet;
}

bool OAITeamDrive_capabilities::is_can_change_team_drive_background_Valid() const{
    return m_can_change_team_drive_background_isValid;
}

bool OAITeamDrive_capabilities::isCanChangeTeamMembersOnlyRestriction() const {
    return m_can_change_team_members_only_restriction;
}
void OAITeamDrive_capabilities::setCanChangeTeamMembersOnlyRestriction(const bool &can_change_team_members_only_restriction) {
    m_can_change_team_members_only_restriction = can_change_team_members_only_restriction;
    m_can_change_team_members_only_restriction_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_change_team_members_only_restriction_Set() const{
    return m_can_change_team_members_only_restriction_isSet;
}

bool OAITeamDrive_capabilities::is_can_change_team_members_only_restriction_Valid() const{
    return m_can_change_team_members_only_restriction_isValid;
}

bool OAITeamDrive_capabilities::isCanComment() const {
    return m_can_comment;
}
void OAITeamDrive_capabilities::setCanComment(const bool &can_comment) {
    m_can_comment = can_comment;
    m_can_comment_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_comment_Set() const{
    return m_can_comment_isSet;
}

bool OAITeamDrive_capabilities::is_can_comment_Valid() const{
    return m_can_comment_isValid;
}

bool OAITeamDrive_capabilities::isCanCopy() const {
    return m_can_copy;
}
void OAITeamDrive_capabilities::setCanCopy(const bool &can_copy) {
    m_can_copy = can_copy;
    m_can_copy_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_copy_Set() const{
    return m_can_copy_isSet;
}

bool OAITeamDrive_capabilities::is_can_copy_Valid() const{
    return m_can_copy_isValid;
}

bool OAITeamDrive_capabilities::isCanDeleteChildren() const {
    return m_can_delete_children;
}
void OAITeamDrive_capabilities::setCanDeleteChildren(const bool &can_delete_children) {
    m_can_delete_children = can_delete_children;
    m_can_delete_children_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_delete_children_Set() const{
    return m_can_delete_children_isSet;
}

bool OAITeamDrive_capabilities::is_can_delete_children_Valid() const{
    return m_can_delete_children_isValid;
}

bool OAITeamDrive_capabilities::isCanDeleteTeamDrive() const {
    return m_can_delete_team_drive;
}
void OAITeamDrive_capabilities::setCanDeleteTeamDrive(const bool &can_delete_team_drive) {
    m_can_delete_team_drive = can_delete_team_drive;
    m_can_delete_team_drive_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_delete_team_drive_Set() const{
    return m_can_delete_team_drive_isSet;
}

bool OAITeamDrive_capabilities::is_can_delete_team_drive_Valid() const{
    return m_can_delete_team_drive_isValid;
}

bool OAITeamDrive_capabilities::isCanDownload() const {
    return m_can_download;
}
void OAITeamDrive_capabilities::setCanDownload(const bool &can_download) {
    m_can_download = can_download;
    m_can_download_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_download_Set() const{
    return m_can_download_isSet;
}

bool OAITeamDrive_capabilities::is_can_download_Valid() const{
    return m_can_download_isValid;
}

bool OAITeamDrive_capabilities::isCanEdit() const {
    return m_can_edit;
}
void OAITeamDrive_capabilities::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAITeamDrive_capabilities::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAITeamDrive_capabilities::isCanListChildren() const {
    return m_can_list_children;
}
void OAITeamDrive_capabilities::setCanListChildren(const bool &can_list_children) {
    m_can_list_children = can_list_children;
    m_can_list_children_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_list_children_Set() const{
    return m_can_list_children_isSet;
}

bool OAITeamDrive_capabilities::is_can_list_children_Valid() const{
    return m_can_list_children_isValid;
}

bool OAITeamDrive_capabilities::isCanManageMembers() const {
    return m_can_manage_members;
}
void OAITeamDrive_capabilities::setCanManageMembers(const bool &can_manage_members) {
    m_can_manage_members = can_manage_members;
    m_can_manage_members_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_manage_members_Set() const{
    return m_can_manage_members_isSet;
}

bool OAITeamDrive_capabilities::is_can_manage_members_Valid() const{
    return m_can_manage_members_isValid;
}

bool OAITeamDrive_capabilities::isCanReadRevisions() const {
    return m_can_read_revisions;
}
void OAITeamDrive_capabilities::setCanReadRevisions(const bool &can_read_revisions) {
    m_can_read_revisions = can_read_revisions;
    m_can_read_revisions_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_read_revisions_Set() const{
    return m_can_read_revisions_isSet;
}

bool OAITeamDrive_capabilities::is_can_read_revisions_Valid() const{
    return m_can_read_revisions_isValid;
}

bool OAITeamDrive_capabilities::isCanRemoveChildren() const {
    return m_can_remove_children;
}
void OAITeamDrive_capabilities::setCanRemoveChildren(const bool &can_remove_children) {
    m_can_remove_children = can_remove_children;
    m_can_remove_children_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_remove_children_Set() const{
    return m_can_remove_children_isSet;
}

bool OAITeamDrive_capabilities::is_can_remove_children_Valid() const{
    return m_can_remove_children_isValid;
}

bool OAITeamDrive_capabilities::isCanRename() const {
    return m_can_rename;
}
void OAITeamDrive_capabilities::setCanRename(const bool &can_rename) {
    m_can_rename = can_rename;
    m_can_rename_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_rename_Set() const{
    return m_can_rename_isSet;
}

bool OAITeamDrive_capabilities::is_can_rename_Valid() const{
    return m_can_rename_isValid;
}

bool OAITeamDrive_capabilities::isCanRenameTeamDrive() const {
    return m_can_rename_team_drive;
}
void OAITeamDrive_capabilities::setCanRenameTeamDrive(const bool &can_rename_team_drive) {
    m_can_rename_team_drive = can_rename_team_drive;
    m_can_rename_team_drive_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_rename_team_drive_Set() const{
    return m_can_rename_team_drive_isSet;
}

bool OAITeamDrive_capabilities::is_can_rename_team_drive_Valid() const{
    return m_can_rename_team_drive_isValid;
}

bool OAITeamDrive_capabilities::isCanResetTeamDriveRestrictions() const {
    return m_can_reset_team_drive_restrictions;
}
void OAITeamDrive_capabilities::setCanResetTeamDriveRestrictions(const bool &can_reset_team_drive_restrictions) {
    m_can_reset_team_drive_restrictions = can_reset_team_drive_restrictions;
    m_can_reset_team_drive_restrictions_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_reset_team_drive_restrictions_Set() const{
    return m_can_reset_team_drive_restrictions_isSet;
}

bool OAITeamDrive_capabilities::is_can_reset_team_drive_restrictions_Valid() const{
    return m_can_reset_team_drive_restrictions_isValid;
}

bool OAITeamDrive_capabilities::isCanShare() const {
    return m_can_share;
}
void OAITeamDrive_capabilities::setCanShare(const bool &can_share) {
    m_can_share = can_share;
    m_can_share_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_share_Set() const{
    return m_can_share_isSet;
}

bool OAITeamDrive_capabilities::is_can_share_Valid() const{
    return m_can_share_isValid;
}

bool OAITeamDrive_capabilities::isCanTrashChildren() const {
    return m_can_trash_children;
}
void OAITeamDrive_capabilities::setCanTrashChildren(const bool &can_trash_children) {
    m_can_trash_children = can_trash_children;
    m_can_trash_children_isSet = true;
}

bool OAITeamDrive_capabilities::is_can_trash_children_Set() const{
    return m_can_trash_children_isSet;
}

bool OAITeamDrive_capabilities::is_can_trash_children_Valid() const{
    return m_can_trash_children_isValid;
}

bool OAITeamDrive_capabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_add_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_copy_requires_writer_permission_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_domain_users_only_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_sharing_folders_requires_organizer_permission_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_team_drive_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_team_members_only_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_list_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_manage_members_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_revisions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rename_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_reset_team_drive_restrictions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_trash_children_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDrive_capabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
