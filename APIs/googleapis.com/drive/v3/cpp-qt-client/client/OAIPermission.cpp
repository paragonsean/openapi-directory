/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_allow_file_discovery_isSet = false;
    m_allow_file_discovery_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pending_owner_isSet = false;
    m_pending_owner_isValid = false;

    m_permission_details_isSet = false;
    m_permission_details_isValid = false;

    m_photo_link_isSet = false;
    m_photo_link_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_team_drive_permission_details_isSet = false;
    m_team_drive_permission_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_allow_file_discovery_isValid = ::OpenAPI::fromJsonValue(m_allow_file_discovery, json[QString("allowFileDiscovery")]);
    m_allow_file_discovery_isSet = !json[QString("allowFileDiscovery")].isNull() && m_allow_file_discovery_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pending_owner_isValid = ::OpenAPI::fromJsonValue(m_pending_owner, json[QString("pendingOwner")]);
    m_pending_owner_isSet = !json[QString("pendingOwner")].isNull() && m_pending_owner_isValid;

    m_permission_details_isValid = ::OpenAPI::fromJsonValue(m_permission_details, json[QString("permissionDetails")]);
    m_permission_details_isSet = !json[QString("permissionDetails")].isNull() && m_permission_details_isValid;

    m_photo_link_isValid = ::OpenAPI::fromJsonValue(m_photo_link, json[QString("photoLink")]);
    m_photo_link_isSet = !json[QString("photoLink")].isNull() && m_photo_link_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_team_drive_permission_details_isValid = ::OpenAPI::fromJsonValue(m_team_drive_permission_details, json[QString("teamDrivePermissionDetails")]);
    m_team_drive_permission_details_isSet = !json[QString("teamDrivePermissionDetails")].isNull() && m_team_drive_permission_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_file_discovery_isSet) {
        obj.insert(QString("allowFileDiscovery"), ::OpenAPI::toJsonValue(m_allow_file_discovery));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pending_owner_isSet) {
        obj.insert(QString("pendingOwner"), ::OpenAPI::toJsonValue(m_pending_owner));
    }
    if (m_permission_details.size() > 0) {
        obj.insert(QString("permissionDetails"), ::OpenAPI::toJsonValue(m_permission_details));
    }
    if (m_photo_link_isSet) {
        obj.insert(QString("photoLink"), ::OpenAPI::toJsonValue(m_photo_link));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_team_drive_permission_details.size() > 0) {
        obj.insert(QString("teamDrivePermissionDetails"), ::OpenAPI::toJsonValue(m_team_drive_permission_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    return obj;
}

bool OAIPermission::isAllowFileDiscovery() const {
    return m_allow_file_discovery;
}
void OAIPermission::setAllowFileDiscovery(const bool &allow_file_discovery) {
    m_allow_file_discovery = allow_file_discovery;
    m_allow_file_discovery_isSet = true;
}

bool OAIPermission::is_allow_file_discovery_Set() const{
    return m_allow_file_discovery_isSet;
}

bool OAIPermission::is_allow_file_discovery_Valid() const{
    return m_allow_file_discovery_isValid;
}

bool OAIPermission::isDeleted() const {
    return m_deleted;
}
void OAIPermission::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPermission::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPermission::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIPermission::getDisplayName() const {
    return m_display_name;
}
void OAIPermission::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPermission::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPermission::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPermission::getDomain() const {
    return m_domain;
}
void OAIPermission::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIPermission::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIPermission::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIPermission::getEmailAddress() const {
    return m_email_address;
}
void OAIPermission::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIPermission::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIPermission::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QDateTime OAIPermission::getExpirationTime() const {
    return m_expiration_time;
}
void OAIPermission::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIPermission::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIPermission::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAIPermission::getId() const {
    return m_id;
}
void OAIPermission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPermission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPermission::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPermission::getKind() const {
    return m_kind;
}
void OAIPermission::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPermission::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPermission::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIPermission::isPendingOwner() const {
    return m_pending_owner;
}
void OAIPermission::setPendingOwner(const bool &pending_owner) {
    m_pending_owner = pending_owner;
    m_pending_owner_isSet = true;
}

bool OAIPermission::is_pending_owner_Set() const{
    return m_pending_owner_isSet;
}

bool OAIPermission::is_pending_owner_Valid() const{
    return m_pending_owner_isValid;
}

QList<OAIPermission_permissionDetails_inner> OAIPermission::getPermissionDetails() const {
    return m_permission_details;
}
void OAIPermission::setPermissionDetails(const QList<OAIPermission_permissionDetails_inner> &permission_details) {
    m_permission_details = permission_details;
    m_permission_details_isSet = true;
}

bool OAIPermission::is_permission_details_Set() const{
    return m_permission_details_isSet;
}

bool OAIPermission::is_permission_details_Valid() const{
    return m_permission_details_isValid;
}

QString OAIPermission::getPhotoLink() const {
    return m_photo_link;
}
void OAIPermission::setPhotoLink(const QString &photo_link) {
    m_photo_link = photo_link;
    m_photo_link_isSet = true;
}

bool OAIPermission::is_photo_link_Set() const{
    return m_photo_link_isSet;
}

bool OAIPermission::is_photo_link_Valid() const{
    return m_photo_link_isValid;
}

QString OAIPermission::getRole() const {
    return m_role;
}
void OAIPermission::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermission::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermission::is_role_Valid() const{
    return m_role_isValid;
}

QList<OAIPermission_teamDrivePermissionDetails_inner> OAIPermission::getTeamDrivePermissionDetails() const {
    return m_team_drive_permission_details;
}
void OAIPermission::setTeamDrivePermissionDetails(const QList<OAIPermission_teamDrivePermissionDetails_inner> &team_drive_permission_details) {
    m_team_drive_permission_details = team_drive_permission_details;
    m_team_drive_permission_details_isSet = true;
}

bool OAIPermission::is_team_drive_permission_details_Set() const{
    return m_team_drive_permission_details_isSet;
}

bool OAIPermission::is_team_drive_permission_details_Valid() const{
    return m_team_drive_permission_details_isValid;
}

QString OAIPermission::getType() const {
    return m_type;
}
void OAIPermission::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPermission::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPermission::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPermission::getView() const {
    return m_view;
}
void OAIPermission::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAIPermission::is_view_Set() const{
    return m_view_isSet;
}

bool OAIPermission::is_view_Valid() const{
    return m_view_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_file_discovery_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_permission_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
