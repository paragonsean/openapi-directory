/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDrive_restrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDrive_restrictions::OAITeamDrive_restrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDrive_restrictions::OAITeamDrive_restrictions() {
    this->initializeModel();
}

OAITeamDrive_restrictions::~OAITeamDrive_restrictions() {}

void OAITeamDrive_restrictions::initializeModel() {

    m_admin_managed_restrictions_isSet = false;
    m_admin_managed_restrictions_isValid = false;

    m_copy_requires_writer_permission_isSet = false;
    m_copy_requires_writer_permission_isValid = false;

    m_domain_users_only_isSet = false;
    m_domain_users_only_isValid = false;

    m_sharing_folders_requires_organizer_permission_isSet = false;
    m_sharing_folders_requires_organizer_permission_isValid = false;

    m_team_members_only_isSet = false;
    m_team_members_only_isValid = false;
}

void OAITeamDrive_restrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDrive_restrictions::fromJsonObject(QJsonObject json) {

    m_admin_managed_restrictions_isValid = ::OpenAPI::fromJsonValue(m_admin_managed_restrictions, json[QString("adminManagedRestrictions")]);
    m_admin_managed_restrictions_isSet = !json[QString("adminManagedRestrictions")].isNull() && m_admin_managed_restrictions_isValid;

    m_copy_requires_writer_permission_isValid = ::OpenAPI::fromJsonValue(m_copy_requires_writer_permission, json[QString("copyRequiresWriterPermission")]);
    m_copy_requires_writer_permission_isSet = !json[QString("copyRequiresWriterPermission")].isNull() && m_copy_requires_writer_permission_isValid;

    m_domain_users_only_isValid = ::OpenAPI::fromJsonValue(m_domain_users_only, json[QString("domainUsersOnly")]);
    m_domain_users_only_isSet = !json[QString("domainUsersOnly")].isNull() && m_domain_users_only_isValid;

    m_sharing_folders_requires_organizer_permission_isValid = ::OpenAPI::fromJsonValue(m_sharing_folders_requires_organizer_permission, json[QString("sharingFoldersRequiresOrganizerPermission")]);
    m_sharing_folders_requires_organizer_permission_isSet = !json[QString("sharingFoldersRequiresOrganizerPermission")].isNull() && m_sharing_folders_requires_organizer_permission_isValid;

    m_team_members_only_isValid = ::OpenAPI::fromJsonValue(m_team_members_only, json[QString("teamMembersOnly")]);
    m_team_members_only_isSet = !json[QString("teamMembersOnly")].isNull() && m_team_members_only_isValid;
}

QString OAITeamDrive_restrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDrive_restrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_managed_restrictions_isSet) {
        obj.insert(QString("adminManagedRestrictions"), ::OpenAPI::toJsonValue(m_admin_managed_restrictions));
    }
    if (m_copy_requires_writer_permission_isSet) {
        obj.insert(QString("copyRequiresWriterPermission"), ::OpenAPI::toJsonValue(m_copy_requires_writer_permission));
    }
    if (m_domain_users_only_isSet) {
        obj.insert(QString("domainUsersOnly"), ::OpenAPI::toJsonValue(m_domain_users_only));
    }
    if (m_sharing_folders_requires_organizer_permission_isSet) {
        obj.insert(QString("sharingFoldersRequiresOrganizerPermission"), ::OpenAPI::toJsonValue(m_sharing_folders_requires_organizer_permission));
    }
    if (m_team_members_only_isSet) {
        obj.insert(QString("teamMembersOnly"), ::OpenAPI::toJsonValue(m_team_members_only));
    }
    return obj;
}

bool OAITeamDrive_restrictions::isAdminManagedRestrictions() const {
    return m_admin_managed_restrictions;
}
void OAITeamDrive_restrictions::setAdminManagedRestrictions(const bool &admin_managed_restrictions) {
    m_admin_managed_restrictions = admin_managed_restrictions;
    m_admin_managed_restrictions_isSet = true;
}

bool OAITeamDrive_restrictions::is_admin_managed_restrictions_Set() const{
    return m_admin_managed_restrictions_isSet;
}

bool OAITeamDrive_restrictions::is_admin_managed_restrictions_Valid() const{
    return m_admin_managed_restrictions_isValid;
}

bool OAITeamDrive_restrictions::isCopyRequiresWriterPermission() const {
    return m_copy_requires_writer_permission;
}
void OAITeamDrive_restrictions::setCopyRequiresWriterPermission(const bool &copy_requires_writer_permission) {
    m_copy_requires_writer_permission = copy_requires_writer_permission;
    m_copy_requires_writer_permission_isSet = true;
}

bool OAITeamDrive_restrictions::is_copy_requires_writer_permission_Set() const{
    return m_copy_requires_writer_permission_isSet;
}

bool OAITeamDrive_restrictions::is_copy_requires_writer_permission_Valid() const{
    return m_copy_requires_writer_permission_isValid;
}

bool OAITeamDrive_restrictions::isDomainUsersOnly() const {
    return m_domain_users_only;
}
void OAITeamDrive_restrictions::setDomainUsersOnly(const bool &domain_users_only) {
    m_domain_users_only = domain_users_only;
    m_domain_users_only_isSet = true;
}

bool OAITeamDrive_restrictions::is_domain_users_only_Set() const{
    return m_domain_users_only_isSet;
}

bool OAITeamDrive_restrictions::is_domain_users_only_Valid() const{
    return m_domain_users_only_isValid;
}

bool OAITeamDrive_restrictions::isSharingFoldersRequiresOrganizerPermission() const {
    return m_sharing_folders_requires_organizer_permission;
}
void OAITeamDrive_restrictions::setSharingFoldersRequiresOrganizerPermission(const bool &sharing_folders_requires_organizer_permission) {
    m_sharing_folders_requires_organizer_permission = sharing_folders_requires_organizer_permission;
    m_sharing_folders_requires_organizer_permission_isSet = true;
}

bool OAITeamDrive_restrictions::is_sharing_folders_requires_organizer_permission_Set() const{
    return m_sharing_folders_requires_organizer_permission_isSet;
}

bool OAITeamDrive_restrictions::is_sharing_folders_requires_organizer_permission_Valid() const{
    return m_sharing_folders_requires_organizer_permission_isValid;
}

bool OAITeamDrive_restrictions::isTeamMembersOnly() const {
    return m_team_members_only;
}
void OAITeamDrive_restrictions::setTeamMembersOnly(const bool &team_members_only) {
    m_team_members_only = team_members_only;
    m_team_members_only_isSet = true;
}

bool OAITeamDrive_restrictions::is_team_members_only_Set() const{
    return m_team_members_only_isSet;
}

bool OAITeamDrive_restrictions::is_team_members_only_Valid() const{
    return m_team_members_only_isValid;
}

bool OAITeamDrive_restrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_managed_restrictions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_requires_writer_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_users_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_folders_requires_organizer_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_members_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDrive_restrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
