/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbout::OAIAbout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbout::OAIAbout() {
    this->initializeModel();
}

OAIAbout::~OAIAbout() {}

void OAIAbout::initializeModel() {

    m_app_installed_isSet = false;
    m_app_installed_isValid = false;

    m_can_create_drives_isSet = false;
    m_can_create_drives_isValid = false;

    m_can_create_team_drives_isSet = false;
    m_can_create_team_drives_isValid = false;

    m_drive_themes_isSet = false;
    m_drive_themes_isValid = false;

    m_export_formats_isSet = false;
    m_export_formats_isValid = false;

    m_folder_color_palette_isSet = false;
    m_folder_color_palette_isValid = false;

    m_import_formats_isSet = false;
    m_import_formats_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_max_import_sizes_isSet = false;
    m_max_import_sizes_isValid = false;

    m_max_upload_size_isSet = false;
    m_max_upload_size_isValid = false;

    m_storage_quota_isSet = false;
    m_storage_quota_isValid = false;

    m_team_drive_themes_isSet = false;
    m_team_drive_themes_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAbout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbout::fromJsonObject(QJsonObject json) {

    m_app_installed_isValid = ::OpenAPI::fromJsonValue(m_app_installed, json[QString("appInstalled")]);
    m_app_installed_isSet = !json[QString("appInstalled")].isNull() && m_app_installed_isValid;

    m_can_create_drives_isValid = ::OpenAPI::fromJsonValue(m_can_create_drives, json[QString("canCreateDrives")]);
    m_can_create_drives_isSet = !json[QString("canCreateDrives")].isNull() && m_can_create_drives_isValid;

    m_can_create_team_drives_isValid = ::OpenAPI::fromJsonValue(m_can_create_team_drives, json[QString("canCreateTeamDrives")]);
    m_can_create_team_drives_isSet = !json[QString("canCreateTeamDrives")].isNull() && m_can_create_team_drives_isValid;

    m_drive_themes_isValid = ::OpenAPI::fromJsonValue(m_drive_themes, json[QString("driveThemes")]);
    m_drive_themes_isSet = !json[QString("driveThemes")].isNull() && m_drive_themes_isValid;

    if(json["exportFormats"].isObject()){
        auto varmap = json["exportFormats"].toObject().toVariantMap();
        m_export_formats_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_export_formats_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_export_formats_isSet &= !jval.isNull() && m_export_formats_isValid;
                m_export_formats.insert(m_export_formats.end(), val, item);
            }
        }
    }

    m_folder_color_palette_isValid = ::OpenAPI::fromJsonValue(m_folder_color_palette, json[QString("folderColorPalette")]);
    m_folder_color_palette_isSet = !json[QString("folderColorPalette")].isNull() && m_folder_color_palette_isValid;

    if(json["importFormats"].isObject()){
        auto varmap = json["importFormats"].toObject().toVariantMap();
        m_import_formats_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_import_formats_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_import_formats_isSet &= !jval.isNull() && m_import_formats_isValid;
                m_import_formats.insert(m_import_formats.end(), val, item);
            }
        }
    }

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_max_import_sizes_isValid = ::OpenAPI::fromJsonValue(m_max_import_sizes, json[QString("maxImportSizes")]);
    m_max_import_sizes_isSet = !json[QString("maxImportSizes")].isNull() && m_max_import_sizes_isValid;

    m_max_upload_size_isValid = ::OpenAPI::fromJsonValue(m_max_upload_size, json[QString("maxUploadSize")]);
    m_max_upload_size_isSet = !json[QString("maxUploadSize")].isNull() && m_max_upload_size_isValid;

    m_storage_quota_isValid = ::OpenAPI::fromJsonValue(m_storage_quota, json[QString("storageQuota")]);
    m_storage_quota_isSet = !json[QString("storageQuota")].isNull() && m_storage_quota_isValid;

    m_team_drive_themes_isValid = ::OpenAPI::fromJsonValue(m_team_drive_themes, json[QString("teamDriveThemes")]);
    m_team_drive_themes_isSet = !json[QString("teamDriveThemes")].isNull() && m_team_drive_themes_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAbout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbout::asJsonObject() const {
    QJsonObject obj;
    if (m_app_installed_isSet) {
        obj.insert(QString("appInstalled"), ::OpenAPI::toJsonValue(m_app_installed));
    }
    if (m_can_create_drives_isSet) {
        obj.insert(QString("canCreateDrives"), ::OpenAPI::toJsonValue(m_can_create_drives));
    }
    if (m_can_create_team_drives_isSet) {
        obj.insert(QString("canCreateTeamDrives"), ::OpenAPI::toJsonValue(m_can_create_team_drives));
    }
    if (m_drive_themes.size() > 0) {
        obj.insert(QString("driveThemes"), ::OpenAPI::toJsonValue(m_drive_themes));
    }
    if (m_export_formats.size() > 0) {
        
        obj.insert(QString("exportFormats"), toJsonValue(m_export_formats));
    }
    if (m_folder_color_palette.size() > 0) {
        obj.insert(QString("folderColorPalette"), ::OpenAPI::toJsonValue(m_folder_color_palette));
    }
    if (m_import_formats.size() > 0) {
        
        obj.insert(QString("importFormats"), toJsonValue(m_import_formats));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_max_import_sizes.size() > 0) {
        obj.insert(QString("maxImportSizes"), ::OpenAPI::toJsonValue(m_max_import_sizes));
    }
    if (m_max_upload_size_isSet) {
        obj.insert(QString("maxUploadSize"), ::OpenAPI::toJsonValue(m_max_upload_size));
    }
    if (m_storage_quota.isSet()) {
        obj.insert(QString("storageQuota"), ::OpenAPI::toJsonValue(m_storage_quota));
    }
    if (m_team_drive_themes.size() > 0) {
        obj.insert(QString("teamDriveThemes"), ::OpenAPI::toJsonValue(m_team_drive_themes));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

bool OAIAbout::isAppInstalled() const {
    return m_app_installed;
}
void OAIAbout::setAppInstalled(const bool &app_installed) {
    m_app_installed = app_installed;
    m_app_installed_isSet = true;
}

bool OAIAbout::is_app_installed_Set() const{
    return m_app_installed_isSet;
}

bool OAIAbout::is_app_installed_Valid() const{
    return m_app_installed_isValid;
}

bool OAIAbout::isCanCreateDrives() const {
    return m_can_create_drives;
}
void OAIAbout::setCanCreateDrives(const bool &can_create_drives) {
    m_can_create_drives = can_create_drives;
    m_can_create_drives_isSet = true;
}

bool OAIAbout::is_can_create_drives_Set() const{
    return m_can_create_drives_isSet;
}

bool OAIAbout::is_can_create_drives_Valid() const{
    return m_can_create_drives_isValid;
}

bool OAIAbout::isCanCreateTeamDrives() const {
    return m_can_create_team_drives;
}
void OAIAbout::setCanCreateTeamDrives(const bool &can_create_team_drives) {
    m_can_create_team_drives = can_create_team_drives;
    m_can_create_team_drives_isSet = true;
}

bool OAIAbout::is_can_create_team_drives_Set() const{
    return m_can_create_team_drives_isSet;
}

bool OAIAbout::is_can_create_team_drives_Valid() const{
    return m_can_create_team_drives_isValid;
}

QList<OAIAbout_driveThemes_inner> OAIAbout::getDriveThemes() const {
    return m_drive_themes;
}
void OAIAbout::setDriveThemes(const QList<OAIAbout_driveThemes_inner> &drive_themes) {
    m_drive_themes = drive_themes;
    m_drive_themes_isSet = true;
}

bool OAIAbout::is_drive_themes_Set() const{
    return m_drive_themes_isSet;
}

bool OAIAbout::is_drive_themes_Valid() const{
    return m_drive_themes_isValid;
}

QMap<QString, QList<QString>> OAIAbout::getExportFormats() const {
    return m_export_formats;
}
void OAIAbout::setExportFormats(const QMap<QString, QList<QString>> &export_formats) {
    m_export_formats = export_formats;
    m_export_formats_isSet = true;
}

bool OAIAbout::is_export_formats_Set() const{
    return m_export_formats_isSet;
}

bool OAIAbout::is_export_formats_Valid() const{
    return m_export_formats_isValid;
}

QList<QString> OAIAbout::getFolderColorPalette() const {
    return m_folder_color_palette;
}
void OAIAbout::setFolderColorPalette(const QList<QString> &folder_color_palette) {
    m_folder_color_palette = folder_color_palette;
    m_folder_color_palette_isSet = true;
}

bool OAIAbout::is_folder_color_palette_Set() const{
    return m_folder_color_palette_isSet;
}

bool OAIAbout::is_folder_color_palette_Valid() const{
    return m_folder_color_palette_isValid;
}

QMap<QString, QList<QString>> OAIAbout::getImportFormats() const {
    return m_import_formats;
}
void OAIAbout::setImportFormats(const QMap<QString, QList<QString>> &import_formats) {
    m_import_formats = import_formats;
    m_import_formats_isSet = true;
}

bool OAIAbout::is_import_formats_Set() const{
    return m_import_formats_isSet;
}

bool OAIAbout::is_import_formats_Valid() const{
    return m_import_formats_isValid;
}

QString OAIAbout::getKind() const {
    return m_kind;
}
void OAIAbout::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAbout::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAbout::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIAbout::getMaxImportSizes() const {
    return m_max_import_sizes;
}
void OAIAbout::setMaxImportSizes(const QMap<QString, QString> &max_import_sizes) {
    m_max_import_sizes = max_import_sizes;
    m_max_import_sizes_isSet = true;
}

bool OAIAbout::is_max_import_sizes_Set() const{
    return m_max_import_sizes_isSet;
}

bool OAIAbout::is_max_import_sizes_Valid() const{
    return m_max_import_sizes_isValid;
}

QString OAIAbout::getMaxUploadSize() const {
    return m_max_upload_size;
}
void OAIAbout::setMaxUploadSize(const QString &max_upload_size) {
    m_max_upload_size = max_upload_size;
    m_max_upload_size_isSet = true;
}

bool OAIAbout::is_max_upload_size_Set() const{
    return m_max_upload_size_isSet;
}

bool OAIAbout::is_max_upload_size_Valid() const{
    return m_max_upload_size_isValid;
}

OAIAbout_storageQuota OAIAbout::getStorageQuota() const {
    return m_storage_quota;
}
void OAIAbout::setStorageQuota(const OAIAbout_storageQuota &storage_quota) {
    m_storage_quota = storage_quota;
    m_storage_quota_isSet = true;
}

bool OAIAbout::is_storage_quota_Set() const{
    return m_storage_quota_isSet;
}

bool OAIAbout::is_storage_quota_Valid() const{
    return m_storage_quota_isValid;
}

QList<OAIAbout_teamDriveThemes_inner> OAIAbout::getTeamDriveThemes() const {
    return m_team_drive_themes;
}
void OAIAbout::setTeamDriveThemes(const QList<OAIAbout_teamDriveThemes_inner> &team_drive_themes) {
    m_team_drive_themes = team_drive_themes;
    m_team_drive_themes_isSet = true;
}

bool OAIAbout::is_team_drive_themes_Set() const{
    return m_team_drive_themes_isSet;
}

bool OAIAbout::is_team_drive_themes_Valid() const{
    return m_team_drive_themes_isValid;
}

OAIUser OAIAbout::getUser() const {
    return m_user;
}
void OAIAbout::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAbout::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAbout::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAbout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_team_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_color_palette.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_import_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_upload_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
