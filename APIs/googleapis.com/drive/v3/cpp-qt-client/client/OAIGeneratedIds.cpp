/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneratedIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneratedIds::OAIGeneratedIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneratedIds::OAIGeneratedIds() {
    this->initializeModel();
}

OAIGeneratedIds::~OAIGeneratedIds() {}

void OAIGeneratedIds::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_space_isSet = false;
    m_space_isValid = false;
}

void OAIGeneratedIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneratedIds::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_space_isValid = ::OpenAPI::fromJsonValue(m_space, json[QString("space")]);
    m_space_isSet = !json[QString("space")].isNull() && m_space_isValid;
}

QString OAIGeneratedIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneratedIds::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.size() > 0) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_space_isSet) {
        obj.insert(QString("space"), ::OpenAPI::toJsonValue(m_space));
    }
    return obj;
}

QList<QString> OAIGeneratedIds::getIds() const {
    return m_ids;
}
void OAIGeneratedIds::setIds(const QList<QString> &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIGeneratedIds::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIGeneratedIds::is_ids_Valid() const{
    return m_ids_isValid;
}

QString OAIGeneratedIds::getKind() const {
    return m_kind;
}
void OAIGeneratedIds::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIGeneratedIds::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIGeneratedIds::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIGeneratedIds::getSpace() const {
    return m_space;
}
void OAIGeneratedIds::setSpace(const QString &space) {
    m_space = space;
    m_space_isSet = true;
}

bool OAIGeneratedIds::is_space_Set() const{
    return m_space_isSet;
}

bool OAIGeneratedIds::is_space_Valid() const{
    return m_space_isValid;
}

bool OAIGeneratedIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneratedIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
