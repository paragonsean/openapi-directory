/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_capabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_capabilities::OAIFile_capabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_capabilities::OAIFile_capabilities() {
    this->initializeModel();
}

OAIFile_capabilities::~OAIFile_capabilities() {}

void OAIFile_capabilities::initializeModel() {

    m_can_accept_ownership_isSet = false;
    m_can_accept_ownership_isValid = false;

    m_can_add_children_isSet = false;
    m_can_add_children_isValid = false;

    m_can_add_folder_from_another_drive_isSet = false;
    m_can_add_folder_from_another_drive_isValid = false;

    m_can_add_my_drive_parent_isSet = false;
    m_can_add_my_drive_parent_isValid = false;

    m_can_change_copy_requires_writer_permission_isSet = false;
    m_can_change_copy_requires_writer_permission_isValid = false;

    m_can_change_security_update_enabled_isSet = false;
    m_can_change_security_update_enabled_isValid = false;

    m_can_change_viewers_can_copy_content_isSet = false;
    m_can_change_viewers_can_copy_content_isValid = false;

    m_can_comment_isSet = false;
    m_can_comment_isValid = false;

    m_can_copy_isSet = false;
    m_can_copy_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_delete_children_isSet = false;
    m_can_delete_children_isValid = false;

    m_can_download_isSet = false;
    m_can_download_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_can_list_children_isSet = false;
    m_can_list_children_isValid = false;

    m_can_modify_content_isSet = false;
    m_can_modify_content_isValid = false;

    m_can_modify_content_restriction_isSet = false;
    m_can_modify_content_restriction_isValid = false;

    m_can_modify_editor_content_restriction_isSet = false;
    m_can_modify_editor_content_restriction_isValid = false;

    m_can_modify_labels_isSet = false;
    m_can_modify_labels_isValid = false;

    m_can_modify_owner_content_restriction_isSet = false;
    m_can_modify_owner_content_restriction_isValid = false;

    m_can_move_children_out_of_drive_isSet = false;
    m_can_move_children_out_of_drive_isValid = false;

    m_can_move_children_out_of_team_drive_isSet = false;
    m_can_move_children_out_of_team_drive_isValid = false;

    m_can_move_children_within_drive_isSet = false;
    m_can_move_children_within_drive_isValid = false;

    m_can_move_children_within_team_drive_isSet = false;
    m_can_move_children_within_team_drive_isValid = false;

    m_can_move_item_into_team_drive_isSet = false;
    m_can_move_item_into_team_drive_isValid = false;

    m_can_move_item_out_of_drive_isSet = false;
    m_can_move_item_out_of_drive_isValid = false;

    m_can_move_item_out_of_team_drive_isSet = false;
    m_can_move_item_out_of_team_drive_isValid = false;

    m_can_move_item_within_drive_isSet = false;
    m_can_move_item_within_drive_isValid = false;

    m_can_move_item_within_team_drive_isSet = false;
    m_can_move_item_within_team_drive_isValid = false;

    m_can_move_team_drive_item_isSet = false;
    m_can_move_team_drive_item_isValid = false;

    m_can_read_drive_isSet = false;
    m_can_read_drive_isValid = false;

    m_can_read_labels_isSet = false;
    m_can_read_labels_isValid = false;

    m_can_read_revisions_isSet = false;
    m_can_read_revisions_isValid = false;

    m_can_read_team_drive_isSet = false;
    m_can_read_team_drive_isValid = false;

    m_can_remove_children_isSet = false;
    m_can_remove_children_isValid = false;

    m_can_remove_content_restriction_isSet = false;
    m_can_remove_content_restriction_isValid = false;

    m_can_remove_my_drive_parent_isSet = false;
    m_can_remove_my_drive_parent_isValid = false;

    m_can_rename_isSet = false;
    m_can_rename_isValid = false;

    m_can_share_isSet = false;
    m_can_share_isValid = false;

    m_can_trash_isSet = false;
    m_can_trash_isValid = false;

    m_can_trash_children_isSet = false;
    m_can_trash_children_isValid = false;

    m_can_untrash_isSet = false;
    m_can_untrash_isValid = false;
}

void OAIFile_capabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_capabilities::fromJsonObject(QJsonObject json) {

    m_can_accept_ownership_isValid = ::OpenAPI::fromJsonValue(m_can_accept_ownership, json[QString("canAcceptOwnership")]);
    m_can_accept_ownership_isSet = !json[QString("canAcceptOwnership")].isNull() && m_can_accept_ownership_isValid;

    m_can_add_children_isValid = ::OpenAPI::fromJsonValue(m_can_add_children, json[QString("canAddChildren")]);
    m_can_add_children_isSet = !json[QString("canAddChildren")].isNull() && m_can_add_children_isValid;

    m_can_add_folder_from_another_drive_isValid = ::OpenAPI::fromJsonValue(m_can_add_folder_from_another_drive, json[QString("canAddFolderFromAnotherDrive")]);
    m_can_add_folder_from_another_drive_isSet = !json[QString("canAddFolderFromAnotherDrive")].isNull() && m_can_add_folder_from_another_drive_isValid;

    m_can_add_my_drive_parent_isValid = ::OpenAPI::fromJsonValue(m_can_add_my_drive_parent, json[QString("canAddMyDriveParent")]);
    m_can_add_my_drive_parent_isSet = !json[QString("canAddMyDriveParent")].isNull() && m_can_add_my_drive_parent_isValid;

    m_can_change_copy_requires_writer_permission_isValid = ::OpenAPI::fromJsonValue(m_can_change_copy_requires_writer_permission, json[QString("canChangeCopyRequiresWriterPermission")]);
    m_can_change_copy_requires_writer_permission_isSet = !json[QString("canChangeCopyRequiresWriterPermission")].isNull() && m_can_change_copy_requires_writer_permission_isValid;

    m_can_change_security_update_enabled_isValid = ::OpenAPI::fromJsonValue(m_can_change_security_update_enabled, json[QString("canChangeSecurityUpdateEnabled")]);
    m_can_change_security_update_enabled_isSet = !json[QString("canChangeSecurityUpdateEnabled")].isNull() && m_can_change_security_update_enabled_isValid;

    m_can_change_viewers_can_copy_content_isValid = ::OpenAPI::fromJsonValue(m_can_change_viewers_can_copy_content, json[QString("canChangeViewersCanCopyContent")]);
    m_can_change_viewers_can_copy_content_isSet = !json[QString("canChangeViewersCanCopyContent")].isNull() && m_can_change_viewers_can_copy_content_isValid;

    m_can_comment_isValid = ::OpenAPI::fromJsonValue(m_can_comment, json[QString("canComment")]);
    m_can_comment_isSet = !json[QString("canComment")].isNull() && m_can_comment_isValid;

    m_can_copy_isValid = ::OpenAPI::fromJsonValue(m_can_copy, json[QString("canCopy")]);
    m_can_copy_isSet = !json[QString("canCopy")].isNull() && m_can_copy_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("canDelete")]);
    m_can_delete_isSet = !json[QString("canDelete")].isNull() && m_can_delete_isValid;

    m_can_delete_children_isValid = ::OpenAPI::fromJsonValue(m_can_delete_children, json[QString("canDeleteChildren")]);
    m_can_delete_children_isSet = !json[QString("canDeleteChildren")].isNull() && m_can_delete_children_isValid;

    m_can_download_isValid = ::OpenAPI::fromJsonValue(m_can_download, json[QString("canDownload")]);
    m_can_download_isSet = !json[QString("canDownload")].isNull() && m_can_download_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("canEdit")]);
    m_can_edit_isSet = !json[QString("canEdit")].isNull() && m_can_edit_isValid;

    m_can_list_children_isValid = ::OpenAPI::fromJsonValue(m_can_list_children, json[QString("canListChildren")]);
    m_can_list_children_isSet = !json[QString("canListChildren")].isNull() && m_can_list_children_isValid;

    m_can_modify_content_isValid = ::OpenAPI::fromJsonValue(m_can_modify_content, json[QString("canModifyContent")]);
    m_can_modify_content_isSet = !json[QString("canModifyContent")].isNull() && m_can_modify_content_isValid;

    m_can_modify_content_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_modify_content_restriction, json[QString("canModifyContentRestriction")]);
    m_can_modify_content_restriction_isSet = !json[QString("canModifyContentRestriction")].isNull() && m_can_modify_content_restriction_isValid;

    m_can_modify_editor_content_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_modify_editor_content_restriction, json[QString("canModifyEditorContentRestriction")]);
    m_can_modify_editor_content_restriction_isSet = !json[QString("canModifyEditorContentRestriction")].isNull() && m_can_modify_editor_content_restriction_isValid;

    m_can_modify_labels_isValid = ::OpenAPI::fromJsonValue(m_can_modify_labels, json[QString("canModifyLabels")]);
    m_can_modify_labels_isSet = !json[QString("canModifyLabels")].isNull() && m_can_modify_labels_isValid;

    m_can_modify_owner_content_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_modify_owner_content_restriction, json[QString("canModifyOwnerContentRestriction")]);
    m_can_modify_owner_content_restriction_isSet = !json[QString("canModifyOwnerContentRestriction")].isNull() && m_can_modify_owner_content_restriction_isValid;

    m_can_move_children_out_of_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_children_out_of_drive, json[QString("canMoveChildrenOutOfDrive")]);
    m_can_move_children_out_of_drive_isSet = !json[QString("canMoveChildrenOutOfDrive")].isNull() && m_can_move_children_out_of_drive_isValid;

    m_can_move_children_out_of_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_children_out_of_team_drive, json[QString("canMoveChildrenOutOfTeamDrive")]);
    m_can_move_children_out_of_team_drive_isSet = !json[QString("canMoveChildrenOutOfTeamDrive")].isNull() && m_can_move_children_out_of_team_drive_isValid;

    m_can_move_children_within_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_children_within_drive, json[QString("canMoveChildrenWithinDrive")]);
    m_can_move_children_within_drive_isSet = !json[QString("canMoveChildrenWithinDrive")].isNull() && m_can_move_children_within_drive_isValid;

    m_can_move_children_within_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_children_within_team_drive, json[QString("canMoveChildrenWithinTeamDrive")]);
    m_can_move_children_within_team_drive_isSet = !json[QString("canMoveChildrenWithinTeamDrive")].isNull() && m_can_move_children_within_team_drive_isValid;

    m_can_move_item_into_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_item_into_team_drive, json[QString("canMoveItemIntoTeamDrive")]);
    m_can_move_item_into_team_drive_isSet = !json[QString("canMoveItemIntoTeamDrive")].isNull() && m_can_move_item_into_team_drive_isValid;

    m_can_move_item_out_of_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_item_out_of_drive, json[QString("canMoveItemOutOfDrive")]);
    m_can_move_item_out_of_drive_isSet = !json[QString("canMoveItemOutOfDrive")].isNull() && m_can_move_item_out_of_drive_isValid;

    m_can_move_item_out_of_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_item_out_of_team_drive, json[QString("canMoveItemOutOfTeamDrive")]);
    m_can_move_item_out_of_team_drive_isSet = !json[QString("canMoveItemOutOfTeamDrive")].isNull() && m_can_move_item_out_of_team_drive_isValid;

    m_can_move_item_within_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_item_within_drive, json[QString("canMoveItemWithinDrive")]);
    m_can_move_item_within_drive_isSet = !json[QString("canMoveItemWithinDrive")].isNull() && m_can_move_item_within_drive_isValid;

    m_can_move_item_within_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_move_item_within_team_drive, json[QString("canMoveItemWithinTeamDrive")]);
    m_can_move_item_within_team_drive_isSet = !json[QString("canMoveItemWithinTeamDrive")].isNull() && m_can_move_item_within_team_drive_isValid;

    m_can_move_team_drive_item_isValid = ::OpenAPI::fromJsonValue(m_can_move_team_drive_item, json[QString("canMoveTeamDriveItem")]);
    m_can_move_team_drive_item_isSet = !json[QString("canMoveTeamDriveItem")].isNull() && m_can_move_team_drive_item_isValid;

    m_can_read_drive_isValid = ::OpenAPI::fromJsonValue(m_can_read_drive, json[QString("canReadDrive")]);
    m_can_read_drive_isSet = !json[QString("canReadDrive")].isNull() && m_can_read_drive_isValid;

    m_can_read_labels_isValid = ::OpenAPI::fromJsonValue(m_can_read_labels, json[QString("canReadLabels")]);
    m_can_read_labels_isSet = !json[QString("canReadLabels")].isNull() && m_can_read_labels_isValid;

    m_can_read_revisions_isValid = ::OpenAPI::fromJsonValue(m_can_read_revisions, json[QString("canReadRevisions")]);
    m_can_read_revisions_isSet = !json[QString("canReadRevisions")].isNull() && m_can_read_revisions_isValid;

    m_can_read_team_drive_isValid = ::OpenAPI::fromJsonValue(m_can_read_team_drive, json[QString("canReadTeamDrive")]);
    m_can_read_team_drive_isSet = !json[QString("canReadTeamDrive")].isNull() && m_can_read_team_drive_isValid;

    m_can_remove_children_isValid = ::OpenAPI::fromJsonValue(m_can_remove_children, json[QString("canRemoveChildren")]);
    m_can_remove_children_isSet = !json[QString("canRemoveChildren")].isNull() && m_can_remove_children_isValid;

    m_can_remove_content_restriction_isValid = ::OpenAPI::fromJsonValue(m_can_remove_content_restriction, json[QString("canRemoveContentRestriction")]);
    m_can_remove_content_restriction_isSet = !json[QString("canRemoveContentRestriction")].isNull() && m_can_remove_content_restriction_isValid;

    m_can_remove_my_drive_parent_isValid = ::OpenAPI::fromJsonValue(m_can_remove_my_drive_parent, json[QString("canRemoveMyDriveParent")]);
    m_can_remove_my_drive_parent_isSet = !json[QString("canRemoveMyDriveParent")].isNull() && m_can_remove_my_drive_parent_isValid;

    m_can_rename_isValid = ::OpenAPI::fromJsonValue(m_can_rename, json[QString("canRename")]);
    m_can_rename_isSet = !json[QString("canRename")].isNull() && m_can_rename_isValid;

    m_can_share_isValid = ::OpenAPI::fromJsonValue(m_can_share, json[QString("canShare")]);
    m_can_share_isSet = !json[QString("canShare")].isNull() && m_can_share_isValid;

    m_can_trash_isValid = ::OpenAPI::fromJsonValue(m_can_trash, json[QString("canTrash")]);
    m_can_trash_isSet = !json[QString("canTrash")].isNull() && m_can_trash_isValid;

    m_can_trash_children_isValid = ::OpenAPI::fromJsonValue(m_can_trash_children, json[QString("canTrashChildren")]);
    m_can_trash_children_isSet = !json[QString("canTrashChildren")].isNull() && m_can_trash_children_isValid;

    m_can_untrash_isValid = ::OpenAPI::fromJsonValue(m_can_untrash, json[QString("canUntrash")]);
    m_can_untrash_isSet = !json[QString("canUntrash")].isNull() && m_can_untrash_isValid;
}

QString OAIFile_capabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_capabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_can_accept_ownership_isSet) {
        obj.insert(QString("canAcceptOwnership"), ::OpenAPI::toJsonValue(m_can_accept_ownership));
    }
    if (m_can_add_children_isSet) {
        obj.insert(QString("canAddChildren"), ::OpenAPI::toJsonValue(m_can_add_children));
    }
    if (m_can_add_folder_from_another_drive_isSet) {
        obj.insert(QString("canAddFolderFromAnotherDrive"), ::OpenAPI::toJsonValue(m_can_add_folder_from_another_drive));
    }
    if (m_can_add_my_drive_parent_isSet) {
        obj.insert(QString("canAddMyDriveParent"), ::OpenAPI::toJsonValue(m_can_add_my_drive_parent));
    }
    if (m_can_change_copy_requires_writer_permission_isSet) {
        obj.insert(QString("canChangeCopyRequiresWriterPermission"), ::OpenAPI::toJsonValue(m_can_change_copy_requires_writer_permission));
    }
    if (m_can_change_security_update_enabled_isSet) {
        obj.insert(QString("canChangeSecurityUpdateEnabled"), ::OpenAPI::toJsonValue(m_can_change_security_update_enabled));
    }
    if (m_can_change_viewers_can_copy_content_isSet) {
        obj.insert(QString("canChangeViewersCanCopyContent"), ::OpenAPI::toJsonValue(m_can_change_viewers_can_copy_content));
    }
    if (m_can_comment_isSet) {
        obj.insert(QString("canComment"), ::OpenAPI::toJsonValue(m_can_comment));
    }
    if (m_can_copy_isSet) {
        obj.insert(QString("canCopy"), ::OpenAPI::toJsonValue(m_can_copy));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("canDelete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_delete_children_isSet) {
        obj.insert(QString("canDeleteChildren"), ::OpenAPI::toJsonValue(m_can_delete_children));
    }
    if (m_can_download_isSet) {
        obj.insert(QString("canDownload"), ::OpenAPI::toJsonValue(m_can_download));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("canEdit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_can_list_children_isSet) {
        obj.insert(QString("canListChildren"), ::OpenAPI::toJsonValue(m_can_list_children));
    }
    if (m_can_modify_content_isSet) {
        obj.insert(QString("canModifyContent"), ::OpenAPI::toJsonValue(m_can_modify_content));
    }
    if (m_can_modify_content_restriction_isSet) {
        obj.insert(QString("canModifyContentRestriction"), ::OpenAPI::toJsonValue(m_can_modify_content_restriction));
    }
    if (m_can_modify_editor_content_restriction_isSet) {
        obj.insert(QString("canModifyEditorContentRestriction"), ::OpenAPI::toJsonValue(m_can_modify_editor_content_restriction));
    }
    if (m_can_modify_labels_isSet) {
        obj.insert(QString("canModifyLabels"), ::OpenAPI::toJsonValue(m_can_modify_labels));
    }
    if (m_can_modify_owner_content_restriction_isSet) {
        obj.insert(QString("canModifyOwnerContentRestriction"), ::OpenAPI::toJsonValue(m_can_modify_owner_content_restriction));
    }
    if (m_can_move_children_out_of_drive_isSet) {
        obj.insert(QString("canMoveChildrenOutOfDrive"), ::OpenAPI::toJsonValue(m_can_move_children_out_of_drive));
    }
    if (m_can_move_children_out_of_team_drive_isSet) {
        obj.insert(QString("canMoveChildrenOutOfTeamDrive"), ::OpenAPI::toJsonValue(m_can_move_children_out_of_team_drive));
    }
    if (m_can_move_children_within_drive_isSet) {
        obj.insert(QString("canMoveChildrenWithinDrive"), ::OpenAPI::toJsonValue(m_can_move_children_within_drive));
    }
    if (m_can_move_children_within_team_drive_isSet) {
        obj.insert(QString("canMoveChildrenWithinTeamDrive"), ::OpenAPI::toJsonValue(m_can_move_children_within_team_drive));
    }
    if (m_can_move_item_into_team_drive_isSet) {
        obj.insert(QString("canMoveItemIntoTeamDrive"), ::OpenAPI::toJsonValue(m_can_move_item_into_team_drive));
    }
    if (m_can_move_item_out_of_drive_isSet) {
        obj.insert(QString("canMoveItemOutOfDrive"), ::OpenAPI::toJsonValue(m_can_move_item_out_of_drive));
    }
    if (m_can_move_item_out_of_team_drive_isSet) {
        obj.insert(QString("canMoveItemOutOfTeamDrive"), ::OpenAPI::toJsonValue(m_can_move_item_out_of_team_drive));
    }
    if (m_can_move_item_within_drive_isSet) {
        obj.insert(QString("canMoveItemWithinDrive"), ::OpenAPI::toJsonValue(m_can_move_item_within_drive));
    }
    if (m_can_move_item_within_team_drive_isSet) {
        obj.insert(QString("canMoveItemWithinTeamDrive"), ::OpenAPI::toJsonValue(m_can_move_item_within_team_drive));
    }
    if (m_can_move_team_drive_item_isSet) {
        obj.insert(QString("canMoveTeamDriveItem"), ::OpenAPI::toJsonValue(m_can_move_team_drive_item));
    }
    if (m_can_read_drive_isSet) {
        obj.insert(QString("canReadDrive"), ::OpenAPI::toJsonValue(m_can_read_drive));
    }
    if (m_can_read_labels_isSet) {
        obj.insert(QString("canReadLabels"), ::OpenAPI::toJsonValue(m_can_read_labels));
    }
    if (m_can_read_revisions_isSet) {
        obj.insert(QString("canReadRevisions"), ::OpenAPI::toJsonValue(m_can_read_revisions));
    }
    if (m_can_read_team_drive_isSet) {
        obj.insert(QString("canReadTeamDrive"), ::OpenAPI::toJsonValue(m_can_read_team_drive));
    }
    if (m_can_remove_children_isSet) {
        obj.insert(QString("canRemoveChildren"), ::OpenAPI::toJsonValue(m_can_remove_children));
    }
    if (m_can_remove_content_restriction_isSet) {
        obj.insert(QString("canRemoveContentRestriction"), ::OpenAPI::toJsonValue(m_can_remove_content_restriction));
    }
    if (m_can_remove_my_drive_parent_isSet) {
        obj.insert(QString("canRemoveMyDriveParent"), ::OpenAPI::toJsonValue(m_can_remove_my_drive_parent));
    }
    if (m_can_rename_isSet) {
        obj.insert(QString("canRename"), ::OpenAPI::toJsonValue(m_can_rename));
    }
    if (m_can_share_isSet) {
        obj.insert(QString("canShare"), ::OpenAPI::toJsonValue(m_can_share));
    }
    if (m_can_trash_isSet) {
        obj.insert(QString("canTrash"), ::OpenAPI::toJsonValue(m_can_trash));
    }
    if (m_can_trash_children_isSet) {
        obj.insert(QString("canTrashChildren"), ::OpenAPI::toJsonValue(m_can_trash_children));
    }
    if (m_can_untrash_isSet) {
        obj.insert(QString("canUntrash"), ::OpenAPI::toJsonValue(m_can_untrash));
    }
    return obj;
}

bool OAIFile_capabilities::isCanAcceptOwnership() const {
    return m_can_accept_ownership;
}
void OAIFile_capabilities::setCanAcceptOwnership(const bool &can_accept_ownership) {
    m_can_accept_ownership = can_accept_ownership;
    m_can_accept_ownership_isSet = true;
}

bool OAIFile_capabilities::is_can_accept_ownership_Set() const{
    return m_can_accept_ownership_isSet;
}

bool OAIFile_capabilities::is_can_accept_ownership_Valid() const{
    return m_can_accept_ownership_isValid;
}

bool OAIFile_capabilities::isCanAddChildren() const {
    return m_can_add_children;
}
void OAIFile_capabilities::setCanAddChildren(const bool &can_add_children) {
    m_can_add_children = can_add_children;
    m_can_add_children_isSet = true;
}

bool OAIFile_capabilities::is_can_add_children_Set() const{
    return m_can_add_children_isSet;
}

bool OAIFile_capabilities::is_can_add_children_Valid() const{
    return m_can_add_children_isValid;
}

bool OAIFile_capabilities::isCanAddFolderFromAnotherDrive() const {
    return m_can_add_folder_from_another_drive;
}
void OAIFile_capabilities::setCanAddFolderFromAnotherDrive(const bool &can_add_folder_from_another_drive) {
    m_can_add_folder_from_another_drive = can_add_folder_from_another_drive;
    m_can_add_folder_from_another_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_add_folder_from_another_drive_Set() const{
    return m_can_add_folder_from_another_drive_isSet;
}

bool OAIFile_capabilities::is_can_add_folder_from_another_drive_Valid() const{
    return m_can_add_folder_from_another_drive_isValid;
}

bool OAIFile_capabilities::isCanAddMyDriveParent() const {
    return m_can_add_my_drive_parent;
}
void OAIFile_capabilities::setCanAddMyDriveParent(const bool &can_add_my_drive_parent) {
    m_can_add_my_drive_parent = can_add_my_drive_parent;
    m_can_add_my_drive_parent_isSet = true;
}

bool OAIFile_capabilities::is_can_add_my_drive_parent_Set() const{
    return m_can_add_my_drive_parent_isSet;
}

bool OAIFile_capabilities::is_can_add_my_drive_parent_Valid() const{
    return m_can_add_my_drive_parent_isValid;
}

bool OAIFile_capabilities::isCanChangeCopyRequiresWriterPermission() const {
    return m_can_change_copy_requires_writer_permission;
}
void OAIFile_capabilities::setCanChangeCopyRequiresWriterPermission(const bool &can_change_copy_requires_writer_permission) {
    m_can_change_copy_requires_writer_permission = can_change_copy_requires_writer_permission;
    m_can_change_copy_requires_writer_permission_isSet = true;
}

bool OAIFile_capabilities::is_can_change_copy_requires_writer_permission_Set() const{
    return m_can_change_copy_requires_writer_permission_isSet;
}

bool OAIFile_capabilities::is_can_change_copy_requires_writer_permission_Valid() const{
    return m_can_change_copy_requires_writer_permission_isValid;
}

bool OAIFile_capabilities::isCanChangeSecurityUpdateEnabled() const {
    return m_can_change_security_update_enabled;
}
void OAIFile_capabilities::setCanChangeSecurityUpdateEnabled(const bool &can_change_security_update_enabled) {
    m_can_change_security_update_enabled = can_change_security_update_enabled;
    m_can_change_security_update_enabled_isSet = true;
}

bool OAIFile_capabilities::is_can_change_security_update_enabled_Set() const{
    return m_can_change_security_update_enabled_isSet;
}

bool OAIFile_capabilities::is_can_change_security_update_enabled_Valid() const{
    return m_can_change_security_update_enabled_isValid;
}

bool OAIFile_capabilities::isCanChangeViewersCanCopyContent() const {
    return m_can_change_viewers_can_copy_content;
}
void OAIFile_capabilities::setCanChangeViewersCanCopyContent(const bool &can_change_viewers_can_copy_content) {
    m_can_change_viewers_can_copy_content = can_change_viewers_can_copy_content;
    m_can_change_viewers_can_copy_content_isSet = true;
}

bool OAIFile_capabilities::is_can_change_viewers_can_copy_content_Set() const{
    return m_can_change_viewers_can_copy_content_isSet;
}

bool OAIFile_capabilities::is_can_change_viewers_can_copy_content_Valid() const{
    return m_can_change_viewers_can_copy_content_isValid;
}

bool OAIFile_capabilities::isCanComment() const {
    return m_can_comment;
}
void OAIFile_capabilities::setCanComment(const bool &can_comment) {
    m_can_comment = can_comment;
    m_can_comment_isSet = true;
}

bool OAIFile_capabilities::is_can_comment_Set() const{
    return m_can_comment_isSet;
}

bool OAIFile_capabilities::is_can_comment_Valid() const{
    return m_can_comment_isValid;
}

bool OAIFile_capabilities::isCanCopy() const {
    return m_can_copy;
}
void OAIFile_capabilities::setCanCopy(const bool &can_copy) {
    m_can_copy = can_copy;
    m_can_copy_isSet = true;
}

bool OAIFile_capabilities::is_can_copy_Set() const{
    return m_can_copy_isSet;
}

bool OAIFile_capabilities::is_can_copy_Valid() const{
    return m_can_copy_isValid;
}

bool OAIFile_capabilities::isCanDelete() const {
    return m_can_delete;
}
void OAIFile_capabilities::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIFile_capabilities::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIFile_capabilities::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIFile_capabilities::isCanDeleteChildren() const {
    return m_can_delete_children;
}
void OAIFile_capabilities::setCanDeleteChildren(const bool &can_delete_children) {
    m_can_delete_children = can_delete_children;
    m_can_delete_children_isSet = true;
}

bool OAIFile_capabilities::is_can_delete_children_Set() const{
    return m_can_delete_children_isSet;
}

bool OAIFile_capabilities::is_can_delete_children_Valid() const{
    return m_can_delete_children_isValid;
}

bool OAIFile_capabilities::isCanDownload() const {
    return m_can_download;
}
void OAIFile_capabilities::setCanDownload(const bool &can_download) {
    m_can_download = can_download;
    m_can_download_isSet = true;
}

bool OAIFile_capabilities::is_can_download_Set() const{
    return m_can_download_isSet;
}

bool OAIFile_capabilities::is_can_download_Valid() const{
    return m_can_download_isValid;
}

bool OAIFile_capabilities::isCanEdit() const {
    return m_can_edit;
}
void OAIFile_capabilities::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIFile_capabilities::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIFile_capabilities::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

bool OAIFile_capabilities::isCanListChildren() const {
    return m_can_list_children;
}
void OAIFile_capabilities::setCanListChildren(const bool &can_list_children) {
    m_can_list_children = can_list_children;
    m_can_list_children_isSet = true;
}

bool OAIFile_capabilities::is_can_list_children_Set() const{
    return m_can_list_children_isSet;
}

bool OAIFile_capabilities::is_can_list_children_Valid() const{
    return m_can_list_children_isValid;
}

bool OAIFile_capabilities::isCanModifyContent() const {
    return m_can_modify_content;
}
void OAIFile_capabilities::setCanModifyContent(const bool &can_modify_content) {
    m_can_modify_content = can_modify_content;
    m_can_modify_content_isSet = true;
}

bool OAIFile_capabilities::is_can_modify_content_Set() const{
    return m_can_modify_content_isSet;
}

bool OAIFile_capabilities::is_can_modify_content_Valid() const{
    return m_can_modify_content_isValid;
}

bool OAIFile_capabilities::isCanModifyContentRestriction() const {
    return m_can_modify_content_restriction;
}
void OAIFile_capabilities::setCanModifyContentRestriction(const bool &can_modify_content_restriction) {
    m_can_modify_content_restriction = can_modify_content_restriction;
    m_can_modify_content_restriction_isSet = true;
}

bool OAIFile_capabilities::is_can_modify_content_restriction_Set() const{
    return m_can_modify_content_restriction_isSet;
}

bool OAIFile_capabilities::is_can_modify_content_restriction_Valid() const{
    return m_can_modify_content_restriction_isValid;
}

bool OAIFile_capabilities::isCanModifyEditorContentRestriction() const {
    return m_can_modify_editor_content_restriction;
}
void OAIFile_capabilities::setCanModifyEditorContentRestriction(const bool &can_modify_editor_content_restriction) {
    m_can_modify_editor_content_restriction = can_modify_editor_content_restriction;
    m_can_modify_editor_content_restriction_isSet = true;
}

bool OAIFile_capabilities::is_can_modify_editor_content_restriction_Set() const{
    return m_can_modify_editor_content_restriction_isSet;
}

bool OAIFile_capabilities::is_can_modify_editor_content_restriction_Valid() const{
    return m_can_modify_editor_content_restriction_isValid;
}

bool OAIFile_capabilities::isCanModifyLabels() const {
    return m_can_modify_labels;
}
void OAIFile_capabilities::setCanModifyLabels(const bool &can_modify_labels) {
    m_can_modify_labels = can_modify_labels;
    m_can_modify_labels_isSet = true;
}

bool OAIFile_capabilities::is_can_modify_labels_Set() const{
    return m_can_modify_labels_isSet;
}

bool OAIFile_capabilities::is_can_modify_labels_Valid() const{
    return m_can_modify_labels_isValid;
}

bool OAIFile_capabilities::isCanModifyOwnerContentRestriction() const {
    return m_can_modify_owner_content_restriction;
}
void OAIFile_capabilities::setCanModifyOwnerContentRestriction(const bool &can_modify_owner_content_restriction) {
    m_can_modify_owner_content_restriction = can_modify_owner_content_restriction;
    m_can_modify_owner_content_restriction_isSet = true;
}

bool OAIFile_capabilities::is_can_modify_owner_content_restriction_Set() const{
    return m_can_modify_owner_content_restriction_isSet;
}

bool OAIFile_capabilities::is_can_modify_owner_content_restriction_Valid() const{
    return m_can_modify_owner_content_restriction_isValid;
}

bool OAIFile_capabilities::isCanMoveChildrenOutOfDrive() const {
    return m_can_move_children_out_of_drive;
}
void OAIFile_capabilities::setCanMoveChildrenOutOfDrive(const bool &can_move_children_out_of_drive) {
    m_can_move_children_out_of_drive = can_move_children_out_of_drive;
    m_can_move_children_out_of_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_children_out_of_drive_Set() const{
    return m_can_move_children_out_of_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_children_out_of_drive_Valid() const{
    return m_can_move_children_out_of_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveChildrenOutOfTeamDrive() const {
    return m_can_move_children_out_of_team_drive;
}
void OAIFile_capabilities::setCanMoveChildrenOutOfTeamDrive(const bool &can_move_children_out_of_team_drive) {
    m_can_move_children_out_of_team_drive = can_move_children_out_of_team_drive;
    m_can_move_children_out_of_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_children_out_of_team_drive_Set() const{
    return m_can_move_children_out_of_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_children_out_of_team_drive_Valid() const{
    return m_can_move_children_out_of_team_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveChildrenWithinDrive() const {
    return m_can_move_children_within_drive;
}
void OAIFile_capabilities::setCanMoveChildrenWithinDrive(const bool &can_move_children_within_drive) {
    m_can_move_children_within_drive = can_move_children_within_drive;
    m_can_move_children_within_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_children_within_drive_Set() const{
    return m_can_move_children_within_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_children_within_drive_Valid() const{
    return m_can_move_children_within_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveChildrenWithinTeamDrive() const {
    return m_can_move_children_within_team_drive;
}
void OAIFile_capabilities::setCanMoveChildrenWithinTeamDrive(const bool &can_move_children_within_team_drive) {
    m_can_move_children_within_team_drive = can_move_children_within_team_drive;
    m_can_move_children_within_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_children_within_team_drive_Set() const{
    return m_can_move_children_within_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_children_within_team_drive_Valid() const{
    return m_can_move_children_within_team_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveItemIntoTeamDrive() const {
    return m_can_move_item_into_team_drive;
}
void OAIFile_capabilities::setCanMoveItemIntoTeamDrive(const bool &can_move_item_into_team_drive) {
    m_can_move_item_into_team_drive = can_move_item_into_team_drive;
    m_can_move_item_into_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_item_into_team_drive_Set() const{
    return m_can_move_item_into_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_item_into_team_drive_Valid() const{
    return m_can_move_item_into_team_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveItemOutOfDrive() const {
    return m_can_move_item_out_of_drive;
}
void OAIFile_capabilities::setCanMoveItemOutOfDrive(const bool &can_move_item_out_of_drive) {
    m_can_move_item_out_of_drive = can_move_item_out_of_drive;
    m_can_move_item_out_of_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_item_out_of_drive_Set() const{
    return m_can_move_item_out_of_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_item_out_of_drive_Valid() const{
    return m_can_move_item_out_of_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveItemOutOfTeamDrive() const {
    return m_can_move_item_out_of_team_drive;
}
void OAIFile_capabilities::setCanMoveItemOutOfTeamDrive(const bool &can_move_item_out_of_team_drive) {
    m_can_move_item_out_of_team_drive = can_move_item_out_of_team_drive;
    m_can_move_item_out_of_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_item_out_of_team_drive_Set() const{
    return m_can_move_item_out_of_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_item_out_of_team_drive_Valid() const{
    return m_can_move_item_out_of_team_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveItemWithinDrive() const {
    return m_can_move_item_within_drive;
}
void OAIFile_capabilities::setCanMoveItemWithinDrive(const bool &can_move_item_within_drive) {
    m_can_move_item_within_drive = can_move_item_within_drive;
    m_can_move_item_within_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_item_within_drive_Set() const{
    return m_can_move_item_within_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_item_within_drive_Valid() const{
    return m_can_move_item_within_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveItemWithinTeamDrive() const {
    return m_can_move_item_within_team_drive;
}
void OAIFile_capabilities::setCanMoveItemWithinTeamDrive(const bool &can_move_item_within_team_drive) {
    m_can_move_item_within_team_drive = can_move_item_within_team_drive;
    m_can_move_item_within_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_move_item_within_team_drive_Set() const{
    return m_can_move_item_within_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_move_item_within_team_drive_Valid() const{
    return m_can_move_item_within_team_drive_isValid;
}

bool OAIFile_capabilities::isCanMoveTeamDriveItem() const {
    return m_can_move_team_drive_item;
}
void OAIFile_capabilities::setCanMoveTeamDriveItem(const bool &can_move_team_drive_item) {
    m_can_move_team_drive_item = can_move_team_drive_item;
    m_can_move_team_drive_item_isSet = true;
}

bool OAIFile_capabilities::is_can_move_team_drive_item_Set() const{
    return m_can_move_team_drive_item_isSet;
}

bool OAIFile_capabilities::is_can_move_team_drive_item_Valid() const{
    return m_can_move_team_drive_item_isValid;
}

bool OAIFile_capabilities::isCanReadDrive() const {
    return m_can_read_drive;
}
void OAIFile_capabilities::setCanReadDrive(const bool &can_read_drive) {
    m_can_read_drive = can_read_drive;
    m_can_read_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_read_drive_Set() const{
    return m_can_read_drive_isSet;
}

bool OAIFile_capabilities::is_can_read_drive_Valid() const{
    return m_can_read_drive_isValid;
}

bool OAIFile_capabilities::isCanReadLabels() const {
    return m_can_read_labels;
}
void OAIFile_capabilities::setCanReadLabels(const bool &can_read_labels) {
    m_can_read_labels = can_read_labels;
    m_can_read_labels_isSet = true;
}

bool OAIFile_capabilities::is_can_read_labels_Set() const{
    return m_can_read_labels_isSet;
}

bool OAIFile_capabilities::is_can_read_labels_Valid() const{
    return m_can_read_labels_isValid;
}

bool OAIFile_capabilities::isCanReadRevisions() const {
    return m_can_read_revisions;
}
void OAIFile_capabilities::setCanReadRevisions(const bool &can_read_revisions) {
    m_can_read_revisions = can_read_revisions;
    m_can_read_revisions_isSet = true;
}

bool OAIFile_capabilities::is_can_read_revisions_Set() const{
    return m_can_read_revisions_isSet;
}

bool OAIFile_capabilities::is_can_read_revisions_Valid() const{
    return m_can_read_revisions_isValid;
}

bool OAIFile_capabilities::isCanReadTeamDrive() const {
    return m_can_read_team_drive;
}
void OAIFile_capabilities::setCanReadTeamDrive(const bool &can_read_team_drive) {
    m_can_read_team_drive = can_read_team_drive;
    m_can_read_team_drive_isSet = true;
}

bool OAIFile_capabilities::is_can_read_team_drive_Set() const{
    return m_can_read_team_drive_isSet;
}

bool OAIFile_capabilities::is_can_read_team_drive_Valid() const{
    return m_can_read_team_drive_isValid;
}

bool OAIFile_capabilities::isCanRemoveChildren() const {
    return m_can_remove_children;
}
void OAIFile_capabilities::setCanRemoveChildren(const bool &can_remove_children) {
    m_can_remove_children = can_remove_children;
    m_can_remove_children_isSet = true;
}

bool OAIFile_capabilities::is_can_remove_children_Set() const{
    return m_can_remove_children_isSet;
}

bool OAIFile_capabilities::is_can_remove_children_Valid() const{
    return m_can_remove_children_isValid;
}

bool OAIFile_capabilities::isCanRemoveContentRestriction() const {
    return m_can_remove_content_restriction;
}
void OAIFile_capabilities::setCanRemoveContentRestriction(const bool &can_remove_content_restriction) {
    m_can_remove_content_restriction = can_remove_content_restriction;
    m_can_remove_content_restriction_isSet = true;
}

bool OAIFile_capabilities::is_can_remove_content_restriction_Set() const{
    return m_can_remove_content_restriction_isSet;
}

bool OAIFile_capabilities::is_can_remove_content_restriction_Valid() const{
    return m_can_remove_content_restriction_isValid;
}

bool OAIFile_capabilities::isCanRemoveMyDriveParent() const {
    return m_can_remove_my_drive_parent;
}
void OAIFile_capabilities::setCanRemoveMyDriveParent(const bool &can_remove_my_drive_parent) {
    m_can_remove_my_drive_parent = can_remove_my_drive_parent;
    m_can_remove_my_drive_parent_isSet = true;
}

bool OAIFile_capabilities::is_can_remove_my_drive_parent_Set() const{
    return m_can_remove_my_drive_parent_isSet;
}

bool OAIFile_capabilities::is_can_remove_my_drive_parent_Valid() const{
    return m_can_remove_my_drive_parent_isValid;
}

bool OAIFile_capabilities::isCanRename() const {
    return m_can_rename;
}
void OAIFile_capabilities::setCanRename(const bool &can_rename) {
    m_can_rename = can_rename;
    m_can_rename_isSet = true;
}

bool OAIFile_capabilities::is_can_rename_Set() const{
    return m_can_rename_isSet;
}

bool OAIFile_capabilities::is_can_rename_Valid() const{
    return m_can_rename_isValid;
}

bool OAIFile_capabilities::isCanShare() const {
    return m_can_share;
}
void OAIFile_capabilities::setCanShare(const bool &can_share) {
    m_can_share = can_share;
    m_can_share_isSet = true;
}

bool OAIFile_capabilities::is_can_share_Set() const{
    return m_can_share_isSet;
}

bool OAIFile_capabilities::is_can_share_Valid() const{
    return m_can_share_isValid;
}

bool OAIFile_capabilities::isCanTrash() const {
    return m_can_trash;
}
void OAIFile_capabilities::setCanTrash(const bool &can_trash) {
    m_can_trash = can_trash;
    m_can_trash_isSet = true;
}

bool OAIFile_capabilities::is_can_trash_Set() const{
    return m_can_trash_isSet;
}

bool OAIFile_capabilities::is_can_trash_Valid() const{
    return m_can_trash_isValid;
}

bool OAIFile_capabilities::isCanTrashChildren() const {
    return m_can_trash_children;
}
void OAIFile_capabilities::setCanTrashChildren(const bool &can_trash_children) {
    m_can_trash_children = can_trash_children;
    m_can_trash_children_isSet = true;
}

bool OAIFile_capabilities::is_can_trash_children_Set() const{
    return m_can_trash_children_isSet;
}

bool OAIFile_capabilities::is_can_trash_children_Valid() const{
    return m_can_trash_children_isValid;
}

bool OAIFile_capabilities::isCanUntrash() const {
    return m_can_untrash;
}
void OAIFile_capabilities::setCanUntrash(const bool &can_untrash) {
    m_can_untrash = can_untrash;
    m_can_untrash_isSet = true;
}

bool OAIFile_capabilities::is_can_untrash_Set() const{
    return m_can_untrash_isSet;
}

bool OAIFile_capabilities::is_can_untrash_Valid() const{
    return m_can_untrash_isValid;
}

bool OAIFile_capabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_accept_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_add_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_add_folder_from_another_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_add_my_drive_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_copy_requires_writer_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_security_update_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_change_viewers_can_copy_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_list_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_content_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_editor_content_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_modify_owner_content_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_children_out_of_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_children_out_of_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_children_within_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_children_within_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_item_into_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_item_out_of_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_item_out_of_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_item_within_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_item_within_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_move_team_drive_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_revisions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_read_team_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_content_restriction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_remove_my_drive_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_rename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_trash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_trash_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_untrash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_capabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
