/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbout_storageQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbout_storageQuota::OAIAbout_storageQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbout_storageQuota::OAIAbout_storageQuota() {
    this->initializeModel();
}

OAIAbout_storageQuota::~OAIAbout_storageQuota() {}

void OAIAbout_storageQuota::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_usage_in_drive_isSet = false;
    m_usage_in_drive_isValid = false;

    m_usage_in_drive_trash_isSet = false;
    m_usage_in_drive_trash_isValid = false;
}

void OAIAbout_storageQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbout_storageQuota::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_usage_in_drive_isValid = ::OpenAPI::fromJsonValue(m_usage_in_drive, json[QString("usageInDrive")]);
    m_usage_in_drive_isSet = !json[QString("usageInDrive")].isNull() && m_usage_in_drive_isValid;

    m_usage_in_drive_trash_isValid = ::OpenAPI::fromJsonValue(m_usage_in_drive_trash, json[QString("usageInDriveTrash")]);
    m_usage_in_drive_trash_isSet = !json[QString("usageInDriveTrash")].isNull() && m_usage_in_drive_trash_isValid;
}

QString OAIAbout_storageQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbout_storageQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_usage_in_drive_isSet) {
        obj.insert(QString("usageInDrive"), ::OpenAPI::toJsonValue(m_usage_in_drive));
    }
    if (m_usage_in_drive_trash_isSet) {
        obj.insert(QString("usageInDriveTrash"), ::OpenAPI::toJsonValue(m_usage_in_drive_trash));
    }
    return obj;
}

QString OAIAbout_storageQuota::getLimit() const {
    return m_limit;
}
void OAIAbout_storageQuota::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIAbout_storageQuota::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIAbout_storageQuota::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIAbout_storageQuota::getUsage() const {
    return m_usage;
}
void OAIAbout_storageQuota::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIAbout_storageQuota::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIAbout_storageQuota::is_usage_Valid() const{
    return m_usage_isValid;
}

QString OAIAbout_storageQuota::getUsageInDrive() const {
    return m_usage_in_drive;
}
void OAIAbout_storageQuota::setUsageInDrive(const QString &usage_in_drive) {
    m_usage_in_drive = usage_in_drive;
    m_usage_in_drive_isSet = true;
}

bool OAIAbout_storageQuota::is_usage_in_drive_Set() const{
    return m_usage_in_drive_isSet;
}

bool OAIAbout_storageQuota::is_usage_in_drive_Valid() const{
    return m_usage_in_drive_isValid;
}

QString OAIAbout_storageQuota::getUsageInDriveTrash() const {
    return m_usage_in_drive_trash;
}
void OAIAbout_storageQuota::setUsageInDriveTrash(const QString &usage_in_drive_trash) {
    m_usage_in_drive_trash = usage_in_drive_trash;
    m_usage_in_drive_trash_isSet = true;
}

bool OAIAbout_storageQuota::is_usage_in_drive_trash_Set() const{
    return m_usage_in_drive_trash_isSet;
}

bool OAIAbout_storageQuota::is_usage_in_drive_trash_Valid() const{
    return m_usage_in_drive_trash_isValid;
}

bool OAIAbout_storageQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_in_drive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_in_drive_trash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbout_storageQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
