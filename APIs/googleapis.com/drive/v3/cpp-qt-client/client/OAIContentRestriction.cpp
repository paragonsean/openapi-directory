/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContentRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContentRestriction::OAIContentRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContentRestriction::OAIContentRestriction() {
    this->initializeModel();
}

OAIContentRestriction::~OAIContentRestriction() {}

void OAIContentRestriction::initializeModel() {

    m_owner_restricted_isSet = false;
    m_owner_restricted_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_restricting_user_isSet = false;
    m_restricting_user_isValid = false;

    m_restriction_time_isSet = false;
    m_restriction_time_isValid = false;

    m_system_restricted_isSet = false;
    m_system_restricted_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIContentRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContentRestriction::fromJsonObject(QJsonObject json) {

    m_owner_restricted_isValid = ::OpenAPI::fromJsonValue(m_owner_restricted, json[QString("ownerRestricted")]);
    m_owner_restricted_isSet = !json[QString("ownerRestricted")].isNull() && m_owner_restricted_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_restricting_user_isValid = ::OpenAPI::fromJsonValue(m_restricting_user, json[QString("restrictingUser")]);
    m_restricting_user_isSet = !json[QString("restrictingUser")].isNull() && m_restricting_user_isValid;

    m_restriction_time_isValid = ::OpenAPI::fromJsonValue(m_restriction_time, json[QString("restrictionTime")]);
    m_restriction_time_isSet = !json[QString("restrictionTime")].isNull() && m_restriction_time_isValid;

    m_system_restricted_isValid = ::OpenAPI::fromJsonValue(m_system_restricted, json[QString("systemRestricted")]);
    m_system_restricted_isSet = !json[QString("systemRestricted")].isNull() && m_system_restricted_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIContentRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContentRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_owner_restricted_isSet) {
        obj.insert(QString("ownerRestricted"), ::OpenAPI::toJsonValue(m_owner_restricted));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_restricting_user.isSet()) {
        obj.insert(QString("restrictingUser"), ::OpenAPI::toJsonValue(m_restricting_user));
    }
    if (m_restriction_time_isSet) {
        obj.insert(QString("restrictionTime"), ::OpenAPI::toJsonValue(m_restriction_time));
    }
    if (m_system_restricted_isSet) {
        obj.insert(QString("systemRestricted"), ::OpenAPI::toJsonValue(m_system_restricted));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIContentRestriction::isOwnerRestricted() const {
    return m_owner_restricted;
}
void OAIContentRestriction::setOwnerRestricted(const bool &owner_restricted) {
    m_owner_restricted = owner_restricted;
    m_owner_restricted_isSet = true;
}

bool OAIContentRestriction::is_owner_restricted_Set() const{
    return m_owner_restricted_isSet;
}

bool OAIContentRestriction::is_owner_restricted_Valid() const{
    return m_owner_restricted_isValid;
}

bool OAIContentRestriction::isReadOnly() const {
    return m_read_only;
}
void OAIContentRestriction::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIContentRestriction::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIContentRestriction::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIContentRestriction::getReason() const {
    return m_reason;
}
void OAIContentRestriction::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIContentRestriction::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIContentRestriction::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIUser OAIContentRestriction::getRestrictingUser() const {
    return m_restricting_user;
}
void OAIContentRestriction::setRestrictingUser(const OAIUser &restricting_user) {
    m_restricting_user = restricting_user;
    m_restricting_user_isSet = true;
}

bool OAIContentRestriction::is_restricting_user_Set() const{
    return m_restricting_user_isSet;
}

bool OAIContentRestriction::is_restricting_user_Valid() const{
    return m_restricting_user_isValid;
}

QDateTime OAIContentRestriction::getRestrictionTime() const {
    return m_restriction_time;
}
void OAIContentRestriction::setRestrictionTime(const QDateTime &restriction_time) {
    m_restriction_time = restriction_time;
    m_restriction_time_isSet = true;
}

bool OAIContentRestriction::is_restriction_time_Set() const{
    return m_restriction_time_isSet;
}

bool OAIContentRestriction::is_restriction_time_Valid() const{
    return m_restriction_time_isValid;
}

bool OAIContentRestriction::isSystemRestricted() const {
    return m_system_restricted;
}
void OAIContentRestriction::setSystemRestricted(const bool &system_restricted) {
    m_system_restricted = system_restricted;
    m_system_restricted_isSet = true;
}

bool OAIContentRestriction::is_system_restricted_Set() const{
    return m_system_restricted_isSet;
}

bool OAIContentRestriction::is_system_restricted_Valid() const{
    return m_system_restricted_isValid;
}

QString OAIContentRestriction::getType() const {
    return m_type;
}
void OAIContentRestriction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIContentRestriction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIContentRestriction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIContentRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_owner_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricting_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContentRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
