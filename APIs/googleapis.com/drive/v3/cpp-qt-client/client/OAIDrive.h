/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDrive.h
 *
 * Representation of a shared drive. Some resource methods (such as &#x60;drives.update&#x60;) require a &#x60;driveId&#x60;. Use the &#x60;drives.list&#x60; method to retrieve the ID for a shared drive.
 */

#ifndef OAIDrive_H
#define OAIDrive_H

#include <QJsonObject>

#include "OAIDrive_backgroundImageFile.h"
#include "OAIDrive_capabilities.h"
#include "OAIDrive_restrictions.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDrive_backgroundImageFile;
class OAIDrive_capabilities;
class OAIDrive_restrictions;

class OAIDrive : public OAIObject {
public:
    OAIDrive();
    OAIDrive(QString json);
    ~OAIDrive() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDrive_backgroundImageFile getBackgroundImageFile() const;
    void setBackgroundImageFile(const OAIDrive_backgroundImageFile &background_image_file);
    bool is_background_image_file_Set() const;
    bool is_background_image_file_Valid() const;

    QString getBackgroundImageLink() const;
    void setBackgroundImageLink(const QString &background_image_link);
    bool is_background_image_link_Set() const;
    bool is_background_image_link_Valid() const;

    OAIDrive_capabilities getCapabilities() const;
    void setCapabilities(const OAIDrive_capabilities &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getColorRgb() const;
    void setColorRgb(const QString &color_rgb);
    bool is_color_rgb_Set() const;
    bool is_color_rgb_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    bool isHidden() const;
    void setHidden(const bool &hidden);
    bool is_hidden_Set() const;
    bool is_hidden_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getOrgUnitId() const;
    void setOrgUnitId(const QString &org_unit_id);
    bool is_org_unit_id_Set() const;
    bool is_org_unit_id_Valid() const;

    OAIDrive_restrictions getRestrictions() const;
    void setRestrictions(const OAIDrive_restrictions &restrictions);
    bool is_restrictions_Set() const;
    bool is_restrictions_Valid() const;

    QString getThemeId() const;
    void setThemeId(const QString &theme_id);
    bool is_theme_id_Set() const;
    bool is_theme_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDrive_backgroundImageFile m_background_image_file;
    bool m_background_image_file_isSet;
    bool m_background_image_file_isValid;

    QString m_background_image_link;
    bool m_background_image_link_isSet;
    bool m_background_image_link_isValid;

    OAIDrive_capabilities m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_color_rgb;
    bool m_color_rgb_isSet;
    bool m_color_rgb_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    bool m_hidden;
    bool m_hidden_isSet;
    bool m_hidden_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_org_unit_id;
    bool m_org_unit_id_isSet;
    bool m_org_unit_id_isValid;

    OAIDrive_restrictions m_restrictions;
    bool m_restrictions_isSet;
    bool m_restrictions_isValid;

    QString m_theme_id;
    bool m_theme_id_isSet;
    bool m_theme_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDrive)

#endif // OAIDrive_H
