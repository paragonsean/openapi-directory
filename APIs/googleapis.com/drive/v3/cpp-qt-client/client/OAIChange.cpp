/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange::OAIChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange::OAIChange() {
    this->initializeModel();
}

OAIChange::~OAIChange() {}

void OAIChange::initializeModel() {

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_drive_isSet = false;
    m_drive_isValid = false;

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_removed_isSet = false;
    m_removed_isValid = false;

    m_team_drive_isSet = false;
    m_team_drive_isValid = false;

    m_team_drive_id_isSet = false;
    m_team_drive_id_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange::fromJsonObject(QJsonObject json) {

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_drive_isValid = ::OpenAPI::fromJsonValue(m_drive, json[QString("drive")]);
    m_drive_isSet = !json[QString("drive")].isNull() && m_drive_isValid;

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(m_drive_id, json[QString("driveId")]);
    m_drive_id_isSet = !json[QString("driveId")].isNull() && m_drive_id_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_removed_isValid = ::OpenAPI::fromJsonValue(m_removed, json[QString("removed")]);
    m_removed_isSet = !json[QString("removed")].isNull() && m_removed_isValid;

    m_team_drive_isValid = ::OpenAPI::fromJsonValue(m_team_drive, json[QString("teamDrive")]);
    m_team_drive_isSet = !json[QString("teamDrive")].isNull() && m_team_drive_isValid;

    m_team_drive_id_isValid = ::OpenAPI::fromJsonValue(m_team_drive_id, json[QString("teamDriveId")]);
    m_team_drive_id_isSet = !json[QString("teamDriveId")].isNull() && m_team_drive_id_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange::asJsonObject() const {
    QJsonObject obj;
    if (m_change_type_isSet) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(m_drive));
    }
    if (m_drive_id_isSet) {
        obj.insert(QString("driveId"), ::OpenAPI::toJsonValue(m_drive_id));
    }
    if (m_file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_removed_isSet) {
        obj.insert(QString("removed"), ::OpenAPI::toJsonValue(m_removed));
    }
    if (m_team_drive.isSet()) {
        obj.insert(QString("teamDrive"), ::OpenAPI::toJsonValue(m_team_drive));
    }
    if (m_team_drive_id_isSet) {
        obj.insert(QString("teamDriveId"), ::OpenAPI::toJsonValue(m_team_drive_id));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIChange::getChangeType() const {
    return m_change_type;
}
void OAIChange::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIChange::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIChange::is_change_type_Valid() const{
    return m_change_type_isValid;
}

OAIDrive OAIChange::getDrive() const {
    return m_drive;
}
void OAIChange::setDrive(const OAIDrive &drive) {
    m_drive = drive;
    m_drive_isSet = true;
}

bool OAIChange::is_drive_Set() const{
    return m_drive_isSet;
}

bool OAIChange::is_drive_Valid() const{
    return m_drive_isValid;
}

QString OAIChange::getDriveId() const {
    return m_drive_id;
}
void OAIChange::setDriveId(const QString &drive_id) {
    m_drive_id = drive_id;
    m_drive_id_isSet = true;
}

bool OAIChange::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAIChange::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

OAIFile OAIChange::getFile() const {
    return m_file;
}
void OAIChange::setFile(const OAIFile &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIChange::is_file_Set() const{
    return m_file_isSet;
}

bool OAIChange::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIChange::getFileId() const {
    return m_file_id;
}
void OAIChange::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIChange::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIChange::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIChange::getKind() const {
    return m_kind;
}
void OAIChange::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChange::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChange::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIChange::isRemoved() const {
    return m_removed;
}
void OAIChange::setRemoved(const bool &removed) {
    m_removed = removed;
    m_removed_isSet = true;
}

bool OAIChange::is_removed_Set() const{
    return m_removed_isSet;
}

bool OAIChange::is_removed_Valid() const{
    return m_removed_isValid;
}

OAITeamDrive OAIChange::getTeamDrive() const {
    return m_team_drive;
}
void OAIChange::setTeamDrive(const OAITeamDrive &team_drive) {
    m_team_drive = team_drive;
    m_team_drive_isSet = true;
}

bool OAIChange::is_team_drive_Set() const{
    return m_team_drive_isSet;
}

bool OAIChange::is_team_drive_Valid() const{
    return m_team_drive_isValid;
}

QString OAIChange::getTeamDriveId() const {
    return m_team_drive_id;
}
void OAIChange::setTeamDriveId(const QString &team_drive_id) {
    m_team_drive_id = team_drive_id;
    m_team_drive_id_isSet = true;
}

bool OAIChange::is_team_drive_id_Set() const{
    return m_team_drive_id_isSet;
}

bool OAIChange::is_team_drive_id_Valid() const{
    return m_team_drive_id_isValid;
}

QDateTime OAIChange::getTime() const {
    return m_time;
}
void OAIChange::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIChange::is_time_Set() const{
    return m_time_isSet;
}

bool OAIChange::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIChange::getType() const {
    return m_type;
}
void OAIChange::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChange::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChange::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_removed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
