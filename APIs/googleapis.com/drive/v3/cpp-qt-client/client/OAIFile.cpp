/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile::OAIFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile::OAIFile() {
    this->initializeModel();
}

OAIFile::~OAIFile() {}

void OAIFile::initializeModel() {

    m_app_properties_isSet = false;
    m_app_properties_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_content_hints_isSet = false;
    m_content_hints_isValid = false;

    m_content_restrictions_isSet = false;
    m_content_restrictions_isValid = false;

    m_copy_requires_writer_permission_isSet = false;
    m_copy_requires_writer_permission_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_explicitly_trashed_isSet = false;
    m_explicitly_trashed_isValid = false;

    m_export_links_isSet = false;
    m_export_links_isValid = false;

    m_file_extension_isSet = false;
    m_file_extension_isValid = false;

    m_folder_color_rgb_isSet = false;
    m_folder_color_rgb_isValid = false;

    m_full_file_extension_isSet = false;
    m_full_file_extension_isValid = false;

    m_has_augmented_permissions_isSet = false;
    m_has_augmented_permissions_isValid = false;

    m_has_thumbnail_isSet = false;
    m_has_thumbnail_isValid = false;

    m_head_revision_id_isSet = false;
    m_head_revision_id_isValid = false;

    m_icon_link_isSet = false;
    m_icon_link_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_media_metadata_isSet = false;
    m_image_media_metadata_isValid = false;

    m_is_app_authorized_isSet = false;
    m_is_app_authorized_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_label_info_isSet = false;
    m_label_info_isValid = false;

    m_last_modifying_user_isSet = false;
    m_last_modifying_user_isValid = false;

    m_link_share_metadata_isSet = false;
    m_link_share_metadata_isValid = false;

    m_md5_checksum_isSet = false;
    m_md5_checksum_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_modified_by_me_isSet = false;
    m_modified_by_me_isValid = false;

    m_modified_by_me_time_isSet = false;
    m_modified_by_me_time_isValid = false;

    m_modified_time_isSet = false;
    m_modified_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_original_filename_isSet = false;
    m_original_filename_isValid = false;

    m_owned_by_me_isSet = false;
    m_owned_by_me_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_parents_isSet = false;
    m_parents_isValid = false;

    m_permission_ids_isSet = false;
    m_permission_ids_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_quota_bytes_used_isSet = false;
    m_quota_bytes_used_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_sha1_checksum_isSet = false;
    m_sha1_checksum_isValid = false;

    m_sha256_checksum_isSet = false;
    m_sha256_checksum_isValid = false;

    m_shared_isSet = false;
    m_shared_isValid = false;

    m_shared_with_me_time_isSet = false;
    m_shared_with_me_time_isValid = false;

    m_sharing_user_isSet = false;
    m_sharing_user_isValid = false;

    m_shortcut_details_isSet = false;
    m_shortcut_details_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_spaces_isSet = false;
    m_spaces_isValid = false;

    m_starred_isSet = false;
    m_starred_isValid = false;

    m_team_drive_id_isSet = false;
    m_team_drive_id_isValid = false;

    m_thumbnail_link_isSet = false;
    m_thumbnail_link_isValid = false;

    m_thumbnail_version_isSet = false;
    m_thumbnail_version_isValid = false;

    m_trashed_isSet = false;
    m_trashed_isValid = false;

    m_trashed_time_isSet = false;
    m_trashed_time_isValid = false;

    m_trashing_user_isSet = false;
    m_trashing_user_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_video_media_metadata_isSet = false;
    m_video_media_metadata_isValid = false;

    m_viewed_by_me_isSet = false;
    m_viewed_by_me_isValid = false;

    m_viewed_by_me_time_isSet = false;
    m_viewed_by_me_time_isValid = false;

    m_viewers_can_copy_content_isSet = false;
    m_viewers_can_copy_content_isValid = false;

    m_web_content_link_isSet = false;
    m_web_content_link_isValid = false;

    m_web_view_link_isSet = false;
    m_web_view_link_isValid = false;

    m_writers_can_share_isSet = false;
    m_writers_can_share_isValid = false;
}

void OAIFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile::fromJsonObject(QJsonObject json) {

    m_app_properties_isValid = ::OpenAPI::fromJsonValue(m_app_properties, json[QString("appProperties")]);
    m_app_properties_isSet = !json[QString("appProperties")].isNull() && m_app_properties_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_content_hints_isValid = ::OpenAPI::fromJsonValue(m_content_hints, json[QString("contentHints")]);
    m_content_hints_isSet = !json[QString("contentHints")].isNull() && m_content_hints_isValid;

    m_content_restrictions_isValid = ::OpenAPI::fromJsonValue(m_content_restrictions, json[QString("contentRestrictions")]);
    m_content_restrictions_isSet = !json[QString("contentRestrictions")].isNull() && m_content_restrictions_isValid;

    m_copy_requires_writer_permission_isValid = ::OpenAPI::fromJsonValue(m_copy_requires_writer_permission, json[QString("copyRequiresWriterPermission")]);
    m_copy_requires_writer_permission_isSet = !json[QString("copyRequiresWriterPermission")].isNull() && m_copy_requires_writer_permission_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(m_drive_id, json[QString("driveId")]);
    m_drive_id_isSet = !json[QString("driveId")].isNull() && m_drive_id_isValid;

    m_explicitly_trashed_isValid = ::OpenAPI::fromJsonValue(m_explicitly_trashed, json[QString("explicitlyTrashed")]);
    m_explicitly_trashed_isSet = !json[QString("explicitlyTrashed")].isNull() && m_explicitly_trashed_isValid;

    m_export_links_isValid = ::OpenAPI::fromJsonValue(m_export_links, json[QString("exportLinks")]);
    m_export_links_isSet = !json[QString("exportLinks")].isNull() && m_export_links_isValid;

    m_file_extension_isValid = ::OpenAPI::fromJsonValue(m_file_extension, json[QString("fileExtension")]);
    m_file_extension_isSet = !json[QString("fileExtension")].isNull() && m_file_extension_isValid;

    m_folder_color_rgb_isValid = ::OpenAPI::fromJsonValue(m_folder_color_rgb, json[QString("folderColorRgb")]);
    m_folder_color_rgb_isSet = !json[QString("folderColorRgb")].isNull() && m_folder_color_rgb_isValid;

    m_full_file_extension_isValid = ::OpenAPI::fromJsonValue(m_full_file_extension, json[QString("fullFileExtension")]);
    m_full_file_extension_isSet = !json[QString("fullFileExtension")].isNull() && m_full_file_extension_isValid;

    m_has_augmented_permissions_isValid = ::OpenAPI::fromJsonValue(m_has_augmented_permissions, json[QString("hasAugmentedPermissions")]);
    m_has_augmented_permissions_isSet = !json[QString("hasAugmentedPermissions")].isNull() && m_has_augmented_permissions_isValid;

    m_has_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_has_thumbnail, json[QString("hasThumbnail")]);
    m_has_thumbnail_isSet = !json[QString("hasThumbnail")].isNull() && m_has_thumbnail_isValid;

    m_head_revision_id_isValid = ::OpenAPI::fromJsonValue(m_head_revision_id, json[QString("headRevisionId")]);
    m_head_revision_id_isSet = !json[QString("headRevisionId")].isNull() && m_head_revision_id_isValid;

    m_icon_link_isValid = ::OpenAPI::fromJsonValue(m_icon_link, json[QString("iconLink")]);
    m_icon_link_isSet = !json[QString("iconLink")].isNull() && m_icon_link_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_media_metadata_isValid = ::OpenAPI::fromJsonValue(m_image_media_metadata, json[QString("imageMediaMetadata")]);
    m_image_media_metadata_isSet = !json[QString("imageMediaMetadata")].isNull() && m_image_media_metadata_isValid;

    m_is_app_authorized_isValid = ::OpenAPI::fromJsonValue(m_is_app_authorized, json[QString("isAppAuthorized")]);
    m_is_app_authorized_isSet = !json[QString("isAppAuthorized")].isNull() && m_is_app_authorized_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_label_info_isValid = ::OpenAPI::fromJsonValue(m_label_info, json[QString("labelInfo")]);
    m_label_info_isSet = !json[QString("labelInfo")].isNull() && m_label_info_isValid;

    m_last_modifying_user_isValid = ::OpenAPI::fromJsonValue(m_last_modifying_user, json[QString("lastModifyingUser")]);
    m_last_modifying_user_isSet = !json[QString("lastModifyingUser")].isNull() && m_last_modifying_user_isValid;

    m_link_share_metadata_isValid = ::OpenAPI::fromJsonValue(m_link_share_metadata, json[QString("linkShareMetadata")]);
    m_link_share_metadata_isSet = !json[QString("linkShareMetadata")].isNull() && m_link_share_metadata_isValid;

    m_md5_checksum_isValid = ::OpenAPI::fromJsonValue(m_md5_checksum, json[QString("md5Checksum")]);
    m_md5_checksum_isSet = !json[QString("md5Checksum")].isNull() && m_md5_checksum_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_modified_by_me_isValid = ::OpenAPI::fromJsonValue(m_modified_by_me, json[QString("modifiedByMe")]);
    m_modified_by_me_isSet = !json[QString("modifiedByMe")].isNull() && m_modified_by_me_isValid;

    m_modified_by_me_time_isValid = ::OpenAPI::fromJsonValue(m_modified_by_me_time, json[QString("modifiedByMeTime")]);
    m_modified_by_me_time_isSet = !json[QString("modifiedByMeTime")].isNull() && m_modified_by_me_time_isValid;

    m_modified_time_isValid = ::OpenAPI::fromJsonValue(m_modified_time, json[QString("modifiedTime")]);
    m_modified_time_isSet = !json[QString("modifiedTime")].isNull() && m_modified_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_original_filename_isValid = ::OpenAPI::fromJsonValue(m_original_filename, json[QString("originalFilename")]);
    m_original_filename_isSet = !json[QString("originalFilename")].isNull() && m_original_filename_isValid;

    m_owned_by_me_isValid = ::OpenAPI::fromJsonValue(m_owned_by_me, json[QString("ownedByMe")]);
    m_owned_by_me_isSet = !json[QString("ownedByMe")].isNull() && m_owned_by_me_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_parents_isValid = ::OpenAPI::fromJsonValue(m_parents, json[QString("parents")]);
    m_parents_isSet = !json[QString("parents")].isNull() && m_parents_isValid;

    m_permission_ids_isValid = ::OpenAPI::fromJsonValue(m_permission_ids, json[QString("permissionIds")]);
    m_permission_ids_isSet = !json[QString("permissionIds")].isNull() && m_permission_ids_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_quota_bytes_used_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_used, json[QString("quotaBytesUsed")]);
    m_quota_bytes_used_isSet = !json[QString("quotaBytesUsed")].isNull() && m_quota_bytes_used_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(m_resource_key, json[QString("resourceKey")]);
    m_resource_key_isSet = !json[QString("resourceKey")].isNull() && m_resource_key_isValid;

    m_sha1_checksum_isValid = ::OpenAPI::fromJsonValue(m_sha1_checksum, json[QString("sha1Checksum")]);
    m_sha1_checksum_isSet = !json[QString("sha1Checksum")].isNull() && m_sha1_checksum_isValid;

    m_sha256_checksum_isValid = ::OpenAPI::fromJsonValue(m_sha256_checksum, json[QString("sha256Checksum")]);
    m_sha256_checksum_isSet = !json[QString("sha256Checksum")].isNull() && m_sha256_checksum_isValid;

    m_shared_isValid = ::OpenAPI::fromJsonValue(m_shared, json[QString("shared")]);
    m_shared_isSet = !json[QString("shared")].isNull() && m_shared_isValid;

    m_shared_with_me_time_isValid = ::OpenAPI::fromJsonValue(m_shared_with_me_time, json[QString("sharedWithMeTime")]);
    m_shared_with_me_time_isSet = !json[QString("sharedWithMeTime")].isNull() && m_shared_with_me_time_isValid;

    m_sharing_user_isValid = ::OpenAPI::fromJsonValue(m_sharing_user, json[QString("sharingUser")]);
    m_sharing_user_isSet = !json[QString("sharingUser")].isNull() && m_sharing_user_isValid;

    m_shortcut_details_isValid = ::OpenAPI::fromJsonValue(m_shortcut_details, json[QString("shortcutDetails")]);
    m_shortcut_details_isSet = !json[QString("shortcutDetails")].isNull() && m_shortcut_details_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_spaces_isValid = ::OpenAPI::fromJsonValue(m_spaces, json[QString("spaces")]);
    m_spaces_isSet = !json[QString("spaces")].isNull() && m_spaces_isValid;

    m_starred_isValid = ::OpenAPI::fromJsonValue(m_starred, json[QString("starred")]);
    m_starred_isSet = !json[QString("starred")].isNull() && m_starred_isValid;

    m_team_drive_id_isValid = ::OpenAPI::fromJsonValue(m_team_drive_id, json[QString("teamDriveId")]);
    m_team_drive_id_isSet = !json[QString("teamDriveId")].isNull() && m_team_drive_id_isValid;

    m_thumbnail_link_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_link, json[QString("thumbnailLink")]);
    m_thumbnail_link_isSet = !json[QString("thumbnailLink")].isNull() && m_thumbnail_link_isValid;

    m_thumbnail_version_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_version, json[QString("thumbnailVersion")]);
    m_thumbnail_version_isSet = !json[QString("thumbnailVersion")].isNull() && m_thumbnail_version_isValid;

    m_trashed_isValid = ::OpenAPI::fromJsonValue(m_trashed, json[QString("trashed")]);
    m_trashed_isSet = !json[QString("trashed")].isNull() && m_trashed_isValid;

    m_trashed_time_isValid = ::OpenAPI::fromJsonValue(m_trashed_time, json[QString("trashedTime")]);
    m_trashed_time_isSet = !json[QString("trashedTime")].isNull() && m_trashed_time_isValid;

    m_trashing_user_isValid = ::OpenAPI::fromJsonValue(m_trashing_user, json[QString("trashingUser")]);
    m_trashing_user_isSet = !json[QString("trashingUser")].isNull() && m_trashing_user_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_video_media_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_media_metadata, json[QString("videoMediaMetadata")]);
    m_video_media_metadata_isSet = !json[QString("videoMediaMetadata")].isNull() && m_video_media_metadata_isValid;

    m_viewed_by_me_isValid = ::OpenAPI::fromJsonValue(m_viewed_by_me, json[QString("viewedByMe")]);
    m_viewed_by_me_isSet = !json[QString("viewedByMe")].isNull() && m_viewed_by_me_isValid;

    m_viewed_by_me_time_isValid = ::OpenAPI::fromJsonValue(m_viewed_by_me_time, json[QString("viewedByMeTime")]);
    m_viewed_by_me_time_isSet = !json[QString("viewedByMeTime")].isNull() && m_viewed_by_me_time_isValid;

    m_viewers_can_copy_content_isValid = ::OpenAPI::fromJsonValue(m_viewers_can_copy_content, json[QString("viewersCanCopyContent")]);
    m_viewers_can_copy_content_isSet = !json[QString("viewersCanCopyContent")].isNull() && m_viewers_can_copy_content_isValid;

    m_web_content_link_isValid = ::OpenAPI::fromJsonValue(m_web_content_link, json[QString("webContentLink")]);
    m_web_content_link_isSet = !json[QString("webContentLink")].isNull() && m_web_content_link_isValid;

    m_web_view_link_isValid = ::OpenAPI::fromJsonValue(m_web_view_link, json[QString("webViewLink")]);
    m_web_view_link_isSet = !json[QString("webViewLink")].isNull() && m_web_view_link_isValid;

    m_writers_can_share_isValid = ::OpenAPI::fromJsonValue(m_writers_can_share, json[QString("writersCanShare")]);
    m_writers_can_share_isSet = !json[QString("writersCanShare")].isNull() && m_writers_can_share_isValid;
}

QString OAIFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile::asJsonObject() const {
    QJsonObject obj;
    if (m_app_properties.size() > 0) {
        obj.insert(QString("appProperties"), ::OpenAPI::toJsonValue(m_app_properties));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_content_hints.isSet()) {
        obj.insert(QString("contentHints"), ::OpenAPI::toJsonValue(m_content_hints));
    }
    if (m_content_restrictions.size() > 0) {
        obj.insert(QString("contentRestrictions"), ::OpenAPI::toJsonValue(m_content_restrictions));
    }
    if (m_copy_requires_writer_permission_isSet) {
        obj.insert(QString("copyRequiresWriterPermission"), ::OpenAPI::toJsonValue(m_copy_requires_writer_permission));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_drive_id_isSet) {
        obj.insert(QString("driveId"), ::OpenAPI::toJsonValue(m_drive_id));
    }
    if (m_explicitly_trashed_isSet) {
        obj.insert(QString("explicitlyTrashed"), ::OpenAPI::toJsonValue(m_explicitly_trashed));
    }
    if (m_export_links.size() > 0) {
        obj.insert(QString("exportLinks"), ::OpenAPI::toJsonValue(m_export_links));
    }
    if (m_file_extension_isSet) {
        obj.insert(QString("fileExtension"), ::OpenAPI::toJsonValue(m_file_extension));
    }
    if (m_folder_color_rgb_isSet) {
        obj.insert(QString("folderColorRgb"), ::OpenAPI::toJsonValue(m_folder_color_rgb));
    }
    if (m_full_file_extension_isSet) {
        obj.insert(QString("fullFileExtension"), ::OpenAPI::toJsonValue(m_full_file_extension));
    }
    if (m_has_augmented_permissions_isSet) {
        obj.insert(QString("hasAugmentedPermissions"), ::OpenAPI::toJsonValue(m_has_augmented_permissions));
    }
    if (m_has_thumbnail_isSet) {
        obj.insert(QString("hasThumbnail"), ::OpenAPI::toJsonValue(m_has_thumbnail));
    }
    if (m_head_revision_id_isSet) {
        obj.insert(QString("headRevisionId"), ::OpenAPI::toJsonValue(m_head_revision_id));
    }
    if (m_icon_link_isSet) {
        obj.insert(QString("iconLink"), ::OpenAPI::toJsonValue(m_icon_link));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_media_metadata.isSet()) {
        obj.insert(QString("imageMediaMetadata"), ::OpenAPI::toJsonValue(m_image_media_metadata));
    }
    if (m_is_app_authorized_isSet) {
        obj.insert(QString("isAppAuthorized"), ::OpenAPI::toJsonValue(m_is_app_authorized));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_label_info.isSet()) {
        obj.insert(QString("labelInfo"), ::OpenAPI::toJsonValue(m_label_info));
    }
    if (m_last_modifying_user.isSet()) {
        obj.insert(QString("lastModifyingUser"), ::OpenAPI::toJsonValue(m_last_modifying_user));
    }
    if (m_link_share_metadata.isSet()) {
        obj.insert(QString("linkShareMetadata"), ::OpenAPI::toJsonValue(m_link_share_metadata));
    }
    if (m_md5_checksum_isSet) {
        obj.insert(QString("md5Checksum"), ::OpenAPI::toJsonValue(m_md5_checksum));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_modified_by_me_isSet) {
        obj.insert(QString("modifiedByMe"), ::OpenAPI::toJsonValue(m_modified_by_me));
    }
    if (m_modified_by_me_time_isSet) {
        obj.insert(QString("modifiedByMeTime"), ::OpenAPI::toJsonValue(m_modified_by_me_time));
    }
    if (m_modified_time_isSet) {
        obj.insert(QString("modifiedTime"), ::OpenAPI::toJsonValue(m_modified_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_original_filename_isSet) {
        obj.insert(QString("originalFilename"), ::OpenAPI::toJsonValue(m_original_filename));
    }
    if (m_owned_by_me_isSet) {
        obj.insert(QString("ownedByMe"), ::OpenAPI::toJsonValue(m_owned_by_me));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_parents.size() > 0) {
        obj.insert(QString("parents"), ::OpenAPI::toJsonValue(m_parents));
    }
    if (m_permission_ids.size() > 0) {
        obj.insert(QString("permissionIds"), ::OpenAPI::toJsonValue(m_permission_ids));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_quota_bytes_used_isSet) {
        obj.insert(QString("quotaBytesUsed"), ::OpenAPI::toJsonValue(m_quota_bytes_used));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resourceKey"), ::OpenAPI::toJsonValue(m_resource_key));
    }
    if (m_sha1_checksum_isSet) {
        obj.insert(QString("sha1Checksum"), ::OpenAPI::toJsonValue(m_sha1_checksum));
    }
    if (m_sha256_checksum_isSet) {
        obj.insert(QString("sha256Checksum"), ::OpenAPI::toJsonValue(m_sha256_checksum));
    }
    if (m_shared_isSet) {
        obj.insert(QString("shared"), ::OpenAPI::toJsonValue(m_shared));
    }
    if (m_shared_with_me_time_isSet) {
        obj.insert(QString("sharedWithMeTime"), ::OpenAPI::toJsonValue(m_shared_with_me_time));
    }
    if (m_sharing_user.isSet()) {
        obj.insert(QString("sharingUser"), ::OpenAPI::toJsonValue(m_sharing_user));
    }
    if (m_shortcut_details.isSet()) {
        obj.insert(QString("shortcutDetails"), ::OpenAPI::toJsonValue(m_shortcut_details));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_spaces.size() > 0) {
        obj.insert(QString("spaces"), ::OpenAPI::toJsonValue(m_spaces));
    }
    if (m_starred_isSet) {
        obj.insert(QString("starred"), ::OpenAPI::toJsonValue(m_starred));
    }
    if (m_team_drive_id_isSet) {
        obj.insert(QString("teamDriveId"), ::OpenAPI::toJsonValue(m_team_drive_id));
    }
    if (m_thumbnail_link_isSet) {
        obj.insert(QString("thumbnailLink"), ::OpenAPI::toJsonValue(m_thumbnail_link));
    }
    if (m_thumbnail_version_isSet) {
        obj.insert(QString("thumbnailVersion"), ::OpenAPI::toJsonValue(m_thumbnail_version));
    }
    if (m_trashed_isSet) {
        obj.insert(QString("trashed"), ::OpenAPI::toJsonValue(m_trashed));
    }
    if (m_trashed_time_isSet) {
        obj.insert(QString("trashedTime"), ::OpenAPI::toJsonValue(m_trashed_time));
    }
    if (m_trashing_user.isSet()) {
        obj.insert(QString("trashingUser"), ::OpenAPI::toJsonValue(m_trashing_user));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_video_media_metadata.isSet()) {
        obj.insert(QString("videoMediaMetadata"), ::OpenAPI::toJsonValue(m_video_media_metadata));
    }
    if (m_viewed_by_me_isSet) {
        obj.insert(QString("viewedByMe"), ::OpenAPI::toJsonValue(m_viewed_by_me));
    }
    if (m_viewed_by_me_time_isSet) {
        obj.insert(QString("viewedByMeTime"), ::OpenAPI::toJsonValue(m_viewed_by_me_time));
    }
    if (m_viewers_can_copy_content_isSet) {
        obj.insert(QString("viewersCanCopyContent"), ::OpenAPI::toJsonValue(m_viewers_can_copy_content));
    }
    if (m_web_content_link_isSet) {
        obj.insert(QString("webContentLink"), ::OpenAPI::toJsonValue(m_web_content_link));
    }
    if (m_web_view_link_isSet) {
        obj.insert(QString("webViewLink"), ::OpenAPI::toJsonValue(m_web_view_link));
    }
    if (m_writers_can_share_isSet) {
        obj.insert(QString("writersCanShare"), ::OpenAPI::toJsonValue(m_writers_can_share));
    }
    return obj;
}

QMap<QString, QString> OAIFile::getAppProperties() const {
    return m_app_properties;
}
void OAIFile::setAppProperties(const QMap<QString, QString> &app_properties) {
    m_app_properties = app_properties;
    m_app_properties_isSet = true;
}

bool OAIFile::is_app_properties_Set() const{
    return m_app_properties_isSet;
}

bool OAIFile::is_app_properties_Valid() const{
    return m_app_properties_isValid;
}

OAIFile_capabilities OAIFile::getCapabilities() const {
    return m_capabilities;
}
void OAIFile::setCapabilities(const OAIFile_capabilities &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIFile::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIFile::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIFile_contentHints OAIFile::getContentHints() const {
    return m_content_hints;
}
void OAIFile::setContentHints(const OAIFile_contentHints &content_hints) {
    m_content_hints = content_hints;
    m_content_hints_isSet = true;
}

bool OAIFile::is_content_hints_Set() const{
    return m_content_hints_isSet;
}

bool OAIFile::is_content_hints_Valid() const{
    return m_content_hints_isValid;
}

QList<OAIContentRestriction> OAIFile::getContentRestrictions() const {
    return m_content_restrictions;
}
void OAIFile::setContentRestrictions(const QList<OAIContentRestriction> &content_restrictions) {
    m_content_restrictions = content_restrictions;
    m_content_restrictions_isSet = true;
}

bool OAIFile::is_content_restrictions_Set() const{
    return m_content_restrictions_isSet;
}

bool OAIFile::is_content_restrictions_Valid() const{
    return m_content_restrictions_isValid;
}

bool OAIFile::isCopyRequiresWriterPermission() const {
    return m_copy_requires_writer_permission;
}
void OAIFile::setCopyRequiresWriterPermission(const bool &copy_requires_writer_permission) {
    m_copy_requires_writer_permission = copy_requires_writer_permission;
    m_copy_requires_writer_permission_isSet = true;
}

bool OAIFile::is_copy_requires_writer_permission_Set() const{
    return m_copy_requires_writer_permission_isSet;
}

bool OAIFile::is_copy_requires_writer_permission_Valid() const{
    return m_copy_requires_writer_permission_isValid;
}

QDateTime OAIFile::getCreatedTime() const {
    return m_created_time;
}
void OAIFile::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIFile::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIFile::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIFile::getDescription() const {
    return m_description;
}
void OAIFile::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFile::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFile::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFile::getDriveId() const {
    return m_drive_id;
}
void OAIFile::setDriveId(const QString &drive_id) {
    m_drive_id = drive_id;
    m_drive_id_isSet = true;
}

bool OAIFile::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAIFile::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

bool OAIFile::isExplicitlyTrashed() const {
    return m_explicitly_trashed;
}
void OAIFile::setExplicitlyTrashed(const bool &explicitly_trashed) {
    m_explicitly_trashed = explicitly_trashed;
    m_explicitly_trashed_isSet = true;
}

bool OAIFile::is_explicitly_trashed_Set() const{
    return m_explicitly_trashed_isSet;
}

bool OAIFile::is_explicitly_trashed_Valid() const{
    return m_explicitly_trashed_isValid;
}

QMap<QString, QString> OAIFile::getExportLinks() const {
    return m_export_links;
}
void OAIFile::setExportLinks(const QMap<QString, QString> &export_links) {
    m_export_links = export_links;
    m_export_links_isSet = true;
}

bool OAIFile::is_export_links_Set() const{
    return m_export_links_isSet;
}

bool OAIFile::is_export_links_Valid() const{
    return m_export_links_isValid;
}

QString OAIFile::getFileExtension() const {
    return m_file_extension;
}
void OAIFile::setFileExtension(const QString &file_extension) {
    m_file_extension = file_extension;
    m_file_extension_isSet = true;
}

bool OAIFile::is_file_extension_Set() const{
    return m_file_extension_isSet;
}

bool OAIFile::is_file_extension_Valid() const{
    return m_file_extension_isValid;
}

QString OAIFile::getFolderColorRgb() const {
    return m_folder_color_rgb;
}
void OAIFile::setFolderColorRgb(const QString &folder_color_rgb) {
    m_folder_color_rgb = folder_color_rgb;
    m_folder_color_rgb_isSet = true;
}

bool OAIFile::is_folder_color_rgb_Set() const{
    return m_folder_color_rgb_isSet;
}

bool OAIFile::is_folder_color_rgb_Valid() const{
    return m_folder_color_rgb_isValid;
}

QString OAIFile::getFullFileExtension() const {
    return m_full_file_extension;
}
void OAIFile::setFullFileExtension(const QString &full_file_extension) {
    m_full_file_extension = full_file_extension;
    m_full_file_extension_isSet = true;
}

bool OAIFile::is_full_file_extension_Set() const{
    return m_full_file_extension_isSet;
}

bool OAIFile::is_full_file_extension_Valid() const{
    return m_full_file_extension_isValid;
}

bool OAIFile::isHasAugmentedPermissions() const {
    return m_has_augmented_permissions;
}
void OAIFile::setHasAugmentedPermissions(const bool &has_augmented_permissions) {
    m_has_augmented_permissions = has_augmented_permissions;
    m_has_augmented_permissions_isSet = true;
}

bool OAIFile::is_has_augmented_permissions_Set() const{
    return m_has_augmented_permissions_isSet;
}

bool OAIFile::is_has_augmented_permissions_Valid() const{
    return m_has_augmented_permissions_isValid;
}

bool OAIFile::isHasThumbnail() const {
    return m_has_thumbnail;
}
void OAIFile::setHasThumbnail(const bool &has_thumbnail) {
    m_has_thumbnail = has_thumbnail;
    m_has_thumbnail_isSet = true;
}

bool OAIFile::is_has_thumbnail_Set() const{
    return m_has_thumbnail_isSet;
}

bool OAIFile::is_has_thumbnail_Valid() const{
    return m_has_thumbnail_isValid;
}

QString OAIFile::getHeadRevisionId() const {
    return m_head_revision_id;
}
void OAIFile::setHeadRevisionId(const QString &head_revision_id) {
    m_head_revision_id = head_revision_id;
    m_head_revision_id_isSet = true;
}

bool OAIFile::is_head_revision_id_Set() const{
    return m_head_revision_id_isSet;
}

bool OAIFile::is_head_revision_id_Valid() const{
    return m_head_revision_id_isValid;
}

QString OAIFile::getIconLink() const {
    return m_icon_link;
}
void OAIFile::setIconLink(const QString &icon_link) {
    m_icon_link = icon_link;
    m_icon_link_isSet = true;
}

bool OAIFile::is_icon_link_Set() const{
    return m_icon_link_isSet;
}

bool OAIFile::is_icon_link_Valid() const{
    return m_icon_link_isValid;
}

QString OAIFile::getId() const {
    return m_id;
}
void OAIFile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFile::is_id_Valid() const{
    return m_id_isValid;
}

OAIFile_imageMediaMetadata OAIFile::getImageMediaMetadata() const {
    return m_image_media_metadata;
}
void OAIFile::setImageMediaMetadata(const OAIFile_imageMediaMetadata &image_media_metadata) {
    m_image_media_metadata = image_media_metadata;
    m_image_media_metadata_isSet = true;
}

bool OAIFile::is_image_media_metadata_Set() const{
    return m_image_media_metadata_isSet;
}

bool OAIFile::is_image_media_metadata_Valid() const{
    return m_image_media_metadata_isValid;
}

bool OAIFile::isIsAppAuthorized() const {
    return m_is_app_authorized;
}
void OAIFile::setIsAppAuthorized(const bool &is_app_authorized) {
    m_is_app_authorized = is_app_authorized;
    m_is_app_authorized_isSet = true;
}

bool OAIFile::is_is_app_authorized_Set() const{
    return m_is_app_authorized_isSet;
}

bool OAIFile::is_is_app_authorized_Valid() const{
    return m_is_app_authorized_isValid;
}

QString OAIFile::getKind() const {
    return m_kind;
}
void OAIFile::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFile::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFile::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIFile_labelInfo OAIFile::getLabelInfo() const {
    return m_label_info;
}
void OAIFile::setLabelInfo(const OAIFile_labelInfo &label_info) {
    m_label_info = label_info;
    m_label_info_isSet = true;
}

bool OAIFile::is_label_info_Set() const{
    return m_label_info_isSet;
}

bool OAIFile::is_label_info_Valid() const{
    return m_label_info_isValid;
}

OAIUser OAIFile::getLastModifyingUser() const {
    return m_last_modifying_user;
}
void OAIFile::setLastModifyingUser(const OAIUser &last_modifying_user) {
    m_last_modifying_user = last_modifying_user;
    m_last_modifying_user_isSet = true;
}

bool OAIFile::is_last_modifying_user_Set() const{
    return m_last_modifying_user_isSet;
}

bool OAIFile::is_last_modifying_user_Valid() const{
    return m_last_modifying_user_isValid;
}

OAIFile_linkShareMetadata OAIFile::getLinkShareMetadata() const {
    return m_link_share_metadata;
}
void OAIFile::setLinkShareMetadata(const OAIFile_linkShareMetadata &link_share_metadata) {
    m_link_share_metadata = link_share_metadata;
    m_link_share_metadata_isSet = true;
}

bool OAIFile::is_link_share_metadata_Set() const{
    return m_link_share_metadata_isSet;
}

bool OAIFile::is_link_share_metadata_Valid() const{
    return m_link_share_metadata_isValid;
}

QString OAIFile::getMd5Checksum() const {
    return m_md5_checksum;
}
void OAIFile::setMd5Checksum(const QString &md5_checksum) {
    m_md5_checksum = md5_checksum;
    m_md5_checksum_isSet = true;
}

bool OAIFile::is_md5_checksum_Set() const{
    return m_md5_checksum_isSet;
}

bool OAIFile::is_md5_checksum_Valid() const{
    return m_md5_checksum_isValid;
}

QString OAIFile::getMimeType() const {
    return m_mime_type;
}
void OAIFile::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIFile::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIFile::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIFile::isModifiedByMe() const {
    return m_modified_by_me;
}
void OAIFile::setModifiedByMe(const bool &modified_by_me) {
    m_modified_by_me = modified_by_me;
    m_modified_by_me_isSet = true;
}

bool OAIFile::is_modified_by_me_Set() const{
    return m_modified_by_me_isSet;
}

bool OAIFile::is_modified_by_me_Valid() const{
    return m_modified_by_me_isValid;
}

QDateTime OAIFile::getModifiedByMeTime() const {
    return m_modified_by_me_time;
}
void OAIFile::setModifiedByMeTime(const QDateTime &modified_by_me_time) {
    m_modified_by_me_time = modified_by_me_time;
    m_modified_by_me_time_isSet = true;
}

bool OAIFile::is_modified_by_me_time_Set() const{
    return m_modified_by_me_time_isSet;
}

bool OAIFile::is_modified_by_me_time_Valid() const{
    return m_modified_by_me_time_isValid;
}

QDateTime OAIFile::getModifiedTime() const {
    return m_modified_time;
}
void OAIFile::setModifiedTime(const QDateTime &modified_time) {
    m_modified_time = modified_time;
    m_modified_time_isSet = true;
}

bool OAIFile::is_modified_time_Set() const{
    return m_modified_time_isSet;
}

bool OAIFile::is_modified_time_Valid() const{
    return m_modified_time_isValid;
}

QString OAIFile::getName() const {
    return m_name;
}
void OAIFile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFile::getOriginalFilename() const {
    return m_original_filename;
}
void OAIFile::setOriginalFilename(const QString &original_filename) {
    m_original_filename = original_filename;
    m_original_filename_isSet = true;
}

bool OAIFile::is_original_filename_Set() const{
    return m_original_filename_isSet;
}

bool OAIFile::is_original_filename_Valid() const{
    return m_original_filename_isValid;
}

bool OAIFile::isOwnedByMe() const {
    return m_owned_by_me;
}
void OAIFile::setOwnedByMe(const bool &owned_by_me) {
    m_owned_by_me = owned_by_me;
    m_owned_by_me_isSet = true;
}

bool OAIFile::is_owned_by_me_Set() const{
    return m_owned_by_me_isSet;
}

bool OAIFile::is_owned_by_me_Valid() const{
    return m_owned_by_me_isValid;
}

QList<OAIUser> OAIFile::getOwners() const {
    return m_owners;
}
void OAIFile::setOwners(const QList<OAIUser> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAIFile::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAIFile::is_owners_Valid() const{
    return m_owners_isValid;
}

QList<QString> OAIFile::getParents() const {
    return m_parents;
}
void OAIFile::setParents(const QList<QString> &parents) {
    m_parents = parents;
    m_parents_isSet = true;
}

bool OAIFile::is_parents_Set() const{
    return m_parents_isSet;
}

bool OAIFile::is_parents_Valid() const{
    return m_parents_isValid;
}

QList<QString> OAIFile::getPermissionIds() const {
    return m_permission_ids;
}
void OAIFile::setPermissionIds(const QList<QString> &permission_ids) {
    m_permission_ids = permission_ids;
    m_permission_ids_isSet = true;
}

bool OAIFile::is_permission_ids_Set() const{
    return m_permission_ids_isSet;
}

bool OAIFile::is_permission_ids_Valid() const{
    return m_permission_ids_isValid;
}

QList<OAIPermission> OAIFile::getPermissions() const {
    return m_permissions;
}
void OAIFile::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIFile::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIFile::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QMap<QString, QString> OAIFile::getProperties() const {
    return m_properties;
}
void OAIFile::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIFile::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIFile::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIFile::getQuotaBytesUsed() const {
    return m_quota_bytes_used;
}
void OAIFile::setQuotaBytesUsed(const QString &quota_bytes_used) {
    m_quota_bytes_used = quota_bytes_used;
    m_quota_bytes_used_isSet = true;
}

bool OAIFile::is_quota_bytes_used_Set() const{
    return m_quota_bytes_used_isSet;
}

bool OAIFile::is_quota_bytes_used_Valid() const{
    return m_quota_bytes_used_isValid;
}

QString OAIFile::getResourceKey() const {
    return m_resource_key;
}
void OAIFile::setResourceKey(const QString &resource_key) {
    m_resource_key = resource_key;
    m_resource_key_isSet = true;
}

bool OAIFile::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIFile::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QString OAIFile::getSha1Checksum() const {
    return m_sha1_checksum;
}
void OAIFile::setSha1Checksum(const QString &sha1_checksum) {
    m_sha1_checksum = sha1_checksum;
    m_sha1_checksum_isSet = true;
}

bool OAIFile::is_sha1_checksum_Set() const{
    return m_sha1_checksum_isSet;
}

bool OAIFile::is_sha1_checksum_Valid() const{
    return m_sha1_checksum_isValid;
}

QString OAIFile::getSha256Checksum() const {
    return m_sha256_checksum;
}
void OAIFile::setSha256Checksum(const QString &sha256_checksum) {
    m_sha256_checksum = sha256_checksum;
    m_sha256_checksum_isSet = true;
}

bool OAIFile::is_sha256_checksum_Set() const{
    return m_sha256_checksum_isSet;
}

bool OAIFile::is_sha256_checksum_Valid() const{
    return m_sha256_checksum_isValid;
}

bool OAIFile::isShared() const {
    return m_shared;
}
void OAIFile::setShared(const bool &shared) {
    m_shared = shared;
    m_shared_isSet = true;
}

bool OAIFile::is_shared_Set() const{
    return m_shared_isSet;
}

bool OAIFile::is_shared_Valid() const{
    return m_shared_isValid;
}

QDateTime OAIFile::getSharedWithMeTime() const {
    return m_shared_with_me_time;
}
void OAIFile::setSharedWithMeTime(const QDateTime &shared_with_me_time) {
    m_shared_with_me_time = shared_with_me_time;
    m_shared_with_me_time_isSet = true;
}

bool OAIFile::is_shared_with_me_time_Set() const{
    return m_shared_with_me_time_isSet;
}

bool OAIFile::is_shared_with_me_time_Valid() const{
    return m_shared_with_me_time_isValid;
}

OAIUser OAIFile::getSharingUser() const {
    return m_sharing_user;
}
void OAIFile::setSharingUser(const OAIUser &sharing_user) {
    m_sharing_user = sharing_user;
    m_sharing_user_isSet = true;
}

bool OAIFile::is_sharing_user_Set() const{
    return m_sharing_user_isSet;
}

bool OAIFile::is_sharing_user_Valid() const{
    return m_sharing_user_isValid;
}

OAIFile_shortcutDetails OAIFile::getShortcutDetails() const {
    return m_shortcut_details;
}
void OAIFile::setShortcutDetails(const OAIFile_shortcutDetails &shortcut_details) {
    m_shortcut_details = shortcut_details;
    m_shortcut_details_isSet = true;
}

bool OAIFile::is_shortcut_details_Set() const{
    return m_shortcut_details_isSet;
}

bool OAIFile::is_shortcut_details_Valid() const{
    return m_shortcut_details_isValid;
}

QString OAIFile::getSize() const {
    return m_size;
}
void OAIFile::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFile::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFile::is_size_Valid() const{
    return m_size_isValid;
}

QList<QString> OAIFile::getSpaces() const {
    return m_spaces;
}
void OAIFile::setSpaces(const QList<QString> &spaces) {
    m_spaces = spaces;
    m_spaces_isSet = true;
}

bool OAIFile::is_spaces_Set() const{
    return m_spaces_isSet;
}

bool OAIFile::is_spaces_Valid() const{
    return m_spaces_isValid;
}

bool OAIFile::isStarred() const {
    return m_starred;
}
void OAIFile::setStarred(const bool &starred) {
    m_starred = starred;
    m_starred_isSet = true;
}

bool OAIFile::is_starred_Set() const{
    return m_starred_isSet;
}

bool OAIFile::is_starred_Valid() const{
    return m_starred_isValid;
}

QString OAIFile::getTeamDriveId() const {
    return m_team_drive_id;
}
void OAIFile::setTeamDriveId(const QString &team_drive_id) {
    m_team_drive_id = team_drive_id;
    m_team_drive_id_isSet = true;
}

bool OAIFile::is_team_drive_id_Set() const{
    return m_team_drive_id_isSet;
}

bool OAIFile::is_team_drive_id_Valid() const{
    return m_team_drive_id_isValid;
}

QString OAIFile::getThumbnailLink() const {
    return m_thumbnail_link;
}
void OAIFile::setThumbnailLink(const QString &thumbnail_link) {
    m_thumbnail_link = thumbnail_link;
    m_thumbnail_link_isSet = true;
}

bool OAIFile::is_thumbnail_link_Set() const{
    return m_thumbnail_link_isSet;
}

bool OAIFile::is_thumbnail_link_Valid() const{
    return m_thumbnail_link_isValid;
}

QString OAIFile::getThumbnailVersion() const {
    return m_thumbnail_version;
}
void OAIFile::setThumbnailVersion(const QString &thumbnail_version) {
    m_thumbnail_version = thumbnail_version;
    m_thumbnail_version_isSet = true;
}

bool OAIFile::is_thumbnail_version_Set() const{
    return m_thumbnail_version_isSet;
}

bool OAIFile::is_thumbnail_version_Valid() const{
    return m_thumbnail_version_isValid;
}

bool OAIFile::isTrashed() const {
    return m_trashed;
}
void OAIFile::setTrashed(const bool &trashed) {
    m_trashed = trashed;
    m_trashed_isSet = true;
}

bool OAIFile::is_trashed_Set() const{
    return m_trashed_isSet;
}

bool OAIFile::is_trashed_Valid() const{
    return m_trashed_isValid;
}

QDateTime OAIFile::getTrashedTime() const {
    return m_trashed_time;
}
void OAIFile::setTrashedTime(const QDateTime &trashed_time) {
    m_trashed_time = trashed_time;
    m_trashed_time_isSet = true;
}

bool OAIFile::is_trashed_time_Set() const{
    return m_trashed_time_isSet;
}

bool OAIFile::is_trashed_time_Valid() const{
    return m_trashed_time_isValid;
}

OAIUser OAIFile::getTrashingUser() const {
    return m_trashing_user;
}
void OAIFile::setTrashingUser(const OAIUser &trashing_user) {
    m_trashing_user = trashing_user;
    m_trashing_user_isSet = true;
}

bool OAIFile::is_trashing_user_Set() const{
    return m_trashing_user_isSet;
}

bool OAIFile::is_trashing_user_Valid() const{
    return m_trashing_user_isValid;
}

QString OAIFile::getVersion() const {
    return m_version;
}
void OAIFile::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFile::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFile::is_version_Valid() const{
    return m_version_isValid;
}

OAIFile_videoMediaMetadata OAIFile::getVideoMediaMetadata() const {
    return m_video_media_metadata;
}
void OAIFile::setVideoMediaMetadata(const OAIFile_videoMediaMetadata &video_media_metadata) {
    m_video_media_metadata = video_media_metadata;
    m_video_media_metadata_isSet = true;
}

bool OAIFile::is_video_media_metadata_Set() const{
    return m_video_media_metadata_isSet;
}

bool OAIFile::is_video_media_metadata_Valid() const{
    return m_video_media_metadata_isValid;
}

bool OAIFile::isViewedByMe() const {
    return m_viewed_by_me;
}
void OAIFile::setViewedByMe(const bool &viewed_by_me) {
    m_viewed_by_me = viewed_by_me;
    m_viewed_by_me_isSet = true;
}

bool OAIFile::is_viewed_by_me_Set() const{
    return m_viewed_by_me_isSet;
}

bool OAIFile::is_viewed_by_me_Valid() const{
    return m_viewed_by_me_isValid;
}

QDateTime OAIFile::getViewedByMeTime() const {
    return m_viewed_by_me_time;
}
void OAIFile::setViewedByMeTime(const QDateTime &viewed_by_me_time) {
    m_viewed_by_me_time = viewed_by_me_time;
    m_viewed_by_me_time_isSet = true;
}

bool OAIFile::is_viewed_by_me_time_Set() const{
    return m_viewed_by_me_time_isSet;
}

bool OAIFile::is_viewed_by_me_time_Valid() const{
    return m_viewed_by_me_time_isValid;
}

bool OAIFile::isViewersCanCopyContent() const {
    return m_viewers_can_copy_content;
}
void OAIFile::setViewersCanCopyContent(const bool &viewers_can_copy_content) {
    m_viewers_can_copy_content = viewers_can_copy_content;
    m_viewers_can_copy_content_isSet = true;
}

bool OAIFile::is_viewers_can_copy_content_Set() const{
    return m_viewers_can_copy_content_isSet;
}

bool OAIFile::is_viewers_can_copy_content_Valid() const{
    return m_viewers_can_copy_content_isValid;
}

QString OAIFile::getWebContentLink() const {
    return m_web_content_link;
}
void OAIFile::setWebContentLink(const QString &web_content_link) {
    m_web_content_link = web_content_link;
    m_web_content_link_isSet = true;
}

bool OAIFile::is_web_content_link_Set() const{
    return m_web_content_link_isSet;
}

bool OAIFile::is_web_content_link_Valid() const{
    return m_web_content_link_isValid;
}

QString OAIFile::getWebViewLink() const {
    return m_web_view_link;
}
void OAIFile::setWebViewLink(const QString &web_view_link) {
    m_web_view_link = web_view_link;
    m_web_view_link_isSet = true;
}

bool OAIFile::is_web_view_link_Set() const{
    return m_web_view_link_isSet;
}

bool OAIFile::is_web_view_link_Valid() const{
    return m_web_view_link_isValid;
}

bool OAIFile::isWritersCanShare() const {
    return m_writers_can_share;
}
void OAIFile::setWritersCanShare(const bool &writers_can_share) {
    m_writers_can_share = writers_can_share;
    m_writers_can_share_isSet = true;
}

bool OAIFile::is_writers_can_share_Set() const{
    return m_writers_can_share_isSet;
}

bool OAIFile::is_writers_can_share_Valid() const{
    return m_writers_can_share_isValid;
}

bool OAIFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_requires_writer_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicitly_trashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_color_rgb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_file_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_augmented_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_head_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_media_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_app_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modifying_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_share_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_by_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_by_me_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owned_by_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha1_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha256_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_with_me_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sharing_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shortcut_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashing_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_media_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewed_by_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewed_by_me_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewers_can_copy_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_content_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_view_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_writers_can_share_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
