/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApp.h
 *
 * The &#x60;apps&#x60; resource provides a list of apps that a user has installed, with information about each app&#39;s supported MIME types, file extensions, and other details. Some resource methods (such as &#x60;apps.get&#x60;) require an &#x60;appId&#x60;. Use the &#x60;apps.list&#x60; method to retrieve the ID for an installed application.
 */

#ifndef OAIApp_H
#define OAIApp_H

#include <QJsonObject>

#include "OAIAppIcons.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAppIcons;

class OAIApp : public OAIObject {
public:
    OAIApp();
    OAIApp(QString json);
    ~OAIApp() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAuthorized() const;
    void setAuthorized(const bool &authorized);
    bool is_authorized_Set() const;
    bool is_authorized_Valid() const;

    QString getCreateInFolderTemplate() const;
    void setCreateInFolderTemplate(const QString &create_in_folder_template);
    bool is_create_in_folder_template_Set() const;
    bool is_create_in_folder_template_Valid() const;

    QString getCreateUrl() const;
    void setCreateUrl(const QString &create_url);
    bool is_create_url_Set() const;
    bool is_create_url_Valid() const;

    bool isHasDriveWideScope() const;
    void setHasDriveWideScope(const bool &has_drive_wide_scope);
    bool is_has_drive_wide_scope_Set() const;
    bool is_has_drive_wide_scope_Valid() const;

    QList<OAIAppIcons> getIcons() const;
    void setIcons(const QList<OAIAppIcons> &icons);
    bool is_icons_Set() const;
    bool is_icons_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInstalled() const;
    void setInstalled(const bool &installed);
    bool is_installed_Set() const;
    bool is_installed_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getLongDescription() const;
    void setLongDescription(const QString &long_description);
    bool is_long_description_Set() const;
    bool is_long_description_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getObjectType() const;
    void setObjectType(const QString &object_type);
    bool is_object_type_Set() const;
    bool is_object_type_Valid() const;

    QString getOpenUrlTemplate() const;
    void setOpenUrlTemplate(const QString &open_url_template);
    bool is_open_url_template_Set() const;
    bool is_open_url_template_Valid() const;

    QList<QString> getPrimaryFileExtensions() const;
    void setPrimaryFileExtensions(const QList<QString> &primary_file_extensions);
    bool is_primary_file_extensions_Set() const;
    bool is_primary_file_extensions_Valid() const;

    QList<QString> getPrimaryMimeTypes() const;
    void setPrimaryMimeTypes(const QList<QString> &primary_mime_types);
    bool is_primary_mime_types_Set() const;
    bool is_primary_mime_types_Valid() const;

    QString getProductId() const;
    void setProductId(const QString &product_id);
    bool is_product_id_Set() const;
    bool is_product_id_Valid() const;

    QString getProductUrl() const;
    void setProductUrl(const QString &product_url);
    bool is_product_url_Set() const;
    bool is_product_url_Valid() const;

    QList<QString> getSecondaryFileExtensions() const;
    void setSecondaryFileExtensions(const QList<QString> &secondary_file_extensions);
    bool is_secondary_file_extensions_Set() const;
    bool is_secondary_file_extensions_Valid() const;

    QList<QString> getSecondaryMimeTypes() const;
    void setSecondaryMimeTypes(const QList<QString> &secondary_mime_types);
    bool is_secondary_mime_types_Set() const;
    bool is_secondary_mime_types_Valid() const;

    QString getShortDescription() const;
    void setShortDescription(const QString &short_description);
    bool is_short_description_Set() const;
    bool is_short_description_Valid() const;

    bool isSupportsCreate() const;
    void setSupportsCreate(const bool &supports_create);
    bool is_supports_create_Set() const;
    bool is_supports_create_Valid() const;

    bool isSupportsImport() const;
    void setSupportsImport(const bool &supports_import);
    bool is_supports_import_Set() const;
    bool is_supports_import_Valid() const;

    bool isSupportsMultiOpen() const;
    void setSupportsMultiOpen(const bool &supports_multi_open);
    bool is_supports_multi_open_Set() const;
    bool is_supports_multi_open_Valid() const;

    bool isSupportsOfflineCreate() const;
    void setSupportsOfflineCreate(const bool &supports_offline_create);
    bool is_supports_offline_create_Set() const;
    bool is_supports_offline_create_Valid() const;

    bool isUseByDefault() const;
    void setUseByDefault(const bool &use_by_default);
    bool is_use_by_default_Set() const;
    bool is_use_by_default_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_authorized;
    bool m_authorized_isSet;
    bool m_authorized_isValid;

    QString m_create_in_folder_template;
    bool m_create_in_folder_template_isSet;
    bool m_create_in_folder_template_isValid;

    QString m_create_url;
    bool m_create_url_isSet;
    bool m_create_url_isValid;

    bool m_has_drive_wide_scope;
    bool m_has_drive_wide_scope_isSet;
    bool m_has_drive_wide_scope_isValid;

    QList<OAIAppIcons> m_icons;
    bool m_icons_isSet;
    bool m_icons_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_installed;
    bool m_installed_isSet;
    bool m_installed_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_long_description;
    bool m_long_description_isSet;
    bool m_long_description_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_object_type;
    bool m_object_type_isSet;
    bool m_object_type_isValid;

    QString m_open_url_template;
    bool m_open_url_template_isSet;
    bool m_open_url_template_isValid;

    QList<QString> m_primary_file_extensions;
    bool m_primary_file_extensions_isSet;
    bool m_primary_file_extensions_isValid;

    QList<QString> m_primary_mime_types;
    bool m_primary_mime_types_isSet;
    bool m_primary_mime_types_isValid;

    QString m_product_id;
    bool m_product_id_isSet;
    bool m_product_id_isValid;

    QString m_product_url;
    bool m_product_url_isSet;
    bool m_product_url_isValid;

    QList<QString> m_secondary_file_extensions;
    bool m_secondary_file_extensions_isSet;
    bool m_secondary_file_extensions_isValid;

    QList<QString> m_secondary_mime_types;
    bool m_secondary_mime_types_isSet;
    bool m_secondary_mime_types_isValid;

    QString m_short_description;
    bool m_short_description_isSet;
    bool m_short_description_isValid;

    bool m_supports_create;
    bool m_supports_create_isSet;
    bool m_supports_create_isValid;

    bool m_supports_import;
    bool m_supports_import_isSet;
    bool m_supports_import_isValid;

    bool m_supports_multi_open;
    bool m_supports_multi_open_isSet;
    bool m_supports_multi_open_isValid;

    bool m_supports_offline_create;
    bool m_supports_offline_create_isSet;
    bool m_supports_offline_create_isValid;

    bool m_use_by_default;
    bool m_use_by_default_isSet;
    bool m_use_by_default_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApp)

#endif // OAIApp_H
