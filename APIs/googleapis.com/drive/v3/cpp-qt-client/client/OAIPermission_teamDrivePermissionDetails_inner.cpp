/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission_teamDrivePermissionDetails_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission_teamDrivePermissionDetails_inner::OAIPermission_teamDrivePermissionDetails_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission_teamDrivePermissionDetails_inner::OAIPermission_teamDrivePermissionDetails_inner() {
    this->initializeModel();
}

OAIPermission_teamDrivePermissionDetails_inner::~OAIPermission_teamDrivePermissionDetails_inner() {}

void OAIPermission_teamDrivePermissionDetails_inner::initializeModel() {

    m_inherited_isSet = false;
    m_inherited_isValid = false;

    m_inherited_from_isSet = false;
    m_inherited_from_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_team_drive_permission_type_isSet = false;
    m_team_drive_permission_type_isValid = false;
}

void OAIPermission_teamDrivePermissionDetails_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission_teamDrivePermissionDetails_inner::fromJsonObject(QJsonObject json) {

    m_inherited_isValid = ::OpenAPI::fromJsonValue(m_inherited, json[QString("inherited")]);
    m_inherited_isSet = !json[QString("inherited")].isNull() && m_inherited_isValid;

    m_inherited_from_isValid = ::OpenAPI::fromJsonValue(m_inherited_from, json[QString("inheritedFrom")]);
    m_inherited_from_isSet = !json[QString("inheritedFrom")].isNull() && m_inherited_from_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_team_drive_permission_type_isValid = ::OpenAPI::fromJsonValue(m_team_drive_permission_type, json[QString("teamDrivePermissionType")]);
    m_team_drive_permission_type_isSet = !json[QString("teamDrivePermissionType")].isNull() && m_team_drive_permission_type_isValid;
}

QString OAIPermission_teamDrivePermissionDetails_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission_teamDrivePermissionDetails_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_inherited_isSet) {
        obj.insert(QString("inherited"), ::OpenAPI::toJsonValue(m_inherited));
    }
    if (m_inherited_from_isSet) {
        obj.insert(QString("inheritedFrom"), ::OpenAPI::toJsonValue(m_inherited_from));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_team_drive_permission_type_isSet) {
        obj.insert(QString("teamDrivePermissionType"), ::OpenAPI::toJsonValue(m_team_drive_permission_type));
    }
    return obj;
}

bool OAIPermission_teamDrivePermissionDetails_inner::isInherited() const {
    return m_inherited;
}
void OAIPermission_teamDrivePermissionDetails_inner::setInherited(const bool &inherited) {
    m_inherited = inherited;
    m_inherited_isSet = true;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_inherited_Set() const{
    return m_inherited_isSet;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_inherited_Valid() const{
    return m_inherited_isValid;
}

QString OAIPermission_teamDrivePermissionDetails_inner::getInheritedFrom() const {
    return m_inherited_from;
}
void OAIPermission_teamDrivePermissionDetails_inner::setInheritedFrom(const QString &inherited_from) {
    m_inherited_from = inherited_from;
    m_inherited_from_isSet = true;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_inherited_from_Set() const{
    return m_inherited_from_isSet;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_inherited_from_Valid() const{
    return m_inherited_from_isValid;
}

QString OAIPermission_teamDrivePermissionDetails_inner::getRole() const {
    return m_role;
}
void OAIPermission_teamDrivePermissionDetails_inner::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIPermission_teamDrivePermissionDetails_inner::getTeamDrivePermissionType() const {
    return m_team_drive_permission_type;
}
void OAIPermission_teamDrivePermissionDetails_inner::setTeamDrivePermissionType(const QString &team_drive_permission_type) {
    m_team_drive_permission_type = team_drive_permission_type;
    m_team_drive_permission_type_isSet = true;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_team_drive_permission_type_Set() const{
    return m_team_drive_permission_type_isSet;
}

bool OAIPermission_teamDrivePermissionDetails_inner::is_team_drive_permission_type_Valid() const{
    return m_team_drive_permission_type_isValid;
}

bool OAIPermission_teamDrivePermissionDetails_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inherited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherited_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_permission_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission_teamDrivePermissionDetails_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
