/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Capabilities the current user has on this shared drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveCapabilities {
  public static final String SERIALIZED_NAME_CAN_ADD_CHILDREN = "canAddChildren";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_CHILDREN)
  private Boolean canAddChildren;

  public static final String SERIALIZED_NAME_CAN_CHANGE_COPY_REQUIRES_WRITER_PERMISSION_RESTRICTION = "canChangeCopyRequiresWriterPermissionRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_COPY_REQUIRES_WRITER_PERMISSION_RESTRICTION)
  private Boolean canChangeCopyRequiresWriterPermissionRestriction;

  public static final String SERIALIZED_NAME_CAN_CHANGE_DOMAIN_USERS_ONLY_RESTRICTION = "canChangeDomainUsersOnlyRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_DOMAIN_USERS_ONLY_RESTRICTION)
  private Boolean canChangeDomainUsersOnlyRestriction;

  public static final String SERIALIZED_NAME_CAN_CHANGE_DRIVE_BACKGROUND = "canChangeDriveBackground";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_DRIVE_BACKGROUND)
  private Boolean canChangeDriveBackground;

  public static final String SERIALIZED_NAME_CAN_CHANGE_DRIVE_MEMBERS_ONLY_RESTRICTION = "canChangeDriveMembersOnlyRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_DRIVE_MEMBERS_ONLY_RESTRICTION)
  private Boolean canChangeDriveMembersOnlyRestriction;

  public static final String SERIALIZED_NAME_CAN_CHANGE_SHARING_FOLDERS_REQUIRES_ORGANIZER_PERMISSION_RESTRICTION = "canChangeSharingFoldersRequiresOrganizerPermissionRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_SHARING_FOLDERS_REQUIRES_ORGANIZER_PERMISSION_RESTRICTION)
  private Boolean canChangeSharingFoldersRequiresOrganizerPermissionRestriction;

  public static final String SERIALIZED_NAME_CAN_COMMENT = "canComment";
  @SerializedName(SERIALIZED_NAME_CAN_COMMENT)
  private Boolean canComment;

  public static final String SERIALIZED_NAME_CAN_COPY = "canCopy";
  @SerializedName(SERIALIZED_NAME_CAN_COPY)
  private Boolean canCopy;

  public static final String SERIALIZED_NAME_CAN_DELETE_CHILDREN = "canDeleteChildren";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_CHILDREN)
  private Boolean canDeleteChildren;

  public static final String SERIALIZED_NAME_CAN_DELETE_DRIVE = "canDeleteDrive";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_DRIVE)
  private Boolean canDeleteDrive;

  public static final String SERIALIZED_NAME_CAN_DOWNLOAD = "canDownload";
  @SerializedName(SERIALIZED_NAME_CAN_DOWNLOAD)
  private Boolean canDownload;

  public static final String SERIALIZED_NAME_CAN_EDIT = "canEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_LIST_CHILDREN = "canListChildren";
  @SerializedName(SERIALIZED_NAME_CAN_LIST_CHILDREN)
  private Boolean canListChildren;

  public static final String SERIALIZED_NAME_CAN_MANAGE_MEMBERS = "canManageMembers";
  @SerializedName(SERIALIZED_NAME_CAN_MANAGE_MEMBERS)
  private Boolean canManageMembers;

  public static final String SERIALIZED_NAME_CAN_READ_REVISIONS = "canReadRevisions";
  @SerializedName(SERIALIZED_NAME_CAN_READ_REVISIONS)
  private Boolean canReadRevisions;

  public static final String SERIALIZED_NAME_CAN_RENAME = "canRename";
  @SerializedName(SERIALIZED_NAME_CAN_RENAME)
  private Boolean canRename;

  public static final String SERIALIZED_NAME_CAN_RENAME_DRIVE = "canRenameDrive";
  @SerializedName(SERIALIZED_NAME_CAN_RENAME_DRIVE)
  private Boolean canRenameDrive;

  public static final String SERIALIZED_NAME_CAN_RESET_DRIVE_RESTRICTIONS = "canResetDriveRestrictions";
  @SerializedName(SERIALIZED_NAME_CAN_RESET_DRIVE_RESTRICTIONS)
  private Boolean canResetDriveRestrictions;

  public static final String SERIALIZED_NAME_CAN_SHARE = "canShare";
  @SerializedName(SERIALIZED_NAME_CAN_SHARE)
  private Boolean canShare;

  public static final String SERIALIZED_NAME_CAN_TRASH_CHILDREN = "canTrashChildren";
  @SerializedName(SERIALIZED_NAME_CAN_TRASH_CHILDREN)
  private Boolean canTrashChildren;

  public DriveCapabilities() {
  }

  public DriveCapabilities canAddChildren(Boolean canAddChildren) {
    this.canAddChildren = canAddChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can add children to folders in this shared drive.
   * @return canAddChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanAddChildren() {
    return canAddChildren;
  }

  public void setCanAddChildren(Boolean canAddChildren) {
    this.canAddChildren = canAddChildren;
  }


  public DriveCapabilities canChangeCopyRequiresWriterPermissionRestriction(Boolean canChangeCopyRequiresWriterPermissionRestriction) {
    this.canChangeCopyRequiresWriterPermissionRestriction = canChangeCopyRequiresWriterPermissionRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can change the &#x60;copyRequiresWriterPermission&#x60; restriction of this shared drive.
   * @return canChangeCopyRequiresWriterPermissionRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeCopyRequiresWriterPermissionRestriction() {
    return canChangeCopyRequiresWriterPermissionRestriction;
  }

  public void setCanChangeCopyRequiresWriterPermissionRestriction(Boolean canChangeCopyRequiresWriterPermissionRestriction) {
    this.canChangeCopyRequiresWriterPermissionRestriction = canChangeCopyRequiresWriterPermissionRestriction;
  }


  public DriveCapabilities canChangeDomainUsersOnlyRestriction(Boolean canChangeDomainUsersOnlyRestriction) {
    this.canChangeDomainUsersOnlyRestriction = canChangeDomainUsersOnlyRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can change the &#x60;domainUsersOnly&#x60; restriction of this shared drive.
   * @return canChangeDomainUsersOnlyRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeDomainUsersOnlyRestriction() {
    return canChangeDomainUsersOnlyRestriction;
  }

  public void setCanChangeDomainUsersOnlyRestriction(Boolean canChangeDomainUsersOnlyRestriction) {
    this.canChangeDomainUsersOnlyRestriction = canChangeDomainUsersOnlyRestriction;
  }


  public DriveCapabilities canChangeDriveBackground(Boolean canChangeDriveBackground) {
    this.canChangeDriveBackground = canChangeDriveBackground;
    return this;
  }

  /**
   * Output only. Whether the current user can change the background of this shared drive.
   * @return canChangeDriveBackground
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeDriveBackground() {
    return canChangeDriveBackground;
  }

  public void setCanChangeDriveBackground(Boolean canChangeDriveBackground) {
    this.canChangeDriveBackground = canChangeDriveBackground;
  }


  public DriveCapabilities canChangeDriveMembersOnlyRestriction(Boolean canChangeDriveMembersOnlyRestriction) {
    this.canChangeDriveMembersOnlyRestriction = canChangeDriveMembersOnlyRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can change the &#x60;driveMembersOnly&#x60; restriction of this shared drive.
   * @return canChangeDriveMembersOnlyRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeDriveMembersOnlyRestriction() {
    return canChangeDriveMembersOnlyRestriction;
  }

  public void setCanChangeDriveMembersOnlyRestriction(Boolean canChangeDriveMembersOnlyRestriction) {
    this.canChangeDriveMembersOnlyRestriction = canChangeDriveMembersOnlyRestriction;
  }


  public DriveCapabilities canChangeSharingFoldersRequiresOrganizerPermissionRestriction(Boolean canChangeSharingFoldersRequiresOrganizerPermissionRestriction) {
    this.canChangeSharingFoldersRequiresOrganizerPermissionRestriction = canChangeSharingFoldersRequiresOrganizerPermissionRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can change the &#x60;sharingFoldersRequiresOrganizerPermission&#x60; restriction of this shared drive.
   * @return canChangeSharingFoldersRequiresOrganizerPermissionRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeSharingFoldersRequiresOrganizerPermissionRestriction() {
    return canChangeSharingFoldersRequiresOrganizerPermissionRestriction;
  }

  public void setCanChangeSharingFoldersRequiresOrganizerPermissionRestriction(Boolean canChangeSharingFoldersRequiresOrganizerPermissionRestriction) {
    this.canChangeSharingFoldersRequiresOrganizerPermissionRestriction = canChangeSharingFoldersRequiresOrganizerPermissionRestriction;
  }


  public DriveCapabilities canComment(Boolean canComment) {
    this.canComment = canComment;
    return this;
  }

  /**
   * Output only. Whether the current user can comment on files in this shared drive.
   * @return canComment
   */
  @javax.annotation.Nullable
  public Boolean getCanComment() {
    return canComment;
  }

  public void setCanComment(Boolean canComment) {
    this.canComment = canComment;
  }


  public DriveCapabilities canCopy(Boolean canCopy) {
    this.canCopy = canCopy;
    return this;
  }

  /**
   * Output only. Whether the current user can copy files in this shared drive.
   * @return canCopy
   */
  @javax.annotation.Nullable
  public Boolean getCanCopy() {
    return canCopy;
  }

  public void setCanCopy(Boolean canCopy) {
    this.canCopy = canCopy;
  }


  public DriveCapabilities canDeleteChildren(Boolean canDeleteChildren) {
    this.canDeleteChildren = canDeleteChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can delete children from folders in this shared drive.
   * @return canDeleteChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteChildren() {
    return canDeleteChildren;
  }

  public void setCanDeleteChildren(Boolean canDeleteChildren) {
    this.canDeleteChildren = canDeleteChildren;
  }


  public DriveCapabilities canDeleteDrive(Boolean canDeleteDrive) {
    this.canDeleteDrive = canDeleteDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.
   * @return canDeleteDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteDrive() {
    return canDeleteDrive;
  }

  public void setCanDeleteDrive(Boolean canDeleteDrive) {
    this.canDeleteDrive = canDeleteDrive;
  }


  public DriveCapabilities canDownload(Boolean canDownload) {
    this.canDownload = canDownload;
    return this;
  }

  /**
   * Output only. Whether the current user can download files in this shared drive.
   * @return canDownload
   */
  @javax.annotation.Nullable
  public Boolean getCanDownload() {
    return canDownload;
  }

  public void setCanDownload(Boolean canDownload) {
    this.canDownload = canDownload;
  }


  public DriveCapabilities canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Output only. Whether the current user can edit files in this shared drive
   * @return canEdit
   */
  @javax.annotation.Nullable
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public DriveCapabilities canListChildren(Boolean canListChildren) {
    this.canListChildren = canListChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can list the children of folders in this shared drive.
   * @return canListChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanListChildren() {
    return canListChildren;
  }

  public void setCanListChildren(Boolean canListChildren) {
    this.canListChildren = canListChildren;
  }


  public DriveCapabilities canManageMembers(Boolean canManageMembers) {
    this.canManageMembers = canManageMembers;
    return this;
  }

  /**
   * Output only. Whether the current user can add members to this shared drive or remove them or change their role.
   * @return canManageMembers
   */
  @javax.annotation.Nullable
  public Boolean getCanManageMembers() {
    return canManageMembers;
  }

  public void setCanManageMembers(Boolean canManageMembers) {
    this.canManageMembers = canManageMembers;
  }


  public DriveCapabilities canReadRevisions(Boolean canReadRevisions) {
    this.canReadRevisions = canReadRevisions;
    return this;
  }

  /**
   * Output only. Whether the current user can read the revisions resource of files in this shared drive.
   * @return canReadRevisions
   */
  @javax.annotation.Nullable
  public Boolean getCanReadRevisions() {
    return canReadRevisions;
  }

  public void setCanReadRevisions(Boolean canReadRevisions) {
    this.canReadRevisions = canReadRevisions;
  }


  public DriveCapabilities canRename(Boolean canRename) {
    this.canRename = canRename;
    return this;
  }

  /**
   * Output only. Whether the current user can rename files or folders in this shared drive.
   * @return canRename
   */
  @javax.annotation.Nullable
  public Boolean getCanRename() {
    return canRename;
  }

  public void setCanRename(Boolean canRename) {
    this.canRename = canRename;
  }


  public DriveCapabilities canRenameDrive(Boolean canRenameDrive) {
    this.canRenameDrive = canRenameDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can rename this shared drive.
   * @return canRenameDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanRenameDrive() {
    return canRenameDrive;
  }

  public void setCanRenameDrive(Boolean canRenameDrive) {
    this.canRenameDrive = canRenameDrive;
  }


  public DriveCapabilities canResetDriveRestrictions(Boolean canResetDriveRestrictions) {
    this.canResetDriveRestrictions = canResetDriveRestrictions;
    return this;
  }

  /**
   * Output only. Whether the current user can reset the shared drive restrictions to defaults.
   * @return canResetDriveRestrictions
   */
  @javax.annotation.Nullable
  public Boolean getCanResetDriveRestrictions() {
    return canResetDriveRestrictions;
  }

  public void setCanResetDriveRestrictions(Boolean canResetDriveRestrictions) {
    this.canResetDriveRestrictions = canResetDriveRestrictions;
  }


  public DriveCapabilities canShare(Boolean canShare) {
    this.canShare = canShare;
    return this;
  }

  /**
   * Output only. Whether the current user can share files or folders in this shared drive.
   * @return canShare
   */
  @javax.annotation.Nullable
  public Boolean getCanShare() {
    return canShare;
  }

  public void setCanShare(Boolean canShare) {
    this.canShare = canShare;
  }


  public DriveCapabilities canTrashChildren(Boolean canTrashChildren) {
    this.canTrashChildren = canTrashChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can trash children from folders in this shared drive.
   * @return canTrashChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanTrashChildren() {
    return canTrashChildren;
  }

  public void setCanTrashChildren(Boolean canTrashChildren) {
    this.canTrashChildren = canTrashChildren;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveCapabilities driveCapabilities = (DriveCapabilities) o;
    return Objects.equals(this.canAddChildren, driveCapabilities.canAddChildren) &&
        Objects.equals(this.canChangeCopyRequiresWriterPermissionRestriction, driveCapabilities.canChangeCopyRequiresWriterPermissionRestriction) &&
        Objects.equals(this.canChangeDomainUsersOnlyRestriction, driveCapabilities.canChangeDomainUsersOnlyRestriction) &&
        Objects.equals(this.canChangeDriveBackground, driveCapabilities.canChangeDriveBackground) &&
        Objects.equals(this.canChangeDriveMembersOnlyRestriction, driveCapabilities.canChangeDriveMembersOnlyRestriction) &&
        Objects.equals(this.canChangeSharingFoldersRequiresOrganizerPermissionRestriction, driveCapabilities.canChangeSharingFoldersRequiresOrganizerPermissionRestriction) &&
        Objects.equals(this.canComment, driveCapabilities.canComment) &&
        Objects.equals(this.canCopy, driveCapabilities.canCopy) &&
        Objects.equals(this.canDeleteChildren, driveCapabilities.canDeleteChildren) &&
        Objects.equals(this.canDeleteDrive, driveCapabilities.canDeleteDrive) &&
        Objects.equals(this.canDownload, driveCapabilities.canDownload) &&
        Objects.equals(this.canEdit, driveCapabilities.canEdit) &&
        Objects.equals(this.canListChildren, driveCapabilities.canListChildren) &&
        Objects.equals(this.canManageMembers, driveCapabilities.canManageMembers) &&
        Objects.equals(this.canReadRevisions, driveCapabilities.canReadRevisions) &&
        Objects.equals(this.canRename, driveCapabilities.canRename) &&
        Objects.equals(this.canRenameDrive, driveCapabilities.canRenameDrive) &&
        Objects.equals(this.canResetDriveRestrictions, driveCapabilities.canResetDriveRestrictions) &&
        Objects.equals(this.canShare, driveCapabilities.canShare) &&
        Objects.equals(this.canTrashChildren, driveCapabilities.canTrashChildren);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAddChildren, canChangeCopyRequiresWriterPermissionRestriction, canChangeDomainUsersOnlyRestriction, canChangeDriveBackground, canChangeDriveMembersOnlyRestriction, canChangeSharingFoldersRequiresOrganizerPermissionRestriction, canComment, canCopy, canDeleteChildren, canDeleteDrive, canDownload, canEdit, canListChildren, canManageMembers, canReadRevisions, canRename, canRenameDrive, canResetDriveRestrictions, canShare, canTrashChildren);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveCapabilities {\n");
    sb.append("    canAddChildren: ").append(toIndentedString(canAddChildren)).append("\n");
    sb.append("    canChangeCopyRequiresWriterPermissionRestriction: ").append(toIndentedString(canChangeCopyRequiresWriterPermissionRestriction)).append("\n");
    sb.append("    canChangeDomainUsersOnlyRestriction: ").append(toIndentedString(canChangeDomainUsersOnlyRestriction)).append("\n");
    sb.append("    canChangeDriveBackground: ").append(toIndentedString(canChangeDriveBackground)).append("\n");
    sb.append("    canChangeDriveMembersOnlyRestriction: ").append(toIndentedString(canChangeDriveMembersOnlyRestriction)).append("\n");
    sb.append("    canChangeSharingFoldersRequiresOrganizerPermissionRestriction: ").append(toIndentedString(canChangeSharingFoldersRequiresOrganizerPermissionRestriction)).append("\n");
    sb.append("    canComment: ").append(toIndentedString(canComment)).append("\n");
    sb.append("    canCopy: ").append(toIndentedString(canCopy)).append("\n");
    sb.append("    canDeleteChildren: ").append(toIndentedString(canDeleteChildren)).append("\n");
    sb.append("    canDeleteDrive: ").append(toIndentedString(canDeleteDrive)).append("\n");
    sb.append("    canDownload: ").append(toIndentedString(canDownload)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canListChildren: ").append(toIndentedString(canListChildren)).append("\n");
    sb.append("    canManageMembers: ").append(toIndentedString(canManageMembers)).append("\n");
    sb.append("    canReadRevisions: ").append(toIndentedString(canReadRevisions)).append("\n");
    sb.append("    canRename: ").append(toIndentedString(canRename)).append("\n");
    sb.append("    canRenameDrive: ").append(toIndentedString(canRenameDrive)).append("\n");
    sb.append("    canResetDriveRestrictions: ").append(toIndentedString(canResetDriveRestrictions)).append("\n");
    sb.append("    canShare: ").append(toIndentedString(canShare)).append("\n");
    sb.append("    canTrashChildren: ").append(toIndentedString(canTrashChildren)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canAddChildren");
    openapiFields.add("canChangeCopyRequiresWriterPermissionRestriction");
    openapiFields.add("canChangeDomainUsersOnlyRestriction");
    openapiFields.add("canChangeDriveBackground");
    openapiFields.add("canChangeDriveMembersOnlyRestriction");
    openapiFields.add("canChangeSharingFoldersRequiresOrganizerPermissionRestriction");
    openapiFields.add("canComment");
    openapiFields.add("canCopy");
    openapiFields.add("canDeleteChildren");
    openapiFields.add("canDeleteDrive");
    openapiFields.add("canDownload");
    openapiFields.add("canEdit");
    openapiFields.add("canListChildren");
    openapiFields.add("canManageMembers");
    openapiFields.add("canReadRevisions");
    openapiFields.add("canRename");
    openapiFields.add("canRenameDrive");
    openapiFields.add("canResetDriveRestrictions");
    openapiFields.add("canShare");
    openapiFields.add("canTrashChildren");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveCapabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveCapabilities is not found in the empty JSON string", DriveCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveCapabilities>() {
           @Override
           public void write(JsonWriter out, DriveCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveCapabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveCapabilities
   * @throws IOException if the JSON string is invalid with respect to DriveCapabilities
   */
  public static DriveCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveCapabilities.class);
  }

  /**
   * Convert an instance of DriveCapabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

