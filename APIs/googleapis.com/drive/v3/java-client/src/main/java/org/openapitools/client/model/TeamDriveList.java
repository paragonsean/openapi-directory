/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TeamDrive;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of Team Drives.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TeamDriveList {
  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#teamDriveList";

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_TEAM_DRIVES = "teamDrives";
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVES)
  private List<TeamDrive> teamDrives = new ArrayList<>();

  public TeamDriveList() {
  }

  public TeamDriveList kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;drive#teamDriveList\&quot;&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public TeamDriveList nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * The page token for the next page of Team Drives. This will be absent if the end of the Team Drives list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public TeamDriveList teamDrives(List<TeamDrive> teamDrives) {
    this.teamDrives = teamDrives;
    return this;
  }

  public TeamDriveList addTeamDrivesItem(TeamDrive teamDrivesItem) {
    if (this.teamDrives == null) {
      this.teamDrives = new ArrayList<>();
    }
    this.teamDrives.add(teamDrivesItem);
    return this;
  }

  /**
   * The list of Team Drives. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.
   * @return teamDrives
   */
  @javax.annotation.Nullable
  public List<TeamDrive> getTeamDrives() {
    return teamDrives;
  }

  public void setTeamDrives(List<TeamDrive> teamDrives) {
    this.teamDrives = teamDrives;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamDriveList teamDriveList = (TeamDriveList) o;
    return Objects.equals(this.kind, teamDriveList.kind) &&
        Objects.equals(this.nextPageToken, teamDriveList.nextPageToken) &&
        Objects.equals(this.teamDrives, teamDriveList.teamDrives);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kind, nextPageToken, teamDrives);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamDriveList {\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    teamDrives: ").append(toIndentedString(teamDrives)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("kind");
    openapiFields.add("nextPageToken");
    openapiFields.add("teamDrives");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TeamDriveList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TeamDriveList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TeamDriveList is not found in the empty JSON string", TeamDriveList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TeamDriveList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TeamDriveList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("teamDrives") != null && !jsonObj.get("teamDrives").isJsonNull()) {
        JsonArray jsonArrayteamDrives = jsonObj.getAsJsonArray("teamDrives");
        if (jsonArrayteamDrives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teamDrives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teamDrives` to be an array in the JSON string but got `%s`", jsonObj.get("teamDrives").toString()));
          }

          // validate the optional field `teamDrives` (array)
          for (int i = 0; i < jsonArrayteamDrives.size(); i++) {
            TeamDrive.validateJsonElement(jsonArrayteamDrives.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TeamDriveList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TeamDriveList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TeamDriveList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TeamDriveList.class));

       return (TypeAdapter<T>) new TypeAdapter<TeamDriveList>() {
           @Override
           public void write(JsonWriter out, TeamDriveList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TeamDriveList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TeamDriveList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TeamDriveList
   * @throws IOException if the JSON string is invalid with respect to TeamDriveList
   */
  public static TeamDriveList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TeamDriveList.class);
  }

  /**
   * Convert an instance of TeamDriveList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

