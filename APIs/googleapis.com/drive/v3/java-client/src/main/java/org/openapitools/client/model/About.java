/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AboutDriveThemesInner;
import org.openapitools.client.model.AboutStorageQuota;
import org.openapitools.client.model.AboutTeamDriveThemesInner;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the user, the user&#39;s Drive, and system capabilities.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class About {
  public static final String SERIALIZED_NAME_APP_INSTALLED = "appInstalled";
  @SerializedName(SERIALIZED_NAME_APP_INSTALLED)
  private Boolean appInstalled;

  public static final String SERIALIZED_NAME_CAN_CREATE_DRIVES = "canCreateDrives";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_DRIVES)
  private Boolean canCreateDrives;

  public static final String SERIALIZED_NAME_CAN_CREATE_TEAM_DRIVES = "canCreateTeamDrives";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_TEAM_DRIVES)
  private Boolean canCreateTeamDrives;

  public static final String SERIALIZED_NAME_DRIVE_THEMES = "driveThemes";
  @SerializedName(SERIALIZED_NAME_DRIVE_THEMES)
  private List<AboutDriveThemesInner> driveThemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPORT_FORMATS = "exportFormats";
  @SerializedName(SERIALIZED_NAME_EXPORT_FORMATS)
  private Map<String, List<String>> exportFormats = new HashMap<>();

  public static final String SERIALIZED_NAME_FOLDER_COLOR_PALETTE = "folderColorPalette";
  @SerializedName(SERIALIZED_NAME_FOLDER_COLOR_PALETTE)
  private List<String> folderColorPalette = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPORT_FORMATS = "importFormats";
  @SerializedName(SERIALIZED_NAME_IMPORT_FORMATS)
  private Map<String, List<String>> importFormats = new HashMap<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#about";

  public static final String SERIALIZED_NAME_MAX_IMPORT_SIZES = "maxImportSizes";
  @SerializedName(SERIALIZED_NAME_MAX_IMPORT_SIZES)
  private Map<String, String> maxImportSizes = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_UPLOAD_SIZE = "maxUploadSize";
  @SerializedName(SERIALIZED_NAME_MAX_UPLOAD_SIZE)
  private String maxUploadSize;

  public static final String SERIALIZED_NAME_STORAGE_QUOTA = "storageQuota";
  @SerializedName(SERIALIZED_NAME_STORAGE_QUOTA)
  private AboutStorageQuota storageQuota;

  public static final String SERIALIZED_NAME_TEAM_DRIVE_THEMES = "teamDriveThemes";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE_THEMES)
  private List<AboutTeamDriveThemesInner> teamDriveThemes = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public About() {
  }

  public About appInstalled(Boolean appInstalled) {
    this.appInstalled = appInstalled;
    return this;
  }

  /**
   * Whether the user has installed the requesting app.
   * @return appInstalled
   */
  @javax.annotation.Nullable
  public Boolean getAppInstalled() {
    return appInstalled;
  }

  public void setAppInstalled(Boolean appInstalled) {
    this.appInstalled = appInstalled;
  }


  public About canCreateDrives(Boolean canCreateDrives) {
    this.canCreateDrives = canCreateDrives;
    return this;
  }

  /**
   * Whether the user can create shared drives.
   * @return canCreateDrives
   */
  @javax.annotation.Nullable
  public Boolean getCanCreateDrives() {
    return canCreateDrives;
  }

  public void setCanCreateDrives(Boolean canCreateDrives) {
    this.canCreateDrives = canCreateDrives;
  }


  @Deprecated
  public About canCreateTeamDrives(Boolean canCreateTeamDrives) {
    this.canCreateTeamDrives = canCreateTeamDrives;
    return this;
  }

  /**
   * Deprecated: Use &#x60;canCreateDrives&#x60; instead.
   * @return canCreateTeamDrives
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanCreateTeamDrives() {
    return canCreateTeamDrives;
  }

  @Deprecated
  public void setCanCreateTeamDrives(Boolean canCreateTeamDrives) {
    this.canCreateTeamDrives = canCreateTeamDrives;
  }


  public About driveThemes(List<AboutDriveThemesInner> driveThemes) {
    this.driveThemes = driveThemes;
    return this;
  }

  public About addDriveThemesItem(AboutDriveThemesInner driveThemesItem) {
    if (this.driveThemes == null) {
      this.driveThemes = new ArrayList<>();
    }
    this.driveThemes.add(driveThemesItem);
    return this;
  }

  /**
   * A list of themes that are supported for shared drives.
   * @return driveThemes
   */
  @javax.annotation.Nullable
  public List<AboutDriveThemesInner> getDriveThemes() {
    return driveThemes;
  }

  public void setDriveThemes(List<AboutDriveThemesInner> driveThemes) {
    this.driveThemes = driveThemes;
  }


  public About exportFormats(Map<String, List<String>> exportFormats) {
    this.exportFormats = exportFormats;
    return this;
  }

  public About putExportFormatsItem(String key, List<String> exportFormatsItem) {
    if (this.exportFormats == null) {
      this.exportFormats = new HashMap<>();
    }
    this.exportFormats.put(key, exportFormatsItem);
    return this;
  }

  /**
   * A map of source MIME type to possible targets for all supported exports.
   * @return exportFormats
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getExportFormats() {
    return exportFormats;
  }

  public void setExportFormats(Map<String, List<String>> exportFormats) {
    this.exportFormats = exportFormats;
  }


  public About folderColorPalette(List<String> folderColorPalette) {
    this.folderColorPalette = folderColorPalette;
    return this;
  }

  public About addFolderColorPaletteItem(String folderColorPaletteItem) {
    if (this.folderColorPalette == null) {
      this.folderColorPalette = new ArrayList<>();
    }
    this.folderColorPalette.add(folderColorPaletteItem);
    return this;
  }

  /**
   * The currently supported folder colors as RGB hex strings.
   * @return folderColorPalette
   */
  @javax.annotation.Nullable
  public List<String> getFolderColorPalette() {
    return folderColorPalette;
  }

  public void setFolderColorPalette(List<String> folderColorPalette) {
    this.folderColorPalette = folderColorPalette;
  }


  public About importFormats(Map<String, List<String>> importFormats) {
    this.importFormats = importFormats;
    return this;
  }

  public About putImportFormatsItem(String key, List<String> importFormatsItem) {
    if (this.importFormats == null) {
      this.importFormats = new HashMap<>();
    }
    this.importFormats.put(key, importFormatsItem);
    return this;
  }

  /**
   * A map of source MIME type to possible targets for all supported imports.
   * @return importFormats
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getImportFormats() {
    return importFormats;
  }

  public void setImportFormats(Map<String, List<String>> importFormats) {
    this.importFormats = importFormats;
  }


  public About kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Identifies what kind of resource this is. Value: the fixed string &#x60;\&quot;drive#about\&quot;&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public About maxImportSizes(Map<String, String> maxImportSizes) {
    this.maxImportSizes = maxImportSizes;
    return this;
  }

  public About putMaxImportSizesItem(String key, String maxImportSizesItem) {
    if (this.maxImportSizes == null) {
      this.maxImportSizes = new HashMap<>();
    }
    this.maxImportSizes.put(key, maxImportSizesItem);
    return this;
  }

  /**
   * A map of maximum import sizes by MIME type, in bytes.
   * @return maxImportSizes
   */
  @javax.annotation.Nullable
  public Map<String, String> getMaxImportSizes() {
    return maxImportSizes;
  }

  public void setMaxImportSizes(Map<String, String> maxImportSizes) {
    this.maxImportSizes = maxImportSizes;
  }


  public About maxUploadSize(String maxUploadSize) {
    this.maxUploadSize = maxUploadSize;
    return this;
  }

  /**
   * The maximum upload size in bytes.
   * @return maxUploadSize
   */
  @javax.annotation.Nullable
  public String getMaxUploadSize() {
    return maxUploadSize;
  }

  public void setMaxUploadSize(String maxUploadSize) {
    this.maxUploadSize = maxUploadSize;
  }


  public About storageQuota(AboutStorageQuota storageQuota) {
    this.storageQuota = storageQuota;
    return this;
  }

  /**
   * Get storageQuota
   * @return storageQuota
   */
  @javax.annotation.Nullable
  public AboutStorageQuota getStorageQuota() {
    return storageQuota;
  }

  public void setStorageQuota(AboutStorageQuota storageQuota) {
    this.storageQuota = storageQuota;
  }


  @Deprecated
  public About teamDriveThemes(List<AboutTeamDriveThemesInner> teamDriveThemes) {
    this.teamDriveThemes = teamDriveThemes;
    return this;
  }

  public About addTeamDriveThemesItem(AboutTeamDriveThemesInner teamDriveThemesItem) {
    if (this.teamDriveThemes == null) {
      this.teamDriveThemes = new ArrayList<>();
    }
    this.teamDriveThemes.add(teamDriveThemesItem);
    return this;
  }

  /**
   * Deprecated: Use &#x60;driveThemes&#x60; instead.
   * @return teamDriveThemes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<AboutTeamDriveThemesInner> getTeamDriveThemes() {
    return teamDriveThemes;
  }

  @Deprecated
  public void setTeamDriveThemes(List<AboutTeamDriveThemesInner> teamDriveThemes) {
    this.teamDriveThemes = teamDriveThemes;
  }


  public About user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    About about = (About) o;
    return Objects.equals(this.appInstalled, about.appInstalled) &&
        Objects.equals(this.canCreateDrives, about.canCreateDrives) &&
        Objects.equals(this.canCreateTeamDrives, about.canCreateTeamDrives) &&
        Objects.equals(this.driveThemes, about.driveThemes) &&
        Objects.equals(this.exportFormats, about.exportFormats) &&
        Objects.equals(this.folderColorPalette, about.folderColorPalette) &&
        Objects.equals(this.importFormats, about.importFormats) &&
        Objects.equals(this.kind, about.kind) &&
        Objects.equals(this.maxImportSizes, about.maxImportSizes) &&
        Objects.equals(this.maxUploadSize, about.maxUploadSize) &&
        Objects.equals(this.storageQuota, about.storageQuota) &&
        Objects.equals(this.teamDriveThemes, about.teamDriveThemes) &&
        Objects.equals(this.user, about.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstalled, canCreateDrives, canCreateTeamDrives, driveThemes, exportFormats, folderColorPalette, importFormats, kind, maxImportSizes, maxUploadSize, storageQuota, teamDriveThemes, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class About {\n");
    sb.append("    appInstalled: ").append(toIndentedString(appInstalled)).append("\n");
    sb.append("    canCreateDrives: ").append(toIndentedString(canCreateDrives)).append("\n");
    sb.append("    canCreateTeamDrives: ").append(toIndentedString(canCreateTeamDrives)).append("\n");
    sb.append("    driveThemes: ").append(toIndentedString(driveThemes)).append("\n");
    sb.append("    exportFormats: ").append(toIndentedString(exportFormats)).append("\n");
    sb.append("    folderColorPalette: ").append(toIndentedString(folderColorPalette)).append("\n");
    sb.append("    importFormats: ").append(toIndentedString(importFormats)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    maxImportSizes: ").append(toIndentedString(maxImportSizes)).append("\n");
    sb.append("    maxUploadSize: ").append(toIndentedString(maxUploadSize)).append("\n");
    sb.append("    storageQuota: ").append(toIndentedString(storageQuota)).append("\n");
    sb.append("    teamDriveThemes: ").append(toIndentedString(teamDriveThemes)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appInstalled");
    openapiFields.add("canCreateDrives");
    openapiFields.add("canCreateTeamDrives");
    openapiFields.add("driveThemes");
    openapiFields.add("exportFormats");
    openapiFields.add("folderColorPalette");
    openapiFields.add("importFormats");
    openapiFields.add("kind");
    openapiFields.add("maxImportSizes");
    openapiFields.add("maxUploadSize");
    openapiFields.add("storageQuota");
    openapiFields.add("teamDriveThemes");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to About
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!About.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in About is not found in the empty JSON string", About.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!About.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `About` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("driveThemes") != null && !jsonObj.get("driveThemes").isJsonNull()) {
        JsonArray jsonArraydriveThemes = jsonObj.getAsJsonArray("driveThemes");
        if (jsonArraydriveThemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("driveThemes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `driveThemes` to be an array in the JSON string but got `%s`", jsonObj.get("driveThemes").toString()));
          }

          // validate the optional field `driveThemes` (array)
          for (int i = 0; i < jsonArraydriveThemes.size(); i++) {
            AboutDriveThemesInner.validateJsonElement(jsonArraydriveThemes.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("folderColorPalette") != null && !jsonObj.get("folderColorPalette").isJsonNull() && !jsonObj.get("folderColorPalette").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `folderColorPalette` to be an array in the JSON string but got `%s`", jsonObj.get("folderColorPalette").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("maxUploadSize") != null && !jsonObj.get("maxUploadSize").isJsonNull()) && !jsonObj.get("maxUploadSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxUploadSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxUploadSize").toString()));
      }
      // validate the optional field `storageQuota`
      if (jsonObj.get("storageQuota") != null && !jsonObj.get("storageQuota").isJsonNull()) {
        AboutStorageQuota.validateJsonElement(jsonObj.get("storageQuota"));
      }
      if (jsonObj.get("teamDriveThemes") != null && !jsonObj.get("teamDriveThemes").isJsonNull()) {
        JsonArray jsonArrayteamDriveThemes = jsonObj.getAsJsonArray("teamDriveThemes");
        if (jsonArrayteamDriveThemes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("teamDriveThemes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `teamDriveThemes` to be an array in the JSON string but got `%s`", jsonObj.get("teamDriveThemes").toString()));
          }

          // validate the optional field `teamDriveThemes` (array)
          for (int i = 0; i < jsonArrayteamDriveThemes.size(); i++) {
            AboutTeamDriveThemesInner.validateJsonElement(jsonArrayteamDriveThemes.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!About.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'About' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<About> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(About.class));

       return (TypeAdapter<T>) new TypeAdapter<About>() {
           @Override
           public void write(JsonWriter out, About value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public About read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of About given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of About
   * @throws IOException if the JSON string is invalid with respect to About
   */
  public static About fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, About.class);
  }

  /**
   * Convert an instance of About to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

