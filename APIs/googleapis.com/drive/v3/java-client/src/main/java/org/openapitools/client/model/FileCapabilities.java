/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileCapabilities {
  public static final String SERIALIZED_NAME_CAN_ACCEPT_OWNERSHIP = "canAcceptOwnership";
  @SerializedName(SERIALIZED_NAME_CAN_ACCEPT_OWNERSHIP)
  private Boolean canAcceptOwnership;

  public static final String SERIALIZED_NAME_CAN_ADD_CHILDREN = "canAddChildren";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_CHILDREN)
  private Boolean canAddChildren;

  public static final String SERIALIZED_NAME_CAN_ADD_FOLDER_FROM_ANOTHER_DRIVE = "canAddFolderFromAnotherDrive";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_FOLDER_FROM_ANOTHER_DRIVE)
  private Boolean canAddFolderFromAnotherDrive;

  public static final String SERIALIZED_NAME_CAN_ADD_MY_DRIVE_PARENT = "canAddMyDriveParent";
  @SerializedName(SERIALIZED_NAME_CAN_ADD_MY_DRIVE_PARENT)
  private Boolean canAddMyDriveParent;

  public static final String SERIALIZED_NAME_CAN_CHANGE_COPY_REQUIRES_WRITER_PERMISSION = "canChangeCopyRequiresWriterPermission";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_COPY_REQUIRES_WRITER_PERMISSION)
  private Boolean canChangeCopyRequiresWriterPermission;

  public static final String SERIALIZED_NAME_CAN_CHANGE_SECURITY_UPDATE_ENABLED = "canChangeSecurityUpdateEnabled";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_SECURITY_UPDATE_ENABLED)
  private Boolean canChangeSecurityUpdateEnabled;

  public static final String SERIALIZED_NAME_CAN_CHANGE_VIEWERS_CAN_COPY_CONTENT = "canChangeViewersCanCopyContent";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_VIEWERS_CAN_COPY_CONTENT)
  private Boolean canChangeViewersCanCopyContent;

  public static final String SERIALIZED_NAME_CAN_COMMENT = "canComment";
  @SerializedName(SERIALIZED_NAME_CAN_COMMENT)
  private Boolean canComment;

  public static final String SERIALIZED_NAME_CAN_COPY = "canCopy";
  @SerializedName(SERIALIZED_NAME_CAN_COPY)
  private Boolean canCopy;

  public static final String SERIALIZED_NAME_CAN_DELETE = "canDelete";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE)
  private Boolean canDelete;

  public static final String SERIALIZED_NAME_CAN_DELETE_CHILDREN = "canDeleteChildren";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_CHILDREN)
  private Boolean canDeleteChildren;

  public static final String SERIALIZED_NAME_CAN_DOWNLOAD = "canDownload";
  @SerializedName(SERIALIZED_NAME_CAN_DOWNLOAD)
  private Boolean canDownload;

  public static final String SERIALIZED_NAME_CAN_EDIT = "canEdit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_LIST_CHILDREN = "canListChildren";
  @SerializedName(SERIALIZED_NAME_CAN_LIST_CHILDREN)
  private Boolean canListChildren;

  public static final String SERIALIZED_NAME_CAN_MODIFY_CONTENT = "canModifyContent";
  @SerializedName(SERIALIZED_NAME_CAN_MODIFY_CONTENT)
  private Boolean canModifyContent;

  public static final String SERIALIZED_NAME_CAN_MODIFY_CONTENT_RESTRICTION = "canModifyContentRestriction";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MODIFY_CONTENT_RESTRICTION)
  private Boolean canModifyContentRestriction;

  public static final String SERIALIZED_NAME_CAN_MODIFY_EDITOR_CONTENT_RESTRICTION = "canModifyEditorContentRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_MODIFY_EDITOR_CONTENT_RESTRICTION)
  private Boolean canModifyEditorContentRestriction;

  public static final String SERIALIZED_NAME_CAN_MODIFY_LABELS = "canModifyLabels";
  @SerializedName(SERIALIZED_NAME_CAN_MODIFY_LABELS)
  private Boolean canModifyLabels;

  public static final String SERIALIZED_NAME_CAN_MODIFY_OWNER_CONTENT_RESTRICTION = "canModifyOwnerContentRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_MODIFY_OWNER_CONTENT_RESTRICTION)
  private Boolean canModifyOwnerContentRestriction;

  public static final String SERIALIZED_NAME_CAN_MOVE_CHILDREN_OUT_OF_DRIVE = "canMoveChildrenOutOfDrive";
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_CHILDREN_OUT_OF_DRIVE)
  private Boolean canMoveChildrenOutOfDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_CHILDREN_OUT_OF_TEAM_DRIVE = "canMoveChildrenOutOfTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_CHILDREN_OUT_OF_TEAM_DRIVE)
  private Boolean canMoveChildrenOutOfTeamDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_CHILDREN_WITHIN_DRIVE = "canMoveChildrenWithinDrive";
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_CHILDREN_WITHIN_DRIVE)
  private Boolean canMoveChildrenWithinDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_CHILDREN_WITHIN_TEAM_DRIVE = "canMoveChildrenWithinTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_CHILDREN_WITHIN_TEAM_DRIVE)
  private Boolean canMoveChildrenWithinTeamDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_ITEM_INTO_TEAM_DRIVE = "canMoveItemIntoTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_ITEM_INTO_TEAM_DRIVE)
  private Boolean canMoveItemIntoTeamDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_ITEM_OUT_OF_DRIVE = "canMoveItemOutOfDrive";
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_ITEM_OUT_OF_DRIVE)
  private Boolean canMoveItemOutOfDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_ITEM_OUT_OF_TEAM_DRIVE = "canMoveItemOutOfTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_ITEM_OUT_OF_TEAM_DRIVE)
  private Boolean canMoveItemOutOfTeamDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_ITEM_WITHIN_DRIVE = "canMoveItemWithinDrive";
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_ITEM_WITHIN_DRIVE)
  private Boolean canMoveItemWithinDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_ITEM_WITHIN_TEAM_DRIVE = "canMoveItemWithinTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_ITEM_WITHIN_TEAM_DRIVE)
  private Boolean canMoveItemWithinTeamDrive;

  public static final String SERIALIZED_NAME_CAN_MOVE_TEAM_DRIVE_ITEM = "canMoveTeamDriveItem";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_MOVE_TEAM_DRIVE_ITEM)
  private Boolean canMoveTeamDriveItem;

  public static final String SERIALIZED_NAME_CAN_READ_DRIVE = "canReadDrive";
  @SerializedName(SERIALIZED_NAME_CAN_READ_DRIVE)
  private Boolean canReadDrive;

  public static final String SERIALIZED_NAME_CAN_READ_LABELS = "canReadLabels";
  @SerializedName(SERIALIZED_NAME_CAN_READ_LABELS)
  private Boolean canReadLabels;

  public static final String SERIALIZED_NAME_CAN_READ_REVISIONS = "canReadRevisions";
  @SerializedName(SERIALIZED_NAME_CAN_READ_REVISIONS)
  private Boolean canReadRevisions;

  public static final String SERIALIZED_NAME_CAN_READ_TEAM_DRIVE = "canReadTeamDrive";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CAN_READ_TEAM_DRIVE)
  private Boolean canReadTeamDrive;

  public static final String SERIALIZED_NAME_CAN_REMOVE_CHILDREN = "canRemoveChildren";
  @SerializedName(SERIALIZED_NAME_CAN_REMOVE_CHILDREN)
  private Boolean canRemoveChildren;

  public static final String SERIALIZED_NAME_CAN_REMOVE_CONTENT_RESTRICTION = "canRemoveContentRestriction";
  @SerializedName(SERIALIZED_NAME_CAN_REMOVE_CONTENT_RESTRICTION)
  private Boolean canRemoveContentRestriction;

  public static final String SERIALIZED_NAME_CAN_REMOVE_MY_DRIVE_PARENT = "canRemoveMyDriveParent";
  @SerializedName(SERIALIZED_NAME_CAN_REMOVE_MY_DRIVE_PARENT)
  private Boolean canRemoveMyDriveParent;

  public static final String SERIALIZED_NAME_CAN_RENAME = "canRename";
  @SerializedName(SERIALIZED_NAME_CAN_RENAME)
  private Boolean canRename;

  public static final String SERIALIZED_NAME_CAN_SHARE = "canShare";
  @SerializedName(SERIALIZED_NAME_CAN_SHARE)
  private Boolean canShare;

  public static final String SERIALIZED_NAME_CAN_TRASH = "canTrash";
  @SerializedName(SERIALIZED_NAME_CAN_TRASH)
  private Boolean canTrash;

  public static final String SERIALIZED_NAME_CAN_TRASH_CHILDREN = "canTrashChildren";
  @SerializedName(SERIALIZED_NAME_CAN_TRASH_CHILDREN)
  private Boolean canTrashChildren;

  public static final String SERIALIZED_NAME_CAN_UNTRASH = "canUntrash";
  @SerializedName(SERIALIZED_NAME_CAN_UNTRASH)
  private Boolean canUntrash;

  public FileCapabilities() {
  }

  public FileCapabilities canAcceptOwnership(Boolean canAcceptOwnership) {
    this.canAcceptOwnership = canAcceptOwnership;
    return this;
  }

  /**
   * Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files.
   * @return canAcceptOwnership
   */
  @javax.annotation.Nullable
  public Boolean getCanAcceptOwnership() {
    return canAcceptOwnership;
  }

  public void setCanAcceptOwnership(Boolean canAcceptOwnership) {
    this.canAcceptOwnership = canAcceptOwnership;
  }


  public FileCapabilities canAddChildren(Boolean canAddChildren) {
    this.canAddChildren = canAddChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder.
   * @return canAddChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanAddChildren() {
    return canAddChildren;
  }

  public void setCanAddChildren(Boolean canAddChildren) {
    this.canAddChildren = canAddChildren;
  }


  public FileCapabilities canAddFolderFromAnotherDrive(Boolean canAddFolderFromAnotherDrive) {
    this.canAddFolderFromAnotherDrive = canAddFolderFromAnotherDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives.
   * @return canAddFolderFromAnotherDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanAddFolderFromAnotherDrive() {
    return canAddFolderFromAnotherDrive;
  }

  public void setCanAddFolderFromAnotherDrive(Boolean canAddFolderFromAnotherDrive) {
    this.canAddFolderFromAnotherDrive = canAddFolderFromAnotherDrive;
  }


  public FileCapabilities canAddMyDriveParent(Boolean canAddMyDriveParent) {
    this.canAddMyDriveParent = canAddMyDriveParent;
    return this;
  }

  /**
   * Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files.
   * @return canAddMyDriveParent
   */
  @javax.annotation.Nullable
  public Boolean getCanAddMyDriveParent() {
    return canAddMyDriveParent;
  }

  public void setCanAddMyDriveParent(Boolean canAddMyDriveParent) {
    this.canAddMyDriveParent = canAddMyDriveParent;
  }


  public FileCapabilities canChangeCopyRequiresWriterPermission(Boolean canChangeCopyRequiresWriterPermission) {
    this.canChangeCopyRequiresWriterPermission = canChangeCopyRequiresWriterPermission;
    return this;
  }

  /**
   * Output only. Whether the current user can change the &#x60;copyRequiresWriterPermission&#x60; restriction of this file.
   * @return canChangeCopyRequiresWriterPermission
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeCopyRequiresWriterPermission() {
    return canChangeCopyRequiresWriterPermission;
  }

  public void setCanChangeCopyRequiresWriterPermission(Boolean canChangeCopyRequiresWriterPermission) {
    this.canChangeCopyRequiresWriterPermission = canChangeCopyRequiresWriterPermission;
  }


  public FileCapabilities canChangeSecurityUpdateEnabled(Boolean canChangeSecurityUpdateEnabled) {
    this.canChangeSecurityUpdateEnabled = canChangeSecurityUpdateEnabled;
    return this;
  }

  /**
   * Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata.
   * @return canChangeSecurityUpdateEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCanChangeSecurityUpdateEnabled() {
    return canChangeSecurityUpdateEnabled;
  }

  public void setCanChangeSecurityUpdateEnabled(Boolean canChangeSecurityUpdateEnabled) {
    this.canChangeSecurityUpdateEnabled = canChangeSecurityUpdateEnabled;
  }


  @Deprecated
  public FileCapabilities canChangeViewersCanCopyContent(Boolean canChangeViewersCanCopyContent) {
    this.canChangeViewersCanCopyContent = canChangeViewersCanCopyContent;
    return this;
  }

  /**
   * Deprecated: Output only.
   * @return canChangeViewersCanCopyContent
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanChangeViewersCanCopyContent() {
    return canChangeViewersCanCopyContent;
  }

  @Deprecated
  public void setCanChangeViewersCanCopyContent(Boolean canChangeViewersCanCopyContent) {
    this.canChangeViewersCanCopyContent = canChangeViewersCanCopyContent;
  }


  public FileCapabilities canComment(Boolean canComment) {
    this.canComment = canComment;
    return this;
  }

  /**
   * Output only. Whether the current user can comment on this file.
   * @return canComment
   */
  @javax.annotation.Nullable
  public Boolean getCanComment() {
    return canComment;
  }

  public void setCanComment(Boolean canComment) {
    this.canComment = canComment;
  }


  public FileCapabilities canCopy(Boolean canCopy) {
    this.canCopy = canCopy;
    return this;
  }

  /**
   * Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
   * @return canCopy
   */
  @javax.annotation.Nullable
  public Boolean getCanCopy() {
    return canCopy;
  }

  public void setCanCopy(Boolean canCopy) {
    this.canCopy = canCopy;
  }


  public FileCapabilities canDelete(Boolean canDelete) {
    this.canDelete = canDelete;
    return this;
  }

  /**
   * Output only. Whether the current user can delete this file.
   * @return canDelete
   */
  @javax.annotation.Nullable
  public Boolean getCanDelete() {
    return canDelete;
  }

  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }


  public FileCapabilities canDeleteChildren(Boolean canDeleteChildren) {
    this.canDeleteChildren = canDeleteChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
   * @return canDeleteChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanDeleteChildren() {
    return canDeleteChildren;
  }

  public void setCanDeleteChildren(Boolean canDeleteChildren) {
    this.canDeleteChildren = canDeleteChildren;
  }


  public FileCapabilities canDownload(Boolean canDownload) {
    this.canDownload = canDownload;
    return this;
  }

  /**
   * Output only. Whether the current user can download this file.
   * @return canDownload
   */
  @javax.annotation.Nullable
  public Boolean getCanDownload() {
    return canDownload;
  }

  public void setCanDownload(Boolean canDownload) {
    this.canDownload = canDownload;
  }


  public FileCapabilities canEdit(Boolean canEdit) {
    this.canEdit = canEdit;
    return this;
  }

  /**
   * Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see &#x60;canChangeCopyRequiresWriterPermission&#x60; or &#x60;canModifyContent&#x60;.
   * @return canEdit
   */
  @javax.annotation.Nullable
  public Boolean getCanEdit() {
    return canEdit;
  }

  public void setCanEdit(Boolean canEdit) {
    this.canEdit = canEdit;
  }


  public FileCapabilities canListChildren(Boolean canListChildren) {
    this.canListChildren = canListChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder.
   * @return canListChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanListChildren() {
    return canListChildren;
  }

  public void setCanListChildren(Boolean canListChildren) {
    this.canListChildren = canListChildren;
  }


  public FileCapabilities canModifyContent(Boolean canModifyContent) {
    this.canModifyContent = canModifyContent;
    return this;
  }

  /**
   * Output only. Whether the current user can modify the content of this file.
   * @return canModifyContent
   */
  @javax.annotation.Nullable
  public Boolean getCanModifyContent() {
    return canModifyContent;
  }

  public void setCanModifyContent(Boolean canModifyContent) {
    this.canModifyContent = canModifyContent;
  }


  @Deprecated
  public FileCapabilities canModifyContentRestriction(Boolean canModifyContentRestriction) {
    this.canModifyContentRestriction = canModifyContentRestriction;
    return this;
  }

  /**
   * Deprecated: Output only. Use one of &#x60;canModifyEditorContentRestriction&#x60;, &#x60;canModifyOwnerContentRestriction&#x60; or &#x60;canRemoveContentRestriction&#x60;.
   * @return canModifyContentRestriction
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanModifyContentRestriction() {
    return canModifyContentRestriction;
  }

  @Deprecated
  public void setCanModifyContentRestriction(Boolean canModifyContentRestriction) {
    this.canModifyContentRestriction = canModifyContentRestriction;
  }


  public FileCapabilities canModifyEditorContentRestriction(Boolean canModifyEditorContentRestriction) {
    this.canModifyEditorContentRestriction = canModifyEditorContentRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted.
   * @return canModifyEditorContentRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanModifyEditorContentRestriction() {
    return canModifyEditorContentRestriction;
  }

  public void setCanModifyEditorContentRestriction(Boolean canModifyEditorContentRestriction) {
    this.canModifyEditorContentRestriction = canModifyEditorContentRestriction;
  }


  public FileCapabilities canModifyLabels(Boolean canModifyLabels) {
    this.canModifyLabels = canModifyLabels;
    return this;
  }

  /**
   * Output only. Whether the current user can modify the labels on the file.
   * @return canModifyLabels
   */
  @javax.annotation.Nullable
  public Boolean getCanModifyLabels() {
    return canModifyLabels;
  }

  public void setCanModifyLabels(Boolean canModifyLabels) {
    this.canModifyLabels = canModifyLabels;
  }


  public FileCapabilities canModifyOwnerContentRestriction(Boolean canModifyOwnerContentRestriction) {
    this.canModifyOwnerContentRestriction = canModifyOwnerContentRestriction;
    return this;
  }

  /**
   * Output only. Whether the current user can add or modify content restrictions which are owner restricted.
   * @return canModifyOwnerContentRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanModifyOwnerContentRestriction() {
    return canModifyOwnerContentRestriction;
  }

  public void setCanModifyOwnerContentRestriction(Boolean canModifyOwnerContentRestriction) {
    this.canModifyOwnerContentRestriction = canModifyOwnerContentRestriction;
  }


  public FileCapabilities canMoveChildrenOutOfDrive(Boolean canMoveChildrenOutOfDrive) {
    this.canMoveChildrenOutOfDrive = canMoveChildrenOutOfDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives.
   * @return canMoveChildrenOutOfDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanMoveChildrenOutOfDrive() {
    return canMoveChildrenOutOfDrive;
  }

  public void setCanMoveChildrenOutOfDrive(Boolean canMoveChildrenOutOfDrive) {
    this.canMoveChildrenOutOfDrive = canMoveChildrenOutOfDrive;
  }


  @Deprecated
  public FileCapabilities canMoveChildrenOutOfTeamDrive(Boolean canMoveChildrenOutOfTeamDrive) {
    this.canMoveChildrenOutOfTeamDrive = canMoveChildrenOutOfTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveChildrenOutOfDrive&#x60; instead.
   * @return canMoveChildrenOutOfTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveChildrenOutOfTeamDrive() {
    return canMoveChildrenOutOfTeamDrive;
  }

  @Deprecated
  public void setCanMoveChildrenOutOfTeamDrive(Boolean canMoveChildrenOutOfTeamDrive) {
    this.canMoveChildrenOutOfTeamDrive = canMoveChildrenOutOfTeamDrive;
  }


  public FileCapabilities canMoveChildrenWithinDrive(Boolean canMoveChildrenWithinDrive) {
    this.canMoveChildrenWithinDrive = canMoveChildrenWithinDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user&#39;s access to the child and to the destination folder.
   * @return canMoveChildrenWithinDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanMoveChildrenWithinDrive() {
    return canMoveChildrenWithinDrive;
  }

  public void setCanMoveChildrenWithinDrive(Boolean canMoveChildrenWithinDrive) {
    this.canMoveChildrenWithinDrive = canMoveChildrenWithinDrive;
  }


  @Deprecated
  public FileCapabilities canMoveChildrenWithinTeamDrive(Boolean canMoveChildrenWithinTeamDrive) {
    this.canMoveChildrenWithinTeamDrive = canMoveChildrenWithinTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveChildrenWithinDrive&#x60; instead.
   * @return canMoveChildrenWithinTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveChildrenWithinTeamDrive() {
    return canMoveChildrenWithinTeamDrive;
  }

  @Deprecated
  public void setCanMoveChildrenWithinTeamDrive(Boolean canMoveChildrenWithinTeamDrive) {
    this.canMoveChildrenWithinTeamDrive = canMoveChildrenWithinTeamDrive;
  }


  @Deprecated
  public FileCapabilities canMoveItemIntoTeamDrive(Boolean canMoveItemIntoTeamDrive) {
    this.canMoveItemIntoTeamDrive = canMoveItemIntoTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveItemOutOfDrive&#x60; instead.
   * @return canMoveItemIntoTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveItemIntoTeamDrive() {
    return canMoveItemIntoTeamDrive;
  }

  @Deprecated
  public void setCanMoveItemIntoTeamDrive(Boolean canMoveItemIntoTeamDrive) {
    this.canMoveItemIntoTeamDrive = canMoveItemIntoTeamDrive;
  }


  public FileCapabilities canMoveItemOutOfDrive(Boolean canMoveItemOutOfDrive) {
    this.canMoveItemOutOfDrive = canMoveItemOutOfDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added.
   * @return canMoveItemOutOfDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanMoveItemOutOfDrive() {
    return canMoveItemOutOfDrive;
  }

  public void setCanMoveItemOutOfDrive(Boolean canMoveItemOutOfDrive) {
    this.canMoveItemOutOfDrive = canMoveItemOutOfDrive;
  }


  @Deprecated
  public FileCapabilities canMoveItemOutOfTeamDrive(Boolean canMoveItemOutOfTeamDrive) {
    this.canMoveItemOutOfTeamDrive = canMoveItemOutOfTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveItemOutOfDrive&#x60; instead.
   * @return canMoveItemOutOfTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveItemOutOfTeamDrive() {
    return canMoveItemOutOfTeamDrive;
  }

  @Deprecated
  public void setCanMoveItemOutOfTeamDrive(Boolean canMoveItemOutOfTeamDrive) {
    this.canMoveItemOutOfTeamDrive = canMoveItemOutOfTeamDrive;
  }


  public FileCapabilities canMoveItemWithinDrive(Boolean canMoveItemWithinDrive) {
    this.canMoveItemWithinDrive = canMoveItemWithinDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed.
   * @return canMoveItemWithinDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanMoveItemWithinDrive() {
    return canMoveItemWithinDrive;
  }

  public void setCanMoveItemWithinDrive(Boolean canMoveItemWithinDrive) {
    this.canMoveItemWithinDrive = canMoveItemWithinDrive;
  }


  @Deprecated
  public FileCapabilities canMoveItemWithinTeamDrive(Boolean canMoveItemWithinTeamDrive) {
    this.canMoveItemWithinTeamDrive = canMoveItemWithinTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveItemWithinDrive&#x60; instead.
   * @return canMoveItemWithinTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveItemWithinTeamDrive() {
    return canMoveItemWithinTeamDrive;
  }

  @Deprecated
  public void setCanMoveItemWithinTeamDrive(Boolean canMoveItemWithinTeamDrive) {
    this.canMoveItemWithinTeamDrive = canMoveItemWithinTeamDrive;
  }


  @Deprecated
  public FileCapabilities canMoveTeamDriveItem(Boolean canMoveTeamDriveItem) {
    this.canMoveTeamDriveItem = canMoveTeamDriveItem;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canMoveItemWithinDrive&#x60; or &#x60;canMoveItemOutOfDrive&#x60; instead.
   * @return canMoveTeamDriveItem
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanMoveTeamDriveItem() {
    return canMoveTeamDriveItem;
  }

  @Deprecated
  public void setCanMoveTeamDriveItem(Boolean canMoveTeamDriveItem) {
    this.canMoveTeamDriveItem = canMoveTeamDriveItem;
  }


  public FileCapabilities canReadDrive(Boolean canReadDrive) {
    this.canReadDrive = canReadDrive;
    return this;
  }

  /**
   * Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives.
   * @return canReadDrive
   */
  @javax.annotation.Nullable
  public Boolean getCanReadDrive() {
    return canReadDrive;
  }

  public void setCanReadDrive(Boolean canReadDrive) {
    this.canReadDrive = canReadDrive;
  }


  public FileCapabilities canReadLabels(Boolean canReadLabels) {
    this.canReadLabels = canReadLabels;
    return this;
  }

  /**
   * Output only. Whether the current user can read the labels on the file.
   * @return canReadLabels
   */
  @javax.annotation.Nullable
  public Boolean getCanReadLabels() {
    return canReadLabels;
  }

  public void setCanReadLabels(Boolean canReadLabels) {
    this.canReadLabels = canReadLabels;
  }


  public FileCapabilities canReadRevisions(Boolean canReadRevisions) {
    this.canReadRevisions = canReadRevisions;
    return this;
  }

  /**
   * Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
   * @return canReadRevisions
   */
  @javax.annotation.Nullable
  public Boolean getCanReadRevisions() {
    return canReadRevisions;
  }

  public void setCanReadRevisions(Boolean canReadRevisions) {
    this.canReadRevisions = canReadRevisions;
  }


  @Deprecated
  public FileCapabilities canReadTeamDrive(Boolean canReadTeamDrive) {
    this.canReadTeamDrive = canReadTeamDrive;
    return this;
  }

  /**
   * Deprecated: Output only. Use &#x60;canReadDrive&#x60; instead.
   * @return canReadTeamDrive
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCanReadTeamDrive() {
    return canReadTeamDrive;
  }

  @Deprecated
  public void setCanReadTeamDrive(Boolean canReadTeamDrive) {
    this.canReadTeamDrive = canReadTeamDrive;
  }


  public FileCapabilities canRemoveChildren(Boolean canRemoveChildren) {
    this.canRemoveChildren = canRemoveChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use &#x60;canDeleteChildren&#x60; or &#x60;canTrashChildren&#x60; instead.
   * @return canRemoveChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanRemoveChildren() {
    return canRemoveChildren;
  }

  public void setCanRemoveChildren(Boolean canRemoveChildren) {
    this.canRemoveChildren = canRemoveChildren;
  }


  public FileCapabilities canRemoveContentRestriction(Boolean canRemoveContentRestriction) {
    this.canRemoveContentRestriction = canRemoveContentRestriction;
    return this;
  }

  /**
   * Output only. Whether there is a content restriction on the file that can be removed by the current user.
   * @return canRemoveContentRestriction
   */
  @javax.annotation.Nullable
  public Boolean getCanRemoveContentRestriction() {
    return canRemoveContentRestriction;
  }

  public void setCanRemoveContentRestriction(Boolean canRemoveContentRestriction) {
    this.canRemoveContentRestriction = canRemoveContentRestriction;
  }


  public FileCapabilities canRemoveMyDriveParent(Boolean canRemoveMyDriveParent) {
    this.canRemoveMyDriveParent = canRemoveMyDriveParent;
    return this;
  }

  /**
   * Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files.
   * @return canRemoveMyDriveParent
   */
  @javax.annotation.Nullable
  public Boolean getCanRemoveMyDriveParent() {
    return canRemoveMyDriveParent;
  }

  public void setCanRemoveMyDriveParent(Boolean canRemoveMyDriveParent) {
    this.canRemoveMyDriveParent = canRemoveMyDriveParent;
  }


  public FileCapabilities canRename(Boolean canRename) {
    this.canRename = canRename;
    return this;
  }

  /**
   * Output only. Whether the current user can rename this file.
   * @return canRename
   */
  @javax.annotation.Nullable
  public Boolean getCanRename() {
    return canRename;
  }

  public void setCanRename(Boolean canRename) {
    this.canRename = canRename;
  }


  public FileCapabilities canShare(Boolean canShare) {
    this.canShare = canShare;
    return this;
  }

  /**
   * Output only. Whether the current user can modify the sharing settings for this file.
   * @return canShare
   */
  @javax.annotation.Nullable
  public Boolean getCanShare() {
    return canShare;
  }

  public void setCanShare(Boolean canShare) {
    this.canShare = canShare;
  }


  public FileCapabilities canTrash(Boolean canTrash) {
    this.canTrash = canTrash;
    return this;
  }

  /**
   * Output only. Whether the current user can move this file to trash.
   * @return canTrash
   */
  @javax.annotation.Nullable
  public Boolean getCanTrash() {
    return canTrash;
  }

  public void setCanTrash(Boolean canTrash) {
    this.canTrash = canTrash;
  }


  public FileCapabilities canTrashChildren(Boolean canTrashChildren) {
    this.canTrashChildren = canTrashChildren;
    return this;
  }

  /**
   * Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
   * @return canTrashChildren
   */
  @javax.annotation.Nullable
  public Boolean getCanTrashChildren() {
    return canTrashChildren;
  }

  public void setCanTrashChildren(Boolean canTrashChildren) {
    this.canTrashChildren = canTrashChildren;
  }


  public FileCapabilities canUntrash(Boolean canUntrash) {
    this.canUntrash = canUntrash;
    return this;
  }

  /**
   * Output only. Whether the current user can restore this file from trash.
   * @return canUntrash
   */
  @javax.annotation.Nullable
  public Boolean getCanUntrash() {
    return canUntrash;
  }

  public void setCanUntrash(Boolean canUntrash) {
    this.canUntrash = canUntrash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileCapabilities fileCapabilities = (FileCapabilities) o;
    return Objects.equals(this.canAcceptOwnership, fileCapabilities.canAcceptOwnership) &&
        Objects.equals(this.canAddChildren, fileCapabilities.canAddChildren) &&
        Objects.equals(this.canAddFolderFromAnotherDrive, fileCapabilities.canAddFolderFromAnotherDrive) &&
        Objects.equals(this.canAddMyDriveParent, fileCapabilities.canAddMyDriveParent) &&
        Objects.equals(this.canChangeCopyRequiresWriterPermission, fileCapabilities.canChangeCopyRequiresWriterPermission) &&
        Objects.equals(this.canChangeSecurityUpdateEnabled, fileCapabilities.canChangeSecurityUpdateEnabled) &&
        Objects.equals(this.canChangeViewersCanCopyContent, fileCapabilities.canChangeViewersCanCopyContent) &&
        Objects.equals(this.canComment, fileCapabilities.canComment) &&
        Objects.equals(this.canCopy, fileCapabilities.canCopy) &&
        Objects.equals(this.canDelete, fileCapabilities.canDelete) &&
        Objects.equals(this.canDeleteChildren, fileCapabilities.canDeleteChildren) &&
        Objects.equals(this.canDownload, fileCapabilities.canDownload) &&
        Objects.equals(this.canEdit, fileCapabilities.canEdit) &&
        Objects.equals(this.canListChildren, fileCapabilities.canListChildren) &&
        Objects.equals(this.canModifyContent, fileCapabilities.canModifyContent) &&
        Objects.equals(this.canModifyContentRestriction, fileCapabilities.canModifyContentRestriction) &&
        Objects.equals(this.canModifyEditorContentRestriction, fileCapabilities.canModifyEditorContentRestriction) &&
        Objects.equals(this.canModifyLabels, fileCapabilities.canModifyLabels) &&
        Objects.equals(this.canModifyOwnerContentRestriction, fileCapabilities.canModifyOwnerContentRestriction) &&
        Objects.equals(this.canMoveChildrenOutOfDrive, fileCapabilities.canMoveChildrenOutOfDrive) &&
        Objects.equals(this.canMoveChildrenOutOfTeamDrive, fileCapabilities.canMoveChildrenOutOfTeamDrive) &&
        Objects.equals(this.canMoveChildrenWithinDrive, fileCapabilities.canMoveChildrenWithinDrive) &&
        Objects.equals(this.canMoveChildrenWithinTeamDrive, fileCapabilities.canMoveChildrenWithinTeamDrive) &&
        Objects.equals(this.canMoveItemIntoTeamDrive, fileCapabilities.canMoveItemIntoTeamDrive) &&
        Objects.equals(this.canMoveItemOutOfDrive, fileCapabilities.canMoveItemOutOfDrive) &&
        Objects.equals(this.canMoveItemOutOfTeamDrive, fileCapabilities.canMoveItemOutOfTeamDrive) &&
        Objects.equals(this.canMoveItemWithinDrive, fileCapabilities.canMoveItemWithinDrive) &&
        Objects.equals(this.canMoveItemWithinTeamDrive, fileCapabilities.canMoveItemWithinTeamDrive) &&
        Objects.equals(this.canMoveTeamDriveItem, fileCapabilities.canMoveTeamDriveItem) &&
        Objects.equals(this.canReadDrive, fileCapabilities.canReadDrive) &&
        Objects.equals(this.canReadLabels, fileCapabilities.canReadLabels) &&
        Objects.equals(this.canReadRevisions, fileCapabilities.canReadRevisions) &&
        Objects.equals(this.canReadTeamDrive, fileCapabilities.canReadTeamDrive) &&
        Objects.equals(this.canRemoveChildren, fileCapabilities.canRemoveChildren) &&
        Objects.equals(this.canRemoveContentRestriction, fileCapabilities.canRemoveContentRestriction) &&
        Objects.equals(this.canRemoveMyDriveParent, fileCapabilities.canRemoveMyDriveParent) &&
        Objects.equals(this.canRename, fileCapabilities.canRename) &&
        Objects.equals(this.canShare, fileCapabilities.canShare) &&
        Objects.equals(this.canTrash, fileCapabilities.canTrash) &&
        Objects.equals(this.canTrashChildren, fileCapabilities.canTrashChildren) &&
        Objects.equals(this.canUntrash, fileCapabilities.canUntrash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canAcceptOwnership, canAddChildren, canAddFolderFromAnotherDrive, canAddMyDriveParent, canChangeCopyRequiresWriterPermission, canChangeSecurityUpdateEnabled, canChangeViewersCanCopyContent, canComment, canCopy, canDelete, canDeleteChildren, canDownload, canEdit, canListChildren, canModifyContent, canModifyContentRestriction, canModifyEditorContentRestriction, canModifyLabels, canModifyOwnerContentRestriction, canMoveChildrenOutOfDrive, canMoveChildrenOutOfTeamDrive, canMoveChildrenWithinDrive, canMoveChildrenWithinTeamDrive, canMoveItemIntoTeamDrive, canMoveItemOutOfDrive, canMoveItemOutOfTeamDrive, canMoveItemWithinDrive, canMoveItemWithinTeamDrive, canMoveTeamDriveItem, canReadDrive, canReadLabels, canReadRevisions, canReadTeamDrive, canRemoveChildren, canRemoveContentRestriction, canRemoveMyDriveParent, canRename, canShare, canTrash, canTrashChildren, canUntrash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileCapabilities {\n");
    sb.append("    canAcceptOwnership: ").append(toIndentedString(canAcceptOwnership)).append("\n");
    sb.append("    canAddChildren: ").append(toIndentedString(canAddChildren)).append("\n");
    sb.append("    canAddFolderFromAnotherDrive: ").append(toIndentedString(canAddFolderFromAnotherDrive)).append("\n");
    sb.append("    canAddMyDriveParent: ").append(toIndentedString(canAddMyDriveParent)).append("\n");
    sb.append("    canChangeCopyRequiresWriterPermission: ").append(toIndentedString(canChangeCopyRequiresWriterPermission)).append("\n");
    sb.append("    canChangeSecurityUpdateEnabled: ").append(toIndentedString(canChangeSecurityUpdateEnabled)).append("\n");
    sb.append("    canChangeViewersCanCopyContent: ").append(toIndentedString(canChangeViewersCanCopyContent)).append("\n");
    sb.append("    canComment: ").append(toIndentedString(canComment)).append("\n");
    sb.append("    canCopy: ").append(toIndentedString(canCopy)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    canDeleteChildren: ").append(toIndentedString(canDeleteChildren)).append("\n");
    sb.append("    canDownload: ").append(toIndentedString(canDownload)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canListChildren: ").append(toIndentedString(canListChildren)).append("\n");
    sb.append("    canModifyContent: ").append(toIndentedString(canModifyContent)).append("\n");
    sb.append("    canModifyContentRestriction: ").append(toIndentedString(canModifyContentRestriction)).append("\n");
    sb.append("    canModifyEditorContentRestriction: ").append(toIndentedString(canModifyEditorContentRestriction)).append("\n");
    sb.append("    canModifyLabels: ").append(toIndentedString(canModifyLabels)).append("\n");
    sb.append("    canModifyOwnerContentRestriction: ").append(toIndentedString(canModifyOwnerContentRestriction)).append("\n");
    sb.append("    canMoveChildrenOutOfDrive: ").append(toIndentedString(canMoveChildrenOutOfDrive)).append("\n");
    sb.append("    canMoveChildrenOutOfTeamDrive: ").append(toIndentedString(canMoveChildrenOutOfTeamDrive)).append("\n");
    sb.append("    canMoveChildrenWithinDrive: ").append(toIndentedString(canMoveChildrenWithinDrive)).append("\n");
    sb.append("    canMoveChildrenWithinTeamDrive: ").append(toIndentedString(canMoveChildrenWithinTeamDrive)).append("\n");
    sb.append("    canMoveItemIntoTeamDrive: ").append(toIndentedString(canMoveItemIntoTeamDrive)).append("\n");
    sb.append("    canMoveItemOutOfDrive: ").append(toIndentedString(canMoveItemOutOfDrive)).append("\n");
    sb.append("    canMoveItemOutOfTeamDrive: ").append(toIndentedString(canMoveItemOutOfTeamDrive)).append("\n");
    sb.append("    canMoveItemWithinDrive: ").append(toIndentedString(canMoveItemWithinDrive)).append("\n");
    sb.append("    canMoveItemWithinTeamDrive: ").append(toIndentedString(canMoveItemWithinTeamDrive)).append("\n");
    sb.append("    canMoveTeamDriveItem: ").append(toIndentedString(canMoveTeamDriveItem)).append("\n");
    sb.append("    canReadDrive: ").append(toIndentedString(canReadDrive)).append("\n");
    sb.append("    canReadLabels: ").append(toIndentedString(canReadLabels)).append("\n");
    sb.append("    canReadRevisions: ").append(toIndentedString(canReadRevisions)).append("\n");
    sb.append("    canReadTeamDrive: ").append(toIndentedString(canReadTeamDrive)).append("\n");
    sb.append("    canRemoveChildren: ").append(toIndentedString(canRemoveChildren)).append("\n");
    sb.append("    canRemoveContentRestriction: ").append(toIndentedString(canRemoveContentRestriction)).append("\n");
    sb.append("    canRemoveMyDriveParent: ").append(toIndentedString(canRemoveMyDriveParent)).append("\n");
    sb.append("    canRename: ").append(toIndentedString(canRename)).append("\n");
    sb.append("    canShare: ").append(toIndentedString(canShare)).append("\n");
    sb.append("    canTrash: ").append(toIndentedString(canTrash)).append("\n");
    sb.append("    canTrashChildren: ").append(toIndentedString(canTrashChildren)).append("\n");
    sb.append("    canUntrash: ").append(toIndentedString(canUntrash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canAcceptOwnership");
    openapiFields.add("canAddChildren");
    openapiFields.add("canAddFolderFromAnotherDrive");
    openapiFields.add("canAddMyDriveParent");
    openapiFields.add("canChangeCopyRequiresWriterPermission");
    openapiFields.add("canChangeSecurityUpdateEnabled");
    openapiFields.add("canChangeViewersCanCopyContent");
    openapiFields.add("canComment");
    openapiFields.add("canCopy");
    openapiFields.add("canDelete");
    openapiFields.add("canDeleteChildren");
    openapiFields.add("canDownload");
    openapiFields.add("canEdit");
    openapiFields.add("canListChildren");
    openapiFields.add("canModifyContent");
    openapiFields.add("canModifyContentRestriction");
    openapiFields.add("canModifyEditorContentRestriction");
    openapiFields.add("canModifyLabels");
    openapiFields.add("canModifyOwnerContentRestriction");
    openapiFields.add("canMoveChildrenOutOfDrive");
    openapiFields.add("canMoveChildrenOutOfTeamDrive");
    openapiFields.add("canMoveChildrenWithinDrive");
    openapiFields.add("canMoveChildrenWithinTeamDrive");
    openapiFields.add("canMoveItemIntoTeamDrive");
    openapiFields.add("canMoveItemOutOfDrive");
    openapiFields.add("canMoveItemOutOfTeamDrive");
    openapiFields.add("canMoveItemWithinDrive");
    openapiFields.add("canMoveItemWithinTeamDrive");
    openapiFields.add("canMoveTeamDriveItem");
    openapiFields.add("canReadDrive");
    openapiFields.add("canReadLabels");
    openapiFields.add("canReadRevisions");
    openapiFields.add("canReadTeamDrive");
    openapiFields.add("canRemoveChildren");
    openapiFields.add("canRemoveContentRestriction");
    openapiFields.add("canRemoveMyDriveParent");
    openapiFields.add("canRename");
    openapiFields.add("canShare");
    openapiFields.add("canTrash");
    openapiFields.add("canTrashChildren");
    openapiFields.add("canUntrash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileCapabilities
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileCapabilities.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileCapabilities is not found in the empty JSON string", FileCapabilities.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileCapabilities.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileCapabilities` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileCapabilities.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileCapabilities' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileCapabilities> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileCapabilities.class));

       return (TypeAdapter<T>) new TypeAdapter<FileCapabilities>() {
           @Override
           public void write(JsonWriter out, FileCapabilities value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileCapabilities read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileCapabilities given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileCapabilities
   * @throws IOException if the JSON string is invalid with respect to FileCapabilities
   */
  public static FileCapabilities fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileCapabilities.class);
  }

  /**
   * Convert an instance of FileCapabilities to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

