/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A restriction for accessing the content of the file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContentRestriction {
  public static final String SERIALIZED_NAME_OWNER_RESTRICTED = "ownerRestricted";
  @SerializedName(SERIALIZED_NAME_OWNER_RESTRICTED)
  private Boolean ownerRestricted;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_RESTRICTING_USER = "restrictingUser";
  @SerializedName(SERIALIZED_NAME_RESTRICTING_USER)
  private User restrictingUser;

  public static final String SERIALIZED_NAME_RESTRICTION_TIME = "restrictionTime";
  @SerializedName(SERIALIZED_NAME_RESTRICTION_TIME)
  private OffsetDateTime restrictionTime;

  public static final String SERIALIZED_NAME_SYSTEM_RESTRICTED = "systemRestricted";
  @SerializedName(SERIALIZED_NAME_SYSTEM_RESTRICTED)
  private Boolean systemRestricted;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ContentRestriction() {
  }

  public ContentRestriction ownerRestricted(Boolean ownerRestricted) {
    this.ownerRestricted = ownerRestricted;
    return this;
  }

  /**
   * Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with &#x60;organizer&#x60; capabilities can modify or remove this content restriction.
   * @return ownerRestricted
   */
  @javax.annotation.Nullable
  public Boolean getOwnerRestricted() {
    return ownerRestricted;
  }

  public void setOwnerRestricted(Boolean ownerRestricted) {
    this.ownerRestricted = ownerRestricted;
  }


  public ContentRestriction readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public ContentRestriction reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason for why the content of the file is restricted. This is only mutable on requests that also set &#x60;readOnly&#x3D;true&#x60;.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public ContentRestriction restrictingUser(User restrictingUser) {
    this.restrictingUser = restrictingUser;
    return this;
  }

  /**
   * Get restrictingUser
   * @return restrictingUser
   */
  @javax.annotation.Nullable
  public User getRestrictingUser() {
    return restrictingUser;
  }

  public void setRestrictingUser(User restrictingUser) {
    this.restrictingUser = restrictingUser;
  }


  public ContentRestriction restrictionTime(OffsetDateTime restrictionTime) {
    this.restrictionTime = restrictionTime;
    return this;
  }

  /**
   * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
   * @return restrictionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestrictionTime() {
    return restrictionTime;
  }

  public void setRestrictionTime(OffsetDateTime restrictionTime) {
    this.restrictionTime = restrictionTime;
  }


  public ContentRestriction systemRestricted(Boolean systemRestricted) {
    this.systemRestricted = systemRestricted;
    return this;
  }

  /**
   * Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.
   * @return systemRestricted
   */
  @javax.annotation.Nullable
  public Boolean getSystemRestricted() {
    return systemRestricted;
  }

  public void setSystemRestricted(Boolean systemRestricted) {
    this.systemRestricted = systemRestricted;
  }


  public ContentRestriction type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Output only. The type of the content restriction. Currently the only possible value is &#x60;globalContentRestriction&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentRestriction contentRestriction = (ContentRestriction) o;
    return Objects.equals(this.ownerRestricted, contentRestriction.ownerRestricted) &&
        Objects.equals(this.readOnly, contentRestriction.readOnly) &&
        Objects.equals(this.reason, contentRestriction.reason) &&
        Objects.equals(this.restrictingUser, contentRestriction.restrictingUser) &&
        Objects.equals(this.restrictionTime, contentRestriction.restrictionTime) &&
        Objects.equals(this.systemRestricted, contentRestriction.systemRestricted) &&
        Objects.equals(this.type, contentRestriction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ownerRestricted, readOnly, reason, restrictingUser, restrictionTime, systemRestricted, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentRestriction {\n");
    sb.append("    ownerRestricted: ").append(toIndentedString(ownerRestricted)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    restrictingUser: ").append(toIndentedString(restrictingUser)).append("\n");
    sb.append("    restrictionTime: ").append(toIndentedString(restrictionTime)).append("\n");
    sb.append("    systemRestricted: ").append(toIndentedString(systemRestricted)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ownerRestricted");
    openapiFields.add("readOnly");
    openapiFields.add("reason");
    openapiFields.add("restrictingUser");
    openapiFields.add("restrictionTime");
    openapiFields.add("systemRestricted");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentRestriction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentRestriction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentRestriction is not found in the empty JSON string", ContentRestriction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentRestriction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentRestriction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `restrictingUser`
      if (jsonObj.get("restrictingUser") != null && !jsonObj.get("restrictingUser").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("restrictingUser"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentRestriction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentRestriction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentRestriction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentRestriction.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentRestriction>() {
           @Override
           public void write(JsonWriter out, ContentRestriction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentRestriction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentRestriction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentRestriction
   * @throws IOException if the JSON string is invalid with respect to ContentRestriction
   */
  public static ContentRestriction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentRestriction.class);
  }

  /**
   * Convert an instance of ContentRestriction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

