/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Representation of field, which is a typed key-value pair.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabelField {
  public static final String SERIALIZED_NAME_DATE_STRING = "dateString";
  @SerializedName(SERIALIZED_NAME_DATE_STRING)
  private List<LocalDate> dateString = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTEGER = "integer";
  @SerializedName(SERIALIZED_NAME_INTEGER)
  private List<String> integer = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SELECTION = "selection";
  @SerializedName(SERIALIZED_NAME_SELECTION)
  private List<String> selection = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private List<String> text = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private List<User> user = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private String valueType;

  public LabelField() {
  }

  public LabelField dateString(List<LocalDate> dateString) {
    this.dateString = dateString;
    return this;
  }

  public LabelField addDateStringItem(LocalDate dateStringItem) {
    if (this.dateString == null) {
      this.dateString = new ArrayList<>();
    }
    this.dateString.add(dateStringItem);
    return this;
  }

  /**
   * Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
   * @return dateString
   */
  @javax.annotation.Nullable
  public List<LocalDate> getDateString() {
    return dateString;
  }

  public void setDateString(List<LocalDate> dateString) {
    this.dateString = dateString;
  }


  public LabelField id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of this label field.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public LabelField integer(List<String> integer) {
    this.integer = integer;
    return this;
  }

  public LabelField addIntegerItem(String integerItem) {
    if (this.integer == null) {
      this.integer = new ArrayList<>();
    }
    this.integer.add(integerItem);
    return this;
  }

  /**
   * Only present if &#x60;valueType&#x60; is &#x60;integer&#x60;.
   * @return integer
   */
  @javax.annotation.Nullable
  public List<String> getInteger() {
    return integer;
  }

  public void setInteger(List<String> integer) {
    this.integer = integer;
  }


  public LabelField kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always drive#labelField.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LabelField selection(List<String> selection) {
    this.selection = selection;
    return this;
  }

  public LabelField addSelectionItem(String selectionItem) {
    if (this.selection == null) {
      this.selection = new ArrayList<>();
    }
    this.selection.add(selectionItem);
    return this;
  }

  /**
   * Only present if &#x60;valueType&#x60; is &#x60;selection&#x60;
   * @return selection
   */
  @javax.annotation.Nullable
  public List<String> getSelection() {
    return selection;
  }

  public void setSelection(List<String> selection) {
    this.selection = selection;
  }


  public LabelField text(List<String> text) {
    this.text = text;
    return this;
  }

  public LabelField addTextItem(String textItem) {
    if (this.text == null) {
      this.text = new ArrayList<>();
    }
    this.text.add(textItem);
    return this;
  }

  /**
   * Only present if &#x60;valueType&#x60; is &#x60;text&#x60;.
   * @return text
   */
  @javax.annotation.Nullable
  public List<String> getText() {
    return text;
  }

  public void setText(List<String> text) {
    this.text = text;
  }


  public LabelField user(List<User> user) {
    this.user = user;
    return this;
  }

  public LabelField addUserItem(User userItem) {
    if (this.user == null) {
      this.user = new ArrayList<>();
    }
    this.user.add(userItem);
    return this;
  }

  /**
   * Only present if &#x60;valueType&#x60; is &#x60;user&#x60;.
   * @return user
   */
  @javax.annotation.Nullable
  public List<User> getUser() {
    return user;
  }

  public void setUser(List<User> user) {
    this.user = user;
  }


  public LabelField valueType(String valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * The field type. While new values may be supported in the future, the following are currently allowed: * &#x60;dateString&#x60; * &#x60;integer&#x60; * &#x60;selection&#x60; * &#x60;text&#x60; * &#x60;user&#x60;
   * @return valueType
   */
  @javax.annotation.Nullable
  public String getValueType() {
    return valueType;
  }

  public void setValueType(String valueType) {
    this.valueType = valueType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelField labelField = (LabelField) o;
    return Objects.equals(this.dateString, labelField.dateString) &&
        Objects.equals(this.id, labelField.id) &&
        Objects.equals(this.integer, labelField.integer) &&
        Objects.equals(this.kind, labelField.kind) &&
        Objects.equals(this.selection, labelField.selection) &&
        Objects.equals(this.text, labelField.text) &&
        Objects.equals(this.user, labelField.user) &&
        Objects.equals(this.valueType, labelField.valueType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateString, id, integer, kind, selection, text, user, valueType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelField {\n");
    sb.append("    dateString: ").append(toIndentedString(dateString)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    integer: ").append(toIndentedString(integer)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    selection: ").append(toIndentedString(selection)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateString");
    openapiFields.add("id");
    openapiFields.add("integer");
    openapiFields.add("kind");
    openapiFields.add("selection");
    openapiFields.add("text");
    openapiFields.add("user");
    openapiFields.add("valueType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelField is not found in the empty JSON string", LabelField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dateString") != null && !jsonObj.get("dateString").isJsonNull() && !jsonObj.get("dateString").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateString` to be an array in the JSON string but got `%s`", jsonObj.get("dateString").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("integer") != null && !jsonObj.get("integer").isJsonNull() && !jsonObj.get("integer").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `integer` to be an array in the JSON string but got `%s`", jsonObj.get("integer").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("selection") != null && !jsonObj.get("selection").isJsonNull() && !jsonObj.get("selection").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `selection` to be an array in the JSON string but got `%s`", jsonObj.get("selection").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull() && !jsonObj.get("text").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be an array in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        JsonArray jsonArrayuser = jsonObj.getAsJsonArray("user");
        if (jsonArrayuser != null) {
          // ensure the json data is an array
          if (!jsonObj.get("user").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `user` to be an array in the JSON string but got `%s`", jsonObj.get("user").toString()));
          }

          // validate the optional field `user` (array)
          for (int i = 0; i < jsonArrayuser.size(); i++) {
            User.validateJsonElement(jsonArrayuser.get(i));
          };
        }
      }
      if ((jsonObj.get("valueType") != null && !jsonObj.get("valueType").isJsonNull()) && !jsonObj.get("valueType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `valueType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("valueType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelField.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelField>() {
           @Override
           public void write(JsonWriter out, LabelField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelField
   * @throws IOException if the JSON string is invalid with respect to LabelField
   */
  public static LabelField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelField.class);
  }

  /**
   * Convert an instance of LabelField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

