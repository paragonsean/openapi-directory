/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A set of restrictions that apply to this shared drive or items inside this shared drive. Note that restrictions can&#39;t be set when creating a shared drive. To add a restriction, first create a shared drive and then use &#x60;drives.update&#x60; to add restrictions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveRestrictions {
  public static final String SERIALIZED_NAME_ADMIN_MANAGED_RESTRICTIONS = "adminManagedRestrictions";
  @SerializedName(SERIALIZED_NAME_ADMIN_MANAGED_RESTRICTIONS)
  private Boolean adminManagedRestrictions;

  public static final String SERIALIZED_NAME_COPY_REQUIRES_WRITER_PERMISSION = "copyRequiresWriterPermission";
  @SerializedName(SERIALIZED_NAME_COPY_REQUIRES_WRITER_PERMISSION)
  private Boolean copyRequiresWriterPermission;

  public static final String SERIALIZED_NAME_DOMAIN_USERS_ONLY = "domainUsersOnly";
  @SerializedName(SERIALIZED_NAME_DOMAIN_USERS_ONLY)
  private Boolean domainUsersOnly;

  public static final String SERIALIZED_NAME_DRIVE_MEMBERS_ONLY = "driveMembersOnly";
  @SerializedName(SERIALIZED_NAME_DRIVE_MEMBERS_ONLY)
  private Boolean driveMembersOnly;

  public static final String SERIALIZED_NAME_SHARING_FOLDERS_REQUIRES_ORGANIZER_PERMISSION = "sharingFoldersRequiresOrganizerPermission";
  @SerializedName(SERIALIZED_NAME_SHARING_FOLDERS_REQUIRES_ORGANIZER_PERMISSION)
  private Boolean sharingFoldersRequiresOrganizerPermission;

  public DriveRestrictions() {
  }

  public DriveRestrictions adminManagedRestrictions(Boolean adminManagedRestrictions) {
    this.adminManagedRestrictions = adminManagedRestrictions;
    return this;
  }

  /**
   * Whether administrative privileges on this shared drive are required to modify restrictions.
   * @return adminManagedRestrictions
   */
  @javax.annotation.Nullable
  public Boolean getAdminManagedRestrictions() {
    return adminManagedRestrictions;
  }

  public void setAdminManagedRestrictions(Boolean adminManagedRestrictions) {
    this.adminManagedRestrictions = adminManagedRestrictions;
  }


  public DriveRestrictions copyRequiresWriterPermission(Boolean copyRequiresWriterPermission) {
    this.copyRequiresWriterPermission = copyRequiresWriterPermission;
    return this;
  }

  /**
   * Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to &#x60;true&#x60;, it will override the similarly named field to &#x60;true&#x60; for any file inside this shared drive.
   * @return copyRequiresWriterPermission
   */
  @javax.annotation.Nullable
  public Boolean getCopyRequiresWriterPermission() {
    return copyRequiresWriterPermission;
  }

  public void setCopyRequiresWriterPermission(Boolean copyRequiresWriterPermission) {
    this.copyRequiresWriterPermission = copyRequiresWriterPermission;
  }


  public DriveRestrictions domainUsersOnly(Boolean domainUsersOnly) {
    this.domainUsersOnly = domainUsersOnly;
    return this;
  }

  /**
   * Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.
   * @return domainUsersOnly
   */
  @javax.annotation.Nullable
  public Boolean getDomainUsersOnly() {
    return domainUsersOnly;
  }

  public void setDomainUsersOnly(Boolean domainUsersOnly) {
    this.domainUsersOnly = domainUsersOnly;
  }


  public DriveRestrictions driveMembersOnly(Boolean driveMembersOnly) {
    this.driveMembersOnly = driveMembersOnly;
    return this;
  }

  /**
   * Whether access to items inside this shared drive is restricted to its members.
   * @return driveMembersOnly
   */
  @javax.annotation.Nullable
  public Boolean getDriveMembersOnly() {
    return driveMembersOnly;
  }

  public void setDriveMembersOnly(Boolean driveMembersOnly) {
    this.driveMembersOnly = driveMembersOnly;
  }


  public DriveRestrictions sharingFoldersRequiresOrganizerPermission(Boolean sharingFoldersRequiresOrganizerPermission) {
    this.sharingFoldersRequiresOrganizerPermission = sharingFoldersRequiresOrganizerPermission;
    return this;
  }

  /**
   * If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.
   * @return sharingFoldersRequiresOrganizerPermission
   */
  @javax.annotation.Nullable
  public Boolean getSharingFoldersRequiresOrganizerPermission() {
    return sharingFoldersRequiresOrganizerPermission;
  }

  public void setSharingFoldersRequiresOrganizerPermission(Boolean sharingFoldersRequiresOrganizerPermission) {
    this.sharingFoldersRequiresOrganizerPermission = sharingFoldersRequiresOrganizerPermission;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveRestrictions driveRestrictions = (DriveRestrictions) o;
    return Objects.equals(this.adminManagedRestrictions, driveRestrictions.adminManagedRestrictions) &&
        Objects.equals(this.copyRequiresWriterPermission, driveRestrictions.copyRequiresWriterPermission) &&
        Objects.equals(this.domainUsersOnly, driveRestrictions.domainUsersOnly) &&
        Objects.equals(this.driveMembersOnly, driveRestrictions.driveMembersOnly) &&
        Objects.equals(this.sharingFoldersRequiresOrganizerPermission, driveRestrictions.sharingFoldersRequiresOrganizerPermission);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminManagedRestrictions, copyRequiresWriterPermission, domainUsersOnly, driveMembersOnly, sharingFoldersRequiresOrganizerPermission);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveRestrictions {\n");
    sb.append("    adminManagedRestrictions: ").append(toIndentedString(adminManagedRestrictions)).append("\n");
    sb.append("    copyRequiresWriterPermission: ").append(toIndentedString(copyRequiresWriterPermission)).append("\n");
    sb.append("    domainUsersOnly: ").append(toIndentedString(domainUsersOnly)).append("\n");
    sb.append("    driveMembersOnly: ").append(toIndentedString(driveMembersOnly)).append("\n");
    sb.append("    sharingFoldersRequiresOrganizerPermission: ").append(toIndentedString(sharingFoldersRequiresOrganizerPermission)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminManagedRestrictions");
    openapiFields.add("copyRequiresWriterPermission");
    openapiFields.add("domainUsersOnly");
    openapiFields.add("driveMembersOnly");
    openapiFields.add("sharingFoldersRequiresOrganizerPermission");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveRestrictions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveRestrictions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveRestrictions is not found in the empty JSON string", DriveRestrictions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveRestrictions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveRestrictions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveRestrictions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveRestrictions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveRestrictions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveRestrictions.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveRestrictions>() {
           @Override
           public void write(JsonWriter out, DriveRestrictions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveRestrictions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveRestrictions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveRestrictions
   * @throws IOException if the JSON string is invalid with respect to DriveRestrictions
   */
  public static DriveRestrictions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveRestrictions.class);
  }

  /**
   * Convert an instance of DriveRestrictions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

