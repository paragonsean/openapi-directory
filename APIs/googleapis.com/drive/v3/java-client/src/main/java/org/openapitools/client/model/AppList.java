/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.App;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A list of third-party applications which the user has installed or given access to Google Drive.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppList {
  public static final String SERIALIZED_NAME_DEFAULT_APP_IDS = "defaultAppIds";
  @SerializedName(SERIALIZED_NAME_DEFAULT_APP_IDS)
  private List<String> defaultAppIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<App> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind = "drive#appList";

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public AppList() {
  }

  public AppList defaultAppIds(List<String> defaultAppIds) {
    this.defaultAppIds = defaultAppIds;
    return this;
  }

  public AppList addDefaultAppIdsItem(String defaultAppIdsItem) {
    if (this.defaultAppIds == null) {
      this.defaultAppIds = new ArrayList<>();
    }
    this.defaultAppIds.add(defaultAppIdsItem);
    return this;
  }

  /**
   * The list of app IDs that the user has specified to use by default. The list is in reverse-priority order (lowest to highest).
   * @return defaultAppIds
   */
  @javax.annotation.Nullable
  public List<String> getDefaultAppIds() {
    return defaultAppIds;
  }

  public void setDefaultAppIds(List<String> defaultAppIds) {
    this.defaultAppIds = defaultAppIds;
  }


  public AppList items(List<App> items) {
    this.items = items;
    return this;
  }

  public AppList addItemsItem(App itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The list of apps.
   * @return items
   */
  @javax.annotation.Nullable
  public List<App> getItems() {
    return items;
  }

  public void setItems(List<App> items) {
    this.items = items;
  }


  public AppList kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Output only. Identifies what kind of resource this is. Value: the fixed string \&quot;drive#appList\&quot;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AppList selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * A link back to this list.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppList appList = (AppList) o;
    return Objects.equals(this.defaultAppIds, appList.defaultAppIds) &&
        Objects.equals(this.items, appList.items) &&
        Objects.equals(this.kind, appList.kind) &&
        Objects.equals(this.selfLink, appList.selfLink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultAppIds, items, kind, selfLink);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppList {\n");
    sb.append("    defaultAppIds: ").append(toIndentedString(defaultAppIds)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultAppIds");
    openapiFields.add("items");
    openapiFields.add("kind");
    openapiFields.add("selfLink");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppList is not found in the empty JSON string", AppList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("defaultAppIds") != null && !jsonObj.get("defaultAppIds").isJsonNull() && !jsonObj.get("defaultAppIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultAppIds` to be an array in the JSON string but got `%s`", jsonObj.get("defaultAppIds").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            App.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppList.class));

       return (TypeAdapter<T>) new TypeAdapter<AppList>() {
           @Override
           public void write(JsonWriter out, AppList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppList
   * @throws IOException if the JSON string is invalid with respect to AppList
   */
  public static AppList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppList.class);
  }

  /**
   * Convert an instance of AppList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

