/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FileImageMediaMetadataLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. Additional metadata about image media, if available.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileImageMediaMetadata {
  public static final String SERIALIZED_NAME_APERTURE = "aperture";
  @SerializedName(SERIALIZED_NAME_APERTURE)
  private Float aperture;

  public static final String SERIALIZED_NAME_CAMERA_MAKE = "cameraMake";
  @SerializedName(SERIALIZED_NAME_CAMERA_MAKE)
  private String cameraMake;

  public static final String SERIALIZED_NAME_CAMERA_MODEL = "cameraModel";
  @SerializedName(SERIALIZED_NAME_CAMERA_MODEL)
  private String cameraModel;

  public static final String SERIALIZED_NAME_COLOR_SPACE = "colorSpace";
  @SerializedName(SERIALIZED_NAME_COLOR_SPACE)
  private String colorSpace;

  public static final String SERIALIZED_NAME_EXPOSURE_BIAS = "exposureBias";
  @SerializedName(SERIALIZED_NAME_EXPOSURE_BIAS)
  private Float exposureBias;

  public static final String SERIALIZED_NAME_EXPOSURE_MODE = "exposureMode";
  @SerializedName(SERIALIZED_NAME_EXPOSURE_MODE)
  private String exposureMode;

  public static final String SERIALIZED_NAME_EXPOSURE_TIME = "exposureTime";
  @SerializedName(SERIALIZED_NAME_EXPOSURE_TIME)
  private Float exposureTime;

  public static final String SERIALIZED_NAME_FLASH_USED = "flashUsed";
  @SerializedName(SERIALIZED_NAME_FLASH_USED)
  private Boolean flashUsed;

  public static final String SERIALIZED_NAME_FOCAL_LENGTH = "focalLength";
  @SerializedName(SERIALIZED_NAME_FOCAL_LENGTH)
  private Float focalLength;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_ISO_SPEED = "isoSpeed";
  @SerializedName(SERIALIZED_NAME_ISO_SPEED)
  private Integer isoSpeed;

  public static final String SERIALIZED_NAME_LENS = "lens";
  @SerializedName(SERIALIZED_NAME_LENS)
  private String lens;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private FileImageMediaMetadataLocation location;

  public static final String SERIALIZED_NAME_MAX_APERTURE_VALUE = "maxApertureValue";
  @SerializedName(SERIALIZED_NAME_MAX_APERTURE_VALUE)
  private Float maxApertureValue;

  public static final String SERIALIZED_NAME_METERING_MODE = "meteringMode";
  @SerializedName(SERIALIZED_NAME_METERING_MODE)
  private String meteringMode;

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private Integer rotation;

  public static final String SERIALIZED_NAME_SENSOR = "sensor";
  @SerializedName(SERIALIZED_NAME_SENSOR)
  private String sensor;

  public static final String SERIALIZED_NAME_SUBJECT_DISTANCE = "subjectDistance";
  @SerializedName(SERIALIZED_NAME_SUBJECT_DISTANCE)
  private Integer subjectDistance;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_WHITE_BALANCE = "whiteBalance";
  @SerializedName(SERIALIZED_NAME_WHITE_BALANCE)
  private String whiteBalance;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private Integer width;

  public FileImageMediaMetadata() {
  }

  public FileImageMediaMetadata aperture(Float aperture) {
    this.aperture = aperture;
    return this;
  }

  /**
   * Output only. The aperture used to create the photo (f-number).
   * @return aperture
   */
  @javax.annotation.Nullable
  public Float getAperture() {
    return aperture;
  }

  public void setAperture(Float aperture) {
    this.aperture = aperture;
  }


  public FileImageMediaMetadata cameraMake(String cameraMake) {
    this.cameraMake = cameraMake;
    return this;
  }

  /**
   * Output only. The make of the camera used to create the photo.
   * @return cameraMake
   */
  @javax.annotation.Nullable
  public String getCameraMake() {
    return cameraMake;
  }

  public void setCameraMake(String cameraMake) {
    this.cameraMake = cameraMake;
  }


  public FileImageMediaMetadata cameraModel(String cameraModel) {
    this.cameraModel = cameraModel;
    return this;
  }

  /**
   * Output only. The model of the camera used to create the photo.
   * @return cameraModel
   */
  @javax.annotation.Nullable
  public String getCameraModel() {
    return cameraModel;
  }

  public void setCameraModel(String cameraModel) {
    this.cameraModel = cameraModel;
  }


  public FileImageMediaMetadata colorSpace(String colorSpace) {
    this.colorSpace = colorSpace;
    return this;
  }

  /**
   * Output only. The color space of the photo.
   * @return colorSpace
   */
  @javax.annotation.Nullable
  public String getColorSpace() {
    return colorSpace;
  }

  public void setColorSpace(String colorSpace) {
    this.colorSpace = colorSpace;
  }


  public FileImageMediaMetadata exposureBias(Float exposureBias) {
    this.exposureBias = exposureBias;
    return this;
  }

  /**
   * Output only. The exposure bias of the photo (APEX value).
   * @return exposureBias
   */
  @javax.annotation.Nullable
  public Float getExposureBias() {
    return exposureBias;
  }

  public void setExposureBias(Float exposureBias) {
    this.exposureBias = exposureBias;
  }


  public FileImageMediaMetadata exposureMode(String exposureMode) {
    this.exposureMode = exposureMode;
    return this;
  }

  /**
   * Output only. The exposure mode used to create the photo.
   * @return exposureMode
   */
  @javax.annotation.Nullable
  public String getExposureMode() {
    return exposureMode;
  }

  public void setExposureMode(String exposureMode) {
    this.exposureMode = exposureMode;
  }


  public FileImageMediaMetadata exposureTime(Float exposureTime) {
    this.exposureTime = exposureTime;
    return this;
  }

  /**
   * Output only. The length of the exposure, in seconds.
   * @return exposureTime
   */
  @javax.annotation.Nullable
  public Float getExposureTime() {
    return exposureTime;
  }

  public void setExposureTime(Float exposureTime) {
    this.exposureTime = exposureTime;
  }


  public FileImageMediaMetadata flashUsed(Boolean flashUsed) {
    this.flashUsed = flashUsed;
    return this;
  }

  /**
   * Output only. Whether a flash was used to create the photo.
   * @return flashUsed
   */
  @javax.annotation.Nullable
  public Boolean getFlashUsed() {
    return flashUsed;
  }

  public void setFlashUsed(Boolean flashUsed) {
    this.flashUsed = flashUsed;
  }


  public FileImageMediaMetadata focalLength(Float focalLength) {
    this.focalLength = focalLength;
    return this;
  }

  /**
   * Output only. The focal length used to create the photo, in millimeters.
   * @return focalLength
   */
  @javax.annotation.Nullable
  public Float getFocalLength() {
    return focalLength;
  }

  public void setFocalLength(Float focalLength) {
    this.focalLength = focalLength;
  }


  public FileImageMediaMetadata height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Output only. The height of the image in pixels.
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public FileImageMediaMetadata isoSpeed(Integer isoSpeed) {
    this.isoSpeed = isoSpeed;
    return this;
  }

  /**
   * Output only. The ISO speed used to create the photo.
   * @return isoSpeed
   */
  @javax.annotation.Nullable
  public Integer getIsoSpeed() {
    return isoSpeed;
  }

  public void setIsoSpeed(Integer isoSpeed) {
    this.isoSpeed = isoSpeed;
  }


  public FileImageMediaMetadata lens(String lens) {
    this.lens = lens;
    return this;
  }

  /**
   * Output only. The lens used to create the photo.
   * @return lens
   */
  @javax.annotation.Nullable
  public String getLens() {
    return lens;
  }

  public void setLens(String lens) {
    this.lens = lens;
  }


  public FileImageMediaMetadata location(FileImageMediaMetadataLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public FileImageMediaMetadataLocation getLocation() {
    return location;
  }

  public void setLocation(FileImageMediaMetadataLocation location) {
    this.location = location;
  }


  public FileImageMediaMetadata maxApertureValue(Float maxApertureValue) {
    this.maxApertureValue = maxApertureValue;
    return this;
  }

  /**
   * Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).
   * @return maxApertureValue
   */
  @javax.annotation.Nullable
  public Float getMaxApertureValue() {
    return maxApertureValue;
  }

  public void setMaxApertureValue(Float maxApertureValue) {
    this.maxApertureValue = maxApertureValue;
  }


  public FileImageMediaMetadata meteringMode(String meteringMode) {
    this.meteringMode = meteringMode;
    return this;
  }

  /**
   * Output only. The metering mode used to create the photo.
   * @return meteringMode
   */
  @javax.annotation.Nullable
  public String getMeteringMode() {
    return meteringMode;
  }

  public void setMeteringMode(String meteringMode) {
    this.meteringMode = meteringMode;
  }


  public FileImageMediaMetadata rotation(Integer rotation) {
    this.rotation = rotation;
    return this;
  }

  /**
   * Output only. The number of clockwise 90 degree rotations applied from the image&#39;s original orientation.
   * @return rotation
   */
  @javax.annotation.Nullable
  public Integer getRotation() {
    return rotation;
  }

  public void setRotation(Integer rotation) {
    this.rotation = rotation;
  }


  public FileImageMediaMetadata sensor(String sensor) {
    this.sensor = sensor;
    return this;
  }

  /**
   * Output only. The type of sensor used to create the photo.
   * @return sensor
   */
  @javax.annotation.Nullable
  public String getSensor() {
    return sensor;
  }

  public void setSensor(String sensor) {
    this.sensor = sensor;
  }


  public FileImageMediaMetadata subjectDistance(Integer subjectDistance) {
    this.subjectDistance = subjectDistance;
    return this;
  }

  /**
   * Output only. The distance to the subject of the photo, in meters.
   * @return subjectDistance
   */
  @javax.annotation.Nullable
  public Integer getSubjectDistance() {
    return subjectDistance;
  }

  public void setSubjectDistance(Integer subjectDistance) {
    this.subjectDistance = subjectDistance;
  }


  public FileImageMediaMetadata time(String time) {
    this.time = time;
    return this;
  }

  /**
   * Output only. The date and time the photo was taken (EXIF DateTime).
   * @return time
   */
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public FileImageMediaMetadata whiteBalance(String whiteBalance) {
    this.whiteBalance = whiteBalance;
    return this;
  }

  /**
   * Output only. The white balance mode used to create the photo.
   * @return whiteBalance
   */
  @javax.annotation.Nullable
  public String getWhiteBalance() {
    return whiteBalance;
  }

  public void setWhiteBalance(String whiteBalance) {
    this.whiteBalance = whiteBalance;
  }


  public FileImageMediaMetadata width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Output only. The width of the image in pixels.
   * @return width
   */
  @javax.annotation.Nullable
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileImageMediaMetadata fileImageMediaMetadata = (FileImageMediaMetadata) o;
    return Objects.equals(this.aperture, fileImageMediaMetadata.aperture) &&
        Objects.equals(this.cameraMake, fileImageMediaMetadata.cameraMake) &&
        Objects.equals(this.cameraModel, fileImageMediaMetadata.cameraModel) &&
        Objects.equals(this.colorSpace, fileImageMediaMetadata.colorSpace) &&
        Objects.equals(this.exposureBias, fileImageMediaMetadata.exposureBias) &&
        Objects.equals(this.exposureMode, fileImageMediaMetadata.exposureMode) &&
        Objects.equals(this.exposureTime, fileImageMediaMetadata.exposureTime) &&
        Objects.equals(this.flashUsed, fileImageMediaMetadata.flashUsed) &&
        Objects.equals(this.focalLength, fileImageMediaMetadata.focalLength) &&
        Objects.equals(this.height, fileImageMediaMetadata.height) &&
        Objects.equals(this.isoSpeed, fileImageMediaMetadata.isoSpeed) &&
        Objects.equals(this.lens, fileImageMediaMetadata.lens) &&
        Objects.equals(this.location, fileImageMediaMetadata.location) &&
        Objects.equals(this.maxApertureValue, fileImageMediaMetadata.maxApertureValue) &&
        Objects.equals(this.meteringMode, fileImageMediaMetadata.meteringMode) &&
        Objects.equals(this.rotation, fileImageMediaMetadata.rotation) &&
        Objects.equals(this.sensor, fileImageMediaMetadata.sensor) &&
        Objects.equals(this.subjectDistance, fileImageMediaMetadata.subjectDistance) &&
        Objects.equals(this.time, fileImageMediaMetadata.time) &&
        Objects.equals(this.whiteBalance, fileImageMediaMetadata.whiteBalance) &&
        Objects.equals(this.width, fileImageMediaMetadata.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aperture, cameraMake, cameraModel, colorSpace, exposureBias, exposureMode, exposureTime, flashUsed, focalLength, height, isoSpeed, lens, location, maxApertureValue, meteringMode, rotation, sensor, subjectDistance, time, whiteBalance, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileImageMediaMetadata {\n");
    sb.append("    aperture: ").append(toIndentedString(aperture)).append("\n");
    sb.append("    cameraMake: ").append(toIndentedString(cameraMake)).append("\n");
    sb.append("    cameraModel: ").append(toIndentedString(cameraModel)).append("\n");
    sb.append("    colorSpace: ").append(toIndentedString(colorSpace)).append("\n");
    sb.append("    exposureBias: ").append(toIndentedString(exposureBias)).append("\n");
    sb.append("    exposureMode: ").append(toIndentedString(exposureMode)).append("\n");
    sb.append("    exposureTime: ").append(toIndentedString(exposureTime)).append("\n");
    sb.append("    flashUsed: ").append(toIndentedString(flashUsed)).append("\n");
    sb.append("    focalLength: ").append(toIndentedString(focalLength)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    isoSpeed: ").append(toIndentedString(isoSpeed)).append("\n");
    sb.append("    lens: ").append(toIndentedString(lens)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    maxApertureValue: ").append(toIndentedString(maxApertureValue)).append("\n");
    sb.append("    meteringMode: ").append(toIndentedString(meteringMode)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    sensor: ").append(toIndentedString(sensor)).append("\n");
    sb.append("    subjectDistance: ").append(toIndentedString(subjectDistance)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    whiteBalance: ").append(toIndentedString(whiteBalance)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aperture");
    openapiFields.add("cameraMake");
    openapiFields.add("cameraModel");
    openapiFields.add("colorSpace");
    openapiFields.add("exposureBias");
    openapiFields.add("exposureMode");
    openapiFields.add("exposureTime");
    openapiFields.add("flashUsed");
    openapiFields.add("focalLength");
    openapiFields.add("height");
    openapiFields.add("isoSpeed");
    openapiFields.add("lens");
    openapiFields.add("location");
    openapiFields.add("maxApertureValue");
    openapiFields.add("meteringMode");
    openapiFields.add("rotation");
    openapiFields.add("sensor");
    openapiFields.add("subjectDistance");
    openapiFields.add("time");
    openapiFields.add("whiteBalance");
    openapiFields.add("width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileImageMediaMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileImageMediaMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileImageMediaMetadata is not found in the empty JSON string", FileImageMediaMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileImageMediaMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileImageMediaMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cameraMake") != null && !jsonObj.get("cameraMake").isJsonNull()) && !jsonObj.get("cameraMake").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cameraMake` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cameraMake").toString()));
      }
      if ((jsonObj.get("cameraModel") != null && !jsonObj.get("cameraModel").isJsonNull()) && !jsonObj.get("cameraModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cameraModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cameraModel").toString()));
      }
      if ((jsonObj.get("colorSpace") != null && !jsonObj.get("colorSpace").isJsonNull()) && !jsonObj.get("colorSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colorSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colorSpace").toString()));
      }
      if ((jsonObj.get("exposureMode") != null && !jsonObj.get("exposureMode").isJsonNull()) && !jsonObj.get("exposureMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exposureMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exposureMode").toString()));
      }
      if ((jsonObj.get("lens") != null && !jsonObj.get("lens").isJsonNull()) && !jsonObj.get("lens").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lens` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lens").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        FileImageMediaMetadataLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("meteringMode") != null && !jsonObj.get("meteringMode").isJsonNull()) && !jsonObj.get("meteringMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meteringMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meteringMode").toString()));
      }
      if ((jsonObj.get("sensor") != null && !jsonObj.get("sensor").isJsonNull()) && !jsonObj.get("sensor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensor").toString()));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      if ((jsonObj.get("whiteBalance") != null && !jsonObj.get("whiteBalance").isJsonNull()) && !jsonObj.get("whiteBalance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteBalance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whiteBalance").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileImageMediaMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileImageMediaMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileImageMediaMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileImageMediaMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<FileImageMediaMetadata>() {
           @Override
           public void write(JsonWriter out, FileImageMediaMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileImageMediaMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileImageMediaMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileImageMediaMetadata
   * @throws IOException if the JSON string is invalid with respect to FileImageMediaMetadata
   */
  public static FileImageMediaMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileImageMediaMetadata.class);
  }

  /**
   * Convert an instance of FileImageMediaMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

