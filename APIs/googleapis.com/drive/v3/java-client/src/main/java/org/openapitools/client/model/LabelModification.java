/*
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LabelFieldModification;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:32.870459-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LabelModification {
  public static final String SERIALIZED_NAME_FIELD_MODIFICATIONS = "fieldModifications";
  @SerializedName(SERIALIZED_NAME_FIELD_MODIFICATIONS)
  private List<LabelFieldModification> fieldModifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABEL_ID = "labelId";
  @SerializedName(SERIALIZED_NAME_LABEL_ID)
  private String labelId;

  public static final String SERIALIZED_NAME_REMOVE_LABEL = "removeLabel";
  @SerializedName(SERIALIZED_NAME_REMOVE_LABEL)
  private Boolean removeLabel;

  public LabelModification() {
  }

  public LabelModification fieldModifications(List<LabelFieldModification> fieldModifications) {
    this.fieldModifications = fieldModifications;
    return this;
  }

  public LabelModification addFieldModificationsItem(LabelFieldModification fieldModificationsItem) {
    if (this.fieldModifications == null) {
      this.fieldModifications = new ArrayList<>();
    }
    this.fieldModifications.add(fieldModificationsItem);
    return this;
  }

  /**
   * The list of modifications to this label&#39;s fields.
   * @return fieldModifications
   */
  @javax.annotation.Nullable
  public List<LabelFieldModification> getFieldModifications() {
    return fieldModifications;
  }

  public void setFieldModifications(List<LabelFieldModification> fieldModifications) {
    this.fieldModifications = fieldModifications;
  }


  public LabelModification kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always drive#labelModification.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LabelModification labelId(String labelId) {
    this.labelId = labelId;
    return this;
  }

  /**
   * The ID of the label to modify.
   * @return labelId
   */
  @javax.annotation.Nullable
  public String getLabelId() {
    return labelId;
  }

  public void setLabelId(String labelId) {
    this.labelId = labelId;
  }


  public LabelModification removeLabel(Boolean removeLabel) {
    this.removeLabel = removeLabel;
    return this;
  }

  /**
   * If true, the label will be removed from the file.
   * @return removeLabel
   */
  @javax.annotation.Nullable
  public Boolean getRemoveLabel() {
    return removeLabel;
  }

  public void setRemoveLabel(Boolean removeLabel) {
    this.removeLabel = removeLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LabelModification labelModification = (LabelModification) o;
    return Objects.equals(this.fieldModifications, labelModification.fieldModifications) &&
        Objects.equals(this.kind, labelModification.kind) &&
        Objects.equals(this.labelId, labelModification.labelId) &&
        Objects.equals(this.removeLabel, labelModification.removeLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldModifications, kind, labelId, removeLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LabelModification {\n");
    sb.append("    fieldModifications: ").append(toIndentedString(fieldModifications)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labelId: ").append(toIndentedString(labelId)).append("\n");
    sb.append("    removeLabel: ").append(toIndentedString(removeLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldModifications");
    openapiFields.add("kind");
    openapiFields.add("labelId");
    openapiFields.add("removeLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LabelModification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LabelModification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LabelModification is not found in the empty JSON string", LabelModification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LabelModification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LabelModification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fieldModifications") != null && !jsonObj.get("fieldModifications").isJsonNull()) {
        JsonArray jsonArrayfieldModifications = jsonObj.getAsJsonArray("fieldModifications");
        if (jsonArrayfieldModifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fieldModifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fieldModifications` to be an array in the JSON string but got `%s`", jsonObj.get("fieldModifications").toString()));
          }

          // validate the optional field `fieldModifications` (array)
          for (int i = 0; i < jsonArrayfieldModifications.size(); i++) {
            LabelFieldModification.validateJsonElement(jsonArrayfieldModifications.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("labelId") != null && !jsonObj.get("labelId").isJsonNull()) && !jsonObj.get("labelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labelId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LabelModification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LabelModification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LabelModification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LabelModification.class));

       return (TypeAdapter<T>) new TypeAdapter<LabelModification>() {
           @Override
           public void write(JsonWriter out, LabelModification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LabelModification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LabelModification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LabelModification
   * @throws IOException if the JSON string is invalid with respect to LabelModification
   */
  public static LabelModification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LabelModification.class);
  }

  /**
   * Convert an instance of LabelModification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

