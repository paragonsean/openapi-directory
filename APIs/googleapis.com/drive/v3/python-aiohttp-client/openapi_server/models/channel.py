# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, expiration: str=None, id: str=None, kind: str='api#channel', params: Dict[str, str]=None, payload: bool=None, resource_id: str=None, resource_uri: str=None, token: str=None, type: str=None):
        """Channel - a model defined in OpenAPI

        :param address: The address of this Channel.
        :param expiration: The expiration of this Channel.
        :param id: The id of this Channel.
        :param kind: The kind of this Channel.
        :param params: The params of this Channel.
        :param payload: The payload of this Channel.
        :param resource_id: The resource_id of this Channel.
        :param resource_uri: The resource_uri of this Channel.
        :param token: The token of this Channel.
        :param type: The type of this Channel.
        """
        self.openapi_types = {
            'address': str,
            'expiration': str,
            'id': str,
            'kind': str,
            'params': Dict[str, str],
            'payload': bool,
            'resource_id': str,
            'resource_uri': str,
            'token': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'expiration': 'expiration',
            'id': 'id',
            'kind': 'kind',
            'params': 'params',
            'payload': 'payload',
            'resource_id': 'resourceId',
            'resource_uri': 'resourceUri',
            'token': 'token',
            'type': 'type'
        }

        self._address = address
        self._expiration = expiration
        self._id = id
        self._kind = kind
        self._params = params
        self._payload = payload
        self._resource_id = resource_id
        self._resource_uri = resource_uri
        self._token = token
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Channel.

        The address where notifications are delivered for this channel.

        :return: The address of this Channel.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Channel.

        The address where notifications are delivered for this channel.

        :param address: The address of this Channel.
        :type address: str
        """

        self._address = address

    @property
    def expiration(self):
        """Gets the expiration of this Channel.

        Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.

        :return: The expiration of this Channel.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this Channel.

        Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.

        :param expiration: The expiration of this Channel.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def id(self):
        """Gets the id of this Channel.

        A UUID or similar unique string that identifies this channel.

        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.

        A UUID or similar unique string that identifies this channel.

        :param id: The id of this Channel.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Channel.

        Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.

        :return: The kind of this Channel.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Channel.

        Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`.

        :param kind: The kind of this Channel.
        :type kind: str
        """

        self._kind = kind

    @property
    def params(self):
        """Gets the params of this Channel.

        Additional parameters controlling delivery channel behavior. Optional.

        :return: The params of this Channel.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this Channel.

        Additional parameters controlling delivery channel behavior. Optional.

        :param params: The params of this Channel.
        :type params: Dict[str, str]
        """

        self._params = params

    @property
    def payload(self):
        """Gets the payload of this Channel.

        A Boolean value to indicate whether payload is wanted. Optional.

        :return: The payload of this Channel.
        :rtype: bool
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Channel.

        A Boolean value to indicate whether payload is wanted. Optional.

        :param payload: The payload of this Channel.
        :type payload: bool
        """

        self._payload = payload

    @property
    def resource_id(self):
        """Gets the resource_id of this Channel.

        An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.

        :return: The resource_id of this Channel.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Channel.

        An opaque ID that identifies the resource being watched on this channel. Stable across different API versions.

        :param resource_id: The resource_id of this Channel.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_uri(self):
        """Gets the resource_uri of this Channel.

        A version-specific identifier for the watched resource.

        :return: The resource_uri of this Channel.
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this Channel.

        A version-specific identifier for the watched resource.

        :param resource_uri: The resource_uri of this Channel.
        :type resource_uri: str
        """

        self._resource_uri = resource_uri

    @property
    def token(self):
        """Gets the token of this Channel.

        An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.

        :return: The token of this Channel.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Channel.

        An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.

        :param token: The token of this Channel.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this Channel.

        The type of delivery mechanism used for this channel. Valid values are \"web_hook\" or \"webhook\".

        :return: The type of this Channel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.

        The type of delivery mechanism used for this channel. Valid values are \"web_hook\" or \"webhook\".

        :param type: The type of this Channel.
        :type type: str
        """

        self._type = type
