# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drive_background_image_file import DriveBackgroundImageFile
from openapi_server.models.drive_capabilities import DriveCapabilities
from openapi_server.models.drive_restrictions import DriveRestrictions
from openapi_server import util


class Drive(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background_image_file: DriveBackgroundImageFile=None, background_image_link: str=None, capabilities: DriveCapabilities=None, color_rgb: str=None, created_time: datetime=None, hidden: bool=None, id: str=None, kind: str='drive#drive', name: str=None, org_unit_id: str=None, restrictions: DriveRestrictions=None, theme_id: str=None):
        """Drive - a model defined in OpenAPI

        :param background_image_file: The background_image_file of this Drive.
        :param background_image_link: The background_image_link of this Drive.
        :param capabilities: The capabilities of this Drive.
        :param color_rgb: The color_rgb of this Drive.
        :param created_time: The created_time of this Drive.
        :param hidden: The hidden of this Drive.
        :param id: The id of this Drive.
        :param kind: The kind of this Drive.
        :param name: The name of this Drive.
        :param org_unit_id: The org_unit_id of this Drive.
        :param restrictions: The restrictions of this Drive.
        :param theme_id: The theme_id of this Drive.
        """
        self.openapi_types = {
            'background_image_file': DriveBackgroundImageFile,
            'background_image_link': str,
            'capabilities': DriveCapabilities,
            'color_rgb': str,
            'created_time': datetime,
            'hidden': bool,
            'id': str,
            'kind': str,
            'name': str,
            'org_unit_id': str,
            'restrictions': DriveRestrictions,
            'theme_id': str
        }

        self.attribute_map = {
            'background_image_file': 'backgroundImageFile',
            'background_image_link': 'backgroundImageLink',
            'capabilities': 'capabilities',
            'color_rgb': 'colorRgb',
            'created_time': 'createdTime',
            'hidden': 'hidden',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'org_unit_id': 'orgUnitId',
            'restrictions': 'restrictions',
            'theme_id': 'themeId'
        }

        self._background_image_file = background_image_file
        self._background_image_link = background_image_link
        self._capabilities = capabilities
        self._color_rgb = color_rgb
        self._created_time = created_time
        self._hidden = hidden
        self._id = id
        self._kind = kind
        self._name = name
        self._org_unit_id = org_unit_id
        self._restrictions = restrictions
        self._theme_id = theme_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Drive':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Drive of this Drive.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background_image_file(self):
        """Gets the background_image_file of this Drive.


        :return: The background_image_file of this Drive.
        :rtype: DriveBackgroundImageFile
        """
        return self._background_image_file

    @background_image_file.setter
    def background_image_file(self, background_image_file):
        """Sets the background_image_file of this Drive.


        :param background_image_file: The background_image_file of this Drive.
        :type background_image_file: DriveBackgroundImageFile
        """

        self._background_image_file = background_image_file

    @property
    def background_image_link(self):
        """Gets the background_image_link of this Drive.

        Output only. A short-lived link to this shared drive's background image.

        :return: The background_image_link of this Drive.
        :rtype: str
        """
        return self._background_image_link

    @background_image_link.setter
    def background_image_link(self, background_image_link):
        """Sets the background_image_link of this Drive.

        Output only. A short-lived link to this shared drive's background image.

        :param background_image_link: The background_image_link of this Drive.
        :type background_image_link: str
        """

        self._background_image_link = background_image_link

    @property
    def capabilities(self):
        """Gets the capabilities of this Drive.


        :return: The capabilities of this Drive.
        :rtype: DriveCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Drive.


        :param capabilities: The capabilities of this Drive.
        :type capabilities: DriveCapabilities
        """

        self._capabilities = capabilities

    @property
    def color_rgb(self):
        """Gets the color_rgb of this Drive.

        The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`.

        :return: The color_rgb of this Drive.
        :rtype: str
        """
        return self._color_rgb

    @color_rgb.setter
    def color_rgb(self, color_rgb):
        """Sets the color_rgb of this Drive.

        The color of this shared drive as an RGB hex string. It can only be set on a `drive.drives.update` request that does not set `themeId`.

        :param color_rgb: The color_rgb of this Drive.
        :type color_rgb: str
        """

        self._color_rgb = color_rgb

    @property
    def created_time(self):
        """Gets the created_time of this Drive.

        The time at which the shared drive was created (RFC 3339 date-time).

        :return: The created_time of this Drive.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Drive.

        The time at which the shared drive was created (RFC 3339 date-time).

        :param created_time: The created_time of this Drive.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def hidden(self):
        """Gets the hidden of this Drive.

        Whether the shared drive is hidden from default view.

        :return: The hidden of this Drive.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Drive.

        Whether the shared drive is hidden from default view.

        :param hidden: The hidden of this Drive.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Drive.

        Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.

        :return: The id of this Drive.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Drive.

        Output only. The ID of this shared drive which is also the ID of the top level folder of this shared drive.

        :param id: The id of this Drive.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Drive.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#drive\"`.

        :return: The kind of this Drive.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Drive.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#drive\"`.

        :param kind: The kind of this Drive.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Drive.

        The name of this shared drive.

        :return: The name of this Drive.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Drive.

        The name of this shared drive.

        :param name: The name of this Drive.
        :type name: str
        """

        self._name = name

    @property
    def org_unit_id(self):
        """Gets the org_unit_id of this Drive.

        Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.

        :return: The org_unit_id of this Drive.
        :rtype: str
        """
        return self._org_unit_id

    @org_unit_id.setter
    def org_unit_id(self, org_unit_id):
        """Sets the org_unit_id of this Drive.

        Output only. The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.

        :param org_unit_id: The org_unit_id of this Drive.
        :type org_unit_id: str
        """

        self._org_unit_id = org_unit_id

    @property
    def restrictions(self):
        """Gets the restrictions of this Drive.


        :return: The restrictions of this Drive.
        :rtype: DriveRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Drive.


        :param restrictions: The restrictions of this Drive.
        :type restrictions: DriveRestrictions
        """

        self._restrictions = restrictions

    @property
    def theme_id(self):
        """Gets the theme_id of this Drive.

        The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.

        :return: The theme_id of this Drive.
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this Drive.

        The ID of the theme from which the background image and color will be set. The set of possible `driveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.drives.create` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.

        :param theme_id: The theme_id of this Drive.
        :type theme_id: str
        """

        self._theme_id = theme_id
