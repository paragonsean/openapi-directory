# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class LabelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_string: List[date]=None, id: str=None, integer: List[str]=None, kind: str=None, selection: List[str]=None, text: List[str]=None, user: List[User]=None, value_type: str=None):
        """LabelField - a model defined in OpenAPI

        :param date_string: The date_string of this LabelField.
        :param id: The id of this LabelField.
        :param integer: The integer of this LabelField.
        :param kind: The kind of this LabelField.
        :param selection: The selection of this LabelField.
        :param text: The text of this LabelField.
        :param user: The user of this LabelField.
        :param value_type: The value_type of this LabelField.
        """
        self.openapi_types = {
            'date_string': List[date],
            'id': str,
            'integer': List[str],
            'kind': str,
            'selection': List[str],
            'text': List[str],
            'user': List[User],
            'value_type': str
        }

        self.attribute_map = {
            'date_string': 'dateString',
            'id': 'id',
            'integer': 'integer',
            'kind': 'kind',
            'selection': 'selection',
            'text': 'text',
            'user': 'user',
            'value_type': 'valueType'
        }

        self._date_string = date_string
        self._id = id
        self._integer = integer
        self._kind = kind
        self._selection = selection
        self._text = text
        self._user = user
        self._value_type = value_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelField of this LabelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_string(self):
        """Gets the date_string of this LabelField.

        Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.

        :return: The date_string of this LabelField.
        :rtype: List[date]
        """
        return self._date_string

    @date_string.setter
    def date_string(self, date_string):
        """Sets the date_string of this LabelField.

        Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.

        :param date_string: The date_string of this LabelField.
        :type date_string: List[date]
        """

        self._date_string = date_string

    @property
    def id(self):
        """Gets the id of this LabelField.

        The identifier of this label field.

        :return: The id of this LabelField.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LabelField.

        The identifier of this label field.

        :param id: The id of this LabelField.
        :type id: str
        """

        self._id = id

    @property
    def integer(self):
        """Gets the integer of this LabelField.

        Only present if `valueType` is `integer`.

        :return: The integer of this LabelField.
        :rtype: List[str]
        """
        return self._integer

    @integer.setter
    def integer(self, integer):
        """Sets the integer of this LabelField.

        Only present if `valueType` is `integer`.

        :param integer: The integer of this LabelField.
        :type integer: List[str]
        """

        self._integer = integer

    @property
    def kind(self):
        """Gets the kind of this LabelField.

        This is always drive#labelField.

        :return: The kind of this LabelField.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this LabelField.

        This is always drive#labelField.

        :param kind: The kind of this LabelField.
        :type kind: str
        """

        self._kind = kind

    @property
    def selection(self):
        """Gets the selection of this LabelField.

        Only present if `valueType` is `selection`

        :return: The selection of this LabelField.
        :rtype: List[str]
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this LabelField.

        Only present if `valueType` is `selection`

        :param selection: The selection of this LabelField.
        :type selection: List[str]
        """

        self._selection = selection

    @property
    def text(self):
        """Gets the text of this LabelField.

        Only present if `valueType` is `text`.

        :return: The text of this LabelField.
        :rtype: List[str]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this LabelField.

        Only present if `valueType` is `text`.

        :param text: The text of this LabelField.
        :type text: List[str]
        """

        self._text = text

    @property
    def user(self):
        """Gets the user of this LabelField.

        Only present if `valueType` is `user`.

        :return: The user of this LabelField.
        :rtype: List[User]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LabelField.

        Only present if `valueType` is `user`.

        :param user: The user of this LabelField.
        :type user: List[User]
        """

        self._user = user

    @property
    def value_type(self):
        """Gets the value_type of this LabelField.

        The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`

        :return: The value_type of this LabelField.
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this LabelField.

        The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`

        :param value_type: The value_type of this LabelField.
        :type value_type: str
        """

        self._value_type = value_type
