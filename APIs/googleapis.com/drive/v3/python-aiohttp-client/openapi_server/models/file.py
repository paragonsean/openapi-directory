# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_restriction import ContentRestriction
from openapi_server.models.file_capabilities import FileCapabilities
from openapi_server.models.file_content_hints import FileContentHints
from openapi_server.models.file_image_media_metadata import FileImageMediaMetadata
from openapi_server.models.file_label_info import FileLabelInfo
from openapi_server.models.file_link_share_metadata import FileLinkShareMetadata
from openapi_server.models.file_shortcut_details import FileShortcutDetails
from openapi_server.models.file_video_media_metadata import FileVideoMediaMetadata
from openapi_server.models.permission import Permission
from openapi_server.models.user import User
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_properties: Dict[str, str]=None, capabilities: FileCapabilities=None, content_hints: FileContentHints=None, content_restrictions: List[ContentRestriction]=None, copy_requires_writer_permission: bool=None, created_time: datetime=None, description: str=None, drive_id: str=None, explicitly_trashed: bool=None, export_links: Dict[str, str]=None, file_extension: str=None, folder_color_rgb: str=None, full_file_extension: str=None, has_augmented_permissions: bool=None, has_thumbnail: bool=None, head_revision_id: str=None, icon_link: str=None, id: str=None, image_media_metadata: FileImageMediaMetadata=None, is_app_authorized: bool=None, kind: str='drive#file', label_info: FileLabelInfo=None, last_modifying_user: User=None, link_share_metadata: FileLinkShareMetadata=None, md5_checksum: str=None, mime_type: str=None, modified_by_me: bool=None, modified_by_me_time: datetime=None, modified_time: datetime=None, name: str=None, original_filename: str=None, owned_by_me: bool=None, owners: List[User]=None, parents: List[str]=None, permission_ids: List[str]=None, permissions: List[Permission]=None, properties: Dict[str, str]=None, quota_bytes_used: str=None, resource_key: str=None, sha1_checksum: str=None, sha256_checksum: str=None, shared: bool=None, shared_with_me_time: datetime=None, sharing_user: User=None, shortcut_details: FileShortcutDetails=None, size: str=None, spaces: List[str]=None, starred: bool=None, team_drive_id: str=None, thumbnail_link: str=None, thumbnail_version: str=None, trashed: bool=None, trashed_time: datetime=None, trashing_user: User=None, version: str=None, video_media_metadata: FileVideoMediaMetadata=None, viewed_by_me: bool=None, viewed_by_me_time: datetime=None, viewers_can_copy_content: bool=None, web_content_link: str=None, web_view_link: str=None, writers_can_share: bool=None):
        """File - a model defined in OpenAPI

        :param app_properties: The app_properties of this File.
        :param capabilities: The capabilities of this File.
        :param content_hints: The content_hints of this File.
        :param content_restrictions: The content_restrictions of this File.
        :param copy_requires_writer_permission: The copy_requires_writer_permission of this File.
        :param created_time: The created_time of this File.
        :param description: The description of this File.
        :param drive_id: The drive_id of this File.
        :param explicitly_trashed: The explicitly_trashed of this File.
        :param export_links: The export_links of this File.
        :param file_extension: The file_extension of this File.
        :param folder_color_rgb: The folder_color_rgb of this File.
        :param full_file_extension: The full_file_extension of this File.
        :param has_augmented_permissions: The has_augmented_permissions of this File.
        :param has_thumbnail: The has_thumbnail of this File.
        :param head_revision_id: The head_revision_id of this File.
        :param icon_link: The icon_link of this File.
        :param id: The id of this File.
        :param image_media_metadata: The image_media_metadata of this File.
        :param is_app_authorized: The is_app_authorized of this File.
        :param kind: The kind of this File.
        :param label_info: The label_info of this File.
        :param last_modifying_user: The last_modifying_user of this File.
        :param link_share_metadata: The link_share_metadata of this File.
        :param md5_checksum: The md5_checksum of this File.
        :param mime_type: The mime_type of this File.
        :param modified_by_me: The modified_by_me of this File.
        :param modified_by_me_time: The modified_by_me_time of this File.
        :param modified_time: The modified_time of this File.
        :param name: The name of this File.
        :param original_filename: The original_filename of this File.
        :param owned_by_me: The owned_by_me of this File.
        :param owners: The owners of this File.
        :param parents: The parents of this File.
        :param permission_ids: The permission_ids of this File.
        :param permissions: The permissions of this File.
        :param properties: The properties of this File.
        :param quota_bytes_used: The quota_bytes_used of this File.
        :param resource_key: The resource_key of this File.
        :param sha1_checksum: The sha1_checksum of this File.
        :param sha256_checksum: The sha256_checksum of this File.
        :param shared: The shared of this File.
        :param shared_with_me_time: The shared_with_me_time of this File.
        :param sharing_user: The sharing_user of this File.
        :param shortcut_details: The shortcut_details of this File.
        :param size: The size of this File.
        :param spaces: The spaces of this File.
        :param starred: The starred of this File.
        :param team_drive_id: The team_drive_id of this File.
        :param thumbnail_link: The thumbnail_link of this File.
        :param thumbnail_version: The thumbnail_version of this File.
        :param trashed: The trashed of this File.
        :param trashed_time: The trashed_time of this File.
        :param trashing_user: The trashing_user of this File.
        :param version: The version of this File.
        :param video_media_metadata: The video_media_metadata of this File.
        :param viewed_by_me: The viewed_by_me of this File.
        :param viewed_by_me_time: The viewed_by_me_time of this File.
        :param viewers_can_copy_content: The viewers_can_copy_content of this File.
        :param web_content_link: The web_content_link of this File.
        :param web_view_link: The web_view_link of this File.
        :param writers_can_share: The writers_can_share of this File.
        """
        self.openapi_types = {
            'app_properties': Dict[str, str],
            'capabilities': FileCapabilities,
            'content_hints': FileContentHints,
            'content_restrictions': List[ContentRestriction],
            'copy_requires_writer_permission': bool,
            'created_time': datetime,
            'description': str,
            'drive_id': str,
            'explicitly_trashed': bool,
            'export_links': Dict[str, str],
            'file_extension': str,
            'folder_color_rgb': str,
            'full_file_extension': str,
            'has_augmented_permissions': bool,
            'has_thumbnail': bool,
            'head_revision_id': str,
            'icon_link': str,
            'id': str,
            'image_media_metadata': FileImageMediaMetadata,
            'is_app_authorized': bool,
            'kind': str,
            'label_info': FileLabelInfo,
            'last_modifying_user': User,
            'link_share_metadata': FileLinkShareMetadata,
            'md5_checksum': str,
            'mime_type': str,
            'modified_by_me': bool,
            'modified_by_me_time': datetime,
            'modified_time': datetime,
            'name': str,
            'original_filename': str,
            'owned_by_me': bool,
            'owners': List[User],
            'parents': List[str],
            'permission_ids': List[str],
            'permissions': List[Permission],
            'properties': Dict[str, str],
            'quota_bytes_used': str,
            'resource_key': str,
            'sha1_checksum': str,
            'sha256_checksum': str,
            'shared': bool,
            'shared_with_me_time': datetime,
            'sharing_user': User,
            'shortcut_details': FileShortcutDetails,
            'size': str,
            'spaces': List[str],
            'starred': bool,
            'team_drive_id': str,
            'thumbnail_link': str,
            'thumbnail_version': str,
            'trashed': bool,
            'trashed_time': datetime,
            'trashing_user': User,
            'version': str,
            'video_media_metadata': FileVideoMediaMetadata,
            'viewed_by_me': bool,
            'viewed_by_me_time': datetime,
            'viewers_can_copy_content': bool,
            'web_content_link': str,
            'web_view_link': str,
            'writers_can_share': bool
        }

        self.attribute_map = {
            'app_properties': 'appProperties',
            'capabilities': 'capabilities',
            'content_hints': 'contentHints',
            'content_restrictions': 'contentRestrictions',
            'copy_requires_writer_permission': 'copyRequiresWriterPermission',
            'created_time': 'createdTime',
            'description': 'description',
            'drive_id': 'driveId',
            'explicitly_trashed': 'explicitlyTrashed',
            'export_links': 'exportLinks',
            'file_extension': 'fileExtension',
            'folder_color_rgb': 'folderColorRgb',
            'full_file_extension': 'fullFileExtension',
            'has_augmented_permissions': 'hasAugmentedPermissions',
            'has_thumbnail': 'hasThumbnail',
            'head_revision_id': 'headRevisionId',
            'icon_link': 'iconLink',
            'id': 'id',
            'image_media_metadata': 'imageMediaMetadata',
            'is_app_authorized': 'isAppAuthorized',
            'kind': 'kind',
            'label_info': 'labelInfo',
            'last_modifying_user': 'lastModifyingUser',
            'link_share_metadata': 'linkShareMetadata',
            'md5_checksum': 'md5Checksum',
            'mime_type': 'mimeType',
            'modified_by_me': 'modifiedByMe',
            'modified_by_me_time': 'modifiedByMeTime',
            'modified_time': 'modifiedTime',
            'name': 'name',
            'original_filename': 'originalFilename',
            'owned_by_me': 'ownedByMe',
            'owners': 'owners',
            'parents': 'parents',
            'permission_ids': 'permissionIds',
            'permissions': 'permissions',
            'properties': 'properties',
            'quota_bytes_used': 'quotaBytesUsed',
            'resource_key': 'resourceKey',
            'sha1_checksum': 'sha1Checksum',
            'sha256_checksum': 'sha256Checksum',
            'shared': 'shared',
            'shared_with_me_time': 'sharedWithMeTime',
            'sharing_user': 'sharingUser',
            'shortcut_details': 'shortcutDetails',
            'size': 'size',
            'spaces': 'spaces',
            'starred': 'starred',
            'team_drive_id': 'teamDriveId',
            'thumbnail_link': 'thumbnailLink',
            'thumbnail_version': 'thumbnailVersion',
            'trashed': 'trashed',
            'trashed_time': 'trashedTime',
            'trashing_user': 'trashingUser',
            'version': 'version',
            'video_media_metadata': 'videoMediaMetadata',
            'viewed_by_me': 'viewedByMe',
            'viewed_by_me_time': 'viewedByMeTime',
            'viewers_can_copy_content': 'viewersCanCopyContent',
            'web_content_link': 'webContentLink',
            'web_view_link': 'webViewLink',
            'writers_can_share': 'writersCanShare'
        }

        self._app_properties = app_properties
        self._capabilities = capabilities
        self._content_hints = content_hints
        self._content_restrictions = content_restrictions
        self._copy_requires_writer_permission = copy_requires_writer_permission
        self._created_time = created_time
        self._description = description
        self._drive_id = drive_id
        self._explicitly_trashed = explicitly_trashed
        self._export_links = export_links
        self._file_extension = file_extension
        self._folder_color_rgb = folder_color_rgb
        self._full_file_extension = full_file_extension
        self._has_augmented_permissions = has_augmented_permissions
        self._has_thumbnail = has_thumbnail
        self._head_revision_id = head_revision_id
        self._icon_link = icon_link
        self._id = id
        self._image_media_metadata = image_media_metadata
        self._is_app_authorized = is_app_authorized
        self._kind = kind
        self._label_info = label_info
        self._last_modifying_user = last_modifying_user
        self._link_share_metadata = link_share_metadata
        self._md5_checksum = md5_checksum
        self._mime_type = mime_type
        self._modified_by_me = modified_by_me
        self._modified_by_me_time = modified_by_me_time
        self._modified_time = modified_time
        self._name = name
        self._original_filename = original_filename
        self._owned_by_me = owned_by_me
        self._owners = owners
        self._parents = parents
        self._permission_ids = permission_ids
        self._permissions = permissions
        self._properties = properties
        self._quota_bytes_used = quota_bytes_used
        self._resource_key = resource_key
        self._sha1_checksum = sha1_checksum
        self._sha256_checksum = sha256_checksum
        self._shared = shared
        self._shared_with_me_time = shared_with_me_time
        self._sharing_user = sharing_user
        self._shortcut_details = shortcut_details
        self._size = size
        self._spaces = spaces
        self._starred = starred
        self._team_drive_id = team_drive_id
        self._thumbnail_link = thumbnail_link
        self._thumbnail_version = thumbnail_version
        self._trashed = trashed
        self._trashed_time = trashed_time
        self._trashing_user = trashing_user
        self._version = version
        self._video_media_metadata = video_media_metadata
        self._viewed_by_me = viewed_by_me
        self._viewed_by_me_time = viewed_by_me_time
        self._viewers_can_copy_content = viewers_can_copy_content
        self._web_content_link = web_content_link
        self._web_view_link = web_view_link
        self._writers_can_share = writers_can_share

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_properties(self):
        """Gets the app_properties of this File.

        A collection of arbitrary key-value pairs which are private to the requesting app. Entries with null values are cleared in update and copy requests. These properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.

        :return: The app_properties of this File.
        :rtype: Dict[str, str]
        """
        return self._app_properties

    @app_properties.setter
    def app_properties(self, app_properties):
        """Sets the app_properties of this File.

        A collection of arbitrary key-value pairs which are private to the requesting app. Entries with null values are cleared in update and copy requests. These properties can only be retrieved using an authenticated request. An authenticated request uses an access token obtained with a OAuth 2 client ID. You cannot use an API key to retrieve private properties.

        :param app_properties: The app_properties of this File.
        :type app_properties: Dict[str, str]
        """

        self._app_properties = app_properties

    @property
    def capabilities(self):
        """Gets the capabilities of this File.


        :return: The capabilities of this File.
        :rtype: FileCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this File.


        :param capabilities: The capabilities of this File.
        :type capabilities: FileCapabilities
        """

        self._capabilities = capabilities

    @property
    def content_hints(self):
        """Gets the content_hints of this File.


        :return: The content_hints of this File.
        :rtype: FileContentHints
        """
        return self._content_hints

    @content_hints.setter
    def content_hints(self, content_hints):
        """Sets the content_hints of this File.


        :param content_hints: The content_hints of this File.
        :type content_hints: FileContentHints
        """

        self._content_hints = content_hints

    @property
    def content_restrictions(self):
        """Gets the content_restrictions of this File.

        Restrictions for accessing the content of the file. Only populated if such a restriction exists.

        :return: The content_restrictions of this File.
        :rtype: List[ContentRestriction]
        """
        return self._content_restrictions

    @content_restrictions.setter
    def content_restrictions(self, content_restrictions):
        """Sets the content_restrictions of this File.

        Restrictions for accessing the content of the file. Only populated if such a restriction exists.

        :param content_restrictions: The content_restrictions of this File.
        :type content_restrictions: List[ContentRestriction]
        """

        self._content_restrictions = content_restrictions

    @property
    def copy_requires_writer_permission(self):
        """Gets the copy_requires_writer_permission of this File.

        Whether the options to copy, print, or download this file, should be disabled for readers and commenters.

        :return: The copy_requires_writer_permission of this File.
        :rtype: bool
        """
        return self._copy_requires_writer_permission

    @copy_requires_writer_permission.setter
    def copy_requires_writer_permission(self, copy_requires_writer_permission):
        """Sets the copy_requires_writer_permission of this File.

        Whether the options to copy, print, or download this file, should be disabled for readers and commenters.

        :param copy_requires_writer_permission: The copy_requires_writer_permission of this File.
        :type copy_requires_writer_permission: bool
        """

        self._copy_requires_writer_permission = copy_requires_writer_permission

    @property
    def created_time(self):
        """Gets the created_time of this File.

        The time at which the file was created (RFC 3339 date-time).

        :return: The created_time of this File.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this File.

        The time at which the file was created (RFC 3339 date-time).

        :param created_time: The created_time of this File.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this File.

        A short description of the file.

        :return: The description of this File.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        A short description of the file.

        :param description: The description of this File.
        :type description: str
        """

        self._description = description

    @property
    def drive_id(self):
        """Gets the drive_id of this File.

        Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.

        :return: The drive_id of this File.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this File.

        Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.

        :param drive_id: The drive_id of this File.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def explicitly_trashed(self):
        """Gets the explicitly_trashed of this File.

        Output only. Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.

        :return: The explicitly_trashed of this File.
        :rtype: bool
        """
        return self._explicitly_trashed

    @explicitly_trashed.setter
    def explicitly_trashed(self, explicitly_trashed):
        """Sets the explicitly_trashed of this File.

        Output only. Whether the file has been explicitly trashed, as opposed to recursively trashed from a parent folder.

        :param explicitly_trashed: The explicitly_trashed of this File.
        :type explicitly_trashed: bool
        """

        self._explicitly_trashed = explicitly_trashed

    @property
    def export_links(self):
        """Gets the export_links of this File.

        Output only. Links for exporting Docs Editors files to specific formats.

        :return: The export_links of this File.
        :rtype: Dict[str, str]
        """
        return self._export_links

    @export_links.setter
    def export_links(self, export_links):
        """Sets the export_links of this File.

        Output only. Links for exporting Docs Editors files to specific formats.

        :param export_links: The export_links of this File.
        :type export_links: Dict[str, str]
        """

        self._export_links = export_links

    @property
    def file_extension(self):
        """Gets the file_extension of this File.

        Output only. The final component of `fullFileExtension`. This is only available for files with binary content in Google Drive.

        :return: The file_extension of this File.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this File.

        Output only. The final component of `fullFileExtension`. This is only available for files with binary content in Google Drive.

        :param file_extension: The file_extension of this File.
        :type file_extension: str
        """

        self._file_extension = file_extension

    @property
    def folder_color_rgb(self):
        """Gets the folder_color_rgb of this File.

        The color for a folder or a shortcut to a folder as an RGB hex string. The supported colors are published in the `folderColorPalette` field of the About resource. If an unsupported color is specified, the closest color in the palette is used instead.

        :return: The folder_color_rgb of this File.
        :rtype: str
        """
        return self._folder_color_rgb

    @folder_color_rgb.setter
    def folder_color_rgb(self, folder_color_rgb):
        """Sets the folder_color_rgb of this File.

        The color for a folder or a shortcut to a folder as an RGB hex string. The supported colors are published in the `folderColorPalette` field of the About resource. If an unsupported color is specified, the closest color in the palette is used instead.

        :param folder_color_rgb: The folder_color_rgb of this File.
        :type folder_color_rgb: str
        """

        self._folder_color_rgb = folder_color_rgb

    @property
    def full_file_extension(self):
        """Gets the full_file_extension of this File.

        Output only. The full file extension extracted from the `name` field. May contain multiple concatenated extensions, such as \"tar.gz\". This is only available for files with binary content in Google Drive. This is automatically updated when the `name` field changes, however it is not cleared if the new name does not contain a valid extension.

        :return: The full_file_extension of this File.
        :rtype: str
        """
        return self._full_file_extension

    @full_file_extension.setter
    def full_file_extension(self, full_file_extension):
        """Sets the full_file_extension of this File.

        Output only. The full file extension extracted from the `name` field. May contain multiple concatenated extensions, such as \"tar.gz\". This is only available for files with binary content in Google Drive. This is automatically updated when the `name` field changes, however it is not cleared if the new name does not contain a valid extension.

        :param full_file_extension: The full_file_extension of this File.
        :type full_file_extension: str
        """

        self._full_file_extension = full_file_extension

    @property
    def has_augmented_permissions(self):
        """Gets the has_augmented_permissions of this File.

        Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.

        :return: The has_augmented_permissions of this File.
        :rtype: bool
        """
        return self._has_augmented_permissions

    @has_augmented_permissions.setter
    def has_augmented_permissions(self, has_augmented_permissions):
        """Sets the has_augmented_permissions of this File.

        Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.

        :param has_augmented_permissions: The has_augmented_permissions of this File.
        :type has_augmented_permissions: bool
        """

        self._has_augmented_permissions = has_augmented_permissions

    @property
    def has_thumbnail(self):
        """Gets the has_thumbnail of this File.

        Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.

        :return: The has_thumbnail of this File.
        :rtype: bool
        """
        return self._has_thumbnail

    @has_thumbnail.setter
    def has_thumbnail(self, has_thumbnail):
        """Sets the has_thumbnail of this File.

        Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.

        :param has_thumbnail: The has_thumbnail of this File.
        :type has_thumbnail: bool
        """

        self._has_thumbnail = has_thumbnail

    @property
    def head_revision_id(self):
        """Gets the head_revision_id of this File.

        Output only. The ID of the file's head revision. This is currently only available for files with binary content in Google Drive.

        :return: The head_revision_id of this File.
        :rtype: str
        """
        return self._head_revision_id

    @head_revision_id.setter
    def head_revision_id(self, head_revision_id):
        """Sets the head_revision_id of this File.

        Output only. The ID of the file's head revision. This is currently only available for files with binary content in Google Drive.

        :param head_revision_id: The head_revision_id of this File.
        :type head_revision_id: str
        """

        self._head_revision_id = head_revision_id

    @property
    def icon_link(self):
        """Gets the icon_link of this File.

        Output only. A static, unauthenticated link to the file's icon.

        :return: The icon_link of this File.
        :rtype: str
        """
        return self._icon_link

    @icon_link.setter
    def icon_link(self, icon_link):
        """Sets the icon_link of this File.

        Output only. A static, unauthenticated link to the file's icon.

        :param icon_link: The icon_link of this File.
        :type icon_link: str
        """

        self._icon_link = icon_link

    @property
    def id(self):
        """Gets the id of this File.

        The ID of the file.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The ID of the file.

        :param id: The id of this File.
        :type id: str
        """

        self._id = id

    @property
    def image_media_metadata(self):
        """Gets the image_media_metadata of this File.


        :return: The image_media_metadata of this File.
        :rtype: FileImageMediaMetadata
        """
        return self._image_media_metadata

    @image_media_metadata.setter
    def image_media_metadata(self, image_media_metadata):
        """Sets the image_media_metadata of this File.


        :param image_media_metadata: The image_media_metadata of this File.
        :type image_media_metadata: FileImageMediaMetadata
        """

        self._image_media_metadata = image_media_metadata

    @property
    def is_app_authorized(self):
        """Gets the is_app_authorized of this File.

        Output only. Whether the file was created or opened by the requesting app.

        :return: The is_app_authorized of this File.
        :rtype: bool
        """
        return self._is_app_authorized

    @is_app_authorized.setter
    def is_app_authorized(self, is_app_authorized):
        """Sets the is_app_authorized of this File.

        Output only. Whether the file was created or opened by the requesting app.

        :param is_app_authorized: The is_app_authorized of this File.
        :type is_app_authorized: bool
        """

        self._is_app_authorized = is_app_authorized

    @property
    def kind(self):
        """Gets the kind of this File.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#file\"`.

        :return: The kind of this File.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this File.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#file\"`.

        :param kind: The kind of this File.
        :type kind: str
        """

        self._kind = kind

    @property
    def label_info(self):
        """Gets the label_info of this File.


        :return: The label_info of this File.
        :rtype: FileLabelInfo
        """
        return self._label_info

    @label_info.setter
    def label_info(self, label_info):
        """Sets the label_info of this File.


        :param label_info: The label_info of this File.
        :type label_info: FileLabelInfo
        """

        self._label_info = label_info

    @property
    def last_modifying_user(self):
        """Gets the last_modifying_user of this File.


        :return: The last_modifying_user of this File.
        :rtype: User
        """
        return self._last_modifying_user

    @last_modifying_user.setter
    def last_modifying_user(self, last_modifying_user):
        """Sets the last_modifying_user of this File.


        :param last_modifying_user: The last_modifying_user of this File.
        :type last_modifying_user: User
        """

        self._last_modifying_user = last_modifying_user

    @property
    def link_share_metadata(self):
        """Gets the link_share_metadata of this File.


        :return: The link_share_metadata of this File.
        :rtype: FileLinkShareMetadata
        """
        return self._link_share_metadata

    @link_share_metadata.setter
    def link_share_metadata(self, link_share_metadata):
        """Sets the link_share_metadata of this File.


        :param link_share_metadata: The link_share_metadata of this File.
        :type link_share_metadata: FileLinkShareMetadata
        """

        self._link_share_metadata = link_share_metadata

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this File.

        Output only. The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.

        :return: The md5_checksum of this File.
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this File.

        Output only. The MD5 checksum for the content of the file. This is only applicable to files with binary content in Google Drive.

        :param md5_checksum: The md5_checksum of this File.
        :type md5_checksum: str
        """

        self._md5_checksum = md5_checksum

    @property
    def mime_type(self):
        """Gets the mime_type of this File.

        The MIME type of the file. Google Drive attempts to automatically detect an appropriate value from uploaded content, if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content is imported, if possible. The supported import formats are published in the About resource.

        :return: The mime_type of this File.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this File.

        The MIME type of the file. Google Drive attempts to automatically detect an appropriate value from uploaded content, if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content is imported, if possible. The supported import formats are published in the About resource.

        :param mime_type: The mime_type of this File.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def modified_by_me(self):
        """Gets the modified_by_me of this File.

        Output only. Whether the file has been modified by this user.

        :return: The modified_by_me of this File.
        :rtype: bool
        """
        return self._modified_by_me

    @modified_by_me.setter
    def modified_by_me(self, modified_by_me):
        """Sets the modified_by_me of this File.

        Output only. Whether the file has been modified by this user.

        :param modified_by_me: The modified_by_me of this File.
        :type modified_by_me: bool
        """

        self._modified_by_me = modified_by_me

    @property
    def modified_by_me_time(self):
        """Gets the modified_by_me_time of this File.

        The last time the file was modified by the user (RFC 3339 date-time).

        :return: The modified_by_me_time of this File.
        :rtype: datetime
        """
        return self._modified_by_me_time

    @modified_by_me_time.setter
    def modified_by_me_time(self, modified_by_me_time):
        """Sets the modified_by_me_time of this File.

        The last time the file was modified by the user (RFC 3339 date-time).

        :param modified_by_me_time: The modified_by_me_time of this File.
        :type modified_by_me_time: datetime
        """

        self._modified_by_me_time = modified_by_me_time

    @property
    def modified_time(self):
        """Gets the modified_time of this File.

        he last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user.

        :return: The modified_time of this File.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this File.

        he last time the file was modified by anyone (RFC 3339 date-time). Note that setting modifiedTime will also update modifiedByMeTime for the user.

        :param modified_time: The modified_time of this File.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def name(self):
        """Gets the name of this File.

        The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the name is constant.

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        The name of the file. This is not necessarily unique within a folder. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the name is constant.

        :param name: The name of this File.
        :type name: str
        """

        self._name = name

    @property
    def original_filename(self):
        """Gets the original_filename of this File.

        The original filename of the uploaded content if available, or else the original value of the `name` field. This is only available for files with binary content in Google Drive.

        :return: The original_filename of this File.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this File.

        The original filename of the uploaded content if available, or else the original value of the `name` field. This is only available for files with binary content in Google Drive.

        :param original_filename: The original_filename of this File.
        :type original_filename: str
        """

        self._original_filename = original_filename

    @property
    def owned_by_me(self):
        """Gets the owned_by_me of this File.

        Output only. Whether the user owns the file. Not populated for items in shared drives.

        :return: The owned_by_me of this File.
        :rtype: bool
        """
        return self._owned_by_me

    @owned_by_me.setter
    def owned_by_me(self, owned_by_me):
        """Sets the owned_by_me of this File.

        Output only. Whether the user owns the file. Not populated for items in shared drives.

        :param owned_by_me: The owned_by_me of this File.
        :type owned_by_me: bool
        """

        self._owned_by_me = owned_by_me

    @property
    def owners(self):
        """Gets the owners of this File.

        Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.

        :return: The owners of this File.
        :rtype: List[User]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this File.

        Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.

        :param owners: The owners of this File.
        :type owners: List[User]
        """

        self._owners = owners

    @property
    def parents(self):
        """Gets the parents of this File.

        The IDs of the parent folders which contain the file. If not specified as part of a create request, the file is placed directly in the user's My Drive folder. If not specified as part of a copy request, the file inherits any discoverable parents of the source file. Update requests must use the `addParents` and `removeParents` parameters to modify the parents list.

        :return: The parents of this File.
        :rtype: List[str]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this File.

        The IDs of the parent folders which contain the file. If not specified as part of a create request, the file is placed directly in the user's My Drive folder. If not specified as part of a copy request, the file inherits any discoverable parents of the source file. Update requests must use the `addParents` and `removeParents` parameters to modify the parents list.

        :param parents: The parents of this File.
        :type parents: List[str]
        """

        self._parents = parents

    @property
    def permission_ids(self):
        """Gets the permission_ids of this File.

        Output only. List of permission IDs for users with access to this file.

        :return: The permission_ids of this File.
        :rtype: List[str]
        """
        return self._permission_ids

    @permission_ids.setter
    def permission_ids(self, permission_ids):
        """Sets the permission_ids of this File.

        Output only. List of permission IDs for users with access to this file.

        :param permission_ids: The permission_ids of this File.
        :type permission_ids: List[str]
        """

        self._permission_ids = permission_ids

    @property
    def permissions(self):
        """Gets the permissions of this File.

        Output only. The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for items in shared drives.

        :return: The permissions of this File.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this File.

        Output only. The full list of permissions for the file. This is only available if the requesting user can share the file. Not populated for items in shared drives.

        :param permissions: The permissions of this File.
        :type permissions: List[Permission]
        """

        self._permissions = permissions

    @property
    def properties(self):
        """Gets the properties of this File.

        A collection of arbitrary key-value pairs which are visible to all apps. Entries with null values are cleared in update and copy requests.

        :return: The properties of this File.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this File.

        A collection of arbitrary key-value pairs which are visible to all apps. Entries with null values are cleared in update and copy requests.

        :param properties: The properties of this File.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def quota_bytes_used(self):
        """Gets the quota_bytes_used of this File.

        Output only. The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with `keepForever` enabled.

        :return: The quota_bytes_used of this File.
        :rtype: str
        """
        return self._quota_bytes_used

    @quota_bytes_used.setter
    def quota_bytes_used(self, quota_bytes_used):
        """Sets the quota_bytes_used of this File.

        Output only. The number of storage quota bytes used by the file. This includes the head revision as well as previous revisions with `keepForever` enabled.

        :param quota_bytes_used: The quota_bytes_used of this File.
        :type quota_bytes_used: str
        """

        self._quota_bytes_used = quota_bytes_used

    @property
    def resource_key(self):
        """Gets the resource_key of this File.

        Output only. A key needed to access the item via a shared link.

        :return: The resource_key of this File.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this File.

        Output only. A key needed to access the item via a shared link.

        :param resource_key: The resource_key of this File.
        :type resource_key: str
        """

        self._resource_key = resource_key

    @property
    def sha1_checksum(self):
        """Gets the sha1_checksum of this File.

        Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The sha1_checksum of this File.
        :rtype: str
        """
        return self._sha1_checksum

    @sha1_checksum.setter
    def sha1_checksum(self, sha1_checksum):
        """Sets the sha1_checksum of this File.

        Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param sha1_checksum: The sha1_checksum of this File.
        :type sha1_checksum: str
        """

        self._sha1_checksum = sha1_checksum

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this File.

        Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The sha256_checksum of this File.
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this File.

        Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param sha256_checksum: The sha256_checksum of this File.
        :type sha256_checksum: str
        """

        self._sha256_checksum = sha256_checksum

    @property
    def shared(self):
        """Gets the shared of this File.

        Output only. Whether the file has been shared. Not populated for items in shared drives.

        :return: The shared of this File.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this File.

        Output only. Whether the file has been shared. Not populated for items in shared drives.

        :param shared: The shared of this File.
        :type shared: bool
        """

        self._shared = shared

    @property
    def shared_with_me_time(self):
        """Gets the shared_with_me_time of this File.

        The time at which the file was shared with the user, if applicable (RFC 3339 date-time).

        :return: The shared_with_me_time of this File.
        :rtype: datetime
        """
        return self._shared_with_me_time

    @shared_with_me_time.setter
    def shared_with_me_time(self, shared_with_me_time):
        """Sets the shared_with_me_time of this File.

        The time at which the file was shared with the user, if applicable (RFC 3339 date-time).

        :param shared_with_me_time: The shared_with_me_time of this File.
        :type shared_with_me_time: datetime
        """

        self._shared_with_me_time = shared_with_me_time

    @property
    def sharing_user(self):
        """Gets the sharing_user of this File.


        :return: The sharing_user of this File.
        :rtype: User
        """
        return self._sharing_user

    @sharing_user.setter
    def sharing_user(self, sharing_user):
        """Sets the sharing_user of this File.


        :param sharing_user: The sharing_user of this File.
        :type sharing_user: User
        """

        self._sharing_user = sharing_user

    @property
    def shortcut_details(self):
        """Gets the shortcut_details of this File.


        :return: The shortcut_details of this File.
        :rtype: FileShortcutDetails
        """
        return self._shortcut_details

    @shortcut_details.setter
    def shortcut_details(self, shortcut_details):
        """Sets the shortcut_details of this File.


        :param shortcut_details: The shortcut_details of this File.
        :type shortcut_details: FileShortcutDetails
        """

        self._shortcut_details = shortcut_details

    @property
    def size(self):
        """Gets the size of this File.

        Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.

        :return: The size of this File.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.

        :param size: The size of this File.
        :type size: str
        """

        self._size = size

    @property
    def spaces(self):
        """Gets the spaces of this File.

        Output only. The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.

        :return: The spaces of this File.
        :rtype: List[str]
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """Sets the spaces of this File.

        Output only. The list of spaces which contain the file. The currently supported values are 'drive', 'appDataFolder' and 'photos'.

        :param spaces: The spaces of this File.
        :type spaces: List[str]
        """

        self._spaces = spaces

    @property
    def starred(self):
        """Gets the starred of this File.

        Whether the user has starred the file.

        :return: The starred of this File.
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this File.

        Whether the user has starred the file.

        :param starred: The starred of this File.
        :type starred: bool
        """

        self._starred = starred

    @property
    def team_drive_id(self):
        """Gets the team_drive_id of this File.

        Deprecated: Output only. Use `driveId` instead.

        :return: The team_drive_id of this File.
        :rtype: str
        """
        return self._team_drive_id

    @team_drive_id.setter
    def team_drive_id(self, team_drive_id):
        """Sets the team_drive_id of this File.

        Deprecated: Output only. Use `driveId` instead.

        :param team_drive_id: The team_drive_id of this File.
        :type team_drive_id: str
        """

        self._team_drive_id = team_drive_id

    @property
    def thumbnail_link(self):
        """Gets the thumbnail_link of this File.

        Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.

        :return: The thumbnail_link of this File.
        :rtype: str
        """
        return self._thumbnail_link

    @thumbnail_link.setter
    def thumbnail_link(self, thumbnail_link):
        """Sets the thumbnail_link of this File.

        Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.

        :param thumbnail_link: The thumbnail_link of this File.
        :type thumbnail_link: str
        """

        self._thumbnail_link = thumbnail_link

    @property
    def thumbnail_version(self):
        """Gets the thumbnail_version of this File.

        Output only. The thumbnail version for use in thumbnail cache invalidation.

        :return: The thumbnail_version of this File.
        :rtype: str
        """
        return self._thumbnail_version

    @thumbnail_version.setter
    def thumbnail_version(self, thumbnail_version):
        """Sets the thumbnail_version of this File.

        Output only. The thumbnail version for use in thumbnail cache invalidation.

        :param thumbnail_version: The thumbnail_version of this File.
        :type thumbnail_version: str
        """

        self._thumbnail_version = thumbnail_version

    @property
    def trashed(self):
        """Gets the trashed of this File.

        Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash.

        :return: The trashed of this File.
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this File.

        Whether the file has been trashed, either explicitly or from a trashed parent folder. Only the owner may trash a file, and other users cannot see files in the owner's trash.

        :param trashed: The trashed of this File.
        :type trashed: bool
        """

        self._trashed = trashed

    @property
    def trashed_time(self):
        """Gets the trashed_time of this File.

        The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared drives.

        :return: The trashed_time of this File.
        :rtype: datetime
        """
        return self._trashed_time

    @trashed_time.setter
    def trashed_time(self, trashed_time):
        """Sets the trashed_time of this File.

        The time that the item was trashed (RFC 3339 date-time). Only populated for items in shared drives.

        :param trashed_time: The trashed_time of this File.
        :type trashed_time: datetime
        """

        self._trashed_time = trashed_time

    @property
    def trashing_user(self):
        """Gets the trashing_user of this File.


        :return: The trashing_user of this File.
        :rtype: User
        """
        return self._trashing_user

    @trashing_user.setter
    def trashing_user(self, trashing_user):
        """Sets the trashing_user of this File.


        :param trashing_user: The trashing_user of this File.
        :type trashing_user: User
        """

        self._trashing_user = trashing_user

    @property
    def version(self):
        """Gets the version of this File.

        Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.

        :return: The version of this File.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this File.

        Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the user.

        :param version: The version of this File.
        :type version: str
        """

        self._version = version

    @property
    def video_media_metadata(self):
        """Gets the video_media_metadata of this File.


        :return: The video_media_metadata of this File.
        :rtype: FileVideoMediaMetadata
        """
        return self._video_media_metadata

    @video_media_metadata.setter
    def video_media_metadata(self, video_media_metadata):
        """Sets the video_media_metadata of this File.


        :param video_media_metadata: The video_media_metadata of this File.
        :type video_media_metadata: FileVideoMediaMetadata
        """

        self._video_media_metadata = video_media_metadata

    @property
    def viewed_by_me(self):
        """Gets the viewed_by_me of this File.

        Output only. Whether the file has been viewed by this user.

        :return: The viewed_by_me of this File.
        :rtype: bool
        """
        return self._viewed_by_me

    @viewed_by_me.setter
    def viewed_by_me(self, viewed_by_me):
        """Sets the viewed_by_me of this File.

        Output only. Whether the file has been viewed by this user.

        :param viewed_by_me: The viewed_by_me of this File.
        :type viewed_by_me: bool
        """

        self._viewed_by_me = viewed_by_me

    @property
    def viewed_by_me_time(self):
        """Gets the viewed_by_me_time of this File.

        The last time the file was viewed by the user (RFC 3339 date-time).

        :return: The viewed_by_me_time of this File.
        :rtype: datetime
        """
        return self._viewed_by_me_time

    @viewed_by_me_time.setter
    def viewed_by_me_time(self, viewed_by_me_time):
        """Sets the viewed_by_me_time of this File.

        The last time the file was viewed by the user (RFC 3339 date-time).

        :param viewed_by_me_time: The viewed_by_me_time of this File.
        :type viewed_by_me_time: datetime
        """

        self._viewed_by_me_time = viewed_by_me_time

    @property
    def viewers_can_copy_content(self):
        """Gets the viewers_can_copy_content of this File.

        Deprecated: Use `copyRequiresWriterPermission` instead.

        :return: The viewers_can_copy_content of this File.
        :rtype: bool
        """
        return self._viewers_can_copy_content

    @viewers_can_copy_content.setter
    def viewers_can_copy_content(self, viewers_can_copy_content):
        """Sets the viewers_can_copy_content of this File.

        Deprecated: Use `copyRequiresWriterPermission` instead.

        :param viewers_can_copy_content: The viewers_can_copy_content of this File.
        :type viewers_can_copy_content: bool
        """

        self._viewers_can_copy_content = viewers_can_copy_content

    @property
    def web_content_link(self):
        """Gets the web_content_link of this File.

        Output only. A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.

        :return: The web_content_link of this File.
        :rtype: str
        """
        return self._web_content_link

    @web_content_link.setter
    def web_content_link(self, web_content_link):
        """Sets the web_content_link of this File.

        Output only. A link for downloading the content of the file in a browser. This is only available for files with binary content in Google Drive.

        :param web_content_link: The web_content_link of this File.
        :type web_content_link: str
        """

        self._web_content_link = web_content_link

    @property
    def web_view_link(self):
        """Gets the web_view_link of this File.

        Output only. A link for opening the file in a relevant Google editor or viewer in a browser.

        :return: The web_view_link of this File.
        :rtype: str
        """
        return self._web_view_link

    @web_view_link.setter
    def web_view_link(self, web_view_link):
        """Sets the web_view_link of this File.

        Output only. A link for opening the file in a relevant Google editor or viewer in a browser.

        :param web_view_link: The web_view_link of this File.
        :type web_view_link: str
        """

        self._web_view_link = web_view_link

    @property
    def writers_can_share(self):
        """Gets the writers_can_share of this File.

        Whether users with only `writer` permission can modify the file's permissions. Not populated for items in shared drives.

        :return: The writers_can_share of this File.
        :rtype: bool
        """
        return self._writers_can_share

    @writers_can_share.setter
    def writers_can_share(self, writers_can_share):
        """Sets the writers_can_share of this File.

        Whether users with only `writer` permission can modify the file's permissions. Not populated for items in shared drives.

        :param writers_can_share: The writers_can_share of this File.
        :type writers_can_share: bool
        """

        self._writers_can_share = writers_can_share
