# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reply import Reply
from openapi_server import util


class ReplyList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str='drive#replyList', next_page_token: str=None, replies: List[Reply]=None):
        """ReplyList - a model defined in OpenAPI

        :param kind: The kind of this ReplyList.
        :param next_page_token: The next_page_token of this ReplyList.
        :param replies: The replies of this ReplyList.
        """
        self.openapi_types = {
            'kind': str,
            'next_page_token': str,
            'replies': List[Reply]
        }

        self.attribute_map = {
            'kind': 'kind',
            'next_page_token': 'nextPageToken',
            'replies': 'replies'
        }

        self._kind = kind
        self._next_page_token = next_page_token
        self._replies = replies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplyList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplyList of this ReplyList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this ReplyList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#replyList\"`.

        :return: The kind of this ReplyList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReplyList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#replyList\"`.

        :param kind: The kind of this ReplyList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ReplyList.

        The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :return: The next_page_token of this ReplyList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ReplyList.

        The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :param next_page_token: The next_page_token of this ReplyList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def replies(self):
        """Gets the replies of this ReplyList.

        The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The replies of this ReplyList.
        :rtype: List[Reply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this ReplyList.

        The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param replies: The replies of this ReplyList.
        :type replies: List[Reply]
        """

        self._replies = replies
