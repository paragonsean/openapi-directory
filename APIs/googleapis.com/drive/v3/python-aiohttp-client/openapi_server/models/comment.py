# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_quoted_file_content import CommentQuotedFileContent
from openapi_server.models.reply import Reply
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anchor: str=None, author: User=None, content: str=None, created_time: datetime=None, deleted: bool=None, html_content: str=None, id: str=None, kind: str='drive#comment', modified_time: datetime=None, quoted_file_content: CommentQuotedFileContent=None, replies: List[Reply]=None, resolved: bool=None):
        """Comment - a model defined in OpenAPI

        :param anchor: The anchor of this Comment.
        :param author: The author of this Comment.
        :param content: The content of this Comment.
        :param created_time: The created_time of this Comment.
        :param deleted: The deleted of this Comment.
        :param html_content: The html_content of this Comment.
        :param id: The id of this Comment.
        :param kind: The kind of this Comment.
        :param modified_time: The modified_time of this Comment.
        :param quoted_file_content: The quoted_file_content of this Comment.
        :param replies: The replies of this Comment.
        :param resolved: The resolved of this Comment.
        """
        self.openapi_types = {
            'anchor': str,
            'author': User,
            'content': str,
            'created_time': datetime,
            'deleted': bool,
            'html_content': str,
            'id': str,
            'kind': str,
            'modified_time': datetime,
            'quoted_file_content': CommentQuotedFileContent,
            'replies': List[Reply],
            'resolved': bool
        }

        self.attribute_map = {
            'anchor': 'anchor',
            'author': 'author',
            'content': 'content',
            'created_time': 'createdTime',
            'deleted': 'deleted',
            'html_content': 'htmlContent',
            'id': 'id',
            'kind': 'kind',
            'modified_time': 'modifiedTime',
            'quoted_file_content': 'quotedFileContent',
            'replies': 'replies',
            'resolved': 'resolved'
        }

        self._anchor = anchor
        self._author = author
        self._content = content
        self._created_time = created_time
        self._deleted = deleted
        self._html_content = html_content
        self._id = id
        self._kind = kind
        self._modified_time = modified_time
        self._quoted_file_content = quoted_file_content
        self._replies = replies
        self._resolved = resolved

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anchor(self):
        """Gets the anchor of this Comment.

        A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).

        :return: The anchor of this Comment.
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this Comment.

        A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).

        :param anchor: The anchor of this Comment.
        :type anchor: str
        """

        self._anchor = anchor

    @property
    def author(self):
        """Gets the author of this Comment.


        :return: The author of this Comment.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Comment.


        :param author: The author of this Comment.
        :type author: User
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this Comment.

        The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.

        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.

        The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.

        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def created_time(self):
        """Gets the created_time of this Comment.

        The time at which the comment was created (RFC 3339 date-time).

        :return: The created_time of this Comment.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Comment.

        The time at which the comment was created (RFC 3339 date-time).

        :param created_time: The created_time of this Comment.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def deleted(self):
        """Gets the deleted of this Comment.

        Output only. Whether the comment has been deleted. A deleted comment has no content.

        :return: The deleted of this Comment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Comment.

        Output only. Whether the comment has been deleted. A deleted comment has no content.

        :param deleted: The deleted of this Comment.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def html_content(self):
        """Gets the html_content of this Comment.

        Output only. The content of the comment with HTML formatting.

        :return: The html_content of this Comment.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """Sets the html_content of this Comment.

        Output only. The content of the comment with HTML formatting.

        :param html_content: The html_content of this Comment.
        :type html_content: str
        """

        self._html_content = html_content

    @property
    def id(self):
        """Gets the id of this Comment.

        Output only. The ID of the comment.

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        Output only. The ID of the comment.

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Comment.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#comment\"`.

        :return: The kind of this Comment.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Comment.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#comment\"`.

        :param kind: The kind of this Comment.
        :type kind: str
        """

        self._kind = kind

    @property
    def modified_time(self):
        """Gets the modified_time of this Comment.

        The last time the comment or any of its replies was modified (RFC 3339 date-time).

        :return: The modified_time of this Comment.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Comment.

        The last time the comment or any of its replies was modified (RFC 3339 date-time).

        :param modified_time: The modified_time of this Comment.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def quoted_file_content(self):
        """Gets the quoted_file_content of this Comment.


        :return: The quoted_file_content of this Comment.
        :rtype: CommentQuotedFileContent
        """
        return self._quoted_file_content

    @quoted_file_content.setter
    def quoted_file_content(self, quoted_file_content):
        """Sets the quoted_file_content of this Comment.


        :param quoted_file_content: The quoted_file_content of this Comment.
        :type quoted_file_content: CommentQuotedFileContent
        """

        self._quoted_file_content = quoted_file_content

    @property
    def replies(self):
        """Gets the replies of this Comment.

        Output only. The full list of replies to the comment in chronological order.

        :return: The replies of this Comment.
        :rtype: List[Reply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this Comment.

        Output only. The full list of replies to the comment in chronological order.

        :param replies: The replies of this Comment.
        :type replies: List[Reply]
        """

        self._replies = replies

    @property
    def resolved(self):
        """Gets the resolved of this Comment.

        Output only. Whether the comment has been resolved by one of its replies.

        :return: The resolved of this Comment.
        :rtype: bool
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this Comment.

        Output only. Whether the comment has been resolved by one of its replies.

        :param resolved: The resolved of this Comment.
        :type resolved: bool
        """

        self._resolved = resolved
