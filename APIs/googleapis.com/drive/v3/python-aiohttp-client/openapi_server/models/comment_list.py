# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class CommentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: List[Comment]=None, kind: str='drive#commentList', next_page_token: str=None):
        """CommentList - a model defined in OpenAPI

        :param comments: The comments of this CommentList.
        :param kind: The kind of this CommentList.
        :param next_page_token: The next_page_token of this CommentList.
        """
        self.openapi_types = {
            'comments': List[Comment],
            'kind': str,
            'next_page_token': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'kind': 'kind',
            'next_page_token': 'nextPageToken'
        }

        self._comments = comments
        self._kind = kind
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentList of this CommentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this CommentList.

        The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The comments of this CommentList.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this CommentList.

        The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param comments: The comments of this CommentList.
        :type comments: List[Comment]
        """

        self._comments = comments

    @property
    def kind(self):
        """Gets the kind of this CommentList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#commentList\"`.

        :return: The kind of this CommentList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CommentList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#commentList\"`.

        :param kind: The kind of this CommentList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this CommentList.

        The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :return: The next_page_token of this CommentList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this CommentList.

        The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :param next_page_token: The next_page_token of this CommentList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
