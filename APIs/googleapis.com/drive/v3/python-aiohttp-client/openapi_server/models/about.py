# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.about_drive_themes_inner import AboutDriveThemesInner
from openapi_server.models.about_storage_quota import AboutStorageQuota
from openapi_server.models.about_team_drive_themes_inner import AboutTeamDriveThemesInner
from openapi_server.models.user import User
from openapi_server import util


class About(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_installed: bool=None, can_create_drives: bool=None, can_create_team_drives: bool=None, drive_themes: List[AboutDriveThemesInner]=None, export_formats: Dict[str, List[str]]=None, folder_color_palette: List[str]=None, import_formats: Dict[str, List[str]]=None, kind: str='drive#about', max_import_sizes: Dict[str, str]=None, max_upload_size: str=None, storage_quota: AboutStorageQuota=None, team_drive_themes: List[AboutTeamDriveThemesInner]=None, user: User=None):
        """About - a model defined in OpenAPI

        :param app_installed: The app_installed of this About.
        :param can_create_drives: The can_create_drives of this About.
        :param can_create_team_drives: The can_create_team_drives of this About.
        :param drive_themes: The drive_themes of this About.
        :param export_formats: The export_formats of this About.
        :param folder_color_palette: The folder_color_palette of this About.
        :param import_formats: The import_formats of this About.
        :param kind: The kind of this About.
        :param max_import_sizes: The max_import_sizes of this About.
        :param max_upload_size: The max_upload_size of this About.
        :param storage_quota: The storage_quota of this About.
        :param team_drive_themes: The team_drive_themes of this About.
        :param user: The user of this About.
        """
        self.openapi_types = {
            'app_installed': bool,
            'can_create_drives': bool,
            'can_create_team_drives': bool,
            'drive_themes': List[AboutDriveThemesInner],
            'export_formats': Dict[str, List[str]],
            'folder_color_palette': List[str],
            'import_formats': Dict[str, List[str]],
            'kind': str,
            'max_import_sizes': Dict[str, str],
            'max_upload_size': str,
            'storage_quota': AboutStorageQuota,
            'team_drive_themes': List[AboutTeamDriveThemesInner],
            'user': User
        }

        self.attribute_map = {
            'app_installed': 'appInstalled',
            'can_create_drives': 'canCreateDrives',
            'can_create_team_drives': 'canCreateTeamDrives',
            'drive_themes': 'driveThemes',
            'export_formats': 'exportFormats',
            'folder_color_palette': 'folderColorPalette',
            'import_formats': 'importFormats',
            'kind': 'kind',
            'max_import_sizes': 'maxImportSizes',
            'max_upload_size': 'maxUploadSize',
            'storage_quota': 'storageQuota',
            'team_drive_themes': 'teamDriveThemes',
            'user': 'user'
        }

        self._app_installed = app_installed
        self._can_create_drives = can_create_drives
        self._can_create_team_drives = can_create_team_drives
        self._drive_themes = drive_themes
        self._export_formats = export_formats
        self._folder_color_palette = folder_color_palette
        self._import_formats = import_formats
        self._kind = kind
        self._max_import_sizes = max_import_sizes
        self._max_upload_size = max_upload_size
        self._storage_quota = storage_quota
        self._team_drive_themes = team_drive_themes
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'About':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The About of this About.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_installed(self):
        """Gets the app_installed of this About.

        Whether the user has installed the requesting app.

        :return: The app_installed of this About.
        :rtype: bool
        """
        return self._app_installed

    @app_installed.setter
    def app_installed(self, app_installed):
        """Sets the app_installed of this About.

        Whether the user has installed the requesting app.

        :param app_installed: The app_installed of this About.
        :type app_installed: bool
        """

        self._app_installed = app_installed

    @property
    def can_create_drives(self):
        """Gets the can_create_drives of this About.

        Whether the user can create shared drives.

        :return: The can_create_drives of this About.
        :rtype: bool
        """
        return self._can_create_drives

    @can_create_drives.setter
    def can_create_drives(self, can_create_drives):
        """Sets the can_create_drives of this About.

        Whether the user can create shared drives.

        :param can_create_drives: The can_create_drives of this About.
        :type can_create_drives: bool
        """

        self._can_create_drives = can_create_drives

    @property
    def can_create_team_drives(self):
        """Gets the can_create_team_drives of this About.

        Deprecated: Use `canCreateDrives` instead.

        :return: The can_create_team_drives of this About.
        :rtype: bool
        """
        return self._can_create_team_drives

    @can_create_team_drives.setter
    def can_create_team_drives(self, can_create_team_drives):
        """Sets the can_create_team_drives of this About.

        Deprecated: Use `canCreateDrives` instead.

        :param can_create_team_drives: The can_create_team_drives of this About.
        :type can_create_team_drives: bool
        """

        self._can_create_team_drives = can_create_team_drives

    @property
    def drive_themes(self):
        """Gets the drive_themes of this About.

        A list of themes that are supported for shared drives.

        :return: The drive_themes of this About.
        :rtype: List[AboutDriveThemesInner]
        """
        return self._drive_themes

    @drive_themes.setter
    def drive_themes(self, drive_themes):
        """Sets the drive_themes of this About.

        A list of themes that are supported for shared drives.

        :param drive_themes: The drive_themes of this About.
        :type drive_themes: List[AboutDriveThemesInner]
        """

        self._drive_themes = drive_themes

    @property
    def export_formats(self):
        """Gets the export_formats of this About.

        A map of source MIME type to possible targets for all supported exports.

        :return: The export_formats of this About.
        :rtype: Dict[str, List[str]]
        """
        return self._export_formats

    @export_formats.setter
    def export_formats(self, export_formats):
        """Sets the export_formats of this About.

        A map of source MIME type to possible targets for all supported exports.

        :param export_formats: The export_formats of this About.
        :type export_formats: Dict[str, List[str]]
        """

        self._export_formats = export_formats

    @property
    def folder_color_palette(self):
        """Gets the folder_color_palette of this About.

        The currently supported folder colors as RGB hex strings.

        :return: The folder_color_palette of this About.
        :rtype: List[str]
        """
        return self._folder_color_palette

    @folder_color_palette.setter
    def folder_color_palette(self, folder_color_palette):
        """Sets the folder_color_palette of this About.

        The currently supported folder colors as RGB hex strings.

        :param folder_color_palette: The folder_color_palette of this About.
        :type folder_color_palette: List[str]
        """

        self._folder_color_palette = folder_color_palette

    @property
    def import_formats(self):
        """Gets the import_formats of this About.

        A map of source MIME type to possible targets for all supported imports.

        :return: The import_formats of this About.
        :rtype: Dict[str, List[str]]
        """
        return self._import_formats

    @import_formats.setter
    def import_formats(self, import_formats):
        """Sets the import_formats of this About.

        A map of source MIME type to possible targets for all supported imports.

        :param import_formats: The import_formats of this About.
        :type import_formats: Dict[str, List[str]]
        """

        self._import_formats = import_formats

    @property
    def kind(self):
        """Gets the kind of this About.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#about\"`.

        :return: The kind of this About.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this About.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#about\"`.

        :param kind: The kind of this About.
        :type kind: str
        """

        self._kind = kind

    @property
    def max_import_sizes(self):
        """Gets the max_import_sizes of this About.

        A map of maximum import sizes by MIME type, in bytes.

        :return: The max_import_sizes of this About.
        :rtype: Dict[str, str]
        """
        return self._max_import_sizes

    @max_import_sizes.setter
    def max_import_sizes(self, max_import_sizes):
        """Sets the max_import_sizes of this About.

        A map of maximum import sizes by MIME type, in bytes.

        :param max_import_sizes: The max_import_sizes of this About.
        :type max_import_sizes: Dict[str, str]
        """

        self._max_import_sizes = max_import_sizes

    @property
    def max_upload_size(self):
        """Gets the max_upload_size of this About.

        The maximum upload size in bytes.

        :return: The max_upload_size of this About.
        :rtype: str
        """
        return self._max_upload_size

    @max_upload_size.setter
    def max_upload_size(self, max_upload_size):
        """Sets the max_upload_size of this About.

        The maximum upload size in bytes.

        :param max_upload_size: The max_upload_size of this About.
        :type max_upload_size: str
        """

        self._max_upload_size = max_upload_size

    @property
    def storage_quota(self):
        """Gets the storage_quota of this About.


        :return: The storage_quota of this About.
        :rtype: AboutStorageQuota
        """
        return self._storage_quota

    @storage_quota.setter
    def storage_quota(self, storage_quota):
        """Sets the storage_quota of this About.


        :param storage_quota: The storage_quota of this About.
        :type storage_quota: AboutStorageQuota
        """

        self._storage_quota = storage_quota

    @property
    def team_drive_themes(self):
        """Gets the team_drive_themes of this About.

        Deprecated: Use `driveThemes` instead.

        :return: The team_drive_themes of this About.
        :rtype: List[AboutTeamDriveThemesInner]
        """
        return self._team_drive_themes

    @team_drive_themes.setter
    def team_drive_themes(self, team_drive_themes):
        """Sets the team_drive_themes of this About.

        Deprecated: Use `driveThemes` instead.

        :param team_drive_themes: The team_drive_themes of this About.
        :type team_drive_themes: List[AboutTeamDriveThemesInner]
        """

        self._team_drive_themes = team_drive_themes

    @property
    def user(self):
        """Gets the user of this About.


        :return: The user of this About.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this About.


        :param user: The user of this About.
        :type user: User
        """

        self._user = user
