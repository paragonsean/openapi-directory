# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email_address: str=None, kind: str='drive#user', me: bool=None, permission_id: str=None, photo_link: str=None):
        """User - a model defined in OpenAPI

        :param display_name: The display_name of this User.
        :param email_address: The email_address of this User.
        :param kind: The kind of this User.
        :param me: The me of this User.
        :param permission_id: The permission_id of this User.
        :param photo_link: The photo_link of this User.
        """
        self.openapi_types = {
            'display_name': str,
            'email_address': str,
            'kind': str,
            'me': bool,
            'permission_id': str,
            'photo_link': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email_address': 'emailAddress',
            'kind': 'kind',
            'me': 'me',
            'permission_id': 'permissionId',
            'photo_link': 'photoLink'
        }

        self._display_name = display_name
        self._email_address = email_address
        self._kind = kind
        self._me = me
        self._permission_id = permission_id
        self._photo_link = photo_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this User.

        Output only. A plain text displayable name for this user.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Output only. A plain text displayable name for this user.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this User.

        Output only. The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        Output only. The email address of the user. This may not be present in certain contexts if the user has not made their email address visible to the requester.

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def kind(self):
        """Gets the kind of this User.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#user\"`.

        :return: The kind of this User.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this User.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#user\"`.

        :param kind: The kind of this User.
        :type kind: str
        """

        self._kind = kind

    @property
    def me(self):
        """Gets the me of this User.

        Output only. Whether this user is the requesting user.

        :return: The me of this User.
        :rtype: bool
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this User.

        Output only. Whether this user is the requesting user.

        :param me: The me of this User.
        :type me: bool
        """

        self._me = me

    @property
    def permission_id(self):
        """Gets the permission_id of this User.

        Output only. The user's ID as visible in Permission resources.

        :return: The permission_id of this User.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this User.

        Output only. The user's ID as visible in Permission resources.

        :param permission_id: The permission_id of this User.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def photo_link(self):
        """Gets the photo_link of this User.

        Output only. A link to the user's profile photo, if available.

        :return: The photo_link of this User.
        :rtype: str
        """
        return self._photo_link

    @photo_link.setter
    def photo_link(self, photo_link):
        """Sets the photo_link of this User.

        Output only. A link to the user's profile photo, if available.

        :param photo_link: The photo_link of this User.
        :type photo_link: str
        """

        self._photo_link = photo_link
