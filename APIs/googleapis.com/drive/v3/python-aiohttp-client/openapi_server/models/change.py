# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drive import Drive
from openapi_server.models.file import File
from openapi_server.models.team_drive import TeamDrive
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_type: str=None, drive: Drive=None, drive_id: str=None, file: File=None, file_id: str=None, kind: str='drive#change', removed: bool=None, team_drive: TeamDrive=None, team_drive_id: str=None, time: datetime=None, type: str=None):
        """Change - a model defined in OpenAPI

        :param change_type: The change_type of this Change.
        :param drive: The drive of this Change.
        :param drive_id: The drive_id of this Change.
        :param file: The file of this Change.
        :param file_id: The file_id of this Change.
        :param kind: The kind of this Change.
        :param removed: The removed of this Change.
        :param team_drive: The team_drive of this Change.
        :param team_drive_id: The team_drive_id of this Change.
        :param time: The time of this Change.
        :param type: The type of this Change.
        """
        self.openapi_types = {
            'change_type': str,
            'drive': Drive,
            'drive_id': str,
            'file': File,
            'file_id': str,
            'kind': str,
            'removed': bool,
            'team_drive': TeamDrive,
            'team_drive_id': str,
            'time': datetime,
            'type': str
        }

        self.attribute_map = {
            'change_type': 'changeType',
            'drive': 'drive',
            'drive_id': 'driveId',
            'file': 'file',
            'file_id': 'fileId',
            'kind': 'kind',
            'removed': 'removed',
            'team_drive': 'teamDrive',
            'team_drive_id': 'teamDriveId',
            'time': 'time',
            'type': 'type'
        }

        self._change_type = change_type
        self._drive = drive
        self._drive_id = drive_id
        self._file = file
        self._file_id = file_id
        self._kind = kind
        self._removed = removed
        self._team_drive = team_drive
        self._team_drive_id = team_drive_id
        self._time = time
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_type(self):
        """Gets the change_type of this Change.

        The type of the change. Possible values are `file` and `drive`.

        :return: The change_type of this Change.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this Change.

        The type of the change. Possible values are `file` and `drive`.

        :param change_type: The change_type of this Change.
        :type change_type: str
        """

        self._change_type = change_type

    @property
    def drive(self):
        """Gets the drive of this Change.


        :return: The drive of this Change.
        :rtype: Drive
        """
        return self._drive

    @drive.setter
    def drive(self, drive):
        """Sets the drive of this Change.


        :param drive: The drive of this Change.
        :type drive: Drive
        """

        self._drive = drive

    @property
    def drive_id(self):
        """Gets the drive_id of this Change.

        The ID of the shared drive associated with this change.

        :return: The drive_id of this Change.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this Change.

        The ID of the shared drive associated with this change.

        :param drive_id: The drive_id of this Change.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def file(self):
        """Gets the file of this Change.


        :return: The file of this Change.
        :rtype: File
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Change.


        :param file: The file of this Change.
        :type file: File
        """

        self._file = file

    @property
    def file_id(self):
        """Gets the file_id of this Change.

        The ID of the file which has changed.

        :return: The file_id of this Change.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Change.

        The ID of the file which has changed.

        :param file_id: The file_id of this Change.
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def kind(self):
        """Gets the kind of this Change.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#change\"`.

        :return: The kind of this Change.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Change.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#change\"`.

        :param kind: The kind of this Change.
        :type kind: str
        """

        self._kind = kind

    @property
    def removed(self):
        """Gets the removed of this Change.

        Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.

        :return: The removed of this Change.
        :rtype: bool
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this Change.

        Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.

        :param removed: The removed of this Change.
        :type removed: bool
        """

        self._removed = removed

    @property
    def team_drive(self):
        """Gets the team_drive of this Change.


        :return: The team_drive of this Change.
        :rtype: TeamDrive
        """
        return self._team_drive

    @team_drive.setter
    def team_drive(self, team_drive):
        """Sets the team_drive of this Change.


        :param team_drive: The team_drive of this Change.
        :type team_drive: TeamDrive
        """

        self._team_drive = team_drive

    @property
    def team_drive_id(self):
        """Gets the team_drive_id of this Change.

        Deprecated: Use `driveId` instead.

        :return: The team_drive_id of this Change.
        :rtype: str
        """
        return self._team_drive_id

    @team_drive_id.setter
    def team_drive_id(self, team_drive_id):
        """Sets the team_drive_id of this Change.

        Deprecated: Use `driveId` instead.

        :param team_drive_id: The team_drive_id of this Change.
        :type team_drive_id: str
        """

        self._team_drive_id = team_drive_id

    @property
    def time(self):
        """Gets the time of this Change.

        The time of this change (RFC 3339 date-time).

        :return: The time of this Change.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Change.

        The time of this change (RFC 3339 date-time).

        :param time: The time of this Change.
        :type time: datetime
        """

        self._time = time

    @property
    def type(self):
        """Gets the type of this Change.

        Deprecated: Use `changeType` instead.

        :return: The type of this Change.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Change.

        Deprecated: Use `changeType` instead.

        :param type: The type of this Change.
        :type type: str
        """

        self._type = type
