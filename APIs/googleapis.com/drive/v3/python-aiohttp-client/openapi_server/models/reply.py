# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Reply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, author: User=None, content: str=None, created_time: datetime=None, deleted: bool=None, html_content: str=None, id: str=None, kind: str='drive#reply', modified_time: datetime=None):
        """Reply - a model defined in OpenAPI

        :param action: The action of this Reply.
        :param author: The author of this Reply.
        :param content: The content of this Reply.
        :param created_time: The created_time of this Reply.
        :param deleted: The deleted of this Reply.
        :param html_content: The html_content of this Reply.
        :param id: The id of this Reply.
        :param kind: The kind of this Reply.
        :param modified_time: The modified_time of this Reply.
        """
        self.openapi_types = {
            'action': str,
            'author': User,
            'content': str,
            'created_time': datetime,
            'deleted': bool,
            'html_content': str,
            'id': str,
            'kind': str,
            'modified_time': datetime
        }

        self.attribute_map = {
            'action': 'action',
            'author': 'author',
            'content': 'content',
            'created_time': 'createdTime',
            'deleted': 'deleted',
            'html_content': 'htmlContent',
            'id': 'id',
            'kind': 'kind',
            'modified_time': 'modifiedTime'
        }

        self._action = action
        self._author = author
        self._content = content
        self._created_time = created_time
        self._deleted = deleted
        self._html_content = html_content
        self._id = id
        self._kind = kind
        self._modified_time = modified_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Reply':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reply of this Reply.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Reply.

        The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen`

        :return: The action of this Reply.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Reply.

        The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen`

        :param action: The action of this Reply.
        :type action: str
        """

        self._action = action

    @property
    def author(self):
        """Gets the author of this Reply.


        :return: The author of this Reply.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Reply.


        :param author: The author of this Reply.
        :type author: User
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this Reply.

        The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified.

        :return: The content of this Reply.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Reply.

        The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified.

        :param content: The content of this Reply.
        :type content: str
        """

        self._content = content

    @property
    def created_time(self):
        """Gets the created_time of this Reply.

        The time at which the reply was created (RFC 3339 date-time).

        :return: The created_time of this Reply.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Reply.

        The time at which the reply was created (RFC 3339 date-time).

        :param created_time: The created_time of this Reply.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def deleted(self):
        """Gets the deleted of this Reply.

        Output only. Whether the reply has been deleted. A deleted reply has no content.

        :return: The deleted of this Reply.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Reply.

        Output only. Whether the reply has been deleted. A deleted reply has no content.

        :param deleted: The deleted of this Reply.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def html_content(self):
        """Gets the html_content of this Reply.

        Output only. The content of the reply with HTML formatting.

        :return: The html_content of this Reply.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """Sets the html_content of this Reply.

        Output only. The content of the reply with HTML formatting.

        :param html_content: The html_content of this Reply.
        :type html_content: str
        """

        self._html_content = html_content

    @property
    def id(self):
        """Gets the id of this Reply.

        Output only. The ID of the reply.

        :return: The id of this Reply.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Reply.

        Output only. The ID of the reply.

        :param id: The id of this Reply.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Reply.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#reply\"`.

        :return: The kind of this Reply.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Reply.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#reply\"`.

        :param kind: The kind of this Reply.
        :type kind: str
        """

        self._kind = kind

    @property
    def modified_time(self):
        """Gets the modified_time of this Reply.

        The last time the reply was modified (RFC 3339 date-time).

        :return: The modified_time of this Reply.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Reply.

        The last time the reply was modified (RFC 3339 date-time).

        :param modified_time: The modified_time of this Reply.
        :type modified_time: datetime
        """

        self._modified_time = modified_time
