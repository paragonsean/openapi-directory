# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server import util


class FileList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[File]=None, incomplete_search: bool=None, kind: str='drive#fileList', next_page_token: str=None):
        """FileList - a model defined in OpenAPI

        :param files: The files of this FileList.
        :param incomplete_search: The incomplete_search of this FileList.
        :param kind: The kind of this FileList.
        :param next_page_token: The next_page_token of this FileList.
        """
        self.openapi_types = {
            'files': List[File],
            'incomplete_search': bool,
            'kind': str,
            'next_page_token': str
        }

        self.attribute_map = {
            'files': 'files',
            'incomplete_search': 'incompleteSearch',
            'kind': 'kind',
            'next_page_token': 'nextPageToken'
        }

        self._files = files
        self._incomplete_search = incomplete_search
        self._kind = kind
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileList of this FileList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this FileList.

        The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The files of this FileList.
        :rtype: List[File]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FileList.

        The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param files: The files of this FileList.
        :type files: List[File]
        """

        self._files = files

    @property
    def incomplete_search(self):
        """Gets the incomplete_search of this FileList.

        Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'.

        :return: The incomplete_search of this FileList.
        :rtype: bool
        """
        return self._incomplete_search

    @incomplete_search.setter
    def incomplete_search(self, incomplete_search):
        """Sets the incomplete_search of this FileList.

        Whether the search process was incomplete. If true, then some search results might be missing, since all documents were not searched. This can occur when searching multiple drives with the 'allDrives' corpora, but all corpora couldn't be searched. When this happens, it's suggested that clients narrow their query by choosing a different corpus such as 'user' or 'drive'.

        :param incomplete_search: The incomplete_search of this FileList.
        :type incomplete_search: bool
        """

        self._incomplete_search = incomplete_search

    @property
    def kind(self):
        """Gets the kind of this FileList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#fileList\"`.

        :return: The kind of this FileList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FileList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#fileList\"`.

        :param kind: The kind of this FileList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_page_token(self):
        """Gets the next_page_token of this FileList.

        The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :return: The next_page_token of this FileList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this FileList.

        The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results. The page token is typically valid for several hours. However, if new items are added or removed, your expected results might differ.

        :param next_page_token: The next_page_token of this FileList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
