# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change import Change
from openapi_server import util


class ChangeList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changes: List[Change]=None, kind: str='drive#changeList', new_start_page_token: str=None, next_page_token: str=None):
        """ChangeList - a model defined in OpenAPI

        :param changes: The changes of this ChangeList.
        :param kind: The kind of this ChangeList.
        :param new_start_page_token: The new_start_page_token of this ChangeList.
        :param next_page_token: The next_page_token of this ChangeList.
        """
        self.openapi_types = {
            'changes': List[Change],
            'kind': str,
            'new_start_page_token': str,
            'next_page_token': str
        }

        self.attribute_map = {
            'changes': 'changes',
            'kind': 'kind',
            'new_start_page_token': 'newStartPageToken',
            'next_page_token': 'nextPageToken'
        }

        self._changes = changes
        self._kind = kind
        self._new_start_page_token = new_start_page_token
        self._next_page_token = next_page_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeList of this ChangeList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changes(self):
        """Gets the changes of this ChangeList.

        The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The changes of this ChangeList.
        :rtype: List[Change]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this ChangeList.

        The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param changes: The changes of this ChangeList.
        :type changes: List[Change]
        """

        self._changes = changes

    @property
    def kind(self):
        """Gets the kind of this ChangeList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#changeList\"`.

        :return: The kind of this ChangeList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChangeList.

        Identifies what kind of resource this is. Value: the fixed string `\"drive#changeList\"`.

        :param kind: The kind of this ChangeList.
        :type kind: str
        """

        self._kind = kind

    @property
    def new_start_page_token(self):
        """Gets the new_start_page_token of this ChangeList.

        The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire.

        :return: The new_start_page_token of this ChangeList.
        :rtype: str
        """
        return self._new_start_page_token

    @new_start_page_token.setter
    def new_start_page_token(self, new_start_page_token):
        """Sets the new_start_page_token of this ChangeList.

        The starting page token for future changes. This will be present only if the end of the current changes list has been reached. The page token doesn't expire.

        :param new_start_page_token: The new_start_page_token of this ChangeList.
        :type new_start_page_token: str
        """

        self._new_start_page_token = new_start_page_token

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ChangeList.

        The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire.

        :return: The next_page_token of this ChangeList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ChangeList.

        The page token for the next page of changes. This will be absent if the end of the changes list has been reached. The page token doesn't expire.

        :param next_page_token: The next_page_token of this ChangeList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token
