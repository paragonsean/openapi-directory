# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Revision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_links: Dict[str, str]=None, id: str=None, keep_forever: bool=None, kind: str='drive#revision', last_modifying_user: User=None, md5_checksum: str=None, mime_type: str=None, modified_time: datetime=None, original_filename: str=None, publish_auto: bool=None, published: bool=None, published_link: str=None, published_outside_domain: bool=None, size: str=None):
        """Revision - a model defined in OpenAPI

        :param export_links: The export_links of this Revision.
        :param id: The id of this Revision.
        :param keep_forever: The keep_forever of this Revision.
        :param kind: The kind of this Revision.
        :param last_modifying_user: The last_modifying_user of this Revision.
        :param md5_checksum: The md5_checksum of this Revision.
        :param mime_type: The mime_type of this Revision.
        :param modified_time: The modified_time of this Revision.
        :param original_filename: The original_filename of this Revision.
        :param publish_auto: The publish_auto of this Revision.
        :param published: The published of this Revision.
        :param published_link: The published_link of this Revision.
        :param published_outside_domain: The published_outside_domain of this Revision.
        :param size: The size of this Revision.
        """
        self.openapi_types = {
            'export_links': Dict[str, str],
            'id': str,
            'keep_forever': bool,
            'kind': str,
            'last_modifying_user': User,
            'md5_checksum': str,
            'mime_type': str,
            'modified_time': datetime,
            'original_filename': str,
            'publish_auto': bool,
            'published': bool,
            'published_link': str,
            'published_outside_domain': bool,
            'size': str
        }

        self.attribute_map = {
            'export_links': 'exportLinks',
            'id': 'id',
            'keep_forever': 'keepForever',
            'kind': 'kind',
            'last_modifying_user': 'lastModifyingUser',
            'md5_checksum': 'md5Checksum',
            'mime_type': 'mimeType',
            'modified_time': 'modifiedTime',
            'original_filename': 'originalFilename',
            'publish_auto': 'publishAuto',
            'published': 'published',
            'published_link': 'publishedLink',
            'published_outside_domain': 'publishedOutsideDomain',
            'size': 'size'
        }

        self._export_links = export_links
        self._id = id
        self._keep_forever = keep_forever
        self._kind = kind
        self._last_modifying_user = last_modifying_user
        self._md5_checksum = md5_checksum
        self._mime_type = mime_type
        self._modified_time = modified_time
        self._original_filename = original_filename
        self._publish_auto = publish_auto
        self._published = published
        self._published_link = published_link
        self._published_outside_domain = published_outside_domain
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Revision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Revision of this Revision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_links(self):
        """Gets the export_links of this Revision.

        Output only. Links for exporting Docs Editors files to specific formats.

        :return: The export_links of this Revision.
        :rtype: Dict[str, str]
        """
        return self._export_links

    @export_links.setter
    def export_links(self, export_links):
        """Sets the export_links of this Revision.

        Output only. Links for exporting Docs Editors files to specific formats.

        :param export_links: The export_links of this Revision.
        :type export_links: Dict[str, str]
        """

        self._export_links = export_links

    @property
    def id(self):
        """Gets the id of this Revision.

        Output only. The ID of the revision.

        :return: The id of this Revision.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revision.

        Output only. The ID of the revision.

        :param id: The id of this Revision.
        :type id: str
        """

        self._id = id

    @property
    def keep_forever(self):
        """Gets the keep_forever of this Revision.

        Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.

        :return: The keep_forever of this Revision.
        :rtype: bool
        """
        return self._keep_forever

    @keep_forever.setter
    def keep_forever(self, keep_forever):
        """Sets the keep_forever of this Revision.

        Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.

        :param keep_forever: The keep_forever of this Revision.
        :type keep_forever: bool
        """

        self._keep_forever = keep_forever

    @property
    def kind(self):
        """Gets the kind of this Revision.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#revision\"`.

        :return: The kind of this Revision.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Revision.

        Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#revision\"`.

        :param kind: The kind of this Revision.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modifying_user(self):
        """Gets the last_modifying_user of this Revision.


        :return: The last_modifying_user of this Revision.
        :rtype: User
        """
        return self._last_modifying_user

    @last_modifying_user.setter
    def last_modifying_user(self, last_modifying_user):
        """Sets the last_modifying_user of this Revision.


        :param last_modifying_user: The last_modifying_user of this Revision.
        :type last_modifying_user: User
        """

        self._last_modifying_user = last_modifying_user

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this Revision.

        Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.

        :return: The md5_checksum of this Revision.
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this Revision.

        Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.

        :param md5_checksum: The md5_checksum of this Revision.
        :type md5_checksum: str
        """

        self._md5_checksum = md5_checksum

    @property
    def mime_type(self):
        """Gets the mime_type of this Revision.

        Output only. The MIME type of the revision.

        :return: The mime_type of this Revision.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Revision.

        Output only. The MIME type of the revision.

        :param mime_type: The mime_type of this Revision.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def modified_time(self):
        """Gets the modified_time of this Revision.

        The last time the revision was modified (RFC 3339 date-time).

        :return: The modified_time of this Revision.
        :rtype: datetime
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this Revision.

        The last time the revision was modified (RFC 3339 date-time).

        :param modified_time: The modified_time of this Revision.
        :type modified_time: datetime
        """

        self._modified_time = modified_time

    @property
    def original_filename(self):
        """Gets the original_filename of this Revision.

        Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive.

        :return: The original_filename of this Revision.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this Revision.

        Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive.

        :param original_filename: The original_filename of this Revision.
        :type original_filename: str
        """

        self._original_filename = original_filename

    @property
    def publish_auto(self):
        """Gets the publish_auto of this Revision.

        Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.

        :return: The publish_auto of this Revision.
        :rtype: bool
        """
        return self._publish_auto

    @publish_auto.setter
    def publish_auto(self, publish_auto):
        """Sets the publish_auto of this Revision.

        Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.

        :param publish_auto: The publish_auto of this Revision.
        :type publish_auto: bool
        """

        self._publish_auto = publish_auto

    @property
    def published(self):
        """Gets the published of this Revision.

        Whether this revision is published. This is only applicable to Docs Editors files.

        :return: The published of this Revision.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Revision.

        Whether this revision is published. This is only applicable to Docs Editors files.

        :param published: The published of this Revision.
        :type published: bool
        """

        self._published = published

    @property
    def published_link(self):
        """Gets the published_link of this Revision.

        Output only. A link to the published revision. This is only populated for Google Sites files.

        :return: The published_link of this Revision.
        :rtype: str
        """
        return self._published_link

    @published_link.setter
    def published_link(self, published_link):
        """Sets the published_link of this Revision.

        Output only. A link to the published revision. This is only populated for Google Sites files.

        :param published_link: The published_link of this Revision.
        :type published_link: str
        """

        self._published_link = published_link

    @property
    def published_outside_domain(self):
        """Gets the published_outside_domain of this Revision.

        Whether this revision is published outside the domain. This is only applicable to Docs Editors files.

        :return: The published_outside_domain of this Revision.
        :rtype: bool
        """
        return self._published_outside_domain

    @published_outside_domain.setter
    def published_outside_domain(self, published_outside_domain):
        """Sets the published_outside_domain of this Revision.

        Whether this revision is published outside the domain. This is only applicable to Docs Editors files.

        :param published_outside_domain: The published_outside_domain of this Revision.
        :type published_outside_domain: bool
        """

        self._published_outside_domain = published_outside_domain

    @property
    def size(self):
        """Gets the size of this Revision.

        Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.

        :return: The size of this Revision.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Revision.

        Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.

        :param size: The size of this Revision.
        :type size: str
        """

        self._size = size
