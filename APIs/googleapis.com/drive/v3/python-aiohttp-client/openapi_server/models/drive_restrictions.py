# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriveRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_managed_restrictions: bool=None, copy_requires_writer_permission: bool=None, domain_users_only: bool=None, drive_members_only: bool=None, sharing_folders_requires_organizer_permission: bool=None):
        """DriveRestrictions - a model defined in OpenAPI

        :param admin_managed_restrictions: The admin_managed_restrictions of this DriveRestrictions.
        :param copy_requires_writer_permission: The copy_requires_writer_permission of this DriveRestrictions.
        :param domain_users_only: The domain_users_only of this DriveRestrictions.
        :param drive_members_only: The drive_members_only of this DriveRestrictions.
        :param sharing_folders_requires_organizer_permission: The sharing_folders_requires_organizer_permission of this DriveRestrictions.
        """
        self.openapi_types = {
            'admin_managed_restrictions': bool,
            'copy_requires_writer_permission': bool,
            'domain_users_only': bool,
            'drive_members_only': bool,
            'sharing_folders_requires_organizer_permission': bool
        }

        self.attribute_map = {
            'admin_managed_restrictions': 'adminManagedRestrictions',
            'copy_requires_writer_permission': 'copyRequiresWriterPermission',
            'domain_users_only': 'domainUsersOnly',
            'drive_members_only': 'driveMembersOnly',
            'sharing_folders_requires_organizer_permission': 'sharingFoldersRequiresOrganizerPermission'
        }

        self._admin_managed_restrictions = admin_managed_restrictions
        self._copy_requires_writer_permission = copy_requires_writer_permission
        self._domain_users_only = domain_users_only
        self._drive_members_only = drive_members_only
        self._sharing_folders_requires_organizer_permission = sharing_folders_requires_organizer_permission

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriveRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Drive_restrictions of this DriveRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_managed_restrictions(self):
        """Gets the admin_managed_restrictions of this DriveRestrictions.

        Whether administrative privileges on this shared drive are required to modify restrictions.

        :return: The admin_managed_restrictions of this DriveRestrictions.
        :rtype: bool
        """
        return self._admin_managed_restrictions

    @admin_managed_restrictions.setter
    def admin_managed_restrictions(self, admin_managed_restrictions):
        """Sets the admin_managed_restrictions of this DriveRestrictions.

        Whether administrative privileges on this shared drive are required to modify restrictions.

        :param admin_managed_restrictions: The admin_managed_restrictions of this DriveRestrictions.
        :type admin_managed_restrictions: bool
        """

        self._admin_managed_restrictions = admin_managed_restrictions

    @property
    def copy_requires_writer_permission(self):
        """Gets the copy_requires_writer_permission of this DriveRestrictions.

        Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive.

        :return: The copy_requires_writer_permission of this DriveRestrictions.
        :rtype: bool
        """
        return self._copy_requires_writer_permission

    @copy_requires_writer_permission.setter
    def copy_requires_writer_permission(self, copy_requires_writer_permission):
        """Sets the copy_requires_writer_permission of this DriveRestrictions.

        Whether the options to copy, print, or download files inside this shared drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this shared drive.

        :param copy_requires_writer_permission: The copy_requires_writer_permission of this DriveRestrictions.
        :type copy_requires_writer_permission: bool
        """

        self._copy_requires_writer_permission = copy_requires_writer_permission

    @property
    def domain_users_only(self):
        """Gets the domain_users_only of this DriveRestrictions.

        Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.

        :return: The domain_users_only of this DriveRestrictions.
        :rtype: bool
        """
        return self._domain_users_only

    @domain_users_only.setter
    def domain_users_only(self, domain_users_only):
        """Sets the domain_users_only of this DriveRestrictions.

        Whether access to this shared drive and items inside this shared drive is restricted to users of the domain to which this shared drive belongs. This restriction may be overridden by other sharing policies controlled outside of this shared drive.

        :param domain_users_only: The domain_users_only of this DriveRestrictions.
        :type domain_users_only: bool
        """

        self._domain_users_only = domain_users_only

    @property
    def drive_members_only(self):
        """Gets the drive_members_only of this DriveRestrictions.

        Whether access to items inside this shared drive is restricted to its members.

        :return: The drive_members_only of this DriveRestrictions.
        :rtype: bool
        """
        return self._drive_members_only

    @drive_members_only.setter
    def drive_members_only(self, drive_members_only):
        """Sets the drive_members_only of this DriveRestrictions.

        Whether access to items inside this shared drive is restricted to its members.

        :param drive_members_only: The drive_members_only of this DriveRestrictions.
        :type drive_members_only: bool
        """

        self._drive_members_only = drive_members_only

    @property
    def sharing_folders_requires_organizer_permission(self):
        """Gets the sharing_folders_requires_organizer_permission of this DriveRestrictions.

        If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.

        :return: The sharing_folders_requires_organizer_permission of this DriveRestrictions.
        :rtype: bool
        """
        return self._sharing_folders_requires_organizer_permission

    @sharing_folders_requires_organizer_permission.setter
    def sharing_folders_requires_organizer_permission(self, sharing_folders_requires_organizer_permission):
        """Sets the sharing_folders_requires_organizer_permission of this DriveRestrictions.

        If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.

        :param sharing_folders_requires_organizer_permission: The sharing_folders_requires_organizer_permission of this DriveRestrictions.
        :type sharing_folders_requires_organizer_permission: bool
        """

        self._sharing_folders_requires_organizer_permission = sharing_folders_requires_organizer_permission
