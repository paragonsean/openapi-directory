/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Revision model module.
 * @module model/Revision
 * @version v3
 */
class Revision {
    /**
     * Constructs a new <code>Revision</code>.
     * The metadata for a revision to a file. Some resource methods (such as &#x60;revisions.update&#x60;) require a &#x60;revisionId&#x60;. Use the &#x60;revisions.list&#x60; method to retrieve the ID for a revision.
     * @alias module:model/Revision
     */
    constructor() { 
        
        Revision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#revision';
    }

    /**
     * Constructs a <code>Revision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Revision} obj Optional instance to populate.
     * @return {module:model/Revision} The populated <code>Revision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Revision();

            if (data.hasOwnProperty('exportLinks')) {
                obj['exportLinks'] = ApiClient.convertToType(data['exportLinks'], {'String': 'String'});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('keepForever')) {
                obj['keepForever'] = ApiClient.convertToType(data['keepForever'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('lastModifyingUser')) {
                obj['lastModifyingUser'] = User.constructFromObject(data['lastModifyingUser']);
            }
            if (data.hasOwnProperty('md5Checksum')) {
                obj['md5Checksum'] = ApiClient.convertToType(data['md5Checksum'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('modifiedTime')) {
                obj['modifiedTime'] = ApiClient.convertToType(data['modifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('originalFilename')) {
                obj['originalFilename'] = ApiClient.convertToType(data['originalFilename'], 'String');
            }
            if (data.hasOwnProperty('publishAuto')) {
                obj['publishAuto'] = ApiClient.convertToType(data['publishAuto'], 'Boolean');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'Boolean');
            }
            if (data.hasOwnProperty('publishedLink')) {
                obj['publishedLink'] = ApiClient.convertToType(data['publishedLink'], 'String');
            }
            if (data.hasOwnProperty('publishedOutsideDomain')) {
                obj['publishedOutsideDomain'] = ApiClient.convertToType(data['publishedOutsideDomain'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Revision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Revision</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `lastModifyingUser`
        if (data['lastModifyingUser']) { // data not null
          User.validateJSON(data['lastModifyingUser']);
        }
        // ensure the json data is a string
        if (data['md5Checksum'] && !(typeof data['md5Checksum'] === 'string' || data['md5Checksum'] instanceof String)) {
            throw new Error("Expected the field `md5Checksum` to be a primitive type in the JSON string but got " + data['md5Checksum']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['originalFilename'] && !(typeof data['originalFilename'] === 'string' || data['originalFilename'] instanceof String)) {
            throw new Error("Expected the field `originalFilename` to be a primitive type in the JSON string but got " + data['originalFilename']);
        }
        // ensure the json data is a string
        if (data['publishedLink'] && !(typeof data['publishedLink'] === 'string' || data['publishedLink'] instanceof String)) {
            throw new Error("Expected the field `publishedLink` to be a primitive type in the JSON string but got " + data['publishedLink']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}



/**
 * Output only. Links for exporting Docs Editors files to specific formats.
 * @member {Object.<String, String>} exportLinks
 */
Revision.prototype['exportLinks'] = undefined;

/**
 * Output only. The ID of the revision.
 * @member {String} id
 */
Revision.prototype['id'] = undefined;

/**
 * Whether to keep this revision forever, even if it is no longer the head revision. If not set, the revision will be automatically purged 30 days after newer content is uploaded. This can be set on a maximum of 200 revisions for a file. This field is only applicable to files with binary content in Drive.
 * @member {Boolean} keepForever
 */
Revision.prototype['keepForever'] = undefined;

/**
 * Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#revision\"`.
 * @member {String} kind
 * @default 'drive#revision'
 */
Revision.prototype['kind'] = 'drive#revision';

/**
 * @member {module:model/User} lastModifyingUser
 */
Revision.prototype['lastModifyingUser'] = undefined;

/**
 * Output only. The MD5 checksum of the revision's content. This is only applicable to files with binary content in Drive.
 * @member {String} md5Checksum
 */
Revision.prototype['md5Checksum'] = undefined;

/**
 * Output only. The MIME type of the revision.
 * @member {String} mimeType
 */
Revision.prototype['mimeType'] = undefined;

/**
 * The last time the revision was modified (RFC 3339 date-time).
 * @member {Date} modifiedTime
 */
Revision.prototype['modifiedTime'] = undefined;

/**
 * Output only. The original filename used to create this revision. This is only applicable to files with binary content in Drive.
 * @member {String} originalFilename
 */
Revision.prototype['originalFilename'] = undefined;

/**
 * Whether subsequent revisions will be automatically republished. This is only applicable to Docs Editors files.
 * @member {Boolean} publishAuto
 */
Revision.prototype['publishAuto'] = undefined;

/**
 * Whether this revision is published. This is only applicable to Docs Editors files.
 * @member {Boolean} published
 */
Revision.prototype['published'] = undefined;

/**
 * Output only. A link to the published revision. This is only populated for Google Sites files.
 * @member {String} publishedLink
 */
Revision.prototype['publishedLink'] = undefined;

/**
 * Whether this revision is published outside the domain. This is only applicable to Docs Editors files.
 * @member {Boolean} publishedOutsideDomain
 */
Revision.prototype['publishedOutsideDomain'] = undefined;

/**
 * Output only. The size of the revision's content in bytes. This is only applicable to files with binary content in Drive.
 * @member {String} size
 */
Revision.prototype['size'] = undefined;






export default Revision;

