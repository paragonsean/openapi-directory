/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The LabelField model module.
 * @module model/LabelField
 * @version v3
 */
class LabelField {
    /**
     * Constructs a new <code>LabelField</code>.
     * Representation of field, which is a typed key-value pair.
     * @alias module:model/LabelField
     */
    constructor() { 
        
        LabelField.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LabelField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabelField} obj Optional instance to populate.
     * @return {module:model/LabelField} The populated <code>LabelField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabelField();

            if (data.hasOwnProperty('dateString')) {
                obj['dateString'] = ApiClient.convertToType(data['dateString'], ['Date']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('integer')) {
                obj['integer'] = ApiClient.convertToType(data['integer'], ['String']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('selection')) {
                obj['selection'] = ApiClient.convertToType(data['selection'], ['String']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], ['String']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], [User]);
            }
            if (data.hasOwnProperty('valueType')) {
                obj['valueType'] = ApiClient.convertToType(data['valueType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabelField</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabelField</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['dateString'])) {
            throw new Error("Expected the field `dateString` to be an array in the JSON data but got " + data['dateString']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['integer'])) {
            throw new Error("Expected the field `integer` to be an array in the JSON data but got " + data['integer']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['selection'])) {
            throw new Error("Expected the field `selection` to be an array in the JSON data but got " + data['selection']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['text'])) {
            throw new Error("Expected the field `text` to be an array in the JSON data but got " + data['text']);
        }
        if (data['user']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['user'])) {
                throw new Error("Expected the field `user` to be an array in the JSON data but got " + data['user']);
            }
            // validate the optional field `user` (array)
            for (const item of data['user']) {
                User.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['valueType'] && !(typeof data['valueType'] === 'string' || data['valueType'] instanceof String)) {
            throw new Error("Expected the field `valueType` to be a primitive type in the JSON string but got " + data['valueType']);
        }

        return true;
    }


}



/**
 * Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.
 * @member {Array.<Date>} dateString
 */
LabelField.prototype['dateString'] = undefined;

/**
 * The identifier of this label field.
 * @member {String} id
 */
LabelField.prototype['id'] = undefined;

/**
 * Only present if `valueType` is `integer`.
 * @member {Array.<String>} integer
 */
LabelField.prototype['integer'] = undefined;

/**
 * This is always drive#labelField.
 * @member {String} kind
 */
LabelField.prototype['kind'] = undefined;

/**
 * Only present if `valueType` is `selection`
 * @member {Array.<String>} selection
 */
LabelField.prototype['selection'] = undefined;

/**
 * Only present if `valueType` is `text`.
 * @member {Array.<String>} text
 */
LabelField.prototype['text'] = undefined;

/**
 * Only present if `valueType` is `user`.
 * @member {Array.<module:model/User>} user
 */
LabelField.prototype['user'] = undefined;

/**
 * The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`
 * @member {String} valueType
 */
LabelField.prototype['valueType'] = undefined;






export default LabelField;

