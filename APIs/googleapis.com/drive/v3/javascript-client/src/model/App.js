/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppIcons from './AppIcons';

/**
 * The App model module.
 * @module model/App
 * @version v3
 */
class App {
    /**
     * Constructs a new <code>App</code>.
     * The &#x60;apps&#x60; resource provides a list of apps that a user has installed, with information about each app&#39;s supported MIME types, file extensions, and other details. Some resource methods (such as &#x60;apps.get&#x60;) require an &#x60;appId&#x60;. Use the &#x60;apps.list&#x60; method to retrieve the ID for an installed application.
     * @alias module:model/App
     */
    constructor() { 
        
        App.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#app';
    }

    /**
     * Constructs a <code>App</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/App} obj Optional instance to populate.
     * @return {module:model/App} The populated <code>App</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new App();

            if (data.hasOwnProperty('authorized')) {
                obj['authorized'] = ApiClient.convertToType(data['authorized'], 'Boolean');
            }
            if (data.hasOwnProperty('createInFolderTemplate')) {
                obj['createInFolderTemplate'] = ApiClient.convertToType(data['createInFolderTemplate'], 'String');
            }
            if (data.hasOwnProperty('createUrl')) {
                obj['createUrl'] = ApiClient.convertToType(data['createUrl'], 'String');
            }
            if (data.hasOwnProperty('hasDriveWideScope')) {
                obj['hasDriveWideScope'] = ApiClient.convertToType(data['hasDriveWideScope'], 'Boolean');
            }
            if (data.hasOwnProperty('icons')) {
                obj['icons'] = ApiClient.convertToType(data['icons'], [AppIcons]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installed')) {
                obj['installed'] = ApiClient.convertToType(data['installed'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('longDescription')) {
                obj['longDescription'] = ApiClient.convertToType(data['longDescription'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('objectType')) {
                obj['objectType'] = ApiClient.convertToType(data['objectType'], 'String');
            }
            if (data.hasOwnProperty('openUrlTemplate')) {
                obj['openUrlTemplate'] = ApiClient.convertToType(data['openUrlTemplate'], 'String');
            }
            if (data.hasOwnProperty('primaryFileExtensions')) {
                obj['primaryFileExtensions'] = ApiClient.convertToType(data['primaryFileExtensions'], ['String']);
            }
            if (data.hasOwnProperty('primaryMimeTypes')) {
                obj['primaryMimeTypes'] = ApiClient.convertToType(data['primaryMimeTypes'], ['String']);
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('productUrl')) {
                obj['productUrl'] = ApiClient.convertToType(data['productUrl'], 'String');
            }
            if (data.hasOwnProperty('secondaryFileExtensions')) {
                obj['secondaryFileExtensions'] = ApiClient.convertToType(data['secondaryFileExtensions'], ['String']);
            }
            if (data.hasOwnProperty('secondaryMimeTypes')) {
                obj['secondaryMimeTypes'] = ApiClient.convertToType(data['secondaryMimeTypes'], ['String']);
            }
            if (data.hasOwnProperty('shortDescription')) {
                obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
            }
            if (data.hasOwnProperty('supportsCreate')) {
                obj['supportsCreate'] = ApiClient.convertToType(data['supportsCreate'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsImport')) {
                obj['supportsImport'] = ApiClient.convertToType(data['supportsImport'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsMultiOpen')) {
                obj['supportsMultiOpen'] = ApiClient.convertToType(data['supportsMultiOpen'], 'Boolean');
            }
            if (data.hasOwnProperty('supportsOfflineCreate')) {
                obj['supportsOfflineCreate'] = ApiClient.convertToType(data['supportsOfflineCreate'], 'Boolean');
            }
            if (data.hasOwnProperty('useByDefault')) {
                obj['useByDefault'] = ApiClient.convertToType(data['useByDefault'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>App</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>App</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createInFolderTemplate'] && !(typeof data['createInFolderTemplate'] === 'string' || data['createInFolderTemplate'] instanceof String)) {
            throw new Error("Expected the field `createInFolderTemplate` to be a primitive type in the JSON string but got " + data['createInFolderTemplate']);
        }
        // ensure the json data is a string
        if (data['createUrl'] && !(typeof data['createUrl'] === 'string' || data['createUrl'] instanceof String)) {
            throw new Error("Expected the field `createUrl` to be a primitive type in the JSON string but got " + data['createUrl']);
        }
        if (data['icons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['icons'])) {
                throw new Error("Expected the field `icons` to be an array in the JSON data but got " + data['icons']);
            }
            // validate the optional field `icons` (array)
            for (const item of data['icons']) {
                AppIcons.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['longDescription'] && !(typeof data['longDescription'] === 'string' || data['longDescription'] instanceof String)) {
            throw new Error("Expected the field `longDescription` to be a primitive type in the JSON string but got " + data['longDescription']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['objectType'] && !(typeof data['objectType'] === 'string' || data['objectType'] instanceof String)) {
            throw new Error("Expected the field `objectType` to be a primitive type in the JSON string but got " + data['objectType']);
        }
        // ensure the json data is a string
        if (data['openUrlTemplate'] && !(typeof data['openUrlTemplate'] === 'string' || data['openUrlTemplate'] instanceof String)) {
            throw new Error("Expected the field `openUrlTemplate` to be a primitive type in the JSON string but got " + data['openUrlTemplate']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['primaryFileExtensions'])) {
            throw new Error("Expected the field `primaryFileExtensions` to be an array in the JSON data but got " + data['primaryFileExtensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['primaryMimeTypes'])) {
            throw new Error("Expected the field `primaryMimeTypes` to be an array in the JSON data but got " + data['primaryMimeTypes']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['productUrl'] && !(typeof data['productUrl'] === 'string' || data['productUrl'] instanceof String)) {
            throw new Error("Expected the field `productUrl` to be a primitive type in the JSON string but got " + data['productUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secondaryFileExtensions'])) {
            throw new Error("Expected the field `secondaryFileExtensions` to be an array in the JSON data but got " + data['secondaryFileExtensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['secondaryMimeTypes'])) {
            throw new Error("Expected the field `secondaryMimeTypes` to be an array in the JSON data but got " + data['secondaryMimeTypes']);
        }
        // ensure the json data is a string
        if (data['shortDescription'] && !(typeof data['shortDescription'] === 'string' || data['shortDescription'] instanceof String)) {
            throw new Error("Expected the field `shortDescription` to be a primitive type in the JSON string but got " + data['shortDescription']);
        }

        return true;
    }


}



/**
 * Whether the app is authorized to access data on the user's Drive.
 * @member {Boolean} authorized
 */
App.prototype['authorized'] = undefined;

/**
 * The template URL to create a file with this app in a given folder. The template contains the {folderId} to be replaced by the folder ID house the new file.
 * @member {String} createInFolderTemplate
 */
App.prototype['createInFolderTemplate'] = undefined;

/**
 * The URL to create a file with this app.
 * @member {String} createUrl
 */
App.prototype['createUrl'] = undefined;

/**
 * Whether the app has Drive-wide scope. An app with Drive-wide scope can access all files in the user's Drive.
 * @member {Boolean} hasDriveWideScope
 */
App.prototype['hasDriveWideScope'] = undefined;

/**
 * The various icons for the app.
 * @member {Array.<module:model/AppIcons>} icons
 */
App.prototype['icons'] = undefined;

/**
 * The ID of the app.
 * @member {String} id
 */
App.prototype['id'] = undefined;

/**
 * Whether the app is installed.
 * @member {Boolean} installed
 */
App.prototype['installed'] = undefined;

/**
 * Output only. Identifies what kind of resource this is. Value: the fixed string \"drive#app\".
 * @member {String} kind
 * @default 'drive#app'
 */
App.prototype['kind'] = 'drive#app';

/**
 * A long description of the app.
 * @member {String} longDescription
 */
App.prototype['longDescription'] = undefined;

/**
 * The name of the app.
 * @member {String} name
 */
App.prototype['name'] = undefined;

/**
 * The type of object this app creates such as a Chart. If empty, the app name should be used instead.
 * @member {String} objectType
 */
App.prototype['objectType'] = undefined;

/**
 * The template URL for opening files with this app. The template contains {ids} or {exportIds} to be replaced by the actual file IDs. For more information, see Open Files for the full documentation.
 * @member {String} openUrlTemplate
 */
App.prototype['openUrlTemplate'] = undefined;

/**
 * The list of primary file extensions.
 * @member {Array.<String>} primaryFileExtensions
 */
App.prototype['primaryFileExtensions'] = undefined;

/**
 * The list of primary MIME types.
 * @member {Array.<String>} primaryMimeTypes
 */
App.prototype['primaryMimeTypes'] = undefined;

/**
 * The ID of the product listing for this app.
 * @member {String} productId
 */
App.prototype['productId'] = undefined;

/**
 * A link to the product listing for this app.
 * @member {String} productUrl
 */
App.prototype['productUrl'] = undefined;

/**
 * The list of secondary file extensions.
 * @member {Array.<String>} secondaryFileExtensions
 */
App.prototype['secondaryFileExtensions'] = undefined;

/**
 * The list of secondary MIME types.
 * @member {Array.<String>} secondaryMimeTypes
 */
App.prototype['secondaryMimeTypes'] = undefined;

/**
 * A short description of the app.
 * @member {String} shortDescription
 */
App.prototype['shortDescription'] = undefined;

/**
 * Whether this app supports creating objects.
 * @member {Boolean} supportsCreate
 */
App.prototype['supportsCreate'] = undefined;

/**
 * Whether this app supports importing from Google Docs.
 * @member {Boolean} supportsImport
 */
App.prototype['supportsImport'] = undefined;

/**
 * Whether this app supports opening more than one file.
 * @member {Boolean} supportsMultiOpen
 */
App.prototype['supportsMultiOpen'] = undefined;

/**
 * Whether this app supports creating files when offline.
 * @member {Boolean} supportsOfflineCreate
 */
App.prototype['supportsOfflineCreate'] = undefined;

/**
 * Whether the app is selected as the default handler for the types it supports.
 * @member {Boolean} useByDefault
 */
App.prototype['useByDefault'] = undefined;






export default App;

