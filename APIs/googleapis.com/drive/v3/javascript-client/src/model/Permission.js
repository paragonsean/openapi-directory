/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermissionPermissionDetailsInner from './PermissionPermissionDetailsInner';
import PermissionTeamDrivePermissionDetailsInner from './PermissionTeamDrivePermissionDetailsInner';

/**
 * The Permission model module.
 * @module model/Permission
 * @version v3
 */
class Permission {
    /**
     * Constructs a new <code>Permission</code>.
     * A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as &#x60;permissions.update&#x60;) require a &#x60;permissionId&#x60;. Use the &#x60;permissions.list&#x60; method to retrieve the ID for a file, folder, or shared drive.
     * @alias module:model/Permission
     */
    constructor() { 
        
        Permission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#permission';
    }

    /**
     * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission} obj Optional instance to populate.
     * @return {module:model/Permission} The populated <code>Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission();

            if (data.hasOwnProperty('allowFileDiscovery')) {
                obj['allowFileDiscovery'] = ApiClient.convertToType(data['allowFileDiscovery'], 'Boolean');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pendingOwner')) {
                obj['pendingOwner'] = ApiClient.convertToType(data['pendingOwner'], 'Boolean');
            }
            if (data.hasOwnProperty('permissionDetails')) {
                obj['permissionDetails'] = ApiClient.convertToType(data['permissionDetails'], [PermissionPermissionDetailsInner]);
            }
            if (data.hasOwnProperty('photoLink')) {
                obj['photoLink'] = ApiClient.convertToType(data['photoLink'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('teamDrivePermissionDetails')) {
                obj['teamDrivePermissionDetails'] = ApiClient.convertToType(data['teamDrivePermissionDetails'], [PermissionTeamDrivePermissionDetailsInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['permissionDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissionDetails'])) {
                throw new Error("Expected the field `permissionDetails` to be an array in the JSON data but got " + data['permissionDetails']);
            }
            // validate the optional field `permissionDetails` (array)
            for (const item of data['permissionDetails']) {
                PermissionPermissionDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['photoLink'] && !(typeof data['photoLink'] === 'string' || data['photoLink'] instanceof String)) {
            throw new Error("Expected the field `photoLink` to be a primitive type in the JSON string but got " + data['photoLink']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        if (data['teamDrivePermissionDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teamDrivePermissionDetails'])) {
                throw new Error("Expected the field `teamDrivePermissionDetails` to be an array in the JSON data but got " + data['teamDrivePermissionDetails']);
            }
            // validate the optional field `teamDrivePermissionDetails` (array)
            for (const item of data['teamDrivePermissionDetails']) {
                PermissionTeamDrivePermissionDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * Whether the permission allows the file to be discovered through search. This is only applicable for permissions of type `domain` or `anyone`.
 * @member {Boolean} allowFileDiscovery
 */
Permission.prototype['allowFileDiscovery'] = undefined;

/**
 * Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
 * @member {Boolean} deleted
 */
Permission.prototype['deleted'] = undefined;

/**
 * Output only. The \"pretty\" name of the value of the permission. The following is a list of examples for each type of permission: * `user` - User's full name, as defined for their Google account, such as \"Joe Smith.\" * `group` - Name of the Google Group, such as \"The Company Administrators.\" * `domain` - String domain name, such as \"thecompany.com.\" * `anyone` - No `displayName` is present.
 * @member {String} displayName
 */
Permission.prototype['displayName'] = undefined;

/**
 * The domain to which this permission refers.
 * @member {String} domain
 */
Permission.prototype['domain'] = undefined;

/**
 * The email address of the user or group to which this permission refers.
 * @member {String} emailAddress
 */
Permission.prototype['emailAddress'] = undefined;

/**
 * The time at which this permission will expire (RFC 3339 date-time). Expiration times have the following restrictions: - They can only be set on user and group permissions - The time must be in the future - The time cannot be more than a year in the future
 * @member {Date} expirationTime
 */
Permission.prototype['expirationTime'] = undefined;

/**
 * Output only. The ID of this permission. This is a unique identifier for the grantee, and is published in User resources as `permissionId`. IDs should be treated as opaque values.
 * @member {String} id
 */
Permission.prototype['id'] = undefined;

/**
 * Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#permission\"`.
 * @member {String} kind
 * @default 'drive#permission'
 */
Permission.prototype['kind'] = 'drive#permission';

/**
 * Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.
 * @member {Boolean} pendingOwner
 */
Permission.prototype['pendingOwner'] = undefined;

/**
 * Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
 * @member {Array.<module:model/PermissionPermissionDetailsInner>} permissionDetails
 */
Permission.prototype['permissionDetails'] = undefined;

/**
 * Output only. A link to the user's profile photo, if available.
 * @member {String} photoLink
 */
Permission.prototype['photoLink'] = undefined;

/**
 * The role granted by this permission. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `commenter` * `reader`
 * @member {String} role
 */
Permission.prototype['role'] = undefined;

/**
 * Output only. Deprecated: Output only. Use `permissionDetails` instead.
 * @member {Array.<module:model/PermissionTeamDrivePermissionDetailsInner>} teamDrivePermissionDetails
 */
Permission.prototype['teamDrivePermissionDetails'] = undefined;

/**
 * The type of the grantee. Valid values are: * `user` * `group` * `domain` * `anyone` When creating a permission, if `type` is `user` or `group`, you must provide an `emailAddress` for the user or group. When `type` is `domain`, you must provide a `domain`. There isn't extra information required for an `anyone` type.
 * @member {String} type
 */
Permission.prototype['type'] = undefined;

/**
 * Indicates the view for this permission. Only populated for permissions that belong to a view. 'published' is the only supported value.
 * @member {String} view
 */
Permission.prototype['view'] = undefined;






export default Permission;

