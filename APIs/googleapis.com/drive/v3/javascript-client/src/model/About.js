/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AboutDriveThemesInner from './AboutDriveThemesInner';
import AboutStorageQuota from './AboutStorageQuota';
import AboutTeamDriveThemesInner from './AboutTeamDriveThemesInner';
import User from './User';

/**
 * The About model module.
 * @module model/About
 * @version v3
 */
class About {
    /**
     * Constructs a new <code>About</code>.
     * Information about the user, the user&#39;s Drive, and system capabilities.
     * @alias module:model/About
     */
    constructor() { 
        
        About.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#about';
    }

    /**
     * Constructs a <code>About</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/About} obj Optional instance to populate.
     * @return {module:model/About} The populated <code>About</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new About();

            if (data.hasOwnProperty('appInstalled')) {
                obj['appInstalled'] = ApiClient.convertToType(data['appInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('canCreateDrives')) {
                obj['canCreateDrives'] = ApiClient.convertToType(data['canCreateDrives'], 'Boolean');
            }
            if (data.hasOwnProperty('canCreateTeamDrives')) {
                obj['canCreateTeamDrives'] = ApiClient.convertToType(data['canCreateTeamDrives'], 'Boolean');
            }
            if (data.hasOwnProperty('driveThemes')) {
                obj['driveThemes'] = ApiClient.convertToType(data['driveThemes'], [AboutDriveThemesInner]);
            }
            if (data.hasOwnProperty('exportFormats')) {
                obj['exportFormats'] = ApiClient.convertToType(data['exportFormats'], {'String': ['String']});
            }
            if (data.hasOwnProperty('folderColorPalette')) {
                obj['folderColorPalette'] = ApiClient.convertToType(data['folderColorPalette'], ['String']);
            }
            if (data.hasOwnProperty('importFormats')) {
                obj['importFormats'] = ApiClient.convertToType(data['importFormats'], {'String': ['String']});
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maxImportSizes')) {
                obj['maxImportSizes'] = ApiClient.convertToType(data['maxImportSizes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('maxUploadSize')) {
                obj['maxUploadSize'] = ApiClient.convertToType(data['maxUploadSize'], 'String');
            }
            if (data.hasOwnProperty('storageQuota')) {
                obj['storageQuota'] = AboutStorageQuota.constructFromObject(data['storageQuota']);
            }
            if (data.hasOwnProperty('teamDriveThemes')) {
                obj['teamDriveThemes'] = ApiClient.convertToType(data['teamDriveThemes'], [AboutTeamDriveThemesInner]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>About</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>About</code>.
     */
    static validateJSON(data) {
        if (data['driveThemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['driveThemes'])) {
                throw new Error("Expected the field `driveThemes` to be an array in the JSON data but got " + data['driveThemes']);
            }
            // validate the optional field `driveThemes` (array)
            for (const item of data['driveThemes']) {
                AboutDriveThemesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['folderColorPalette'])) {
            throw new Error("Expected the field `folderColorPalette` to be an array in the JSON data but got " + data['folderColorPalette']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['maxUploadSize'] && !(typeof data['maxUploadSize'] === 'string' || data['maxUploadSize'] instanceof String)) {
            throw new Error("Expected the field `maxUploadSize` to be a primitive type in the JSON string but got " + data['maxUploadSize']);
        }
        // validate the optional field `storageQuota`
        if (data['storageQuota']) { // data not null
          AboutStorageQuota.validateJSON(data['storageQuota']);
        }
        if (data['teamDriveThemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teamDriveThemes'])) {
                throw new Error("Expected the field `teamDriveThemes` to be an array in the JSON data but got " + data['teamDriveThemes']);
            }
            // validate the optional field `teamDriveThemes` (array)
            for (const item of data['teamDriveThemes']) {
                AboutTeamDriveThemesInner.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Whether the user has installed the requesting app.
 * @member {Boolean} appInstalled
 */
About.prototype['appInstalled'] = undefined;

/**
 * Whether the user can create shared drives.
 * @member {Boolean} canCreateDrives
 */
About.prototype['canCreateDrives'] = undefined;

/**
 * Deprecated: Use `canCreateDrives` instead.
 * @member {Boolean} canCreateTeamDrives
 */
About.prototype['canCreateTeamDrives'] = undefined;

/**
 * A list of themes that are supported for shared drives.
 * @member {Array.<module:model/AboutDriveThemesInner>} driveThemes
 */
About.prototype['driveThemes'] = undefined;

/**
 * A map of source MIME type to possible targets for all supported exports.
 * @member {Object.<String, Array.<String>>} exportFormats
 */
About.prototype['exportFormats'] = undefined;

/**
 * The currently supported folder colors as RGB hex strings.
 * @member {Array.<String>} folderColorPalette
 */
About.prototype['folderColorPalette'] = undefined;

/**
 * A map of source MIME type to possible targets for all supported imports.
 * @member {Object.<String, Array.<String>>} importFormats
 */
About.prototype['importFormats'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"drive#about\"`.
 * @member {String} kind
 * @default 'drive#about'
 */
About.prototype['kind'] = 'drive#about';

/**
 * A map of maximum import sizes by MIME type, in bytes.
 * @member {Object.<String, String>} maxImportSizes
 */
About.prototype['maxImportSizes'] = undefined;

/**
 * The maximum upload size in bytes.
 * @member {String} maxUploadSize
 */
About.prototype['maxUploadSize'] = undefined;

/**
 * @member {module:model/AboutStorageQuota} storageQuota
 */
About.prototype['storageQuota'] = undefined;

/**
 * Deprecated: Use `driveThemes` instead.
 * @member {Array.<module:model/AboutTeamDriveThemesInner>} teamDriveThemes
 */
About.prototype['teamDriveThemes'] = undefined;

/**
 * @member {module:model/User} user
 */
About.prototype['user'] = undefined;






export default About;

