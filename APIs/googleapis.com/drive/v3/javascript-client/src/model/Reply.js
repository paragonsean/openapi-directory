/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Reply model module.
 * @module model/Reply
 * @version v3
 */
class Reply {
    /**
     * Constructs a new <code>Reply</code>.
     * A reply to a comment on a file. Some resource methods (such as &#x60;replies.update&#x60;) require a &#x60;replyId&#x60;. Use the &#x60;replies.list&#x60; method to retrieve the ID for a reply.
     * @alias module:model/Reply
     */
    constructor() { 
        
        Reply.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#reply';
    }

    /**
     * Constructs a <code>Reply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reply} obj Optional instance to populate.
     * @return {module:model/Reply} The populated <code>Reply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reply();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('htmlContent')) {
                obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('modifiedTime')) {
                obj['modifiedTime'] = ApiClient.convertToType(data['modifiedTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reply</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reply</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['htmlContent'] && !(typeof data['htmlContent'] === 'string' || data['htmlContent'] instanceof String)) {
            throw new Error("Expected the field `htmlContent` to be a primitive type in the JSON string but got " + data['htmlContent']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * The action the reply performed to the parent comment. Valid values are: * `resolve` * `reopen`
 * @member {String} action
 */
Reply.prototype['action'] = undefined;

/**
 * @member {module:model/User} author
 */
Reply.prototype['author'] = undefined;

/**
 * The plain text content of the reply. This field is used for setting the content, while `htmlContent` should be displayed. This is required on creates if no `action` is specified.
 * @member {String} content
 */
Reply.prototype['content'] = undefined;

/**
 * The time at which the reply was created (RFC 3339 date-time).
 * @member {Date} createdTime
 */
Reply.prototype['createdTime'] = undefined;

/**
 * Output only. Whether the reply has been deleted. A deleted reply has no content.
 * @member {Boolean} deleted
 */
Reply.prototype['deleted'] = undefined;

/**
 * Output only. The content of the reply with HTML formatting.
 * @member {String} htmlContent
 */
Reply.prototype['htmlContent'] = undefined;

/**
 * Output only. The ID of the reply.
 * @member {String} id
 */
Reply.prototype['id'] = undefined;

/**
 * Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#reply\"`.
 * @member {String} kind
 * @default 'drive#reply'
 */
Reply.prototype['kind'] = 'drive#reply';

/**
 * The last time the reply was modified (RFC 3339 date-time).
 * @member {Date} modifiedTime
 */
Reply.prototype['modifiedTime'] = undefined;






export default Reply;

