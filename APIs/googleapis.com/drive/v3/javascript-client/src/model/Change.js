/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Drive from './Drive';
import TeamDrive from './TeamDrive';

/**
 * The Change model module.
 * @module model/Change
 * @version v3
 */
class Change {
    /**
     * Constructs a new <code>Change</code>.
     * A change to a file or shared drive.
     * @alias module:model/Change
     */
    constructor() { 
        
        Change.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#change';
    }

    /**
     * Constructs a <code>Change</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Change} obj Optional instance to populate.
     * @return {module:model/Change} The populated <code>Change</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Change();

            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('drive')) {
                obj['drive'] = Drive.constructFromObject(data['drive']);
            }
            if (data.hasOwnProperty('driveId')) {
                obj['driveId'] = ApiClient.convertToType(data['driveId'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = File.constructFromObject(data['file']);
            }
            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('removed')) {
                obj['removed'] = ApiClient.convertToType(data['removed'], 'Boolean');
            }
            if (data.hasOwnProperty('teamDrive')) {
                obj['teamDrive'] = TeamDrive.constructFromObject(data['teamDrive']);
            }
            if (data.hasOwnProperty('teamDriveId')) {
                obj['teamDriveId'] = ApiClient.convertToType(data['teamDriveId'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Change</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Change</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['changeType'] && !(typeof data['changeType'] === 'string' || data['changeType'] instanceof String)) {
            throw new Error("Expected the field `changeType` to be a primitive type in the JSON string but got " + data['changeType']);
        }
        // validate the optional field `drive`
        if (data['drive']) { // data not null
          Drive.validateJSON(data['drive']);
        }
        // ensure the json data is a string
        if (data['driveId'] && !(typeof data['driveId'] === 'string' || data['driveId'] instanceof String)) {
            throw new Error("Expected the field `driveId` to be a primitive type in the JSON string but got " + data['driveId']);
        }
        // validate the optional field `file`
        if (data['file']) { // data not null
          File.validateJSON(data['file']);
        }
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `teamDrive`
        if (data['teamDrive']) { // data not null
          TeamDrive.validateJSON(data['teamDrive']);
        }
        // ensure the json data is a string
        if (data['teamDriveId'] && !(typeof data['teamDriveId'] === 'string' || data['teamDriveId'] instanceof String)) {
            throw new Error("Expected the field `teamDriveId` to be a primitive type in the JSON string but got " + data['teamDriveId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The type of the change. Possible values are `file` and `drive`.
 * @member {String} changeType
 */
Change.prototype['changeType'] = undefined;

/**
 * @member {module:model/Drive} drive
 */
Change.prototype['drive'] = undefined;

/**
 * The ID of the shared drive associated with this change.
 * @member {String} driveId
 */
Change.prototype['driveId'] = undefined;

/**
 * @member {File} file
 */
Change.prototype['file'] = undefined;

/**
 * The ID of the file which has changed.
 * @member {String} fileId
 */
Change.prototype['fileId'] = undefined;

/**
 * Identifies what kind of resource this is. Value: the fixed string `\"drive#change\"`.
 * @member {String} kind
 * @default 'drive#change'
 */
Change.prototype['kind'] = 'drive#change';

/**
 * Whether the file or shared drive has been removed from this list of changes, for example by deletion or loss of access.
 * @member {Boolean} removed
 */
Change.prototype['removed'] = undefined;

/**
 * @member {module:model/TeamDrive} teamDrive
 */
Change.prototype['teamDrive'] = undefined;

/**
 * Deprecated: Use `driveId` instead.
 * @member {String} teamDriveId
 */
Change.prototype['teamDriveId'] = undefined;

/**
 * The time of this change (RFC 3339 date-time).
 * @member {Date} time
 */
Change.prototype['time'] = undefined;

/**
 * Deprecated: Use `changeType` instead.
 * @member {String} type
 */
Change.prototype['type'] = undefined;






export default Change;

