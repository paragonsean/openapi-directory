/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The ContentRestriction model module.
 * @module model/ContentRestriction
 * @version v3
 */
class ContentRestriction {
    /**
     * Constructs a new <code>ContentRestriction</code>.
     * A restriction for accessing the content of the file.
     * @alias module:model/ContentRestriction
     */
    constructor() { 
        
        ContentRestriction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContentRestriction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContentRestriction} obj Optional instance to populate.
     * @return {module:model/ContentRestriction} The populated <code>ContentRestriction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContentRestriction();

            if (data.hasOwnProperty('ownerRestricted')) {
                obj['ownerRestricted'] = ApiClient.convertToType(data['ownerRestricted'], 'Boolean');
            }
            if (data.hasOwnProperty('readOnly')) {
                obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('restrictingUser')) {
                obj['restrictingUser'] = User.constructFromObject(data['restrictingUser']);
            }
            if (data.hasOwnProperty('restrictionTime')) {
                obj['restrictionTime'] = ApiClient.convertToType(data['restrictionTime'], 'Date');
            }
            if (data.hasOwnProperty('systemRestricted')) {
                obj['systemRestricted'] = ApiClient.convertToType(data['systemRestricted'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContentRestriction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContentRestriction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // validate the optional field `restrictingUser`
        if (data['restrictingUser']) { // data not null
          User.validateJSON(data['restrictingUser']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.
 * @member {Boolean} ownerRestricted
 */
ContentRestriction.prototype['ownerRestricted'] = undefined;

/**
 * Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.
 * @member {Boolean} readOnly
 */
ContentRestriction.prototype['readOnly'] = undefined;

/**
 * Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.
 * @member {String} reason
 */
ContentRestriction.prototype['reason'] = undefined;

/**
 * @member {module:model/User} restrictingUser
 */
ContentRestriction.prototype['restrictingUser'] = undefined;

/**
 * The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.
 * @member {Date} restrictionTime
 */
ContentRestriction.prototype['restrictionTime'] = undefined;

/**
 * Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.
 * @member {Boolean} systemRestricted
 */
ContentRestriction.prototype['systemRestricted'] = undefined;

/**
 * Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.
 * @member {String} type
 */
ContentRestriction.prototype['type'] = undefined;






export default ContentRestriction;

