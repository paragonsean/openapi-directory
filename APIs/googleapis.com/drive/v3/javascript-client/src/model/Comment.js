/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentQuotedFileContent from './CommentQuotedFileContent';
import Reply from './Reply';
import User from './User';

/**
 * The Comment model module.
 * @module model/Comment
 * @version v3
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * A comment on a file. Some resource methods (such as &#x60;comments.update&#x60;) require a &#x60;commentId&#x60;. Use the &#x60;comments.list&#x60; method to retrieve the ID for a comment in a file.
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#comment';
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('htmlContent')) {
                obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('modifiedTime')) {
                obj['modifiedTime'] = ApiClient.convertToType(data['modifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('quotedFileContent')) {
                obj['quotedFileContent'] = CommentQuotedFileContent.constructFromObject(data['quotedFileContent']);
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], [Reply]);
            }
            if (data.hasOwnProperty('resolved')) {
                obj['resolved'] = ApiClient.convertToType(data['resolved'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['htmlContent'] && !(typeof data['htmlContent'] === 'string' || data['htmlContent'] instanceof String)) {
            throw new Error("Expected the field `htmlContent` to be a primitive type in the JSON string but got " + data['htmlContent']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `quotedFileContent`
        if (data['quotedFileContent']) { // data not null
          CommentQuotedFileContent.validateJSON(data['quotedFileContent']);
        }
        if (data['replies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replies'])) {
                throw new Error("Expected the field `replies` to be an array in the JSON data but got " + data['replies']);
            }
            // validate the optional field `replies` (array)
            for (const item of data['replies']) {
                Reply.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).
 * @member {String} anchor
 */
Comment.prototype['anchor'] = undefined;

/**
 * @member {module:model/User} author
 */
Comment.prototype['author'] = undefined;

/**
 * The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.
 * @member {String} content
 */
Comment.prototype['content'] = undefined;

/**
 * The time at which the comment was created (RFC 3339 date-time).
 * @member {Date} createdTime
 */
Comment.prototype['createdTime'] = undefined;

/**
 * Output only. Whether the comment has been deleted. A deleted comment has no content.
 * @member {Boolean} deleted
 */
Comment.prototype['deleted'] = undefined;

/**
 * Output only. The content of the comment with HTML formatting.
 * @member {String} htmlContent
 */
Comment.prototype['htmlContent'] = undefined;

/**
 * Output only. The ID of the comment.
 * @member {String} id
 */
Comment.prototype['id'] = undefined;

/**
 * Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#comment\"`.
 * @member {String} kind
 * @default 'drive#comment'
 */
Comment.prototype['kind'] = 'drive#comment';

/**
 * The last time the comment or any of its replies was modified (RFC 3339 date-time).
 * @member {Date} modifiedTime
 */
Comment.prototype['modifiedTime'] = undefined;

/**
 * @member {module:model/CommentQuotedFileContent} quotedFileContent
 */
Comment.prototype['quotedFileContent'] = undefined;

/**
 * Output only. The full list of replies to the comment in chronological order.
 * @member {Array.<module:model/Reply>} replies
 */
Comment.prototype['replies'] = undefined;

/**
 * Output only. Whether the comment has been resolved by one of its replies.
 * @member {Boolean} resolved
 */
Comment.prototype['resolved'] = undefined;






export default Comment;

