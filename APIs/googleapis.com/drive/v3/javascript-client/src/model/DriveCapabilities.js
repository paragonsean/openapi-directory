/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DriveCapabilities model module.
 * @module model/DriveCapabilities
 * @version v3
 */
class DriveCapabilities {
    /**
     * Constructs a new <code>DriveCapabilities</code>.
     * Output only. Capabilities the current user has on this shared drive.
     * @alias module:model/DriveCapabilities
     */
    constructor() { 
        
        DriveCapabilities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriveCapabilities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriveCapabilities} obj Optional instance to populate.
     * @return {module:model/DriveCapabilities} The populated <code>DriveCapabilities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriveCapabilities();

            if (data.hasOwnProperty('canAddChildren')) {
                obj['canAddChildren'] = ApiClient.convertToType(data['canAddChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeCopyRequiresWriterPermissionRestriction')) {
                obj['canChangeCopyRequiresWriterPermissionRestriction'] = ApiClient.convertToType(data['canChangeCopyRequiresWriterPermissionRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeDomainUsersOnlyRestriction')) {
                obj['canChangeDomainUsersOnlyRestriction'] = ApiClient.convertToType(data['canChangeDomainUsersOnlyRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeDriveBackground')) {
                obj['canChangeDriveBackground'] = ApiClient.convertToType(data['canChangeDriveBackground'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeDriveMembersOnlyRestriction')) {
                obj['canChangeDriveMembersOnlyRestriction'] = ApiClient.convertToType(data['canChangeDriveMembersOnlyRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeSharingFoldersRequiresOrganizerPermissionRestriction')) {
                obj['canChangeSharingFoldersRequiresOrganizerPermissionRestriction'] = ApiClient.convertToType(data['canChangeSharingFoldersRequiresOrganizerPermissionRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canComment')) {
                obj['canComment'] = ApiClient.convertToType(data['canComment'], 'Boolean');
            }
            if (data.hasOwnProperty('canCopy')) {
                obj['canCopy'] = ApiClient.convertToType(data['canCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('canDeleteChildren')) {
                obj['canDeleteChildren'] = ApiClient.convertToType(data['canDeleteChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canDeleteDrive')) {
                obj['canDeleteDrive'] = ApiClient.convertToType(data['canDeleteDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canDownload')) {
                obj['canDownload'] = ApiClient.convertToType(data['canDownload'], 'Boolean');
            }
            if (data.hasOwnProperty('canEdit')) {
                obj['canEdit'] = ApiClient.convertToType(data['canEdit'], 'Boolean');
            }
            if (data.hasOwnProperty('canListChildren')) {
                obj['canListChildren'] = ApiClient.convertToType(data['canListChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canManageMembers')) {
                obj['canManageMembers'] = ApiClient.convertToType(data['canManageMembers'], 'Boolean');
            }
            if (data.hasOwnProperty('canReadRevisions')) {
                obj['canReadRevisions'] = ApiClient.convertToType(data['canReadRevisions'], 'Boolean');
            }
            if (data.hasOwnProperty('canRename')) {
                obj['canRename'] = ApiClient.convertToType(data['canRename'], 'Boolean');
            }
            if (data.hasOwnProperty('canRenameDrive')) {
                obj['canRenameDrive'] = ApiClient.convertToType(data['canRenameDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canResetDriveRestrictions')) {
                obj['canResetDriveRestrictions'] = ApiClient.convertToType(data['canResetDriveRestrictions'], 'Boolean');
            }
            if (data.hasOwnProperty('canShare')) {
                obj['canShare'] = ApiClient.convertToType(data['canShare'], 'Boolean');
            }
            if (data.hasOwnProperty('canTrashChildren')) {
                obj['canTrashChildren'] = ApiClient.convertToType(data['canTrashChildren'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriveCapabilities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriveCapabilities</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Output only. Whether the current user can add children to folders in this shared drive.
 * @member {Boolean} canAddChildren
 */
DriveCapabilities.prototype['canAddChildren'] = undefined;

/**
 * Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this shared drive.
 * @member {Boolean} canChangeCopyRequiresWriterPermissionRestriction
 */
DriveCapabilities.prototype['canChangeCopyRequiresWriterPermissionRestriction'] = undefined;

/**
 * Output only. Whether the current user can change the `domainUsersOnly` restriction of this shared drive.
 * @member {Boolean} canChangeDomainUsersOnlyRestriction
 */
DriveCapabilities.prototype['canChangeDomainUsersOnlyRestriction'] = undefined;

/**
 * Output only. Whether the current user can change the background of this shared drive.
 * @member {Boolean} canChangeDriveBackground
 */
DriveCapabilities.prototype['canChangeDriveBackground'] = undefined;

/**
 * Output only. Whether the current user can change the `driveMembersOnly` restriction of this shared drive.
 * @member {Boolean} canChangeDriveMembersOnlyRestriction
 */
DriveCapabilities.prototype['canChangeDriveMembersOnlyRestriction'] = undefined;

/**
 * Output only. Whether the current user can change the `sharingFoldersRequiresOrganizerPermission` restriction of this shared drive.
 * @member {Boolean} canChangeSharingFoldersRequiresOrganizerPermissionRestriction
 */
DriveCapabilities.prototype['canChangeSharingFoldersRequiresOrganizerPermissionRestriction'] = undefined;

/**
 * Output only. Whether the current user can comment on files in this shared drive.
 * @member {Boolean} canComment
 */
DriveCapabilities.prototype['canComment'] = undefined;

/**
 * Output only. Whether the current user can copy files in this shared drive.
 * @member {Boolean} canCopy
 */
DriveCapabilities.prototype['canCopy'] = undefined;

/**
 * Output only. Whether the current user can delete children from folders in this shared drive.
 * @member {Boolean} canDeleteChildren
 */
DriveCapabilities.prototype['canDeleteChildren'] = undefined;

/**
 * Output only. Whether the current user can delete this shared drive. Attempting to delete the shared drive may still fail if there are untrashed items inside the shared drive.
 * @member {Boolean} canDeleteDrive
 */
DriveCapabilities.prototype['canDeleteDrive'] = undefined;

/**
 * Output only. Whether the current user can download files in this shared drive.
 * @member {Boolean} canDownload
 */
DriveCapabilities.prototype['canDownload'] = undefined;

/**
 * Output only. Whether the current user can edit files in this shared drive
 * @member {Boolean} canEdit
 */
DriveCapabilities.prototype['canEdit'] = undefined;

/**
 * Output only. Whether the current user can list the children of folders in this shared drive.
 * @member {Boolean} canListChildren
 */
DriveCapabilities.prototype['canListChildren'] = undefined;

/**
 * Output only. Whether the current user can add members to this shared drive or remove them or change their role.
 * @member {Boolean} canManageMembers
 */
DriveCapabilities.prototype['canManageMembers'] = undefined;

/**
 * Output only. Whether the current user can read the revisions resource of files in this shared drive.
 * @member {Boolean} canReadRevisions
 */
DriveCapabilities.prototype['canReadRevisions'] = undefined;

/**
 * Output only. Whether the current user can rename files or folders in this shared drive.
 * @member {Boolean} canRename
 */
DriveCapabilities.prototype['canRename'] = undefined;

/**
 * Output only. Whether the current user can rename this shared drive.
 * @member {Boolean} canRenameDrive
 */
DriveCapabilities.prototype['canRenameDrive'] = undefined;

/**
 * Output only. Whether the current user can reset the shared drive restrictions to defaults.
 * @member {Boolean} canResetDriveRestrictions
 */
DriveCapabilities.prototype['canResetDriveRestrictions'] = undefined;

/**
 * Output only. Whether the current user can share files or folders in this shared drive.
 * @member {Boolean} canShare
 */
DriveCapabilities.prototype['canShare'] = undefined;

/**
 * Output only. Whether the current user can trash children from folders in this shared drive.
 * @member {Boolean} canTrashChildren
 */
DriveCapabilities.prototype['canTrashChildren'] = undefined;






export default DriveCapabilities;

