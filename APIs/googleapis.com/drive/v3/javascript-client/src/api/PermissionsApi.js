/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Permission from '../model/Permission';
import PermissionList from '../model/PermissionList';

/**
* Permissions service.
* @module api/PermissionsApi
* @version v3
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the drivePermissionsCreate operation.
     * @callback module:api/PermissionsApi~drivePermissionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a permission for a file or shared drive. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     * @param {String} fileId The ID of the file or shared drive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [emailMessage] A plain text custom message to include in the notification email.
     * @param {Boolean} [enforceSingleParent] Deprecated: See `moveToNewOwnersRoot` for details.
     * @param {Boolean} [moveToNewOwnersRoot] This parameter will only take effect if the item is not in a shared drive and the request is attempting to transfer the ownership of the item. If set to `true`, the item will be moved to the new owner's My Drive root folder and all prior parents removed. If set to `false`, parents are not changed.
     * @param {Boolean} [sendNotificationEmail] Whether to send a notification email when sharing to users or groups. This defaults to true for users and groups, and is not allowed for other requests. It must not be disabled for ownership transfers.
     * @param {Boolean} [supportsAllDrives] Whether the requesting application supports both My Drives and shared drives.
     * @param {Boolean} [supportsTeamDrives] Deprecated: Use `supportsAllDrives` instead.
     * @param {Boolean} [transferOwnership] Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {module:model/Permission} [permission] 
     * @param {module:api/PermissionsApi~drivePermissionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    drivePermissionsCreate(fileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['permission'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling drivePermissionsCreate");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'emailMessage': opts['emailMessage'],
        'enforceSingleParent': opts['enforceSingleParent'],
        'moveToNewOwnersRoot': opts['moveToNewOwnersRoot'],
        'sendNotificationEmail': opts['sendNotificationEmail'],
        'supportsAllDrives': opts['supportsAllDrives'],
        'supportsTeamDrives': opts['supportsTeamDrives'],
        'transferOwnership': opts['transferOwnership'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/files/{fileId}/permissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drivePermissionsDelete operation.
     * @callback module:api/PermissionsApi~drivePermissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     * @param {String} fileId The ID of the file or shared drive.
     * @param {String} permissionId The ID of the permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [supportsAllDrives] Whether the requesting application supports both My Drives and shared drives.
     * @param {Boolean} [supportsTeamDrives] Deprecated: Use `supportsAllDrives` instead.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {module:api/PermissionsApi~drivePermissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    drivePermissionsDelete(fileId, permissionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling drivePermissionsDelete");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling drivePermissionsDelete");
      }

      let pathParams = {
        'fileId': fileId,
        'permissionId': permissionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'supportsAllDrives': opts['supportsAllDrives'],
        'supportsTeamDrives': opts['supportsTeamDrives'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/{fileId}/permissions/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drivePermissionsGet operation.
     * @callback module:api/PermissionsApi~drivePermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a permission by ID.
     * @param {String} fileId The ID of the file.
     * @param {String} permissionId The ID of the permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [supportsAllDrives] Whether the requesting application supports both My Drives and shared drives.
     * @param {Boolean} [supportsTeamDrives] Deprecated: Use `supportsAllDrives` instead.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {module:api/PermissionsApi~drivePermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    drivePermissionsGet(fileId, permissionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling drivePermissionsGet");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling drivePermissionsGet");
      }

      let pathParams = {
        'fileId': fileId,
        'permissionId': permissionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'supportsAllDrives': opts['supportsAllDrives'],
        'supportsTeamDrives': opts['supportsTeamDrives'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/files/{fileId}/permissions/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drivePermissionsList operation.
     * @callback module:api/PermissionsApi~drivePermissionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a file's or shared drive's permissions.
     * @param {String} fileId The ID of the file or shared drive.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [includePermissionsForView] Specifies which additional view's permissions to include in the response. Only 'published' is supported.
     * @param {Number} [pageSize] The maximum number of permissions to return per page. When not set for files in a shared drive, at most 100 results will be returned. When not set for files that are not in a shared drive, the entire list will be returned.
     * @param {String} [pageToken] The token for continuing a previous list request on the next page. This should be set to the value of 'nextPageToken' from the previous response.
     * @param {Boolean} [supportsAllDrives] Whether the requesting application supports both My Drives and shared drives.
     * @param {Boolean} [supportsTeamDrives] Deprecated: Use `supportsAllDrives` instead.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {module:api/PermissionsApi~drivePermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionList}
     */
    drivePermissionsList(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling drivePermissionsList");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includePermissionsForView': opts['includePermissionsForView'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken'],
        'supportsAllDrives': opts['supportsAllDrives'],
        'supportsTeamDrives': opts['supportsTeamDrives'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionList;
      return this.apiClient.callApi(
        '/files/{fileId}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drivePermissionsUpdate operation.
     * @callback module:api/PermissionsApi~drivePermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a permission with patch semantics. **Warning:** Concurrent permissions operations on the same file are not supported; only the last update is applied.
     * @param {String} fileId The ID of the file or shared drive.
     * @param {String} permissionId The ID of the permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [removeExpiration] Whether to remove the expiration date.
     * @param {Boolean} [supportsAllDrives] Whether the requesting application supports both My Drives and shared drives.
     * @param {Boolean} [supportsTeamDrives] Deprecated: Use `supportsAllDrives` instead.
     * @param {Boolean} [transferOwnership] Whether to transfer ownership to the specified user and downgrade the current owner to a writer. This parameter is required as an acknowledgement of the side effect.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if the file ID parameter refers to a shared drive and the requester is an administrator of the domain to which the shared drive belongs.
     * @param {module:model/Permission} [permission] 
     * @param {module:api/PermissionsApi~drivePermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    drivePermissionsUpdate(fileId, permissionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['permission'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling drivePermissionsUpdate");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling drivePermissionsUpdate");
      }

      let pathParams = {
        'fileId': fileId,
        'permissionId': permissionId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'removeExpiration': opts['removeExpiration'],
        'supportsAllDrives': opts['supportsAllDrives'],
        'supportsTeamDrives': opts['supportsTeamDrives'],
        'transferOwnership': opts['transferOwnership'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/files/{fileId}/permissions/{permissionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
