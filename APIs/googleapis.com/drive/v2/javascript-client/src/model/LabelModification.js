/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LabelFieldModification from './LabelFieldModification';

/**
 * The LabelModification model module.
 * @module model/LabelModification
 * @version v2
 */
class LabelModification {
    /**
     * Constructs a new <code>LabelModification</code>.
     * A modification to a label on a file. A LabelModification can be used to apply a label to a file, update an existing label on a file, or remove a label from a file.
     * @alias module:model/LabelModification
     */
    constructor() { 
        
        LabelModification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#labelModification';
    }

    /**
     * Constructs a <code>LabelModification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabelModification} obj Optional instance to populate.
     * @return {module:model/LabelModification} The populated <code>LabelModification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabelModification();

            if (data.hasOwnProperty('fieldModifications')) {
                obj['fieldModifications'] = ApiClient.convertToType(data['fieldModifications'], [LabelFieldModification]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labelId')) {
                obj['labelId'] = ApiClient.convertToType(data['labelId'], 'String');
            }
            if (data.hasOwnProperty('removeLabel')) {
                obj['removeLabel'] = ApiClient.convertToType(data['removeLabel'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabelModification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabelModification</code>.
     */
    static validateJSON(data) {
        if (data['fieldModifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fieldModifications'])) {
                throw new Error("Expected the field `fieldModifications` to be an array in the JSON data but got " + data['fieldModifications']);
            }
            // validate the optional field `fieldModifications` (array)
            for (const item of data['fieldModifications']) {
                LabelFieldModification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['labelId'] && !(typeof data['labelId'] === 'string' || data['labelId'] instanceof String)) {
            throw new Error("Expected the field `labelId` to be a primitive type in the JSON string but got " + data['labelId']);
        }

        return true;
    }


}



/**
 * The list of modifications to this label's fields.
 * @member {Array.<module:model/LabelFieldModification>} fieldModifications
 */
LabelModification.prototype['fieldModifications'] = undefined;

/**
 * This is always `drive#labelModification`.
 * @member {String} kind
 * @default 'drive#labelModification'
 */
LabelModification.prototype['kind'] = 'drive#labelModification';

/**
 * The ID of the label to modify.
 * @member {String} labelId
 */
LabelModification.prototype['labelId'] = undefined;

/**
 * If true, the label will be removed from the file.
 * @member {Boolean} removeLabel
 */
LabelModification.prototype['removeLabel'] = undefined;






export default LabelModification;

