/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermissionPermissionDetailsInner from './PermissionPermissionDetailsInner';
import PermissionTeamDrivePermissionDetailsInner from './PermissionTeamDrivePermissionDetailsInner';

/**
 * The Permission model module.
 * @module model/Permission
 * @version v2
 */
class Permission {
    /**
     * Constructs a new <code>Permission</code>.
     * A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as &#x60;permissions.update&#x60;) require a &#x60;permissionId&#x60;. Use the &#x60;permissions.list&#x60; method to retrieve the ID for a file, folder, or shared drive.
     * @alias module:model/Permission
     */
    constructor() { 
        
        Permission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#permission';
    }

    /**
     * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission} obj Optional instance to populate.
     * @return {module:model/Permission} The populated <code>Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission();

            if (data.hasOwnProperty('additionalRoles')) {
                obj['additionalRoles'] = ApiClient.convertToType(data['additionalRoles'], ['String']);
            }
            if (data.hasOwnProperty('authKey')) {
                obj['authKey'] = ApiClient.convertToType(data['authKey'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pendingOwner')) {
                obj['pendingOwner'] = ApiClient.convertToType(data['pendingOwner'], 'Boolean');
            }
            if (data.hasOwnProperty('permissionDetails')) {
                obj['permissionDetails'] = ApiClient.convertToType(data['permissionDetails'], [PermissionPermissionDetailsInner]);
            }
            if (data.hasOwnProperty('photoLink')) {
                obj['photoLink'] = ApiClient.convertToType(data['photoLink'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('teamDrivePermissionDetails')) {
                obj['teamDrivePermissionDetails'] = ApiClient.convertToType(data['teamDrivePermissionDetails'], [PermissionTeamDrivePermissionDetailsInner]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
            if (data.hasOwnProperty('withLink')) {
                obj['withLink'] = ApiClient.convertToType(data['withLink'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additionalRoles'])) {
            throw new Error("Expected the field `additionalRoles` to be an array in the JSON data but got " + data['additionalRoles']);
        }
        // ensure the json data is a string
        if (data['authKey'] && !(typeof data['authKey'] === 'string' || data['authKey'] instanceof String)) {
            throw new Error("Expected the field `authKey` to be a primitive type in the JSON string but got " + data['authKey']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['permissionDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissionDetails'])) {
                throw new Error("Expected the field `permissionDetails` to be an array in the JSON data but got " + data['permissionDetails']);
            }
            // validate the optional field `permissionDetails` (array)
            for (const item of data['permissionDetails']) {
                PermissionPermissionDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['photoLink'] && !(typeof data['photoLink'] === 'string' || data['photoLink'] instanceof String)) {
            throw new Error("Expected the field `photoLink` to be a primitive type in the JSON string but got " + data['photoLink']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        if (data['teamDrivePermissionDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teamDrivePermissionDetails'])) {
                throw new Error("Expected the field `teamDrivePermissionDetails` to be an array in the JSON data but got " + data['teamDrivePermissionDetails']);
            }
            // validate the optional field `teamDrivePermissionDetails` (array)
            for (const item of data['teamDrivePermissionDetails']) {
                PermissionTeamDrivePermissionDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * Additional roles for this user. Only `commenter` is currently allowed, though more may be supported in the future.
 * @member {Array.<String>} additionalRoles
 */
Permission.prototype['additionalRoles'] = undefined;

/**
 * Output only. Deprecated.
 * @member {String} authKey
 */
Permission.prototype['authKey'] = undefined;

/**
 * Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.
 * @member {Boolean} deleted
 */
Permission.prototype['deleted'] = undefined;

/**
 * Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is `user`, `group` or `domain`.
 * @member {String} domain
 */
Permission.prototype['domain'] = undefined;

/**
 * Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is `user` or `group`.
 * @member {String} emailAddress
 */
Permission.prototype['emailAddress'] = undefined;

/**
 * Output only. The ETag of the permission.
 * @member {String} etag
 */
Permission.prototype['etag'] = undefined;

/**
 * The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests
 * @member {Date} expirationDate
 */
Permission.prototype['expirationDate'] = undefined;

/**
 * The ID of the user this permission refers to, and identical to the `permissionId` in the About and Files resources. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.
 * @member {String} id
 */
Permission.prototype['id'] = undefined;

/**
 * Output only. This is always `drive#permission`.
 * @member {String} kind
 * @default 'drive#permission'
 */
Permission.prototype['kind'] = 'drive#permission';

/**
 * Output only. The name for this permission.
 * @member {String} name
 */
Permission.prototype['name'] = undefined;

/**
 * Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.
 * @member {Boolean} pendingOwner
 */
Permission.prototype['pendingOwner'] = undefined;

/**
 * Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.
 * @member {Array.<module:model/PermissionPermissionDetailsInner>} permissionDetails
 */
Permission.prototype['permissionDetails'] = undefined;

/**
 * Output only. A link to the profile photo, if available.
 * @member {String} photoLink
 */
Permission.prototype['photoLink'] = undefined;

/**
 * The primary role for this user. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `reader`
 * @member {String} role
 */
Permission.prototype['role'] = undefined;

/**
 * Output only. A link back to this permission.
 * @member {String} selfLink
 */
Permission.prototype['selfLink'] = undefined;

/**
 * Output only. Deprecated: Use `permissionDetails` instead.
 * @member {Array.<module:model/PermissionTeamDrivePermissionDetailsInner>} teamDrivePermissionDetails
 */
Permission.prototype['teamDrivePermissionDetails'] = undefined;

/**
 * The account type. Allowed values are: * `user` * `group` * `domain` * `anyone`
 * @member {String} type
 */
Permission.prototype['type'] = undefined;

/**
 * The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.
 * @member {String} value
 */
Permission.prototype['value'] = undefined;

/**
 * Indicates the view for this permission. Only populated for permissions that belong to a view. `published` is the only supported value.
 * @member {String} view
 */
Permission.prototype['view'] = undefined;

/**
 * Whether the link is required for this permission.
 * @member {Boolean} withLink
 */
Permission.prototype['withLink'] = undefined;






export default Permission;

