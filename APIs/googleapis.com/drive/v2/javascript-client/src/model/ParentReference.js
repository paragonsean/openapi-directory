/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ParentReference model module.
 * @module model/ParentReference
 * @version v2
 */
class ParentReference {
    /**
     * Constructs a new <code>ParentReference</code>.
     * A reference to a file&#39;s parent. Some resource methods (such as &#x60;parents.get&#x60;) require a &#x60;parentId&#x60;. Use the &#x60;parents.list&#x60; method to retrieve the ID for a parent.
     * @alias module:model/ParentReference
     */
    constructor() { 
        
        ParentReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#parentReference';
    }

    /**
     * Constructs a <code>ParentReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ParentReference} obj Optional instance to populate.
     * @return {module:model/ParentReference} The populated <code>ParentReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ParentReference();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('isRoot')) {
                obj['isRoot'] = ApiClient.convertToType(data['isRoot'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('parentLink')) {
                obj['parentLink'] = ApiClient.convertToType(data['parentLink'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ParentReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ParentReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['parentLink'] && !(typeof data['parentLink'] === 'string' || data['parentLink'] instanceof String)) {
            throw new Error("Expected the field `parentLink` to be a primitive type in the JSON string but got " + data['parentLink']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }

        return true;
    }


}



/**
 * The ID of the parent.
 * @member {String} id
 */
ParentReference.prototype['id'] = undefined;

/**
 * Output only. Whether or not the parent is the root folder.
 * @member {Boolean} isRoot
 */
ParentReference.prototype['isRoot'] = undefined;

/**
 * Output only. This is always `drive#parentReference`.
 * @member {String} kind
 * @default 'drive#parentReference'
 */
ParentReference.prototype['kind'] = 'drive#parentReference';

/**
 * Output only. A link to the parent.
 * @member {String} parentLink
 */
ParentReference.prototype['parentLink'] = undefined;

/**
 * Output only. A link back to this reference.
 * @member {String} selfLink
 */
ParentReference.prototype['selfLink'] = undefined;






export default ParentReference;

