/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TeamDriveBackgroundImageFile from './TeamDriveBackgroundImageFile';
import TeamDriveCapabilities from './TeamDriveCapabilities';
import TeamDriveRestrictions from './TeamDriveRestrictions';

/**
 * The TeamDrive model module.
 * @module model/TeamDrive
 * @version v2
 */
class TeamDrive {
    /**
     * Constructs a new <code>TeamDrive</code>.
     * Deprecated: Use the &#x60;drive&#x60; collection instead.
     * @alias module:model/TeamDrive
     */
    constructor() { 
        
        TeamDrive.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#teamDrive';
    }

    /**
     * Constructs a <code>TeamDrive</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamDrive} obj Optional instance to populate.
     * @return {module:model/TeamDrive} The populated <code>TeamDrive</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamDrive();

            if (data.hasOwnProperty('backgroundImageFile')) {
                obj['backgroundImageFile'] = TeamDriveBackgroundImageFile.constructFromObject(data['backgroundImageFile']);
            }
            if (data.hasOwnProperty('backgroundImageLink')) {
                obj['backgroundImageLink'] = ApiClient.convertToType(data['backgroundImageLink'], 'String');
            }
            if (data.hasOwnProperty('capabilities')) {
                obj['capabilities'] = TeamDriveCapabilities.constructFromObject(data['capabilities']);
            }
            if (data.hasOwnProperty('colorRgb')) {
                obj['colorRgb'] = ApiClient.convertToType(data['colorRgb'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('orgUnitId')) {
                obj['orgUnitId'] = ApiClient.convertToType(data['orgUnitId'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = TeamDriveRestrictions.constructFromObject(data['restrictions']);
            }
            if (data.hasOwnProperty('themeId')) {
                obj['themeId'] = ApiClient.convertToType(data['themeId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamDrive</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamDrive</code>.
     */
    static validateJSON(data) {
        // validate the optional field `backgroundImageFile`
        if (data['backgroundImageFile']) { // data not null
          TeamDriveBackgroundImageFile.validateJSON(data['backgroundImageFile']);
        }
        // ensure the json data is a string
        if (data['backgroundImageLink'] && !(typeof data['backgroundImageLink'] === 'string' || data['backgroundImageLink'] instanceof String)) {
            throw new Error("Expected the field `backgroundImageLink` to be a primitive type in the JSON string but got " + data['backgroundImageLink']);
        }
        // validate the optional field `capabilities`
        if (data['capabilities']) { // data not null
          TeamDriveCapabilities.validateJSON(data['capabilities']);
        }
        // ensure the json data is a string
        if (data['colorRgb'] && !(typeof data['colorRgb'] === 'string' || data['colorRgb'] instanceof String)) {
            throw new Error("Expected the field `colorRgb` to be a primitive type in the JSON string but got " + data['colorRgb']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['orgUnitId'] && !(typeof data['orgUnitId'] === 'string' || data['orgUnitId'] instanceof String)) {
            throw new Error("Expected the field `orgUnitId` to be a primitive type in the JSON string but got " + data['orgUnitId']);
        }
        // validate the optional field `restrictions`
        if (data['restrictions']) { // data not null
          TeamDriveRestrictions.validateJSON(data['restrictions']);
        }
        // ensure the json data is a string
        if (data['themeId'] && !(typeof data['themeId'] === 'string' || data['themeId'] instanceof String)) {
            throw new Error("Expected the field `themeId` to be a primitive type in the JSON string but got " + data['themeId']);
        }

        return true;
    }


}



/**
 * @member {module:model/TeamDriveBackgroundImageFile} backgroundImageFile
 */
TeamDrive.prototype['backgroundImageFile'] = undefined;

/**
 * A short-lived link to this Team Drive's background image.
 * @member {String} backgroundImageLink
 */
TeamDrive.prototype['backgroundImageLink'] = undefined;

/**
 * @member {module:model/TeamDriveCapabilities} capabilities
 */
TeamDrive.prototype['capabilities'] = undefined;

/**
 * The color of this Team Drive as an RGB hex string. It can only be set on a `drive.teamdrives.update` request that does not set `themeId`.
 * @member {String} colorRgb
 */
TeamDrive.prototype['colorRgb'] = undefined;

/**
 * The time at which the Team Drive was created (RFC 3339 date-time).
 * @member {Date} createdDate
 */
TeamDrive.prototype['createdDate'] = undefined;

/**
 * The ID of this Team Drive which is also the ID of the top level folder of this Team Drive.
 * @member {String} id
 */
TeamDrive.prototype['id'] = undefined;

/**
 * This is always `drive#teamDrive`
 * @member {String} kind
 * @default 'drive#teamDrive'
 */
TeamDrive.prototype['kind'] = 'drive#teamDrive';

/**
 * The name of this Team Drive.
 * @member {String} name
 */
TeamDrive.prototype['name'] = undefined;

/**
 * The organizational unit of this shared drive. This field is only populated on `drives.list` responses when the `useDomainAdminAccess` parameter is set to `true`.
 * @member {String} orgUnitId
 */
TeamDrive.prototype['orgUnitId'] = undefined;

/**
 * @member {module:model/TeamDriveRestrictions} restrictions
 */
TeamDrive.prototype['restrictions'] = undefined;

/**
 * The ID of the theme from which the background image and color will be set. The set of possible `teamDriveThemes` can be retrieved from a `drive.about.get` response. When not specified on a `drive.teamdrives.insert` request, a random theme is chosen from which the background image and color are set. This is a write-only field; it can only be set on requests that don't set `colorRgb` or `backgroundImageFile`.
 * @member {String} themeId
 */
TeamDrive.prototype['themeId'] = undefined;






export default TeamDrive;

