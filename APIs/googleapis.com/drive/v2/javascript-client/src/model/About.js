/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AboutAdditionalRoleInfoInner from './AboutAdditionalRoleInfoInner';
import AboutDriveThemesInner from './AboutDriveThemesInner';
import AboutExportFormatsInner from './AboutExportFormatsInner';
import AboutFeaturesInner from './AboutFeaturesInner';
import AboutImportFormatsInner from './AboutImportFormatsInner';
import AboutMaxUploadSizesInner from './AboutMaxUploadSizesInner';
import AboutQuotaBytesByServiceInner from './AboutQuotaBytesByServiceInner';
import AboutTeamDriveThemesInner from './AboutTeamDriveThemesInner';
import User from './User';

/**
 * The About model module.
 * @module model/About
 * @version v2
 */
class About {
    /**
     * Constructs a new <code>About</code>.
     * An item with user information and settings.
     * @alias module:model/About
     */
    constructor() { 
        
        About.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#about';
    }

    /**
     * Constructs a <code>About</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/About} obj Optional instance to populate.
     * @return {module:model/About} The populated <code>About</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new About();

            if (data.hasOwnProperty('additionalRoleInfo')) {
                obj['additionalRoleInfo'] = ApiClient.convertToType(data['additionalRoleInfo'], [AboutAdditionalRoleInfoInner]);
            }
            if (data.hasOwnProperty('canCreateDrives')) {
                obj['canCreateDrives'] = ApiClient.convertToType(data['canCreateDrives'], 'Boolean');
            }
            if (data.hasOwnProperty('canCreateTeamDrives')) {
                obj['canCreateTeamDrives'] = ApiClient.convertToType(data['canCreateTeamDrives'], 'Boolean');
            }
            if (data.hasOwnProperty('domainSharingPolicy')) {
                obj['domainSharingPolicy'] = ApiClient.convertToType(data['domainSharingPolicy'], 'String');
            }
            if (data.hasOwnProperty('driveThemes')) {
                obj['driveThemes'] = ApiClient.convertToType(data['driveThemes'], [AboutDriveThemesInner]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('exportFormats')) {
                obj['exportFormats'] = ApiClient.convertToType(data['exportFormats'], [AboutExportFormatsInner]);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [AboutFeaturesInner]);
            }
            if (data.hasOwnProperty('folderColorPalette')) {
                obj['folderColorPalette'] = ApiClient.convertToType(data['folderColorPalette'], ['String']);
            }
            if (data.hasOwnProperty('importFormats')) {
                obj['importFormats'] = ApiClient.convertToType(data['importFormats'], [AboutImportFormatsInner]);
            }
            if (data.hasOwnProperty('isCurrentAppInstalled')) {
                obj['isCurrentAppInstalled'] = ApiClient.convertToType(data['isCurrentAppInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('languageCode')) {
                obj['languageCode'] = ApiClient.convertToType(data['languageCode'], 'String');
            }
            if (data.hasOwnProperty('largestChangeId')) {
                obj['largestChangeId'] = ApiClient.convertToType(data['largestChangeId'], 'String');
            }
            if (data.hasOwnProperty('maxUploadSizes')) {
                obj['maxUploadSizes'] = ApiClient.convertToType(data['maxUploadSizes'], [AboutMaxUploadSizesInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissionId')) {
                obj['permissionId'] = ApiClient.convertToType(data['permissionId'], 'String');
            }
            if (data.hasOwnProperty('quotaBytesByService')) {
                obj['quotaBytesByService'] = ApiClient.convertToType(data['quotaBytesByService'], [AboutQuotaBytesByServiceInner]);
            }
            if (data.hasOwnProperty('quotaBytesTotal')) {
                obj['quotaBytesTotal'] = ApiClient.convertToType(data['quotaBytesTotal'], 'String');
            }
            if (data.hasOwnProperty('quotaBytesUsed')) {
                obj['quotaBytesUsed'] = ApiClient.convertToType(data['quotaBytesUsed'], 'String');
            }
            if (data.hasOwnProperty('quotaBytesUsedAggregate')) {
                obj['quotaBytesUsedAggregate'] = ApiClient.convertToType(data['quotaBytesUsedAggregate'], 'String');
            }
            if (data.hasOwnProperty('quotaBytesUsedInTrash')) {
                obj['quotaBytesUsedInTrash'] = ApiClient.convertToType(data['quotaBytesUsedInTrash'], 'String');
            }
            if (data.hasOwnProperty('quotaType')) {
                obj['quotaType'] = ApiClient.convertToType(data['quotaType'], 'String');
            }
            if (data.hasOwnProperty('remainingChangeIds')) {
                obj['remainingChangeIds'] = ApiClient.convertToType(data['remainingChangeIds'], 'String');
            }
            if (data.hasOwnProperty('rootFolderId')) {
                obj['rootFolderId'] = ApiClient.convertToType(data['rootFolderId'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('teamDriveThemes')) {
                obj['teamDriveThemes'] = ApiClient.convertToType(data['teamDriveThemes'], [AboutTeamDriveThemesInner]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>About</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>About</code>.
     */
    static validateJSON(data) {
        if (data['additionalRoleInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['additionalRoleInfo'])) {
                throw new Error("Expected the field `additionalRoleInfo` to be an array in the JSON data but got " + data['additionalRoleInfo']);
            }
            // validate the optional field `additionalRoleInfo` (array)
            for (const item of data['additionalRoleInfo']) {
                AboutAdditionalRoleInfoInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['domainSharingPolicy'] && !(typeof data['domainSharingPolicy'] === 'string' || data['domainSharingPolicy'] instanceof String)) {
            throw new Error("Expected the field `domainSharingPolicy` to be a primitive type in the JSON string but got " + data['domainSharingPolicy']);
        }
        if (data['driveThemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['driveThemes'])) {
                throw new Error("Expected the field `driveThemes` to be an array in the JSON data but got " + data['driveThemes']);
            }
            // validate the optional field `driveThemes` (array)
            for (const item of data['driveThemes']) {
                AboutDriveThemesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['exportFormats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exportFormats'])) {
                throw new Error("Expected the field `exportFormats` to be an array in the JSON data but got " + data['exportFormats']);
            }
            // validate the optional field `exportFormats` (array)
            for (const item of data['exportFormats']) {
                AboutExportFormatsInner.validateJSON(item);
            };
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                AboutFeaturesInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['folderColorPalette'])) {
            throw new Error("Expected the field `folderColorPalette` to be an array in the JSON data but got " + data['folderColorPalette']);
        }
        if (data['importFormats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['importFormats'])) {
                throw new Error("Expected the field `importFormats` to be an array in the JSON data but got " + data['importFormats']);
            }
            // validate the optional field `importFormats` (array)
            for (const item of data['importFormats']) {
                AboutImportFormatsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['languageCode'] && !(typeof data['languageCode'] === 'string' || data['languageCode'] instanceof String)) {
            throw new Error("Expected the field `languageCode` to be a primitive type in the JSON string but got " + data['languageCode']);
        }
        // ensure the json data is a string
        if (data['largestChangeId'] && !(typeof data['largestChangeId'] === 'string' || data['largestChangeId'] instanceof String)) {
            throw new Error("Expected the field `largestChangeId` to be a primitive type in the JSON string but got " + data['largestChangeId']);
        }
        if (data['maxUploadSizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['maxUploadSizes'])) {
                throw new Error("Expected the field `maxUploadSizes` to be an array in the JSON data but got " + data['maxUploadSizes']);
            }
            // validate the optional field `maxUploadSizes` (array)
            for (const item of data['maxUploadSizes']) {
                AboutMaxUploadSizesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['permissionId'] && !(typeof data['permissionId'] === 'string' || data['permissionId'] instanceof String)) {
            throw new Error("Expected the field `permissionId` to be a primitive type in the JSON string but got " + data['permissionId']);
        }
        if (data['quotaBytesByService']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quotaBytesByService'])) {
                throw new Error("Expected the field `quotaBytesByService` to be an array in the JSON data but got " + data['quotaBytesByService']);
            }
            // validate the optional field `quotaBytesByService` (array)
            for (const item of data['quotaBytesByService']) {
                AboutQuotaBytesByServiceInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['quotaBytesTotal'] && !(typeof data['quotaBytesTotal'] === 'string' || data['quotaBytesTotal'] instanceof String)) {
            throw new Error("Expected the field `quotaBytesTotal` to be a primitive type in the JSON string but got " + data['quotaBytesTotal']);
        }
        // ensure the json data is a string
        if (data['quotaBytesUsed'] && !(typeof data['quotaBytesUsed'] === 'string' || data['quotaBytesUsed'] instanceof String)) {
            throw new Error("Expected the field `quotaBytesUsed` to be a primitive type in the JSON string but got " + data['quotaBytesUsed']);
        }
        // ensure the json data is a string
        if (data['quotaBytesUsedAggregate'] && !(typeof data['quotaBytesUsedAggregate'] === 'string' || data['quotaBytesUsedAggregate'] instanceof String)) {
            throw new Error("Expected the field `quotaBytesUsedAggregate` to be a primitive type in the JSON string but got " + data['quotaBytesUsedAggregate']);
        }
        // ensure the json data is a string
        if (data['quotaBytesUsedInTrash'] && !(typeof data['quotaBytesUsedInTrash'] === 'string' || data['quotaBytesUsedInTrash'] instanceof String)) {
            throw new Error("Expected the field `quotaBytesUsedInTrash` to be a primitive type in the JSON string but got " + data['quotaBytesUsedInTrash']);
        }
        // ensure the json data is a string
        if (data['quotaType'] && !(typeof data['quotaType'] === 'string' || data['quotaType'] instanceof String)) {
            throw new Error("Expected the field `quotaType` to be a primitive type in the JSON string but got " + data['quotaType']);
        }
        // ensure the json data is a string
        if (data['remainingChangeIds'] && !(typeof data['remainingChangeIds'] === 'string' || data['remainingChangeIds'] instanceof String)) {
            throw new Error("Expected the field `remainingChangeIds` to be a primitive type in the JSON string but got " + data['remainingChangeIds']);
        }
        // ensure the json data is a string
        if (data['rootFolderId'] && !(typeof data['rootFolderId'] === 'string' || data['rootFolderId'] instanceof String)) {
            throw new Error("Expected the field `rootFolderId` to be a primitive type in the JSON string but got " + data['rootFolderId']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        if (data['teamDriveThemes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teamDriveThemes'])) {
                throw new Error("Expected the field `teamDriveThemes` to be an array in the JSON data but got " + data['teamDriveThemes']);
            }
            // validate the optional field `teamDriveThemes` (array)
            for (const item of data['teamDriveThemes']) {
                AboutTeamDriveThemesInner.validateJSON(item);
            };
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * Information about supported additional roles per file type. The most specific type takes precedence.
 * @member {Array.<module:model/AboutAdditionalRoleInfoInner>} additionalRoleInfo
 */
About.prototype['additionalRoleInfo'] = undefined;

/**
 * Whether the user can create shared drives.
 * @member {Boolean} canCreateDrives
 */
About.prototype['canCreateDrives'] = undefined;

/**
 * Deprecated: Use `canCreateDrives` instead.
 * @member {Boolean} canCreateTeamDrives
 */
About.prototype['canCreateTeamDrives'] = undefined;

/**
 * The domain sharing policy for the current user. Possible values are: * `allowed` * `allowedWithWarning` * `incomingOnly` * `disallowed`
 * @member {String} domainSharingPolicy
 */
About.prototype['domainSharingPolicy'] = undefined;

/**
 * A list of themes that are supported for shared drives.
 * @member {Array.<module:model/AboutDriveThemesInner>} driveThemes
 */
About.prototype['driveThemes'] = undefined;

/**
 * The ETag of the item.
 * @member {String} etag
 */
About.prototype['etag'] = undefined;

/**
 * The allowable export formats.
 * @member {Array.<module:model/AboutExportFormatsInner>} exportFormats
 */
About.prototype['exportFormats'] = undefined;

/**
 * List of additional features enabled on this account.
 * @member {Array.<module:model/AboutFeaturesInner>} features
 */
About.prototype['features'] = undefined;

/**
 * The palette of allowable folder colors as RGB hex strings.
 * @member {Array.<String>} folderColorPalette
 */
About.prototype['folderColorPalette'] = undefined;

/**
 * The allowable import formats.
 * @member {Array.<module:model/AboutImportFormatsInner>} importFormats
 */
About.prototype['importFormats'] = undefined;

/**
 * A boolean indicating whether the authenticated app is installed by the authenticated user.
 * @member {Boolean} isCurrentAppInstalled
 */
About.prototype['isCurrentAppInstalled'] = undefined;

/**
 * This is always `drive#about`.
 * @member {String} kind
 * @default 'drive#about'
 */
About.prototype['kind'] = 'drive#about';

/**
 * The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).
 * @member {String} languageCode
 */
About.prototype['languageCode'] = undefined;

/**
 * The largest change id.
 * @member {String} largestChangeId
 */
About.prototype['largestChangeId'] = undefined;

/**
 * List of max upload sizes for each file type. The most specific type takes precedence.
 * @member {Array.<module:model/AboutMaxUploadSizesInner>} maxUploadSizes
 */
About.prototype['maxUploadSizes'] = undefined;

/**
 * The name of the current user.
 * @member {String} name
 */
About.prototype['name'] = undefined;

/**
 * The current user's ID as visible in the permissions collection.
 * @member {String} permissionId
 */
About.prototype['permissionId'] = undefined;

/**
 * The amount of storage quota used by different Google services.
 * @member {Array.<module:model/AboutQuotaBytesByServiceInner>} quotaBytesByService
 */
About.prototype['quotaBytesByService'] = undefined;

/**
 * The total number of quota bytes. This is only relevant when quotaType is LIMITED.
 * @member {String} quotaBytesTotal
 */
About.prototype['quotaBytesTotal'] = undefined;

/**
 * The number of quota bytes used by Google Drive.
 * @member {String} quotaBytesUsed
 */
About.prototype['quotaBytesUsed'] = undefined;

/**
 * The number of quota bytes used by all Google apps (Drive, Picasa, etc.).
 * @member {String} quotaBytesUsedAggregate
 */
About.prototype['quotaBytesUsedAggregate'] = undefined;

/**
 * The number of quota bytes used by trashed items.
 * @member {String} quotaBytesUsedInTrash
 */
About.prototype['quotaBytesUsedInTrash'] = undefined;

/**
 * The type of the user's storage quota. Possible values are: * `LIMITED` * `UNLIMITED`
 * @member {String} quotaType
 */
About.prototype['quotaType'] = undefined;

/**
 * The number of remaining change ids, limited to no more than 2500.
 * @member {String} remainingChangeIds
 */
About.prototype['remainingChangeIds'] = undefined;

/**
 * The id of the root folder.
 * @member {String} rootFolderId
 */
About.prototype['rootFolderId'] = undefined;

/**
 * A link back to this item.
 * @member {String} selfLink
 */
About.prototype['selfLink'] = undefined;

/**
 * Deprecated: Use `driveThemes` instead.
 * @member {Array.<module:model/AboutTeamDriveThemesInner>} teamDriveThemes
 */
About.prototype['teamDriveThemes'] = undefined;

/**
 * @member {module:model/User} user
 */
About.prototype['user'] = undefined;






export default About;

