/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LabelFieldModification model module.
 * @module model/LabelFieldModification
 * @version v2
 */
class LabelFieldModification {
    /**
     * Constructs a new <code>LabelFieldModification</code>.
     * A modification to a label&#39;s field.
     * @alias module:model/LabelFieldModification
     */
    constructor() { 
        
        LabelFieldModification.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#labelFieldModification';
    }

    /**
     * Constructs a <code>LabelFieldModification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LabelFieldModification} obj Optional instance to populate.
     * @return {module:model/LabelFieldModification} The populated <code>LabelFieldModification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LabelFieldModification();

            if (data.hasOwnProperty('fieldId')) {
                obj['fieldId'] = ApiClient.convertToType(data['fieldId'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('setDateValues')) {
                obj['setDateValues'] = ApiClient.convertToType(data['setDateValues'], ['Date']);
            }
            if (data.hasOwnProperty('setIntegerValues')) {
                obj['setIntegerValues'] = ApiClient.convertToType(data['setIntegerValues'], ['String']);
            }
            if (data.hasOwnProperty('setSelectionValues')) {
                obj['setSelectionValues'] = ApiClient.convertToType(data['setSelectionValues'], ['String']);
            }
            if (data.hasOwnProperty('setTextValues')) {
                obj['setTextValues'] = ApiClient.convertToType(data['setTextValues'], ['String']);
            }
            if (data.hasOwnProperty('setUserValues')) {
                obj['setUserValues'] = ApiClient.convertToType(data['setUserValues'], ['String']);
            }
            if (data.hasOwnProperty('unsetValues')) {
                obj['unsetValues'] = ApiClient.convertToType(data['unsetValues'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LabelFieldModification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LabelFieldModification</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['fieldId'] && !(typeof data['fieldId'] === 'string' || data['fieldId'] instanceof String)) {
            throw new Error("Expected the field `fieldId` to be a primitive type in the JSON string but got " + data['fieldId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setDateValues'])) {
            throw new Error("Expected the field `setDateValues` to be an array in the JSON data but got " + data['setDateValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setIntegerValues'])) {
            throw new Error("Expected the field `setIntegerValues` to be an array in the JSON data but got " + data['setIntegerValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setSelectionValues'])) {
            throw new Error("Expected the field `setSelectionValues` to be an array in the JSON data but got " + data['setSelectionValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setTextValues'])) {
            throw new Error("Expected the field `setTextValues` to be an array in the JSON data but got " + data['setTextValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['setUserValues'])) {
            throw new Error("Expected the field `setUserValues` to be an array in the JSON data but got " + data['setUserValues']);
        }

        return true;
    }


}



/**
 * The ID of the field to be modified.
 * @member {String} fieldId
 */
LabelFieldModification.prototype['fieldId'] = undefined;

/**
 * This is always `drive#labelFieldModification`.
 * @member {String} kind
 * @default 'drive#labelFieldModification'
 */
LabelFieldModification.prototype['kind'] = 'drive#labelFieldModification';

/**
 * Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.
 * @member {Array.<Date>} setDateValues
 */
LabelFieldModification.prototype['setDateValues'] = undefined;

/**
 * Replaces the value of an `integer` field with these new values.
 * @member {Array.<String>} setIntegerValues
 */
LabelFieldModification.prototype['setIntegerValues'] = undefined;

/**
 * Replaces a `selection` field with these new values.
 * @member {Array.<String>} setSelectionValues
 */
LabelFieldModification.prototype['setSelectionValues'] = undefined;

/**
 * Sets the value of a `text` field.
 * @member {Array.<String>} setTextValues
 */
LabelFieldModification.prototype['setTextValues'] = undefined;

/**
 * Replaces a `user` field with these new values. The values must be valid email addresses.
 * @member {Array.<String>} setUserValues
 */
LabelFieldModification.prototype['setUserValues'] = undefined;

/**
 * Unsets the values for this field.
 * @member {Boolean} unsetValues
 */
LabelFieldModification.prototype['unsetValues'] = undefined;






export default LabelFieldModification;

