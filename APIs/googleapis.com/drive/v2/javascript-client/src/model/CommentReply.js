/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The CommentReply model module.
 * @module model/CommentReply
 * @version v2
 */
class CommentReply {
    /**
     * Constructs a new <code>CommentReply</code>.
     * A comment on a file in Google Drive. Some resource methods (such as &#x60;replies.update&#x60;) require a &#x60;replyId&#x60;. Use the &#x60;replies.list&#x60; method to retrieve the ID for a reply.
     * @alias module:model/CommentReply
     */
    constructor() { 
        
        CommentReply.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#commentReply';
    }

    /**
     * Constructs a <code>CommentReply</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentReply} obj Optional instance to populate.
     * @return {module:model/CommentReply} The populated <code>CommentReply</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentReply();

            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('htmlContent')) {
                obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('replyId')) {
                obj['replyId'] = ApiClient.convertToType(data['replyId'], 'String');
            }
            if (data.hasOwnProperty('verb')) {
                obj['verb'] = ApiClient.convertToType(data['verb'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentReply</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentReply</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['htmlContent'] && !(typeof data['htmlContent'] === 'string' || data['htmlContent'] instanceof String)) {
            throw new Error("Expected the field `htmlContent` to be a primitive type in the JSON string but got " + data['htmlContent']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['replyId'] && !(typeof data['replyId'] === 'string' || data['replyId'] instanceof String)) {
            throw new Error("Expected the field `replyId` to be a primitive type in the JSON string but got " + data['replyId']);
        }
        // ensure the json data is a string
        if (data['verb'] && !(typeof data['verb'] === 'string' || data['verb'] instanceof String)) {
            throw new Error("Expected the field `verb` to be a primitive type in the JSON string but got " + data['verb']);
        }

        return true;
    }


}



/**
 * @member {module:model/User} author
 */
CommentReply.prototype['author'] = undefined;

/**
 * The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).
 * @member {String} content
 */
CommentReply.prototype['content'] = undefined;

/**
 * The date when this reply was first created.
 * @member {Date} createdDate
 */
CommentReply.prototype['createdDate'] = undefined;

/**
 * Output only. Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.
 * @member {Boolean} deleted
 */
CommentReply.prototype['deleted'] = undefined;

/**
 * Output only. HTML formatted content for this reply.
 * @member {String} htmlContent
 */
CommentReply.prototype['htmlContent'] = undefined;

/**
 * Output only. This is always `drive#commentReply`.
 * @member {String} kind
 * @default 'drive#commentReply'
 */
CommentReply.prototype['kind'] = 'drive#commentReply';

/**
 * The date when this reply was last modified.
 * @member {Date} modifiedDate
 */
CommentReply.prototype['modifiedDate'] = undefined;

/**
 * Output only. The ID of the reply.
 * @member {String} replyId
 */
CommentReply.prototype['replyId'] = undefined;

/**
 * The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are: * `resolve` - To resolve a comment. * `reopen` - To reopen (un-resolve) a comment.
 * @member {String} verb
 */
CommentReply.prototype['verb'] = undefined;






export default CommentReply;

