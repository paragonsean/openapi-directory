/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileImageMediaMetadataLocation from './FileImageMediaMetadataLocation';

/**
 * The FileImageMediaMetadata model module.
 * @module model/FileImageMediaMetadata
 * @version v2
 */
class FileImageMediaMetadata {
    /**
     * Constructs a new <code>FileImageMediaMetadata</code>.
     * Output only. Metadata about image media. This will only be present for image types, and its contents will depend on what can be parsed from the image content.
     * @alias module:model/FileImageMediaMetadata
     */
    constructor() { 
        
        FileImageMediaMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileImageMediaMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileImageMediaMetadata} obj Optional instance to populate.
     * @return {module:model/FileImageMediaMetadata} The populated <code>FileImageMediaMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileImageMediaMetadata();

            if (data.hasOwnProperty('aperture')) {
                obj['aperture'] = ApiClient.convertToType(data['aperture'], 'Number');
            }
            if (data.hasOwnProperty('cameraMake')) {
                obj['cameraMake'] = ApiClient.convertToType(data['cameraMake'], 'String');
            }
            if (data.hasOwnProperty('cameraModel')) {
                obj['cameraModel'] = ApiClient.convertToType(data['cameraModel'], 'String');
            }
            if (data.hasOwnProperty('colorSpace')) {
                obj['colorSpace'] = ApiClient.convertToType(data['colorSpace'], 'String');
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'String');
            }
            if (data.hasOwnProperty('exposureBias')) {
                obj['exposureBias'] = ApiClient.convertToType(data['exposureBias'], 'Number');
            }
            if (data.hasOwnProperty('exposureMode')) {
                obj['exposureMode'] = ApiClient.convertToType(data['exposureMode'], 'String');
            }
            if (data.hasOwnProperty('exposureTime')) {
                obj['exposureTime'] = ApiClient.convertToType(data['exposureTime'], 'Number');
            }
            if (data.hasOwnProperty('flashUsed')) {
                obj['flashUsed'] = ApiClient.convertToType(data['flashUsed'], 'Boolean');
            }
            if (data.hasOwnProperty('focalLength')) {
                obj['focalLength'] = ApiClient.convertToType(data['focalLength'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('isoSpeed')) {
                obj['isoSpeed'] = ApiClient.convertToType(data['isoSpeed'], 'Number');
            }
            if (data.hasOwnProperty('lens')) {
                obj['lens'] = ApiClient.convertToType(data['lens'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = FileImageMediaMetadataLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('maxApertureValue')) {
                obj['maxApertureValue'] = ApiClient.convertToType(data['maxApertureValue'], 'Number');
            }
            if (data.hasOwnProperty('meteringMode')) {
                obj['meteringMode'] = ApiClient.convertToType(data['meteringMode'], 'String');
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = ApiClient.convertToType(data['rotation'], 'Number');
            }
            if (data.hasOwnProperty('sensor')) {
                obj['sensor'] = ApiClient.convertToType(data['sensor'], 'String');
            }
            if (data.hasOwnProperty('subjectDistance')) {
                obj['subjectDistance'] = ApiClient.convertToType(data['subjectDistance'], 'Number');
            }
            if (data.hasOwnProperty('whiteBalance')) {
                obj['whiteBalance'] = ApiClient.convertToType(data['whiteBalance'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileImageMediaMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileImageMediaMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cameraMake'] && !(typeof data['cameraMake'] === 'string' || data['cameraMake'] instanceof String)) {
            throw new Error("Expected the field `cameraMake` to be a primitive type in the JSON string but got " + data['cameraMake']);
        }
        // ensure the json data is a string
        if (data['cameraModel'] && !(typeof data['cameraModel'] === 'string' || data['cameraModel'] instanceof String)) {
            throw new Error("Expected the field `cameraModel` to be a primitive type in the JSON string but got " + data['cameraModel']);
        }
        // ensure the json data is a string
        if (data['colorSpace'] && !(typeof data['colorSpace'] === 'string' || data['colorSpace'] instanceof String)) {
            throw new Error("Expected the field `colorSpace` to be a primitive type in the JSON string but got " + data['colorSpace']);
        }
        // ensure the json data is a string
        if (data['date'] && !(typeof data['date'] === 'string' || data['date'] instanceof String)) {
            throw new Error("Expected the field `date` to be a primitive type in the JSON string but got " + data['date']);
        }
        // ensure the json data is a string
        if (data['exposureMode'] && !(typeof data['exposureMode'] === 'string' || data['exposureMode'] instanceof String)) {
            throw new Error("Expected the field `exposureMode` to be a primitive type in the JSON string but got " + data['exposureMode']);
        }
        // ensure the json data is a string
        if (data['lens'] && !(typeof data['lens'] === 'string' || data['lens'] instanceof String)) {
            throw new Error("Expected the field `lens` to be a primitive type in the JSON string but got " + data['lens']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          FileImageMediaMetadataLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['meteringMode'] && !(typeof data['meteringMode'] === 'string' || data['meteringMode'] instanceof String)) {
            throw new Error("Expected the field `meteringMode` to be a primitive type in the JSON string but got " + data['meteringMode']);
        }
        // ensure the json data is a string
        if (data['sensor'] && !(typeof data['sensor'] === 'string' || data['sensor'] instanceof String)) {
            throw new Error("Expected the field `sensor` to be a primitive type in the JSON string but got " + data['sensor']);
        }
        // ensure the json data is a string
        if (data['whiteBalance'] && !(typeof data['whiteBalance'] === 'string' || data['whiteBalance'] instanceof String)) {
            throw new Error("Expected the field `whiteBalance` to be a primitive type in the JSON string but got " + data['whiteBalance']);
        }

        return true;
    }


}



/**
 * Output only. The aperture used to create the photo (f-number).
 * @member {Number} aperture
 */
FileImageMediaMetadata.prototype['aperture'] = undefined;

/**
 * Output only. The make of the camera used to create the photo.
 * @member {String} cameraMake
 */
FileImageMediaMetadata.prototype['cameraMake'] = undefined;

/**
 * Output only. The model of the camera used to create the photo.
 * @member {String} cameraModel
 */
FileImageMediaMetadata.prototype['cameraModel'] = undefined;

/**
 * Output only. The color space of the photo.
 * @member {String} colorSpace
 */
FileImageMediaMetadata.prototype['colorSpace'] = undefined;

/**
 * Output only. The date and time the photo was taken (EXIF format timestamp).
 * @member {String} date
 */
FileImageMediaMetadata.prototype['date'] = undefined;

/**
 * Output only. The exposure bias of the photo (APEX value).
 * @member {Number} exposureBias
 */
FileImageMediaMetadata.prototype['exposureBias'] = undefined;

/**
 * Output only. The exposure mode used to create the photo.
 * @member {String} exposureMode
 */
FileImageMediaMetadata.prototype['exposureMode'] = undefined;

/**
 * Output only. The length of the exposure, in seconds.
 * @member {Number} exposureTime
 */
FileImageMediaMetadata.prototype['exposureTime'] = undefined;

/**
 * Output only. Whether a flash was used to create the photo.
 * @member {Boolean} flashUsed
 */
FileImageMediaMetadata.prototype['flashUsed'] = undefined;

/**
 * Output only. The focal length used to create the photo, in millimeters.
 * @member {Number} focalLength
 */
FileImageMediaMetadata.prototype['focalLength'] = undefined;

/**
 * Output only. The height of the image in pixels.
 * @member {Number} height
 */
FileImageMediaMetadata.prototype['height'] = undefined;

/**
 * Output only. The ISO speed used to create the photo.
 * @member {Number} isoSpeed
 */
FileImageMediaMetadata.prototype['isoSpeed'] = undefined;

/**
 * Output only. The lens used to create the photo.
 * @member {String} lens
 */
FileImageMediaMetadata.prototype['lens'] = undefined;

/**
 * @member {module:model/FileImageMediaMetadataLocation} location
 */
FileImageMediaMetadata.prototype['location'] = undefined;

/**
 * Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).
 * @member {Number} maxApertureValue
 */
FileImageMediaMetadata.prototype['maxApertureValue'] = undefined;

/**
 * Output only. The metering mode used to create the photo.
 * @member {String} meteringMode
 */
FileImageMediaMetadata.prototype['meteringMode'] = undefined;

/**
 * Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.
 * @member {Number} rotation
 */
FileImageMediaMetadata.prototype['rotation'] = undefined;

/**
 * Output only. The type of sensor used to create the photo.
 * @member {String} sensor
 */
FileImageMediaMetadata.prototype['sensor'] = undefined;

/**
 * Output only. The distance to the subject of the photo, in meters.
 * @member {Number} subjectDistance
 */
FileImageMediaMetadata.prototype['subjectDistance'] = undefined;

/**
 * Output only. The white balance mode used to create the photo.
 * @member {String} whiteBalance
 */
FileImageMediaMetadata.prototype['whiteBalance'] = undefined;

/**
 * Output only. The width of the image in pixels.
 * @member {Number} width
 */
FileImageMediaMetadata.prototype['width'] = undefined;






export default FileImageMediaMetadata;

