/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileCapabilities model module.
 * @module model/FileCapabilities
 * @version v2
 */
class FileCapabilities {
    /**
     * Constructs a new <code>FileCapabilities</code>.
     * Output only. Capabilities the current user has on this file. Each capability corresponds to a fine-grained action that a user may take.
     * @alias module:model/FileCapabilities
     */
    constructor() { 
        
        FileCapabilities.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileCapabilities</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileCapabilities} obj Optional instance to populate.
     * @return {module:model/FileCapabilities} The populated <code>FileCapabilities</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileCapabilities();

            if (data.hasOwnProperty('canAcceptOwnership')) {
                obj['canAcceptOwnership'] = ApiClient.convertToType(data['canAcceptOwnership'], 'Boolean');
            }
            if (data.hasOwnProperty('canAddChildren')) {
                obj['canAddChildren'] = ApiClient.convertToType(data['canAddChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canAddFolderFromAnotherDrive')) {
                obj['canAddFolderFromAnotherDrive'] = ApiClient.convertToType(data['canAddFolderFromAnotherDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canAddMyDriveParent')) {
                obj['canAddMyDriveParent'] = ApiClient.convertToType(data['canAddMyDriveParent'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeCopyRequiresWriterPermission')) {
                obj['canChangeCopyRequiresWriterPermission'] = ApiClient.convertToType(data['canChangeCopyRequiresWriterPermission'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeRestrictedDownload')) {
                obj['canChangeRestrictedDownload'] = ApiClient.convertToType(data['canChangeRestrictedDownload'], 'Boolean');
            }
            if (data.hasOwnProperty('canChangeSecurityUpdateEnabled')) {
                obj['canChangeSecurityUpdateEnabled'] = ApiClient.convertToType(data['canChangeSecurityUpdateEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('canComment')) {
                obj['canComment'] = ApiClient.convertToType(data['canComment'], 'Boolean');
            }
            if (data.hasOwnProperty('canCopy')) {
                obj['canCopy'] = ApiClient.convertToType(data['canCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('canDelete')) {
                obj['canDelete'] = ApiClient.convertToType(data['canDelete'], 'Boolean');
            }
            if (data.hasOwnProperty('canDeleteChildren')) {
                obj['canDeleteChildren'] = ApiClient.convertToType(data['canDeleteChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canDownload')) {
                obj['canDownload'] = ApiClient.convertToType(data['canDownload'], 'Boolean');
            }
            if (data.hasOwnProperty('canEdit')) {
                obj['canEdit'] = ApiClient.convertToType(data['canEdit'], 'Boolean');
            }
            if (data.hasOwnProperty('canListChildren')) {
                obj['canListChildren'] = ApiClient.convertToType(data['canListChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyContent')) {
                obj['canModifyContent'] = ApiClient.convertToType(data['canModifyContent'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyContentRestriction')) {
                obj['canModifyContentRestriction'] = ApiClient.convertToType(data['canModifyContentRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyEditorContentRestriction')) {
                obj['canModifyEditorContentRestriction'] = ApiClient.convertToType(data['canModifyEditorContentRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyLabels')) {
                obj['canModifyLabels'] = ApiClient.convertToType(data['canModifyLabels'], 'Boolean');
            }
            if (data.hasOwnProperty('canModifyOwnerContentRestriction')) {
                obj['canModifyOwnerContentRestriction'] = ApiClient.convertToType(data['canModifyOwnerContentRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveChildrenOutOfDrive')) {
                obj['canMoveChildrenOutOfDrive'] = ApiClient.convertToType(data['canMoveChildrenOutOfDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveChildrenOutOfTeamDrive')) {
                obj['canMoveChildrenOutOfTeamDrive'] = ApiClient.convertToType(data['canMoveChildrenOutOfTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveChildrenWithinDrive')) {
                obj['canMoveChildrenWithinDrive'] = ApiClient.convertToType(data['canMoveChildrenWithinDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveChildrenWithinTeamDrive')) {
                obj['canMoveChildrenWithinTeamDrive'] = ApiClient.convertToType(data['canMoveChildrenWithinTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveItemIntoTeamDrive')) {
                obj['canMoveItemIntoTeamDrive'] = ApiClient.convertToType(data['canMoveItemIntoTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveItemOutOfDrive')) {
                obj['canMoveItemOutOfDrive'] = ApiClient.convertToType(data['canMoveItemOutOfDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveItemOutOfTeamDrive')) {
                obj['canMoveItemOutOfTeamDrive'] = ApiClient.convertToType(data['canMoveItemOutOfTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveItemWithinDrive')) {
                obj['canMoveItemWithinDrive'] = ApiClient.convertToType(data['canMoveItemWithinDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveItemWithinTeamDrive')) {
                obj['canMoveItemWithinTeamDrive'] = ApiClient.convertToType(data['canMoveItemWithinTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canMoveTeamDriveItem')) {
                obj['canMoveTeamDriveItem'] = ApiClient.convertToType(data['canMoveTeamDriveItem'], 'Boolean');
            }
            if (data.hasOwnProperty('canReadDrive')) {
                obj['canReadDrive'] = ApiClient.convertToType(data['canReadDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canReadLabels')) {
                obj['canReadLabels'] = ApiClient.convertToType(data['canReadLabels'], 'Boolean');
            }
            if (data.hasOwnProperty('canReadRevisions')) {
                obj['canReadRevisions'] = ApiClient.convertToType(data['canReadRevisions'], 'Boolean');
            }
            if (data.hasOwnProperty('canReadTeamDrive')) {
                obj['canReadTeamDrive'] = ApiClient.convertToType(data['canReadTeamDrive'], 'Boolean');
            }
            if (data.hasOwnProperty('canRemoveChildren')) {
                obj['canRemoveChildren'] = ApiClient.convertToType(data['canRemoveChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canRemoveContentRestriction')) {
                obj['canRemoveContentRestriction'] = ApiClient.convertToType(data['canRemoveContentRestriction'], 'Boolean');
            }
            if (data.hasOwnProperty('canRemoveMyDriveParent')) {
                obj['canRemoveMyDriveParent'] = ApiClient.convertToType(data['canRemoveMyDriveParent'], 'Boolean');
            }
            if (data.hasOwnProperty('canRename')) {
                obj['canRename'] = ApiClient.convertToType(data['canRename'], 'Boolean');
            }
            if (data.hasOwnProperty('canShare')) {
                obj['canShare'] = ApiClient.convertToType(data['canShare'], 'Boolean');
            }
            if (data.hasOwnProperty('canTrash')) {
                obj['canTrash'] = ApiClient.convertToType(data['canTrash'], 'Boolean');
            }
            if (data.hasOwnProperty('canTrashChildren')) {
                obj['canTrashChildren'] = ApiClient.convertToType(data['canTrashChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('canUntrash')) {
                obj['canUntrash'] = ApiClient.convertToType(data['canUntrash'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileCapabilities</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileCapabilities</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Output only. Whether the current user is the pending owner of the file. Not populated for shared drive files.
 * @member {Boolean} canAcceptOwnership
 */
FileCapabilities.prototype['canAcceptOwnership'] = undefined;

/**
 * Output only. Whether the current user can add children to this folder. This is always false when the item is not a folder.
 * @member {Boolean} canAddChildren
 */
FileCapabilities.prototype['canAddChildren'] = undefined;

/**
 * Output only. Whether the current user can add a folder from another drive (different shared drive or My Drive) to this folder. This is false when the item is not a folder. Only populated for items in shared drives.
 * @member {Boolean} canAddFolderFromAnotherDrive
 */
FileCapabilities.prototype['canAddFolderFromAnotherDrive'] = undefined;

/**
 * Output only. Whether the current user can add a parent for the item without removing an existing parent in the same request. Not populated for shared drive files.
 * @member {Boolean} canAddMyDriveParent
 */
FileCapabilities.prototype['canAddMyDriveParent'] = undefined;

/**
 * Output only. Whether the current user can change the `copyRequiresWriterPermission` restriction of this file.
 * @member {Boolean} canChangeCopyRequiresWriterPermission
 */
FileCapabilities.prototype['canChangeCopyRequiresWriterPermission'] = undefined;

/**
 * Output only. Deprecated.
 * @member {Boolean} canChangeRestrictedDownload
 */
FileCapabilities.prototype['canChangeRestrictedDownload'] = undefined;

/**
 * Output only. Whether the current user can change the securityUpdateEnabled field on link share metadata.
 * @member {Boolean} canChangeSecurityUpdateEnabled
 */
FileCapabilities.prototype['canChangeSecurityUpdateEnabled'] = undefined;

/**
 * Output only. Whether the current user can comment on this file.
 * @member {Boolean} canComment
 */
FileCapabilities.prototype['canComment'] = undefined;

/**
 * Output only. Whether the current user can copy this file. For an item in a shared drive, whether the current user can copy non-folder descendants of this item, or this item itself if it is not a folder.
 * @member {Boolean} canCopy
 */
FileCapabilities.prototype['canCopy'] = undefined;

/**
 * Output only. Whether the current user can delete this file.
 * @member {Boolean} canDelete
 */
FileCapabilities.prototype['canDelete'] = undefined;

/**
 * Output only. Whether the current user can delete children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
 * @member {Boolean} canDeleteChildren
 */
FileCapabilities.prototype['canDeleteChildren'] = undefined;

/**
 * Output only. Whether the current user can download this file.
 * @member {Boolean} canDownload
 */
FileCapabilities.prototype['canDownload'] = undefined;

/**
 * Output only. Whether the current user can edit this file. Other factors may limit the type of changes a user can make to a file. For example, see `canChangeCopyRequiresWriterPermission` or `canModifyContent`.
 * @member {Boolean} canEdit
 */
FileCapabilities.prototype['canEdit'] = undefined;

/**
 * Output only. Whether the current user can list the children of this folder. This is always false when the item is not a folder.
 * @member {Boolean} canListChildren
 */
FileCapabilities.prototype['canListChildren'] = undefined;

/**
 * Output only. Whether the current user can modify the content of this file.
 * @member {Boolean} canModifyContent
 */
FileCapabilities.prototype['canModifyContent'] = undefined;

/**
 * Deprecated: Output only. Use one of `canModifyEditorContentRestriction`, `canModifyOwnerContentRestriction` or `canRemoveContentRestriction`.
 * @member {Boolean} canModifyContentRestriction
 */
FileCapabilities.prototype['canModifyContentRestriction'] = undefined;

/**
 * Output only. Whether the current user can add or modify content restrictions on the file which are editor restricted.
 * @member {Boolean} canModifyEditorContentRestriction
 */
FileCapabilities.prototype['canModifyEditorContentRestriction'] = undefined;

/**
 * Output only. Whether the current user can modify the labels on the file.
 * @member {Boolean} canModifyLabels
 */
FileCapabilities.prototype['canModifyLabels'] = undefined;

/**
 * Output only. Whether the current user can add or modify content restrictions which are owner restricted.
 * @member {Boolean} canModifyOwnerContentRestriction
 */
FileCapabilities.prototype['canModifyOwnerContentRestriction'] = undefined;

/**
 * Output only. Whether the current user can move children of this folder outside of the shared drive. This is false when the item is not a folder. Only populated for items in shared drives.
 * @member {Boolean} canMoveChildrenOutOfDrive
 */
FileCapabilities.prototype['canMoveChildrenOutOfDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveChildrenOutOfDrive` instead.
 * @member {Boolean} canMoveChildrenOutOfTeamDrive
 */
FileCapabilities.prototype['canMoveChildrenOutOfTeamDrive'] = undefined;

/**
 * Output only. Whether the current user can move children of this folder within this drive. This is false when the item is not a folder. Note that a request to move the child may still fail depending on the current user's access to the child and to the destination folder.
 * @member {Boolean} canMoveChildrenWithinDrive
 */
FileCapabilities.prototype['canMoveChildrenWithinDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveChildrenWithinDrive` instead.
 * @member {Boolean} canMoveChildrenWithinTeamDrive
 */
FileCapabilities.prototype['canMoveChildrenWithinTeamDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveItemOutOfDrive` instead.
 * @member {Boolean} canMoveItemIntoTeamDrive
 */
FileCapabilities.prototype['canMoveItemIntoTeamDrive'] = undefined;

/**
 * Output only. Whether the current user can move this item outside of this drive by changing its parent. Note that a request to change the parent of the item may still fail depending on the new parent that is being added.
 * @member {Boolean} canMoveItemOutOfDrive
 */
FileCapabilities.prototype['canMoveItemOutOfDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveItemOutOfDrive` instead.
 * @member {Boolean} canMoveItemOutOfTeamDrive
 */
FileCapabilities.prototype['canMoveItemOutOfTeamDrive'] = undefined;

/**
 * Output only. Whether the current user can move this item within this drive. Note that a request to change the parent of the item may still fail depending on the new parent that is being added and the parent that is being removed.
 * @member {Boolean} canMoveItemWithinDrive
 */
FileCapabilities.prototype['canMoveItemWithinDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveItemWithinDrive` instead.
 * @member {Boolean} canMoveItemWithinTeamDrive
 */
FileCapabilities.prototype['canMoveItemWithinTeamDrive'] = undefined;

/**
 * Output only. Deprecated: Use `canMoveItemWithinDrive` or `canMoveItemOutOfDrive` instead.
 * @member {Boolean} canMoveTeamDriveItem
 */
FileCapabilities.prototype['canMoveTeamDriveItem'] = undefined;

/**
 * Output only. Whether the current user can read the shared drive to which this file belongs. Only populated for items in shared drives.
 * @member {Boolean} canReadDrive
 */
FileCapabilities.prototype['canReadDrive'] = undefined;

/**
 * Output only. Whether the current user can read the labels on the file.
 * @member {Boolean} canReadLabels
 */
FileCapabilities.prototype['canReadLabels'] = undefined;

/**
 * Output only. Whether the current user can read the revisions resource of this file. For a shared drive item, whether revisions of non-folder descendants of this item, or this item itself if it is not a folder, can be read.
 * @member {Boolean} canReadRevisions
 */
FileCapabilities.prototype['canReadRevisions'] = undefined;

/**
 * Output only. Deprecated: Use `canReadDrive` instead.
 * @member {Boolean} canReadTeamDrive
 */
FileCapabilities.prototype['canReadTeamDrive'] = undefined;

/**
 * Output only. Whether the current user can remove children from this folder. This is always false when the item is not a folder. For a folder in a shared drive, use `canDeleteChildren` or `canTrashChildren` instead.
 * @member {Boolean} canRemoveChildren
 */
FileCapabilities.prototype['canRemoveChildren'] = undefined;

/**
 * Output only. Whether there is a content restriction on the file that can be removed by the current user.
 * @member {Boolean} canRemoveContentRestriction
 */
FileCapabilities.prototype['canRemoveContentRestriction'] = undefined;

/**
 * Output only. Whether the current user can remove a parent from the item without adding another parent in the same request. Not populated for shared drive files.
 * @member {Boolean} canRemoveMyDriveParent
 */
FileCapabilities.prototype['canRemoveMyDriveParent'] = undefined;

/**
 * Output only. Whether the current user can rename this file.
 * @member {Boolean} canRename
 */
FileCapabilities.prototype['canRename'] = undefined;

/**
 * Output only. Whether the current user can modify the sharing settings for this file.
 * @member {Boolean} canShare
 */
FileCapabilities.prototype['canShare'] = undefined;

/**
 * Output only. Whether the current user can move this file to trash.
 * @member {Boolean} canTrash
 */
FileCapabilities.prototype['canTrash'] = undefined;

/**
 * Output only. Whether the current user can trash children of this folder. This is false when the item is not a folder. Only populated for items in shared drives.
 * @member {Boolean} canTrashChildren
 */
FileCapabilities.prototype['canTrashChildren'] = undefined;

/**
 * Output only. Whether the current user can restore this file from trash.
 * @member {Boolean} canUntrash
 */
FileCapabilities.prototype['canUntrash'] = undefined;






export default FileCapabilities;

