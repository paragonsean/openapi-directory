/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserPicture from './UserPicture';

/**
 * The User model module.
 * @module model/User
 * @version v2
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * Information about a Drive user.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#user';
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('isAuthenticatedUser')) {
                obj['isAuthenticatedUser'] = ApiClient.convertToType(data['isAuthenticatedUser'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('permissionId')) {
                obj['permissionId'] = ApiClient.convertToType(data['permissionId'], 'String');
            }
            if (data.hasOwnProperty('picture')) {
                obj['picture'] = UserPicture.constructFromObject(data['picture']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['permissionId'] && !(typeof data['permissionId'] === 'string' || data['permissionId'] instanceof String)) {
            throw new Error("Expected the field `permissionId` to be a primitive type in the JSON string but got " + data['permissionId']);
        }
        // validate the optional field `picture`
        if (data['picture']) { // data not null
          UserPicture.validateJSON(data['picture']);
        }

        return true;
    }


}



/**
 * Output only. A plain text displayable name for this user.
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;

/**
 * Output only. The email address of the user.
 * @member {String} emailAddress
 */
User.prototype['emailAddress'] = undefined;

/**
 * Output only. Whether this user is the same as the authenticated user for whom the request was made.
 * @member {Boolean} isAuthenticatedUser
 */
User.prototype['isAuthenticatedUser'] = undefined;

/**
 * Output only. This is always `drive#user`.
 * @member {String} kind
 * @default 'drive#user'
 */
User.prototype['kind'] = 'drive#user';

/**
 * Output only. The user's ID as visible in the permissions collection.
 * @member {String} permissionId
 */
User.prototype['permissionId'] = undefined;

/**
 * @member {module:model/UserPicture} picture
 */
User.prototype['picture'] = undefined;






export default User;

