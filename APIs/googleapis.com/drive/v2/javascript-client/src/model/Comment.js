/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentContext from './CommentContext';
import CommentReply from './CommentReply';
import User from './User';

/**
 * The Comment model module.
 * @module model/Comment
 * @version v2
 */
class Comment {
    /**
     * Constructs a new <code>Comment</code>.
     * A comment on a file in Google Drive. Some resource methods (such as &#x60;comments.update&#x60;) require a &#x60;commentId&#x60;. Use the &#x60;comments.list&#x60; method to retrieve the ID for a comment in a file.
     * @alias module:model/Comment
     */
    constructor() { 
        
        Comment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['kind'] = 'drive#comment';
    }

    /**
     * Constructs a <code>Comment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Comment} obj Optional instance to populate.
     * @return {module:model/Comment} The populated <code>Comment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Comment();

            if (data.hasOwnProperty('anchor')) {
                obj['anchor'] = ApiClient.convertToType(data['anchor'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('commentId')) {
                obj['commentId'] = ApiClient.convertToType(data['commentId'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = CommentContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('fileTitle')) {
                obj['fileTitle'] = ApiClient.convertToType(data['fileTitle'], 'String');
            }
            if (data.hasOwnProperty('htmlContent')) {
                obj['htmlContent'] = ApiClient.convertToType(data['htmlContent'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('modifiedDate')) {
                obj['modifiedDate'] = ApiClient.convertToType(data['modifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], [CommentReply]);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Comment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Comment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['anchor'] && !(typeof data['anchor'] === 'string' || data['anchor'] instanceof String)) {
            throw new Error("Expected the field `anchor` to be a primitive type in the JSON string but got " + data['anchor']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          User.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['commentId'] && !(typeof data['commentId'] === 'string' || data['commentId'] instanceof String)) {
            throw new Error("Expected the field `commentId` to be a primitive type in the JSON string but got " + data['commentId']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          CommentContext.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['fileTitle'] && !(typeof data['fileTitle'] === 'string' || data['fileTitle'] instanceof String)) {
            throw new Error("Expected the field `fileTitle` to be a primitive type in the JSON string but got " + data['fileTitle']);
        }
        // ensure the json data is a string
        if (data['htmlContent'] && !(typeof data['htmlContent'] === 'string' || data['htmlContent'] instanceof String)) {
            throw new Error("Expected the field `htmlContent` to be a primitive type in the JSON string but got " + data['htmlContent']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['replies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replies'])) {
                throw new Error("Expected the field `replies` to be an array in the JSON data but got " + data['replies']);
            }
            // validate the optional field `replies` (array)
            for (const item of data['replies']) {
                CommentReply.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Add comments and replies](https://developers.google.com/drive/api/v2/manage-comments).
 * @member {String} anchor
 */
Comment.prototype['anchor'] = undefined;

/**
 * @member {module:model/User} author
 */
Comment.prototype['author'] = undefined;

/**
 * Output only. The ID of the comment.
 * @member {String} commentId
 */
Comment.prototype['commentId'] = undefined;

/**
 * The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.
 * @member {String} content
 */
Comment.prototype['content'] = undefined;

/**
 * @member {module:model/CommentContext} context
 */
Comment.prototype['context'] = undefined;

/**
 * The date when this comment was first created.
 * @member {Date} createdDate
 */
Comment.prototype['createdDate'] = undefined;

/**
 * Output only. Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.
 * @member {Boolean} deleted
 */
Comment.prototype['deleted'] = undefined;

/**
 * Output only. The file which this comment is addressing.
 * @member {String} fileId
 */
Comment.prototype['fileId'] = undefined;

/**
 * Output only. The title of the file which this comment is addressing.
 * @member {String} fileTitle
 */
Comment.prototype['fileTitle'] = undefined;

/**
 * Output only. HTML formatted content for this comment.
 * @member {String} htmlContent
 */
Comment.prototype['htmlContent'] = undefined;

/**
 * Output only. This is always `drive#comment`.
 * @member {String} kind
 * @default 'drive#comment'
 */
Comment.prototype['kind'] = 'drive#comment';

/**
 * The date when this comment or any of its replies were last modified.
 * @member {Date} modifiedDate
 */
Comment.prototype['modifiedDate'] = undefined;

/**
 * Output only. Replies to this post.
 * @member {Array.<module:model/CommentReply>} replies
 */
Comment.prototype['replies'] = undefined;

/**
 * Output only. A link back to this comment.
 * @member {String} selfLink
 */
Comment.prototype['selfLink'] = undefined;

/**
 * Output only. The status of this comment. Status can be changed by posting a reply to a comment with the desired status. * `open` - The comment is still open. * `resolved` - The comment has been resolved by one of its replies.
 * @member {String} status
 */
Comment.prototype['status'] = undefined;






export default Comment;

