/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommentReply from '../model/CommentReply';
import CommentReplyList from '../model/CommentReplyList';

/**
* Replies service.
* @module api/RepliesApi
* @version v2
*/
export default class RepliesApi {

    /**
    * Constructs a new RepliesApi. 
    * @alias module:api/RepliesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the driveRepliesDelete operation.
     * @callback module:api/RepliesApi~driveRepliesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a reply.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {String} replyId The ID of the reply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/RepliesApi~driveRepliesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    driveRepliesDelete(fileId, commentId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesDelete");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesDelete");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling driveRepliesDelete");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId,
        'replyId': replyId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies/{replyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveRepliesGet operation.
     * @callback module:api/RepliesApi~driveRepliesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a reply.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {String} replyId The ID of the reply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeDeleted] If set, this will succeed when retrieving a deleted reply.
     * @param {module:api/RepliesApi~driveRepliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentReply}
     */
    driveRepliesGet(fileId, commentId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesGet");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesGet");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling driveRepliesGet");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId,
        'replyId': replyId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeDeleted': opts['includeDeleted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentReply;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies/{replyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveRepliesInsert operation.
     * @callback module:api/RepliesApi~driveRepliesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new reply to the given comment.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CommentReply} [commentReply] 
     * @param {module:api/RepliesApi~driveRepliesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentReply}
     */
    driveRepliesInsert(fileId, commentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentReply'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesInsert");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesInsert");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentReply;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveRepliesList operation.
     * @callback module:api/RepliesApi~driveRepliesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentReplyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the replies to a comment.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [includeDeleted] If set, all replies, including deleted replies (with content stripped) will be returned.
     * @param {Number} [maxResults] The maximum number of replies to include in the response, used for paging.
     * @param {String} [pageToken] The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of \"nextPageToken\" from the previous response.
     * @param {module:api/RepliesApi~driveRepliesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentReplyList}
     */
    driveRepliesList(fileId, commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesList");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesList");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'includeDeleted': opts['includeDeleted'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentReplyList;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveRepliesPatch operation.
     * @callback module:api/RepliesApi~driveRepliesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing reply.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {String} replyId The ID of the reply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CommentReply} [commentReply] 
     * @param {module:api/RepliesApi~driveRepliesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentReply}
     */
    driveRepliesPatch(fileId, commentId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentReply'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesPatch");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesPatch");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling driveRepliesPatch");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId,
        'replyId': replyId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentReply;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies/{replyId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveRepliesUpdate operation.
     * @callback module:api/RepliesApi~driveRepliesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing reply.
     * @param {String} fileId The ID of the file.
     * @param {String} commentId The ID of the comment.
     * @param {String} replyId The ID of the reply.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/CommentReply} [commentReply] 
     * @param {module:api/RepliesApi~driveRepliesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentReply}
     */
    driveRepliesUpdate(fileId, commentId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = opts['commentReply'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling driveRepliesUpdate");
      }
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling driveRepliesUpdate");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling driveRepliesUpdate");
      }

      let pathParams = {
        'fileId': fileId,
        'commentId': commentId,
        'replyId': replyId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommentReply;
      return this.apiClient.callApi(
        '/files/{fileId}/comments/{commentId}/replies/{replyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
