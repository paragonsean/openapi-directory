/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TeamDrive from '../model/TeamDrive';
import TeamDriveList from '../model/TeamDriveList';

/**
* Teamdrives service.
* @module api/TeamdrivesApi
* @version v2
*/
export default class TeamdrivesApi {

    /**
    * Constructs a new TeamdrivesApi. 
    * @alias module:api/TeamdrivesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the driveTeamdrivesDelete operation.
     * @callback module:api/TeamdrivesApi~driveTeamdrivesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: Use `drives.delete` instead.
     * @param {String} teamDriveId The ID of the Team Drive
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/TeamdrivesApi~driveTeamdrivesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    driveTeamdrivesDelete(teamDriveId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamDriveId' is set
      if (teamDriveId === undefined || teamDriveId === null) {
        throw new Error("Missing the required parameter 'teamDriveId' when calling driveTeamdrivesDelete");
      }

      let pathParams = {
        'teamDriveId': teamDriveId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdrives/{teamDriveId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveTeamdrivesGet operation.
     * @callback module:api/TeamdrivesApi~driveTeamdrivesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDrive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: Use `drives.get` instead.
     * @param {String} teamDriveId The ID of the Team Drive
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     * @param {module:api/TeamdrivesApi~driveTeamdrivesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDrive}
     */
    driveTeamdrivesGet(teamDriveId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamDriveId' is set
      if (teamDriveId === undefined || teamDriveId === null) {
        throw new Error("Missing the required parameter 'teamDriveId' when calling driveTeamdrivesGet");
      }

      let pathParams = {
        'teamDriveId': teamDriveId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDrive;
      return this.apiClient.callApi(
        '/teamdrives/{teamDriveId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveTeamdrivesInsert operation.
     * @callback module:api/TeamdrivesApi~driveTeamdrivesInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDrive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: Use `drives.insert` instead.
     * @param {String} requestId Required. An ID, such as a random UUID, which uniquely identifies this user's request for idempotent creation of a Team Drive. A repeated request by the same user and with the same request ID will avoid creating duplicates by attempting to create the same Team Drive. If the Team Drive already exists a 409 error will be returned.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/TeamDrive} [teamDrive] 
     * @param {module:api/TeamdrivesApi~driveTeamdrivesInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDrive}
     */
    driveTeamdrivesInsert(requestId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamDrive'];
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling driveTeamdrivesInsert");
      }

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'requestId': requestId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDrive;
      return this.apiClient.callApi(
        '/teamdrives', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveTeamdrivesList operation.
     * @callback module:api/TeamdrivesApi~driveTeamdrivesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDriveList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: Use `drives.list` instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxResults] Maximum number of Team Drives to return.
     * @param {String} [pageToken] Page token for Team Drives.
     * @param {String} [q] Query string for searching Team Drives.
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then all Team Drives of the domain in which the requester is an administrator are returned.
     * @param {module:api/TeamdrivesApi~driveTeamdrivesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDriveList}
     */
    driveTeamdrivesList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxResults': opts['maxResults'],
        'pageToken': opts['pageToken'],
        'q': opts['q'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamDriveList;
      return this.apiClient.callApi(
        '/teamdrives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveTeamdrivesUpdate operation.
     * @callback module:api/TeamdrivesApi~driveTeamdrivesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamDrive} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated: Use `drives.update` instead.
     * @param {String} teamDriveId The ID of the Team Drive
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [useDomainAdminAccess] Issue the request as a domain administrator; if set to true, then the requester will be granted access if they are an administrator of the domain to which the Team Drive belongs.
     * @param {module:model/TeamDrive} [teamDrive] 
     * @param {module:api/TeamdrivesApi~driveTeamdrivesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamDrive}
     */
    driveTeamdrivesUpdate(teamDriveId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamDrive'];
      // verify the required parameter 'teamDriveId' is set
      if (teamDriveId === undefined || teamDriveId === null) {
        throw new Error("Missing the required parameter 'teamDriveId' when calling driveTeamdrivesUpdate");
      }

      let pathParams = {
        'teamDriveId': teamDriveId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'useDomainAdminAccess': opts['useDomainAdminAccess']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamDrive;
      return this.apiClient.callApi(
        '/teamdrives/{teamDriveId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
