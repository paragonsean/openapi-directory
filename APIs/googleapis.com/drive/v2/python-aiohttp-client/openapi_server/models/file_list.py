# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server import util


class FileList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, incomplete_search: bool=None, items: List[File]=None, kind: str='drive#fileList', next_link: str=None, next_page_token: str=None, self_link: str=None):
        """FileList - a model defined in OpenAPI

        :param etag: The etag of this FileList.
        :param incomplete_search: The incomplete_search of this FileList.
        :param items: The items of this FileList.
        :param kind: The kind of this FileList.
        :param next_link: The next_link of this FileList.
        :param next_page_token: The next_page_token of this FileList.
        :param self_link: The self_link of this FileList.
        """
        self.openapi_types = {
            'etag': str,
            'incomplete_search': bool,
            'items': List[File],
            'kind': str,
            'next_link': str,
            'next_page_token': str,
            'self_link': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'incomplete_search': 'incompleteSearch',
            'items': 'items',
            'kind': 'kind',
            'next_link': 'nextLink',
            'next_page_token': 'nextPageToken',
            'self_link': 'selfLink'
        }

        self._etag = etag
        self._incomplete_search = incomplete_search
        self._items = items
        self._kind = kind
        self._next_link = next_link
        self._next_page_token = next_page_token
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileList of this FileList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this FileList.

        The ETag of the list.

        :return: The etag of this FileList.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this FileList.

        The ETag of the list.

        :param etag: The etag of this FileList.
        :type etag: str
        """

        self._etag = etag

    @property
    def incomplete_search(self):
        """Gets the incomplete_search of this FileList.

        Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple drives with the \"allDrives\" corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as \"default\" or \"drive\".

        :return: The incomplete_search of this FileList.
        :rtype: bool
        """
        return self._incomplete_search

    @incomplete_search.setter
    def incomplete_search(self, incomplete_search):
        """Sets the incomplete_search of this FileList.

        Whether the search process was incomplete. If true, then some search results may be missing, since all documents were not searched. This may occur when searching multiple drives with the \"allDrives\" corpora, but all corpora could not be searched. When this happens, it is suggested that clients narrow their query by choosing a different corpus such as \"default\" or \"drive\".

        :param incomplete_search: The incomplete_search of this FileList.
        :type incomplete_search: bool
        """

        self._incomplete_search = incomplete_search

    @property
    def items(self):
        """Gets the items of this FileList.

        The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The items of this FileList.
        :rtype: List[File]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this FileList.

        The list of files. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param items: The items of this FileList.
        :type items: List[File]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this FileList.

        This is always `drive#fileList`.

        :return: The kind of this FileList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this FileList.

        This is always `drive#fileList`.

        :param kind: The kind of this FileList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_link(self):
        """Gets the next_link of this FileList.

        A link to the next page of files.

        :return: The next_link of this FileList.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this FileList.

        A link to the next page of files.

        :param next_link: The next_link of this FileList.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def next_page_token(self):
        """Gets the next_page_token of this FileList.

        The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :return: The next_page_token of this FileList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this FileList.

        The page token for the next page of files. This will be absent if the end of the files list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :param next_page_token: The next_page_token of this FileList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def self_link(self):
        """Gets the self_link of this FileList.

        A link back to this list.

        :return: The self_link of this FileList.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this FileList.

        A link back to this list.

        :param self_link: The self_link of this FileList.
        :type self_link: str
        """

        self._self_link = self_link
