# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class Revision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_url: str=None, etag: str=None, export_links: Dict[str, str]=None, file_size: str=None, id: str=None, kind: str='drive#revision', last_modifying_user: User=None, last_modifying_user_name: str=None, md5_checksum: str=None, mime_type: str=None, modified_date: datetime=None, original_filename: str=None, pinned: bool=None, publish_auto: bool=None, published: bool=None, published_link: str=None, published_outside_domain: bool=None, self_link: str=None):
        """Revision - a model defined in OpenAPI

        :param download_url: The download_url of this Revision.
        :param etag: The etag of this Revision.
        :param export_links: The export_links of this Revision.
        :param file_size: The file_size of this Revision.
        :param id: The id of this Revision.
        :param kind: The kind of this Revision.
        :param last_modifying_user: The last_modifying_user of this Revision.
        :param last_modifying_user_name: The last_modifying_user_name of this Revision.
        :param md5_checksum: The md5_checksum of this Revision.
        :param mime_type: The mime_type of this Revision.
        :param modified_date: The modified_date of this Revision.
        :param original_filename: The original_filename of this Revision.
        :param pinned: The pinned of this Revision.
        :param publish_auto: The publish_auto of this Revision.
        :param published: The published of this Revision.
        :param published_link: The published_link of this Revision.
        :param published_outside_domain: The published_outside_domain of this Revision.
        :param self_link: The self_link of this Revision.
        """
        self.openapi_types = {
            'download_url': str,
            'etag': str,
            'export_links': Dict[str, str],
            'file_size': str,
            'id': str,
            'kind': str,
            'last_modifying_user': User,
            'last_modifying_user_name': str,
            'md5_checksum': str,
            'mime_type': str,
            'modified_date': datetime,
            'original_filename': str,
            'pinned': bool,
            'publish_auto': bool,
            'published': bool,
            'published_link': str,
            'published_outside_domain': bool,
            'self_link': str
        }

        self.attribute_map = {
            'download_url': 'downloadUrl',
            'etag': 'etag',
            'export_links': 'exportLinks',
            'file_size': 'fileSize',
            'id': 'id',
            'kind': 'kind',
            'last_modifying_user': 'lastModifyingUser',
            'last_modifying_user_name': 'lastModifyingUserName',
            'md5_checksum': 'md5Checksum',
            'mime_type': 'mimeType',
            'modified_date': 'modifiedDate',
            'original_filename': 'originalFilename',
            'pinned': 'pinned',
            'publish_auto': 'publishAuto',
            'published': 'published',
            'published_link': 'publishedLink',
            'published_outside_domain': 'publishedOutsideDomain',
            'self_link': 'selfLink'
        }

        self._download_url = download_url
        self._etag = etag
        self._export_links = export_links
        self._file_size = file_size
        self._id = id
        self._kind = kind
        self._last_modifying_user = last_modifying_user
        self._last_modifying_user_name = last_modifying_user_name
        self._md5_checksum = md5_checksum
        self._mime_type = mime_type
        self._modified_date = modified_date
        self._original_filename = original_filename
        self._pinned = pinned
        self._publish_auto = publish_auto
        self._published = published
        self._published_link = published_link
        self._published_outside_domain = published_outside_domain
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Revision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Revision of this Revision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_url(self):
        """Gets the download_url of this Revision.

        Output only. Short term download URL for the file. This will only be populated on files with content stored in Drive.

        :return: The download_url of this Revision.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this Revision.

        Output only. Short term download URL for the file. This will only be populated on files with content stored in Drive.

        :param download_url: The download_url of this Revision.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def etag(self):
        """Gets the etag of this Revision.

        Output only. The ETag of the revision.

        :return: The etag of this Revision.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Revision.

        Output only. The ETag of the revision.

        :param etag: The etag of this Revision.
        :type etag: str
        """

        self._etag = etag

    @property
    def export_links(self):
        """Gets the export_links of this Revision.

        Output only. Links for exporting Docs Editors files to specific formats.

        :return: The export_links of this Revision.
        :rtype: Dict[str, str]
        """
        return self._export_links

    @export_links.setter
    def export_links(self, export_links):
        """Sets the export_links of this Revision.

        Output only. Links for exporting Docs Editors files to specific formats.

        :param export_links: The export_links of this Revision.
        :type export_links: Dict[str, str]
        """

        self._export_links = export_links

    @property
    def file_size(self):
        """Gets the file_size of this Revision.

        Output only. The size of the revision in bytes. This will only be populated on files with content stored in Drive.

        :return: The file_size of this Revision.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this Revision.

        Output only. The size of the revision in bytes. This will only be populated on files with content stored in Drive.

        :param file_size: The file_size of this Revision.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def id(self):
        """Gets the id of this Revision.

        Output only. The ID of the revision.

        :return: The id of this Revision.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Revision.

        Output only. The ID of the revision.

        :param id: The id of this Revision.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Revision.

        Output only. This is always `drive#revision`.

        :return: The kind of this Revision.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Revision.

        Output only. This is always `drive#revision`.

        :param kind: The kind of this Revision.
        :type kind: str
        """

        self._kind = kind

    @property
    def last_modifying_user(self):
        """Gets the last_modifying_user of this Revision.


        :return: The last_modifying_user of this Revision.
        :rtype: User
        """
        return self._last_modifying_user

    @last_modifying_user.setter
    def last_modifying_user(self, last_modifying_user):
        """Sets the last_modifying_user of this Revision.


        :param last_modifying_user: The last_modifying_user of this Revision.
        :type last_modifying_user: User
        """

        self._last_modifying_user = last_modifying_user

    @property
    def last_modifying_user_name(self):
        """Gets the last_modifying_user_name of this Revision.

        Output only. Name of the last user to modify this revision.

        :return: The last_modifying_user_name of this Revision.
        :rtype: str
        """
        return self._last_modifying_user_name

    @last_modifying_user_name.setter
    def last_modifying_user_name(self, last_modifying_user_name):
        """Sets the last_modifying_user_name of this Revision.

        Output only. Name of the last user to modify this revision.

        :param last_modifying_user_name: The last_modifying_user_name of this Revision.
        :type last_modifying_user_name: str
        """

        self._last_modifying_user_name = last_modifying_user_name

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this Revision.

        Output only. An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.

        :return: The md5_checksum of this Revision.
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this Revision.

        Output only. An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.

        :param md5_checksum: The md5_checksum of this Revision.
        :type md5_checksum: str
        """

        self._md5_checksum = md5_checksum

    @property
    def mime_type(self):
        """Gets the mime_type of this Revision.

        Output only. The MIME type of the revision.

        :return: The mime_type of this Revision.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this Revision.

        Output only. The MIME type of the revision.

        :param mime_type: The mime_type of this Revision.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def modified_date(self):
        """Gets the modified_date of this Revision.

        Last time this revision was modified (formatted RFC 3339 timestamp).

        :return: The modified_date of this Revision.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Revision.

        Last time this revision was modified (formatted RFC 3339 timestamp).

        :param modified_date: The modified_date of this Revision.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def original_filename(self):
        """Gets the original_filename of this Revision.

        Output only. The original filename when this revision was created. This will only be populated on files with content stored in Drive.

        :return: The original_filename of this Revision.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this Revision.

        Output only. The original filename when this revision was created. This will only be populated on files with content stored in Drive.

        :param original_filename: The original_filename of this Revision.
        :type original_filename: str
        """

        self._original_filename = original_filename

    @property
    def pinned(self):
        """Gets the pinned of this Revision.

        Whether this revision is pinned to prevent automatic purging. If not set, the revision is automatically purged 30 days after newer content is uploaded. This field can only be modified on files with content stored in Drive, excluding Docs Editors files. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.

        :return: The pinned of this Revision.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Revision.

        Whether this revision is pinned to prevent automatic purging. If not set, the revision is automatically purged 30 days after newer content is uploaded. This field can only be modified on files with content stored in Drive, excluding Docs Editors files. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.

        :param pinned: The pinned of this Revision.
        :type pinned: bool
        """

        self._pinned = pinned

    @property
    def publish_auto(self):
        """Gets the publish_auto of this Revision.

        Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Docs Editors files.

        :return: The publish_auto of this Revision.
        :rtype: bool
        """
        return self._publish_auto

    @publish_auto.setter
    def publish_auto(self, publish_auto):
        """Sets the publish_auto of this Revision.

        Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Docs Editors files.

        :param publish_auto: The publish_auto of this Revision.
        :type publish_auto: bool
        """

        self._publish_auto = publish_auto

    @property
    def published(self):
        """Gets the published of this Revision.

        Whether this revision is published. This is only populated and can only be modified for Docs Editors files.

        :return: The published of this Revision.
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Revision.

        Whether this revision is published. This is only populated and can only be modified for Docs Editors files.

        :param published: The published of this Revision.
        :type published: bool
        """

        self._published = published

    @property
    def published_link(self):
        """Gets the published_link of this Revision.

        Output only. A link to the published revision. This is only populated for Google Sites files.

        :return: The published_link of this Revision.
        :rtype: str
        """
        return self._published_link

    @published_link.setter
    def published_link(self, published_link):
        """Sets the published_link of this Revision.

        Output only. A link to the published revision. This is only populated for Google Sites files.

        :param published_link: The published_link of this Revision.
        :type published_link: str
        """

        self._published_link = published_link

    @property
    def published_outside_domain(self):
        """Gets the published_outside_domain of this Revision.

        Whether this revision is published outside the domain. This is only populated and can only be modified for Docs Editors files.

        :return: The published_outside_domain of this Revision.
        :rtype: bool
        """
        return self._published_outside_domain

    @published_outside_domain.setter
    def published_outside_domain(self, published_outside_domain):
        """Sets the published_outside_domain of this Revision.

        Whether this revision is published outside the domain. This is only populated and can only be modified for Docs Editors files.

        :param published_outside_domain: The published_outside_domain of this Revision.
        :type published_outside_domain: bool
        """

        self._published_outside_domain = published_outside_domain

    @property
    def self_link(self):
        """Gets the self_link of this Revision.

        Output only. A link back to this revision.

        :return: The self_link of this Revision.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Revision.

        Output only. A link back to this revision.

        :param self_link: The self_link of this Revision.
        :type self_link: str
        """

        self._self_link = self_link
