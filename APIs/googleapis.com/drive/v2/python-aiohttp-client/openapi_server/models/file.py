# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_restriction import ContentRestriction
from openapi_server.models.file_capabilities import FileCapabilities
from openapi_server.models.file_image_media_metadata import FileImageMediaMetadata
from openapi_server.models.file_indexable_text import FileIndexableText
from openapi_server.models.file_label_info import FileLabelInfo
from openapi_server.models.file_labels import FileLabels
from openapi_server.models.file_link_share_metadata import FileLinkShareMetadata
from openapi_server.models.file_shortcut_details import FileShortcutDetails
from openapi_server.models.file_thumbnail import FileThumbnail
from openapi_server.models.file_video_media_metadata import FileVideoMediaMetadata
from openapi_server.models.model_property import ModelProperty
from openapi_server.models.parent_reference import ParentReference
from openapi_server.models.permission import Permission
from openapi_server.models.user import User
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_link: str=None, app_data_contents: bool=None, can_comment: bool=None, can_read_revisions: bool=None, capabilities: FileCapabilities=None, content_restrictions: List[ContentRestriction]=None, copy_requires_writer_permission: bool=None, copyable: bool=None, created_date: datetime=None, default_open_with_link: str=None, description: str=None, download_url: str=None, drive_id: str=None, editable: bool=None, embed_link: str=None, etag: str=None, explicitly_trashed: bool=None, export_links: Dict[str, str]=None, file_extension: str=None, file_size: str=None, folder_color_rgb: str=None, full_file_extension: str=None, has_augmented_permissions: bool=None, has_thumbnail: bool=None, head_revision_id: str=None, icon_link: str=None, id: str=None, image_media_metadata: FileImageMediaMetadata=None, indexable_text: FileIndexableText=None, is_app_authorized: bool=None, kind: str='drive#file', label_info: FileLabelInfo=None, labels: FileLabels=None, last_modifying_user: User=None, last_modifying_user_name: str=None, last_viewed_by_me_date: datetime=None, link_share_metadata: FileLinkShareMetadata=None, marked_viewed_by_me_date: datetime=None, md5_checksum: str=None, mime_type: str=None, modified_by_me_date: datetime=None, modified_date: datetime=None, open_with_links: Dict[str, str]=None, original_filename: str=None, owned_by_me: bool=None, owner_names: List[str]=None, owners: List[User]=None, parents: List[ParentReference]=None, permission_ids: List[str]=None, permissions: List[Permission]=None, properties: List[ModelProperty]=None, quota_bytes_used: str=None, resource_key: str=None, self_link: str=None, sha1_checksum: str=None, sha256_checksum: str=None, shareable: bool=None, shared: bool=None, shared_with_me_date: datetime=None, sharing_user: User=None, shortcut_details: FileShortcutDetails=None, spaces: List[str]=None, team_drive_id: str=None, thumbnail: FileThumbnail=None, thumbnail_link: str=None, thumbnail_version: str=None, title: str=None, trashed_date: datetime=None, trashing_user: User=None, user_permission: Permission=None, version: str=None, video_media_metadata: FileVideoMediaMetadata=None, web_content_link: str=None, web_view_link: str=None, writers_can_share: bool=None):
        """File - a model defined in OpenAPI

        :param alternate_link: The alternate_link of this File.
        :param app_data_contents: The app_data_contents of this File.
        :param can_comment: The can_comment of this File.
        :param can_read_revisions: The can_read_revisions of this File.
        :param capabilities: The capabilities of this File.
        :param content_restrictions: The content_restrictions of this File.
        :param copy_requires_writer_permission: The copy_requires_writer_permission of this File.
        :param copyable: The copyable of this File.
        :param created_date: The created_date of this File.
        :param default_open_with_link: The default_open_with_link of this File.
        :param description: The description of this File.
        :param download_url: The download_url of this File.
        :param drive_id: The drive_id of this File.
        :param editable: The editable of this File.
        :param embed_link: The embed_link of this File.
        :param etag: The etag of this File.
        :param explicitly_trashed: The explicitly_trashed of this File.
        :param export_links: The export_links of this File.
        :param file_extension: The file_extension of this File.
        :param file_size: The file_size of this File.
        :param folder_color_rgb: The folder_color_rgb of this File.
        :param full_file_extension: The full_file_extension of this File.
        :param has_augmented_permissions: The has_augmented_permissions of this File.
        :param has_thumbnail: The has_thumbnail of this File.
        :param head_revision_id: The head_revision_id of this File.
        :param icon_link: The icon_link of this File.
        :param id: The id of this File.
        :param image_media_metadata: The image_media_metadata of this File.
        :param indexable_text: The indexable_text of this File.
        :param is_app_authorized: The is_app_authorized of this File.
        :param kind: The kind of this File.
        :param label_info: The label_info of this File.
        :param labels: The labels of this File.
        :param last_modifying_user: The last_modifying_user of this File.
        :param last_modifying_user_name: The last_modifying_user_name of this File.
        :param last_viewed_by_me_date: The last_viewed_by_me_date of this File.
        :param link_share_metadata: The link_share_metadata of this File.
        :param marked_viewed_by_me_date: The marked_viewed_by_me_date of this File.
        :param md5_checksum: The md5_checksum of this File.
        :param mime_type: The mime_type of this File.
        :param modified_by_me_date: The modified_by_me_date of this File.
        :param modified_date: The modified_date of this File.
        :param open_with_links: The open_with_links of this File.
        :param original_filename: The original_filename of this File.
        :param owned_by_me: The owned_by_me of this File.
        :param owner_names: The owner_names of this File.
        :param owners: The owners of this File.
        :param parents: The parents of this File.
        :param permission_ids: The permission_ids of this File.
        :param permissions: The permissions of this File.
        :param properties: The properties of this File.
        :param quota_bytes_used: The quota_bytes_used of this File.
        :param resource_key: The resource_key of this File.
        :param self_link: The self_link of this File.
        :param sha1_checksum: The sha1_checksum of this File.
        :param sha256_checksum: The sha256_checksum of this File.
        :param shareable: The shareable of this File.
        :param shared: The shared of this File.
        :param shared_with_me_date: The shared_with_me_date of this File.
        :param sharing_user: The sharing_user of this File.
        :param shortcut_details: The shortcut_details of this File.
        :param spaces: The spaces of this File.
        :param team_drive_id: The team_drive_id of this File.
        :param thumbnail: The thumbnail of this File.
        :param thumbnail_link: The thumbnail_link of this File.
        :param thumbnail_version: The thumbnail_version of this File.
        :param title: The title of this File.
        :param trashed_date: The trashed_date of this File.
        :param trashing_user: The trashing_user of this File.
        :param user_permission: The user_permission of this File.
        :param version: The version of this File.
        :param video_media_metadata: The video_media_metadata of this File.
        :param web_content_link: The web_content_link of this File.
        :param web_view_link: The web_view_link of this File.
        :param writers_can_share: The writers_can_share of this File.
        """
        self.openapi_types = {
            'alternate_link': str,
            'app_data_contents': bool,
            'can_comment': bool,
            'can_read_revisions': bool,
            'capabilities': FileCapabilities,
            'content_restrictions': List[ContentRestriction],
            'copy_requires_writer_permission': bool,
            'copyable': bool,
            'created_date': datetime,
            'default_open_with_link': str,
            'description': str,
            'download_url': str,
            'drive_id': str,
            'editable': bool,
            'embed_link': str,
            'etag': str,
            'explicitly_trashed': bool,
            'export_links': Dict[str, str],
            'file_extension': str,
            'file_size': str,
            'folder_color_rgb': str,
            'full_file_extension': str,
            'has_augmented_permissions': bool,
            'has_thumbnail': bool,
            'head_revision_id': str,
            'icon_link': str,
            'id': str,
            'image_media_metadata': FileImageMediaMetadata,
            'indexable_text': FileIndexableText,
            'is_app_authorized': bool,
            'kind': str,
            'label_info': FileLabelInfo,
            'labels': FileLabels,
            'last_modifying_user': User,
            'last_modifying_user_name': str,
            'last_viewed_by_me_date': datetime,
            'link_share_metadata': FileLinkShareMetadata,
            'marked_viewed_by_me_date': datetime,
            'md5_checksum': str,
            'mime_type': str,
            'modified_by_me_date': datetime,
            'modified_date': datetime,
            'open_with_links': Dict[str, str],
            'original_filename': str,
            'owned_by_me': bool,
            'owner_names': List[str],
            'owners': List[User],
            'parents': List[ParentReference],
            'permission_ids': List[str],
            'permissions': List[Permission],
            'properties': List[ModelProperty],
            'quota_bytes_used': str,
            'resource_key': str,
            'self_link': str,
            'sha1_checksum': str,
            'sha256_checksum': str,
            'shareable': bool,
            'shared': bool,
            'shared_with_me_date': datetime,
            'sharing_user': User,
            'shortcut_details': FileShortcutDetails,
            'spaces': List[str],
            'team_drive_id': str,
            'thumbnail': FileThumbnail,
            'thumbnail_link': str,
            'thumbnail_version': str,
            'title': str,
            'trashed_date': datetime,
            'trashing_user': User,
            'user_permission': Permission,
            'version': str,
            'video_media_metadata': FileVideoMediaMetadata,
            'web_content_link': str,
            'web_view_link': str,
            'writers_can_share': bool
        }

        self.attribute_map = {
            'alternate_link': 'alternateLink',
            'app_data_contents': 'appDataContents',
            'can_comment': 'canComment',
            'can_read_revisions': 'canReadRevisions',
            'capabilities': 'capabilities',
            'content_restrictions': 'contentRestrictions',
            'copy_requires_writer_permission': 'copyRequiresWriterPermission',
            'copyable': 'copyable',
            'created_date': 'createdDate',
            'default_open_with_link': 'defaultOpenWithLink',
            'description': 'description',
            'download_url': 'downloadUrl',
            'drive_id': 'driveId',
            'editable': 'editable',
            'embed_link': 'embedLink',
            'etag': 'etag',
            'explicitly_trashed': 'explicitlyTrashed',
            'export_links': 'exportLinks',
            'file_extension': 'fileExtension',
            'file_size': 'fileSize',
            'folder_color_rgb': 'folderColorRgb',
            'full_file_extension': 'fullFileExtension',
            'has_augmented_permissions': 'hasAugmentedPermissions',
            'has_thumbnail': 'hasThumbnail',
            'head_revision_id': 'headRevisionId',
            'icon_link': 'iconLink',
            'id': 'id',
            'image_media_metadata': 'imageMediaMetadata',
            'indexable_text': 'indexableText',
            'is_app_authorized': 'isAppAuthorized',
            'kind': 'kind',
            'label_info': 'labelInfo',
            'labels': 'labels',
            'last_modifying_user': 'lastModifyingUser',
            'last_modifying_user_name': 'lastModifyingUserName',
            'last_viewed_by_me_date': 'lastViewedByMeDate',
            'link_share_metadata': 'linkShareMetadata',
            'marked_viewed_by_me_date': 'markedViewedByMeDate',
            'md5_checksum': 'md5Checksum',
            'mime_type': 'mimeType',
            'modified_by_me_date': 'modifiedByMeDate',
            'modified_date': 'modifiedDate',
            'open_with_links': 'openWithLinks',
            'original_filename': 'originalFilename',
            'owned_by_me': 'ownedByMe',
            'owner_names': 'ownerNames',
            'owners': 'owners',
            'parents': 'parents',
            'permission_ids': 'permissionIds',
            'permissions': 'permissions',
            'properties': 'properties',
            'quota_bytes_used': 'quotaBytesUsed',
            'resource_key': 'resourceKey',
            'self_link': 'selfLink',
            'sha1_checksum': 'sha1Checksum',
            'sha256_checksum': 'sha256Checksum',
            'shareable': 'shareable',
            'shared': 'shared',
            'shared_with_me_date': 'sharedWithMeDate',
            'sharing_user': 'sharingUser',
            'shortcut_details': 'shortcutDetails',
            'spaces': 'spaces',
            'team_drive_id': 'teamDriveId',
            'thumbnail': 'thumbnail',
            'thumbnail_link': 'thumbnailLink',
            'thumbnail_version': 'thumbnailVersion',
            'title': 'title',
            'trashed_date': 'trashedDate',
            'trashing_user': 'trashingUser',
            'user_permission': 'userPermission',
            'version': 'version',
            'video_media_metadata': 'videoMediaMetadata',
            'web_content_link': 'webContentLink',
            'web_view_link': 'webViewLink',
            'writers_can_share': 'writersCanShare'
        }

        self._alternate_link = alternate_link
        self._app_data_contents = app_data_contents
        self._can_comment = can_comment
        self._can_read_revisions = can_read_revisions
        self._capabilities = capabilities
        self._content_restrictions = content_restrictions
        self._copy_requires_writer_permission = copy_requires_writer_permission
        self._copyable = copyable
        self._created_date = created_date
        self._default_open_with_link = default_open_with_link
        self._description = description
        self._download_url = download_url
        self._drive_id = drive_id
        self._editable = editable
        self._embed_link = embed_link
        self._etag = etag
        self._explicitly_trashed = explicitly_trashed
        self._export_links = export_links
        self._file_extension = file_extension
        self._file_size = file_size
        self._folder_color_rgb = folder_color_rgb
        self._full_file_extension = full_file_extension
        self._has_augmented_permissions = has_augmented_permissions
        self._has_thumbnail = has_thumbnail
        self._head_revision_id = head_revision_id
        self._icon_link = icon_link
        self._id = id
        self._image_media_metadata = image_media_metadata
        self._indexable_text = indexable_text
        self._is_app_authorized = is_app_authorized
        self._kind = kind
        self._label_info = label_info
        self._labels = labels
        self._last_modifying_user = last_modifying_user
        self._last_modifying_user_name = last_modifying_user_name
        self._last_viewed_by_me_date = last_viewed_by_me_date
        self._link_share_metadata = link_share_metadata
        self._marked_viewed_by_me_date = marked_viewed_by_me_date
        self._md5_checksum = md5_checksum
        self._mime_type = mime_type
        self._modified_by_me_date = modified_by_me_date
        self._modified_date = modified_date
        self._open_with_links = open_with_links
        self._original_filename = original_filename
        self._owned_by_me = owned_by_me
        self._owner_names = owner_names
        self._owners = owners
        self._parents = parents
        self._permission_ids = permission_ids
        self._permissions = permissions
        self._properties = properties
        self._quota_bytes_used = quota_bytes_used
        self._resource_key = resource_key
        self._self_link = self_link
        self._sha1_checksum = sha1_checksum
        self._sha256_checksum = sha256_checksum
        self._shareable = shareable
        self._shared = shared
        self._shared_with_me_date = shared_with_me_date
        self._sharing_user = sharing_user
        self._shortcut_details = shortcut_details
        self._spaces = spaces
        self._team_drive_id = team_drive_id
        self._thumbnail = thumbnail
        self._thumbnail_link = thumbnail_link
        self._thumbnail_version = thumbnail_version
        self._title = title
        self._trashed_date = trashed_date
        self._trashing_user = trashing_user
        self._user_permission = user_permission
        self._version = version
        self._video_media_metadata = video_media_metadata
        self._web_content_link = web_content_link
        self._web_view_link = web_view_link
        self._writers_can_share = writers_can_share

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_link(self):
        """Gets the alternate_link of this File.

        Output only. A link for opening the file in a relevant Google editor or viewer.

        :return: The alternate_link of this File.
        :rtype: str
        """
        return self._alternate_link

    @alternate_link.setter
    def alternate_link(self, alternate_link):
        """Sets the alternate_link of this File.

        Output only. A link for opening the file in a relevant Google editor or viewer.

        :param alternate_link: The alternate_link of this File.
        :type alternate_link: str
        """

        self._alternate_link = alternate_link

    @property
    def app_data_contents(self):
        """Gets the app_data_contents of this File.

        Output only. Whether this file is in the Application Data folder.

        :return: The app_data_contents of this File.
        :rtype: bool
        """
        return self._app_data_contents

    @app_data_contents.setter
    def app_data_contents(self, app_data_contents):
        """Sets the app_data_contents of this File.

        Output only. Whether this file is in the Application Data folder.

        :param app_data_contents: The app_data_contents of this File.
        :type app_data_contents: bool
        """

        self._app_data_contents = app_data_contents

    @property
    def can_comment(self):
        """Gets the can_comment of this File.

        Output only. Deprecated: Use `capabilities/canComment` instead.

        :return: The can_comment of this File.
        :rtype: bool
        """
        return self._can_comment

    @can_comment.setter
    def can_comment(self, can_comment):
        """Sets the can_comment of this File.

        Output only. Deprecated: Use `capabilities/canComment` instead.

        :param can_comment: The can_comment of this File.
        :type can_comment: bool
        """

        self._can_comment = can_comment

    @property
    def can_read_revisions(self):
        """Gets the can_read_revisions of this File.

        Output only. Deprecated: Use `capabilities/canReadRevisions` instead.

        :return: The can_read_revisions of this File.
        :rtype: bool
        """
        return self._can_read_revisions

    @can_read_revisions.setter
    def can_read_revisions(self, can_read_revisions):
        """Sets the can_read_revisions of this File.

        Output only. Deprecated: Use `capabilities/canReadRevisions` instead.

        :param can_read_revisions: The can_read_revisions of this File.
        :type can_read_revisions: bool
        """

        self._can_read_revisions = can_read_revisions

    @property
    def capabilities(self):
        """Gets the capabilities of this File.


        :return: The capabilities of this File.
        :rtype: FileCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this File.


        :param capabilities: The capabilities of this File.
        :type capabilities: FileCapabilities
        """

        self._capabilities = capabilities

    @property
    def content_restrictions(self):
        """Gets the content_restrictions of this File.

        Restrictions for accessing the content of the file. Only populated if such a restriction exists.

        :return: The content_restrictions of this File.
        :rtype: List[ContentRestriction]
        """
        return self._content_restrictions

    @content_restrictions.setter
    def content_restrictions(self, content_restrictions):
        """Sets the content_restrictions of this File.

        Restrictions for accessing the content of the file. Only populated if such a restriction exists.

        :param content_restrictions: The content_restrictions of this File.
        :type content_restrictions: List[ContentRestriction]
        """

        self._content_restrictions = content_restrictions

    @property
    def copy_requires_writer_permission(self):
        """Gets the copy_requires_writer_permission of this File.

        Whether the options to copy, print, or download this file, should be disabled for readers and commenters.

        :return: The copy_requires_writer_permission of this File.
        :rtype: bool
        """
        return self._copy_requires_writer_permission

    @copy_requires_writer_permission.setter
    def copy_requires_writer_permission(self, copy_requires_writer_permission):
        """Sets the copy_requires_writer_permission of this File.

        Whether the options to copy, print, or download this file, should be disabled for readers and commenters.

        :param copy_requires_writer_permission: The copy_requires_writer_permission of this File.
        :type copy_requires_writer_permission: bool
        """

        self._copy_requires_writer_permission = copy_requires_writer_permission

    @property
    def copyable(self):
        """Gets the copyable of this File.

        Output only. Deprecated: Use `capabilities/canCopy` instead.

        :return: The copyable of this File.
        :rtype: bool
        """
        return self._copyable

    @copyable.setter
    def copyable(self, copyable):
        """Sets the copyable of this File.

        Output only. Deprecated: Use `capabilities/canCopy` instead.

        :param copyable: The copyable of this File.
        :type copyable: bool
        """

        self._copyable = copyable

    @property
    def created_date(self):
        """Gets the created_date of this File.

        Create time for this file (formatted RFC 3339 timestamp).

        :return: The created_date of this File.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this File.

        Create time for this file (formatted RFC 3339 timestamp).

        :param created_date: The created_date of this File.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def default_open_with_link(self):
        """Gets the default_open_with_link of this File.

        Output only. A link to open this file with the user's default app for this file. Only populated when the drive.apps.readonly scope is used.

        :return: The default_open_with_link of this File.
        :rtype: str
        """
        return self._default_open_with_link

    @default_open_with_link.setter
    def default_open_with_link(self, default_open_with_link):
        """Sets the default_open_with_link of this File.

        Output only. A link to open this file with the user's default app for this file. Only populated when the drive.apps.readonly scope is used.

        :param default_open_with_link: The default_open_with_link of this File.
        :type default_open_with_link: str
        """

        self._default_open_with_link = default_open_with_link

    @property
    def description(self):
        """Gets the description of this File.

        A short description of the file.

        :return: The description of this File.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        A short description of the file.

        :param description: The description of this File.
        :type description: str
        """

        self._description = description

    @property
    def download_url(self):
        """Gets the download_url of this File.

        Output only. Short lived download URL for the file. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.

        :return: The download_url of this File.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this File.

        Output only. Short lived download URL for the file. This field is only populated for files with content stored in Google Drive; it is not populated for Google Docs or shortcut files.

        :param download_url: The download_url of this File.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def drive_id(self):
        """Gets the drive_id of this File.

        Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.

        :return: The drive_id of this File.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this File.

        Output only. ID of the shared drive the file resides in. Only populated for items in shared drives.

        :param drive_id: The drive_id of this File.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def editable(self):
        """Gets the editable of this File.

        Output only. Deprecated: Use `capabilities/canEdit` instead.

        :return: The editable of this File.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this File.

        Output only. Deprecated: Use `capabilities/canEdit` instead.

        :param editable: The editable of this File.
        :type editable: bool
        """

        self._editable = editable

    @property
    def embed_link(self):
        """Gets the embed_link of this File.

        Output only. A link for embedding the file.

        :return: The embed_link of this File.
        :rtype: str
        """
        return self._embed_link

    @embed_link.setter
    def embed_link(self, embed_link):
        """Sets the embed_link of this File.

        Output only. A link for embedding the file.

        :param embed_link: The embed_link of this File.
        :type embed_link: str
        """

        self._embed_link = embed_link

    @property
    def etag(self):
        """Gets the etag of this File.

        Output only. ETag of the file.

        :return: The etag of this File.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this File.

        Output only. ETag of the file.

        :param etag: The etag of this File.
        :type etag: str
        """

        self._etag = etag

    @property
    def explicitly_trashed(self):
        """Gets the explicitly_trashed of this File.

        Output only. Whether this file has been explicitly trashed, as opposed to recursively trashed.

        :return: The explicitly_trashed of this File.
        :rtype: bool
        """
        return self._explicitly_trashed

    @explicitly_trashed.setter
    def explicitly_trashed(self, explicitly_trashed):
        """Sets the explicitly_trashed of this File.

        Output only. Whether this file has been explicitly trashed, as opposed to recursively trashed.

        :param explicitly_trashed: The explicitly_trashed of this File.
        :type explicitly_trashed: bool
        """

        self._explicitly_trashed = explicitly_trashed

    @property
    def export_links(self):
        """Gets the export_links of this File.

        Output only. Links for exporting Docs Editors files to specific formats.

        :return: The export_links of this File.
        :rtype: Dict[str, str]
        """
        return self._export_links

    @export_links.setter
    def export_links(self, export_links):
        """Sets the export_links of this File.

        Output only. Links for exporting Docs Editors files to specific formats.

        :param export_links: The export_links of this File.
        :type export_links: Dict[str, str]
        """

        self._export_links = export_links

    @property
    def file_extension(self):
        """Gets the file_extension of this File.

        Output only. The final component of `fullFileExtension` with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The file_extension of this File.
        :rtype: str
        """
        return self._file_extension

    @file_extension.setter
    def file_extension(self, file_extension):
        """Sets the file_extension of this File.

        Output only. The final component of `fullFileExtension` with trailing text that does not appear to be part of the extension removed. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param file_extension: The file_extension of this File.
        :type file_extension: str
        """

        self._file_extension = file_extension

    @property
    def file_size(self):
        """Gets the file_size of this File.

        Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.

        :return: The file_size of this File.
        :rtype: str
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this File.

        Output only. Size in bytes of blobs and first party editor files. Won't be populated for files that have no size, like shortcuts and folders.

        :param file_size: The file_size of this File.
        :type file_size: str
        """

        self._file_size = file_size

    @property
    def folder_color_rgb(self):
        """Gets the folder_color_rgb of this File.

        Folder color as an RGB hex string if the file is a folder or a shortcut to a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette.

        :return: The folder_color_rgb of this File.
        :rtype: str
        """
        return self._folder_color_rgb

    @folder_color_rgb.setter
    def folder_color_rgb(self, folder_color_rgb):
        """Sets the folder_color_rgb of this File.

        Folder color as an RGB hex string if the file is a folder or a shortcut to a folder. The list of supported colors is available in the folderColorPalette field of the About resource. If an unsupported color is specified, it will be changed to the closest color in the palette.

        :param folder_color_rgb: The folder_color_rgb of this File.
        :type folder_color_rgb: str
        """

        self._folder_color_rgb = folder_color_rgb

    @property
    def full_file_extension(self):
        """Gets the full_file_extension of this File.

        Output only. The full file extension; extracted from the title. May contain multiple concatenated extensions, such as \"tar.gz\". Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The full_file_extension of this File.
        :rtype: str
        """
        return self._full_file_extension

    @full_file_extension.setter
    def full_file_extension(self, full_file_extension):
        """Sets the full_file_extension of this File.

        Output only. The full file extension; extracted from the title. May contain multiple concatenated extensions, such as \"tar.gz\". Removing an extension from the title does not clear this field; however, changing the extension on the title does update this field. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param full_file_extension: The full_file_extension of this File.
        :type full_file_extension: str
        """

        self._full_file_extension = full_file_extension

    @property
    def has_augmented_permissions(self):
        """Gets the has_augmented_permissions of this File.

        Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.

        :return: The has_augmented_permissions of this File.
        :rtype: bool
        """
        return self._has_augmented_permissions

    @has_augmented_permissions.setter
    def has_augmented_permissions(self, has_augmented_permissions):
        """Sets the has_augmented_permissions of this File.

        Output only. Whether there are permissions directly on this file. This field is only populated for items in shared drives.

        :param has_augmented_permissions: The has_augmented_permissions of this File.
        :type has_augmented_permissions: bool
        """

        self._has_augmented_permissions = has_augmented_permissions

    @property
    def has_thumbnail(self):
        """Gets the has_thumbnail of this File.

        Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.

        :return: The has_thumbnail of this File.
        :rtype: bool
        """
        return self._has_thumbnail

    @has_thumbnail.setter
    def has_thumbnail(self, has_thumbnail):
        """Sets the has_thumbnail of this File.

        Output only. Whether this file has a thumbnail. This does not indicate whether the requesting app has access to the thumbnail. To check access, look for the presence of the thumbnailLink field.

        :param has_thumbnail: The has_thumbnail of this File.
        :type has_thumbnail: bool
        """

        self._has_thumbnail = has_thumbnail

    @property
    def head_revision_id(self):
        """Gets the head_revision_id of this File.

        Output only. The ID of the file's head revision. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The head_revision_id of this File.
        :rtype: str
        """
        return self._head_revision_id

    @head_revision_id.setter
    def head_revision_id(self, head_revision_id):
        """Sets the head_revision_id of this File.

        Output only. The ID of the file's head revision. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param head_revision_id: The head_revision_id of this File.
        :type head_revision_id: str
        """

        self._head_revision_id = head_revision_id

    @property
    def icon_link(self):
        """Gets the icon_link of this File.

        Output only. A link to the file's icon.

        :return: The icon_link of this File.
        :rtype: str
        """
        return self._icon_link

    @icon_link.setter
    def icon_link(self, icon_link):
        """Sets the icon_link of this File.

        Output only. A link to the file's icon.

        :param icon_link: The icon_link of this File.
        :type icon_link: str
        """

        self._icon_link = icon_link

    @property
    def id(self):
        """Gets the id of this File.

        The ID of the file.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The ID of the file.

        :param id: The id of this File.
        :type id: str
        """

        self._id = id

    @property
    def image_media_metadata(self):
        """Gets the image_media_metadata of this File.


        :return: The image_media_metadata of this File.
        :rtype: FileImageMediaMetadata
        """
        return self._image_media_metadata

    @image_media_metadata.setter
    def image_media_metadata(self, image_media_metadata):
        """Sets the image_media_metadata of this File.


        :param image_media_metadata: The image_media_metadata of this File.
        :type image_media_metadata: FileImageMediaMetadata
        """

        self._image_media_metadata = image_media_metadata

    @property
    def indexable_text(self):
        """Gets the indexable_text of this File.


        :return: The indexable_text of this File.
        :rtype: FileIndexableText
        """
        return self._indexable_text

    @indexable_text.setter
    def indexable_text(self, indexable_text):
        """Sets the indexable_text of this File.


        :param indexable_text: The indexable_text of this File.
        :type indexable_text: FileIndexableText
        """

        self._indexable_text = indexable_text

    @property
    def is_app_authorized(self):
        """Gets the is_app_authorized of this File.

        Output only. Whether the file was created or opened by the requesting app.

        :return: The is_app_authorized of this File.
        :rtype: bool
        """
        return self._is_app_authorized

    @is_app_authorized.setter
    def is_app_authorized(self, is_app_authorized):
        """Sets the is_app_authorized of this File.

        Output only. Whether the file was created or opened by the requesting app.

        :param is_app_authorized: The is_app_authorized of this File.
        :type is_app_authorized: bool
        """

        self._is_app_authorized = is_app_authorized

    @property
    def kind(self):
        """Gets the kind of this File.

        Output only. The type of file. This is always `drive#file`.

        :return: The kind of this File.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this File.

        Output only. The type of file. This is always `drive#file`.

        :param kind: The kind of this File.
        :type kind: str
        """

        self._kind = kind

    @property
    def label_info(self):
        """Gets the label_info of this File.


        :return: The label_info of this File.
        :rtype: FileLabelInfo
        """
        return self._label_info

    @label_info.setter
    def label_info(self, label_info):
        """Sets the label_info of this File.


        :param label_info: The label_info of this File.
        :type label_info: FileLabelInfo
        """

        self._label_info = label_info

    @property
    def labels(self):
        """Gets the labels of this File.


        :return: The labels of this File.
        :rtype: FileLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this File.


        :param labels: The labels of this File.
        :type labels: FileLabels
        """

        self._labels = labels

    @property
    def last_modifying_user(self):
        """Gets the last_modifying_user of this File.


        :return: The last_modifying_user of this File.
        :rtype: User
        """
        return self._last_modifying_user

    @last_modifying_user.setter
    def last_modifying_user(self, last_modifying_user):
        """Sets the last_modifying_user of this File.


        :param last_modifying_user: The last_modifying_user of this File.
        :type last_modifying_user: User
        """

        self._last_modifying_user = last_modifying_user

    @property
    def last_modifying_user_name(self):
        """Gets the last_modifying_user_name of this File.

        Output only. Name of the last user to modify this file.

        :return: The last_modifying_user_name of this File.
        :rtype: str
        """
        return self._last_modifying_user_name

    @last_modifying_user_name.setter
    def last_modifying_user_name(self, last_modifying_user_name):
        """Sets the last_modifying_user_name of this File.

        Output only. Name of the last user to modify this file.

        :param last_modifying_user_name: The last_modifying_user_name of this File.
        :type last_modifying_user_name: str
        """

        self._last_modifying_user_name = last_modifying_user_name

    @property
    def last_viewed_by_me_date(self):
        """Gets the last_viewed_by_me_date of this File.

        Last time this file was viewed by the user (formatted RFC 3339 timestamp).

        :return: The last_viewed_by_me_date of this File.
        :rtype: datetime
        """
        return self._last_viewed_by_me_date

    @last_viewed_by_me_date.setter
    def last_viewed_by_me_date(self, last_viewed_by_me_date):
        """Sets the last_viewed_by_me_date of this File.

        Last time this file was viewed by the user (formatted RFC 3339 timestamp).

        :param last_viewed_by_me_date: The last_viewed_by_me_date of this File.
        :type last_viewed_by_me_date: datetime
        """

        self._last_viewed_by_me_date = last_viewed_by_me_date

    @property
    def link_share_metadata(self):
        """Gets the link_share_metadata of this File.


        :return: The link_share_metadata of this File.
        :rtype: FileLinkShareMetadata
        """
        return self._link_share_metadata

    @link_share_metadata.setter
    def link_share_metadata(self, link_share_metadata):
        """Sets the link_share_metadata of this File.


        :param link_share_metadata: The link_share_metadata of this File.
        :type link_share_metadata: FileLinkShareMetadata
        """

        self._link_share_metadata = link_share_metadata

    @property
    def marked_viewed_by_me_date(self):
        """Gets the marked_viewed_by_me_date of this File.

        Deprecated.

        :return: The marked_viewed_by_me_date of this File.
        :rtype: datetime
        """
        return self._marked_viewed_by_me_date

    @marked_viewed_by_me_date.setter
    def marked_viewed_by_me_date(self, marked_viewed_by_me_date):
        """Sets the marked_viewed_by_me_date of this File.

        Deprecated.

        :param marked_viewed_by_me_date: The marked_viewed_by_me_date of this File.
        :type marked_viewed_by_me_date: datetime
        """

        self._marked_viewed_by_me_date = marked_viewed_by_me_date

    @property
    def md5_checksum(self):
        """Gets the md5_checksum of this File.

        Output only. An MD5 checksum for the content of this file. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The md5_checksum of this File.
        :rtype: str
        """
        return self._md5_checksum

    @md5_checksum.setter
    def md5_checksum(self, md5_checksum):
        """Sets the md5_checksum of this File.

        Output only. An MD5 checksum for the content of this file. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param md5_checksum: The md5_checksum of this File.
        :type md5_checksum: str
        """

        self._md5_checksum = md5_checksum

    @property
    def mime_type(self):
        """Gets the mime_type of this File.

        The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content's MIME type.

        :return: The mime_type of this File.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this File.

        The MIME type of the file. This is only mutable on update when uploading new content. This field can be left blank, and the mimetype will be determined from the uploaded content's MIME type.

        :param mime_type: The mime_type of this File.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def modified_by_me_date(self):
        """Gets the modified_by_me_date of this File.

        Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.

        :return: The modified_by_me_date of this File.
        :rtype: datetime
        """
        return self._modified_by_me_date

    @modified_by_me_date.setter
    def modified_by_me_date(self, modified_by_me_date):
        """Sets the modified_by_me_date of this File.

        Last time this file was modified by the user (formatted RFC 3339 timestamp). Note that setting modifiedDate will also update the modifiedByMe date for the user which set the date.

        :param modified_by_me_date: The modified_by_me_date of this File.
        :type modified_by_me_date: datetime
        """

        self._modified_by_me_date = modified_by_me_date

    @property
    def modified_date(self):
        """Gets the modified_date of this File.

        Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.

        :return: The modified_date of this File.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this File.

        Last time this file was modified by anyone (formatted RFC 3339 timestamp). This is only mutable on update when the setModifiedDate parameter is set.

        :param modified_date: The modified_date of this File.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def open_with_links(self):
        """Gets the open_with_links of this File.

        Output only. A map of the id of each of the user's apps to a link to open this file with that app. Only populated when the drive.apps.readonly scope is used.

        :return: The open_with_links of this File.
        :rtype: Dict[str, str]
        """
        return self._open_with_links

    @open_with_links.setter
    def open_with_links(self, open_with_links):
        """Sets the open_with_links of this File.

        Output only. A map of the id of each of the user's apps to a link to open this file with that app. Only populated when the drive.apps.readonly scope is used.

        :param open_with_links: The open_with_links of this File.
        :type open_with_links: Dict[str, str]
        """

        self._open_with_links = open_with_links

    @property
    def original_filename(self):
        """Gets the original_filename of this File.

        The original filename of the uploaded content if available, or else the original value of the `title` field. This is only available for files with binary content in Google Drive.

        :return: The original_filename of this File.
        :rtype: str
        """
        return self._original_filename

    @original_filename.setter
    def original_filename(self, original_filename):
        """Sets the original_filename of this File.

        The original filename of the uploaded content if available, or else the original value of the `title` field. This is only available for files with binary content in Google Drive.

        :param original_filename: The original_filename of this File.
        :type original_filename: str
        """

        self._original_filename = original_filename

    @property
    def owned_by_me(self):
        """Gets the owned_by_me of this File.

        Output only. Whether the file is owned by the current user. Not populated for items in shared drives.

        :return: The owned_by_me of this File.
        :rtype: bool
        """
        return self._owned_by_me

    @owned_by_me.setter
    def owned_by_me(self, owned_by_me):
        """Sets the owned_by_me of this File.

        Output only. Whether the file is owned by the current user. Not populated for items in shared drives.

        :param owned_by_me: The owned_by_me of this File.
        :type owned_by_me: bool
        """

        self._owned_by_me = owned_by_me

    @property
    def owner_names(self):
        """Gets the owner_names of this File.

        Output only. Name(s) of the owner(s) of this file. Not populated for items in shared drives.

        :return: The owner_names of this File.
        :rtype: List[str]
        """
        return self._owner_names

    @owner_names.setter
    def owner_names(self, owner_names):
        """Sets the owner_names of this File.

        Output only. Name(s) of the owner(s) of this file. Not populated for items in shared drives.

        :param owner_names: The owner_names of this File.
        :type owner_names: List[str]
        """

        self._owner_names = owner_names

    @property
    def owners(self):
        """Gets the owners of this File.

        Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.

        :return: The owners of this File.
        :rtype: List[User]
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this File.

        Output only. The owner of this file. Only certain legacy files may have more than one owner. This field isn't populated for items in shared drives.

        :param owners: The owners of this File.
        :type owners: List[User]
        """

        self._owners = owners

    @property
    def parents(self):
        """Gets the parents of this File.

        Collection of parent folders which contain this file. If not specified as part of an insert request, the file will be placed directly in the user's My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests can also use the `addParents` and `removeParents` parameters to modify the parents list.

        :return: The parents of this File.
        :rtype: List[ParentReference]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this File.

        Collection of parent folders which contain this file. If not specified as part of an insert request, the file will be placed directly in the user's My Drive folder. If not specified as part of a copy request, the file will inherit any discoverable parents of the source file. Update requests can also use the `addParents` and `removeParents` parameters to modify the parents list.

        :param parents: The parents of this File.
        :type parents: List[ParentReference]
        """

        self._parents = parents

    @property
    def permission_ids(self):
        """Gets the permission_ids of this File.

        Output only. List of permission IDs for users with access to this file.

        :return: The permission_ids of this File.
        :rtype: List[str]
        """
        return self._permission_ids

    @permission_ids.setter
    def permission_ids(self, permission_ids):
        """Sets the permission_ids of this File.

        Output only. List of permission IDs for users with access to this file.

        :param permission_ids: The permission_ids of this File.
        :type permission_ids: List[str]
        """

        self._permission_ids = permission_ids

    @property
    def permissions(self):
        """Gets the permissions of this File.

        Output only. The list of permissions for users with access to this file. Not populated for items in shared drives.

        :return: The permissions of this File.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this File.

        Output only. The list of permissions for users with access to this file. Not populated for items in shared drives.

        :param permissions: The permissions of this File.
        :type permissions: List[Permission]
        """

        self._permissions = permissions

    @property
    def properties(self):
        """Gets the properties of this File.

        The list of properties.

        :return: The properties of this File.
        :rtype: List[ModelProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this File.

        The list of properties.

        :param properties: The properties of this File.
        :type properties: List[ModelProperty]
        """

        self._properties = properties

    @property
    def quota_bytes_used(self):
        """Gets the quota_bytes_used of this File.

        Output only. The number of quota bytes used by this file.

        :return: The quota_bytes_used of this File.
        :rtype: str
        """
        return self._quota_bytes_used

    @quota_bytes_used.setter
    def quota_bytes_used(self, quota_bytes_used):
        """Sets the quota_bytes_used of this File.

        Output only. The number of quota bytes used by this file.

        :param quota_bytes_used: The quota_bytes_used of this File.
        :type quota_bytes_used: str
        """

        self._quota_bytes_used = quota_bytes_used

    @property
    def resource_key(self):
        """Gets the resource_key of this File.

        Output only. A key needed to access the item via a shared link.

        :return: The resource_key of this File.
        :rtype: str
        """
        return self._resource_key

    @resource_key.setter
    def resource_key(self, resource_key):
        """Sets the resource_key of this File.

        Output only. A key needed to access the item via a shared link.

        :param resource_key: The resource_key of this File.
        :type resource_key: str
        """

        self._resource_key = resource_key

    @property
    def self_link(self):
        """Gets the self_link of this File.

        Output only. A link back to this file.

        :return: The self_link of this File.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this File.

        Output only. A link back to this file.

        :param self_link: The self_link of this File.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def sha1_checksum(self):
        """Gets the sha1_checksum of this File.

        Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The sha1_checksum of this File.
        :rtype: str
        """
        return self._sha1_checksum

    @sha1_checksum.setter
    def sha1_checksum(self, sha1_checksum):
        """Sets the sha1_checksum of this File.

        Output only. The SHA1 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param sha1_checksum: The sha1_checksum of this File.
        :type sha1_checksum: str
        """

        self._sha1_checksum = sha1_checksum

    @property
    def sha256_checksum(self):
        """Gets the sha256_checksum of this File.

        Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :return: The sha256_checksum of this File.
        :rtype: str
        """
        return self._sha256_checksum

    @sha256_checksum.setter
    def sha256_checksum(self, sha256_checksum):
        """Sets the sha256_checksum of this File.

        Output only. The SHA256 checksum associated with this file, if available. This field is only populated for files with content stored in Google Drive; it is not populated for Docs Editors or shortcut files.

        :param sha256_checksum: The sha256_checksum of this File.
        :type sha256_checksum: str
        """

        self._sha256_checksum = sha256_checksum

    @property
    def shareable(self):
        """Gets the shareable of this File.

        Output only. Deprecated: Use `capabilities/canShare` instead.

        :return: The shareable of this File.
        :rtype: bool
        """
        return self._shareable

    @shareable.setter
    def shareable(self, shareable):
        """Sets the shareable of this File.

        Output only. Deprecated: Use `capabilities/canShare` instead.

        :param shareable: The shareable of this File.
        :type shareable: bool
        """

        self._shareable = shareable

    @property
    def shared(self):
        """Gets the shared of this File.

        Output only. Whether the file has been shared. Not populated for items in shared drives.

        :return: The shared of this File.
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this File.

        Output only. Whether the file has been shared. Not populated for items in shared drives.

        :param shared: The shared of this File.
        :type shared: bool
        """

        self._shared = shared

    @property
    def shared_with_me_date(self):
        """Gets the shared_with_me_date of this File.

        Time at which this file was shared with the user (formatted RFC 3339 timestamp).

        :return: The shared_with_me_date of this File.
        :rtype: datetime
        """
        return self._shared_with_me_date

    @shared_with_me_date.setter
    def shared_with_me_date(self, shared_with_me_date):
        """Sets the shared_with_me_date of this File.

        Time at which this file was shared with the user (formatted RFC 3339 timestamp).

        :param shared_with_me_date: The shared_with_me_date of this File.
        :type shared_with_me_date: datetime
        """

        self._shared_with_me_date = shared_with_me_date

    @property
    def sharing_user(self):
        """Gets the sharing_user of this File.


        :return: The sharing_user of this File.
        :rtype: User
        """
        return self._sharing_user

    @sharing_user.setter
    def sharing_user(self, sharing_user):
        """Sets the sharing_user of this File.


        :param sharing_user: The sharing_user of this File.
        :type sharing_user: User
        """

        self._sharing_user = sharing_user

    @property
    def shortcut_details(self):
        """Gets the shortcut_details of this File.


        :return: The shortcut_details of this File.
        :rtype: FileShortcutDetails
        """
        return self._shortcut_details

    @shortcut_details.setter
    def shortcut_details(self, shortcut_details):
        """Sets the shortcut_details of this File.


        :param shortcut_details: The shortcut_details of this File.
        :type shortcut_details: FileShortcutDetails
        """

        self._shortcut_details = shortcut_details

    @property
    def spaces(self):
        """Gets the spaces of this File.

        Output only. The list of spaces which contain the file. Supported values are `drive`, `appDataFolder` and `photos`.

        :return: The spaces of this File.
        :rtype: List[str]
        """
        return self._spaces

    @spaces.setter
    def spaces(self, spaces):
        """Sets the spaces of this File.

        Output only. The list of spaces which contain the file. Supported values are `drive`, `appDataFolder` and `photos`.

        :param spaces: The spaces of this File.
        :type spaces: List[str]
        """

        self._spaces = spaces

    @property
    def team_drive_id(self):
        """Gets the team_drive_id of this File.

        Output only. Deprecated: Use `driveId` instead.

        :return: The team_drive_id of this File.
        :rtype: str
        """
        return self._team_drive_id

    @team_drive_id.setter
    def team_drive_id(self, team_drive_id):
        """Sets the team_drive_id of this File.

        Output only. Deprecated: Use `driveId` instead.

        :param team_drive_id: The team_drive_id of this File.
        :type team_drive_id: str
        """

        self._team_drive_id = team_drive_id

    @property
    def thumbnail(self):
        """Gets the thumbnail of this File.


        :return: The thumbnail of this File.
        :rtype: FileThumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this File.


        :param thumbnail: The thumbnail of this File.
        :type thumbnail: FileThumbnail
        """

        self._thumbnail = thumbnail

    @property
    def thumbnail_link(self):
        """Gets the thumbnail_link of this File.

        Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.

        :return: The thumbnail_link of this File.
        :rtype: str
        """
        return self._thumbnail_link

    @thumbnail_link.setter
    def thumbnail_link(self, thumbnail_link):
        """Sets the thumbnail_link of this File.

        Output only. A short-lived link to the file's thumbnail, if available. Typically lasts on the order of hours. Only populated when the requesting app can access the file's content. If the file isn't shared publicly, the URL returned in `Files.thumbnailLink` must be fetched using a credentialed request.

        :param thumbnail_link: The thumbnail_link of this File.
        :type thumbnail_link: str
        """

        self._thumbnail_link = thumbnail_link

    @property
    def thumbnail_version(self):
        """Gets the thumbnail_version of this File.

        Output only. The thumbnail version for use in thumbnail cache invalidation.

        :return: The thumbnail_version of this File.
        :rtype: str
        """
        return self._thumbnail_version

    @thumbnail_version.setter
    def thumbnail_version(self, thumbnail_version):
        """Sets the thumbnail_version of this File.

        Output only. The thumbnail version for use in thumbnail cache invalidation.

        :param thumbnail_version: The thumbnail_version of this File.
        :type thumbnail_version: str
        """

        self._thumbnail_version = thumbnail_version

    @property
    def title(self):
        """Gets the title of this File.

        The title of this file. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the title is constant.

        :return: The title of this File.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this File.

        The title of this file. Note that for immutable items such as the top level folders of shared drives, My Drive root folder, and Application Data folder the title is constant.

        :param title: The title of this File.
        :type title: str
        """

        self._title = title

    @property
    def trashed_date(self):
        """Gets the trashed_date of this File.

        The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for items in shared drives.

        :return: The trashed_date of this File.
        :rtype: datetime
        """
        return self._trashed_date

    @trashed_date.setter
    def trashed_date(self, trashed_date):
        """Sets the trashed_date of this File.

        The time that the item was trashed (formatted RFC 3339 timestamp). Only populated for items in shared drives.

        :param trashed_date: The trashed_date of this File.
        :type trashed_date: datetime
        """

        self._trashed_date = trashed_date

    @property
    def trashing_user(self):
        """Gets the trashing_user of this File.


        :return: The trashing_user of this File.
        :rtype: User
        """
        return self._trashing_user

    @trashing_user.setter
    def trashing_user(self, trashing_user):
        """Sets the trashing_user of this File.


        :param trashing_user: The trashing_user of this File.
        :type trashing_user: User
        """

        self._trashing_user = trashing_user

    @property
    def user_permission(self):
        """Gets the user_permission of this File.


        :return: The user_permission of this File.
        :rtype: Permission
        """
        return self._user_permission

    @user_permission.setter
    def user_permission(self, user_permission):
        """Sets the user_permission of this File.


        :param user_permission: The user_permission of this File.
        :type user_permission: Permission
        """

        self._user_permission = user_permission

    @property
    def version(self):
        """Gets the version of this File.

        Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.

        :return: The version of this File.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this File.

        Output only. A monotonically increasing version number for the file. This reflects every change made to the file on the server, even those not visible to the requesting user.

        :param version: The version of this File.
        :type version: str
        """

        self._version = version

    @property
    def video_media_metadata(self):
        """Gets the video_media_metadata of this File.


        :return: The video_media_metadata of this File.
        :rtype: FileVideoMediaMetadata
        """
        return self._video_media_metadata

    @video_media_metadata.setter
    def video_media_metadata(self, video_media_metadata):
        """Sets the video_media_metadata of this File.


        :param video_media_metadata: The video_media_metadata of this File.
        :type video_media_metadata: FileVideoMediaMetadata
        """

        self._video_media_metadata = video_media_metadata

    @property
    def web_content_link(self):
        """Gets the web_content_link of this File.

        Output only. A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.

        :return: The web_content_link of this File.
        :rtype: str
        """
        return self._web_content_link

    @web_content_link.setter
    def web_content_link(self, web_content_link):
        """Sets the web_content_link of this File.

        Output only. A link for downloading the content of the file in a browser using cookie based authentication. In cases where the content is shared publicly, the content can be downloaded without any credentials.

        :param web_content_link: The web_content_link of this File.
        :type web_content_link: str
        """

        self._web_content_link = web_content_link

    @property
    def web_view_link(self):
        """Gets the web_view_link of this File.

        Output only. A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive's Website Hosting.

        :return: The web_view_link of this File.
        :rtype: str
        """
        return self._web_view_link

    @web_view_link.setter
    def web_view_link(self, web_view_link):
        """Sets the web_view_link of this File.

        Output only. A link only available on public folders for viewing their static web assets (HTML, CSS, JS, etc) via Google Drive's Website Hosting.

        :param web_view_link: The web_view_link of this File.
        :type web_view_link: str
        """

        self._web_view_link = web_view_link

    @property
    def writers_can_share(self):
        """Gets the writers_can_share of this File.

        Whether writers can share the document with other users. Not populated for items in shared drives.

        :return: The writers_can_share of this File.
        :rtype: bool
        """
        return self._writers_can_share

    @writers_can_share.setter
    def writers_can_share(self, writers_can_share):
        """Sets the writers_can_share of this File.

        Whether writers can share the document with other users. Not populated for items in shared drives.

        :param writers_can_share: The writers_can_share of this File.
        :type writers_can_share: bool
        """

        self._writers_can_share = writers_can_share
