# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_picture import UserPicture
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email_address: str=None, is_authenticated_user: bool=None, kind: str='drive#user', permission_id: str=None, picture: UserPicture=None):
        """User - a model defined in OpenAPI

        :param display_name: The display_name of this User.
        :param email_address: The email_address of this User.
        :param is_authenticated_user: The is_authenticated_user of this User.
        :param kind: The kind of this User.
        :param permission_id: The permission_id of this User.
        :param picture: The picture of this User.
        """
        self.openapi_types = {
            'display_name': str,
            'email_address': str,
            'is_authenticated_user': bool,
            'kind': str,
            'permission_id': str,
            'picture': UserPicture
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email_address': 'emailAddress',
            'is_authenticated_user': 'isAuthenticatedUser',
            'kind': 'kind',
            'permission_id': 'permissionId',
            'picture': 'picture'
        }

        self._display_name = display_name
        self._email_address = email_address
        self._is_authenticated_user = is_authenticated_user
        self._kind = kind
        self._permission_id = permission_id
        self._picture = picture

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this User.

        Output only. A plain text displayable name for this user.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        Output only. A plain text displayable name for this user.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this User.

        Output only. The email address of the user.

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        Output only. The email address of the user.

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def is_authenticated_user(self):
        """Gets the is_authenticated_user of this User.

        Output only. Whether this user is the same as the authenticated user for whom the request was made.

        :return: The is_authenticated_user of this User.
        :rtype: bool
        """
        return self._is_authenticated_user

    @is_authenticated_user.setter
    def is_authenticated_user(self, is_authenticated_user):
        """Sets the is_authenticated_user of this User.

        Output only. Whether this user is the same as the authenticated user for whom the request was made.

        :param is_authenticated_user: The is_authenticated_user of this User.
        :type is_authenticated_user: bool
        """

        self._is_authenticated_user = is_authenticated_user

    @property
    def kind(self):
        """Gets the kind of this User.

        Output only. This is always `drive#user`.

        :return: The kind of this User.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this User.

        Output only. This is always `drive#user`.

        :param kind: The kind of this User.
        :type kind: str
        """

        self._kind = kind

    @property
    def permission_id(self):
        """Gets the permission_id of this User.

        Output only. The user's ID as visible in the permissions collection.

        :return: The permission_id of this User.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this User.

        Output only. The user's ID as visible in the permissions collection.

        :param permission_id: The permission_id of this User.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def picture(self):
        """Gets the picture of this User.


        :return: The picture of this User.
        :rtype: UserPicture
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this User.


        :param picture: The picture of this User.
        :type picture: UserPicture
        """

        self._picture = picture
