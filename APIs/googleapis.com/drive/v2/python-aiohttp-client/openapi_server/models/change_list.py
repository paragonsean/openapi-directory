# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change import Change
from openapi_server import util


class ChangeList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, items: List[Change]=None, kind: str='drive#changeList', largest_change_id: str=None, new_start_page_token: str=None, next_link: str=None, next_page_token: str=None, self_link: str=None):
        """ChangeList - a model defined in OpenAPI

        :param etag: The etag of this ChangeList.
        :param items: The items of this ChangeList.
        :param kind: The kind of this ChangeList.
        :param largest_change_id: The largest_change_id of this ChangeList.
        :param new_start_page_token: The new_start_page_token of this ChangeList.
        :param next_link: The next_link of this ChangeList.
        :param next_page_token: The next_page_token of this ChangeList.
        :param self_link: The self_link of this ChangeList.
        """
        self.openapi_types = {
            'etag': str,
            'items': List[Change],
            'kind': str,
            'largest_change_id': str,
            'new_start_page_token': str,
            'next_link': str,
            'next_page_token': str,
            'self_link': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'items': 'items',
            'kind': 'kind',
            'largest_change_id': 'largestChangeId',
            'new_start_page_token': 'newStartPageToken',
            'next_link': 'nextLink',
            'next_page_token': 'nextPageToken',
            'self_link': 'selfLink'
        }

        self._etag = etag
        self._items = items
        self._kind = kind
        self._largest_change_id = largest_change_id
        self._new_start_page_token = new_start_page_token
        self._next_link = next_link
        self._next_page_token = next_page_token
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChangeList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChangeList of this ChangeList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this ChangeList.

        The ETag of the list.

        :return: The etag of this ChangeList.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ChangeList.

        The ETag of the list.

        :param etag: The etag of this ChangeList.
        :type etag: str
        """

        self._etag = etag

    @property
    def items(self):
        """Gets the items of this ChangeList.

        The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The items of this ChangeList.
        :rtype: List[Change]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ChangeList.

        The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param items: The items of this ChangeList.
        :type items: List[Change]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this ChangeList.

        This is always `drive#changeList`.

        :return: The kind of this ChangeList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChangeList.

        This is always `drive#changeList`.

        :param kind: The kind of this ChangeList.
        :type kind: str
        """

        self._kind = kind

    @property
    def largest_change_id(self):
        """Gets the largest_change_id of this ChangeList.

        The current largest change ID.

        :return: The largest_change_id of this ChangeList.
        :rtype: str
        """
        return self._largest_change_id

    @largest_change_id.setter
    def largest_change_id(self, largest_change_id):
        """Sets the largest_change_id of this ChangeList.

        The current largest change ID.

        :param largest_change_id: The largest_change_id of this ChangeList.
        :type largest_change_id: str
        """

        self._largest_change_id = largest_change_id

    @property
    def new_start_page_token(self):
        """Gets the new_start_page_token of this ChangeList.

        The starting page token for future changes. This will be present only if the end of the current changes list has been reached.

        :return: The new_start_page_token of this ChangeList.
        :rtype: str
        """
        return self._new_start_page_token

    @new_start_page_token.setter
    def new_start_page_token(self, new_start_page_token):
        """Sets the new_start_page_token of this ChangeList.

        The starting page token for future changes. This will be present only if the end of the current changes list has been reached.

        :param new_start_page_token: The new_start_page_token of this ChangeList.
        :type new_start_page_token: str
        """

        self._new_start_page_token = new_start_page_token

    @property
    def next_link(self):
        """Gets the next_link of this ChangeList.

        A link to the next page of changes.

        :return: The next_link of this ChangeList.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this ChangeList.

        A link to the next page of changes.

        :param next_link: The next_link of this ChangeList.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ChangeList.

        The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :return: The next_page_token of this ChangeList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ChangeList.

        The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :param next_page_token: The next_page_token of this ChangeList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def self_link(self):
        """Gets the self_link of this ChangeList.

        A link back to this list.

        :return: The self_link of this ChangeList.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this ChangeList.

        A link back to this list.

        :param self_link: The self_link of this ChangeList.
        :type self_link: str
        """

        self._self_link = self_link
