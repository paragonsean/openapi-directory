# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission_permission_details_inner import PermissionPermissionDetailsInner
from openapi_server.models.permission_team_drive_permission_details_inner import PermissionTeamDrivePermissionDetailsInner
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_roles: List[str]=None, auth_key: str=None, deleted: bool=None, domain: str=None, email_address: str=None, etag: str=None, expiration_date: datetime=None, id: str=None, kind: str='drive#permission', name: str=None, pending_owner: bool=None, permission_details: List[PermissionPermissionDetailsInner]=None, photo_link: str=None, role: str=None, self_link: str=None, team_drive_permission_details: List[PermissionTeamDrivePermissionDetailsInner]=None, type: str=None, value: str=None, view: str=None, with_link: bool=None):
        """Permission - a model defined in OpenAPI

        :param additional_roles: The additional_roles of this Permission.
        :param auth_key: The auth_key of this Permission.
        :param deleted: The deleted of this Permission.
        :param domain: The domain of this Permission.
        :param email_address: The email_address of this Permission.
        :param etag: The etag of this Permission.
        :param expiration_date: The expiration_date of this Permission.
        :param id: The id of this Permission.
        :param kind: The kind of this Permission.
        :param name: The name of this Permission.
        :param pending_owner: The pending_owner of this Permission.
        :param permission_details: The permission_details of this Permission.
        :param photo_link: The photo_link of this Permission.
        :param role: The role of this Permission.
        :param self_link: The self_link of this Permission.
        :param team_drive_permission_details: The team_drive_permission_details of this Permission.
        :param type: The type of this Permission.
        :param value: The value of this Permission.
        :param view: The view of this Permission.
        :param with_link: The with_link of this Permission.
        """
        self.openapi_types = {
            'additional_roles': List[str],
            'auth_key': str,
            'deleted': bool,
            'domain': str,
            'email_address': str,
            'etag': str,
            'expiration_date': datetime,
            'id': str,
            'kind': str,
            'name': str,
            'pending_owner': bool,
            'permission_details': List[PermissionPermissionDetailsInner],
            'photo_link': str,
            'role': str,
            'self_link': str,
            'team_drive_permission_details': List[PermissionTeamDrivePermissionDetailsInner],
            'type': str,
            'value': str,
            'view': str,
            'with_link': bool
        }

        self.attribute_map = {
            'additional_roles': 'additionalRoles',
            'auth_key': 'authKey',
            'deleted': 'deleted',
            'domain': 'domain',
            'email_address': 'emailAddress',
            'etag': 'etag',
            'expiration_date': 'expirationDate',
            'id': 'id',
            'kind': 'kind',
            'name': 'name',
            'pending_owner': 'pendingOwner',
            'permission_details': 'permissionDetails',
            'photo_link': 'photoLink',
            'role': 'role',
            'self_link': 'selfLink',
            'team_drive_permission_details': 'teamDrivePermissionDetails',
            'type': 'type',
            'value': 'value',
            'view': 'view',
            'with_link': 'withLink'
        }

        self._additional_roles = additional_roles
        self._auth_key = auth_key
        self._deleted = deleted
        self._domain = domain
        self._email_address = email_address
        self._etag = etag
        self._expiration_date = expiration_date
        self._id = id
        self._kind = kind
        self._name = name
        self._pending_owner = pending_owner
        self._permission_details = permission_details
        self._photo_link = photo_link
        self._role = role
        self._self_link = self_link
        self._team_drive_permission_details = team_drive_permission_details
        self._type = type
        self._value = value
        self._view = view
        self._with_link = with_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_roles(self):
        """Gets the additional_roles of this Permission.

        Additional roles for this user. Only `commenter` is currently allowed, though more may be supported in the future.

        :return: The additional_roles of this Permission.
        :rtype: List[str]
        """
        return self._additional_roles

    @additional_roles.setter
    def additional_roles(self, additional_roles):
        """Sets the additional_roles of this Permission.

        Additional roles for this user. Only `commenter` is currently allowed, though more may be supported in the future.

        :param additional_roles: The additional_roles of this Permission.
        :type additional_roles: List[str]
        """

        self._additional_roles = additional_roles

    @property
    def auth_key(self):
        """Gets the auth_key of this Permission.

        Output only. Deprecated.

        :return: The auth_key of this Permission.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this Permission.

        Output only. Deprecated.

        :param auth_key: The auth_key of this Permission.
        :type auth_key: str
        """

        self._auth_key = auth_key

    @property
    def deleted(self):
        """Gets the deleted of this Permission.

        Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.

        :return: The deleted of this Permission.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Permission.

        Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.

        :param deleted: The deleted of this Permission.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def domain(self):
        """Gets the domain of this Permission.

        Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is `user`, `group` or `domain`.

        :return: The domain of this Permission.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Permission.

        Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is `user`, `group` or `domain`.

        :param domain: The domain of this Permission.
        :type domain: str
        """

        self._domain = domain

    @property
    def email_address(self):
        """Gets the email_address of this Permission.

        Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is `user` or `group`.

        :return: The email_address of this Permission.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Permission.

        Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is `user` or `group`.

        :param email_address: The email_address of this Permission.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def etag(self):
        """Gets the etag of this Permission.

        Output only. The ETag of the permission.

        :return: The etag of this Permission.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Permission.

        Output only. The ETag of the permission.

        :param etag: The etag of this Permission.
        :type etag: str
        """

        self._etag = etag

    @property
    def expiration_date(self):
        """Gets the expiration_date of this Permission.

        The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests

        :return: The expiration_date of this Permission.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this Permission.

        The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests

        :param expiration_date: The expiration_date of this Permission.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this Permission.

        The ID of the user this permission refers to, and identical to the `permissionId` in the About and Files resources. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.

        :return: The id of this Permission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permission.

        The ID of the user this permission refers to, and identical to the `permissionId` in the About and Files resources. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.

        :param id: The id of this Permission.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Permission.

        Output only. This is always `drive#permission`.

        :return: The kind of this Permission.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Permission.

        Output only. This is always `drive#permission`.

        :param kind: The kind of this Permission.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Permission.

        Output only. The name for this permission.

        :return: The name of this Permission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission.

        Output only. The name for this permission.

        :param name: The name of this Permission.
        :type name: str
        """

        self._name = name

    @property
    def pending_owner(self):
        """Gets the pending_owner of this Permission.

        Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.

        :return: The pending_owner of this Permission.
        :rtype: bool
        """
        return self._pending_owner

    @pending_owner.setter
    def pending_owner(self, pending_owner):
        """Sets the pending_owner of this Permission.

        Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.

        :param pending_owner: The pending_owner of this Permission.
        :type pending_owner: bool
        """

        self._pending_owner = pending_owner

    @property
    def permission_details(self):
        """Gets the permission_details of this Permission.

        Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.

        :return: The permission_details of this Permission.
        :rtype: List[PermissionPermissionDetailsInner]
        """
        return self._permission_details

    @permission_details.setter
    def permission_details(self, permission_details):
        """Sets the permission_details of this Permission.

        Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.

        :param permission_details: The permission_details of this Permission.
        :type permission_details: List[PermissionPermissionDetailsInner]
        """

        self._permission_details = permission_details

    @property
    def photo_link(self):
        """Gets the photo_link of this Permission.

        Output only. A link to the profile photo, if available.

        :return: The photo_link of this Permission.
        :rtype: str
        """
        return self._photo_link

    @photo_link.setter
    def photo_link(self, photo_link):
        """Sets the photo_link of this Permission.

        Output only. A link to the profile photo, if available.

        :param photo_link: The photo_link of this Permission.
        :type photo_link: str
        """

        self._photo_link = photo_link

    @property
    def role(self):
        """Gets the role of this Permission.

        The primary role for this user. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `reader`

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        The primary role for this user. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `reader`

        :param role: The role of this Permission.
        :type role: str
        """

        self._role = role

    @property
    def self_link(self):
        """Gets the self_link of this Permission.

        Output only. A link back to this permission.

        :return: The self_link of this Permission.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Permission.

        Output only. A link back to this permission.

        :param self_link: The self_link of this Permission.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def team_drive_permission_details(self):
        """Gets the team_drive_permission_details of this Permission.

        Output only. Deprecated: Use `permissionDetails` instead.

        :return: The team_drive_permission_details of this Permission.
        :rtype: List[PermissionTeamDrivePermissionDetailsInner]
        """
        return self._team_drive_permission_details

    @team_drive_permission_details.setter
    def team_drive_permission_details(self, team_drive_permission_details):
        """Sets the team_drive_permission_details of this Permission.

        Output only. Deprecated: Use `permissionDetails` instead.

        :param team_drive_permission_details: The team_drive_permission_details of this Permission.
        :type team_drive_permission_details: List[PermissionTeamDrivePermissionDetailsInner]
        """

        self._team_drive_permission_details = team_drive_permission_details

    @property
    def type(self):
        """Gets the type of this Permission.

        The account type. Allowed values are: * `user` * `group` * `domain` * `anyone`

        :return: The type of this Permission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Permission.

        The account type. Allowed values are: * `user` * `group` * `domain` * `anyone`

        :param type: The type of this Permission.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Permission.

        The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.

        :return: The value of this Permission.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Permission.

        The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.

        :param value: The value of this Permission.
        :type value: str
        """

        self._value = value

    @property
    def view(self):
        """Gets the view of this Permission.

        Indicates the view for this permission. Only populated for permissions that belong to a view. `published` is the only supported value.

        :return: The view of this Permission.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this Permission.

        Indicates the view for this permission. Only populated for permissions that belong to a view. `published` is the only supported value.

        :param view: The view of this Permission.
        :type view: str
        """

        self._view = view

    @property
    def with_link(self):
        """Gets the with_link of this Permission.

        Whether the link is required for this permission.

        :return: The with_link of this Permission.
        :rtype: bool
        """
        return self._with_link

    @with_link.setter
    def with_link(self, with_link):
        """Sets the with_link of this Permission.

        Whether the link is required for this permission.

        :param with_link: The with_link of this Permission.
        :type with_link: bool
        """

        self._with_link = with_link
