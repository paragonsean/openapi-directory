# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_context import CommentContext
from openapi_server.models.comment_reply import CommentReply
from openapi_server.models.user import User
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anchor: str=None, author: User=None, comment_id: str=None, content: str=None, context: CommentContext=None, created_date: datetime=None, deleted: bool=None, file_id: str=None, file_title: str=None, html_content: str=None, kind: str='drive#comment', modified_date: datetime=None, replies: List[CommentReply]=None, self_link: str=None, status: str=None):
        """Comment - a model defined in OpenAPI

        :param anchor: The anchor of this Comment.
        :param author: The author of this Comment.
        :param comment_id: The comment_id of this Comment.
        :param content: The content of this Comment.
        :param context: The context of this Comment.
        :param created_date: The created_date of this Comment.
        :param deleted: The deleted of this Comment.
        :param file_id: The file_id of this Comment.
        :param file_title: The file_title of this Comment.
        :param html_content: The html_content of this Comment.
        :param kind: The kind of this Comment.
        :param modified_date: The modified_date of this Comment.
        :param replies: The replies of this Comment.
        :param self_link: The self_link of this Comment.
        :param status: The status of this Comment.
        """
        self.openapi_types = {
            'anchor': str,
            'author': User,
            'comment_id': str,
            'content': str,
            'context': CommentContext,
            'created_date': datetime,
            'deleted': bool,
            'file_id': str,
            'file_title': str,
            'html_content': str,
            'kind': str,
            'modified_date': datetime,
            'replies': List[CommentReply],
            'self_link': str,
            'status': str
        }

        self.attribute_map = {
            'anchor': 'anchor',
            'author': 'author',
            'comment_id': 'commentId',
            'content': 'content',
            'context': 'context',
            'created_date': 'createdDate',
            'deleted': 'deleted',
            'file_id': 'fileId',
            'file_title': 'fileTitle',
            'html_content': 'htmlContent',
            'kind': 'kind',
            'modified_date': 'modifiedDate',
            'replies': 'replies',
            'self_link': 'selfLink',
            'status': 'status'
        }

        self._anchor = anchor
        self._author = author
        self._comment_id = comment_id
        self._content = content
        self._context = context
        self._created_date = created_date
        self._deleted = deleted
        self._file_id = file_id
        self._file_title = file_title
        self._html_content = html_content
        self._kind = kind
        self._modified_date = modified_date
        self._replies = replies
        self._self_link = self_link
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anchor(self):
        """Gets the anchor of this Comment.

        A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Add comments and replies](https://developers.google.com/drive/api/v2/manage-comments).

        :return: The anchor of this Comment.
        :rtype: str
        """
        return self._anchor

    @anchor.setter
    def anchor(self, anchor):
        """Sets the anchor of this Comment.

        A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Add comments and replies](https://developers.google.com/drive/api/v2/manage-comments).

        :param anchor: The anchor of this Comment.
        :type anchor: str
        """

        self._anchor = anchor

    @property
    def author(self):
        """Gets the author of this Comment.


        :return: The author of this Comment.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Comment.


        :param author: The author of this Comment.
        :type author: User
        """

        self._author = author

    @property
    def comment_id(self):
        """Gets the comment_id of this Comment.

        Output only. The ID of the comment.

        :return: The comment_id of this Comment.
        :rtype: str
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this Comment.

        Output only. The ID of the comment.

        :param comment_id: The comment_id of this Comment.
        :type comment_id: str
        """

        self._comment_id = comment_id

    @property
    def content(self):
        """Gets the content of this Comment.

        The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.

        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.

        The plain text content used to create this comment. This is not HTML safe and should only be used as a starting point to make edits to a comment's content.

        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def context(self):
        """Gets the context of this Comment.


        :return: The context of this Comment.
        :rtype: CommentContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Comment.


        :param context: The context of this Comment.
        :type context: CommentContext
        """

        self._context = context

    @property
    def created_date(self):
        """Gets the created_date of this Comment.

        The date when this comment was first created.

        :return: The created_date of this Comment.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Comment.

        The date when this comment was first created.

        :param created_date: The created_date of this Comment.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def deleted(self):
        """Gets the deleted of this Comment.

        Output only. Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.

        :return: The deleted of this Comment.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Comment.

        Output only. Whether this comment has been deleted. If a comment has been deleted the content will be cleared and this will only represent a comment that once existed.

        :param deleted: The deleted of this Comment.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def file_id(self):
        """Gets the file_id of this Comment.

        Output only. The file which this comment is addressing.

        :return: The file_id of this Comment.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Comment.

        Output only. The file which this comment is addressing.

        :param file_id: The file_id of this Comment.
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def file_title(self):
        """Gets the file_title of this Comment.

        Output only. The title of the file which this comment is addressing.

        :return: The file_title of this Comment.
        :rtype: str
        """
        return self._file_title

    @file_title.setter
    def file_title(self, file_title):
        """Sets the file_title of this Comment.

        Output only. The title of the file which this comment is addressing.

        :param file_title: The file_title of this Comment.
        :type file_title: str
        """

        self._file_title = file_title

    @property
    def html_content(self):
        """Gets the html_content of this Comment.

        Output only. HTML formatted content for this comment.

        :return: The html_content of this Comment.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """Sets the html_content of this Comment.

        Output only. HTML formatted content for this comment.

        :param html_content: The html_content of this Comment.
        :type html_content: str
        """

        self._html_content = html_content

    @property
    def kind(self):
        """Gets the kind of this Comment.

        Output only. This is always `drive#comment`.

        :return: The kind of this Comment.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Comment.

        Output only. This is always `drive#comment`.

        :param kind: The kind of this Comment.
        :type kind: str
        """

        self._kind = kind

    @property
    def modified_date(self):
        """Gets the modified_date of this Comment.

        The date when this comment or any of its replies were last modified.

        :return: The modified_date of this Comment.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this Comment.

        The date when this comment or any of its replies were last modified.

        :param modified_date: The modified_date of this Comment.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def replies(self):
        """Gets the replies of this Comment.

        Output only. Replies to this post.

        :return: The replies of this Comment.
        :rtype: List[CommentReply]
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this Comment.

        Output only. Replies to this post.

        :param replies: The replies of this Comment.
        :type replies: List[CommentReply]
        """

        self._replies = replies

    @property
    def self_link(self):
        """Gets the self_link of this Comment.

        Output only. A link back to this comment.

        :return: The self_link of this Comment.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Comment.

        Output only. A link back to this comment.

        :param self_link: The self_link of this Comment.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Comment.

        Output only. The status of this comment. Status can be changed by posting a reply to a comment with the desired status. * `open` - The comment is still open. * `resolved` - The comment has been resolved by one of its replies.

        :return: The status of this Comment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Comment.

        Output only. The status of this comment. Status can be changed by posting a reply to a comment with the desired status. * `open` - The comment is still open. * `resolved` - The comment has been resolved by one of its replies.

        :param status: The status of this Comment.
        :type status: str
        """

        self._status = status
