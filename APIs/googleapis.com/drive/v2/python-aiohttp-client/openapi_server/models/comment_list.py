# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util


class CommentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[Comment]=None, kind: str='drive#commentList', next_link: str=None, next_page_token: str=None, self_link: str=None):
        """CommentList - a model defined in OpenAPI

        :param items: The items of this CommentList.
        :param kind: The kind of this CommentList.
        :param next_link: The next_link of this CommentList.
        :param next_page_token: The next_page_token of this CommentList.
        :param self_link: The self_link of this CommentList.
        """
        self.openapi_types = {
            'items': List[Comment],
            'kind': str,
            'next_link': str,
            'next_page_token': str,
            'self_link': str
        }

        self.attribute_map = {
            'items': 'items',
            'kind': 'kind',
            'next_link': 'nextLink',
            'next_page_token': 'nextPageToken',
            'self_link': 'selfLink'
        }

        self._items = items
        self._kind = kind
        self._next_link = next_link
        self._next_page_token = next_page_token
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentList of this CommentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this CommentList.

        The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The items of this CommentList.
        :rtype: List[Comment]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommentList.

        The list of comments. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param items: The items of this CommentList.
        :type items: List[Comment]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this CommentList.

        This is always `drive#commentList`.

        :return: The kind of this CommentList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CommentList.

        This is always `drive#commentList`.

        :param kind: The kind of this CommentList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_link(self):
        """Gets the next_link of this CommentList.

        A link to the next page of comments.

        :return: The next_link of this CommentList.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this CommentList.

        A link to the next page of comments.

        :param next_link: The next_link of this CommentList.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def next_page_token(self):
        """Gets the next_page_token of this CommentList.

        The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :return: The next_page_token of this CommentList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this CommentList.

        The page token for the next page of comments. This will be absent if the end of the comments list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :param next_page_token: The next_page_token of this CommentList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def self_link(self):
        """Gets the self_link of this CommentList.

        A link back to this list.

        :return: The self_link of this CommentList.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this CommentList.

        A link back to this list.

        :param self_link: The self_link of this CommentList.
        :type self_link: str
        """

        self._self_link = self_link
