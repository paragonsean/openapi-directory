# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_image_media_metadata_location import FileImageMediaMetadataLocation
from openapi_server import util


class FileImageMediaMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aperture: float=None, camera_make: str=None, camera_model: str=None, color_space: str=None, _date: str=None, exposure_bias: float=None, exposure_mode: str=None, exposure_time: float=None, flash_used: bool=None, focal_length: float=None, height: int=None, iso_speed: int=None, lens: str=None, location: FileImageMediaMetadataLocation=None, max_aperture_value: float=None, metering_mode: str=None, rotation: int=None, sensor: str=None, subject_distance: int=None, white_balance: str=None, width: int=None):
        """FileImageMediaMetadata - a model defined in OpenAPI

        :param aperture: The aperture of this FileImageMediaMetadata.
        :param camera_make: The camera_make of this FileImageMediaMetadata.
        :param camera_model: The camera_model of this FileImageMediaMetadata.
        :param color_space: The color_space of this FileImageMediaMetadata.
        :param _date: The _date of this FileImageMediaMetadata.
        :param exposure_bias: The exposure_bias of this FileImageMediaMetadata.
        :param exposure_mode: The exposure_mode of this FileImageMediaMetadata.
        :param exposure_time: The exposure_time of this FileImageMediaMetadata.
        :param flash_used: The flash_used of this FileImageMediaMetadata.
        :param focal_length: The focal_length of this FileImageMediaMetadata.
        :param height: The height of this FileImageMediaMetadata.
        :param iso_speed: The iso_speed of this FileImageMediaMetadata.
        :param lens: The lens of this FileImageMediaMetadata.
        :param location: The location of this FileImageMediaMetadata.
        :param max_aperture_value: The max_aperture_value of this FileImageMediaMetadata.
        :param metering_mode: The metering_mode of this FileImageMediaMetadata.
        :param rotation: The rotation of this FileImageMediaMetadata.
        :param sensor: The sensor of this FileImageMediaMetadata.
        :param subject_distance: The subject_distance of this FileImageMediaMetadata.
        :param white_balance: The white_balance of this FileImageMediaMetadata.
        :param width: The width of this FileImageMediaMetadata.
        """
        self.openapi_types = {
            'aperture': float,
            'camera_make': str,
            'camera_model': str,
            'color_space': str,
            '_date': str,
            'exposure_bias': float,
            'exposure_mode': str,
            'exposure_time': float,
            'flash_used': bool,
            'focal_length': float,
            'height': int,
            'iso_speed': int,
            'lens': str,
            'location': FileImageMediaMetadataLocation,
            'max_aperture_value': float,
            'metering_mode': str,
            'rotation': int,
            'sensor': str,
            'subject_distance': int,
            'white_balance': str,
            'width': int
        }

        self.attribute_map = {
            'aperture': 'aperture',
            'camera_make': 'cameraMake',
            'camera_model': 'cameraModel',
            'color_space': 'colorSpace',
            '_date': 'date',
            'exposure_bias': 'exposureBias',
            'exposure_mode': 'exposureMode',
            'exposure_time': 'exposureTime',
            'flash_used': 'flashUsed',
            'focal_length': 'focalLength',
            'height': 'height',
            'iso_speed': 'isoSpeed',
            'lens': 'lens',
            'location': 'location',
            'max_aperture_value': 'maxApertureValue',
            'metering_mode': 'meteringMode',
            'rotation': 'rotation',
            'sensor': 'sensor',
            'subject_distance': 'subjectDistance',
            'white_balance': 'whiteBalance',
            'width': 'width'
        }

        self._aperture = aperture
        self._camera_make = camera_make
        self._camera_model = camera_model
        self._color_space = color_space
        self.__date = _date
        self._exposure_bias = exposure_bias
        self._exposure_mode = exposure_mode
        self._exposure_time = exposure_time
        self._flash_used = flash_used
        self._focal_length = focal_length
        self._height = height
        self._iso_speed = iso_speed
        self._lens = lens
        self._location = location
        self._max_aperture_value = max_aperture_value
        self._metering_mode = metering_mode
        self._rotation = rotation
        self._sensor = sensor
        self._subject_distance = subject_distance
        self._white_balance = white_balance
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileImageMediaMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File_imageMediaMetadata of this FileImageMediaMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aperture(self):
        """Gets the aperture of this FileImageMediaMetadata.

        Output only. The aperture used to create the photo (f-number).

        :return: The aperture of this FileImageMediaMetadata.
        :rtype: float
        """
        return self._aperture

    @aperture.setter
    def aperture(self, aperture):
        """Sets the aperture of this FileImageMediaMetadata.

        Output only. The aperture used to create the photo (f-number).

        :param aperture: The aperture of this FileImageMediaMetadata.
        :type aperture: float
        """

        self._aperture = aperture

    @property
    def camera_make(self):
        """Gets the camera_make of this FileImageMediaMetadata.

        Output only. The make of the camera used to create the photo.

        :return: The camera_make of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._camera_make

    @camera_make.setter
    def camera_make(self, camera_make):
        """Sets the camera_make of this FileImageMediaMetadata.

        Output only. The make of the camera used to create the photo.

        :param camera_make: The camera_make of this FileImageMediaMetadata.
        :type camera_make: str
        """

        self._camera_make = camera_make

    @property
    def camera_model(self):
        """Gets the camera_model of this FileImageMediaMetadata.

        Output only. The model of the camera used to create the photo.

        :return: The camera_model of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._camera_model

    @camera_model.setter
    def camera_model(self, camera_model):
        """Sets the camera_model of this FileImageMediaMetadata.

        Output only. The model of the camera used to create the photo.

        :param camera_model: The camera_model of this FileImageMediaMetadata.
        :type camera_model: str
        """

        self._camera_model = camera_model

    @property
    def color_space(self):
        """Gets the color_space of this FileImageMediaMetadata.

        Output only. The color space of the photo.

        :return: The color_space of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space):
        """Sets the color_space of this FileImageMediaMetadata.

        Output only. The color space of the photo.

        :param color_space: The color_space of this FileImageMediaMetadata.
        :type color_space: str
        """

        self._color_space = color_space

    @property
    def _date(self):
        """Gets the _date of this FileImageMediaMetadata.

        Output only. The date and time the photo was taken (EXIF format timestamp).

        :return: The _date of this FileImageMediaMetadata.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this FileImageMediaMetadata.

        Output only. The date and time the photo was taken (EXIF format timestamp).

        :param _date: The _date of this FileImageMediaMetadata.
        :type _date: str
        """

        self.__date = _date

    @property
    def exposure_bias(self):
        """Gets the exposure_bias of this FileImageMediaMetadata.

        Output only. The exposure bias of the photo (APEX value).

        :return: The exposure_bias of this FileImageMediaMetadata.
        :rtype: float
        """
        return self._exposure_bias

    @exposure_bias.setter
    def exposure_bias(self, exposure_bias):
        """Sets the exposure_bias of this FileImageMediaMetadata.

        Output only. The exposure bias of the photo (APEX value).

        :param exposure_bias: The exposure_bias of this FileImageMediaMetadata.
        :type exposure_bias: float
        """

        self._exposure_bias = exposure_bias

    @property
    def exposure_mode(self):
        """Gets the exposure_mode of this FileImageMediaMetadata.

        Output only. The exposure mode used to create the photo.

        :return: The exposure_mode of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._exposure_mode

    @exposure_mode.setter
    def exposure_mode(self, exposure_mode):
        """Sets the exposure_mode of this FileImageMediaMetadata.

        Output only. The exposure mode used to create the photo.

        :param exposure_mode: The exposure_mode of this FileImageMediaMetadata.
        :type exposure_mode: str
        """

        self._exposure_mode = exposure_mode

    @property
    def exposure_time(self):
        """Gets the exposure_time of this FileImageMediaMetadata.

        Output only. The length of the exposure, in seconds.

        :return: The exposure_time of this FileImageMediaMetadata.
        :rtype: float
        """
        return self._exposure_time

    @exposure_time.setter
    def exposure_time(self, exposure_time):
        """Sets the exposure_time of this FileImageMediaMetadata.

        Output only. The length of the exposure, in seconds.

        :param exposure_time: The exposure_time of this FileImageMediaMetadata.
        :type exposure_time: float
        """

        self._exposure_time = exposure_time

    @property
    def flash_used(self):
        """Gets the flash_used of this FileImageMediaMetadata.

        Output only. Whether a flash was used to create the photo.

        :return: The flash_used of this FileImageMediaMetadata.
        :rtype: bool
        """
        return self._flash_used

    @flash_used.setter
    def flash_used(self, flash_used):
        """Sets the flash_used of this FileImageMediaMetadata.

        Output only. Whether a flash was used to create the photo.

        :param flash_used: The flash_used of this FileImageMediaMetadata.
        :type flash_used: bool
        """

        self._flash_used = flash_used

    @property
    def focal_length(self):
        """Gets the focal_length of this FileImageMediaMetadata.

        Output only. The focal length used to create the photo, in millimeters.

        :return: The focal_length of this FileImageMediaMetadata.
        :rtype: float
        """
        return self._focal_length

    @focal_length.setter
    def focal_length(self, focal_length):
        """Sets the focal_length of this FileImageMediaMetadata.

        Output only. The focal length used to create the photo, in millimeters.

        :param focal_length: The focal_length of this FileImageMediaMetadata.
        :type focal_length: float
        """

        self._focal_length = focal_length

    @property
    def height(self):
        """Gets the height of this FileImageMediaMetadata.

        Output only. The height of the image in pixels.

        :return: The height of this FileImageMediaMetadata.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this FileImageMediaMetadata.

        Output only. The height of the image in pixels.

        :param height: The height of this FileImageMediaMetadata.
        :type height: int
        """

        self._height = height

    @property
    def iso_speed(self):
        """Gets the iso_speed of this FileImageMediaMetadata.

        Output only. The ISO speed used to create the photo.

        :return: The iso_speed of this FileImageMediaMetadata.
        :rtype: int
        """
        return self._iso_speed

    @iso_speed.setter
    def iso_speed(self, iso_speed):
        """Sets the iso_speed of this FileImageMediaMetadata.

        Output only. The ISO speed used to create the photo.

        :param iso_speed: The iso_speed of this FileImageMediaMetadata.
        :type iso_speed: int
        """

        self._iso_speed = iso_speed

    @property
    def lens(self):
        """Gets the lens of this FileImageMediaMetadata.

        Output only. The lens used to create the photo.

        :return: The lens of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._lens

    @lens.setter
    def lens(self, lens):
        """Sets the lens of this FileImageMediaMetadata.

        Output only. The lens used to create the photo.

        :param lens: The lens of this FileImageMediaMetadata.
        :type lens: str
        """

        self._lens = lens

    @property
    def location(self):
        """Gets the location of this FileImageMediaMetadata.


        :return: The location of this FileImageMediaMetadata.
        :rtype: FileImageMediaMetadataLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this FileImageMediaMetadata.


        :param location: The location of this FileImageMediaMetadata.
        :type location: FileImageMediaMetadataLocation
        """

        self._location = location

    @property
    def max_aperture_value(self):
        """Gets the max_aperture_value of this FileImageMediaMetadata.

        Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).

        :return: The max_aperture_value of this FileImageMediaMetadata.
        :rtype: float
        """
        return self._max_aperture_value

    @max_aperture_value.setter
    def max_aperture_value(self, max_aperture_value):
        """Sets the max_aperture_value of this FileImageMediaMetadata.

        Output only. The smallest f-number of the lens at the focal length used to create the photo (APEX value).

        :param max_aperture_value: The max_aperture_value of this FileImageMediaMetadata.
        :type max_aperture_value: float
        """

        self._max_aperture_value = max_aperture_value

    @property
    def metering_mode(self):
        """Gets the metering_mode of this FileImageMediaMetadata.

        Output only. The metering mode used to create the photo.

        :return: The metering_mode of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._metering_mode

    @metering_mode.setter
    def metering_mode(self, metering_mode):
        """Sets the metering_mode of this FileImageMediaMetadata.

        Output only. The metering mode used to create the photo.

        :param metering_mode: The metering_mode of this FileImageMediaMetadata.
        :type metering_mode: str
        """

        self._metering_mode = metering_mode

    @property
    def rotation(self):
        """Gets the rotation of this FileImageMediaMetadata.

        Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.

        :return: The rotation of this FileImageMediaMetadata.
        :rtype: int
        """
        return self._rotation

    @rotation.setter
    def rotation(self, rotation):
        """Sets the rotation of this FileImageMediaMetadata.

        Output only. The number of clockwise 90 degree rotations applied from the image's original orientation.

        :param rotation: The rotation of this FileImageMediaMetadata.
        :type rotation: int
        """

        self._rotation = rotation

    @property
    def sensor(self):
        """Gets the sensor of this FileImageMediaMetadata.

        Output only. The type of sensor used to create the photo.

        :return: The sensor of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this FileImageMediaMetadata.

        Output only. The type of sensor used to create the photo.

        :param sensor: The sensor of this FileImageMediaMetadata.
        :type sensor: str
        """

        self._sensor = sensor

    @property
    def subject_distance(self):
        """Gets the subject_distance of this FileImageMediaMetadata.

        Output only. The distance to the subject of the photo, in meters.

        :return: The subject_distance of this FileImageMediaMetadata.
        :rtype: int
        """
        return self._subject_distance

    @subject_distance.setter
    def subject_distance(self, subject_distance):
        """Sets the subject_distance of this FileImageMediaMetadata.

        Output only. The distance to the subject of the photo, in meters.

        :param subject_distance: The subject_distance of this FileImageMediaMetadata.
        :type subject_distance: int
        """

        self._subject_distance = subject_distance

    @property
    def white_balance(self):
        """Gets the white_balance of this FileImageMediaMetadata.

        Output only. The white balance mode used to create the photo.

        :return: The white_balance of this FileImageMediaMetadata.
        :rtype: str
        """
        return self._white_balance

    @white_balance.setter
    def white_balance(self, white_balance):
        """Sets the white_balance of this FileImageMediaMetadata.

        Output only. The white balance mode used to create the photo.

        :param white_balance: The white_balance of this FileImageMediaMetadata.
        :type white_balance: str
        """

        self._white_balance = white_balance

    @property
    def width(self):
        """Gets the width of this FileImageMediaMetadata.

        Output only. The width of the image in pixels.

        :return: The width of this FileImageMediaMetadata.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FileImageMediaMetadata.

        Output only. The width of the image in pixels.

        :param width: The width of this FileImageMediaMetadata.
        :type width: int
        """

        self._width = width
