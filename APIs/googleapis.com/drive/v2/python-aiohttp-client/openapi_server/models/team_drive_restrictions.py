# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamDriveRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_managed_restrictions: bool=None, copy_requires_writer_permission: bool=None, domain_users_only: bool=None, sharing_folders_requires_organizer_permission: bool=None, team_members_only: bool=None):
        """TeamDriveRestrictions - a model defined in OpenAPI

        :param admin_managed_restrictions: The admin_managed_restrictions of this TeamDriveRestrictions.
        :param copy_requires_writer_permission: The copy_requires_writer_permission of this TeamDriveRestrictions.
        :param domain_users_only: The domain_users_only of this TeamDriveRestrictions.
        :param sharing_folders_requires_organizer_permission: The sharing_folders_requires_organizer_permission of this TeamDriveRestrictions.
        :param team_members_only: The team_members_only of this TeamDriveRestrictions.
        """
        self.openapi_types = {
            'admin_managed_restrictions': bool,
            'copy_requires_writer_permission': bool,
            'domain_users_only': bool,
            'sharing_folders_requires_organizer_permission': bool,
            'team_members_only': bool
        }

        self.attribute_map = {
            'admin_managed_restrictions': 'adminManagedRestrictions',
            'copy_requires_writer_permission': 'copyRequiresWriterPermission',
            'domain_users_only': 'domainUsersOnly',
            'sharing_folders_requires_organizer_permission': 'sharingFoldersRequiresOrganizerPermission',
            'team_members_only': 'teamMembersOnly'
        }

        self._admin_managed_restrictions = admin_managed_restrictions
        self._copy_requires_writer_permission = copy_requires_writer_permission
        self._domain_users_only = domain_users_only
        self._sharing_folders_requires_organizer_permission = sharing_folders_requires_organizer_permission
        self._team_members_only = team_members_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamDriveRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TeamDrive_restrictions of this TeamDriveRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_managed_restrictions(self):
        """Gets the admin_managed_restrictions of this TeamDriveRestrictions.

        Whether administrative privileges on this Team Drive are required to modify restrictions.

        :return: The admin_managed_restrictions of this TeamDriveRestrictions.
        :rtype: bool
        """
        return self._admin_managed_restrictions

    @admin_managed_restrictions.setter
    def admin_managed_restrictions(self, admin_managed_restrictions):
        """Sets the admin_managed_restrictions of this TeamDriveRestrictions.

        Whether administrative privileges on this Team Drive are required to modify restrictions.

        :param admin_managed_restrictions: The admin_managed_restrictions of this TeamDriveRestrictions.
        :type admin_managed_restrictions: bool
        """

        self._admin_managed_restrictions = admin_managed_restrictions

    @property
    def copy_requires_writer_permission(self):
        """Gets the copy_requires_writer_permission of this TeamDriveRestrictions.

        Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.

        :return: The copy_requires_writer_permission of this TeamDriveRestrictions.
        :rtype: bool
        """
        return self._copy_requires_writer_permission

    @copy_requires_writer_permission.setter
    def copy_requires_writer_permission(self, copy_requires_writer_permission):
        """Sets the copy_requires_writer_permission of this TeamDriveRestrictions.

        Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.

        :param copy_requires_writer_permission: The copy_requires_writer_permission of this TeamDriveRestrictions.
        :type copy_requires_writer_permission: bool
        """

        self._copy_requires_writer_permission = copy_requires_writer_permission

    @property
    def domain_users_only(self):
        """Gets the domain_users_only of this TeamDriveRestrictions.

        Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.

        :return: The domain_users_only of this TeamDriveRestrictions.
        :rtype: bool
        """
        return self._domain_users_only

    @domain_users_only.setter
    def domain_users_only(self, domain_users_only):
        """Sets the domain_users_only of this TeamDriveRestrictions.

        Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.

        :param domain_users_only: The domain_users_only of this TeamDriveRestrictions.
        :type domain_users_only: bool
        """

        self._domain_users_only = domain_users_only

    @property
    def sharing_folders_requires_organizer_permission(self):
        """Gets the sharing_folders_requires_organizer_permission of this TeamDriveRestrictions.

        If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.

        :return: The sharing_folders_requires_organizer_permission of this TeamDriveRestrictions.
        :rtype: bool
        """
        return self._sharing_folders_requires_organizer_permission

    @sharing_folders_requires_organizer_permission.setter
    def sharing_folders_requires_organizer_permission(self, sharing_folders_requires_organizer_permission):
        """Sets the sharing_folders_requires_organizer_permission of this TeamDriveRestrictions.

        If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.

        :param sharing_folders_requires_organizer_permission: The sharing_folders_requires_organizer_permission of this TeamDriveRestrictions.
        :type sharing_folders_requires_organizer_permission: bool
        """

        self._sharing_folders_requires_organizer_permission = sharing_folders_requires_organizer_permission

    @property
    def team_members_only(self):
        """Gets the team_members_only of this TeamDriveRestrictions.

        Whether access to items inside this Team Drive is restricted to members of this Team Drive.

        :return: The team_members_only of this TeamDriveRestrictions.
        :rtype: bool
        """
        return self._team_members_only

    @team_members_only.setter
    def team_members_only(self, team_members_only):
        """Sets the team_members_only of this TeamDriveRestrictions.

        Whether access to items inside this Team Drive is restricted to members of this Team Drive.

        :param team_members_only: The team_members_only of this TeamDriveRestrictions.
        :type team_members_only: bool
        """

        self._team_members_only = team_members_only
