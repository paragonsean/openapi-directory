# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PermissionPermissionDetailsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_roles: List[str]=None, inherited: bool=None, inherited_from: str=None, permission_type: str=None, role: str=None):
        """PermissionPermissionDetailsInner - a model defined in OpenAPI

        :param additional_roles: The additional_roles of this PermissionPermissionDetailsInner.
        :param inherited: The inherited of this PermissionPermissionDetailsInner.
        :param inherited_from: The inherited_from of this PermissionPermissionDetailsInner.
        :param permission_type: The permission_type of this PermissionPermissionDetailsInner.
        :param role: The role of this PermissionPermissionDetailsInner.
        """
        self.openapi_types = {
            'additional_roles': List[str],
            'inherited': bool,
            'inherited_from': str,
            'permission_type': str,
            'role': str
        }

        self.attribute_map = {
            'additional_roles': 'additionalRoles',
            'inherited': 'inherited',
            'inherited_from': 'inheritedFrom',
            'permission_type': 'permissionType',
            'role': 'role'
        }

        self._additional_roles = additional_roles
        self._inherited = inherited
        self._inherited_from = inherited_from
        self._permission_type = permission_type
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermissionPermissionDetailsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission_permissionDetails_inner of this PermissionPermissionDetailsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_roles(self):
        """Gets the additional_roles of this PermissionPermissionDetailsInner.

        Output only. Additional roles for this user. Only `commenter` is currently possible, though more may be supported in the future.

        :return: The additional_roles of this PermissionPermissionDetailsInner.
        :rtype: List[str]
        """
        return self._additional_roles

    @additional_roles.setter
    def additional_roles(self, additional_roles):
        """Sets the additional_roles of this PermissionPermissionDetailsInner.

        Output only. Additional roles for this user. Only `commenter` is currently possible, though more may be supported in the future.

        :param additional_roles: The additional_roles of this PermissionPermissionDetailsInner.
        :type additional_roles: List[str]
        """

        self._additional_roles = additional_roles

    @property
    def inherited(self):
        """Gets the inherited of this PermissionPermissionDetailsInner.

        Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.

        :return: The inherited of this PermissionPermissionDetailsInner.
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this PermissionPermissionDetailsInner.

        Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.

        :param inherited: The inherited of this PermissionPermissionDetailsInner.
        :type inherited: bool
        """

        self._inherited = inherited

    @property
    def inherited_from(self):
        """Gets the inherited_from of this PermissionPermissionDetailsInner.

        Output only. The ID of the item from which this permission is inherited. This is an output-only field.

        :return: The inherited_from of this PermissionPermissionDetailsInner.
        :rtype: str
        """
        return self._inherited_from

    @inherited_from.setter
    def inherited_from(self, inherited_from):
        """Sets the inherited_from of this PermissionPermissionDetailsInner.

        Output only. The ID of the item from which this permission is inherited. This is an output-only field.

        :param inherited_from: The inherited_from of this PermissionPermissionDetailsInner.
        :type inherited_from: str
        """

        self._inherited_from = inherited_from

    @property
    def permission_type(self):
        """Gets the permission_type of this PermissionPermissionDetailsInner.

        Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`

        :return: The permission_type of this PermissionPermissionDetailsInner.
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this PermissionPermissionDetailsInner.

        Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`

        :param permission_type: The permission_type of this PermissionPermissionDetailsInner.
        :type permission_type: str
        """

        self._permission_type = permission_type

    @property
    def role(self):
        """Gets the role of this PermissionPermissionDetailsInner.

        Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `reader`

        :return: The role of this PermissionPermissionDetailsInner.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PermissionPermissionDetailsInner.

        Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `reader`

        :param role: The role of this PermissionPermissionDetailsInner.
        :type role: str
        """

        self._role = role
