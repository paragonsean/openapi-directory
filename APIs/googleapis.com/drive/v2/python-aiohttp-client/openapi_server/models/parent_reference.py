# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParentReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, is_root: bool=None, kind: str='drive#parentReference', parent_link: str=None, self_link: str=None):
        """ParentReference - a model defined in OpenAPI

        :param id: The id of this ParentReference.
        :param is_root: The is_root of this ParentReference.
        :param kind: The kind of this ParentReference.
        :param parent_link: The parent_link of this ParentReference.
        :param self_link: The self_link of this ParentReference.
        """
        self.openapi_types = {
            'id': str,
            'is_root': bool,
            'kind': str,
            'parent_link': str,
            'self_link': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_root': 'isRoot',
            'kind': 'kind',
            'parent_link': 'parentLink',
            'self_link': 'selfLink'
        }

        self._id = id
        self._is_root = is_root
        self._kind = kind
        self._parent_link = parent_link
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParentReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParentReference of this ParentReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ParentReference.

        The ID of the parent.

        :return: The id of this ParentReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParentReference.

        The ID of the parent.

        :param id: The id of this ParentReference.
        :type id: str
        """

        self._id = id

    @property
    def is_root(self):
        """Gets the is_root of this ParentReference.

        Output only. Whether or not the parent is the root folder.

        :return: The is_root of this ParentReference.
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this ParentReference.

        Output only. Whether or not the parent is the root folder.

        :param is_root: The is_root of this ParentReference.
        :type is_root: bool
        """

        self._is_root = is_root

    @property
    def kind(self):
        """Gets the kind of this ParentReference.

        Output only. This is always `drive#parentReference`.

        :return: The kind of this ParentReference.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ParentReference.

        Output only. This is always `drive#parentReference`.

        :param kind: The kind of this ParentReference.
        :type kind: str
        """

        self._kind = kind

    @property
    def parent_link(self):
        """Gets the parent_link of this ParentReference.

        Output only. A link to the parent.

        :return: The parent_link of this ParentReference.
        :rtype: str
        """
        return self._parent_link

    @parent_link.setter
    def parent_link(self, parent_link):
        """Sets the parent_link of this ParentReference.

        Output only. A link to the parent.

        :param parent_link: The parent_link of this ParentReference.
        :type parent_link: str
        """

        self._parent_link = parent_link

    @property
    def self_link(self):
        """Gets the self_link of this ParentReference.

        Output only. A link back to this reference.

        :return: The self_link of this ParentReference.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this ParentReference.

        Output only. A link back to this reference.

        :param self_link: The self_link of this ParentReference.
        :type self_link: str
        """

        self._self_link = self_link
