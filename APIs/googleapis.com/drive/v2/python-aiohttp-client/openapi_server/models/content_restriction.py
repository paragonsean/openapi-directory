# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class ContentRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, owner_restricted: bool=None, read_only: bool=None, reason: str=None, restricting_user: User=None, restriction_date: datetime=None, system_restricted: bool=None, type: str=None):
        """ContentRestriction - a model defined in OpenAPI

        :param owner_restricted: The owner_restricted of this ContentRestriction.
        :param read_only: The read_only of this ContentRestriction.
        :param reason: The reason of this ContentRestriction.
        :param restricting_user: The restricting_user of this ContentRestriction.
        :param restriction_date: The restriction_date of this ContentRestriction.
        :param system_restricted: The system_restricted of this ContentRestriction.
        :param type: The type of this ContentRestriction.
        """
        self.openapi_types = {
            'owner_restricted': bool,
            'read_only': bool,
            'reason': str,
            'restricting_user': User,
            'restriction_date': datetime,
            'system_restricted': bool,
            'type': str
        }

        self.attribute_map = {
            'owner_restricted': 'ownerRestricted',
            'read_only': 'readOnly',
            'reason': 'reason',
            'restricting_user': 'restrictingUser',
            'restriction_date': 'restrictionDate',
            'system_restricted': 'systemRestricted',
            'type': 'type'
        }

        self._owner_restricted = owner_restricted
        self._read_only = read_only
        self._reason = reason
        self._restricting_user = restricting_user
        self._restriction_date = restriction_date
        self._system_restricted = system_restricted
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContentRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContentRestriction of this ContentRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner_restricted(self):
        """Gets the owner_restricted of this ContentRestriction.

        Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.

        :return: The owner_restricted of this ContentRestriction.
        :rtype: bool
        """
        return self._owner_restricted

    @owner_restricted.setter
    def owner_restricted(self, owner_restricted):
        """Sets the owner_restricted of this ContentRestriction.

        Whether the content restriction can only be modified or removed by a user who owns the file. For files in shared drives, any user with `organizer` capabilities can modify or remove this content restriction.

        :param owner_restricted: The owner_restricted of this ContentRestriction.
        :type owner_restricted: bool
        """

        self._owner_restricted = owner_restricted

    @property
    def read_only(self):
        """Gets the read_only of this ContentRestriction.

        Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.

        :return: The read_only of this ContentRestriction.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ContentRestriction.

        Whether the content of the file is read-only. If a file is read-only, a new revision of the file may not be added, comments may not be added or modified, and the title of the file may not be modified.

        :param read_only: The read_only of this ContentRestriction.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def reason(self):
        """Gets the reason of this ContentRestriction.

        Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.

        :return: The reason of this ContentRestriction.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ContentRestriction.

        Reason for why the content of the file is restricted. This is only mutable on requests that also set `readOnly=true`.

        :param reason: The reason of this ContentRestriction.
        :type reason: str
        """

        self._reason = reason

    @property
    def restricting_user(self):
        """Gets the restricting_user of this ContentRestriction.


        :return: The restricting_user of this ContentRestriction.
        :rtype: User
        """
        return self._restricting_user

    @restricting_user.setter
    def restricting_user(self, restricting_user):
        """Sets the restricting_user of this ContentRestriction.


        :param restricting_user: The restricting_user of this ContentRestriction.
        :type restricting_user: User
        """

        self._restricting_user = restricting_user

    @property
    def restriction_date(self):
        """Gets the restriction_date of this ContentRestriction.

        The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.

        :return: The restriction_date of this ContentRestriction.
        :rtype: datetime
        """
        return self._restriction_date

    @restriction_date.setter
    def restriction_date(self, restriction_date):
        """Sets the restriction_date of this ContentRestriction.

        The time at which the content restriction was set (formatted RFC 3339 timestamp). Only populated if readOnly is true.

        :param restriction_date: The restriction_date of this ContentRestriction.
        :type restriction_date: datetime
        """

        self._restriction_date = restriction_date

    @property
    def system_restricted(self):
        """Gets the system_restricted of this ContentRestriction.

        Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.

        :return: The system_restricted of this ContentRestriction.
        :rtype: bool
        """
        return self._system_restricted

    @system_restricted.setter
    def system_restricted(self, system_restricted):
        """Sets the system_restricted of this ContentRestriction.

        Output only. Whether the content restriction was applied by the system, for example due to an esignature. Users cannot modify or remove system restricted content restrictions.

        :param system_restricted: The system_restricted of this ContentRestriction.
        :type system_restricted: bool
        """

        self._system_restricted = system_restricted

    @property
    def type(self):
        """Gets the type of this ContentRestriction.

        Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.

        :return: The type of this ContentRestriction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ContentRestriction.

        Output only. The type of the content restriction. Currently the only possible value is `globalContentRestriction`.

        :param type: The type of this ContentRestriction.
        :type type: str
        """

        self._type = type
