# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_reply import CommentReply
from openapi_server import util


class CommentReplyList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[CommentReply]=None, kind: str='drive#commentReplyList', next_link: str=None, next_page_token: str=None, self_link: str=None):
        """CommentReplyList - a model defined in OpenAPI

        :param items: The items of this CommentReplyList.
        :param kind: The kind of this CommentReplyList.
        :param next_link: The next_link of this CommentReplyList.
        :param next_page_token: The next_page_token of this CommentReplyList.
        :param self_link: The self_link of this CommentReplyList.
        """
        self.openapi_types = {
            'items': List[CommentReply],
            'kind': str,
            'next_link': str,
            'next_page_token': str,
            'self_link': str
        }

        self.attribute_map = {
            'items': 'items',
            'kind': 'kind',
            'next_link': 'nextLink',
            'next_page_token': 'nextPageToken',
            'self_link': 'selfLink'
        }

        self._items = items
        self._kind = kind
        self._next_link = next_link
        self._next_page_token = next_page_token
        self._self_link = self_link

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentReplyList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentReplyList of this CommentReplyList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this CommentReplyList.

        The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :return: The items of this CommentReplyList.
        :rtype: List[CommentReply]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommentReplyList.

        The list of replies. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.

        :param items: The items of this CommentReplyList.
        :type items: List[CommentReply]
        """

        self._items = items

    @property
    def kind(self):
        """Gets the kind of this CommentReplyList.

        This is always `drive#commentReplyList`.

        :return: The kind of this CommentReplyList.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CommentReplyList.

        This is always `drive#commentReplyList`.

        :param kind: The kind of this CommentReplyList.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_link(self):
        """Gets the next_link of this CommentReplyList.

        A link to the next page of replies.

        :return: The next_link of this CommentReplyList.
        :rtype: str
        """
        return self._next_link

    @next_link.setter
    def next_link(self, next_link):
        """Sets the next_link of this CommentReplyList.

        A link to the next page of replies.

        :param next_link: The next_link of this CommentReplyList.
        :type next_link: str
        """

        self._next_link = next_link

    @property
    def next_page_token(self):
        """Gets the next_page_token of this CommentReplyList.

        The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :return: The next_page_token of this CommentReplyList.
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this CommentReplyList.

        The page token for the next page of replies. This will be absent if the end of the replies list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.

        :param next_page_token: The next_page_token of this CommentReplyList.
        :type next_page_token: str
        """

        self._next_page_token = next_page_token

    @property
    def self_link(self):
        """Gets the self_link of this CommentReplyList.

        A link back to this list.

        :return: The self_link of this CommentReplyList.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this CommentReplyList.

        A link back to this list.

        :param self_link: The self_link of this CommentReplyList.
        :type self_link: str
        """

        self._self_link = self_link
