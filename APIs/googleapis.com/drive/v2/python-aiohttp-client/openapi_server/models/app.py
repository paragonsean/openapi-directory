# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_icons_inner import AppIconsInner
from openapi_server import util


class App(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized: bool=None, create_in_folder_template: str=None, create_url: str=None, has_drive_wide_scope: bool=None, icons: List[AppIconsInner]=None, id: str=None, installed: bool=None, kind: str='drive#app', long_description: str=None, name: str=None, object_type: str=None, open_url_template: str=None, primary_file_extensions: List[str]=None, primary_mime_types: List[str]=None, product_id: str=None, product_url: str=None, secondary_file_extensions: List[str]=None, secondary_mime_types: List[str]=None, short_description: str=None, supports_create: bool=None, supports_import: bool=None, supports_multi_open: bool=None, supports_offline_create: bool=None, use_by_default: bool=None):
        """App - a model defined in OpenAPI

        :param authorized: The authorized of this App.
        :param create_in_folder_template: The create_in_folder_template of this App.
        :param create_url: The create_url of this App.
        :param has_drive_wide_scope: The has_drive_wide_scope of this App.
        :param icons: The icons of this App.
        :param id: The id of this App.
        :param installed: The installed of this App.
        :param kind: The kind of this App.
        :param long_description: The long_description of this App.
        :param name: The name of this App.
        :param object_type: The object_type of this App.
        :param open_url_template: The open_url_template of this App.
        :param primary_file_extensions: The primary_file_extensions of this App.
        :param primary_mime_types: The primary_mime_types of this App.
        :param product_id: The product_id of this App.
        :param product_url: The product_url of this App.
        :param secondary_file_extensions: The secondary_file_extensions of this App.
        :param secondary_mime_types: The secondary_mime_types of this App.
        :param short_description: The short_description of this App.
        :param supports_create: The supports_create of this App.
        :param supports_import: The supports_import of this App.
        :param supports_multi_open: The supports_multi_open of this App.
        :param supports_offline_create: The supports_offline_create of this App.
        :param use_by_default: The use_by_default of this App.
        """
        self.openapi_types = {
            'authorized': bool,
            'create_in_folder_template': str,
            'create_url': str,
            'has_drive_wide_scope': bool,
            'icons': List[AppIconsInner],
            'id': str,
            'installed': bool,
            'kind': str,
            'long_description': str,
            'name': str,
            'object_type': str,
            'open_url_template': str,
            'primary_file_extensions': List[str],
            'primary_mime_types': List[str],
            'product_id': str,
            'product_url': str,
            'secondary_file_extensions': List[str],
            'secondary_mime_types': List[str],
            'short_description': str,
            'supports_create': bool,
            'supports_import': bool,
            'supports_multi_open': bool,
            'supports_offline_create': bool,
            'use_by_default': bool
        }

        self.attribute_map = {
            'authorized': 'authorized',
            'create_in_folder_template': 'createInFolderTemplate',
            'create_url': 'createUrl',
            'has_drive_wide_scope': 'hasDriveWideScope',
            'icons': 'icons',
            'id': 'id',
            'installed': 'installed',
            'kind': 'kind',
            'long_description': 'longDescription',
            'name': 'name',
            'object_type': 'objectType',
            'open_url_template': 'openUrlTemplate',
            'primary_file_extensions': 'primaryFileExtensions',
            'primary_mime_types': 'primaryMimeTypes',
            'product_id': 'productId',
            'product_url': 'productUrl',
            'secondary_file_extensions': 'secondaryFileExtensions',
            'secondary_mime_types': 'secondaryMimeTypes',
            'short_description': 'shortDescription',
            'supports_create': 'supportsCreate',
            'supports_import': 'supportsImport',
            'supports_multi_open': 'supportsMultiOpen',
            'supports_offline_create': 'supportsOfflineCreate',
            'use_by_default': 'useByDefault'
        }

        self._authorized = authorized
        self._create_in_folder_template = create_in_folder_template
        self._create_url = create_url
        self._has_drive_wide_scope = has_drive_wide_scope
        self._icons = icons
        self._id = id
        self._installed = installed
        self._kind = kind
        self._long_description = long_description
        self._name = name
        self._object_type = object_type
        self._open_url_template = open_url_template
        self._primary_file_extensions = primary_file_extensions
        self._primary_mime_types = primary_mime_types
        self._product_id = product_id
        self._product_url = product_url
        self._secondary_file_extensions = secondary_file_extensions
        self._secondary_mime_types = secondary_mime_types
        self._short_description = short_description
        self._supports_create = supports_create
        self._supports_import = supports_import
        self._supports_multi_open = supports_multi_open
        self._supports_offline_create = supports_offline_create
        self._use_by_default = use_by_default

    @classmethod
    def from_dict(cls, dikt: dict) -> 'App':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The App of this App.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized(self):
        """Gets the authorized of this App.

        Whether the app is authorized to access data on the user's Drive.

        :return: The authorized of this App.
        :rtype: bool
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this App.

        Whether the app is authorized to access data on the user's Drive.

        :param authorized: The authorized of this App.
        :type authorized: bool
        """

        self._authorized = authorized

    @property
    def create_in_folder_template(self):
        """Gets the create_in_folder_template of this App.

        The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.

        :return: The create_in_folder_template of this App.
        :rtype: str
        """
        return self._create_in_folder_template

    @create_in_folder_template.setter
    def create_in_folder_template(self, create_in_folder_template):
        """Sets the create_in_folder_template of this App.

        The template url to create a new file with this app in a given folder. The template will contain {folderId} to be replaced by the folder to create the new file in.

        :param create_in_folder_template: The create_in_folder_template of this App.
        :type create_in_folder_template: str
        """

        self._create_in_folder_template = create_in_folder_template

    @property
    def create_url(self):
        """Gets the create_url of this App.

        The url to create a new file with this app.

        :return: The create_url of this App.
        :rtype: str
        """
        return self._create_url

    @create_url.setter
    def create_url(self, create_url):
        """Sets the create_url of this App.

        The url to create a new file with this app.

        :param create_url: The create_url of this App.
        :type create_url: str
        """

        self._create_url = create_url

    @property
    def has_drive_wide_scope(self):
        """Gets the has_drive_wide_scope of this App.

        Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user's drive.

        :return: The has_drive_wide_scope of this App.
        :rtype: bool
        """
        return self._has_drive_wide_scope

    @has_drive_wide_scope.setter
    def has_drive_wide_scope(self, has_drive_wide_scope):
        """Sets the has_drive_wide_scope of this App.

        Whether the app has drive-wide scope. An app with drive-wide scope can access all files in the user's drive.

        :param has_drive_wide_scope: The has_drive_wide_scope of this App.
        :type has_drive_wide_scope: bool
        """

        self._has_drive_wide_scope = has_drive_wide_scope

    @property
    def icons(self):
        """Gets the icons of this App.

        The various icons for the app.

        :return: The icons of this App.
        :rtype: List[AppIconsInner]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this App.

        The various icons for the app.

        :param icons: The icons of this App.
        :type icons: List[AppIconsInner]
        """

        self._icons = icons

    @property
    def id(self):
        """Gets the id of this App.

        The ID of the app.

        :return: The id of this App.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this App.

        The ID of the app.

        :param id: The id of this App.
        :type id: str
        """

        self._id = id

    @property
    def installed(self):
        """Gets the installed of this App.

        Whether the app is installed.

        :return: The installed of this App.
        :rtype: bool
        """
        return self._installed

    @installed.setter
    def installed(self, installed):
        """Sets the installed of this App.

        Whether the app is installed.

        :param installed: The installed of this App.
        :type installed: bool
        """

        self._installed = installed

    @property
    def kind(self):
        """Gets the kind of this App.

        This is always `drive#app`.

        :return: The kind of this App.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this App.

        This is always `drive#app`.

        :param kind: The kind of this App.
        :type kind: str
        """

        self._kind = kind

    @property
    def long_description(self):
        """Gets the long_description of this App.

        A long description of the app.

        :return: The long_description of this App.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this App.

        A long description of the app.

        :param long_description: The long_description of this App.
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def name(self):
        """Gets the name of this App.

        The name of the app.

        :return: The name of this App.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this App.

        The name of the app.

        :param name: The name of this App.
        :type name: str
        """

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this App.

        The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.

        :return: The object_type of this App.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this App.

        The type of object this app creates (e.g. Chart). If empty, the app name should be used instead.

        :param object_type: The object_type of this App.
        :type object_type: str
        """

        self._object_type = object_type

    @property
    def open_url_template(self):
        """Gets the open_url_template of this App.

        The template url for opening files with this app. The template will contain `{ids}` and/or `{exportIds}` to be replaced by the actual file ids. See Open Files for the full documentation.

        :return: The open_url_template of this App.
        :rtype: str
        """
        return self._open_url_template

    @open_url_template.setter
    def open_url_template(self, open_url_template):
        """Sets the open_url_template of this App.

        The template url for opening files with this app. The template will contain `{ids}` and/or `{exportIds}` to be replaced by the actual file ids. See Open Files for the full documentation.

        :param open_url_template: The open_url_template of this App.
        :type open_url_template: str
        """

        self._open_url_template = open_url_template

    @property
    def primary_file_extensions(self):
        """Gets the primary_file_extensions of this App.

        The list of primary file extensions.

        :return: The primary_file_extensions of this App.
        :rtype: List[str]
        """
        return self._primary_file_extensions

    @primary_file_extensions.setter
    def primary_file_extensions(self, primary_file_extensions):
        """Sets the primary_file_extensions of this App.

        The list of primary file extensions.

        :param primary_file_extensions: The primary_file_extensions of this App.
        :type primary_file_extensions: List[str]
        """

        self._primary_file_extensions = primary_file_extensions

    @property
    def primary_mime_types(self):
        """Gets the primary_mime_types of this App.

        The list of primary mime types.

        :return: The primary_mime_types of this App.
        :rtype: List[str]
        """
        return self._primary_mime_types

    @primary_mime_types.setter
    def primary_mime_types(self, primary_mime_types):
        """Sets the primary_mime_types of this App.

        The list of primary mime types.

        :param primary_mime_types: The primary_mime_types of this App.
        :type primary_mime_types: List[str]
        """

        self._primary_mime_types = primary_mime_types

    @property
    def product_id(self):
        """Gets the product_id of this App.

        The ID of the product listing for this app.

        :return: The product_id of this App.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this App.

        The ID of the product listing for this app.

        :param product_id: The product_id of this App.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def product_url(self):
        """Gets the product_url of this App.

        A link to the product listing for this app.

        :return: The product_url of this App.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this App.

        A link to the product listing for this app.

        :param product_url: The product_url of this App.
        :type product_url: str
        """

        self._product_url = product_url

    @property
    def secondary_file_extensions(self):
        """Gets the secondary_file_extensions of this App.

        The list of secondary file extensions.

        :return: The secondary_file_extensions of this App.
        :rtype: List[str]
        """
        return self._secondary_file_extensions

    @secondary_file_extensions.setter
    def secondary_file_extensions(self, secondary_file_extensions):
        """Sets the secondary_file_extensions of this App.

        The list of secondary file extensions.

        :param secondary_file_extensions: The secondary_file_extensions of this App.
        :type secondary_file_extensions: List[str]
        """

        self._secondary_file_extensions = secondary_file_extensions

    @property
    def secondary_mime_types(self):
        """Gets the secondary_mime_types of this App.

        The list of secondary mime types.

        :return: The secondary_mime_types of this App.
        :rtype: List[str]
        """
        return self._secondary_mime_types

    @secondary_mime_types.setter
    def secondary_mime_types(self, secondary_mime_types):
        """Sets the secondary_mime_types of this App.

        The list of secondary mime types.

        :param secondary_mime_types: The secondary_mime_types of this App.
        :type secondary_mime_types: List[str]
        """

        self._secondary_mime_types = secondary_mime_types

    @property
    def short_description(self):
        """Gets the short_description of this App.

        A short description of the app.

        :return: The short_description of this App.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this App.

        A short description of the app.

        :param short_description: The short_description of this App.
        :type short_description: str
        """

        self._short_description = short_description

    @property
    def supports_create(self):
        """Gets the supports_create of this App.

        Whether this app supports creating new objects.

        :return: The supports_create of this App.
        :rtype: bool
        """
        return self._supports_create

    @supports_create.setter
    def supports_create(self, supports_create):
        """Sets the supports_create of this App.

        Whether this app supports creating new objects.

        :param supports_create: The supports_create of this App.
        :type supports_create: bool
        """

        self._supports_create = supports_create

    @property
    def supports_import(self):
        """Gets the supports_import of this App.

        Whether this app supports importing from Docs Editors.

        :return: The supports_import of this App.
        :rtype: bool
        """
        return self._supports_import

    @supports_import.setter
    def supports_import(self, supports_import):
        """Sets the supports_import of this App.

        Whether this app supports importing from Docs Editors.

        :param supports_import: The supports_import of this App.
        :type supports_import: bool
        """

        self._supports_import = supports_import

    @property
    def supports_multi_open(self):
        """Gets the supports_multi_open of this App.

        Whether this app supports opening more than one file.

        :return: The supports_multi_open of this App.
        :rtype: bool
        """
        return self._supports_multi_open

    @supports_multi_open.setter
    def supports_multi_open(self, supports_multi_open):
        """Sets the supports_multi_open of this App.

        Whether this app supports opening more than one file.

        :param supports_multi_open: The supports_multi_open of this App.
        :type supports_multi_open: bool
        """

        self._supports_multi_open = supports_multi_open

    @property
    def supports_offline_create(self):
        """Gets the supports_offline_create of this App.

        Whether this app supports creating new files when offline.

        :return: The supports_offline_create of this App.
        :rtype: bool
        """
        return self._supports_offline_create

    @supports_offline_create.setter
    def supports_offline_create(self, supports_offline_create):
        """Sets the supports_offline_create of this App.

        Whether this app supports creating new files when offline.

        :param supports_offline_create: The supports_offline_create of this App.
        :type supports_offline_create: bool
        """

        self._supports_offline_create = supports_offline_create

    @property
    def use_by_default(self):
        """Gets the use_by_default of this App.

        Whether the app is selected as the default handler for the types it supports.

        :return: The use_by_default of this App.
        :rtype: bool
        """
        return self._use_by_default

    @use_by_default.setter
    def use_by_default(self, use_by_default):
        """Sets the use_by_default of this App.

        Whether the app is selected as the default handler for the types it supports.

        :param use_by_default: The use_by_default of this App.
        :type use_by_default: bool
        """

        self._use_by_default = use_by_default
