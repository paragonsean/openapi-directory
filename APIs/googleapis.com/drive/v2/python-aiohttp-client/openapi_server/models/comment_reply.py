# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class CommentReply(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: User=None, content: str=None, created_date: datetime=None, deleted: bool=None, html_content: str=None, kind: str='drive#commentReply', modified_date: datetime=None, reply_id: str=None, verb: str=None):
        """CommentReply - a model defined in OpenAPI

        :param author: The author of this CommentReply.
        :param content: The content of this CommentReply.
        :param created_date: The created_date of this CommentReply.
        :param deleted: The deleted of this CommentReply.
        :param html_content: The html_content of this CommentReply.
        :param kind: The kind of this CommentReply.
        :param modified_date: The modified_date of this CommentReply.
        :param reply_id: The reply_id of this CommentReply.
        :param verb: The verb of this CommentReply.
        """
        self.openapi_types = {
            'author': User,
            'content': str,
            'created_date': datetime,
            'deleted': bool,
            'html_content': str,
            'kind': str,
            'modified_date': datetime,
            'reply_id': str,
            'verb': str
        }

        self.attribute_map = {
            'author': 'author',
            'content': 'content',
            'created_date': 'createdDate',
            'deleted': 'deleted',
            'html_content': 'htmlContent',
            'kind': 'kind',
            'modified_date': 'modifiedDate',
            'reply_id': 'replyId',
            'verb': 'verb'
        }

        self._author = author
        self._content = content
        self._created_date = created_date
        self._deleted = deleted
        self._html_content = html_content
        self._kind = kind
        self._modified_date = modified_date
        self._reply_id = reply_id
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommentReply':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommentReply of this CommentReply.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this CommentReply.


        :return: The author of this CommentReply.
        :rtype: User
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommentReply.


        :param author: The author of this CommentReply.
        :type author: User
        """

        self._author = author

    @property
    def content(self):
        """Gets the content of this CommentReply.

        The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).

        :return: The content of this CommentReply.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CommentReply.

        The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).

        :param content: The content of this CommentReply.
        :type content: str
        """

        self._content = content

    @property
    def created_date(self):
        """Gets the created_date of this CommentReply.

        The date when this reply was first created.

        :return: The created_date of this CommentReply.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CommentReply.

        The date when this reply was first created.

        :param created_date: The created_date of this CommentReply.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def deleted(self):
        """Gets the deleted of this CommentReply.

        Output only. Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.

        :return: The deleted of this CommentReply.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CommentReply.

        Output only. Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.

        :param deleted: The deleted of this CommentReply.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def html_content(self):
        """Gets the html_content of this CommentReply.

        Output only. HTML formatted content for this reply.

        :return: The html_content of this CommentReply.
        :rtype: str
        """
        return self._html_content

    @html_content.setter
    def html_content(self, html_content):
        """Sets the html_content of this CommentReply.

        Output only. HTML formatted content for this reply.

        :param html_content: The html_content of this CommentReply.
        :type html_content: str
        """

        self._html_content = html_content

    @property
    def kind(self):
        """Gets the kind of this CommentReply.

        Output only. This is always `drive#commentReply`.

        :return: The kind of this CommentReply.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CommentReply.

        Output only. This is always `drive#commentReply`.

        :param kind: The kind of this CommentReply.
        :type kind: str
        """

        self._kind = kind

    @property
    def modified_date(self):
        """Gets the modified_date of this CommentReply.

        The date when this reply was last modified.

        :return: The modified_date of this CommentReply.
        :rtype: datetime
        """
        return self._modified_date

    @modified_date.setter
    def modified_date(self, modified_date):
        """Sets the modified_date of this CommentReply.

        The date when this reply was last modified.

        :param modified_date: The modified_date of this CommentReply.
        :type modified_date: datetime
        """

        self._modified_date = modified_date

    @property
    def reply_id(self):
        """Gets the reply_id of this CommentReply.

        Output only. The ID of the reply.

        :return: The reply_id of this CommentReply.
        :rtype: str
        """
        return self._reply_id

    @reply_id.setter
    def reply_id(self, reply_id):
        """Sets the reply_id of this CommentReply.

        Output only. The ID of the reply.

        :param reply_id: The reply_id of this CommentReply.
        :type reply_id: str
        """

        self._reply_id = reply_id

    @property
    def verb(self):
        """Gets the verb of this CommentReply.

        The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are: * `resolve` - To resolve a comment. * `reopen` - To reopen (un-resolve) a comment.

        :return: The verb of this CommentReply.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this CommentReply.

        The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are: * `resolve` - To resolve a comment. * `reopen` - To reopen (un-resolve) a comment.

        :param verb: The verb of this CommentReply.
        :type verb: str
        """

        self._verb = verb
