# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.about_additional_role_info_inner import AboutAdditionalRoleInfoInner
from openapi_server.models.about_drive_themes_inner import AboutDriveThemesInner
from openapi_server.models.about_export_formats_inner import AboutExportFormatsInner
from openapi_server.models.about_features_inner import AboutFeaturesInner
from openapi_server.models.about_import_formats_inner import AboutImportFormatsInner
from openapi_server.models.about_max_upload_sizes_inner import AboutMaxUploadSizesInner
from openapi_server.models.about_quota_bytes_by_service_inner import AboutQuotaBytesByServiceInner
from openapi_server.models.about_team_drive_themes_inner import AboutTeamDriveThemesInner
from openapi_server.models.user import User
from openapi_server import util


class About(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_role_info: List[AboutAdditionalRoleInfoInner]=None, can_create_drives: bool=None, can_create_team_drives: bool=None, domain_sharing_policy: str=None, drive_themes: List[AboutDriveThemesInner]=None, etag: str=None, export_formats: List[AboutExportFormatsInner]=None, features: List[AboutFeaturesInner]=None, folder_color_palette: List[str]=None, import_formats: List[AboutImportFormatsInner]=None, is_current_app_installed: bool=None, kind: str='drive#about', language_code: str=None, largest_change_id: str=None, max_upload_sizes: List[AboutMaxUploadSizesInner]=None, name: str=None, permission_id: str=None, quota_bytes_by_service: List[AboutQuotaBytesByServiceInner]=None, quota_bytes_total: str=None, quota_bytes_used: str=None, quota_bytes_used_aggregate: str=None, quota_bytes_used_in_trash: str=None, quota_type: str=None, remaining_change_ids: str=None, root_folder_id: str=None, self_link: str=None, team_drive_themes: List[AboutTeamDriveThemesInner]=None, user: User=None):
        """About - a model defined in OpenAPI

        :param additional_role_info: The additional_role_info of this About.
        :param can_create_drives: The can_create_drives of this About.
        :param can_create_team_drives: The can_create_team_drives of this About.
        :param domain_sharing_policy: The domain_sharing_policy of this About.
        :param drive_themes: The drive_themes of this About.
        :param etag: The etag of this About.
        :param export_formats: The export_formats of this About.
        :param features: The features of this About.
        :param folder_color_palette: The folder_color_palette of this About.
        :param import_formats: The import_formats of this About.
        :param is_current_app_installed: The is_current_app_installed of this About.
        :param kind: The kind of this About.
        :param language_code: The language_code of this About.
        :param largest_change_id: The largest_change_id of this About.
        :param max_upload_sizes: The max_upload_sizes of this About.
        :param name: The name of this About.
        :param permission_id: The permission_id of this About.
        :param quota_bytes_by_service: The quota_bytes_by_service of this About.
        :param quota_bytes_total: The quota_bytes_total of this About.
        :param quota_bytes_used: The quota_bytes_used of this About.
        :param quota_bytes_used_aggregate: The quota_bytes_used_aggregate of this About.
        :param quota_bytes_used_in_trash: The quota_bytes_used_in_trash of this About.
        :param quota_type: The quota_type of this About.
        :param remaining_change_ids: The remaining_change_ids of this About.
        :param root_folder_id: The root_folder_id of this About.
        :param self_link: The self_link of this About.
        :param team_drive_themes: The team_drive_themes of this About.
        :param user: The user of this About.
        """
        self.openapi_types = {
            'additional_role_info': List[AboutAdditionalRoleInfoInner],
            'can_create_drives': bool,
            'can_create_team_drives': bool,
            'domain_sharing_policy': str,
            'drive_themes': List[AboutDriveThemesInner],
            'etag': str,
            'export_formats': List[AboutExportFormatsInner],
            'features': List[AboutFeaturesInner],
            'folder_color_palette': List[str],
            'import_formats': List[AboutImportFormatsInner],
            'is_current_app_installed': bool,
            'kind': str,
            'language_code': str,
            'largest_change_id': str,
            'max_upload_sizes': List[AboutMaxUploadSizesInner],
            'name': str,
            'permission_id': str,
            'quota_bytes_by_service': List[AboutQuotaBytesByServiceInner],
            'quota_bytes_total': str,
            'quota_bytes_used': str,
            'quota_bytes_used_aggregate': str,
            'quota_bytes_used_in_trash': str,
            'quota_type': str,
            'remaining_change_ids': str,
            'root_folder_id': str,
            'self_link': str,
            'team_drive_themes': List[AboutTeamDriveThemesInner],
            'user': User
        }

        self.attribute_map = {
            'additional_role_info': 'additionalRoleInfo',
            'can_create_drives': 'canCreateDrives',
            'can_create_team_drives': 'canCreateTeamDrives',
            'domain_sharing_policy': 'domainSharingPolicy',
            'drive_themes': 'driveThemes',
            'etag': 'etag',
            'export_formats': 'exportFormats',
            'features': 'features',
            'folder_color_palette': 'folderColorPalette',
            'import_formats': 'importFormats',
            'is_current_app_installed': 'isCurrentAppInstalled',
            'kind': 'kind',
            'language_code': 'languageCode',
            'largest_change_id': 'largestChangeId',
            'max_upload_sizes': 'maxUploadSizes',
            'name': 'name',
            'permission_id': 'permissionId',
            'quota_bytes_by_service': 'quotaBytesByService',
            'quota_bytes_total': 'quotaBytesTotal',
            'quota_bytes_used': 'quotaBytesUsed',
            'quota_bytes_used_aggregate': 'quotaBytesUsedAggregate',
            'quota_bytes_used_in_trash': 'quotaBytesUsedInTrash',
            'quota_type': 'quotaType',
            'remaining_change_ids': 'remainingChangeIds',
            'root_folder_id': 'rootFolderId',
            'self_link': 'selfLink',
            'team_drive_themes': 'teamDriveThemes',
            'user': 'user'
        }

        self._additional_role_info = additional_role_info
        self._can_create_drives = can_create_drives
        self._can_create_team_drives = can_create_team_drives
        self._domain_sharing_policy = domain_sharing_policy
        self._drive_themes = drive_themes
        self._etag = etag
        self._export_formats = export_formats
        self._features = features
        self._folder_color_palette = folder_color_palette
        self._import_formats = import_formats
        self._is_current_app_installed = is_current_app_installed
        self._kind = kind
        self._language_code = language_code
        self._largest_change_id = largest_change_id
        self._max_upload_sizes = max_upload_sizes
        self._name = name
        self._permission_id = permission_id
        self._quota_bytes_by_service = quota_bytes_by_service
        self._quota_bytes_total = quota_bytes_total
        self._quota_bytes_used = quota_bytes_used
        self._quota_bytes_used_aggregate = quota_bytes_used_aggregate
        self._quota_bytes_used_in_trash = quota_bytes_used_in_trash
        self._quota_type = quota_type
        self._remaining_change_ids = remaining_change_ids
        self._root_folder_id = root_folder_id
        self._self_link = self_link
        self._team_drive_themes = team_drive_themes
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'About':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The About of this About.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_role_info(self):
        """Gets the additional_role_info of this About.

        Information about supported additional roles per file type. The most specific type takes precedence.

        :return: The additional_role_info of this About.
        :rtype: List[AboutAdditionalRoleInfoInner]
        """
        return self._additional_role_info

    @additional_role_info.setter
    def additional_role_info(self, additional_role_info):
        """Sets the additional_role_info of this About.

        Information about supported additional roles per file type. The most specific type takes precedence.

        :param additional_role_info: The additional_role_info of this About.
        :type additional_role_info: List[AboutAdditionalRoleInfoInner]
        """

        self._additional_role_info = additional_role_info

    @property
    def can_create_drives(self):
        """Gets the can_create_drives of this About.

        Whether the user can create shared drives.

        :return: The can_create_drives of this About.
        :rtype: bool
        """
        return self._can_create_drives

    @can_create_drives.setter
    def can_create_drives(self, can_create_drives):
        """Sets the can_create_drives of this About.

        Whether the user can create shared drives.

        :param can_create_drives: The can_create_drives of this About.
        :type can_create_drives: bool
        """

        self._can_create_drives = can_create_drives

    @property
    def can_create_team_drives(self):
        """Gets the can_create_team_drives of this About.

        Deprecated: Use `canCreateDrives` instead.

        :return: The can_create_team_drives of this About.
        :rtype: bool
        """
        return self._can_create_team_drives

    @can_create_team_drives.setter
    def can_create_team_drives(self, can_create_team_drives):
        """Sets the can_create_team_drives of this About.

        Deprecated: Use `canCreateDrives` instead.

        :param can_create_team_drives: The can_create_team_drives of this About.
        :type can_create_team_drives: bool
        """

        self._can_create_team_drives = can_create_team_drives

    @property
    def domain_sharing_policy(self):
        """Gets the domain_sharing_policy of this About.

        The domain sharing policy for the current user. Possible values are: * `allowed` * `allowedWithWarning` * `incomingOnly` * `disallowed`

        :return: The domain_sharing_policy of this About.
        :rtype: str
        """
        return self._domain_sharing_policy

    @domain_sharing_policy.setter
    def domain_sharing_policy(self, domain_sharing_policy):
        """Sets the domain_sharing_policy of this About.

        The domain sharing policy for the current user. Possible values are: * `allowed` * `allowedWithWarning` * `incomingOnly` * `disallowed`

        :param domain_sharing_policy: The domain_sharing_policy of this About.
        :type domain_sharing_policy: str
        """

        self._domain_sharing_policy = domain_sharing_policy

    @property
    def drive_themes(self):
        """Gets the drive_themes of this About.

        A list of themes that are supported for shared drives.

        :return: The drive_themes of this About.
        :rtype: List[AboutDriveThemesInner]
        """
        return self._drive_themes

    @drive_themes.setter
    def drive_themes(self, drive_themes):
        """Sets the drive_themes of this About.

        A list of themes that are supported for shared drives.

        :param drive_themes: The drive_themes of this About.
        :type drive_themes: List[AboutDriveThemesInner]
        """

        self._drive_themes = drive_themes

    @property
    def etag(self):
        """Gets the etag of this About.

        The ETag of the item.

        :return: The etag of this About.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this About.

        The ETag of the item.

        :param etag: The etag of this About.
        :type etag: str
        """

        self._etag = etag

    @property
    def export_formats(self):
        """Gets the export_formats of this About.

        The allowable export formats.

        :return: The export_formats of this About.
        :rtype: List[AboutExportFormatsInner]
        """
        return self._export_formats

    @export_formats.setter
    def export_formats(self, export_formats):
        """Sets the export_formats of this About.

        The allowable export formats.

        :param export_formats: The export_formats of this About.
        :type export_formats: List[AboutExportFormatsInner]
        """

        self._export_formats = export_formats

    @property
    def features(self):
        """Gets the features of this About.

        List of additional features enabled on this account.

        :return: The features of this About.
        :rtype: List[AboutFeaturesInner]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this About.

        List of additional features enabled on this account.

        :param features: The features of this About.
        :type features: List[AboutFeaturesInner]
        """

        self._features = features

    @property
    def folder_color_palette(self):
        """Gets the folder_color_palette of this About.

        The palette of allowable folder colors as RGB hex strings.

        :return: The folder_color_palette of this About.
        :rtype: List[str]
        """
        return self._folder_color_palette

    @folder_color_palette.setter
    def folder_color_palette(self, folder_color_palette):
        """Sets the folder_color_palette of this About.

        The palette of allowable folder colors as RGB hex strings.

        :param folder_color_palette: The folder_color_palette of this About.
        :type folder_color_palette: List[str]
        """

        self._folder_color_palette = folder_color_palette

    @property
    def import_formats(self):
        """Gets the import_formats of this About.

        The allowable import formats.

        :return: The import_formats of this About.
        :rtype: List[AboutImportFormatsInner]
        """
        return self._import_formats

    @import_formats.setter
    def import_formats(self, import_formats):
        """Sets the import_formats of this About.

        The allowable import formats.

        :param import_formats: The import_formats of this About.
        :type import_formats: List[AboutImportFormatsInner]
        """

        self._import_formats = import_formats

    @property
    def is_current_app_installed(self):
        """Gets the is_current_app_installed of this About.

        A boolean indicating whether the authenticated app is installed by the authenticated user.

        :return: The is_current_app_installed of this About.
        :rtype: bool
        """
        return self._is_current_app_installed

    @is_current_app_installed.setter
    def is_current_app_installed(self, is_current_app_installed):
        """Sets the is_current_app_installed of this About.

        A boolean indicating whether the authenticated app is installed by the authenticated user.

        :param is_current_app_installed: The is_current_app_installed of this About.
        :type is_current_app_installed: bool
        """

        self._is_current_app_installed = is_current_app_installed

    @property
    def kind(self):
        """Gets the kind of this About.

        This is always `drive#about`.

        :return: The kind of this About.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this About.

        This is always `drive#about`.

        :param kind: The kind of this About.
        :type kind: str
        """

        self._kind = kind

    @property
    def language_code(self):
        """Gets the language_code of this About.

        The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).

        :return: The language_code of this About.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this About.

        The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).

        :param language_code: The language_code of this About.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def largest_change_id(self):
        """Gets the largest_change_id of this About.

        The largest change id.

        :return: The largest_change_id of this About.
        :rtype: str
        """
        return self._largest_change_id

    @largest_change_id.setter
    def largest_change_id(self, largest_change_id):
        """Sets the largest_change_id of this About.

        The largest change id.

        :param largest_change_id: The largest_change_id of this About.
        :type largest_change_id: str
        """

        self._largest_change_id = largest_change_id

    @property
    def max_upload_sizes(self):
        """Gets the max_upload_sizes of this About.

        List of max upload sizes for each file type. The most specific type takes precedence.

        :return: The max_upload_sizes of this About.
        :rtype: List[AboutMaxUploadSizesInner]
        """
        return self._max_upload_sizes

    @max_upload_sizes.setter
    def max_upload_sizes(self, max_upload_sizes):
        """Sets the max_upload_sizes of this About.

        List of max upload sizes for each file type. The most specific type takes precedence.

        :param max_upload_sizes: The max_upload_sizes of this About.
        :type max_upload_sizes: List[AboutMaxUploadSizesInner]
        """

        self._max_upload_sizes = max_upload_sizes

    @property
    def name(self):
        """Gets the name of this About.

        The name of the current user.

        :return: The name of this About.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this About.

        The name of the current user.

        :param name: The name of this About.
        :type name: str
        """

        self._name = name

    @property
    def permission_id(self):
        """Gets the permission_id of this About.

        The current user's ID as visible in the permissions collection.

        :return: The permission_id of this About.
        :rtype: str
        """
        return self._permission_id

    @permission_id.setter
    def permission_id(self, permission_id):
        """Sets the permission_id of this About.

        The current user's ID as visible in the permissions collection.

        :param permission_id: The permission_id of this About.
        :type permission_id: str
        """

        self._permission_id = permission_id

    @property
    def quota_bytes_by_service(self):
        """Gets the quota_bytes_by_service of this About.

        The amount of storage quota used by different Google services.

        :return: The quota_bytes_by_service of this About.
        :rtype: List[AboutQuotaBytesByServiceInner]
        """
        return self._quota_bytes_by_service

    @quota_bytes_by_service.setter
    def quota_bytes_by_service(self, quota_bytes_by_service):
        """Sets the quota_bytes_by_service of this About.

        The amount of storage quota used by different Google services.

        :param quota_bytes_by_service: The quota_bytes_by_service of this About.
        :type quota_bytes_by_service: List[AboutQuotaBytesByServiceInner]
        """

        self._quota_bytes_by_service = quota_bytes_by_service

    @property
    def quota_bytes_total(self):
        """Gets the quota_bytes_total of this About.

        The total number of quota bytes. This is only relevant when quotaType is LIMITED.

        :return: The quota_bytes_total of this About.
        :rtype: str
        """
        return self._quota_bytes_total

    @quota_bytes_total.setter
    def quota_bytes_total(self, quota_bytes_total):
        """Sets the quota_bytes_total of this About.

        The total number of quota bytes. This is only relevant when quotaType is LIMITED.

        :param quota_bytes_total: The quota_bytes_total of this About.
        :type quota_bytes_total: str
        """

        self._quota_bytes_total = quota_bytes_total

    @property
    def quota_bytes_used(self):
        """Gets the quota_bytes_used of this About.

        The number of quota bytes used by Google Drive.

        :return: The quota_bytes_used of this About.
        :rtype: str
        """
        return self._quota_bytes_used

    @quota_bytes_used.setter
    def quota_bytes_used(self, quota_bytes_used):
        """Sets the quota_bytes_used of this About.

        The number of quota bytes used by Google Drive.

        :param quota_bytes_used: The quota_bytes_used of this About.
        :type quota_bytes_used: str
        """

        self._quota_bytes_used = quota_bytes_used

    @property
    def quota_bytes_used_aggregate(self):
        """Gets the quota_bytes_used_aggregate of this About.

        The number of quota bytes used by all Google apps (Drive, Picasa, etc.).

        :return: The quota_bytes_used_aggregate of this About.
        :rtype: str
        """
        return self._quota_bytes_used_aggregate

    @quota_bytes_used_aggregate.setter
    def quota_bytes_used_aggregate(self, quota_bytes_used_aggregate):
        """Sets the quota_bytes_used_aggregate of this About.

        The number of quota bytes used by all Google apps (Drive, Picasa, etc.).

        :param quota_bytes_used_aggregate: The quota_bytes_used_aggregate of this About.
        :type quota_bytes_used_aggregate: str
        """

        self._quota_bytes_used_aggregate = quota_bytes_used_aggregate

    @property
    def quota_bytes_used_in_trash(self):
        """Gets the quota_bytes_used_in_trash of this About.

        The number of quota bytes used by trashed items.

        :return: The quota_bytes_used_in_trash of this About.
        :rtype: str
        """
        return self._quota_bytes_used_in_trash

    @quota_bytes_used_in_trash.setter
    def quota_bytes_used_in_trash(self, quota_bytes_used_in_trash):
        """Sets the quota_bytes_used_in_trash of this About.

        The number of quota bytes used by trashed items.

        :param quota_bytes_used_in_trash: The quota_bytes_used_in_trash of this About.
        :type quota_bytes_used_in_trash: str
        """

        self._quota_bytes_used_in_trash = quota_bytes_used_in_trash

    @property
    def quota_type(self):
        """Gets the quota_type of this About.

        The type of the user's storage quota. Possible values are: * `LIMITED` * `UNLIMITED`

        :return: The quota_type of this About.
        :rtype: str
        """
        return self._quota_type

    @quota_type.setter
    def quota_type(self, quota_type):
        """Sets the quota_type of this About.

        The type of the user's storage quota. Possible values are: * `LIMITED` * `UNLIMITED`

        :param quota_type: The quota_type of this About.
        :type quota_type: str
        """

        self._quota_type = quota_type

    @property
    def remaining_change_ids(self):
        """Gets the remaining_change_ids of this About.

        The number of remaining change ids, limited to no more than 2500.

        :return: The remaining_change_ids of this About.
        :rtype: str
        """
        return self._remaining_change_ids

    @remaining_change_ids.setter
    def remaining_change_ids(self, remaining_change_ids):
        """Sets the remaining_change_ids of this About.

        The number of remaining change ids, limited to no more than 2500.

        :param remaining_change_ids: The remaining_change_ids of this About.
        :type remaining_change_ids: str
        """

        self._remaining_change_ids = remaining_change_ids

    @property
    def root_folder_id(self):
        """Gets the root_folder_id of this About.

        The id of the root folder.

        :return: The root_folder_id of this About.
        :rtype: str
        """
        return self._root_folder_id

    @root_folder_id.setter
    def root_folder_id(self, root_folder_id):
        """Sets the root_folder_id of this About.

        The id of the root folder.

        :param root_folder_id: The root_folder_id of this About.
        :type root_folder_id: str
        """

        self._root_folder_id = root_folder_id

    @property
    def self_link(self):
        """Gets the self_link of this About.

        A link back to this item.

        :return: The self_link of this About.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this About.

        A link back to this item.

        :param self_link: The self_link of this About.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def team_drive_themes(self):
        """Gets the team_drive_themes of this About.

        Deprecated: Use `driveThemes` instead.

        :return: The team_drive_themes of this About.
        :rtype: List[AboutTeamDriveThemesInner]
        """
        return self._team_drive_themes

    @team_drive_themes.setter
    def team_drive_themes(self, team_drive_themes):
        """Sets the team_drive_themes of this About.

        Deprecated: Use `driveThemes` instead.

        :param team_drive_themes: The team_drive_themes of this About.
        :type team_drive_themes: List[AboutTeamDriveThemesInner]
        """

        self._team_drive_themes = team_drive_themes

    @property
    def user(self):
        """Gets the user of this About.


        :return: The user of this About.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this About.


        :param user: The user of this About.
        :type user: User
        """

        self._user = user
