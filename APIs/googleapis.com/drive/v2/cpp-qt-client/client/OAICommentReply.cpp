/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommentReply.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommentReply::OAICommentReply(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommentReply::OAICommentReply() {
    this->initializeModel();
}

OAICommentReply::~OAICommentReply() {}

void OAICommentReply::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_html_content_isSet = false;
    m_html_content_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_reply_id_isSet = false;
    m_reply_id_isValid = false;

    m_verb_isSet = false;
    m_verb_isValid = false;
}

void OAICommentReply::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommentReply::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_html_content_isValid = ::OpenAPI::fromJsonValue(m_html_content, json[QString("htmlContent")]);
    m_html_content_isSet = !json[QString("htmlContent")].isNull() && m_html_content_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_reply_id_isValid = ::OpenAPI::fromJsonValue(m_reply_id, json[QString("replyId")]);
    m_reply_id_isSet = !json[QString("replyId")].isNull() && m_reply_id_isValid;

    m_verb_isValid = ::OpenAPI::fromJsonValue(m_verb, json[QString("verb")]);
    m_verb_isSet = !json[QString("verb")].isNull() && m_verb_isValid;
}

QString OAICommentReply::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommentReply::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_html_content_isSet) {
        obj.insert(QString("htmlContent"), ::OpenAPI::toJsonValue(m_html_content));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_reply_id_isSet) {
        obj.insert(QString("replyId"), ::OpenAPI::toJsonValue(m_reply_id));
    }
    if (m_verb_isSet) {
        obj.insert(QString("verb"), ::OpenAPI::toJsonValue(m_verb));
    }
    return obj;
}

OAIUser OAICommentReply::getAuthor() const {
    return m_author;
}
void OAICommentReply::setAuthor(const OAIUser &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICommentReply::is_author_Set() const{
    return m_author_isSet;
}

bool OAICommentReply::is_author_Valid() const{
    return m_author_isValid;
}

QString OAICommentReply::getContent() const {
    return m_content;
}
void OAICommentReply::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAICommentReply::is_content_Set() const{
    return m_content_isSet;
}

bool OAICommentReply::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAICommentReply::getCreatedDate() const {
    return m_created_date;
}
void OAICommentReply::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICommentReply::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICommentReply::is_created_date_Valid() const{
    return m_created_date_isValid;
}

bool OAICommentReply::isDeleted() const {
    return m_deleted;
}
void OAICommentReply::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAICommentReply::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAICommentReply::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAICommentReply::getHtmlContent() const {
    return m_html_content;
}
void OAICommentReply::setHtmlContent(const QString &html_content) {
    m_html_content = html_content;
    m_html_content_isSet = true;
}

bool OAICommentReply::is_html_content_Set() const{
    return m_html_content_isSet;
}

bool OAICommentReply::is_html_content_Valid() const{
    return m_html_content_isValid;
}

QString OAICommentReply::getKind() const {
    return m_kind;
}
void OAICommentReply::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICommentReply::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICommentReply::is_kind_Valid() const{
    return m_kind_isValid;
}

QDateTime OAICommentReply::getModifiedDate() const {
    return m_modified_date;
}
void OAICommentReply::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAICommentReply::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAICommentReply::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAICommentReply::getReplyId() const {
    return m_reply_id;
}
void OAICommentReply::setReplyId(const QString &reply_id) {
    m_reply_id = reply_id;
    m_reply_id_isSet = true;
}

bool OAICommentReply::is_reply_id_Set() const{
    return m_reply_id_isSet;
}

bool OAICommentReply::is_reply_id_Valid() const{
    return m_reply_id_isValid;
}

QString OAICommentReply::getVerb() const {
    return m_verb;
}
void OAICommentReply::setVerb(const QString &verb) {
    m_verb = verb;
    m_verb_isSet = true;
}

bool OAICommentReply::is_verb_Set() const{
    return m_verb_isSet;
}

bool OAICommentReply::is_verb_Valid() const{
    return m_verb_isValid;
}

bool OAICommentReply::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommentReply::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
