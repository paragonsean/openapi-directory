/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabelFieldModification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabelFieldModification::OAILabelFieldModification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabelFieldModification::OAILabelFieldModification() {
    this->initializeModel();
}

OAILabelFieldModification::~OAILabelFieldModification() {}

void OAILabelFieldModification::initializeModel() {

    m_field_id_isSet = false;
    m_field_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_set_date_values_isSet = false;
    m_set_date_values_isValid = false;

    m_set_integer_values_isSet = false;
    m_set_integer_values_isValid = false;

    m_set_selection_values_isSet = false;
    m_set_selection_values_isValid = false;

    m_set_text_values_isSet = false;
    m_set_text_values_isValid = false;

    m_set_user_values_isSet = false;
    m_set_user_values_isValid = false;

    m_unset_values_isSet = false;
    m_unset_values_isValid = false;
}

void OAILabelFieldModification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabelFieldModification::fromJsonObject(QJsonObject json) {

    m_field_id_isValid = ::OpenAPI::fromJsonValue(m_field_id, json[QString("fieldId")]);
    m_field_id_isSet = !json[QString("fieldId")].isNull() && m_field_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_set_date_values_isValid = ::OpenAPI::fromJsonValue(m_set_date_values, json[QString("setDateValues")]);
    m_set_date_values_isSet = !json[QString("setDateValues")].isNull() && m_set_date_values_isValid;

    m_set_integer_values_isValid = ::OpenAPI::fromJsonValue(m_set_integer_values, json[QString("setIntegerValues")]);
    m_set_integer_values_isSet = !json[QString("setIntegerValues")].isNull() && m_set_integer_values_isValid;

    m_set_selection_values_isValid = ::OpenAPI::fromJsonValue(m_set_selection_values, json[QString("setSelectionValues")]);
    m_set_selection_values_isSet = !json[QString("setSelectionValues")].isNull() && m_set_selection_values_isValid;

    m_set_text_values_isValid = ::OpenAPI::fromJsonValue(m_set_text_values, json[QString("setTextValues")]);
    m_set_text_values_isSet = !json[QString("setTextValues")].isNull() && m_set_text_values_isValid;

    m_set_user_values_isValid = ::OpenAPI::fromJsonValue(m_set_user_values, json[QString("setUserValues")]);
    m_set_user_values_isSet = !json[QString("setUserValues")].isNull() && m_set_user_values_isValid;

    m_unset_values_isValid = ::OpenAPI::fromJsonValue(m_unset_values, json[QString("unsetValues")]);
    m_unset_values_isSet = !json[QString("unsetValues")].isNull() && m_unset_values_isValid;
}

QString OAILabelFieldModification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabelFieldModification::asJsonObject() const {
    QJsonObject obj;
    if (m_field_id_isSet) {
        obj.insert(QString("fieldId"), ::OpenAPI::toJsonValue(m_field_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_set_date_values.size() > 0) {
        obj.insert(QString("setDateValues"), ::OpenAPI::toJsonValue(m_set_date_values));
    }
    if (m_set_integer_values.size() > 0) {
        obj.insert(QString("setIntegerValues"), ::OpenAPI::toJsonValue(m_set_integer_values));
    }
    if (m_set_selection_values.size() > 0) {
        obj.insert(QString("setSelectionValues"), ::OpenAPI::toJsonValue(m_set_selection_values));
    }
    if (m_set_text_values.size() > 0) {
        obj.insert(QString("setTextValues"), ::OpenAPI::toJsonValue(m_set_text_values));
    }
    if (m_set_user_values.size() > 0) {
        obj.insert(QString("setUserValues"), ::OpenAPI::toJsonValue(m_set_user_values));
    }
    if (m_unset_values_isSet) {
        obj.insert(QString("unsetValues"), ::OpenAPI::toJsonValue(m_unset_values));
    }
    return obj;
}

QString OAILabelFieldModification::getFieldId() const {
    return m_field_id;
}
void OAILabelFieldModification::setFieldId(const QString &field_id) {
    m_field_id = field_id;
    m_field_id_isSet = true;
}

bool OAILabelFieldModification::is_field_id_Set() const{
    return m_field_id_isSet;
}

bool OAILabelFieldModification::is_field_id_Valid() const{
    return m_field_id_isValid;
}

QString OAILabelFieldModification::getKind() const {
    return m_kind;
}
void OAILabelFieldModification::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILabelFieldModification::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILabelFieldModification::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QDate> OAILabelFieldModification::getSetDateValues() const {
    return m_set_date_values;
}
void OAILabelFieldModification::setSetDateValues(const QList<QDate> &set_date_values) {
    m_set_date_values = set_date_values;
    m_set_date_values_isSet = true;
}

bool OAILabelFieldModification::is_set_date_values_Set() const{
    return m_set_date_values_isSet;
}

bool OAILabelFieldModification::is_set_date_values_Valid() const{
    return m_set_date_values_isValid;
}

QList<QString> OAILabelFieldModification::getSetIntegerValues() const {
    return m_set_integer_values;
}
void OAILabelFieldModification::setSetIntegerValues(const QList<QString> &set_integer_values) {
    m_set_integer_values = set_integer_values;
    m_set_integer_values_isSet = true;
}

bool OAILabelFieldModification::is_set_integer_values_Set() const{
    return m_set_integer_values_isSet;
}

bool OAILabelFieldModification::is_set_integer_values_Valid() const{
    return m_set_integer_values_isValid;
}

QList<QString> OAILabelFieldModification::getSetSelectionValues() const {
    return m_set_selection_values;
}
void OAILabelFieldModification::setSetSelectionValues(const QList<QString> &set_selection_values) {
    m_set_selection_values = set_selection_values;
    m_set_selection_values_isSet = true;
}

bool OAILabelFieldModification::is_set_selection_values_Set() const{
    return m_set_selection_values_isSet;
}

bool OAILabelFieldModification::is_set_selection_values_Valid() const{
    return m_set_selection_values_isValid;
}

QList<QString> OAILabelFieldModification::getSetTextValues() const {
    return m_set_text_values;
}
void OAILabelFieldModification::setSetTextValues(const QList<QString> &set_text_values) {
    m_set_text_values = set_text_values;
    m_set_text_values_isSet = true;
}

bool OAILabelFieldModification::is_set_text_values_Set() const{
    return m_set_text_values_isSet;
}

bool OAILabelFieldModification::is_set_text_values_Valid() const{
    return m_set_text_values_isValid;
}

QList<QString> OAILabelFieldModification::getSetUserValues() const {
    return m_set_user_values;
}
void OAILabelFieldModification::setSetUserValues(const QList<QString> &set_user_values) {
    m_set_user_values = set_user_values;
    m_set_user_values_isSet = true;
}

bool OAILabelFieldModification::is_set_user_values_Set() const{
    return m_set_user_values_isSet;
}

bool OAILabelFieldModification::is_set_user_values_Valid() const{
    return m_set_user_values_isValid;
}

bool OAILabelFieldModification::isUnsetValues() const {
    return m_unset_values;
}
void OAILabelFieldModification::setUnsetValues(const bool &unset_values) {
    m_unset_values = unset_values;
    m_unset_values_isSet = true;
}

bool OAILabelFieldModification::is_unset_values_Set() const{
    return m_unset_values_isSet;
}

bool OAILabelFieldModification::is_unset_values_Valid() const{
    return m_unset_values_isValid;
}

bool OAILabelFieldModification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_date_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_integer_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_selection_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_text_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_user_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unset_values_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabelFieldModification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
