/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_labels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_labels::OAIFile_labels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_labels::OAIFile_labels() {
    this->initializeModel();
}

OAIFile_labels::~OAIFile_labels() {}

void OAIFile_labels::initializeModel() {

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_modified_isSet = false;
    m_modified_isValid = false;

    m_restricted_isSet = false;
    m_restricted_isValid = false;

    m_starred_isSet = false;
    m_starred_isValid = false;

    m_trashed_isSet = false;
    m_trashed_isValid = false;

    m_viewed_isSet = false;
    m_viewed_isValid = false;
}

void OAIFile_labels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_labels::fromJsonObject(QJsonObject json) {

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_modified_isValid = ::OpenAPI::fromJsonValue(m_modified, json[QString("modified")]);
    m_modified_isSet = !json[QString("modified")].isNull() && m_modified_isValid;

    m_restricted_isValid = ::OpenAPI::fromJsonValue(m_restricted, json[QString("restricted")]);
    m_restricted_isSet = !json[QString("restricted")].isNull() && m_restricted_isValid;

    m_starred_isValid = ::OpenAPI::fromJsonValue(m_starred, json[QString("starred")]);
    m_starred_isSet = !json[QString("starred")].isNull() && m_starred_isValid;

    m_trashed_isValid = ::OpenAPI::fromJsonValue(m_trashed, json[QString("trashed")]);
    m_trashed_isSet = !json[QString("trashed")].isNull() && m_trashed_isValid;

    m_viewed_isValid = ::OpenAPI::fromJsonValue(m_viewed, json[QString("viewed")]);
    m_viewed_isSet = !json[QString("viewed")].isNull() && m_viewed_isValid;
}

QString OAIFile_labels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_labels::asJsonObject() const {
    QJsonObject obj;
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_modified_isSet) {
        obj.insert(QString("modified"), ::OpenAPI::toJsonValue(m_modified));
    }
    if (m_restricted_isSet) {
        obj.insert(QString("restricted"), ::OpenAPI::toJsonValue(m_restricted));
    }
    if (m_starred_isSet) {
        obj.insert(QString("starred"), ::OpenAPI::toJsonValue(m_starred));
    }
    if (m_trashed_isSet) {
        obj.insert(QString("trashed"), ::OpenAPI::toJsonValue(m_trashed));
    }
    if (m_viewed_isSet) {
        obj.insert(QString("viewed"), ::OpenAPI::toJsonValue(m_viewed));
    }
    return obj;
}

bool OAIFile_labels::isHidden() const {
    return m_hidden;
}
void OAIFile_labels::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIFile_labels::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIFile_labels::is_hidden_Valid() const{
    return m_hidden_isValid;
}

bool OAIFile_labels::isModified() const {
    return m_modified;
}
void OAIFile_labels::setModified(const bool &modified) {
    m_modified = modified;
    m_modified_isSet = true;
}

bool OAIFile_labels::is_modified_Set() const{
    return m_modified_isSet;
}

bool OAIFile_labels::is_modified_Valid() const{
    return m_modified_isValid;
}

bool OAIFile_labels::isRestricted() const {
    return m_restricted;
}
void OAIFile_labels::setRestricted(const bool &restricted) {
    m_restricted = restricted;
    m_restricted_isSet = true;
}

bool OAIFile_labels::is_restricted_Set() const{
    return m_restricted_isSet;
}

bool OAIFile_labels::is_restricted_Valid() const{
    return m_restricted_isValid;
}

bool OAIFile_labels::isStarred() const {
    return m_starred;
}
void OAIFile_labels::setStarred(const bool &starred) {
    m_starred = starred;
    m_starred_isSet = true;
}

bool OAIFile_labels::is_starred_Set() const{
    return m_starred_isSet;
}

bool OAIFile_labels::is_starred_Valid() const{
    return m_starred_isValid;
}

bool OAIFile_labels::isTrashed() const {
    return m_trashed;
}
void OAIFile_labels::setTrashed(const bool &trashed) {
    m_trashed = trashed;
    m_trashed_isSet = true;
}

bool OAIFile_labels::is_trashed_Set() const{
    return m_trashed_isSet;
}

bool OAIFile_labels::is_trashed_Valid() const{
    return m_trashed_isValid;
}

bool OAIFile_labels::isViewed() const {
    return m_viewed;
}
void OAIFile_labels::setViewed(const bool &viewed) {
    m_viewed = viewed;
    m_viewed_isSet = true;
}

bool OAIFile_labels::is_viewed_Set() const{
    return m_viewed_isSet;
}

bool OAIFile_labels::is_viewed_Valid() const{
    return m_viewed_isValid;
}

bool OAIFile_labels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_labels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
