/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionsApi_H
#define OAI_OAIPermissionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPermission.h"
#include "OAIPermissionId.h"
#include "OAIPermissionList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionsApi : public QObject {
    Q_OBJECT

public:
    OAIPermissionsApi(const int timeOut = 0);
    ~OAIPermissionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  permission_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    */
    virtual void drive_permissions_delete(const QString &file_id, const QString &permission_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  permission_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    */
    virtual void drive_permissions_get(const QString &file_id, const QString &permission_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  email QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void drive_permissions_getIdForEmail(const QString &email, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  email_message QString [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  move_to_new_owners_root bool [optional]
    * @param[in]  send_notification_emails bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    * @param[in]  oai_permission OAIPermission [optional]
    */
    virtual void drive_permissions_insert(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &email_message = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &move_to_new_owners_root = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &send_notification_emails = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPermission> &oai_permission = ::OpenAPI::OptionalParam<OAIPermission>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    */
    virtual void drive_permissions_list(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  permission_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  remove_expiration bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  transfer_ownership bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    * @param[in]  oai_permission OAIPermission [optional]
    */
    virtual void drive_permissions_patch(const QString &file_id, const QString &permission_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &remove_expiration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &transfer_ownership = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPermission> &oai_permission = ::OpenAPI::OptionalParam<OAIPermission>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  permission_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  remove_expiration bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  transfer_ownership bool [optional]
    * @param[in]  use_domain_admin_access bool [optional]
    * @param[in]  oai_permission OAIPermission [optional]
    */
    virtual void drive_permissions_update(const QString &file_id, const QString &permission_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &remove_expiration = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &transfer_ownership = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_domain_admin_access = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIPermission> &oai_permission = ::OpenAPI::OptionalParam<OAIPermission>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void drive_permissions_deleteCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_getCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_getIdForEmailCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_insertCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_listCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_patchCallback(OAIHttpRequestWorker *worker);
    void drive_permissions_updateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void drive_permissions_deleteSignal();
    void drive_permissions_getSignal(OAIPermission summary);
    void drive_permissions_getIdForEmailSignal(OAIPermissionId summary);
    void drive_permissions_insertSignal(OAIPermission summary);
    void drive_permissions_listSignal(OAIPermissionList summary);
    void drive_permissions_patchSignal(OAIPermission summary);
    void drive_permissions_updateSignal(OAIPermission summary);


    void drive_permissions_deleteSignalFull(OAIHttpRequestWorker *worker);
    void drive_permissions_getSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void drive_permissions_getIdForEmailSignalFull(OAIHttpRequestWorker *worker, OAIPermissionId summary);
    void drive_permissions_insertSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void drive_permissions_listSignalFull(OAIHttpRequestWorker *worker, OAIPermissionList summary);
    void drive_permissions_patchSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void drive_permissions_updateSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);

    Q_DECL_DEPRECATED_X("Use drive_permissions_deleteSignalError() instead")
    void drive_permissions_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_getSignalError() instead")
    void drive_permissions_getSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_getSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_getIdForEmailSignalError() instead")
    void drive_permissions_getIdForEmailSignalE(OAIPermissionId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_getIdForEmailSignalError(OAIPermissionId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_insertSignalError() instead")
    void drive_permissions_insertSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_insertSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_listSignalError() instead")
    void drive_permissions_listSignalE(OAIPermissionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_listSignalError(OAIPermissionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_patchSignalError() instead")
    void drive_permissions_patchSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_patchSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_updateSignalError() instead")
    void drive_permissions_updateSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_updateSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use drive_permissions_deleteSignalErrorFull() instead")
    void drive_permissions_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_getSignalErrorFull() instead")
    void drive_permissions_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_getIdForEmailSignalErrorFull() instead")
    void drive_permissions_getIdForEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_getIdForEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_insertSignalErrorFull() instead")
    void drive_permissions_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_listSignalErrorFull() instead")
    void drive_permissions_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_patchSignalErrorFull() instead")
    void drive_permissions_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_permissions_updateSignalErrorFull() instead")
    void drive_permissions_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_permissions_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
