/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILabelField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILabelField::OAILabelField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILabelField::OAILabelField() {
    this->initializeModel();
}

OAILabelField::~OAILabelField() {}

void OAILabelField::initializeModel() {

    m_date_string_isSet = false;
    m_date_string_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_integer_isSet = false;
    m_integer_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_selection_isSet = false;
    m_selection_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;
}

void OAILabelField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILabelField::fromJsonObject(QJsonObject json) {

    m_date_string_isValid = ::OpenAPI::fromJsonValue(m_date_string, json[QString("dateString")]);
    m_date_string_isSet = !json[QString("dateString")].isNull() && m_date_string_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_integer_isValid = ::OpenAPI::fromJsonValue(m_integer, json[QString("integer")]);
    m_integer_isSet = !json[QString("integer")].isNull() && m_integer_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_selection_isValid = ::OpenAPI::fromJsonValue(m_selection, json[QString("selection")]);
    m_selection_isSet = !json[QString("selection")].isNull() && m_selection_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;
}

QString OAILabelField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILabelField::asJsonObject() const {
    QJsonObject obj;
    if (m_date_string.size() > 0) {
        obj.insert(QString("dateString"), ::OpenAPI::toJsonValue(m_date_string));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_integer.size() > 0) {
        obj.insert(QString("integer"), ::OpenAPI::toJsonValue(m_integer));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_selection.size() > 0) {
        obj.insert(QString("selection"), ::OpenAPI::toJsonValue(m_selection));
    }
    if (m_text.size() > 0) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_user.size() > 0) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_value_type_isSet) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    return obj;
}

QList<QDate> OAILabelField::getDateString() const {
    return m_date_string;
}
void OAILabelField::setDateString(const QList<QDate> &date_string) {
    m_date_string = date_string;
    m_date_string_isSet = true;
}

bool OAILabelField::is_date_string_Set() const{
    return m_date_string_isSet;
}

bool OAILabelField::is_date_string_Valid() const{
    return m_date_string_isValid;
}

QString OAILabelField::getId() const {
    return m_id;
}
void OAILabelField::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILabelField::is_id_Set() const{
    return m_id_isSet;
}

bool OAILabelField::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAILabelField::getInteger() const {
    return m_integer;
}
void OAILabelField::setInteger(const QList<QString> &integer) {
    m_integer = integer;
    m_integer_isSet = true;
}

bool OAILabelField::is_integer_Set() const{
    return m_integer_isSet;
}

bool OAILabelField::is_integer_Valid() const{
    return m_integer_isValid;
}

QString OAILabelField::getKind() const {
    return m_kind;
}
void OAILabelField::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILabelField::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILabelField::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAILabelField::getSelection() const {
    return m_selection;
}
void OAILabelField::setSelection(const QList<QString> &selection) {
    m_selection = selection;
    m_selection_isSet = true;
}

bool OAILabelField::is_selection_Set() const{
    return m_selection_isSet;
}

bool OAILabelField::is_selection_Valid() const{
    return m_selection_isValid;
}

QList<QString> OAILabelField::getText() const {
    return m_text;
}
void OAILabelField::setText(const QList<QString> &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILabelField::is_text_Set() const{
    return m_text_isSet;
}

bool OAILabelField::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIUser> OAILabelField::getUser() const {
    return m_user;
}
void OAILabelField::setUser(const QList<OAIUser> &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAILabelField::is_user_Set() const{
    return m_user_isSet;
}

bool OAILabelField::is_user_Valid() const{
    return m_user_isValid;
}

QString OAILabelField::getValueType() const {
    return m_value_type;
}
void OAILabelField::setValueType(const QString &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAILabelField::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAILabelField::is_value_type_Valid() const{
    return m_value_type_isValid;
}

bool OAILabelField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_string.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILabelField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
