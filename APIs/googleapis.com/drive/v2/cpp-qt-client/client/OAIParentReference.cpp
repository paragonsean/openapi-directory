/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParentReference::OAIParentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParentReference::OAIParentReference() {
    this->initializeModel();
}

OAIParentReference::~OAIParentReference() {}

void OAIParentReference::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_root_isSet = false;
    m_is_root_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_parent_link_isSet = false;
    m_parent_link_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;
}

void OAIParentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParentReference::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_root_isValid = ::OpenAPI::fromJsonValue(m_is_root, json[QString("isRoot")]);
    m_is_root_isSet = !json[QString("isRoot")].isNull() && m_is_root_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_parent_link_isValid = ::OpenAPI::fromJsonValue(m_parent_link, json[QString("parentLink")]);
    m_parent_link_isSet = !json[QString("parentLink")].isNull() && m_parent_link_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;
}

QString OAIParentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_root_isSet) {
        obj.insert(QString("isRoot"), ::OpenAPI::toJsonValue(m_is_root));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_parent_link_isSet) {
        obj.insert(QString("parentLink"), ::OpenAPI::toJsonValue(m_parent_link));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    return obj;
}

QString OAIParentReference::getId() const {
    return m_id;
}
void OAIParentReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIParentReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIParentReference::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIParentReference::isIsRoot() const {
    return m_is_root;
}
void OAIParentReference::setIsRoot(const bool &is_root) {
    m_is_root = is_root;
    m_is_root_isSet = true;
}

bool OAIParentReference::is_is_root_Set() const{
    return m_is_root_isSet;
}

bool OAIParentReference::is_is_root_Valid() const{
    return m_is_root_isValid;
}

QString OAIParentReference::getKind() const {
    return m_kind;
}
void OAIParentReference::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIParentReference::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIParentReference::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIParentReference::getParentLink() const {
    return m_parent_link;
}
void OAIParentReference::setParentLink(const QString &parent_link) {
    m_parent_link = parent_link;
    m_parent_link_isSet = true;
}

bool OAIParentReference::is_parent_link_Set() const{
    return m_parent_link_isSet;
}

bool OAIParentReference::is_parent_link_Valid() const{
    return m_parent_link_isValid;
}

QString OAIParentReference::getSelfLink() const {
    return m_self_link;
}
void OAIParentReference::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIParentReference::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIParentReference::is_self_link_Valid() const{
    return m_self_link_isValid;
}

bool OAIParentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
