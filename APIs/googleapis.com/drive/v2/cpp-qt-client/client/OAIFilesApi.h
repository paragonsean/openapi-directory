/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChannel.h"
#include "OAIFile.h"
#include "OAIFileList.h"
#include "OAIGeneratedIds.h"
#include "OAILabelList.h"
#include "OAIModifyLabelsRequest.h"
#include "OAIModifyLabelsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  convert bool [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  ocr bool [optional]
    * @param[in]  ocr_language QString [optional]
    * @param[in]  pinned bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  timed_text_language QString [optional]
    * @param[in]  timed_text_track_name QString [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  oai_file OAIFile [optional]
    */
    virtual void drive_files_copy(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &convert = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ocr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocr_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pinned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timed_text_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timed_text_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFile> &oai_file = ::OpenAPI::OptionalParam<OAIFile>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    */
    virtual void drive_files_delete(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  drive_id QString [optional]
    * @param[in]  enforce_single_parent bool [optional]
    */
    virtual void drive_files_emptyTrash(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drive_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  mime_type QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void drive_files_export(const QString &file_id, const QString &mime_type, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  space QString [optional]
    * @param[in]  type QString [optional]
    */
    virtual void drive_files_generateIds(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &space = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  acknowledge_abuse bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  projection QString [optional]
    * @param[in]  revision_id QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  update_viewed_date bool [optional]
    */
    virtual void drive_files_get(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &acknowledge_abuse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revision_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &update_viewed_date = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  convert bool [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  ocr bool [optional]
    * @param[in]  ocr_language QString [optional]
    * @param[in]  pinned bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  timed_text_language QString [optional]
    * @param[in]  timed_text_track_name QString [optional]
    * @param[in]  use_content_as_indexable_text bool [optional]
    * @param[in]  visibility QString [optional]
    * @param[in]  oai_file OAIFile [optional]
    */
    virtual void drive_files_insert(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &convert = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &ocr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocr_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pinned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timed_text_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timed_text_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &use_content_as_indexable_text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIFile> &oai_file = ::OpenAPI::OptionalParam<OAIFile>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  corpora QString [optional]
    * @param[in]  corpus QString [optional]
    * @param[in]  drive_id QString [optional]
    * @param[in]  include_items_from_all_drives bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  include_team_drive_items bool [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  projection QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  spaces QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  team_drive_id QString [optional]
    */
    virtual void drive_files_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &corpora = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &corpus = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &drive_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_items_from_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_team_drive_items = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &spaces = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &team_drive_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void drive_files_listLabels(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_modify_labels_request OAIModifyLabelsRequest [optional]
    */
    virtual void drive_files_modifyLabels(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIModifyLabelsRequest> &oai_modify_labels_request = ::OpenAPI::OptionalParam<OAIModifyLabelsRequest>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  add_parents QString [optional]
    * @param[in]  convert bool [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  modified_date_behavior QString [optional]
    * @param[in]  new_revision bool [optional]
    * @param[in]  ocr bool [optional]
    * @param[in]  ocr_language QString [optional]
    * @param[in]  pinned bool [optional]
    * @param[in]  remove_parents QString [optional]
    * @param[in]  set_modified_date bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  timed_text_language QString [optional]
    * @param[in]  timed_text_track_name QString [optional]
    * @param[in]  update_viewed_date bool [optional]
    * @param[in]  use_content_as_indexable_text bool [optional]
    * @param[in]  oai_file OAIFile [optional]
    */
    virtual void drive_files_patch(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &add_parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &convert = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_date_behavior = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &new_revision = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ocr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocr_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pinned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &remove_parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &set_modified_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timed_text_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timed_text_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &update_viewed_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_content_as_indexable_text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIFile> &oai_file = ::OpenAPI::OptionalParam<OAIFile>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    */
    virtual void drive_files_touch(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    */
    virtual void drive_files_trash(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    */
    virtual void drive_files_untrash(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  add_parents QString [optional]
    * @param[in]  convert bool [optional]
    * @param[in]  enforce_single_parent bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  modified_date_behavior QString [optional]
    * @param[in]  new_revision bool [optional]
    * @param[in]  ocr bool [optional]
    * @param[in]  ocr_language QString [optional]
    * @param[in]  pinned bool [optional]
    * @param[in]  remove_parents QString [optional]
    * @param[in]  set_modified_date bool [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  timed_text_language QString [optional]
    * @param[in]  timed_text_track_name QString [optional]
    * @param[in]  update_viewed_date bool [optional]
    * @param[in]  use_content_as_indexable_text bool [optional]
    * @param[in]  oai_file OAIFile [optional]
    */
    virtual void drive_files_update(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &add_parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &convert = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enforce_single_parent = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &modified_date_behavior = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &new_revision = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ocr = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &ocr_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pinned = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &remove_parents = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &set_modified_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timed_text_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &timed_text_track_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &update_viewed_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &use_content_as_indexable_text = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIFile> &oai_file = ::OpenAPI::OptionalParam<OAIFile>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  acknowledge_abuse bool [optional]
    * @param[in]  include_labels QString [optional]
    * @param[in]  include_permissions_for_view QString [optional]
    * @param[in]  projection QString [optional]
    * @param[in]  revision_id QString [optional]
    * @param[in]  supports_all_drives bool [optional]
    * @param[in]  supports_team_drives bool [optional]
    * @param[in]  update_viewed_date bool [optional]
    * @param[in]  oai_channel OAIChannel [optional]
    */
    virtual void drive_files_watch(const QString &file_id, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &acknowledge_abuse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &include_labels = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_permissions_for_view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &projection = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &revision_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &supports_all_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &supports_team_drives = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &update_viewed_date = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIChannel> &oai_channel = ::OpenAPI::OptionalParam<OAIChannel>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void drive_files_copyCallback(OAIHttpRequestWorker *worker);
    void drive_files_deleteCallback(OAIHttpRequestWorker *worker);
    void drive_files_emptyTrashCallback(OAIHttpRequestWorker *worker);
    void drive_files_exportCallback(OAIHttpRequestWorker *worker);
    void drive_files_generateIdsCallback(OAIHttpRequestWorker *worker);
    void drive_files_getCallback(OAIHttpRequestWorker *worker);
    void drive_files_insertCallback(OAIHttpRequestWorker *worker);
    void drive_files_listCallback(OAIHttpRequestWorker *worker);
    void drive_files_listLabelsCallback(OAIHttpRequestWorker *worker);
    void drive_files_modifyLabelsCallback(OAIHttpRequestWorker *worker);
    void drive_files_patchCallback(OAIHttpRequestWorker *worker);
    void drive_files_touchCallback(OAIHttpRequestWorker *worker);
    void drive_files_trashCallback(OAIHttpRequestWorker *worker);
    void drive_files_untrashCallback(OAIHttpRequestWorker *worker);
    void drive_files_updateCallback(OAIHttpRequestWorker *worker);
    void drive_files_watchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void drive_files_copySignal(OAIFile summary);
    void drive_files_deleteSignal();
    void drive_files_emptyTrashSignal();
    void drive_files_exportSignal();
    void drive_files_generateIdsSignal(OAIGeneratedIds summary);
    void drive_files_getSignal(OAIFile summary);
    void drive_files_insertSignal(OAIFile summary);
    void drive_files_listSignal(OAIFileList summary);
    void drive_files_listLabelsSignal(OAILabelList summary);
    void drive_files_modifyLabelsSignal(OAIModifyLabelsResponse summary);
    void drive_files_patchSignal(OAIFile summary);
    void drive_files_touchSignal(OAIFile summary);
    void drive_files_trashSignal(OAIFile summary);
    void drive_files_untrashSignal(OAIFile summary);
    void drive_files_updateSignal(OAIFile summary);
    void drive_files_watchSignal(OAIChannel summary);


    void drive_files_copySignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_deleteSignalFull(OAIHttpRequestWorker *worker);
    void drive_files_emptyTrashSignalFull(OAIHttpRequestWorker *worker);
    void drive_files_exportSignalFull(OAIHttpRequestWorker *worker);
    void drive_files_generateIdsSignalFull(OAIHttpRequestWorker *worker, OAIGeneratedIds summary);
    void drive_files_getSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_insertSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_listSignalFull(OAIHttpRequestWorker *worker, OAIFileList summary);
    void drive_files_listLabelsSignalFull(OAIHttpRequestWorker *worker, OAILabelList summary);
    void drive_files_modifyLabelsSignalFull(OAIHttpRequestWorker *worker, OAIModifyLabelsResponse summary);
    void drive_files_patchSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_touchSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_trashSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_untrashSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_updateSignalFull(OAIHttpRequestWorker *worker, OAIFile summary);
    void drive_files_watchSignalFull(OAIHttpRequestWorker *worker, OAIChannel summary);

    Q_DECL_DEPRECATED_X("Use drive_files_copySignalError() instead")
    void drive_files_copySignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_copySignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_deleteSignalError() instead")
    void drive_files_deleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_deleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_emptyTrashSignalError() instead")
    void drive_files_emptyTrashSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_emptyTrashSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_exportSignalError() instead")
    void drive_files_exportSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_exportSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_generateIdsSignalError() instead")
    void drive_files_generateIdsSignalE(OAIGeneratedIds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_generateIdsSignalError(OAIGeneratedIds summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_getSignalError() instead")
    void drive_files_getSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_getSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_insertSignalError() instead")
    void drive_files_insertSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_insertSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_listSignalError() instead")
    void drive_files_listSignalE(OAIFileList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_listSignalError(OAIFileList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_listLabelsSignalError() instead")
    void drive_files_listLabelsSignalE(OAILabelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_listLabelsSignalError(OAILabelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_modifyLabelsSignalError() instead")
    void drive_files_modifyLabelsSignalE(OAIModifyLabelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_modifyLabelsSignalError(OAIModifyLabelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_patchSignalError() instead")
    void drive_files_patchSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_patchSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_touchSignalError() instead")
    void drive_files_touchSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_touchSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_trashSignalError() instead")
    void drive_files_trashSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_trashSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_untrashSignalError() instead")
    void drive_files_untrashSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_untrashSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_updateSignalError() instead")
    void drive_files_updateSignalE(OAIFile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_updateSignalError(OAIFile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_watchSignalError() instead")
    void drive_files_watchSignalE(OAIChannel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_watchSignalError(OAIChannel summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use drive_files_copySignalErrorFull() instead")
    void drive_files_copySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_copySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_deleteSignalErrorFull() instead")
    void drive_files_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_emptyTrashSignalErrorFull() instead")
    void drive_files_emptyTrashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_emptyTrashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_exportSignalErrorFull() instead")
    void drive_files_exportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_exportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_generateIdsSignalErrorFull() instead")
    void drive_files_generateIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_generateIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_getSignalErrorFull() instead")
    void drive_files_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_insertSignalErrorFull() instead")
    void drive_files_insertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_insertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_listSignalErrorFull() instead")
    void drive_files_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_listLabelsSignalErrorFull() instead")
    void drive_files_listLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_listLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_modifyLabelsSignalErrorFull() instead")
    void drive_files_modifyLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_modifyLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_patchSignalErrorFull() instead")
    void drive_files_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_touchSignalErrorFull() instead")
    void drive_files_touchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_touchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_trashSignalErrorFull() instead")
    void drive_files_trashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_trashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_untrashSignalErrorFull() instead")
    void drive_files_untrashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_untrashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_updateSignalErrorFull() instead")
    void drive_files_updateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_updateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drive_files_watchSignalErrorFull() instead")
    void drive_files_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drive_files_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
