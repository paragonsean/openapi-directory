/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_shortcutDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_shortcutDetails::OAIFile_shortcutDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_shortcutDetails::OAIFile_shortcutDetails() {
    this->initializeModel();
}

OAIFile_shortcutDetails::~OAIFile_shortcutDetails() {}

void OAIFile_shortcutDetails::initializeModel() {

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_mime_type_isSet = false;
    m_target_mime_type_isValid = false;

    m_target_resource_key_isSet = false;
    m_target_resource_key_isValid = false;
}

void OAIFile_shortcutDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_shortcutDetails::fromJsonObject(QJsonObject json) {

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_target_mime_type_isValid = ::OpenAPI::fromJsonValue(m_target_mime_type, json[QString("targetMimeType")]);
    m_target_mime_type_isSet = !json[QString("targetMimeType")].isNull() && m_target_mime_type_isValid;

    m_target_resource_key_isValid = ::OpenAPI::fromJsonValue(m_target_resource_key, json[QString("targetResourceKey")]);
    m_target_resource_key_isSet = !json[QString("targetResourceKey")].isNull() && m_target_resource_key_isValid;
}

QString OAIFile_shortcutDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_shortcutDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_mime_type_isSet) {
        obj.insert(QString("targetMimeType"), ::OpenAPI::toJsonValue(m_target_mime_type));
    }
    if (m_target_resource_key_isSet) {
        obj.insert(QString("targetResourceKey"), ::OpenAPI::toJsonValue(m_target_resource_key));
    }
    return obj;
}

QString OAIFile_shortcutDetails::getTargetId() const {
    return m_target_id;
}
void OAIFile_shortcutDetails::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIFile_shortcutDetails::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIFile_shortcutDetails::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIFile_shortcutDetails::getTargetMimeType() const {
    return m_target_mime_type;
}
void OAIFile_shortcutDetails::setTargetMimeType(const QString &target_mime_type) {
    m_target_mime_type = target_mime_type;
    m_target_mime_type_isSet = true;
}

bool OAIFile_shortcutDetails::is_target_mime_type_Set() const{
    return m_target_mime_type_isSet;
}

bool OAIFile_shortcutDetails::is_target_mime_type_Valid() const{
    return m_target_mime_type_isValid;
}

QString OAIFile_shortcutDetails::getTargetResourceKey() const {
    return m_target_resource_key;
}
void OAIFile_shortcutDetails::setTargetResourceKey(const QString &target_resource_key) {
    m_target_resource_key = target_resource_key;
    m_target_resource_key_isSet = true;
}

bool OAIFile_shortcutDetails::is_target_resource_key_Set() const{
    return m_target_resource_key_isSet;
}

bool OAIFile_shortcutDetails::is_target_resource_key_Valid() const{
    return m_target_resource_key_isValid;
}

bool OAIFile_shortcutDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_shortcutDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
