/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbout_features_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbout_features_inner::OAIAbout_features_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbout_features_inner::OAIAbout_features_inner() {
    this->initializeModel();
}

OAIAbout_features_inner::~OAIAbout_features_inner() {}

void OAIAbout_features_inner::initializeModel() {

    m_feature_name_isSet = false;
    m_feature_name_isValid = false;

    m_feature_rate_isSet = false;
    m_feature_rate_isValid = false;
}

void OAIAbout_features_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbout_features_inner::fromJsonObject(QJsonObject json) {

    m_feature_name_isValid = ::OpenAPI::fromJsonValue(m_feature_name, json[QString("featureName")]);
    m_feature_name_isSet = !json[QString("featureName")].isNull() && m_feature_name_isValid;

    m_feature_rate_isValid = ::OpenAPI::fromJsonValue(m_feature_rate, json[QString("featureRate")]);
    m_feature_rate_isSet = !json[QString("featureRate")].isNull() && m_feature_rate_isValid;
}

QString OAIAbout_features_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbout_features_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_name_isSet) {
        obj.insert(QString("featureName"), ::OpenAPI::toJsonValue(m_feature_name));
    }
    if (m_feature_rate_isSet) {
        obj.insert(QString("featureRate"), ::OpenAPI::toJsonValue(m_feature_rate));
    }
    return obj;
}

QString OAIAbout_features_inner::getFeatureName() const {
    return m_feature_name;
}
void OAIAbout_features_inner::setFeatureName(const QString &feature_name) {
    m_feature_name = feature_name;
    m_feature_name_isSet = true;
}

bool OAIAbout_features_inner::is_feature_name_Set() const{
    return m_feature_name_isSet;
}

bool OAIAbout_features_inner::is_feature_name_Valid() const{
    return m_feature_name_isValid;
}

double OAIAbout_features_inner::getFeatureRate() const {
    return m_feature_rate;
}
void OAIAbout_features_inner::setFeatureRate(const double &feature_rate) {
    m_feature_rate = feature_rate;
    m_feature_rate_isSet = true;
}

bool OAIAbout_features_inner::is_feature_rate_Set() const{
    return m_feature_rate_isSet;
}

bool OAIAbout_features_inner::is_feature_rate_Valid() const{
    return m_feature_rate_isValid;
}

bool OAIAbout_features_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbout_features_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
