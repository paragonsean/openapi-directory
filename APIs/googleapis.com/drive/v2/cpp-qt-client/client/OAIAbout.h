/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAbout.h
 *
 * An item with user information and settings.
 */

#ifndef OAIAbout_H
#define OAIAbout_H

#include <QJsonObject>

#include "OAIAbout_additionalRoleInfo_inner.h"
#include "OAIAbout_driveThemes_inner.h"
#include "OAIAbout_exportFormats_inner.h"
#include "OAIAbout_features_inner.h"
#include "OAIAbout_importFormats_inner.h"
#include "OAIAbout_maxUploadSizes_inner.h"
#include "OAIAbout_quotaBytesByService_inner.h"
#include "OAIAbout_teamDriveThemes_inner.h"
#include "OAIUser.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAbout_additionalRoleInfo_inner;
class OAIAbout_driveThemes_inner;
class OAIAbout_exportFormats_inner;
class OAIAbout_features_inner;
class OAIAbout_importFormats_inner;
class OAIAbout_maxUploadSizes_inner;
class OAIAbout_quotaBytesByService_inner;
class OAIAbout_teamDriveThemes_inner;
class OAIUser;

class OAIAbout : public OAIObject {
public:
    OAIAbout();
    OAIAbout(QString json);
    ~OAIAbout() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAbout_additionalRoleInfo_inner> getAdditionalRoleInfo() const;
    void setAdditionalRoleInfo(const QList<OAIAbout_additionalRoleInfo_inner> &additional_role_info);
    bool is_additional_role_info_Set() const;
    bool is_additional_role_info_Valid() const;

    bool isCanCreateDrives() const;
    void setCanCreateDrives(const bool &can_create_drives);
    bool is_can_create_drives_Set() const;
    bool is_can_create_drives_Valid() const;

    Q_DECL_DEPRECATED bool isCanCreateTeamDrives() const;
    Q_DECL_DEPRECATED void setCanCreateTeamDrives(const bool &can_create_team_drives);
    Q_DECL_DEPRECATED bool is_can_create_team_drives_Set() const;
    Q_DECL_DEPRECATED bool is_can_create_team_drives_Valid() const;

    QString getDomainSharingPolicy() const;
    void setDomainSharingPolicy(const QString &domain_sharing_policy);
    bool is_domain_sharing_policy_Set() const;
    bool is_domain_sharing_policy_Valid() const;

    QList<OAIAbout_driveThemes_inner> getDriveThemes() const;
    void setDriveThemes(const QList<OAIAbout_driveThemes_inner> &drive_themes);
    bool is_drive_themes_Set() const;
    bool is_drive_themes_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    QList<OAIAbout_exportFormats_inner> getExportFormats() const;
    void setExportFormats(const QList<OAIAbout_exportFormats_inner> &export_formats);
    bool is_export_formats_Set() const;
    bool is_export_formats_Valid() const;

    QList<OAIAbout_features_inner> getFeatures() const;
    void setFeatures(const QList<OAIAbout_features_inner> &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QList<QString> getFolderColorPalette() const;
    void setFolderColorPalette(const QList<QString> &folder_color_palette);
    bool is_folder_color_palette_Set() const;
    bool is_folder_color_palette_Valid() const;

    QList<OAIAbout_importFormats_inner> getImportFormats() const;
    void setImportFormats(const QList<OAIAbout_importFormats_inner> &import_formats);
    bool is_import_formats_Set() const;
    bool is_import_formats_Valid() const;

    bool isIsCurrentAppInstalled() const;
    void setIsCurrentAppInstalled(const bool &is_current_app_installed);
    bool is_is_current_app_installed_Set() const;
    bool is_is_current_app_installed_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    QString getLargestChangeId() const;
    void setLargestChangeId(const QString &largest_change_id);
    bool is_largest_change_id_Set() const;
    bool is_largest_change_id_Valid() const;

    QList<OAIAbout_maxUploadSizes_inner> getMaxUploadSizes() const;
    void setMaxUploadSizes(const QList<OAIAbout_maxUploadSizes_inner> &max_upload_sizes);
    bool is_max_upload_sizes_Set() const;
    bool is_max_upload_sizes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPermissionId() const;
    void setPermissionId(const QString &permission_id);
    bool is_permission_id_Set() const;
    bool is_permission_id_Valid() const;

    QList<OAIAbout_quotaBytesByService_inner> getQuotaBytesByService() const;
    void setQuotaBytesByService(const QList<OAIAbout_quotaBytesByService_inner> &quota_bytes_by_service);
    bool is_quota_bytes_by_service_Set() const;
    bool is_quota_bytes_by_service_Valid() const;

    QString getQuotaBytesTotal() const;
    void setQuotaBytesTotal(const QString &quota_bytes_total);
    bool is_quota_bytes_total_Set() const;
    bool is_quota_bytes_total_Valid() const;

    QString getQuotaBytesUsed() const;
    void setQuotaBytesUsed(const QString &quota_bytes_used);
    bool is_quota_bytes_used_Set() const;
    bool is_quota_bytes_used_Valid() const;

    QString getQuotaBytesUsedAggregate() const;
    void setQuotaBytesUsedAggregate(const QString &quota_bytes_used_aggregate);
    bool is_quota_bytes_used_aggregate_Set() const;
    bool is_quota_bytes_used_aggregate_Valid() const;

    QString getQuotaBytesUsedInTrash() const;
    void setQuotaBytesUsedInTrash(const QString &quota_bytes_used_in_trash);
    bool is_quota_bytes_used_in_trash_Set() const;
    bool is_quota_bytes_used_in_trash_Valid() const;

    QString getQuotaType() const;
    void setQuotaType(const QString &quota_type);
    bool is_quota_type_Set() const;
    bool is_quota_type_Valid() const;

    QString getRemainingChangeIds() const;
    void setRemainingChangeIds(const QString &remaining_change_ids);
    bool is_remaining_change_ids_Set() const;
    bool is_remaining_change_ids_Valid() const;

    QString getRootFolderId() const;
    void setRootFolderId(const QString &root_folder_id);
    bool is_root_folder_id_Set() const;
    bool is_root_folder_id_Valid() const;

    QString getSelfLink() const;
    void setSelfLink(const QString &self_link);
    bool is_self_link_Set() const;
    bool is_self_link_Valid() const;

    Q_DECL_DEPRECATED QList<OAIAbout_teamDriveThemes_inner> getTeamDriveThemes() const;
    Q_DECL_DEPRECATED void setTeamDriveThemes(const QList<OAIAbout_teamDriveThemes_inner> &team_drive_themes);
    Q_DECL_DEPRECATED bool is_team_drive_themes_Set() const;
    Q_DECL_DEPRECATED bool is_team_drive_themes_Valid() const;

    OAIUser getUser() const;
    void setUser(const OAIUser &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAbout_additionalRoleInfo_inner> m_additional_role_info;
    bool m_additional_role_info_isSet;
    bool m_additional_role_info_isValid;

    bool m_can_create_drives;
    bool m_can_create_drives_isSet;
    bool m_can_create_drives_isValid;

    bool m_can_create_team_drives;
    bool m_can_create_team_drives_isSet;
    bool m_can_create_team_drives_isValid;

    QString m_domain_sharing_policy;
    bool m_domain_sharing_policy_isSet;
    bool m_domain_sharing_policy_isValid;

    QList<OAIAbout_driveThemes_inner> m_drive_themes;
    bool m_drive_themes_isSet;
    bool m_drive_themes_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    QList<OAIAbout_exportFormats_inner> m_export_formats;
    bool m_export_formats_isSet;
    bool m_export_formats_isValid;

    QList<OAIAbout_features_inner> m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QList<QString> m_folder_color_palette;
    bool m_folder_color_palette_isSet;
    bool m_folder_color_palette_isValid;

    QList<OAIAbout_importFormats_inner> m_import_formats;
    bool m_import_formats_isSet;
    bool m_import_formats_isValid;

    bool m_is_current_app_installed;
    bool m_is_current_app_installed_isSet;
    bool m_is_current_app_installed_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_largest_change_id;
    bool m_largest_change_id_isSet;
    bool m_largest_change_id_isValid;

    QList<OAIAbout_maxUploadSizes_inner> m_max_upload_sizes;
    bool m_max_upload_sizes_isSet;
    bool m_max_upload_sizes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_permission_id;
    bool m_permission_id_isSet;
    bool m_permission_id_isValid;

    QList<OAIAbout_quotaBytesByService_inner> m_quota_bytes_by_service;
    bool m_quota_bytes_by_service_isSet;
    bool m_quota_bytes_by_service_isValid;

    QString m_quota_bytes_total;
    bool m_quota_bytes_total_isSet;
    bool m_quota_bytes_total_isValid;

    QString m_quota_bytes_used;
    bool m_quota_bytes_used_isSet;
    bool m_quota_bytes_used_isValid;

    QString m_quota_bytes_used_aggregate;
    bool m_quota_bytes_used_aggregate_isSet;
    bool m_quota_bytes_used_aggregate_isValid;

    QString m_quota_bytes_used_in_trash;
    bool m_quota_bytes_used_in_trash_isSet;
    bool m_quota_bytes_used_in_trash_isValid;

    QString m_quota_type;
    bool m_quota_type_isSet;
    bool m_quota_type_isValid;

    QString m_remaining_change_ids;
    bool m_remaining_change_ids_isSet;
    bool m_remaining_change_ids_isValid;

    QString m_root_folder_id;
    bool m_root_folder_id_isSet;
    bool m_root_folder_id_isValid;

    QString m_self_link;
    bool m_self_link_isSet;
    bool m_self_link_isValid;

    QList<OAIAbout_teamDriveThemes_inner> m_team_drive_themes;
    bool m_team_drive_themes_isSet;
    bool m_team_drive_themes_isValid;

    OAIUser m_user;
    bool m_user_isSet;
    bool m_user_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAbout)

#endif // OAIAbout_H
