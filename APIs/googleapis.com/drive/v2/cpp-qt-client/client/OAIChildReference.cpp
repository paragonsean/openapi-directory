/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChildReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChildReference::OAIChildReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChildReference::OAIChildReference() {
    this->initializeModel();
}

OAIChildReference::~OAIChildReference() {}

void OAIChildReference::initializeModel() {

    m_child_link_isSet = false;
    m_child_link_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;
}

void OAIChildReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChildReference::fromJsonObject(QJsonObject json) {

    m_child_link_isValid = ::OpenAPI::fromJsonValue(m_child_link, json[QString("childLink")]);
    m_child_link_isSet = !json[QString("childLink")].isNull() && m_child_link_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;
}

QString OAIChildReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChildReference::asJsonObject() const {
    QJsonObject obj;
    if (m_child_link_isSet) {
        obj.insert(QString("childLink"), ::OpenAPI::toJsonValue(m_child_link));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    return obj;
}

QString OAIChildReference::getChildLink() const {
    return m_child_link;
}
void OAIChildReference::setChildLink(const QString &child_link) {
    m_child_link = child_link;
    m_child_link_isSet = true;
}

bool OAIChildReference::is_child_link_Set() const{
    return m_child_link_isSet;
}

bool OAIChildReference::is_child_link_Valid() const{
    return m_child_link_isValid;
}

QString OAIChildReference::getId() const {
    return m_id;
}
void OAIChildReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChildReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChildReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIChildReference::getKind() const {
    return m_kind;
}
void OAIChildReference::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIChildReference::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIChildReference::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIChildReference::getSelfLink() const {
    return m_self_link;
}
void OAIChildReference::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIChildReference::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIChildReference::is_self_link_Valid() const{
    return m_self_link_isValid;
}

bool OAIChildReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChildReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
