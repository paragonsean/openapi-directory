/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFile_imageMediaMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFile_imageMediaMetadata::OAIFile_imageMediaMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFile_imageMediaMetadata::OAIFile_imageMediaMetadata() {
    this->initializeModel();
}

OAIFile_imageMediaMetadata::~OAIFile_imageMediaMetadata() {}

void OAIFile_imageMediaMetadata::initializeModel() {

    m_aperture_isSet = false;
    m_aperture_isValid = false;

    m_camera_make_isSet = false;
    m_camera_make_isValid = false;

    m_camera_model_isSet = false;
    m_camera_model_isValid = false;

    m_color_space_isSet = false;
    m_color_space_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_exposure_bias_isSet = false;
    m_exposure_bias_isValid = false;

    m_exposure_mode_isSet = false;
    m_exposure_mode_isValid = false;

    m_exposure_time_isSet = false;
    m_exposure_time_isValid = false;

    m_flash_used_isSet = false;
    m_flash_used_isValid = false;

    m_focal_length_isSet = false;
    m_focal_length_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_iso_speed_isSet = false;
    m_iso_speed_isValid = false;

    m_lens_isSet = false;
    m_lens_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_max_aperture_value_isSet = false;
    m_max_aperture_value_isValid = false;

    m_metering_mode_isSet = false;
    m_metering_mode_isValid = false;

    m_rotation_isSet = false;
    m_rotation_isValid = false;

    m_sensor_isSet = false;
    m_sensor_isValid = false;

    m_subject_distance_isSet = false;
    m_subject_distance_isValid = false;

    m_white_balance_isSet = false;
    m_white_balance_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIFile_imageMediaMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFile_imageMediaMetadata::fromJsonObject(QJsonObject json) {

    m_aperture_isValid = ::OpenAPI::fromJsonValue(m_aperture, json[QString("aperture")]);
    m_aperture_isSet = !json[QString("aperture")].isNull() && m_aperture_isValid;

    m_camera_make_isValid = ::OpenAPI::fromJsonValue(m_camera_make, json[QString("cameraMake")]);
    m_camera_make_isSet = !json[QString("cameraMake")].isNull() && m_camera_make_isValid;

    m_camera_model_isValid = ::OpenAPI::fromJsonValue(m_camera_model, json[QString("cameraModel")]);
    m_camera_model_isSet = !json[QString("cameraModel")].isNull() && m_camera_model_isValid;

    m_color_space_isValid = ::OpenAPI::fromJsonValue(m_color_space, json[QString("colorSpace")]);
    m_color_space_isSet = !json[QString("colorSpace")].isNull() && m_color_space_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_exposure_bias_isValid = ::OpenAPI::fromJsonValue(m_exposure_bias, json[QString("exposureBias")]);
    m_exposure_bias_isSet = !json[QString("exposureBias")].isNull() && m_exposure_bias_isValid;

    m_exposure_mode_isValid = ::OpenAPI::fromJsonValue(m_exposure_mode, json[QString("exposureMode")]);
    m_exposure_mode_isSet = !json[QString("exposureMode")].isNull() && m_exposure_mode_isValid;

    m_exposure_time_isValid = ::OpenAPI::fromJsonValue(m_exposure_time, json[QString("exposureTime")]);
    m_exposure_time_isSet = !json[QString("exposureTime")].isNull() && m_exposure_time_isValid;

    m_flash_used_isValid = ::OpenAPI::fromJsonValue(m_flash_used, json[QString("flashUsed")]);
    m_flash_used_isSet = !json[QString("flashUsed")].isNull() && m_flash_used_isValid;

    m_focal_length_isValid = ::OpenAPI::fromJsonValue(m_focal_length, json[QString("focalLength")]);
    m_focal_length_isSet = !json[QString("focalLength")].isNull() && m_focal_length_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_iso_speed_isValid = ::OpenAPI::fromJsonValue(m_iso_speed, json[QString("isoSpeed")]);
    m_iso_speed_isSet = !json[QString("isoSpeed")].isNull() && m_iso_speed_isValid;

    m_lens_isValid = ::OpenAPI::fromJsonValue(m_lens, json[QString("lens")]);
    m_lens_isSet = !json[QString("lens")].isNull() && m_lens_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_max_aperture_value_isValid = ::OpenAPI::fromJsonValue(m_max_aperture_value, json[QString("maxApertureValue")]);
    m_max_aperture_value_isSet = !json[QString("maxApertureValue")].isNull() && m_max_aperture_value_isValid;

    m_metering_mode_isValid = ::OpenAPI::fromJsonValue(m_metering_mode, json[QString("meteringMode")]);
    m_metering_mode_isSet = !json[QString("meteringMode")].isNull() && m_metering_mode_isValid;

    m_rotation_isValid = ::OpenAPI::fromJsonValue(m_rotation, json[QString("rotation")]);
    m_rotation_isSet = !json[QString("rotation")].isNull() && m_rotation_isValid;

    m_sensor_isValid = ::OpenAPI::fromJsonValue(m_sensor, json[QString("sensor")]);
    m_sensor_isSet = !json[QString("sensor")].isNull() && m_sensor_isValid;

    m_subject_distance_isValid = ::OpenAPI::fromJsonValue(m_subject_distance, json[QString("subjectDistance")]);
    m_subject_distance_isSet = !json[QString("subjectDistance")].isNull() && m_subject_distance_isValid;

    m_white_balance_isValid = ::OpenAPI::fromJsonValue(m_white_balance, json[QString("whiteBalance")]);
    m_white_balance_isSet = !json[QString("whiteBalance")].isNull() && m_white_balance_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIFile_imageMediaMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFile_imageMediaMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_aperture_isSet) {
        obj.insert(QString("aperture"), ::OpenAPI::toJsonValue(m_aperture));
    }
    if (m_camera_make_isSet) {
        obj.insert(QString("cameraMake"), ::OpenAPI::toJsonValue(m_camera_make));
    }
    if (m_camera_model_isSet) {
        obj.insert(QString("cameraModel"), ::OpenAPI::toJsonValue(m_camera_model));
    }
    if (m_color_space_isSet) {
        obj.insert(QString("colorSpace"), ::OpenAPI::toJsonValue(m_color_space));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_exposure_bias_isSet) {
        obj.insert(QString("exposureBias"), ::OpenAPI::toJsonValue(m_exposure_bias));
    }
    if (m_exposure_mode_isSet) {
        obj.insert(QString("exposureMode"), ::OpenAPI::toJsonValue(m_exposure_mode));
    }
    if (m_exposure_time_isSet) {
        obj.insert(QString("exposureTime"), ::OpenAPI::toJsonValue(m_exposure_time));
    }
    if (m_flash_used_isSet) {
        obj.insert(QString("flashUsed"), ::OpenAPI::toJsonValue(m_flash_used));
    }
    if (m_focal_length_isSet) {
        obj.insert(QString("focalLength"), ::OpenAPI::toJsonValue(m_focal_length));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_iso_speed_isSet) {
        obj.insert(QString("isoSpeed"), ::OpenAPI::toJsonValue(m_iso_speed));
    }
    if (m_lens_isSet) {
        obj.insert(QString("lens"), ::OpenAPI::toJsonValue(m_lens));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_max_aperture_value_isSet) {
        obj.insert(QString("maxApertureValue"), ::OpenAPI::toJsonValue(m_max_aperture_value));
    }
    if (m_metering_mode_isSet) {
        obj.insert(QString("meteringMode"), ::OpenAPI::toJsonValue(m_metering_mode));
    }
    if (m_rotation_isSet) {
        obj.insert(QString("rotation"), ::OpenAPI::toJsonValue(m_rotation));
    }
    if (m_sensor_isSet) {
        obj.insert(QString("sensor"), ::OpenAPI::toJsonValue(m_sensor));
    }
    if (m_subject_distance_isSet) {
        obj.insert(QString("subjectDistance"), ::OpenAPI::toJsonValue(m_subject_distance));
    }
    if (m_white_balance_isSet) {
        obj.insert(QString("whiteBalance"), ::OpenAPI::toJsonValue(m_white_balance));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

float OAIFile_imageMediaMetadata::getAperture() const {
    return m_aperture;
}
void OAIFile_imageMediaMetadata::setAperture(const float &aperture) {
    m_aperture = aperture;
    m_aperture_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_aperture_Set() const{
    return m_aperture_isSet;
}

bool OAIFile_imageMediaMetadata::is_aperture_Valid() const{
    return m_aperture_isValid;
}

QString OAIFile_imageMediaMetadata::getCameraMake() const {
    return m_camera_make;
}
void OAIFile_imageMediaMetadata::setCameraMake(const QString &camera_make) {
    m_camera_make = camera_make;
    m_camera_make_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_camera_make_Set() const{
    return m_camera_make_isSet;
}

bool OAIFile_imageMediaMetadata::is_camera_make_Valid() const{
    return m_camera_make_isValid;
}

QString OAIFile_imageMediaMetadata::getCameraModel() const {
    return m_camera_model;
}
void OAIFile_imageMediaMetadata::setCameraModel(const QString &camera_model) {
    m_camera_model = camera_model;
    m_camera_model_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_camera_model_Set() const{
    return m_camera_model_isSet;
}

bool OAIFile_imageMediaMetadata::is_camera_model_Valid() const{
    return m_camera_model_isValid;
}

QString OAIFile_imageMediaMetadata::getColorSpace() const {
    return m_color_space;
}
void OAIFile_imageMediaMetadata::setColorSpace(const QString &color_space) {
    m_color_space = color_space;
    m_color_space_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_color_space_Set() const{
    return m_color_space_isSet;
}

bool OAIFile_imageMediaMetadata::is_color_space_Valid() const{
    return m_color_space_isValid;
}

QString OAIFile_imageMediaMetadata::getDate() const {
    return m_date;
}
void OAIFile_imageMediaMetadata::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_date_Set() const{
    return m_date_isSet;
}

bool OAIFile_imageMediaMetadata::is_date_Valid() const{
    return m_date_isValid;
}

float OAIFile_imageMediaMetadata::getExposureBias() const {
    return m_exposure_bias;
}
void OAIFile_imageMediaMetadata::setExposureBias(const float &exposure_bias) {
    m_exposure_bias = exposure_bias;
    m_exposure_bias_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_exposure_bias_Set() const{
    return m_exposure_bias_isSet;
}

bool OAIFile_imageMediaMetadata::is_exposure_bias_Valid() const{
    return m_exposure_bias_isValid;
}

QString OAIFile_imageMediaMetadata::getExposureMode() const {
    return m_exposure_mode;
}
void OAIFile_imageMediaMetadata::setExposureMode(const QString &exposure_mode) {
    m_exposure_mode = exposure_mode;
    m_exposure_mode_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_exposure_mode_Set() const{
    return m_exposure_mode_isSet;
}

bool OAIFile_imageMediaMetadata::is_exposure_mode_Valid() const{
    return m_exposure_mode_isValid;
}

float OAIFile_imageMediaMetadata::getExposureTime() const {
    return m_exposure_time;
}
void OAIFile_imageMediaMetadata::setExposureTime(const float &exposure_time) {
    m_exposure_time = exposure_time;
    m_exposure_time_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_exposure_time_Set() const{
    return m_exposure_time_isSet;
}

bool OAIFile_imageMediaMetadata::is_exposure_time_Valid() const{
    return m_exposure_time_isValid;
}

bool OAIFile_imageMediaMetadata::isFlashUsed() const {
    return m_flash_used;
}
void OAIFile_imageMediaMetadata::setFlashUsed(const bool &flash_used) {
    m_flash_used = flash_used;
    m_flash_used_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_flash_used_Set() const{
    return m_flash_used_isSet;
}

bool OAIFile_imageMediaMetadata::is_flash_used_Valid() const{
    return m_flash_used_isValid;
}

float OAIFile_imageMediaMetadata::getFocalLength() const {
    return m_focal_length;
}
void OAIFile_imageMediaMetadata::setFocalLength(const float &focal_length) {
    m_focal_length = focal_length;
    m_focal_length_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_focal_length_Set() const{
    return m_focal_length_isSet;
}

bool OAIFile_imageMediaMetadata::is_focal_length_Valid() const{
    return m_focal_length_isValid;
}

qint32 OAIFile_imageMediaMetadata::getHeight() const {
    return m_height;
}
void OAIFile_imageMediaMetadata::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_height_Set() const{
    return m_height_isSet;
}

bool OAIFile_imageMediaMetadata::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIFile_imageMediaMetadata::getIsoSpeed() const {
    return m_iso_speed;
}
void OAIFile_imageMediaMetadata::setIsoSpeed(const qint32 &iso_speed) {
    m_iso_speed = iso_speed;
    m_iso_speed_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_iso_speed_Set() const{
    return m_iso_speed_isSet;
}

bool OAIFile_imageMediaMetadata::is_iso_speed_Valid() const{
    return m_iso_speed_isValid;
}

QString OAIFile_imageMediaMetadata::getLens() const {
    return m_lens;
}
void OAIFile_imageMediaMetadata::setLens(const QString &lens) {
    m_lens = lens;
    m_lens_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_lens_Set() const{
    return m_lens_isSet;
}

bool OAIFile_imageMediaMetadata::is_lens_Valid() const{
    return m_lens_isValid;
}

OAIFile_imageMediaMetadata_location OAIFile_imageMediaMetadata::getLocation() const {
    return m_location;
}
void OAIFile_imageMediaMetadata::setLocation(const OAIFile_imageMediaMetadata_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_location_Set() const{
    return m_location_isSet;
}

bool OAIFile_imageMediaMetadata::is_location_Valid() const{
    return m_location_isValid;
}

float OAIFile_imageMediaMetadata::getMaxApertureValue() const {
    return m_max_aperture_value;
}
void OAIFile_imageMediaMetadata::setMaxApertureValue(const float &max_aperture_value) {
    m_max_aperture_value = max_aperture_value;
    m_max_aperture_value_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_max_aperture_value_Set() const{
    return m_max_aperture_value_isSet;
}

bool OAIFile_imageMediaMetadata::is_max_aperture_value_Valid() const{
    return m_max_aperture_value_isValid;
}

QString OAIFile_imageMediaMetadata::getMeteringMode() const {
    return m_metering_mode;
}
void OAIFile_imageMediaMetadata::setMeteringMode(const QString &metering_mode) {
    m_metering_mode = metering_mode;
    m_metering_mode_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_metering_mode_Set() const{
    return m_metering_mode_isSet;
}

bool OAIFile_imageMediaMetadata::is_metering_mode_Valid() const{
    return m_metering_mode_isValid;
}

qint32 OAIFile_imageMediaMetadata::getRotation() const {
    return m_rotation;
}
void OAIFile_imageMediaMetadata::setRotation(const qint32 &rotation) {
    m_rotation = rotation;
    m_rotation_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_rotation_Set() const{
    return m_rotation_isSet;
}

bool OAIFile_imageMediaMetadata::is_rotation_Valid() const{
    return m_rotation_isValid;
}

QString OAIFile_imageMediaMetadata::getSensor() const {
    return m_sensor;
}
void OAIFile_imageMediaMetadata::setSensor(const QString &sensor) {
    m_sensor = sensor;
    m_sensor_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_sensor_Set() const{
    return m_sensor_isSet;
}

bool OAIFile_imageMediaMetadata::is_sensor_Valid() const{
    return m_sensor_isValid;
}

qint32 OAIFile_imageMediaMetadata::getSubjectDistance() const {
    return m_subject_distance;
}
void OAIFile_imageMediaMetadata::setSubjectDistance(const qint32 &subject_distance) {
    m_subject_distance = subject_distance;
    m_subject_distance_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_subject_distance_Set() const{
    return m_subject_distance_isSet;
}

bool OAIFile_imageMediaMetadata::is_subject_distance_Valid() const{
    return m_subject_distance_isValid;
}

QString OAIFile_imageMediaMetadata::getWhiteBalance() const {
    return m_white_balance;
}
void OAIFile_imageMediaMetadata::setWhiteBalance(const QString &white_balance) {
    m_white_balance = white_balance;
    m_white_balance_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_white_balance_Set() const{
    return m_white_balance_isSet;
}

bool OAIFile_imageMediaMetadata::is_white_balance_Valid() const{
    return m_white_balance_isValid;
}

qint32 OAIFile_imageMediaMetadata::getWidth() const {
    return m_width;
}
void OAIFile_imageMediaMetadata::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIFile_imageMediaMetadata::is_width_Set() const{
    return m_width_isSet;
}

bool OAIFile_imageMediaMetadata::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIFile_imageMediaMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aperture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_camera_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_space_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_bias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exposure_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flash_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_focal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lens_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_aperture_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metering_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rotation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFile_imageMediaMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
