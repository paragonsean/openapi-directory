/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp::OAIApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp::OAIApp() {
    this->initializeModel();
}

OAIApp::~OAIApp() {}

void OAIApp::initializeModel() {

    m_authorized_isSet = false;
    m_authorized_isValid = false;

    m_create_in_folder_template_isSet = false;
    m_create_in_folder_template_isValid = false;

    m_create_url_isSet = false;
    m_create_url_isValid = false;

    m_has_drive_wide_scope_isSet = false;
    m_has_drive_wide_scope_isValid = false;

    m_icons_isSet = false;
    m_icons_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installed_isSet = false;
    m_installed_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_open_url_template_isSet = false;
    m_open_url_template_isValid = false;

    m_primary_file_extensions_isSet = false;
    m_primary_file_extensions_isValid = false;

    m_primary_mime_types_isSet = false;
    m_primary_mime_types_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_product_url_isSet = false;
    m_product_url_isValid = false;

    m_secondary_file_extensions_isSet = false;
    m_secondary_file_extensions_isValid = false;

    m_secondary_mime_types_isSet = false;
    m_secondary_mime_types_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;

    m_supports_create_isSet = false;
    m_supports_create_isValid = false;

    m_supports_import_isSet = false;
    m_supports_import_isValid = false;

    m_supports_multi_open_isSet = false;
    m_supports_multi_open_isValid = false;

    m_supports_offline_create_isSet = false;
    m_supports_offline_create_isValid = false;

    m_use_by_default_isSet = false;
    m_use_by_default_isValid = false;
}

void OAIApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp::fromJsonObject(QJsonObject json) {

    m_authorized_isValid = ::OpenAPI::fromJsonValue(m_authorized, json[QString("authorized")]);
    m_authorized_isSet = !json[QString("authorized")].isNull() && m_authorized_isValid;

    m_create_in_folder_template_isValid = ::OpenAPI::fromJsonValue(m_create_in_folder_template, json[QString("createInFolderTemplate")]);
    m_create_in_folder_template_isSet = !json[QString("createInFolderTemplate")].isNull() && m_create_in_folder_template_isValid;

    m_create_url_isValid = ::OpenAPI::fromJsonValue(m_create_url, json[QString("createUrl")]);
    m_create_url_isSet = !json[QString("createUrl")].isNull() && m_create_url_isValid;

    m_has_drive_wide_scope_isValid = ::OpenAPI::fromJsonValue(m_has_drive_wide_scope, json[QString("hasDriveWideScope")]);
    m_has_drive_wide_scope_isSet = !json[QString("hasDriveWideScope")].isNull() && m_has_drive_wide_scope_isValid;

    m_icons_isValid = ::OpenAPI::fromJsonValue(m_icons, json[QString("icons")]);
    m_icons_isSet = !json[QString("icons")].isNull() && m_icons_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installed_isValid = ::OpenAPI::fromJsonValue(m_installed, json[QString("installed")]);
    m_installed_isSet = !json[QString("installed")].isNull() && m_installed_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("longDescription")]);
    m_long_description_isSet = !json[QString("longDescription")].isNull() && m_long_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;

    m_open_url_template_isValid = ::OpenAPI::fromJsonValue(m_open_url_template, json[QString("openUrlTemplate")]);
    m_open_url_template_isSet = !json[QString("openUrlTemplate")].isNull() && m_open_url_template_isValid;

    m_primary_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_primary_file_extensions, json[QString("primaryFileExtensions")]);
    m_primary_file_extensions_isSet = !json[QString("primaryFileExtensions")].isNull() && m_primary_file_extensions_isValid;

    m_primary_mime_types_isValid = ::OpenAPI::fromJsonValue(m_primary_mime_types, json[QString("primaryMimeTypes")]);
    m_primary_mime_types_isSet = !json[QString("primaryMimeTypes")].isNull() && m_primary_mime_types_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_product_url_isValid = ::OpenAPI::fromJsonValue(m_product_url, json[QString("productUrl")]);
    m_product_url_isSet = !json[QString("productUrl")].isNull() && m_product_url_isValid;

    m_secondary_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_secondary_file_extensions, json[QString("secondaryFileExtensions")]);
    m_secondary_file_extensions_isSet = !json[QString("secondaryFileExtensions")].isNull() && m_secondary_file_extensions_isValid;

    m_secondary_mime_types_isValid = ::OpenAPI::fromJsonValue(m_secondary_mime_types, json[QString("secondaryMimeTypes")]);
    m_secondary_mime_types_isSet = !json[QString("secondaryMimeTypes")].isNull() && m_secondary_mime_types_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("shortDescription")]);
    m_short_description_isSet = !json[QString("shortDescription")].isNull() && m_short_description_isValid;

    m_supports_create_isValid = ::OpenAPI::fromJsonValue(m_supports_create, json[QString("supportsCreate")]);
    m_supports_create_isSet = !json[QString("supportsCreate")].isNull() && m_supports_create_isValid;

    m_supports_import_isValid = ::OpenAPI::fromJsonValue(m_supports_import, json[QString("supportsImport")]);
    m_supports_import_isSet = !json[QString("supportsImport")].isNull() && m_supports_import_isValid;

    m_supports_multi_open_isValid = ::OpenAPI::fromJsonValue(m_supports_multi_open, json[QString("supportsMultiOpen")]);
    m_supports_multi_open_isSet = !json[QString("supportsMultiOpen")].isNull() && m_supports_multi_open_isValid;

    m_supports_offline_create_isValid = ::OpenAPI::fromJsonValue(m_supports_offline_create, json[QString("supportsOfflineCreate")]);
    m_supports_offline_create_isSet = !json[QString("supportsOfflineCreate")].isNull() && m_supports_offline_create_isValid;

    m_use_by_default_isValid = ::OpenAPI::fromJsonValue(m_use_by_default, json[QString("useByDefault")]);
    m_use_by_default_isSet = !json[QString("useByDefault")].isNull() && m_use_by_default_isValid;
}

QString OAIApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_isSet) {
        obj.insert(QString("authorized"), ::OpenAPI::toJsonValue(m_authorized));
    }
    if (m_create_in_folder_template_isSet) {
        obj.insert(QString("createInFolderTemplate"), ::OpenAPI::toJsonValue(m_create_in_folder_template));
    }
    if (m_create_url_isSet) {
        obj.insert(QString("createUrl"), ::OpenAPI::toJsonValue(m_create_url));
    }
    if (m_has_drive_wide_scope_isSet) {
        obj.insert(QString("hasDriveWideScope"), ::OpenAPI::toJsonValue(m_has_drive_wide_scope));
    }
    if (m_icons.size() > 0) {
        obj.insert(QString("icons"), ::OpenAPI::toJsonValue(m_icons));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installed_isSet) {
        obj.insert(QString("installed"), ::OpenAPI::toJsonValue(m_installed));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("longDescription"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_open_url_template_isSet) {
        obj.insert(QString("openUrlTemplate"), ::OpenAPI::toJsonValue(m_open_url_template));
    }
    if (m_primary_file_extensions.size() > 0) {
        obj.insert(QString("primaryFileExtensions"), ::OpenAPI::toJsonValue(m_primary_file_extensions));
    }
    if (m_primary_mime_types.size() > 0) {
        obj.insert(QString("primaryMimeTypes"), ::OpenAPI::toJsonValue(m_primary_mime_types));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_product_url_isSet) {
        obj.insert(QString("productUrl"), ::OpenAPI::toJsonValue(m_product_url));
    }
    if (m_secondary_file_extensions.size() > 0) {
        obj.insert(QString("secondaryFileExtensions"), ::OpenAPI::toJsonValue(m_secondary_file_extensions));
    }
    if (m_secondary_mime_types.size() > 0) {
        obj.insert(QString("secondaryMimeTypes"), ::OpenAPI::toJsonValue(m_secondary_mime_types));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("shortDescription"), ::OpenAPI::toJsonValue(m_short_description));
    }
    if (m_supports_create_isSet) {
        obj.insert(QString("supportsCreate"), ::OpenAPI::toJsonValue(m_supports_create));
    }
    if (m_supports_import_isSet) {
        obj.insert(QString("supportsImport"), ::OpenAPI::toJsonValue(m_supports_import));
    }
    if (m_supports_multi_open_isSet) {
        obj.insert(QString("supportsMultiOpen"), ::OpenAPI::toJsonValue(m_supports_multi_open));
    }
    if (m_supports_offline_create_isSet) {
        obj.insert(QString("supportsOfflineCreate"), ::OpenAPI::toJsonValue(m_supports_offline_create));
    }
    if (m_use_by_default_isSet) {
        obj.insert(QString("useByDefault"), ::OpenAPI::toJsonValue(m_use_by_default));
    }
    return obj;
}

bool OAIApp::isAuthorized() const {
    return m_authorized;
}
void OAIApp::setAuthorized(const bool &authorized) {
    m_authorized = authorized;
    m_authorized_isSet = true;
}

bool OAIApp::is_authorized_Set() const{
    return m_authorized_isSet;
}

bool OAIApp::is_authorized_Valid() const{
    return m_authorized_isValid;
}

QString OAIApp::getCreateInFolderTemplate() const {
    return m_create_in_folder_template;
}
void OAIApp::setCreateInFolderTemplate(const QString &create_in_folder_template) {
    m_create_in_folder_template = create_in_folder_template;
    m_create_in_folder_template_isSet = true;
}

bool OAIApp::is_create_in_folder_template_Set() const{
    return m_create_in_folder_template_isSet;
}

bool OAIApp::is_create_in_folder_template_Valid() const{
    return m_create_in_folder_template_isValid;
}

QString OAIApp::getCreateUrl() const {
    return m_create_url;
}
void OAIApp::setCreateUrl(const QString &create_url) {
    m_create_url = create_url;
    m_create_url_isSet = true;
}

bool OAIApp::is_create_url_Set() const{
    return m_create_url_isSet;
}

bool OAIApp::is_create_url_Valid() const{
    return m_create_url_isValid;
}

bool OAIApp::isHasDriveWideScope() const {
    return m_has_drive_wide_scope;
}
void OAIApp::setHasDriveWideScope(const bool &has_drive_wide_scope) {
    m_has_drive_wide_scope = has_drive_wide_scope;
    m_has_drive_wide_scope_isSet = true;
}

bool OAIApp::is_has_drive_wide_scope_Set() const{
    return m_has_drive_wide_scope_isSet;
}

bool OAIApp::is_has_drive_wide_scope_Valid() const{
    return m_has_drive_wide_scope_isValid;
}

QList<OAIApp_icons_inner> OAIApp::getIcons() const {
    return m_icons;
}
void OAIApp::setIcons(const QList<OAIApp_icons_inner> &icons) {
    m_icons = icons;
    m_icons_isSet = true;
}

bool OAIApp::is_icons_Set() const{
    return m_icons_isSet;
}

bool OAIApp::is_icons_Valid() const{
    return m_icons_isValid;
}

QString OAIApp::getId() const {
    return m_id;
}
void OAIApp::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApp::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApp::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIApp::isInstalled() const {
    return m_installed;
}
void OAIApp::setInstalled(const bool &installed) {
    m_installed = installed;
    m_installed_isSet = true;
}

bool OAIApp::is_installed_Set() const{
    return m_installed_isSet;
}

bool OAIApp::is_installed_Valid() const{
    return m_installed_isValid;
}

QString OAIApp::getKind() const {
    return m_kind;
}
void OAIApp::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIApp::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIApp::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIApp::getLongDescription() const {
    return m_long_description;
}
void OAIApp::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAIApp::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAIApp::is_long_description_Valid() const{
    return m_long_description_isValid;
}

QString OAIApp::getName() const {
    return m_name;
}
void OAIApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApp::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApp::getObjectType() const {
    return m_object_type;
}
void OAIApp::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIApp::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIApp::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIApp::getOpenUrlTemplate() const {
    return m_open_url_template;
}
void OAIApp::setOpenUrlTemplate(const QString &open_url_template) {
    m_open_url_template = open_url_template;
    m_open_url_template_isSet = true;
}

bool OAIApp::is_open_url_template_Set() const{
    return m_open_url_template_isSet;
}

bool OAIApp::is_open_url_template_Valid() const{
    return m_open_url_template_isValid;
}

QList<QString> OAIApp::getPrimaryFileExtensions() const {
    return m_primary_file_extensions;
}
void OAIApp::setPrimaryFileExtensions(const QList<QString> &primary_file_extensions) {
    m_primary_file_extensions = primary_file_extensions;
    m_primary_file_extensions_isSet = true;
}

bool OAIApp::is_primary_file_extensions_Set() const{
    return m_primary_file_extensions_isSet;
}

bool OAIApp::is_primary_file_extensions_Valid() const{
    return m_primary_file_extensions_isValid;
}

QList<QString> OAIApp::getPrimaryMimeTypes() const {
    return m_primary_mime_types;
}
void OAIApp::setPrimaryMimeTypes(const QList<QString> &primary_mime_types) {
    m_primary_mime_types = primary_mime_types;
    m_primary_mime_types_isSet = true;
}

bool OAIApp::is_primary_mime_types_Set() const{
    return m_primary_mime_types_isSet;
}

bool OAIApp::is_primary_mime_types_Valid() const{
    return m_primary_mime_types_isValid;
}

QString OAIApp::getProductId() const {
    return m_product_id;
}
void OAIApp::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIApp::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIApp::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIApp::getProductUrl() const {
    return m_product_url;
}
void OAIApp::setProductUrl(const QString &product_url) {
    m_product_url = product_url;
    m_product_url_isSet = true;
}

bool OAIApp::is_product_url_Set() const{
    return m_product_url_isSet;
}

bool OAIApp::is_product_url_Valid() const{
    return m_product_url_isValid;
}

QList<QString> OAIApp::getSecondaryFileExtensions() const {
    return m_secondary_file_extensions;
}
void OAIApp::setSecondaryFileExtensions(const QList<QString> &secondary_file_extensions) {
    m_secondary_file_extensions = secondary_file_extensions;
    m_secondary_file_extensions_isSet = true;
}

bool OAIApp::is_secondary_file_extensions_Set() const{
    return m_secondary_file_extensions_isSet;
}

bool OAIApp::is_secondary_file_extensions_Valid() const{
    return m_secondary_file_extensions_isValid;
}

QList<QString> OAIApp::getSecondaryMimeTypes() const {
    return m_secondary_mime_types;
}
void OAIApp::setSecondaryMimeTypes(const QList<QString> &secondary_mime_types) {
    m_secondary_mime_types = secondary_mime_types;
    m_secondary_mime_types_isSet = true;
}

bool OAIApp::is_secondary_mime_types_Set() const{
    return m_secondary_mime_types_isSet;
}

bool OAIApp::is_secondary_mime_types_Valid() const{
    return m_secondary_mime_types_isValid;
}

QString OAIApp::getShortDescription() const {
    return m_short_description;
}
void OAIApp::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIApp::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIApp::is_short_description_Valid() const{
    return m_short_description_isValid;
}

bool OAIApp::isSupportsCreate() const {
    return m_supports_create;
}
void OAIApp::setSupportsCreate(const bool &supports_create) {
    m_supports_create = supports_create;
    m_supports_create_isSet = true;
}

bool OAIApp::is_supports_create_Set() const{
    return m_supports_create_isSet;
}

bool OAIApp::is_supports_create_Valid() const{
    return m_supports_create_isValid;
}

bool OAIApp::isSupportsImport() const {
    return m_supports_import;
}
void OAIApp::setSupportsImport(const bool &supports_import) {
    m_supports_import = supports_import;
    m_supports_import_isSet = true;
}

bool OAIApp::is_supports_import_Set() const{
    return m_supports_import_isSet;
}

bool OAIApp::is_supports_import_Valid() const{
    return m_supports_import_isValid;
}

bool OAIApp::isSupportsMultiOpen() const {
    return m_supports_multi_open;
}
void OAIApp::setSupportsMultiOpen(const bool &supports_multi_open) {
    m_supports_multi_open = supports_multi_open;
    m_supports_multi_open_isSet = true;
}

bool OAIApp::is_supports_multi_open_Set() const{
    return m_supports_multi_open_isSet;
}

bool OAIApp::is_supports_multi_open_Valid() const{
    return m_supports_multi_open_isValid;
}

bool OAIApp::isSupportsOfflineCreate() const {
    return m_supports_offline_create;
}
void OAIApp::setSupportsOfflineCreate(const bool &supports_offline_create) {
    m_supports_offline_create = supports_offline_create;
    m_supports_offline_create_isSet = true;
}

bool OAIApp::is_supports_offline_create_Set() const{
    return m_supports_offline_create_isSet;
}

bool OAIApp::is_supports_offline_create_Valid() const{
    return m_supports_offline_create_isValid;
}

bool OAIApp::isUseByDefault() const {
    return m_use_by_default;
}
void OAIApp::setUseByDefault(const bool &use_by_default) {
    m_use_by_default = use_by_default;
    m_use_by_default_isSet = true;
}

bool OAIApp::is_use_by_default_Set() const{
    return m_use_by_default_isSet;
}

bool OAIApp::is_use_by_default_Valid() const{
    return m_use_by_default_isValid;
}

bool OAIApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_in_folder_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_drive_wide_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_url_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_file_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_mime_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_file_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_mime_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_import_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_multi_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supports_offline_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_by_default_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
