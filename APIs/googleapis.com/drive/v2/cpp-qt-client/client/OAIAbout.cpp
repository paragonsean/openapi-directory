/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbout::OAIAbout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbout::OAIAbout() {
    this->initializeModel();
}

OAIAbout::~OAIAbout() {}

void OAIAbout::initializeModel() {

    m_additional_role_info_isSet = false;
    m_additional_role_info_isValid = false;

    m_can_create_drives_isSet = false;
    m_can_create_drives_isValid = false;

    m_can_create_team_drives_isSet = false;
    m_can_create_team_drives_isValid = false;

    m_domain_sharing_policy_isSet = false;
    m_domain_sharing_policy_isValid = false;

    m_drive_themes_isSet = false;
    m_drive_themes_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_export_formats_isSet = false;
    m_export_formats_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_folder_color_palette_isSet = false;
    m_folder_color_palette_isValid = false;

    m_import_formats_isSet = false;
    m_import_formats_isValid = false;

    m_is_current_app_installed_isSet = false;
    m_is_current_app_installed_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_largest_change_id_isSet = false;
    m_largest_change_id_isValid = false;

    m_max_upload_sizes_isSet = false;
    m_max_upload_sizes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_id_isSet = false;
    m_permission_id_isValid = false;

    m_quota_bytes_by_service_isSet = false;
    m_quota_bytes_by_service_isValid = false;

    m_quota_bytes_total_isSet = false;
    m_quota_bytes_total_isValid = false;

    m_quota_bytes_used_isSet = false;
    m_quota_bytes_used_isValid = false;

    m_quota_bytes_used_aggregate_isSet = false;
    m_quota_bytes_used_aggregate_isValid = false;

    m_quota_bytes_used_in_trash_isSet = false;
    m_quota_bytes_used_in_trash_isValid = false;

    m_quota_type_isSet = false;
    m_quota_type_isValid = false;

    m_remaining_change_ids_isSet = false;
    m_remaining_change_ids_isValid = false;

    m_root_folder_id_isSet = false;
    m_root_folder_id_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_team_drive_themes_isSet = false;
    m_team_drive_themes_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIAbout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbout::fromJsonObject(QJsonObject json) {

    m_additional_role_info_isValid = ::OpenAPI::fromJsonValue(m_additional_role_info, json[QString("additionalRoleInfo")]);
    m_additional_role_info_isSet = !json[QString("additionalRoleInfo")].isNull() && m_additional_role_info_isValid;

    m_can_create_drives_isValid = ::OpenAPI::fromJsonValue(m_can_create_drives, json[QString("canCreateDrives")]);
    m_can_create_drives_isSet = !json[QString("canCreateDrives")].isNull() && m_can_create_drives_isValid;

    m_can_create_team_drives_isValid = ::OpenAPI::fromJsonValue(m_can_create_team_drives, json[QString("canCreateTeamDrives")]);
    m_can_create_team_drives_isSet = !json[QString("canCreateTeamDrives")].isNull() && m_can_create_team_drives_isValid;

    m_domain_sharing_policy_isValid = ::OpenAPI::fromJsonValue(m_domain_sharing_policy, json[QString("domainSharingPolicy")]);
    m_domain_sharing_policy_isSet = !json[QString("domainSharingPolicy")].isNull() && m_domain_sharing_policy_isValid;

    m_drive_themes_isValid = ::OpenAPI::fromJsonValue(m_drive_themes, json[QString("driveThemes")]);
    m_drive_themes_isSet = !json[QString("driveThemes")].isNull() && m_drive_themes_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_export_formats_isValid = ::OpenAPI::fromJsonValue(m_export_formats, json[QString("exportFormats")]);
    m_export_formats_isSet = !json[QString("exportFormats")].isNull() && m_export_formats_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_folder_color_palette_isValid = ::OpenAPI::fromJsonValue(m_folder_color_palette, json[QString("folderColorPalette")]);
    m_folder_color_palette_isSet = !json[QString("folderColorPalette")].isNull() && m_folder_color_palette_isValid;

    m_import_formats_isValid = ::OpenAPI::fromJsonValue(m_import_formats, json[QString("importFormats")]);
    m_import_formats_isSet = !json[QString("importFormats")].isNull() && m_import_formats_isValid;

    m_is_current_app_installed_isValid = ::OpenAPI::fromJsonValue(m_is_current_app_installed, json[QString("isCurrentAppInstalled")]);
    m_is_current_app_installed_isSet = !json[QString("isCurrentAppInstalled")].isNull() && m_is_current_app_installed_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("languageCode")]);
    m_language_code_isSet = !json[QString("languageCode")].isNull() && m_language_code_isValid;

    m_largest_change_id_isValid = ::OpenAPI::fromJsonValue(m_largest_change_id, json[QString("largestChangeId")]);
    m_largest_change_id_isSet = !json[QString("largestChangeId")].isNull() && m_largest_change_id_isValid;

    m_max_upload_sizes_isValid = ::OpenAPI::fromJsonValue(m_max_upload_sizes, json[QString("maxUploadSizes")]);
    m_max_upload_sizes_isSet = !json[QString("maxUploadSizes")].isNull() && m_max_upload_sizes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_id_isValid = ::OpenAPI::fromJsonValue(m_permission_id, json[QString("permissionId")]);
    m_permission_id_isSet = !json[QString("permissionId")].isNull() && m_permission_id_isValid;

    m_quota_bytes_by_service_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_by_service, json[QString("quotaBytesByService")]);
    m_quota_bytes_by_service_isSet = !json[QString("quotaBytesByService")].isNull() && m_quota_bytes_by_service_isValid;

    m_quota_bytes_total_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_total, json[QString("quotaBytesTotal")]);
    m_quota_bytes_total_isSet = !json[QString("quotaBytesTotal")].isNull() && m_quota_bytes_total_isValid;

    m_quota_bytes_used_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_used, json[QString("quotaBytesUsed")]);
    m_quota_bytes_used_isSet = !json[QString("quotaBytesUsed")].isNull() && m_quota_bytes_used_isValid;

    m_quota_bytes_used_aggregate_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_used_aggregate, json[QString("quotaBytesUsedAggregate")]);
    m_quota_bytes_used_aggregate_isSet = !json[QString("quotaBytesUsedAggregate")].isNull() && m_quota_bytes_used_aggregate_isValid;

    m_quota_bytes_used_in_trash_isValid = ::OpenAPI::fromJsonValue(m_quota_bytes_used_in_trash, json[QString("quotaBytesUsedInTrash")]);
    m_quota_bytes_used_in_trash_isSet = !json[QString("quotaBytesUsedInTrash")].isNull() && m_quota_bytes_used_in_trash_isValid;

    m_quota_type_isValid = ::OpenAPI::fromJsonValue(m_quota_type, json[QString("quotaType")]);
    m_quota_type_isSet = !json[QString("quotaType")].isNull() && m_quota_type_isValid;

    m_remaining_change_ids_isValid = ::OpenAPI::fromJsonValue(m_remaining_change_ids, json[QString("remainingChangeIds")]);
    m_remaining_change_ids_isSet = !json[QString("remainingChangeIds")].isNull() && m_remaining_change_ids_isValid;

    m_root_folder_id_isValid = ::OpenAPI::fromJsonValue(m_root_folder_id, json[QString("rootFolderId")]);
    m_root_folder_id_isSet = !json[QString("rootFolderId")].isNull() && m_root_folder_id_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_team_drive_themes_isValid = ::OpenAPI::fromJsonValue(m_team_drive_themes, json[QString("teamDriveThemes")]);
    m_team_drive_themes_isSet = !json[QString("teamDriveThemes")].isNull() && m_team_drive_themes_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIAbout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbout::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_role_info.size() > 0) {
        obj.insert(QString("additionalRoleInfo"), ::OpenAPI::toJsonValue(m_additional_role_info));
    }
    if (m_can_create_drives_isSet) {
        obj.insert(QString("canCreateDrives"), ::OpenAPI::toJsonValue(m_can_create_drives));
    }
    if (m_can_create_team_drives_isSet) {
        obj.insert(QString("canCreateTeamDrives"), ::OpenAPI::toJsonValue(m_can_create_team_drives));
    }
    if (m_domain_sharing_policy_isSet) {
        obj.insert(QString("domainSharingPolicy"), ::OpenAPI::toJsonValue(m_domain_sharing_policy));
    }
    if (m_drive_themes.size() > 0) {
        obj.insert(QString("driveThemes"), ::OpenAPI::toJsonValue(m_drive_themes));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_export_formats.size() > 0) {
        obj.insert(QString("exportFormats"), ::OpenAPI::toJsonValue(m_export_formats));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_folder_color_palette.size() > 0) {
        obj.insert(QString("folderColorPalette"), ::OpenAPI::toJsonValue(m_folder_color_palette));
    }
    if (m_import_formats.size() > 0) {
        obj.insert(QString("importFormats"), ::OpenAPI::toJsonValue(m_import_formats));
    }
    if (m_is_current_app_installed_isSet) {
        obj.insert(QString("isCurrentAppInstalled"), ::OpenAPI::toJsonValue(m_is_current_app_installed));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("languageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_largest_change_id_isSet) {
        obj.insert(QString("largestChangeId"), ::OpenAPI::toJsonValue(m_largest_change_id));
    }
    if (m_max_upload_sizes.size() > 0) {
        obj.insert(QString("maxUploadSizes"), ::OpenAPI::toJsonValue(m_max_upload_sizes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_id_isSet) {
        obj.insert(QString("permissionId"), ::OpenAPI::toJsonValue(m_permission_id));
    }
    if (m_quota_bytes_by_service.size() > 0) {
        obj.insert(QString("quotaBytesByService"), ::OpenAPI::toJsonValue(m_quota_bytes_by_service));
    }
    if (m_quota_bytes_total_isSet) {
        obj.insert(QString("quotaBytesTotal"), ::OpenAPI::toJsonValue(m_quota_bytes_total));
    }
    if (m_quota_bytes_used_isSet) {
        obj.insert(QString("quotaBytesUsed"), ::OpenAPI::toJsonValue(m_quota_bytes_used));
    }
    if (m_quota_bytes_used_aggregate_isSet) {
        obj.insert(QString("quotaBytesUsedAggregate"), ::OpenAPI::toJsonValue(m_quota_bytes_used_aggregate));
    }
    if (m_quota_bytes_used_in_trash_isSet) {
        obj.insert(QString("quotaBytesUsedInTrash"), ::OpenAPI::toJsonValue(m_quota_bytes_used_in_trash));
    }
    if (m_quota_type_isSet) {
        obj.insert(QString("quotaType"), ::OpenAPI::toJsonValue(m_quota_type));
    }
    if (m_remaining_change_ids_isSet) {
        obj.insert(QString("remainingChangeIds"), ::OpenAPI::toJsonValue(m_remaining_change_ids));
    }
    if (m_root_folder_id_isSet) {
        obj.insert(QString("rootFolderId"), ::OpenAPI::toJsonValue(m_root_folder_id));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_team_drive_themes.size() > 0) {
        obj.insert(QString("teamDriveThemes"), ::OpenAPI::toJsonValue(m_team_drive_themes));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAbout_additionalRoleInfo_inner> OAIAbout::getAdditionalRoleInfo() const {
    return m_additional_role_info;
}
void OAIAbout::setAdditionalRoleInfo(const QList<OAIAbout_additionalRoleInfo_inner> &additional_role_info) {
    m_additional_role_info = additional_role_info;
    m_additional_role_info_isSet = true;
}

bool OAIAbout::is_additional_role_info_Set() const{
    return m_additional_role_info_isSet;
}

bool OAIAbout::is_additional_role_info_Valid() const{
    return m_additional_role_info_isValid;
}

bool OAIAbout::isCanCreateDrives() const {
    return m_can_create_drives;
}
void OAIAbout::setCanCreateDrives(const bool &can_create_drives) {
    m_can_create_drives = can_create_drives;
    m_can_create_drives_isSet = true;
}

bool OAIAbout::is_can_create_drives_Set() const{
    return m_can_create_drives_isSet;
}

bool OAIAbout::is_can_create_drives_Valid() const{
    return m_can_create_drives_isValid;
}

bool OAIAbout::isCanCreateTeamDrives() const {
    return m_can_create_team_drives;
}
void OAIAbout::setCanCreateTeamDrives(const bool &can_create_team_drives) {
    m_can_create_team_drives = can_create_team_drives;
    m_can_create_team_drives_isSet = true;
}

bool OAIAbout::is_can_create_team_drives_Set() const{
    return m_can_create_team_drives_isSet;
}

bool OAIAbout::is_can_create_team_drives_Valid() const{
    return m_can_create_team_drives_isValid;
}

QString OAIAbout::getDomainSharingPolicy() const {
    return m_domain_sharing_policy;
}
void OAIAbout::setDomainSharingPolicy(const QString &domain_sharing_policy) {
    m_domain_sharing_policy = domain_sharing_policy;
    m_domain_sharing_policy_isSet = true;
}

bool OAIAbout::is_domain_sharing_policy_Set() const{
    return m_domain_sharing_policy_isSet;
}

bool OAIAbout::is_domain_sharing_policy_Valid() const{
    return m_domain_sharing_policy_isValid;
}

QList<OAIAbout_driveThemes_inner> OAIAbout::getDriveThemes() const {
    return m_drive_themes;
}
void OAIAbout::setDriveThemes(const QList<OAIAbout_driveThemes_inner> &drive_themes) {
    m_drive_themes = drive_themes;
    m_drive_themes_isSet = true;
}

bool OAIAbout::is_drive_themes_Set() const{
    return m_drive_themes_isSet;
}

bool OAIAbout::is_drive_themes_Valid() const{
    return m_drive_themes_isValid;
}

QString OAIAbout::getEtag() const {
    return m_etag;
}
void OAIAbout::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIAbout::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIAbout::is_etag_Valid() const{
    return m_etag_isValid;
}

QList<OAIAbout_exportFormats_inner> OAIAbout::getExportFormats() const {
    return m_export_formats;
}
void OAIAbout::setExportFormats(const QList<OAIAbout_exportFormats_inner> &export_formats) {
    m_export_formats = export_formats;
    m_export_formats_isSet = true;
}

bool OAIAbout::is_export_formats_Set() const{
    return m_export_formats_isSet;
}

bool OAIAbout::is_export_formats_Valid() const{
    return m_export_formats_isValid;
}

QList<OAIAbout_features_inner> OAIAbout::getFeatures() const {
    return m_features;
}
void OAIAbout::setFeatures(const QList<OAIAbout_features_inner> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIAbout::is_features_Set() const{
    return m_features_isSet;
}

bool OAIAbout::is_features_Valid() const{
    return m_features_isValid;
}

QList<QString> OAIAbout::getFolderColorPalette() const {
    return m_folder_color_palette;
}
void OAIAbout::setFolderColorPalette(const QList<QString> &folder_color_palette) {
    m_folder_color_palette = folder_color_palette;
    m_folder_color_palette_isSet = true;
}

bool OAIAbout::is_folder_color_palette_Set() const{
    return m_folder_color_palette_isSet;
}

bool OAIAbout::is_folder_color_palette_Valid() const{
    return m_folder_color_palette_isValid;
}

QList<OAIAbout_importFormats_inner> OAIAbout::getImportFormats() const {
    return m_import_formats;
}
void OAIAbout::setImportFormats(const QList<OAIAbout_importFormats_inner> &import_formats) {
    m_import_formats = import_formats;
    m_import_formats_isSet = true;
}

bool OAIAbout::is_import_formats_Set() const{
    return m_import_formats_isSet;
}

bool OAIAbout::is_import_formats_Valid() const{
    return m_import_formats_isValid;
}

bool OAIAbout::isIsCurrentAppInstalled() const {
    return m_is_current_app_installed;
}
void OAIAbout::setIsCurrentAppInstalled(const bool &is_current_app_installed) {
    m_is_current_app_installed = is_current_app_installed;
    m_is_current_app_installed_isSet = true;
}

bool OAIAbout::is_is_current_app_installed_Set() const{
    return m_is_current_app_installed_isSet;
}

bool OAIAbout::is_is_current_app_installed_Valid() const{
    return m_is_current_app_installed_isValid;
}

QString OAIAbout::getKind() const {
    return m_kind;
}
void OAIAbout::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAbout::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAbout::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAbout::getLanguageCode() const {
    return m_language_code;
}
void OAIAbout::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIAbout::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIAbout::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAIAbout::getLargestChangeId() const {
    return m_largest_change_id;
}
void OAIAbout::setLargestChangeId(const QString &largest_change_id) {
    m_largest_change_id = largest_change_id;
    m_largest_change_id_isSet = true;
}

bool OAIAbout::is_largest_change_id_Set() const{
    return m_largest_change_id_isSet;
}

bool OAIAbout::is_largest_change_id_Valid() const{
    return m_largest_change_id_isValid;
}

QList<OAIAbout_maxUploadSizes_inner> OAIAbout::getMaxUploadSizes() const {
    return m_max_upload_sizes;
}
void OAIAbout::setMaxUploadSizes(const QList<OAIAbout_maxUploadSizes_inner> &max_upload_sizes) {
    m_max_upload_sizes = max_upload_sizes;
    m_max_upload_sizes_isSet = true;
}

bool OAIAbout::is_max_upload_sizes_Set() const{
    return m_max_upload_sizes_isSet;
}

bool OAIAbout::is_max_upload_sizes_Valid() const{
    return m_max_upload_sizes_isValid;
}

QString OAIAbout::getName() const {
    return m_name;
}
void OAIAbout::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAbout::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAbout::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAbout::getPermissionId() const {
    return m_permission_id;
}
void OAIAbout::setPermissionId(const QString &permission_id) {
    m_permission_id = permission_id;
    m_permission_id_isSet = true;
}

bool OAIAbout::is_permission_id_Set() const{
    return m_permission_id_isSet;
}

bool OAIAbout::is_permission_id_Valid() const{
    return m_permission_id_isValid;
}

QList<OAIAbout_quotaBytesByService_inner> OAIAbout::getQuotaBytesByService() const {
    return m_quota_bytes_by_service;
}
void OAIAbout::setQuotaBytesByService(const QList<OAIAbout_quotaBytesByService_inner> &quota_bytes_by_service) {
    m_quota_bytes_by_service = quota_bytes_by_service;
    m_quota_bytes_by_service_isSet = true;
}

bool OAIAbout::is_quota_bytes_by_service_Set() const{
    return m_quota_bytes_by_service_isSet;
}

bool OAIAbout::is_quota_bytes_by_service_Valid() const{
    return m_quota_bytes_by_service_isValid;
}

QString OAIAbout::getQuotaBytesTotal() const {
    return m_quota_bytes_total;
}
void OAIAbout::setQuotaBytesTotal(const QString &quota_bytes_total) {
    m_quota_bytes_total = quota_bytes_total;
    m_quota_bytes_total_isSet = true;
}

bool OAIAbout::is_quota_bytes_total_Set() const{
    return m_quota_bytes_total_isSet;
}

bool OAIAbout::is_quota_bytes_total_Valid() const{
    return m_quota_bytes_total_isValid;
}

QString OAIAbout::getQuotaBytesUsed() const {
    return m_quota_bytes_used;
}
void OAIAbout::setQuotaBytesUsed(const QString &quota_bytes_used) {
    m_quota_bytes_used = quota_bytes_used;
    m_quota_bytes_used_isSet = true;
}

bool OAIAbout::is_quota_bytes_used_Set() const{
    return m_quota_bytes_used_isSet;
}

bool OAIAbout::is_quota_bytes_used_Valid() const{
    return m_quota_bytes_used_isValid;
}

QString OAIAbout::getQuotaBytesUsedAggregate() const {
    return m_quota_bytes_used_aggregate;
}
void OAIAbout::setQuotaBytesUsedAggregate(const QString &quota_bytes_used_aggregate) {
    m_quota_bytes_used_aggregate = quota_bytes_used_aggregate;
    m_quota_bytes_used_aggregate_isSet = true;
}

bool OAIAbout::is_quota_bytes_used_aggregate_Set() const{
    return m_quota_bytes_used_aggregate_isSet;
}

bool OAIAbout::is_quota_bytes_used_aggregate_Valid() const{
    return m_quota_bytes_used_aggregate_isValid;
}

QString OAIAbout::getQuotaBytesUsedInTrash() const {
    return m_quota_bytes_used_in_trash;
}
void OAIAbout::setQuotaBytesUsedInTrash(const QString &quota_bytes_used_in_trash) {
    m_quota_bytes_used_in_trash = quota_bytes_used_in_trash;
    m_quota_bytes_used_in_trash_isSet = true;
}

bool OAIAbout::is_quota_bytes_used_in_trash_Set() const{
    return m_quota_bytes_used_in_trash_isSet;
}

bool OAIAbout::is_quota_bytes_used_in_trash_Valid() const{
    return m_quota_bytes_used_in_trash_isValid;
}

QString OAIAbout::getQuotaType() const {
    return m_quota_type;
}
void OAIAbout::setQuotaType(const QString &quota_type) {
    m_quota_type = quota_type;
    m_quota_type_isSet = true;
}

bool OAIAbout::is_quota_type_Set() const{
    return m_quota_type_isSet;
}

bool OAIAbout::is_quota_type_Valid() const{
    return m_quota_type_isValid;
}

QString OAIAbout::getRemainingChangeIds() const {
    return m_remaining_change_ids;
}
void OAIAbout::setRemainingChangeIds(const QString &remaining_change_ids) {
    m_remaining_change_ids = remaining_change_ids;
    m_remaining_change_ids_isSet = true;
}

bool OAIAbout::is_remaining_change_ids_Set() const{
    return m_remaining_change_ids_isSet;
}

bool OAIAbout::is_remaining_change_ids_Valid() const{
    return m_remaining_change_ids_isValid;
}

QString OAIAbout::getRootFolderId() const {
    return m_root_folder_id;
}
void OAIAbout::setRootFolderId(const QString &root_folder_id) {
    m_root_folder_id = root_folder_id;
    m_root_folder_id_isSet = true;
}

bool OAIAbout::is_root_folder_id_Set() const{
    return m_root_folder_id_isSet;
}

bool OAIAbout::is_root_folder_id_Valid() const{
    return m_root_folder_id_isValid;
}

QString OAIAbout::getSelfLink() const {
    return m_self_link;
}
void OAIAbout::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIAbout::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIAbout::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QList<OAIAbout_teamDriveThemes_inner> OAIAbout::getTeamDriveThemes() const {
    return m_team_drive_themes;
}
void OAIAbout::setTeamDriveThemes(const QList<OAIAbout_teamDriveThemes_inner> &team_drive_themes) {
    m_team_drive_themes = team_drive_themes;
    m_team_drive_themes_isSet = true;
}

bool OAIAbout::is_team_drive_themes_Set() const{
    return m_team_drive_themes_isSet;
}

bool OAIAbout::is_team_drive_themes_Valid() const{
    return m_team_drive_themes_isValid;
}

OAIUser OAIAbout::getUser() const {
    return m_user;
}
void OAIAbout::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIAbout::is_user_Set() const{
    return m_user_isSet;
}

bool OAIAbout::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIAbout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_role_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_create_team_drives_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_sharing_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_color_palette.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_current_app_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_largest_change_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_upload_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_by_service.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_used_aggregate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_bytes_used_in_trash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_change_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_drive_themes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
