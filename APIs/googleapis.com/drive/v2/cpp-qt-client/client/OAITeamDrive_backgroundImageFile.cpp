/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamDrive_backgroundImageFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamDrive_backgroundImageFile::OAITeamDrive_backgroundImageFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamDrive_backgroundImageFile::OAITeamDrive_backgroundImageFile() {
    this->initializeModel();
}

OAITeamDrive_backgroundImageFile::~OAITeamDrive_backgroundImageFile() {}

void OAITeamDrive_backgroundImageFile::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_x_coordinate_isSet = false;
    m_x_coordinate_isValid = false;

    m_y_coordinate_isSet = false;
    m_y_coordinate_isValid = false;
}

void OAITeamDrive_backgroundImageFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamDrive_backgroundImageFile::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_x_coordinate_isValid = ::OpenAPI::fromJsonValue(m_x_coordinate, json[QString("xCoordinate")]);
    m_x_coordinate_isSet = !json[QString("xCoordinate")].isNull() && m_x_coordinate_isValid;

    m_y_coordinate_isValid = ::OpenAPI::fromJsonValue(m_y_coordinate, json[QString("yCoordinate")]);
    m_y_coordinate_isSet = !json[QString("yCoordinate")].isNull() && m_y_coordinate_isValid;
}

QString OAITeamDrive_backgroundImageFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamDrive_backgroundImageFile::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_x_coordinate_isSet) {
        obj.insert(QString("xCoordinate"), ::OpenAPI::toJsonValue(m_x_coordinate));
    }
    if (m_y_coordinate_isSet) {
        obj.insert(QString("yCoordinate"), ::OpenAPI::toJsonValue(m_y_coordinate));
    }
    return obj;
}

QString OAITeamDrive_backgroundImageFile::getId() const {
    return m_id;
}
void OAITeamDrive_backgroundImageFile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITeamDrive_backgroundImageFile::is_id_Set() const{
    return m_id_isSet;
}

bool OAITeamDrive_backgroundImageFile::is_id_Valid() const{
    return m_id_isValid;
}

float OAITeamDrive_backgroundImageFile::getWidth() const {
    return m_width;
}
void OAITeamDrive_backgroundImageFile::setWidth(const float &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAITeamDrive_backgroundImageFile::is_width_Set() const{
    return m_width_isSet;
}

bool OAITeamDrive_backgroundImageFile::is_width_Valid() const{
    return m_width_isValid;
}

float OAITeamDrive_backgroundImageFile::getXCoordinate() const {
    return m_x_coordinate;
}
void OAITeamDrive_backgroundImageFile::setXCoordinate(const float &x_coordinate) {
    m_x_coordinate = x_coordinate;
    m_x_coordinate_isSet = true;
}

bool OAITeamDrive_backgroundImageFile::is_x_coordinate_Set() const{
    return m_x_coordinate_isSet;
}

bool OAITeamDrive_backgroundImageFile::is_x_coordinate_Valid() const{
    return m_x_coordinate_isValid;
}

float OAITeamDrive_backgroundImageFile::getYCoordinate() const {
    return m_y_coordinate;
}
void OAITeamDrive_backgroundImageFile::setYCoordinate(const float &y_coordinate) {
    m_y_coordinate = y_coordinate;
    m_y_coordinate_isSet = true;
}

bool OAITeamDrive_backgroundImageFile::is_y_coordinate_Set() const{
    return m_y_coordinate_isSet;
}

bool OAITeamDrive_backgroundImageFile::is_y_coordinate_Valid() const{
    return m_y_coordinate_isValid;
}

bool OAITeamDrive_backgroundImageFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_x_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_y_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamDrive_backgroundImageFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
