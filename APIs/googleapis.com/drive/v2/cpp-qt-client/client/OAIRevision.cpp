/**
 * Google Drive API
 * The Google Drive API allows clients to access resources from Google Drive.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevision::OAIRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevision::OAIRevision() {
    this->initializeModel();
}

OAIRevision::~OAIRevision() {}

void OAIRevision::initializeModel() {

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_export_links_isSet = false;
    m_export_links_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_last_modifying_user_isSet = false;
    m_last_modifying_user_isValid = false;

    m_last_modifying_user_name_isSet = false;
    m_last_modifying_user_name_isValid = false;

    m_md5_checksum_isSet = false;
    m_md5_checksum_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_original_filename_isSet = false;
    m_original_filename_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_publish_auto_isSet = false;
    m_publish_auto_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_published_link_isSet = false;
    m_published_link_isValid = false;

    m_published_outside_domain_isSet = false;
    m_published_outside_domain_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;
}

void OAIRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevision::fromJsonObject(QJsonObject json) {

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_export_links_isValid = ::OpenAPI::fromJsonValue(m_export_links, json[QString("exportLinks")]);
    m_export_links_isSet = !json[QString("exportLinks")].isNull() && m_export_links_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("fileSize")]);
    m_file_size_isSet = !json[QString("fileSize")].isNull() && m_file_size_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_last_modifying_user_isValid = ::OpenAPI::fromJsonValue(m_last_modifying_user, json[QString("lastModifyingUser")]);
    m_last_modifying_user_isSet = !json[QString("lastModifyingUser")].isNull() && m_last_modifying_user_isValid;

    m_last_modifying_user_name_isValid = ::OpenAPI::fromJsonValue(m_last_modifying_user_name, json[QString("lastModifyingUserName")]);
    m_last_modifying_user_name_isSet = !json[QString("lastModifyingUserName")].isNull() && m_last_modifying_user_name_isValid;

    m_md5_checksum_isValid = ::OpenAPI::fromJsonValue(m_md5_checksum, json[QString("md5Checksum")]);
    m_md5_checksum_isSet = !json[QString("md5Checksum")].isNull() && m_md5_checksum_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modifiedDate")]);
    m_modified_date_isSet = !json[QString("modifiedDate")].isNull() && m_modified_date_isValid;

    m_original_filename_isValid = ::OpenAPI::fromJsonValue(m_original_filename, json[QString("originalFilename")]);
    m_original_filename_isSet = !json[QString("originalFilename")].isNull() && m_original_filename_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_publish_auto_isValid = ::OpenAPI::fromJsonValue(m_publish_auto, json[QString("publishAuto")]);
    m_publish_auto_isSet = !json[QString("publishAuto")].isNull() && m_publish_auto_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_published_link_isValid = ::OpenAPI::fromJsonValue(m_published_link, json[QString("publishedLink")]);
    m_published_link_isSet = !json[QString("publishedLink")].isNull() && m_published_link_isValid;

    m_published_outside_domain_isValid = ::OpenAPI::fromJsonValue(m_published_outside_domain, json[QString("publishedOutsideDomain")]);
    m_published_outside_domain_isSet = !json[QString("publishedOutsideDomain")].isNull() && m_published_outside_domain_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;
}

QString OAIRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_export_links.size() > 0) {
        obj.insert(QString("exportLinks"), ::OpenAPI::toJsonValue(m_export_links));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("fileSize"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_last_modifying_user.isSet()) {
        obj.insert(QString("lastModifyingUser"), ::OpenAPI::toJsonValue(m_last_modifying_user));
    }
    if (m_last_modifying_user_name_isSet) {
        obj.insert(QString("lastModifyingUserName"), ::OpenAPI::toJsonValue(m_last_modifying_user_name));
    }
    if (m_md5_checksum_isSet) {
        obj.insert(QString("md5Checksum"), ::OpenAPI::toJsonValue(m_md5_checksum));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modifiedDate"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_original_filename_isSet) {
        obj.insert(QString("originalFilename"), ::OpenAPI::toJsonValue(m_original_filename));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_publish_auto_isSet) {
        obj.insert(QString("publishAuto"), ::OpenAPI::toJsonValue(m_publish_auto));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_published_link_isSet) {
        obj.insert(QString("publishedLink"), ::OpenAPI::toJsonValue(m_published_link));
    }
    if (m_published_outside_domain_isSet) {
        obj.insert(QString("publishedOutsideDomain"), ::OpenAPI::toJsonValue(m_published_outside_domain));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    return obj;
}

QString OAIRevision::getDownloadUrl() const {
    return m_download_url;
}
void OAIRevision::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIRevision::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIRevision::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIRevision::getEtag() const {
    return m_etag;
}
void OAIRevision::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIRevision::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIRevision::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIRevision::getExportLinks() const {
    return m_export_links;
}
void OAIRevision::setExportLinks(const QMap<QString, QString> &export_links) {
    m_export_links = export_links;
    m_export_links_isSet = true;
}

bool OAIRevision::is_export_links_Set() const{
    return m_export_links_isSet;
}

bool OAIRevision::is_export_links_Valid() const{
    return m_export_links_isValid;
}

QString OAIRevision::getFileSize() const {
    return m_file_size;
}
void OAIRevision::setFileSize(const QString &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIRevision::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIRevision::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIRevision::getId() const {
    return m_id;
}
void OAIRevision::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRevision::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRevision::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRevision::getKind() const {
    return m_kind;
}
void OAIRevision::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRevision::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRevision::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIUser OAIRevision::getLastModifyingUser() const {
    return m_last_modifying_user;
}
void OAIRevision::setLastModifyingUser(const OAIUser &last_modifying_user) {
    m_last_modifying_user = last_modifying_user;
    m_last_modifying_user_isSet = true;
}

bool OAIRevision::is_last_modifying_user_Set() const{
    return m_last_modifying_user_isSet;
}

bool OAIRevision::is_last_modifying_user_Valid() const{
    return m_last_modifying_user_isValid;
}

QString OAIRevision::getLastModifyingUserName() const {
    return m_last_modifying_user_name;
}
void OAIRevision::setLastModifyingUserName(const QString &last_modifying_user_name) {
    m_last_modifying_user_name = last_modifying_user_name;
    m_last_modifying_user_name_isSet = true;
}

bool OAIRevision::is_last_modifying_user_name_Set() const{
    return m_last_modifying_user_name_isSet;
}

bool OAIRevision::is_last_modifying_user_name_Valid() const{
    return m_last_modifying_user_name_isValid;
}

QString OAIRevision::getMd5Checksum() const {
    return m_md5_checksum;
}
void OAIRevision::setMd5Checksum(const QString &md5_checksum) {
    m_md5_checksum = md5_checksum;
    m_md5_checksum_isSet = true;
}

bool OAIRevision::is_md5_checksum_Set() const{
    return m_md5_checksum_isSet;
}

bool OAIRevision::is_md5_checksum_Valid() const{
    return m_md5_checksum_isValid;
}

QString OAIRevision::getMimeType() const {
    return m_mime_type;
}
void OAIRevision::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIRevision::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIRevision::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QDateTime OAIRevision::getModifiedDate() const {
    return m_modified_date;
}
void OAIRevision::setModifiedDate(const QDateTime &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIRevision::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIRevision::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QString OAIRevision::getOriginalFilename() const {
    return m_original_filename;
}
void OAIRevision::setOriginalFilename(const QString &original_filename) {
    m_original_filename = original_filename;
    m_original_filename_isSet = true;
}

bool OAIRevision::is_original_filename_Set() const{
    return m_original_filename_isSet;
}

bool OAIRevision::is_original_filename_Valid() const{
    return m_original_filename_isValid;
}

bool OAIRevision::isPinned() const {
    return m_pinned;
}
void OAIRevision::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAIRevision::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAIRevision::is_pinned_Valid() const{
    return m_pinned_isValid;
}

bool OAIRevision::isPublishAuto() const {
    return m_publish_auto;
}
void OAIRevision::setPublishAuto(const bool &publish_auto) {
    m_publish_auto = publish_auto;
    m_publish_auto_isSet = true;
}

bool OAIRevision::is_publish_auto_Set() const{
    return m_publish_auto_isSet;
}

bool OAIRevision::is_publish_auto_Valid() const{
    return m_publish_auto_isValid;
}

bool OAIRevision::isPublished() const {
    return m_published;
}
void OAIRevision::setPublished(const bool &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIRevision::is_published_Set() const{
    return m_published_isSet;
}

bool OAIRevision::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIRevision::getPublishedLink() const {
    return m_published_link;
}
void OAIRevision::setPublishedLink(const QString &published_link) {
    m_published_link = published_link;
    m_published_link_isSet = true;
}

bool OAIRevision::is_published_link_Set() const{
    return m_published_link_isSet;
}

bool OAIRevision::is_published_link_Valid() const{
    return m_published_link_isValid;
}

bool OAIRevision::isPublishedOutsideDomain() const {
    return m_published_outside_domain;
}
void OAIRevision::setPublishedOutsideDomain(const bool &published_outside_domain) {
    m_published_outside_domain = published_outside_domain;
    m_published_outside_domain_isSet = true;
}

bool OAIRevision::is_published_outside_domain_Set() const{
    return m_published_outside_domain_isSet;
}

bool OAIRevision::is_published_outside_domain_Valid() const{
    return m_published_outside_domain_isValid;
}

QString OAIRevision::getSelfLink() const {
    return m_self_link;
}
void OAIRevision::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIRevision::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIRevision::is_self_link_Valid() const{
    return m_self_link_isValid;
}

bool OAIRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modifying_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modifying_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md5_checksum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_auto_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_outside_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
